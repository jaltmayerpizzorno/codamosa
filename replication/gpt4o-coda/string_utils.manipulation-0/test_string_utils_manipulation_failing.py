# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        int_0 = 3357
        str_0 = 'a$2'
        str_1 = module_0.strip_margin(str_0)
        str_2 = module_0.compress(str_1)
        str_3 = module_0.roman_encode(int_0)
        str_4 = module_0.compress(str_1, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '^([+\\-]?)((\\d+)(\\.\\d+)?(e\\d+)?|\\.\\d+)$'
        str_1 = module_0.compress(str_0)
        str_2 = 'theXsIake_is_green'
        str_3 = module_0.prettify(str_2)
        str_4 = module_0.snake_case_to_camel(str_2)
        str_5 = module_0.roman_encode(str_4)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '[<25@$K%kI]|gccJ?'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'X\x0bVDS6Wz^\\9\\'
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'kmF'
        str_1 = None
        str_2 = module_0.snake_case_to_camel(str_0, str_1)
        str_3 = "sE/8 \x0c\nRI4j '\x0c1$v\n<?"
        str_4 = module_0.strip_margin(str_3)
        str_5 = ''
        bool_0 = None
        str_6 = module_0.snake_case_to_camel(str_0, bool_0)
        str_7 = module_0.compress(str_5)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'y\rLt<A1bTjB0'
        int_0 = -1487
        str_1 = module_0.compress(str_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'A#w\x0bo*oax Ejq('
        int_0 = -2681
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -3452
        string_formatter_0 = module_0.__StringFormatter(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -82.2601
        var_0 = module_0.camel_case_to_snake(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        str_1 = module_0.shuffle(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'zv#Z!|jdE?"j\nGUC--b'
        str_1 = module_0.strip_margin(str_0)
        str_2 = None
        bool_0 = module_0.booleanize(str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '+x4'
        bool_0 = False
        str_1 = module_0.strip_html(str_0, bool_0)
        str_2 = ';5tryTiuv!'
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = string_formatter_0.format()
        str_4 = string_formatter_0.format()
        str_5 = string_formatter_0.format()
        int_0 = 3737
        str_6 = module_0.compress(str_4, str_2, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = None
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 3280
        str_0 = module_0.roman_encode(int_0)
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.asciify(str_0)
        str_3 = None
        str_4 = module_0.strip_margin(str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'rv$>'
        str_1 = module_0.prettify(str_0)
        str_2 = 'is_string'
        str_3 = module_0.snake_case_to_camel(str_2)
        str_4 = 'JCB'
        bool_0 = True
        str_5 = module_0.strip_html(str_4, bool_0)
        str_6 = module_0.roman_encode(str_2)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        str_1 = module_0.slugify(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 3264
        str_0 = module_0.roman_encode(int_0)
        str_1 = None
        str_2 = module_0.prettify(str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '^([+\\-]?)((\\d+)(\\.\\d+)?(e\\d+)?|\\.\\d+)$'
        str_1 = module_0.compress(str_0)
        str_2 = 'theXsIake_is_green'
        str_3 = module_0.prettify(str_2)
        str_4 = module_0.snake_case_to_camel(str_2)
        str_5 = module_0.snake_case_to_camel(str_4)
        int_0 = -56
        str_6 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '%`)v/P4jD'
        str_1 = module_0.strip_margin(str_0)
        str_2 = '\tK0$9_5>J3qY@G(6T'
        int_0 = 241
        var_0 = module_0.camel_case_to_snake(str_2, int_0)
        str_3 = ';}><Ih1'
        str_4 = module_0.reverse(str_3)
        float_0 = -2650.7
        string_formatter_0 = module_0.__StringFormatter(float_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '^([+\\-]?)((\\d+)(\\.\\d+)?(e\\d+)?|\\.\\d+)$'
        str_1 = module_0.compress(str_0)
        str_2 = 'theXsIake_is_green'
        str_3 = module_0.strip_margin(str_0)
        str_4 = module_0.prettify(str_2)
        str_5 = module_0.snake_case_to_camel(str_2)
        str_6 = 'strip_html'
        str_7 = module_0.prettify(str_6)
        str_8 = None
        str_9 = module_0.snake_case_to_camel(str_8)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '^([+\\-]?)((\\d+)(\\.\\d+)?(e\\d+)?|\\.\\d+)$'
        str_1 = module_0.asciify(str_0)
        str_2 = 'b|'
        str_3 = module_0.compress(str_2)
        str_4 = module_0.compress(str_0)
        str_5 = module_0.decompress(str_4)
        str_6 = 'theXsIake_is_green'
        roman_numbers_0 = module_0.__RomanNumbers()
        str_7 = module_0.prettify(str_6)
        str_8 = module_0.snake_case_to_camel(str_6)
        str_9 = '+py<R4R=O\rXc\x0c~z*_'
        str_10 = module_0.snake_case_to_camel(str_9, str_8)
        str_11 = None
        str_12 = module_0.roman_encode(str_11)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 3347
        str_0 = '}2'
        str_1 = module_0.compress(str_0)
        str_2 = module_0.roman_encode(int_0)
        str_3 = module_0.strip_html(str_1)
        str_4 = '^[^\\S\\r\\n]+'
        str_5 = module_0.shuffle(str_4)
        str_6 = module_0.snake_case_to_camel(str_5)
        int_1 = module_0.roman_decode(str_2)
        set_0 = {str_0}
        string_formatter_0 = module_0.__StringFormatter(set_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'booleanize'
        str_1 = module_0.asciify(str_0)
        int_0 = 3305
        str_2 = module_0.roman_encode(int_0)
        str_3 = "TiT{uC5EpB,`g'Oj\rI"
        str_4 = module_0.strip_margin(str_2)
        str_5 = module_0.strip_html(str_3)
        str_6 = '^[^\\S\\r\\n]+'
        str_7 = module_0.shuffle(str_6)
        str_8 = module_0.snake_case_to_camel(str_6)
        str_9 = None
        str_10 = module_0.reverse(str_9)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 3305
        str_0 = 'YV0rV+\r\\hh7#rb60'
        str_1 = module_0.prettify(str_0)
        str_2 = '}2'
        str_3 = module_0.compress(str_2)
        str_4 = module_0.roman_encode(int_0)
        str_5 = None
        str_6 = module_0.strip_html(str_5)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '^([+\\-]?)((\\d+)(\\.\\d+)?(e\\d+)?|\\.\\d+)$'
        str_1 = module_0.compress(str_0)
        str_2 = 'theXs9ake_is_gr?en'
        str_3 = module_0.prettify(str_2)
        str_4 = 'y^>\\J`Fr~'
        int_0 = None
        str_5 = module_0.compress(str_3, str_4, int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 4087
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'theXsIake_is_green'
        str_1 = '~Zm#]"\x0b-^fD)V5h'
        str_2 = module_0.strip_margin(str_1)
        str_3 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
        str_4 = module_0.prettify(str_3)
        str_5 = module_0.snake_case_to_camel(str_2)
        str_6 = module_0.shuffle(str_0)
        str_7 = 'RLvQ\x0b$Y&ZF\nJ'
        str_8 = module_0.roman_encode(str_7)
    except BaseException:
        pass