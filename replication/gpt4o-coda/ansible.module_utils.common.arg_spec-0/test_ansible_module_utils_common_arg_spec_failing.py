# Automatically generated by Pynguin.
import ansible.module_utils.common.arg_spec as module_0

def test_case_0():
    try:
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        dict_0 = {}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0)
        var_0 = argument_spec_validator_0.validate(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n%S?z/f\nKCC}l\r]F<'
        dict_0 = {str_0: str_0, str_0: str_0}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        list_1 = [dict_0]
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator(*list_1)
        var_0 = module_argument_spec_validator_0.validate(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x91\xf5\xdf\x1a\xf9'
        list_0 = [bytes_0, bytes_0, bytes_0]
        dict_0 = {}
        float_0 = 100.0
        validation_result_0 = module_0.ValidationResult(float_0)
        str_0 = '3;Hl;`<A'
        dict_1 = {str_0: list_0, str_0: str_0, str_0: dict_0}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_1)
        argument_spec_validator_1 = module_0.ArgumentSpecValidator(dict_0, validation_result_0, dict_0, list_0, list_0)
        str_1 = ''
        dict_2 = {str_1: bytes_0, str_1: dict_0, str_1: validation_result_0}
        var_0 = argument_spec_validator_1.validate(dict_2, *list_0)
    except BaseException:
        pass