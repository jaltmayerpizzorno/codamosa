# Automatically generated by Pynguin.
import tornado.locks as module_0
import builtins as module_1

def test_case_0():
    try:
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_1():
    try:
        event_0 = module_0.Event()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_2():
    try:
        timeout_garbage_collector_0 = module_0._TimeoutGarbageCollector()
        semaphore_0 = module_0.Semaphore()
        releasing_context_manager_0 = module_0._ReleasingContextManager(semaphore_0)
        releasing_context_manager_0.__enter__()
        semaphore_0.release()
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        bounded_semaphore_0.release()
    except BaseException:
        pass

def test_case_3():
    try:
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__aenter__()
        int_0 = -347
        semaphore_1 = module_0.Semaphore(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        lock_0 = module_0.Lock()
        awaitable_0 = lock_0.acquire()
    except BaseException:
        pass

def test_case_5():
    try:
        semaphore_0 = module_0.Semaphore()
        str_0 = semaphore_0.__repr__()
        event_0 = module_0.Event()
        semaphore_1 = module_0.Semaphore()
        semaphore_1.__enter__()
    except BaseException:
        pass

def test_case_6():
    try:
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        bounded_semaphore_0.release()
    except BaseException:
        pass

def test_case_7():
    try:
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_8():
    try:
        none_type_0 = None
        int_0 = 1332
        semaphore_0 = module_0.Semaphore(int_0)
        traceback_0 = None
        lock_0 = module_0.Lock()
        lock_0.__exit__(none_type_0, semaphore_0, traceback_0)
    except BaseException:
        pass

def test_case_9():
    try:
        lock_0 = module_0.Lock()
        list_0 = [lock_0, lock_0, lock_0, lock_0]
        base_exception_0 = module_1.BaseException(*list_0)
        base_exception_1 = module_1.BaseException()
        float_0 = -1219.1686
        semaphore_0 = module_0.Semaphore()
        semaphore_1 = module_0.Semaphore()
        event_0 = module_0.Event()
        bool_0 = event_0.is_set()
        semaphore_2 = module_0.Semaphore()
        semaphore_1.__exit__(base_exception_0, base_exception_1, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        timeout_garbage_collector_0 = module_0._TimeoutGarbageCollector()
        event_0 = module_0.Event()
        event_0.set()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        semaphore_0.__aenter__()
        lock_0 = module_0.Lock()
        str_0 = lock_0.__repr__()
        str_1 = event_0.__repr__()
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_11():
    try:
        event_0 = module_0.Event()
        event_0.set()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        event_0.set()
        lock_0 = module_0.Lock()
        lock_0.__aenter__()
        str_0 = semaphore_0.__repr__()
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_12():
    try:
        event_0 = module_0.Event()
        str_0 = event_0.__repr__()
        event_1 = module_0.Event()
        event_1.set()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        lock_0 = module_0.Lock()
        event_1.clear()
        dict_0 = {}
        base_exception_0 = module_1.BaseException(**dict_0)
        str_1 = "'FS#Pten-3AD*<5Q\\Z}"
        tuple_0 = (str_1,)
        releasing_context_manager_0 = module_0._ReleasingContextManager(lock_0)
        releasing_context_manager_0.__exit__(event_1, base_exception_0, tuple_0)
    except BaseException:
        pass