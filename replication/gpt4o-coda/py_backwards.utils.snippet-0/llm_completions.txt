

# Generated at 2024-06-03 00:57:33.250350
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # Only assignments should remain
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:57:35.234011
```python
    # Create a sample alias node
    alias_node = ast.alias(name='original_name', asname='original_asname')

    # Create a VariablesReplacer instance with a variable replacement dictionary
    variables = {'original_name': 'new_name', 'original_asname': 'new_asname'}
    replacer = VariablesReplacer(variables)

    # Visit the alias node
    new_node = replacer.visit_alias(alias_node)

    # Check if the name and asname have been replaced correctly
    assert new_node.name == 'new_name'
    assert new_node.asname == 'new_asname'
```

# Generated at 2024-06-03 00:57:35.837161
```python
    source = """

# Generated at 2024-06-03 00:57:37.969832
```python
    def sample_function():
        let(x)
        x += 1
        y = 2

    snip = snippet(sample_function)
    body = snip.get_body()
    
    assert len(body) == 2
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'y'
    assert isinstance(body[1].value, ast.Constant)
    assert body[1].value.value == 2
```

# Generated at 2024-06-03 00:57:42.983473
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:57:45.371926
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    vars_ast = ast.parse("x = 1\nx = 2").body
    body = snip.get_body(vars=vars_ast)

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.AugAssign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 00:57:46.777133
```python
    source = """
import os as operating_system
"""
    tree = ast.parse(source)
    variables = {'os': 'operating_system'}

    replacer = VariablesReplacer(variables)
    replacer.visit(tree)

    assert tree.body[0].names[0].name == 'operating_system'
```

# Generated at 2024-06-03 00:57:47.275654
```python
    source = """

# Generated at 2024-06-03 00:57:49.500698
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.AugAssign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 00:57:51.350461
```python
    def sample_function():
        let(x)
        x += 1
        y = 2

    snip = snippet(sample_function)
    body = snip.get_body()

    assert len(body) == 2
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'y'
```

# Generated at 2024-06-03 00:58:01.431764
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:58:01.947823
```python
    source = """

# Generated at 2024-06-03 00:58:04.579501
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    vars_ast = ast.parse("x = 1\nx = 2").body
    body = snip.get_body(vars=vars_ast)

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.AugAssign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 00:58:06.662639
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:58:10.753846
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.Assign(targets=[ast.Name(id='x', ctx=ast.Store())], value=ast.Num(n=1)),
                               ast.Assign(targets=[ast.Name(id='x', ctx=ast.Store())], value=ast.Num(n=2))])

    assert len(body) == 4
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id.startswith('_py_backwards_x_')
    assert body[2].targets[0].id

# Generated at 2024-06-03 00:58:11.411115
```python
    source = """

# Generated at 2024-06-03 00:58:11.907100
```python
    source = """

# Generated at 2024-06-03 00:58:13.947785
```python
    source = """
import os as operating_system
"""
    tree = ast.parse(source)
    variables = {'os': 'operating_system'}

    replacer = VariablesReplacer(variables)
    replacer.visit(tree)

    assert isinstance(tree.body[0], ast.Import)
    assert tree.body[0].names[0].name == 'operating_system'
    assert tree.body[0].names[0].asname == 'operating_system'
```

# Generated at 2024-06-03 00:58:16.233227
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:58:18.996821
```python
    source = """
import os as operating_system
"""
    tree = ast.parse(source)
    variables = {'os': 'operating_system'}

    replacer = VariablesReplacer(variables)
    replacer.visit(tree)

    assert isinstance(tree.body[0], ast.Import)
    assert tree.body[0].names[0].name == 'operating_system'
    assert tree.body[0].names[0].asname == 'operating_system'
```

# Generated at 2024-06-03 00:58:27.906734
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:58:29.696673
```python
    source = """
import os as original_os
"""
    tree = ast.parse(source)
    variables = {'original_os': 'new_os'}
    replacer = VariablesReplacer(variables)
    replacer.visit(tree)
    
    assert isinstance(tree.body[0], ast.Import)
    assert tree.body[0].names[0].asname == 'new_os'
```

# Generated at 2024-06-03 00:58:32.176563
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.AugAssign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 00:58:32.715535
```python
    source = """

# Generated at 2024-06-03 00:58:35.281184
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.AugAssign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 00:58:35.793262
```python
    source = """

# Generated at 2024-06-03 00:58:38.996293
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:58:41.722508
```python
    # Create a sample alias node
    alias_node = ast.alias(name='original_name', asname='original_asname')

    # Create a VariablesReplacer instance with a variable replacement dictionary
    variables = {'original_name': 'new_name', 'original_asname': 'new_asname'}
    replacer = VariablesReplacer(variables)

    # Apply the visit_alias method
    new_node = replacer.visit_alias(alias_node)

    # Check if the alias node has been correctly replaced
    assert new_node.name == 'new_name'
    assert new_node.asname == 'new_asname'
```

# Generated at 2024-06-03 00:58:42.334818
```python
    source = """

# Generated at 2024-06-03 00:58:45.516998
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.AugAssign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)

    assert body[0].targets[0].id == '_py_backwards_x_0'
    assert body[1].targets[0].id == '_py_backwards_x_0'
    assert body[2].target.id == '_py_backwards_x_0'
    assert body[3].targets

# Generated at 2024-06-03 00:58:53.122067
```python
    source = """

# Generated at 2024-06-03 00:58:54.952150
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:58:55.499565
```python
    source = """

# Generated at 2024-06-03 00:58:57.530418
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:58:59.847419
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:02.049595
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:04.649780
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.AugAssign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 00:59:06.144998
```python
    source = """
import os as operating_system
"""
    tree = ast.parse(source)
    variables = {'os': 'operating_system'}

    replacer = VariablesReplacer(variables)
    replacer.visit(tree)

    assert isinstance(tree.body[0], ast.Import)
    assert tree.body[0].names[0].name == 'operating_system'
    assert tree.body[0].names[0].asname == 'operating_system'
```

# Generated at 2024-06-03 00:59:06.760101
```python
    source = """

# Generated at 2024-06-03 00:59:08.919057
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:17.179531
```python
    source = """
import os as operating_system
"""
    tree = ast.parse(source)
    variables = {'os': 'operating_system'}
    replacer = VariablesReplacer(variables)
    replacer.visit(tree)

    assert isinstance(tree.body[0], ast.Import)
    assert tree.body[0].names[0].name == 'operating_system'
    assert tree.body[0].names[0].asname == 'operating_system'
```

# Generated at 2024-06-03 00:59:19.039445
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # Only assignments should remain
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:19.525085
```python
    source = """

# Generated at 2024-06-03 00:59:21.266688
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:23.093274
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:24.846409
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:26.943881
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:28.639927
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:29.186850
```python
    source = """

# Generated at 2024-06-03 00:59:31.185667
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:40.018703
```python
    source = """

# Generated at 2024-06-03 00:59:41.973685
```python
    def sample_function():
        let(x)
        x += 1
        y = 2

    snip = snippet(sample_function)
    body = snip.get_body()

    assert len(body) == 2
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'y'
    assert isinstance(body[1].value, ast.Constant)
    assert body[1].value.value == 2
```

# Generated at 2024-06-03 00:59:43.701363
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:44.257172
```python
    source = """

# Generated at 2024-06-03 00:59:46.080126
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:48.615930
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 00:59:51.932145
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 00:59:54.552507
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.AugAssign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 00:59:55.069593
```python
    source = """

# Generated at 2024-06-03 00:59:56.784963
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:00:25.941497
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:00:29.411442
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.AugAssign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 01:00:31.533640
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = 3
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:00:36.217280
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 01:00:36.704909
```python
    source = """

# Generated at 2024-06-03 01:00:37.187417
```python
    source = """

# Generated at 2024-06-03 01:00:42.138943
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 4
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert isinstance(body[3].value, ast.Call)
    assert body[3].value.func.id == 'print'
```

# Generated at 2024-06-03 01:00:42.678714
```python
    source = """

# Generated at 2024-06-03 01:00:44.545574
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:00:46.437105
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:00.798919
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert isinstance(body[4], ast.Expr)
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'x'
    assert body[2].targets[0].id == 'x'
    assert body[3].value.func.id == 'print'
```

# Generated at 2024-06-03 01:01:03.682071
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 01:01:06.707153
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 4
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)

    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'x'
    assert body[1].value.n == 1
    assert body[2].targets[0].id == 'x'
    assert body[2].value.n == 2
    assert isinstance(body

# Generated at 2024-06-03 01:01:09.640243
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 4
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert isinstance(body[3].value, ast.Call)
    assert body[3].value.func.id == 'print'
```

# Generated at 2024-06-03 01:01:12.747984
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 4
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'x'
    assert body[2].targets[0].id == 'x'
    assert isinstance(body[3].value, ast.Call)
    assert body[3].value.func.id == 'print'
```

# Generated at 2024-06-03 01:01:14.760639
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:16.998373
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:20.459929
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:22.636520
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:25.985730
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:37.814403
```python
    source = """

# Generated at 2024-06-03 01:01:40.402639
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:40.973015
```python
    source = """

# Generated at 2024-06-03 01:01:43.344689
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:47.631815
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    vars_ast = ast.parse("x = 1\nx = 2").body
    body = snip.get_body(vars=vars_ast)

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.AugAssign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 01:01:50.965926
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:53.361359
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:53.892022
```python
    source = """

# Generated at 2024-06-03 01:01:56.116518
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:01:56.630240
```python
    source = """

# Generated at 2024-06-03 01:02:20.780703
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:02:22.659224
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:02:23.274377
```python
    source = """

# Generated at 2024-06-03 01:02:25.609005
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:02:26.090066
```python
    source = """

# Generated at 2024-06-03 01:02:26.954234
```python
    source = """

# Generated at 2024-06-03 01:02:29.204944
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:02:32.237784
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 4
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert isinstance(body[3].value, ast.Call)
    assert body[3].value.func.id == 'print'
```

# Generated at 2024-06-03 01:02:32.779150
```python
    source = """

# Generated at 2024-06-03 01:02:35.557292
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:03:20.157541
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:03:22.756046
```python
    def sample_function():
        let(x)
        x += 1
        y = 2

    snip = snippet(sample_function)
    body = snip.get_body()
    
    assert len(body) == 2
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'y'
    assert isinstance(body[1].value, ast.Constant)
    assert body[1].value.value == 2
```

# Generated at 2024-06-03 01:03:23.321647
```python
    source = """

# Generated at 2024-06-03 01:03:26.241883
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.AugAssign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
    assert len(body[4].value.args) == 2
    assert body[4].value.args[0].id.startswith('_py_backwards_x_')
    assert body[4

# Generated at 2024-06-03 01:03:28.552533
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Assign)
    assert isinstance(body[4], ast.Expr)
    assert isinstance(body[4].value, ast.Call)
    assert body[4].value.func.id == 'print'
```

# Generated at 2024-06-03 01:03:30.466658
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:03:31.154718
```python
    source = """

# Generated at 2024-06-03 01:03:36.918354
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert isinstance(body[3].value, ast.Call)
    assert body[3].value.func.id == 'print'
    assert len(body[3].value.args) == 2
    assert body[3].value.args[0].id.startswith('_py_backwards_x_')
    assert body[3].value.args[1].id == 'y

# Generated at 2024-06-03 01:03:37.499731
```python
    source = """

# Generated at 2024-06-03 01:03:39.757481
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 4
    assert isinstance(body[0], ast.Assign)
    assert isinstance(body[1], ast.AugAssign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert isinstance(body[3].value, ast.Call)
    assert body[3].value.func.id == 'print'
```

# Generated at 2024-06-03 01:05:08.130819
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.parse("x = 1").body[0], ast.parse("x = 2").body[0]])

    assert len(body) == 5
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert isinstance(body[2], ast.Assign)
    assert isinstance(body[3], ast.Expr)
    assert isinstance(body[3].value, ast.Call)
    assert body[3].value.func.id == 'print'
    assert len(body[3].value.args) == 2
    assert body[3].value.args[0].id.startswith('_py_backwards_x_')
    assert body[3].value.args[1].id == 'y

# Generated at 2024-06-03 01:05:08.879047
```python
    source = """

# Generated at 2024-06-03 01:05:11.435811
```python
    def sample_function():
        let(x)
        x += 1
        y = 2

    snip = snippet(sample_function)
    body = snip.get_body()
    
    assert len(body) == 2
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'y'
    assert isinstance(body[1].value, ast.Constant)
    assert body[1].value.value == 2
```

# Generated at 2024-06-03 01:05:14.391098
```python
    def sample_function():
        let(x)
        x += 1
        y = 2
        extend(vars)
        print(x, y)

    snip = snippet(sample_function)
    body = snip.get_body(vars=[ast.Assign(targets=[ast.Name(id='x', ctx=ast.Store())], value=ast.Constant(value=1))])

    assert len(body) == 4
    assert isinstance(body[0], ast.Assign)
    assert body[0].targets[0].id == '_py_backwards_x_0'
    assert body[0].value.value == 1
    assert isinstance(body[1], ast.AugAssign)
    assert body[1].target.id == '_py_backwards_x_0'
    assert body[1].op.__class__.__name__ == 'Add'
    assert body[1].value.value == 1
    assert isinstance(body[2], ast.Assign)
    assert body[2

# Generated at 2024-06-03 01:05:16.360281
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # Only assignments should remain
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:05:17.488332
```python
    source = """

# Generated at 2024-06-03 01:05:20.040205
```python
    def sample_function():
        let(x)
        x += 1
        y = 2

    snip = snippet(sample_function)
    body = snip.get_body()

    assert len(body) == 2
    assert isinstance(body[0], ast.AugAssign)
    assert isinstance(body[1], ast.Assign)
    assert body[0].target.id.startswith('_py_backwards_x_')
    assert body[1].targets[0].id == 'y'
    assert isinstance(body[1].value, ast.Constant)
    assert body[1].value.value == 2
```

# Generated at 2024-06-03 01:05:22.762183
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3  # let(x) and let(y) should be removed
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:05:24.922333
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```

# Generated at 2024-06-03 01:05:27.393415
```python
    source = """
    let(x)
    let(y)
    x = 1
    y = 2
    z = x + y
    """
    tree = ast.parse(source)
    variables = list(find_variables(tree))
    assert variables == ['x', 'y']
    assert len(tree.body) == 3
    assert isinstance(tree.body[0], ast.Assign)
    assert isinstance(tree.body[1], ast.Assign)
    assert isinstance(tree.body[2], ast.Assign)
```