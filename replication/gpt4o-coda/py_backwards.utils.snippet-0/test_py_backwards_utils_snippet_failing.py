# Automatically generated by Pynguin.
import py_backwards.utils.snippet as module_0
import typed_ast._ast3 as module_1

def test_case_0():
    try:
        dict_0 = None
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        str_0 = 'Dialog'
        dict_1 = {str_0: variables_replacer_0, str_0: str_0}
        arg_0 = module_1.arg(**dict_1)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\nimport os as operating_system\n'
        bytes_0 = b"'\xb1>\xe5"
        list_0 = [str_0, bytes_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        module_0.extend(bytes_0)
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        arg_0 = module_1.arg(*list_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        variables_replacer_1 = module_0.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_1.visit_ImportFrom(import_from_0)
        list_1 = []
        a_s_t_0 = module_1.AST(*list_1)
        iterable_0 = module_0.find_variables(a_s_t_0)
        module_0.extend_tree(a_s_t_0, dict_0)
        arg_2 = None
        arg_3 = variables_replacer_0.visit_arg(arg_2)
    except BaseException:
        pass

def test_case_2():
    try:
        attribute_0 = module_1.Attribute()
        str_0 = None
        str_1 = 'k?/\r15a'
        name_0 = None
        str_2 = 'nLGD|x+cG=]a$?_\x0c'
        dict_0 = {str_0: str_0, str_2: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_3():
    try:
        alias_0 = module_1.alias()
        module_0.extend(alias_0)
        module_0.let(alias_0)
        function_def_0 = None
        dict_0 = {}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    except BaseException:
        pass

def test_case_4():
    try:
        arg_0 = module_1.arg()
        str_0 = "''L\x0c+KJ"
        str_1 = "S[GZ\rCffe'JBNK;l2W"
        dict_0 = {str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        a_s_t_0 = None
        module_0.extend_tree(a_s_t_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\nimport os as operating_system\n'
        bytes_0 = b"'\xb1>\xe5"
        list_0 = [str_0, bytes_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        module_0.extend(bytes_0)
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        dict_1 = {str_0: str_0, str_0: str_0}
        variables_replacer_1 = module_0.VariablesReplacer(dict_1)
        import_from_2 = variables_replacer_1.visit_ImportFrom(import_from_1)
        list_1 = []
        a_s_t_0 = module_1.AST(*list_1)
        iterable_0 = module_0.find_variables(a_s_t_0)
        alias_0 = None
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -461
        snippet_0 = module_0.snippet(int_0)
        list_0 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        list_0 = []
        a_s_t_0 = module_1.AST(*list_0)
        str_1 = None
        class_def_0 = module_1.ClassDef(*list_0)
        iterable_0 = module_0.find_variables(a_s_t_0)
        str_2 = '.'
        dict_0 = {str_1: str_1, str_0: a_s_t_0, str_2: a_s_t_0}
        module_0.extend_tree(a_s_t_0, dict_0)
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        arg_0 = module_1.arg()
        function_def_0 = module_1.FunctionDef()
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
        variables_replacer_1 = module_0.VariablesReplacer(dict_0)
        arg_2 = variables_replacer_1.visit_arg(arg_1)
        attribute_0 = None
        attribute_1 = variables_replacer_1.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\nimport os as operating_system\n'
        bytes_0 = b"'\xb1>\xe5"
        list_0 = [str_0, bytes_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        module_0.extend(bytes_0)
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        dict_1 = {str_0: str_0, str_0: str_0}
        variables_replacer_1 = module_0.VariablesReplacer(dict_1)
        import_from_2 = variables_replacer_1.visit_ImportFrom(import_from_1)
        dict_2 = {str_0: import_from_0}
        alias_0 = module_1.alias(*list_0, **dict_2)
        variables_replacer_2 = module_0.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_1.visit_alias(alias_0)
        list_1 = []
        a_s_t_0 = module_1.AST(*list_1)
        iterable_0 = module_0.find_variables(a_s_t_0)
        alias_2 = None
        alias_3 = variables_replacer_0.visit_alias(alias_2)
    except BaseException:
        pass