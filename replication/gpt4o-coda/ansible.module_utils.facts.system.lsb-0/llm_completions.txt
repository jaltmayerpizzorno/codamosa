

# Generated at 2024-05-31 06:00:23.082695
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:00:27.070626
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch:core-4.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert 'lsb' in facts
    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release']

# Generated at 2024-05-31 06:00:28.279933
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:00:31.748029
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.1-noarch:core-2.1-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    expected_facts = {
        'lsb': {
            'release': '20.04',
            'id': 'Ubuntu',
            'description': 'Ubuntu 20.04.1 LTS',
            'codename': 'focal',
            'major_release': '20'
        }
    }

    assert facts == expected_facts

    # Test with no lsb_release binary
    module.get_bin_path = Mock(return_value

# Generated at 2024-05-31 06:00:32.925265
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:00:34.010897
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:00:35.586719
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:00:41.059208
```python
    class MockModule:
        def get_bin_path(self, binary_name):
            if binary_name == 'lsb_release':
                return '/usr/bin/lsb_release'
            return None

        def run_command(self, command, errors='surrogate_then_replace'):
            if command == ['/usr/bin/lsb_release', '-a']:
                return (0, "LSB Version:\t1.4\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 20.04.1 LTS\nRelease:\t20.04\nCodename:\tfocal\n", "")
            return (1, "", "command not found")

    module = MockModule()
    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    expected_facts = {
        'lsb': {
            'release': '20.04',
            'id': 'Ubuntu',
            'description': 'Ubuntu 20.04.1 LTS',
            '

# Generated at 2024-05-31 06:00:42.605498
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:00:43.711667
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:00:58.696440
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:02.455453
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:01:03.587597
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:04.730738
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:05.967946
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:06.937232
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:08.381921
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:10.065350
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:11.151304
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:13.989668
```python
    class MockModule:
        def get_bin_path(self, binary):
            if binary == 'lsb_release':
                return '/usr/bin/lsb_release'
            return None

        def run_command(self, command, errors='surrogate_then_replace'):
            if command == ['/usr/bin/lsb_release', '-a']:
                return (0, "LSB Version:\tcore-4.1-amd64:core-4.1-noarch\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 20.04.1 LTS\nRelease:\t20.04\nCodename:\tfocal", "")
            return (1, "", "command not found")

    collector = LSBFactCollector()
    module = MockModule()
    collected_facts = collector.collect(module=module)

    expected_facts = {
        'lsb': {
            'release': '20.04',
            'id': 'Ubuntu',
            'description': '

# Generated at 2024-05-31 06:01:43.241480
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:46.195682
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:01:47.504545
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:52.037335
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert 'lsb' in facts
    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:01:53.087574
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:54.302877
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:01:57.923566
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.1-noarch:core-2.1-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:01:59.011124
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:02:00.214876
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:02:03.484663
```python
    class MockModule:
        def get_bin_path(self, binary):
            if binary == 'lsb_release':
                return '/usr/bin/lsb_release'
            return None

        def run_command(self, command, errors='surrogate_then_replace'):
            if command == ['/usr/bin/lsb_release', '-a']:
                return (0, "LSB Version:\tcore-4.1-amd64:core-4.1-noarch\nDistributor ID:\tUbuntu\nDescription:\tUbuntu 20.04.1 LTS\nRelease:\t20.04\nCodename:\tfocal", "")
            return (1, "", "command not found")

    collector = LSBFactCollector()
    module = MockModule()
    collected_facts = collector.collect(module=module)

    assert collected_facts == {
        'lsb': {
            'release': '20.04',
            'id': 'Ubuntu',
            'description':

# Generated at 2024-05-31 06:03:00.227882
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:03:04.245214
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:03:08.101787
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.1-noarch:core-2.1-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal\n", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert 'lsb' in facts
    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'

    module.get

# Generated at 2024-05-31 06:03:09.183779
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:03:12.823452
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert 'lsb' in facts
    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:03:20.396296
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-4.1-amd64:core-4.1-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert 'lsb' in facts
    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:03:26.759988
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-amd64:core-2.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:03:28.648248
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:03:30.338754
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:03:34.149095
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.1-noarch:core-2.1-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    expected_facts = {
        'lsb': {
            'release': '20.04',
            'id': 'Ubuntu',
            'description': 'Ubuntu 20.04.1 LTS',
            'codename': 'focal',
            'major_release': '20'
        }
    }

    assert facts == expected_facts

    # Test with no lsb_release binary
    module.get_bin_path = Mock(return_value

# Generated at 2024-05-31 06:05:25.886900
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:05:26.962987
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:05:28.017769
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:05:29.509119
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:05:33.357004
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:05:34.896588
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:05:39.739286
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.1-noarch:core-2.1-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    expected_facts = {
        'lsb': {
            'release': '20.04',
            'id': 'Ubuntu',
            'description': 'Ubuntu 20.04.1 LTS',
            'codename': 'focal',
            'major_release': '20'
        }
    }

    assert facts == expected_facts
```

# Generated at 2024-05-31 06:05:40.950638
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:05:42.061319
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:05:43.522783
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:09:26.572149
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:09:30.186295
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert 'lsb' in facts
    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:09:31.514070
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:09:32.774072
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:09:33.933779
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:09:35.040959
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:09:38.934637
```python
    module = Mock()
    module.get_bin_path = Mock(return_value='/usr/bin/lsb_release')
    module.run_command = Mock(return_value=(0, "LSB Version:    core-2.0-noarch:core-3.0-noarch\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal", ""))

    collector = LSBFactCollector()
    facts = collector.collect(module=module)

    assert 'lsb' in facts
    assert facts['lsb']['id'] == 'Ubuntu'
    assert facts['lsb']['description'] == 'Ubuntu 20.04.1 LTS'
    assert facts['lsb']['release'] == '20.04'
    assert facts['lsb']['codename'] == 'focal'
    assert facts['lsb']['major_release'] == '20'
```

# Generated at 2024-05-31 06:09:40.055247
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:09:41.448887
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert collector._fact_ids == set()
    assert collector.STRIP_QUOTES == r'\'\"\\'
```

# Generated at 2024-05-31 06:09:44.841500
```python
    collector = LSBFactCollector()
    assert collector.name == 'lsb'
    assert isinstance(collector._fact_ids, set)
    assert collector.STRIP_QUOTES == r'\'\"\\'
```