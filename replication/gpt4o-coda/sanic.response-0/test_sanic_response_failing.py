# Automatically generated by Pynguin.
import sanic.response as module_0
import pathlib as module_1
import sanic.models.protocol_types as module_2

def test_case_0():
    try:
        h_t_t_p_response_0 = module_0.empty()
        list_0 = []
        str_0 = '{\nXN\tKYk0d<V?"Kuf?u'
        str_1 = '}[FE'
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        base_h_t_t_p_response_0.send()
        float_0 = None
        int_0 = -684
        dict_0 = {}
        str_2 = 'attachment; filename="'
        pure_path_0 = module_1.PurePath()
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(list_0, int_0, dict_0, str_2, pure_path_0)
        var_0 = streaming_h_t_t_p_response_0.write(float_0)
        h_t_t_p_response_1 = module_0.html(str_1)
        pure_path_1 = module_1.PurePath(*list_0)
        var_1 = pure_path_0.__gt__(int_0)
        var_2 = module_0.stream(pure_path_1)
        dict_1 = {str_0: list_0, str_1: list_0, str_1: list_0, str_1: str_1}
        h_t_m_l_protocol_0 = module_2.HTMLProtocol(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_1():
    try:
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        str_0 = 'k\x0c.i1\rXjV('
        str_1 = 'deprecated'
        h_t_t_p_response_0 = module_0.redirect(str_0, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 112.219
        int_0 = None
        str_0 = '\x0czCUUzqZ\t'
        str_1 = 'q}{'
        str_2 = '#z(P_Eml"t*W|Y(d0GR'
        str_3 = 'message'
        dict_0 = {str_0: str_1, str_1: str_2, str_1: str_1, str_3: str_2}
        var_0 = module_0.stream(float_0, int_0, dict_0)
        h_t_m_l_protocol_0 = module_2.HTMLProtocol()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        int_0 = 504
        set_0 = {int_0}
        h_t_t_p_response_0 = module_0.json(str_0, int_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        h_t_t_p_response_0 = module_0.text(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'x:'
        int_0 = -1614
        tuple_0 = ()
        str_1 = "V$/B48u''~"
        dict_0 = {tuple_0: int_0, str_0: int_0}
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        dict_1 = {}
        dict_2 = {str_0: base_h_t_t_p_response_0, str_0: str_1, str_0: dict_1}
        h_t_t_p_response_0 = module_0.json(str_0, int_0, tuple_0, str_1, dict_0, **dict_2)
    except BaseException:
        pass