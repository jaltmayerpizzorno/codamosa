# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0
import pathlib as module_1

def test_case_0():
    try:
        bytes_0 = b'\x1e[\x9f\x85\x1d\xac\x06\x8d\xde\xa2\x99\xc8\x89(GK\xe2?'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.static(bytes_0, bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.delete(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n   S    For creating a signal handler, used similar to a route handler:\n\n        .. code-block:: python\n\n            @app.signal("foo.bar.<thing>")\n            async def signal_handler(thing, **kwargs):\n                print(f"[signal_handler] {thing=}", kwargs)\n\n        :param event: Representation of the event in ``one.two.three`` form\n        :type event: str\n        :param apply: For lazy evaluation, defaults to True\n        :type apply: bool, optional\n        :param condition: For use with the ``condition`` argument in dispatch\n            filtering, defaults to None\n        :type condition: Dict[str, Any], optional\n        '
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        route_mixin_0 = module_0.RouteMixin()
        int_0 = -431
        str_0 = ''
        var_0 = route_mixin_0.add_route(int_0, str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.get(str_0)
        var_1 = route_mixin_0.head(str_0)
        pure_path_0 = module_1.PurePath()
        route_mixin_1 = module_0.RouteMixin()
        iterable_0 = None
        list_0 = [var_1, iterable_0, pure_path_0]
        tuple_0 = (pure_path_0, list_0)
        var_2 = route_mixin_1.add_route(tuple_0, str_0, iterable_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'pe\\M,6\t^.[(#oJa6\x0b'
        bytes_0 = b'\xc8\xe3\x16\x01\x11\x05t'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'kep_live'
        route_mixin_0 = module_0.RouteMixin()
        bytes_0 = b'IN\xcd\xb2\xbf\x06|E\x15Ly\x7f\x8a\xfcTV\xef'
        var_0 = route_mixin_0.add_websocket_route(bytes_0, str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '"([^"]*)"'
        set_0 = {str_0, str_0}
        dict_0 = None
        dict_1 = {str_0: str_0, str_0: str_0}
        dict_2 = {str_0: set_0, str_0: dict_0}
        route_mixin_0 = module_0.RouteMixin(**dict_2)
        var_0 = route_mixin_0.head(str_0, dict_1)
        str_1 = '}|$P-n'
        bytes_0 = None
        route_mixin_1 = module_0.RouteMixin()
        dict_3 = {}
        bool_0 = False
        list_0 = [set_0]
        route_mixin_2 = module_0.RouteMixin()
        tuple_0 = (dict_3, bool_0, list_0, route_mixin_2)
        dict_4 = {}
        route_mixin_3 = module_0.RouteMixin(**dict_4)
        var_1 = route_mixin_3.static(str_1, bytes_0, tuple_0, tuple_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\x8cOh~\xb9\x0f'
        str_0 = 'keep_alive'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(bytes_0, str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        pure_path_0 = module_1.PurePath()
        str_0 = 's4Pi>tT8(}\x0bbV~)9\\'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = pure_path_0.__le__(dict_0)
        bytes_0 = b'\xa3@d7M\x8e\x9b'
        list_0 = [bytes_0, bytes_0]
        var_1 = pure_path_0.__ge__(dict_0)
        dict_1 = {}
        route_mixin_0 = module_0.RouteMixin()
        var_2 = route_mixin_0.add_websocket_route(pure_path_0, str_0, list_0, bytes_0, dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.get(str_0)
        pure_path_0 = module_1.PurePath()
        int_0 = -3830
        var_1 = route_mixin_0.add_route(int_0, str_0, str_0, int_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Ca2ZJNNH!'
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_websocket_route(str_0, str_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'CaZJNNH!'
        bool_0 = True
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_websocket_route(str_0, str_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.get(str_0)
        pure_path_0 = module_1.PurePath()
        var_1 = route_mixin_0.options(str_0, str_0)
        bool_0 = None
        float_0 = -340.513
        str_1 = "/V1SuA}'\reh 81:\n\rK"
        bool_1 = False
        var_2 = route_mixin_0.add_route(float_0, str_1, bool_0, bool_1)
    except BaseException:
        pass

def test_case_15():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.get(str_0)
        pure_path_0 = module_1.PurePath()
        iterable_0 = None
        str_1 = '.c[~N:UsSQzL2i"=%'
        int_0 = 412
        var_1 = route_mixin_0.add_route(str_1, str_1, iterable_0, int_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.get(str_0)
        pure_path_0 = module_1.PurePath()
        tuple_0 = (pure_path_0,)
        iterable_0 = None
        var_1 = route_mixin_0.add_route(var_0, str_0, iterable_0, tuple_0)
    except BaseException:
        pass