# Automatically generated by Pynguin.
import tornado.locale as module_0
import gettext as module_1

def test_case_0():
    try:
        locale_0 = module_0.get()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '=r?QXuRu5D=#g^QILq6'
        module_0.load_translations(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        module_0.load_gettext_translations(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        locale_0 = module_0.get()
        str_0 = 'q!5=Yp(p*'
        float_0 = 2426.153
        int_0 = -61
        iterable_0 = module_0.get_supported_locales()
        null_translations_0 = module_1.NullTranslations(iterable_0)
        gettext_locale_0 = module_0.GettextLocale(str_0, null_translations_0)
        str_1 = 'm1:J'
        str_2 = gettext_locale_0.pgettext(str_1, str_1, str_0, int_0)
        bool_0 = None
        str_3 = locale_0.format_date(float_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'j'
        str_1 = '&/T<x6FBGpF\r:'
        list_0 = [str_0, str_1]
        locale_0 = module_0.get(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "`mock.patch` compatible wrapper for `OptionParser`.\n\n    As of ``mock`` version 1.0.1, when an object uses ``__getattr__``\n    hooks instead of ``__dict__``, ``patch.__exit__`` tries to delete\n    the attribute it set instead of setting a new one (assuming that\n    the object does not capture ``__setattr__``, so the patch\n    created a new attribute in ``__dict__``).\n\n    _Mockable's getattr and setattr pass through to the underlying\n    OptionParser, and delattr undoes the effect of a previous setattr.\n    "
        str_1 = '\\'
        str_2 = ''
        str_3 = '-NU`&*PgQ&Er9+'
        list_0 = [str_3]
        locale_0 = module_0.get(*list_0)
        str_4 = locale_0.pgettext(str_1, str_2)
        locale_1 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'en'
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        locale_0 = module_0.get()
        float_0 = 2426.153
        int_0 = -61
        bool_0 = None
        str_0 = locale_0.format_date(float_0, int_0, bool_0)
        str_1 = locale_0.translate(str_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        locale_0 = module_0.get()
        str_0 = 'q!5p=Yp(p*'
        float_0 = 2426.153
        str_1 = locale_0.pgettext(str_0, str_0)
        int_0 = -61
        bool_0 = None
        str_2 = locale_0.format_date(float_0, int_0, bool_0)
        str_3 = None
        module_0.load_gettext_translations(str_3, str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '3}|IB'
        str_1 = 'QIde]*fI-]'
        str_2 = '_9Xp+?N'
        int_0 = 1174
        str_3 = None
        dict_0 = None
        str_4 = 'apply missing method name'
        dict_1 = {str_3: dict_0, str_4: dict_0, str_3: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_1)
        str_5 = c_s_v_locale_0.pgettext(str_1, str_2, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 922
        str_0 = 'tDM`Z>\nYBy'
        str_1 = ''
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_1, null_translations_0)
        null_translations_1 = module_1.NullTranslations(gettext_locale_0)
        gettext_locale_1 = module_0.GettextLocale(str_0, null_translations_1)
        str_2 = gettext_locale_1.translate(str_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        locale_0 = module_0.get()
        str_0 = 'q!5p=Yp(p*'
        float_0 = 2426.153
        int_0 = -61
        bool_0 = None
        str_1 = locale_0.format_date(float_0, int_0, bool_0)
        str_2 = 'Makes this the `IOLoop` for the current thread.\n\n        An `IOLoop` automatically becomes current for its thread\n        when it is started, but it is sometimes useful to call\n        `make_current` explicitly before starting the `IOLoop`,\n        so that code run at startup time can find the right\n        instance.\n\n        .. versionchanged:: 4.1\n           An `IOLoop` created while there is no current `IOLoop`\n           will automatically become current.\n\n        .. versionchanged:: 5.0\n           This method also sets the current `asyncio` event loop.\n        '
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_2, null_translations_0)
        str_3 = '3\x0bJs+rP+bP{'
        str_4 = gettext_locale_0.pgettext(str_0, str_3, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        null_translations_0 = module_1.NullTranslations()
        int_0 = 2074
        bool_0 = False
        null_translations_1 = module_1.NullTranslations()
        str_0 = "v&XkhAFN\nJ'c!"
        str_1 = 'Z-au:O\n<>_<+V=OE{R.j'
        list_0 = [str_0, str_1]
        locale_0 = module_0.get(*list_0)
        str_2 = locale_0.format_date(int_0, bool_0)
        str_3 = '8v3b[q"^S-FU8=\tO}~.'
        locale_1 = module_0.Locale(str_3)
    except BaseException:
        pass

def test_case_13():
    try:
        locale_0 = module_0.get()
        float_0 = 2426.153
        int_0 = -61
        dict_0 = {}
        str_0 = locale_0.list(dict_0)
        bool_0 = None
        str_1 = locale_0.format_date(float_0, int_0, bool_0)
        str_2 = None
        module_0.load_gettext_translations(str_2, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -1203
        bool_0 = False
        locale_0 = module_0.get()
        str_0 = locale_0.friendly_number(int_0)
        int_1 = None
        str_1 = locale_0.friendly_number(int_1)
        str_2 = locale_0.format_date(int_0, bool_0)
        int_2 = 298
        str_3 = locale_0.translate(str_2, str_2, int_2)
        str_4 = None
        module_0.load_translations(str_4, str_3)
        str_5 = 'Hb'
        list_0 = []
        locale_1 = module_0.get(*list_0)
        str_6 = '5@G\n?Cs5Z-)N.N'
        null_translations_0 = module_1.NullTranslations(str_6)
        gettext_locale_0 = module_0.GettextLocale(str_5, null_translations_0)
        str_7 = 'zh_CN'
        str_8 = gettext_locale_0.pgettext(str_7, str_4)
        locale_2 = module_0.get()
        int_3 = -2097
        bool_1 = True
        str_9 = locale_2.format_date(int_1, int_3, bool_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 334
        iterable_0 = module_0.get_supported_locales()
        locale_0 = module_0.get()
        datetime_0 = None
        bool_0 = locale_0.format_day(datetime_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -1203
        locale_0 = module_0.get()
        str_0 = locale_0.friendly_number(int_0)
        int_1 = None
        str_1 = locale_0.friendly_number(int_1)
        int_2 = 298
        str_2 = locale_0.translate(str_0, str_0, int_2)
        str_3 = None
        module_0.load_translations(str_3, str_2)
        str_4 = 'Je!RqpS}{sYqB/_ G/3'
        str_5 = locale_0.translate(str_2)
        str_6 = None
        int_3 = 122
        str_7 = locale_0.translate(str_6, str_0, int_3)
        list_0 = []
        locale_1 = module_0.get(*list_0)
        module_0.set_default_locale(str_4)
        locale_2 = module_0.get()
        str_8 = 'b'
        str_9 = None
        str_10 = locale_1.list(str_5)
        module_0.load_gettext_translations(str_9, str_8)
    except BaseException:
        pass

def test_case_17():
    try:
        iterable_0 = module_0.get_supported_locales()
        str_0 = 'eY)wh4(>C7-p\\}&'
        str_1 = ''
        dict_0 = {str_0: str_1}
        str_2 = '~Wq6'
        str_3 = '9lb\r!0t@Oy~5'
        dict_1 = {str_1: dict_0, str_2: dict_0, str_3: dict_0, str_1: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_1)
        locale_0 = module_0.get()
        str_4 = 'a'
        str_5 = 'en_US'
        str_6 = 'zh_CN'
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_6, null_translations_0)
        str_7 = 'D7l5jaz*Hg}C0'
        null_translations_1 = module_1.NullTranslations()
        gettext_locale_1 = module_0.GettextLocale(str_7, null_translations_1)
        str_8 = gettext_locale_1.pgettext(str_4, str_5, str_1, gettext_locale_0)
        str_9 = locale_0.list(iterable_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = -4219.5991
        bool_0 = True
        str_0 = ')n\tn'
        list_0 = [str_0, str_0]
        locale_0 = module_0.get(*list_0)
        str_1 = locale_0.format_date(float_0, bool_0)
        int_0 = 2074
        int_1 = -219
        str_2 = locale_0.friendly_number(int_1)
        str_3 = 'Bba#6MGe'
        str_4 = 'r\x0b"q+"Rjo\\'
        locale_1 = module_0.get()
        str_5 = locale_0.list(str_4)
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_3, null_translations_0)
        str_6 = 'S99@_&zxy<u.6nq'
        gettext_locale_1 = module_0.GettextLocale(str_6, null_translations_0)
        str_7 = gettext_locale_1.pgettext(str_4, str_4, int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        float_0 = -4219.5991
        bool_0 = True
        str_0 = ')n\tn'
        str_1 = 'xt$i!W'
        list_0 = [str_0, str_1]
        locale_0 = module_0.get(*list_0)
        int_0 = 4062
        bool_1 = True
        bool_2 = True
        bool_3 = True
        str_2 = locale_0.format_date(float_0, int_0, bool_1, bool_2, bool_3)
        str_3 = locale_0.format_date(float_0, bool_0)
        int_1 = -219
        str_4 = locale_0.friendly_number(int_1)
        str_5 = 'P"~)'
        str_6 = None
        str_7 = locale_0.pgettext(str_5, str_6, str_2)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = -1203
        bool_0 = False
        locale_0 = module_0.get()
        str_0 = locale_0.friendly_number(int_0)
        int_1 = None
        str_1 = locale_0.friendly_number(int_1)
        str_2 = locale_0.format_date(int_0, bool_0)
        int_2 = 298
        str_3 = locale_0.translate(str_2, str_2, int_2)
        str_4 = None
        module_0.load_translations(str_4, str_3)
        str_5 = 'a\x0bq+"Rjo\\'
        str_6 = 'Hb'
        str_7 = 'Je!RqpS}{sYqB/_ G/3'
        str_8 = locale_0.translate(str_5)
        str_9 = locale_0.format_date(int_0, bool_0, bool_0)
        str_10 = None
        int_3 = 122
        str_11 = locale_0.translate(str_10, str_2, int_3)
        list_0 = [str_1, str_7, str_0]
        locale_1 = module_0.get(*list_0)
        str_12 = 'en_US'
        null_translations_0 = module_1.NullTranslations(str_12)
        gettext_locale_0 = module_0.GettextLocale(str_6, null_translations_0)
        str_13 = 'zh_CN'
        str_14 = gettext_locale_0.pgettext(str_13, str_4)
        locale_2 = module_0.get()
        str_15 = 'b'
        str_16 = locale_1.list(str_8)
        module_0.load_gettext_translations(str_16, str_15)
    except BaseException:
        pass