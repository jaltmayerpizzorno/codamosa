

# Generated at 2024-06-03 15:26:01.995159
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(seconds=90)) == "1 minute ago"
    assert locale.format_date(now - datetime.timedelta(minutes=90)) == "1 hour ago"

    # Test absolute time formatting
    assert locale.format_date(now - datetime.timedelta(days=1), relative=False) == now.strftime("%B %d, %Y at %I:%M %p")

    # Test full format
    assert locale.format_date(now - datetime.timedelta(days=1), full_format=True) == now.strftime("%B %d, %Y at %I:%M %p")

    # Test future date
    future_date = now + datetime.timedelta(days=1)
    assert locale.format_date(future_date) == future_date.strftime("%B %d, %

# Generated at 2024-06-03 15:26:07.729762
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:26:12.273680
```python
    translations = gettext.NullTranslations()
    locale = GettextLocale("en", translations)

    # Mock the gettext method to return the context-based translation
    locale.gettext = lambda msg: {
        "law\x04right": "right (law)",
        "good\x04right": "right (good)"
    }.get(msg, msg)

    # Test without plural message
    assert locale.pgettext("law", "right") == "right (law)"
    assert locale.pgettext("good", "right") == "right (good)"
    assert locale.pgettext("unknown", "right") == "right"

    # Mock the ngettext method to return the context-based plural translation
    locale.ngettext = lambda msg1, msg2, n: {
        ("organization\x04club", "organization\x04clubs", 1): "club (organization)",
        ("organization\x04club", "organization\x04clubs", 2): "clubs (

# Generated at 2024-06-03 15:26:16.299832
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"

    locale = Locale("fr")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"

    locale = Locale("fa")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"
```

# Generated at 2024-06-03 15:26:20.665056
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(minutes=5)) == "5 minutes ago"
    assert locale.format_date(now - datetime.timedelta(hours=1)) == "1 hour ago"
    assert locale.format_date(now - datetime.timedelta(days=1)) == "yesterday at %s" % now.strftime("%I:%M %p").lstrip('0')
    assert locale.format_date(now - datetime.timedelta(days=3)) == now.strftime("%A at %I:%M %p").lstrip('0')
    assert locale.format_date(now - datetime.timedelta(days=30)) == now.strftime("%B %d at %I:%M %p").lstrip('0')

    # Test full format
    assert locale.format_date(now - datetime.timedelta(days=365),

# Generated at 2024-06-03 15:26:25.149942
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"

    locale = Locale("fr")
    date = datetime.datetime(2023, 10, 5)
    assert locale.format_day(date) == "Thursday, October 5"  # Assuming translation is not implemented
    assert locale.format_day(date, dow=False) == "October 5"  # Assuming translation is not implemented

    locale = Locale("fa")
    date = datetime.datetime(2023, 10, 5)
    assert locale.format_day(date) == "Thursday, October 5"  # Assuming translation is not implemented
    assert locale.format_day(date, dow=False) == "October 5"  # Assuming translation is not implemented
```

# Generated at 2024-06-03 15:26:30.205385
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(seconds=90)) == "1 minute ago"
    assert locale.format_date(now - datetime.timedelta(minutes=90)) == "1 hour ago"

    # Test absolute time formatting
    assert locale.format_date(now - datetime.timedelta(days=1), relative=False) == now.strftime("%B %d, %Y at %I:%M %p")

    # Test full format
    assert locale.format_date(now - datetime.timedelta(days=1), full_format=True) == now.strftime("%B %d, %Y at %I:%M %p")

    # Test future date
    assert locale.format_date(now + datetime.timedelta(days=1)) == (now + datetime.timedelta(days=1)).strftime("%B %d, %Y

# Generated at 2024-06-03 15:26:36.586572
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"

    locale = Locale("fr")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"

    locale = Locale("fa")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"
```

# Generated at 2024-06-03 15:26:40.881315
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:26:46.135703
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:27:17.109939
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake locale directory structure
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)

        # Create a fake .mo file
        mo_file_path = os.path.join(locale_dir, "test.mo")
        with open(mo_file_path, "wb") as mo_file:
            mo_file.write(b'\xde\x12\x04\x95\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')

        # Call the function to load translations
        load_gettext

# Generated at 2024-06-03 15:27:20.980828
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(minutes=5)) == "5 minutes ago"
    assert locale.format_date(now - datetime.timedelta(hours=1)) == "1 hour ago"
    assert locale.format_date(now - datetime.timedelta(days=1)) == "yesterday at %s" % now.strftime("%I:%M %p").lstrip('0')
    assert locale.format_date(now - datetime.timedelta(days=3)) == now.strftime("%A at %I:%M %p").lstrip('0')
    assert locale.format_date(now - datetime.timedelta(days=100)) == now.strftime("%B %d at %I:%M %p").lstrip('0')

    # Test full format
    assert locale.format_date(now - datetime.timedelta(days=400),

# Generated at 2024-06-03 15:27:25.926748
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory to simulate the locale directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake locale structure
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)
        mo_file_path = os.path.join(locale_dir, "test.mo")

        # Create a dummy .mo file
        with open(mo_file_path, "wb") as mo_file:
            mo_file.write(b'\xde\x12\x04\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')

        # Call the function to load translations
        load_gettext_translations(temp_dir, "test")

        # Check if the translations were loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext

# Generated at 2024-06-03 15:27:30.450816
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("fr")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "jeudi, octobre 5", f"Expected 'jeudi, octobre 5', but got {formatted_date}"

   

# Generated at 2024-06-03 15:27:35.756337
```python
    locale_code = "en"
    locale = Locale(locale_code)
    assert locale.code == locale_code
    assert locale.name == "Unknown"
    assert locale.rtl == False
    assert locale._months == [
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    ]
    assert locale._weekdays == [
        "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
    ]

    locale_code = "fa"
    locale = Locale(locale_code)
    assert locale.code == locale_code
    assert locale.rtl == True
```

# Generated at 2024-06-03 15:27:40.450471
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:27:45.453564
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:27:48.306676
```python
    locale_code = "en_US"
    locale = Locale(locale_code)
    assert locale.code == locale_code
    assert locale.name == LOCALE_NAMES.get(locale_code, {}).get("name", u"Unknown")
    assert locale.rtl == False
    assert locale._months == [
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
    ]
    assert locale._weekdays == [
        "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"
    ]
```

# Generated at 2024-06-03 15:27:53.408606
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_day = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_day == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_day}"

    # Test without day of week
    formatted_day = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_day == "October 5", f"Expected 'October 5', but got {formatted_day}"

    # Test with different locale
    locale = Locale("fr")
    formatted_day = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_day == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_day}"

    formatted_day

# Generated at 2024-06-03 15:27:57.774647
```python
    locale = Locale("en")
    locale.translate = lambda message, plural_message=None, count=None: message

    # Test without plural message
    context = "menu"
    message = "File"
    result = locale.pgettext(context, message)
    assert result == "File", f"Expected 'File', got {result}"

    # Test with plural message and count == 1
    context = "menu"
    message = "File"
    plural_message = "Files"
    count = 1
    result = locale.pgettext(context, message, plural_message, count)
    assert result == "File", f"Expected 'File', got {result}"

    # Test with plural message and count != 1
    context = "menu"
    message = "File"
    plural_message = "Files"
    count = 2
    result = locale.pgettext(context, message, plural_message, count)
    assert result == "Files",

# Generated at 2024-06-03 15:28:28.125568
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:28:32.780280
```python
    translations = {
        "singular": {
            "Hello": "Hola",
            "Goodbye": "Adiós"
        },
        "plural": {
            "apple": "manzanas"
        },
        "unknown": {
            "Welcome": "Bienvenido"
        }
    }
    locale = CSVLocale("es", translations)

    # Test singular translation
    assert locale.translate("Hello") == "Hola"
    assert locale.translate("Goodbye") == "Adiós"
    assert locale.translate("Welcome") == "Bienvenido"

    # Test plural translation
    assert locale.translate("apple", "apples", 2) == "manzanas"
    assert locale.translate("apple", "apples", 1) == "apple"

    # Test fallback to original message if not found
    assert locale.translate("Nonexistent") == "Nonexistent"
```

# Generated at 2024-06-03 15:28:39.012788
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake locale directory structure
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)

        # Create a dummy .mo file
        mo_file_path = os.path.join(locale_dir, "test.mo")
        with open(mo_file_path, "wb") as mo_file:
            mo_file.write(b'\xde\x12\x04\x95\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00')

        # Call the function to load translations
        load_gettext_translations(temp_dir, "test")

        # Check if the translations were loaded correctly
        assert "es" in _translations
        assert isinstance(_translations

# Generated at 2024-06-03 15:28:43.362225
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("fr")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    formatted_date

# Generated at 2024-06-03 15:28:48.577807
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("fr")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    formatted_date

# Generated at 2024-06-03 15:28:53.469643
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(minutes=5)) == "5 minutes ago"
    assert locale.format_date(now - datetime.timedelta(hours=1)) == "1 hour ago"
    assert locale.format_date(now - datetime.timedelta(days=1)) == "yesterday at %s" % now.strftime("%I:%M %p").lstrip("0")
    assert locale.format_date(now - datetime.timedelta(days=3)) == now.strftime("%A at %I:%M %p").lstrip("0")
    assert locale.format_date(now - datetime.timedelta(days=30)) == now.strftime("%B %d at %I:%M %p").lstrip("0")

    # Test full format
    assert locale.format_date(now - datetime.timedelta(days=365),

# Generated at 2024-06-03 15:28:57.538519
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("fr")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    formatted_date

# Generated at 2024-06-03 15:29:01.724244
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations
        load_translations(temp_dir)

        # Check if translations are loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto"
        assert _translations

# Generated at 2024-06-03 15:29:06.341677
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations
        load_translations(temp_dir)

        # Check if translations are loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto"
        assert _translations

# Generated at 2024-06-03 15:29:15.563799
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:29:42.073189
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("fr")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    formatted_date

# Generated at 2024-06-03 15:29:45.989670
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory to simulate the locale directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake .mo file for testing
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)
        mo_file_path = os.path.join(locale_dir, "test.mo")
        with open(mo_file_path, "wb") as f:
            f.write(b'\xde\x12\x04\x95')  # Writing a minimal .mo file header

        # Call the function to load translations
        load_gettext_translations(temp_dir, "test")

        # Check if the translation was loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext.GNUTranslations)

        # Check if the supported locales were updated
        assert "es" in _supported

# Generated at 2024-06-03 15:29:52.349292
```python
    translations = gettext.NullTranslations()
    locale = GettextLocale("en", translations)

    # Mock the gettext and ngettext methods
    locale.gettext = lambda msg: f"translated_{msg}"
    locale.ngettext = lambda msg, plural_msg, count: f"translated_{plural_msg}" if count != 1 else f"translated_{msg}"

    # Test singular form without context
    result = locale.pgettext("context", "message")
    assert result == "translated_context\x04message", f"Expected 'translated_context\x04message', got {result}"

    # Test plural form without context
    result = locale.pgettext("context", "message", "messages", 2)
    assert result == "translated_messages", f"Expected 'translated_messages', got {result}"

    # Test singular form with context
    result = locale.pgettext("context", "message")
    assert result == "translated_context\x04message", f"

# Generated at 2024-06-03 15:29:56.918000
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("fr")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    formatted_date

# Generated at 2024-06-03 15:30:06.459669
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("fr")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    formatted_date

# Generated at 2024-06-03 15:30:10.597815
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory to simulate the locale directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake .mo file for testing
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)
        mo_file_path = os.path.join(locale_dir, "testdomain.mo")
        with open(mo_file_path, "wb") as f:
            f.write(b'\xde\x12\x04\x95')  # Writing some random bytes to simulate a .mo file

        # Call the function to load translations
        load_gettext_translations(temp_dir, "testdomain")

        # Check if the translations were loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext.GNUTranslations)
        assert _use_gettext is True
        assert "en

# Generated at 2024-06-03 15:30:14.496023
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory to simulate the locale directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake .mo file for testing
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)
        mo_file_path = os.path.join(locale_dir, "test.mo")
        with open(mo_file_path, "wb") as f:
            f.write(b'\xde\x12\x04\x95')  # Writing a minimal .mo file header

        # Call the function to load translations
        load_gettext_translations(temp_dir, "test")

        # Check if the translation was loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext.GNUTranslations)

        # Check if the supported locales were updated
        assert "es" in _supported

# Generated at 2024-06-03 15:30:19.098872
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:30:24.878899
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("fr")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    formatted_date

# Generated at 2024-06-03 15:30:29.518473
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory to simulate the locale directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake .mo file for testing
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)
        mo_file_path = os.path.join(locale_dir, "test.mo")
        with open(mo_file_path, "wb") as f:
            f.write(b'\xde\x12\x04\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')

        # Call the function to load translations
        load_gettext_translations(temp_dir, "test")

        # Check if the translations were loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext.GNUTranslations)

        # Check if

# Generated at 2024-06-03 15:30:59.395173
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"

    locale = Locale("fr")
    date = datetime.datetime(2023, 10, 5)
    assert locale.format_day(date) == "Thursday, October 5"  # Assuming translation is not implemented
    assert locale.format_day(date, dow=False) == "October 5"  # Assuming translation is not implemented

    locale = Locale("fa")
    date = datetime.datetime(2023, 10, 5)
    assert locale.format_day(date) == "Thursday, October 5"  # Assuming translation is not implemented
    assert locale.format_day(date, dow=False) == "October 5"  # Assuming translation is not implemented
```

# Generated at 2024-06-03 15:31:04.850533
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_date}"

    # Test without day of week
    formatted_date = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_date == "October 5", f"Expected 'October 5', but got {formatted_date}"

    # Test with different locale
    locale = Locale("es")
    formatted_date = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_date == "jueves, octubre 5", f"Expected 'jueves, octubre 5', but got {formatted_date}"

    formatted_date

# Generated at 2024-06-03 15:31:08.166534
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"

    locale = Locale("fr")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"

    locale = Locale("fa")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    assert locale.format_day(date) == "Thursday, October 5"
    assert locale.format_day(date, dow=False) == "October 5"
```

# Generated at 2024-06-03 15:31:12.760413
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake locale directory structure
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)

        # Create a fake .mo file
        mo_path = os.path.join(locale_dir, "test.mo")
        with open(mo_path, "wb") as f:
            f.write(b'\xde\x12\x04\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')

        # Call the function to load translations
        load_gettext_translations(temp_dir, "test")

        # Check if the translation was loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext.GNUTranslations)

        # Check if

# Generated at 2024-06-03 15:31:17.195246
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time: seconds ago
    date = now - datetime.timedelta(seconds=30)
    assert locale.format_date(date) == "1 second ago" or locale.format_date(date) == "30 seconds ago"

    # Test relative time: minutes ago
    date = now - datetime.timedelta(minutes=5)
    assert locale.format_date(date) == "1 minute ago" or locale.format_date(date) == "5 minutes ago"

    # Test relative time: hours ago
    date = now - datetime.timedelta(hours=2)
    assert locale.format_date(date) == "1 hour ago" or locale.format_date(date) == "2 hours ago"

    # Test relative time: yesterday
    date = now - datetime.timedelta(days=1)
    assert locale.format_date(date) == "yesterday" or locale.format_date(date) == "yesterday at %s" % date.strftime

# Generated at 2024-06-03 15:31:21.834750
```python
    translations = {
        "singular": {
            "Hello": "Hola",
            "Goodbye": "Adiós"
        },
        "plural": {
            "Hello": "Holas",
            "Goodbye": "Adioses"
        }
    }
    locale = CSVLocale("es", translations)

    # Test singular translation
    assert locale.translate("Hello") == "Hola"
    assert locale.translate("Goodbye") == "Adiós"

    # Test plural translation
    assert locale.translate("Hello", "Holas", 2) == "Holas"
    assert locale.translate("Goodbye", "Adioses", 2) == "Adioses"

    # Test fallback to original message if not found
    assert locale.translate("Welcome") == "Welcome"
    assert locale.translate("Welcome", "Bienvenidos", 2) == "Bienvenidos"
```

# Generated at 2024-06-03 15:31:26.409196
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_day = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_day == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_day}"

    # Test without day of week
    formatted_day = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_day == "October 5", f"Expected 'October 5', but got {formatted_day}"

    # Test with different locale
    locale = Locale("fr")
    formatted_day = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_day == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_day}"

    formatted_day

# Generated at 2024-06-03 15:31:32.451773
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake locale directory structure
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)

        # Create a fake .mo file
        mo_file_path = os.path.join(locale_dir, "test.mo")
        with open(mo_file_path, "wb") as mo_file:
            mo_file.write(b'\xde\x12\x04\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')

        # Call the function to load translations
        load_gettext_translations(temp_dir, "test")

        # Check if the translations were loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext.GNUTranslations)



# Generated at 2024-06-03 15:31:37.353190
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(seconds=90)) == "1 minute ago"
    assert locale.format_date(now - datetime.timedelta(minutes=90)) == "1 hour ago"

    # Test absolute time formatting
    assert locale.format_date(now - datetime.timedelta(days=1), relative=False) == now.strftime("%B %d, %Y at %I:%M %p")

    # Test full format
    assert locale.format_date(now - datetime.timedelta(days=1), full_format=True) == now.strftime("%B %d, %Y at %I:%M %p")

    # Test future date
    future_date = now + datetime.timedelta(days=1)
    assert locale.format_date(future_date) == future_date.strftime("%B %d, %

# Generated at 2024-06-03 15:31:41.451300
```python
    locale = Locale("en")
    assert locale.list([]) == ""
    assert locale.list(["A"]) == "A"
    assert locale.list(["A", "B"]) == "A and B"
    assert locale.list(["A", "B", "C"]) == "A, B and C"

    locale_fa = Locale("fa")
    assert locale_fa.list(["A", "B"]) == "A \u0648 B"
    assert locale_fa.list(["A", "B", "C"]) == "A \u0648 B \u0648 C"
```

# Generated at 2024-06-03 15:32:15.091569
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:32:21.696227
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory to simulate the locale directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake .mo file for testing
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)
        mo_file_path = os.path.join(locale_dir, "testdomain.mo")
        with open(mo_file_path, "wb") as mo_file:
            mo_file.write(b'\xde\x12\x04\x95\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')

        # Call the function to load the translations
        load_gettext_translations(temp_dir, "testdomain")

        # Check if the translations were loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext.GNUTranslations

# Generated at 2024-06-03 15:32:26.667851
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(minutes=5)) == "5 minutes ago"
    assert locale.format_date(now - datetime.timedelta(hours=1)) == "1 hour ago"
    assert locale.format_date(now - datetime.timedelta(days=1)) == "yesterday at %s" % (now - datetime.timedelta(days=1)).strftime("%I:%M %p")

    # Test absolute time formatting
    assert locale.format_date(now - datetime.timedelta(days=3), relative=False) == (now - datetime.timedelta(days=3)).strftime("%B %d, %Y at %I:%M %p")
    assert locale.format_date(now - datetime.timedelta(days=300), relative=False) == (now - datetime.timedelta(days=300)).strftime("%B %d

# Generated at 2024-06-03 15:32:30.798795
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:32:34.734648
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:32:40.815574
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
        %(name)s liked this,A %(name)s les gustó esto,plural
        %(name)s liked this,A %(name)s le gustó esto,singular
        """
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les

# Generated at 2024-06-03 15:32:45.477542
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(minutes=5)) == "5 minutes ago"
    assert locale.format_date(now - datetime.timedelta(hours=1)) == "1 hour ago"
    assert locale.format_date(now - datetime.timedelta(days=1)) == "yesterday at %s" % now.strftime("%I:%M %p").lstrip('0')
    assert locale.format_date(now - datetime.timedelta(days=3)) == now.strftime("%A at %I:%M %p").lstrip('0')
    assert locale.format_date(now - datetime.timedelta(days=100)) == now.strftime("%B %d at %I:%M %p").lstrip('0')

    # Test full format
    assert locale.format_date(now - datetime.timedelta(days=400),

# Generated at 2024-06-03 15:32:51.654415
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:32:58.149318
```python
    import tempfile
    import shutil
    import os
    import gettext

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a fake locale directory structure
        locale_dir = os.path.join(temp_dir, "es", "LC_MESSAGES")
        os.makedirs(locale_dir)

        # Create a fake .mo file
        mo_file_path = os.path.join(locale_dir, "test.mo")
        with open(mo_file_path, "wb") as mo_file:
            mo_file.write(b'\xde\x12\x04\x95')  # Writing a minimal valid .mo file header

        # Call the function to load translations
        load_gettext_translations(temp_dir, "test")

        # Check if the translations were loaded correctly
        assert "es" in _translations
        assert isinstance(_translations["es"], gettext.GNUTranslations)

        # Check if the supported locales were updated
        assert "

# Generated at 2024-06-03 15:33:04.795239
```python
    locale = Locale("en")
    date = datetime.datetime(2023, 10, 5, 15, 30)
    gmt_offset = 0

    # Test with day of week
    formatted_day = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_day == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_day}"

    # Test without day of week
    formatted_day = locale.format_day(date, gmt_offset, dow=False)
    assert formatted_day == "October 5", f"Expected 'October 5', but got {formatted_day}"

    # Test with different locale
    locale = Locale("fr")
    formatted_day = locale.format_day(date, gmt_offset, dow=True)
    assert formatted_day == "Thursday, October 5", f"Expected 'Thursday, October 5', but got {formatted_day}"

    formatted_day

# Generated at 2024-06-03 15:34:31.356529
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto

# Generated at 2024-06-03 15:34:36.017421
```python
    locale = Locale("en")
    now = datetime.datetime.utcnow()

    # Test relative time formatting
    assert locale.format_date(now - datetime.timedelta(seconds=30)) == "1 second ago"
    assert locale.format_date(now - datetime.timedelta(minutes=5)) == "5 minutes ago"
    assert locale.format_date(now - datetime.timedelta(hours=1)) == "1 hour ago"
    assert locale.format_date(now - datetime.timedelta(days=1)) == "yesterday at %s" % now.strftime("%I:%M %p").lstrip('0')
    assert locale.format_date(now - datetime.timedelta(days=3)) == now.strftime("%A at %I:%M %p").lstrip('0')
    assert locale.format_date(now - datetime.timedelta(days=30)) == now.strftime("%B %d at %I:%M %p").lstrip('0')

    # Test full format
    assert locale.format_date(now - datetime.timedelta(days=365),

# Generated at 2024-06-03 15:34:40.900707
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations
        load_translations(temp_dir)

        # Check if translations are loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto"
        assert _translations

# Generated at 2024-06-03 15:34:46.367948
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Create a sample translation file
        sample_translation = """I love you,Te amo
%(name)s liked this,A %(name)s les gustó esto,plural
%(name)s liked this,A %(name)s le gustó esto,singular
"""
        with open(os.path.join(temp_dir, "es_LA.csv"), "w", encoding="utf-8") as f:
            f.write(sample_translation)

        # Load translations from the temporary directory
        load_translations(temp_dir)

        # Check if the translations were loaded correctly
        assert "es_LA" in _translations
        assert _translations["es_LA"]["unknown"]["I love you"] == "Te amo"
        assert _translations["es_LA"]["plural"]["%(name)s liked this"] == "A %(name)s les gustó esto