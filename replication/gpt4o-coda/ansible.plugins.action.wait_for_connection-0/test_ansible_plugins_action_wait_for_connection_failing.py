# Automatically generated by Pynguin.
import ansible.plugins.action.wait_for_connection as module_0

def test_case_0():
    try:
        bool_0 = True
        timed_out_exception_0 = module_0.TimedOutException()
        int_0 = -1609
        tuple_0 = (bool_0, int_0)
        list_0 = [tuple_0]
        str_0 = '@0h'
        dict_0 = {str_0: timed_out_exception_0, str_0: bool_0}
        int_1 = 2874
        str_1 = '8UFO?jlg7'
        str_2 = 'tRDb'
        float_0 = -2054.0
        timed_out_exception_1 = module_0.TimedOutException()
        action_module_0 = module_0.ActionModule(int_1, str_1, str_2, str_1, float_0, timed_out_exception_1)
        var_0 = action_module_0.do_until_success_or_timeout(timed_out_exception_0, bool_0, dict_0, list_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        timed_out_exception_0 = module_0.TimedOutException()
        str_0 = ' '
        str_1 = '=x'
        dict_0 = {}
        str_2 = 'j"sIa'
        str_3 = '\x0bT^FnB=\tBPoAOs'
        action_module_0 = module_0.ActionModule(timed_out_exception_0, str_0, str_1, dict_0, str_2, str_3)
        list_0 = []
        set_0 = {str_1, str_1}
        int_0 = 301
        var_0 = action_module_0.do_until_success_or_timeout(list_0, set_0, timed_out_exception_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        bytes_0 = b'XQ\x9a'
        str_0 = 'DhmY_>(2GV/\x0b]'
        bool_1 = False
        bool_2 = False
        str_1 = 'manager'
        str_2 = 'exclude'
        dict_0 = {str_1: bytes_0, str_1: bool_1, str_2: str_2, str_1: bool_2}
        action_module_0 = module_0.ActionModule(bytes_0, str_0, bool_1, bool_2, dict_0, bytes_0)
        var_0 = action_module_0.run(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        int_0 = -1609
        tuple_0 = (bool_0, int_0)
        list_0 = [tuple_0]
        timed_out_exception_0 = module_0.TimedOutException(*list_0)
        str_0 = '\n    **Deprecated** Use :py:func:`platform.system` directly.\n\n    :returns: Name of the platform the module is running on in a native string\n\n    Returns a native string that labels the platform ("Linux", "Solaris", etc). Currently, this is\n    the result of calling :py:func:`platform.system`.\n    '
        dict_0 = {str_0: timed_out_exception_0, str_0: bool_0}
        int_1 = 2874
        str_1 = 'tkJvb'
        str_2 = 'param'
        float_0 = -2051.9305535549074
        timed_out_exception_1 = module_0.TimedOutException()
        action_module_0 = module_0.ActionModule(int_1, str_1, str_1, str_2, float_0, timed_out_exception_1)
        var_0 = action_module_0.do_until_success_or_timeout(timed_out_exception_0, bool_0, dict_0, list_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        str_0 = 'DhmY_>(2GV/\x0b]'
        str_1 = 'xVTOr:SJXj\r\r\x0c'
        dict_0 = {str_0: str_0}
        int_0 = 700
        set_0 = {bool_0}
        list_0 = [set_0]
        action_module_0 = module_0.ActionModule(bool_0, dict_0, int_0, dict_0, set_0, list_0)
        var_0 = action_module_0.run(str_0, str_1)
    except BaseException:
        pass