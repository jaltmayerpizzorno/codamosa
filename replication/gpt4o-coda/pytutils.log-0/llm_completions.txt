

# Generated at 2024-06-03 05:54:45.148873
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:54:46.425802
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:54:49.082564
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:54:52.665571
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {"version": 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {"version": 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:54:55.277383
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s'
            }
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 1
    assert

# Generated at 2024-06-03 05:54:57.937275
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:54:59.103534
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:03.584216
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:55:04.906701
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:08.453389
```python
    import json
    import logging
    import os

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers)

# Generated at 2024-06-03 05:55:16.485349
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:20.097511
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:55:21.602156
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:23.387935
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:24.878245
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.CRITICAL

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:26.370041
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:28.095187
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:29.572171
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:32.247377
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:34.347562
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:43.430861
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:55:44.898734
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:46.183637
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:49.442475
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:55:51.903844
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:53.925253
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:55.733957
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:55:59.271201
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level

# Generated at 2024-06-03 05:56:01.058075
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:03.874898
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:23.803088
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 1


# Generated at 2024-06-03 05:56:27.113821
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:56:28.861116
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:30.532226
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:33.922477
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 1


# Generated at 2024-06-03 05:56:35.629241
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:37.037484
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:40.119017
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 1


# Generated at 2024-06-03 05:56:41.836097
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:43.374828
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:58.374663
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:56:59.689426
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:03.114882
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid json')
   

# Generated at 2024-06-03 05:57:07.130524
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid json')
   

# Generated at 2024-06-03 05:57:08.875751
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:10.536691
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:12.662901
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:17.326357
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid json')
   

# Generated at 2024-06-03 05:57:21.836966
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 1


# Generated at 2024-06-03 05:57:23.536618
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:38.735734
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:42.216632
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {"version": 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {"version": 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:57:43.844487
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:45.406265
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:46.793951
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:47.915276
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:49.468867
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:50.975454
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:52.441834
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:57:54.481469
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:09.658081
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:11.064768
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:14.130711
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid json')
   

# Generated at 2024-06-03 05:58:15.944310
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:17.412783
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:18.003350
```python

# Generated at 2024-06-03 05:58:19.585461
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:20.983755
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:22.137062
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:23.894553
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:44.151518
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 1


# Generated at 2024-06-03 05:58:48.705506
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:58:50.007430
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:52.184340
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:58:56.264606
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid json')
   

# Generated at 2024-06-03 05:58:59.210022
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 05:59:00.699983
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:02.199345
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.CRITICAL

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:05.246653
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 1


# Generated at 2024-06-03 05:59:06.740606
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:35.528083
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:36.902586
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:38.950004
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:41.032183
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:42.917743
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:44.484808
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:47.641366
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:49.217678
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:50.830080
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 05:59:52.228648
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:00:47.173337
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:00:49.766801
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 06:00:51.818298
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:00:53.322532
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:00:55.538610
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:00:57.141096
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:00:58.904585
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:00:59.361686
```python

# Generated at 2024-06-03 06:01:01.473246
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:01:05.322750
```python
    import json
    import logging

    # Test default configuration
    configure()
    logger = logging.getLogger()
    assert logger.level == logging.DEBUG
    assert len(logger.handlers) == 1
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Test custom configuration
    custom_config = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(message)s',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
                'level': logging.INFO,
            },
        },
        'root': {
            'handlers': ['console'],
            'level': logging.INFO,
        },
    }
    configure(config=custom_config)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert len(logger.handlers) == 1


# Generated at 2024-06-03 06:01:46.297769
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:01:47.820668
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:01:49.415163
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:01:52.031888
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:01:55.178813
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid json')
   

# Generated at 2024-06-03 06:01:56.899062
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:02:02.226459
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 06:02:03.910335
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:02:05.540931
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:02:07.219467
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:03:19.238226
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:03:22.451707
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 06:03:24.431540
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:03:26.297586
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:03:27.969174
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:03:30.475520
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected level {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:03:33.213969
```python
    # Test with given config
    given_config = {'version': 1}
    assert get_config(given=given_config) == given_config

    # Test with environment variable
    os.environ['LOGGING'] = '{"version": 1}'
    assert get_config(env_var='LOGGING') == {'version': 1}
    del os.environ['LOGGING']

    # Test with default config
    default_config = {'version': 1}
    assert get_config(default=default_config) == default_config

    # Test with invalid config
    try:
        get_config()
    except ValueError as e:
        assert str(e) == 'Invalid logging config: None'

    # Test with JSON string config
    json_config = '{"version": 1}'
    assert get_config(given=json_config) == {'version': 1}

    # Test with invalid JSON string config
    try:
        get_config(given='invalid_json')
   

# Generated at 2024-06-03 06:03:35.146882
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    new_level = logging.ERROR

    with logger_level(logger, new_level):
        assert logger.level == new_level, f"Expected logger level to be {new_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected logger level to be reset to {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:03:36.960126
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.ERROR

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected level {test_level}, but got {logger.level}"

    assert logger.level == initial_level, f"Expected level {initial_level}, but got {logger.level}"
```

# Generated at 2024-06-03 06:03:38.492897
```python
    logger = get_logger('test_logger')
    initial_level = logger.level
    test_level = logging.CRITICAL

    with logger_level(logger, test_level):
        assert logger.level == test_level, f"Expected {test_level}, got {logger.level}"

    assert logger.level == initial_level, f"Expected {initial_level}, got {logger.level}"
```