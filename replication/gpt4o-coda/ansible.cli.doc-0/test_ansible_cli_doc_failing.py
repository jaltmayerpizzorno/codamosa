# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        doc_c_l_i_0 = module_0.DocCLI()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xa2\x84\x8aQ\xda\xff\x14\xc87\xa4\xb42>\xfc'
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        var_0 = doc_c_l_i_0.init_parser()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -1426.112
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.post_process_args(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        str_0 = 'p\tX^Wd!/rh`k_K*'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.display_plugin_list(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        role_mixin_0 = module_0.RoleMixin()
        doc_c_l_i_0 = module_0.DocCLI(role_mixin_0)
        var_0 = doc_c_l_i_0.run()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ":BRZq4Bb'E1B.|t@F@@"
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        float_0 = 0.0001
        float_1 = 1452.0929
        var_0 = doc_c_l_i_0.get_plugin_metadata(float_0, float_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1799
        str_0 = None
        complex_0 = None
        bool_0 = False
        dict_0 = {str_0: complex_0, bool_0: int_0}
        list_0 = [str_0, dict_0, str_0]
        str_1 = 'tO:'
        list_1 = [str_0, str_0, int_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_1)
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(complex_0, list_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = None
        list_0 = [bytes_0]
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        int_0 = -166
        plugin_not_found_1 = module_0.PluginNotFound()
        str_0 = '_#s<#<m$iE-'
        bytes_1 = b'\xc29\x92\xf0\xcf\nl\x1b\xc9\\\x0b=o\xe3\x96~'
        bool_0 = True
        bytes_2 = b'#\xa6\x82\xbcfY\xa0*;\xec\x8flo/\x909\xce\xa3\x08@'
        dict_0 = {plugin_not_found_0: plugin_not_found_1}
        tuple_0 = (list_0, bytes_2, dict_0, bytes_1)
        str_1 = 'S*SVS'
        str_2 = 'u(9oJ57u`=UlY=<'
        str_3 = '!|3*\x0cdy/RU\\'
        str_4 = "(Yx!U eh\x0b'qqE1I^"
        dict_1 = {str_1: int_0, str_2: bool_0, str_3: bytes_1, str_4: plugin_not_found_0}
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.format_plugin_doc(bool_0, tuple_0, dict_0, dict_1, str_2, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '$'
        bytes_0 = b'\xc4YS\x15V3W\xbb\xcd\xc4acTY\xe4\x13O'
        list_0 = None
        var_0 = module_0.add_collection_plugins(bytes_0, list_0)
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        str_1 = "{action}: getting boot time with command: '{command}'"
        tuple_0 = ()
        dict_0 = {str_0: str_0, str_1: tuple_0, doc_c_l_i_0: doc_c_l_i_0, str_1: str_1}
        role_mixin_0 = module_0.RoleMixin()
        doc_c_l_i_1 = module_0.DocCLI(role_mixin_0)
        var_1 = doc_c_l_i_1.add_fields(doc_c_l_i_0, str_0, str_1, tuple_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        str_0 = '6&+Oe[kQ7T3sH9A|<?]i'
        float_0 = 923.1
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.get_man_text(dict_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xbca\xd18'
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        str_0 = 'dT}Y4~4'
        var_0 = doc_c_l_i_0.get_all_plugins_of_type(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 0.001
        str_0 = 'U\x0bg0^b~Hn8'
        bytes_0 = b'\xe4\x04}:\xc1\x12\xad\x18$\x9e\xda\x0f'
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        int_0 = -3143
        plugin_not_found_0 = module_0.PluginNotFound()
        str_1 = '&*EO+">[\t'
        dict_0 = {str_1: plugin_not_found_0, str_1: float_0}
        var_0 = doc_c_l_i_0.format_snippet(int_0, plugin_not_found_0, dict_0)
        list_0 = [bytes_0, str_0, doc_c_l_i_0]
        str_2 = 'lookup'
        var_1 = doc_c_l_i_0.get_role_man_text(str_2, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        role_mixin_0 = module_0.RoleMixin()
        list_0 = []
        plugin_not_found_0 = module_0.PluginNotFound()
        str_0 = '${'
        str_1 = '\x0c`9'
        doc_c_l_i_0 = module_0.DocCLI(str_1)
        var_0 = doc_c_l_i_0.add_fields(role_mixin_0, list_0, plugin_not_found_0, str_0, role_mixin_0)
        int_0 = None
        str_2 = 'p\tX^Wd!/rh`k_K*'
        doc_c_l_i_1 = module_0.DocCLI(str_2)
        var_1 = doc_c_l_i_1.display_plugin_list(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'U\x0bg0^b~Hn8'
        str_1 = 'inventory'
        str_2 = 'Z^N^/k|(B#fc<dNU'
        dict_0 = {}
        list_0 = [str_0, str_1, str_2, dict_0]
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        int_0 = 3294
        doc_c_l_i_0 = module_0.DocCLI(int_0)
        var_0 = doc_c_l_i_0.get_plugin_metadata(str_1, plugin_not_found_0)
    except BaseException:
        pass

def test_case_14():
    try:
        role_mixin_0 = module_0.RoleMixin()
        var_0 = module_0.jdump(role_mixin_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\\bHORIZONTALLINE\\b'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        int_0 = -3143
        plugin_not_found_0 = module_0.PluginNotFound()
        dict_0 = {}
        var_0 = doc_c_l_i_0.run()
        str_1 = '.AJoAbq\n\n$k<_r.CN\x0bq!'
        tuple_0 = (str_1,)
        set_0 = None
        var_1 = doc_c_l_i_0.add_fields(tuple_0, dict_0, int_0, set_0)
        list_0 = []
        var_2 = doc_c_l_i_0.get_man_text(list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'V^dAFhl\tyyi'
        list_0 = []
        role_mixin_0 = module_0.RoleMixin(*list_0)
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        bytes_0 = b'\xc1\xa0\x8a\xa4\xe0\x86'
        doc_c_l_i_0 = module_0.DocCLI(bytes_0)
        str_1 = 'XK_/i1bL\x0bL\nBP6hTe:1'
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(str_1, plugin_not_found_0, str_0)
    except BaseException:
        pass