# Automatically generated by Pynguin.
import ansible.module_utils.common.dict_transformations as module_0

def test_case_0():
    try:
        bytes_0 = b'\xef\xac\x0b\xc38t\x14\x8a\xa6s\xa8n\x94M\xf2'
        var_0 = module_0.camel_dict_to_snake_dict(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'-\x8f\xea#>\\N\xe1\x7f\xb1\xa1\xa3\xacI\x95\x0cj\xf7'
        bool_0 = True
        tuple_0 = ()
        dict_0 = {bytes_0: bool_0}
        list_0 = [bytes_0, bytes_0]
        list_1 = [tuple_0, bytes_0, dict_0, list_0]
        var_0 = module_0.snake_dict_to_camel_dict(list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 659
        str_0 = '[0l<2V)_;=#('
        dict_0 = {str_0: int_0}
        var_0 = module_0.dict_merge(str_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        var_0 = module_0.recursive_diff(bool_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -591.46
        str_0 = 'MINWEEKS'
        dict_0 = {str_0: str_0}
        bytes_0 = b'\x19\x9a\xf4'
        var_0 = module_0.snake_dict_to_camel_dict(dict_0, bytes_0)
        var_1 = module_0.camel_dict_to_snake_dict(float_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        tuple_0 = ()
        bool_0 = True
        dict_1 = {tuple_0: dict_0}
        var_0 = module_0.camel_dict_to_snake_dict(dict_1, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'R$RZeq:M;Yk#96T|2=i'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.camel_dict_to_snake_dict(dict_0)
        str_1 = 'subkey1'
        bytes_0 = b'\xf8\x89\xad(\xb6x\x04\xe5<\xd8'
        var_1 = module_0.snake_dict_to_camel_dict(dict_0, bytes_0)
        var_2 = module_0.recursive_diff(dict_0, dict_0)
        list_0 = [var_1, str_1]
        int_0 = 1144
        tuple_0 = (str_1, str_1, int_0)
        var_3 = module_0.dict_merge(tuple_0, tuple_0)
        var_4 = module_0.dict_merge(list_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "L_<i*Kd]\\=V'"
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.camel_dict_to_snake_dict(dict_0)
        var_1 = module_0.snake_dict_to_camel_dict(str_0)
        var_2 = module_0.snake_dict_to_camel_dict(dict_0)
        bytes_0 = b'\xe2N\xf7\xab\xe946\x9f\xf9\x12\xeaJ\x90K'
        var_3 = module_0.snake_dict_to_camel_dict(dict_0, bytes_0)
        var_4 = module_0.recursive_diff(dict_0, dict_0)
        list_0 = None
        str_1 = '\x0bnryL'
        int_0 = 1144
        tuple_0 = (str_1, str_0, int_0)
        var_5 = module_0.dict_merge(tuple_0, tuple_0)
        var_6 = module_0.dict_merge(list_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '_`%){ZER#{T>'
        str_1 = 'vale1'
        dict_0 = {str_0: str_1, str_1: str_0}
        var_0 = module_0.camel_dict_to_snake_dict(dict_0)
        var_1 = module_0.snake_dict_to_camel_dict(dict_0)
        var_2 = module_0.recursive_diff(dict_0, dict_0)
        list_0 = None
        str_2 = '\x0bnryL'
        str_3 = "Xi'H"
        int_0 = 1144
        tuple_0 = (str_2, str_3, int_0)
        var_3 = module_0.dict_merge(tuple_0, tuple_0)
        bytes_0 = b'E\xa3\xca\x9d\n\\@\xe96\x81\xc14\x12\xab\xe4=\xed/'
        var_4 = module_0.recursive_diff(list_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '_valid_attrs'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.camel_dict_to_snake_dict(dict_0)
        var_1 = module_0.snake_dict_to_camel_dict(dict_0)
        var_2 = module_0.snake_dict_to_camel_dict(dict_0)
        bytes_0 = b'\xf8\x89\xad(\xb6x\x04\xe5<\xd8'
        var_3 = module_0.snake_dict_to_camel_dict(dict_0, bytes_0)
        var_4 = module_0.recursive_diff(dict_0, dict_0)
        list_0 = [var_3, var_2]
        int_0 = 1110
        bool_0 = None
        var_5 = module_0.dict_merge(int_0, bool_0)
        var_6 = module_0.snake_dict_to_camel_dict(list_0)
        var_7 = module_0.dict_merge(list_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = None
        str_0 = 'marx%|I8f+s8]My_t'
        var_0 = module_0.dict_merge(set_0, str_0)
        str_1 = "Le<iLKd]#=V'"
        dict_0 = {str_1: str_1, str_1: str_1}
        bool_0 = True
        var_1 = module_0.dict_merge(str_1, bool_0)
        var_2 = module_0.camel_dict_to_snake_dict(dict_0)
        var_3 = module_0.snake_dict_to_camel_dict(dict_0)
        var_4 = module_0.snake_dict_to_camel_dict(dict_0)
        var_5 = module_0.snake_dict_to_camel_dict(dict_0, str_1)
        var_6 = module_0.recursive_diff(dict_0, dict_0)
        str_2 = 'DevpollSelector'
        var_7 = module_0.snake_dict_to_camel_dict(str_2)
        var_8 = module_0.dict_merge(dict_0, dict_0)
        list_0 = None
        dict_1 = {}
        var_9 = module_0.recursive_diff(dict_1, dict_0)
        var_10 = module_0.recursive_diff(dict_0, dict_1)
        int_0 = 1144
        str_3 = 'vars file %s was not found'
        tuple_0 = (str_1, list_0, int_0, str_3)
        bytes_0 = b'\xb8\xc5\x10x\xe0\xc4\x88\xfa'
        var_11 = module_0.dict_merge(str_2, bytes_0)
        var_12 = module_0.dict_merge(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "Le<iLKd]#=V'"
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.camel_dict_to_snake_dict(dict_0)
        int_0 = 6623
        str_1 = 'Uvx'
        var_1 = module_0.snake_dict_to_camel_dict(int_0, str_1)
        var_2 = module_0.snake_dict_to_camel_dict(dict_0)
        var_3 = module_0.snake_dict_to_camel_dict(dict_0)
        bytes_0 = b'\xf8\x89\xad(\xb6x\x04\xe5<\xd8'
        var_4 = module_0.snake_dict_to_camel_dict(dict_0, bytes_0)
        var_5 = module_0.recursive_diff(dict_0, dict_0)
        str_2 = 'DevpollSelector'
        var_6 = module_0.snake_dict_to_camel_dict(str_2)
        str_3 = "Le<iLKd]#=V'c"
        var_7 = module_0.dict_merge(int_0, str_3)
        var_8 = module_0.dict_merge(dict_0, dict_0)
        list_0 = None
        dict_1 = {var_1: var_5, str_0: var_8}
        var_9 = module_0.recursive_diff(dict_0, dict_1)
        int_1 = 1144
        str_4 = 'vars file %s was not found'
        tuple_0 = (str_0, list_0, int_1, str_4)
        set_0 = None
        str_5 = 'cz0u;E+q'
        bytes_1 = b'\xb8\xc5\x10x\xe0\xc4\x88\xfa'
        var_10 = module_0.dict_merge(str_5, bytes_1)
        float_0 = -4871.912965
        var_11 = module_0.dict_merge(set_0, float_0)
        var_12 = module_0.dict_merge(tuple_0, dict_0)
    except BaseException:
        pass