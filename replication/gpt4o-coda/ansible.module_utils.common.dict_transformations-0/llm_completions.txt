

# Generated at 2024-05-30 23:50:43.342908
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:50:46.781706
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:50:50.482809
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 5
        },
        'f': 6
    }

    expected_output = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 5
            },
            'f': 6
        }
    )

    assert recursive_diff(dict1, dict2) == expected_output

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        }
    }

    dict4 = {
        '

# Generated at 2024-05-30 23:50:54.241230
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:50:57.892616
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:51:02.439199
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_output = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_output

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        }
    }

    dict4 = {
        '

# Generated at 2024-05-30 23:51:06.001374
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey2': 'subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:51:10.293047
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:51:13.780226
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=["Tags"]) == expected_snake_dict
```

# Generated at 2024-05-30 23:51:18.216911
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:51:26.322126
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:51:30.822535
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey2': 'subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:51:34.707888
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:51:38.175354
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:51:41.603039
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "CaseSensitiveKey": "case_sensitive_value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "CaseSensitiveKey": "case_sensitive_value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:51:44.857501
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey2': 'subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:51:50.557542
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_output = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_output

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:51:55.317499
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:51:58.876878
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:52:02.490366
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:52:12.500218
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:52:15.582088
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:52:18.713514
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey2': 'subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:52:21.885282
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "CaseSensitiveKey": "case_value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "CaseSensitiveKey": "case_value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict

    reversible_camel_dict = {
        "HT

# Generated at 2024-05-30 23:52:25.666414
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        }
    }

    dict4 = {
        '

# Generated at 2024-05-30 23:52:29.203441
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:52:32.351004
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_output = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_output

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        }
    }

    dict4 = {
        '

# Generated at 2024-05-30 23:52:36.016530
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        }
    }

    dict4 = {
        '

# Generated at 2024-05-30 23:52:42.149542
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:52:49.607178
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:53:05.735326
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict, reversible

# Generated at 2024-05-30 23:53:10.577842
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedDict": {
            "InnerCamelCaseKey": "inner_value"
        },
        "ListKey": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_dict": {
            "inner_camel_case_key": "inner_value"
        },
        "list_key": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict, reversible=True, ignore_list=("Tags

# Generated at 2024-05-30 23:53:14.507285
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict, reversible=True

# Generated at 2024-05-30 23:53:18.997231
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            {"AnotherListCamelCase": "another_list_value"}
        ],
        "Tags": {
            "Key": "Value",
            "AnotherKey": "AnotherValue"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            {"another_list_camel_case": "another_list_value"}
        ],
        "tags": {
            "Key": "Value",
            "AnotherKey": "AnotherValue"
        }
    }

    assert camel_dict_to_snake_dict

# Generated at 2024-05-30 23:53:22.610013
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey2': 'subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:53:26.758597
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict

    reversible_camel_dict = {
        "HTTPEndpoint": "value",


# Generated at 2024-05-30 23:53:30.105283
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:53:35.253690
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:53:38.678138
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:53:44.180460
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:54:07.677905
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListCamelCase": [
            {"ListCamelCaseItem": "item_value"},
            "simple_item"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_camel_case": [
            {"list_camel_case_item": "item_value"},
            "simple_item"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:54:11.033520
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict

# Generated at 2024-05-30 23:54:16.760744
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:54:20.173635
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:54:23.554313
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:54:30.292818
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:54:34.039915
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:54:37.163220
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:54:39.995479
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:54:43.902887
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'new_subvalue1',
            'subkey2': 'subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:55:16.895009
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:55:19.886595
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:55:24.627634
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict

# Generated at 2024-05-30 23:55:27.588658
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        }
    }

    dict4 = {
        '

# Generated at 2024-05-30 23:55:31.220360
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:55:34.480492
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:55:39.093073
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:55:42.464315
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict

# Generated at 2024-05-30 23:55:46.009047
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com"
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com"
    }

    assert camel_dict_to_snake_dict(camel_dict, reversible=True) == expected_snake_dict

    # Test with ignore_list
    camel_dict_with_ignore = {
        "CamelCase

# Generated at 2024-05-30 23:55:49.619293
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict

# Generated at 2024-05-30 23:56:22.032981
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:56:28.482375
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            {"AnotherListCamelCase": "another_list_value"}
        ],
        "Tags": {
            "Key": "Value",
            "AnotherKey": "AnotherValue"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            {"another_list_camel_case": "another_list_value"}
        ],
        "tags": {
            "Key": "Value",
            "AnotherKey": "AnotherValue"
        }
    }

    assert camel_dict_to_snake_dict

# Generated at 2024-05-30 23:56:31.502257
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:56:34.122510
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:56:38.025686
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:56:41.988719
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com"
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com"
    }

    assert camel_dict_to_snake_dict(camel_dict, reversible=True) == expected_snake_dict

    # Test with ignore_list
    camel_dict_with_ignore = {
        "CamelCase

# Generated at 2024-05-30 23:56:44.935460
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:56:48.802062
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:56:54.799448
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:56:58.222091
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        }
    }

    dict4 = {
        '

# Generated at 2024-05-30 23:58:13.515338
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",)) == expected_snake_dict
```

# Generated at 2024-05-30 23:58:17.004523
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:58:20.911149
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "Tags": {
            "CaseSensitiveKey": "case_value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "tags": {
            "CaseSensitiveKey": "case_value"
        }
    }
    
    result = camel_dict_to_snake_dict(camel_dict, ignore_list=("Tags",))
    assert result == expected_snake_dict, f"Expected {expected_sn

# Generated at 2024-05-30 23:58:26.115765
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict, reversible=True

# Generated at 2024-05-30 23:58:30.005427
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCase": "nested_value"
        },
        "ListOfCamelCase": [
            {"CamelCaseInList": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }
    
    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case": "nested_value"
        },
        "list_of_camel_case": [
            {"camel_case_in_list": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }
    
    assert camel_dict_to_snake_dict(camel_dict,

# Generated at 2024-05-30 23:58:33.773527
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict

# Generated at 2024-05-30 23:58:38.515354
```python
    dict_a = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'subvalue2'
        },
        'key3': 'value3'
    }

    dict_b = {
        'key2': {
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key4': 'value4'
    }

    expected_result = {
        'key1': 'value1',
        'key2': {
            'subkey1': 'subvalue1',
            'subkey2': 'new_subvalue2',
            'subkey3': 'subvalue3'
        },
        'key3': 'value3',
        'key4': 'value4'
    }

    result = dict_merge(dict_a, dict_b)
    assert result == expected_result, f

# Generated at 2024-05-30 23:58:42.229677
```python
    camel_dict = {
        "CamelCaseKey": "value",
        "NestedCamelCase": {
            "AnotherCamelCaseKey": "nested_value"
        },
        "ListOfCamelCase": [
            {"ListCamelCaseKey": "list_value"},
            "string_value"
        ],
        "HTTPEndpoint": "http://example.com",
        "Tags": {
            "Key": "Value"
        }
    }

    expected_snake_dict = {
        "camel_case_key": "value",
        "nested_camel_case": {
            "another_camel_case_key": "nested_value"
        },
        "list_of_camel_case": [
            {"list_camel_case_key": "list_value"},
            "string_value"
        ],
        "h_t_t_p_endpoint": "http://example.com",
        "tags": {
            "Key": "Value"
        }
    }

    assert camel_dict_to_snake_dict(camel_dict

# Generated at 2024-05-30 23:58:45.394447
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }



# Generated at 2024-05-30 23:58:48.991263
```python
    dict1 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

    dict2 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 4
        },
        'f': 5
    }

    expected_diff = (
        {
            'b': {
                'd': 3
            },
            'e': 4
        },
        {
            'b': {
                'd': 4
            },
            'f': 5
        }
    )

    assert recursive_diff(dict1, dict2) == expected_diff

    dict3 = {
        'a': 1,
        'b': {
            'c': 2,
            'd': 3
        },
        'e': 4
    }

