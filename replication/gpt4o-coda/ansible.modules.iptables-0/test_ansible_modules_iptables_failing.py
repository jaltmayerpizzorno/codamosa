# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        tuple_0 = ()
        int_0 = -3035
        str_0 = '\ne'
        list_0 = [int_0, tuple_0, tuple_0, tuple_0]
        var_0 = module_0.append_match_flag(int_0, str_0, list_0, int_0)
        str_1 = 'download_path'
        set_0 = {tuple_0, tuple_0, str_1, str_1, tuple_0, str_1, str_1, tuple_0}
        var_1 = module_0.append_tcp_flags(tuple_0, str_1, set_0)
        var_2 = module_0.append_csv(int_0, str_1, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = None
        int_0 = -2177
        int_1 = -402
        var_0 = module_0.append_match(bool_0, int_0, int_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x83\x94'
        set_0 = set()
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: set_0}
        list_0 = [set_0, set_0, set_0]
        var_0 = module_0.append_jump(dict_0, list_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -3636.6092
        bytes_0 = b'\x8f\xa8*\xe2\xa7\x84hK\x8d\x00\xa4\xe7'
        tuple_0 = None
        var_0 = module_0.append_wait(float_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        float_0 = -4002.03
        int_0 = 6
        tuple_0 = (list_0, float_0, int_0)
        var_0 = module_0.construct_rule(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        int_0 = 741
        int_1 = -376
        var_0 = module_0.remove_rule(bool_0, int_0, int_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        int_0 = 817
        float_0 = None
        set_0 = {bool_0, bool_0, float_0}
        var_0 = module_0.check_present(int_0, float_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'Y\x83\xcb\x1e\xabKC'
        list_0 = [bytes_0, bytes_0, bytes_0]
        int_0 = 24
        str_0 = 'JmG37uq@|?w+'
        var_0 = module_0.append_rule(int_0, list_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        str_0 = 'ansible.modules.iptables'
        bool_1 = True
        tuple_0 = (bool_1,)
        var_0 = module_0.flush_table(dict_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        str_0 = '9k McWE'
        bool_1 = True
        var_0 = module_0.set_chain_policy(bool_0, str_0, bool_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '^('
        bytes_0 = b'\x95\x95\xd7\x95\xec'
        str_1 = "AOd\\><gG|@(ia$K6'U.E"
        var_0 = module_0.get_chain_policy(str_0, bytes_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -383.04
        int_0 = -3853
        var_0 = module_0.get_iptables_version(int_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = None
        str_0 = '>\t[!"\r'
        float_0 = 777.06
        set_0 = {float_0, float_0}
        var_0 = module_0.append_param(bytes_0, str_0, float_0, set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'GD^'
        str_1 = 'hh]O\r'
        list_0 = [str_0]
        list_1 = [str_1, list_0, str_0]
        dict_0 = {}
        int_0 = -699
        var_0 = module_0.append_csv(list_1, dict_0, int_0)
        int_1 = 705
        var_1 = module_0.check_present(str_0, str_1, int_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x83\xb5\xbf\x11t\x94'
        set_0 = set()
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: set_0}
        bool_0 = False
        var_0 = module_0.insert_rule(bool_0, set_0, dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\x83t\x94'
        set_0 = set()
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: set_0}
        float_0 = 2419.24
        bool_0 = True
        str_0 = ')l69d=-Z8x[zT)vwt'
        var_0 = module_0.append_jump(bool_0, set_0, str_0)
        str_1 = 'YN9@L|Z$Wu4\x0b~cB\t1P'
        list_0 = [dict_0, bytes_0, str_1]
        str_2 = 'U~'
        tuple_0 = (list_0, bytes_0, str_2)
        bytes_1 = b'wm\xf4\xba*\x8c\xf1'
        var_1 = module_0.append_param(float_0, str_1, tuple_0, bytes_1)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 79
        str_0 = 'R=ij\x0c\x0cb'
        float_0 = 339.52
        set_0 = None
        tuple_0 = (set_0,)
        list_0 = [int_0, str_0]
        set_1 = {tuple_0, str_0}
        var_0 = module_0.append_param(float_0, tuple_0, list_0, set_1)
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        var_1 = module_0.append_rule(dict_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        tuple_0 = ()
        int_0 = -3035
        str_0 = '\ne'
        list_0 = [int_0, tuple_0, tuple_0, tuple_0]
        var_0 = module_0.append_match_flag(int_0, str_0, list_0, int_0)
        str_1 = 'YaZr7.; 3M\rQT~'
        set_0 = {tuple_0, tuple_0, str_1, str_1, tuple_0, tuple_0, str_1, str_1, tuple_0}
        var_1 = module_0.append_tcp_flags(tuple_0, str_1, set_0)
        list_1 = [var_0, var_0, int_0, var_1]
        var_2 = module_0.append_param(set_0, list_1, tuple_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 68
        bool_0 = True
        str_0 = None
        list_0 = [str_0, int_0]
        set_0 = set()
        var_0 = module_0.append_match(list_0, set_0, list_0)
        var_1 = module_0.append_tcp_flags(bool_0, str_0, bool_0)
        bytes_0 = b'S^\x05\xd5'
        var_2 = module_0.append_param(int_0, bytes_0, str_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\x83\xb5\xbf\x11t\x94'
        int_0 = -1203
        str_0 = 'V@FF9+Q^.bwTJ6-'
        set_0 = set()
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: set_0}
        float_0 = 2419.24
        str_1 = '!Mb&f=p|LP\rW\\&'
        list_0 = [dict_0, bytes_0, bytes_0, str_1, int_0]
        str_2 = '1f-2^Leyw]'
        list_1 = [str_0]
        var_0 = module_0.append_match_flag(float_0, str_2, str_1, list_1)
        float_1 = 1698.400897
        str_3 = 'Ev"S\\P$#g4\x0bkS5]H%'
        int_1 = 217
        set_1 = {float_0, int_1}
        str_4 = "\n    Used to filter unrelated output around module JSON output, like messages from\n    tcagetattr, or where dropbear spews MOTD on every single command (which is nuts).\n\n    Filters leading lines before first line-strting occurrence of '{', and filter all\n    trailing lines after matching close character (working from the bottom of output).\n    "
        int_2 = 641
        list_2 = [float_0, set_0, list_0]
        tuple_0 = (int_2, float_1, list_2)
        var_1 = module_0.append_match_flag(set_1, str_4, tuple_0, tuple_0)
        str_5 = 'Ev"S\\P$#g4\x0bkS5]H%'
        var_2 = module_0.append_tcp_flags(float_1, str_3, str_5)
        tuple_1 = (list_0, bytes_0, str_1)
        var_3 = module_0.append_param(float_0, str_1, tuple_1, bytes_0)
    except BaseException:
        pass