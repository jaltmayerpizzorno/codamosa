# Automatically generated by Pynguin.
import tornado.auth as module_0

def test_case_0():
    try:
        open_id_mixin_0 = module_0.OpenIdMixin()
        async_h_t_t_p_client_0 = open_id_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_1():
    try:
        o_auth_mixin_0 = module_0.OAuthMixin()
        async_h_t_t_p_client_0 = o_auth_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_2():
    try:
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        str_0 = '1pT*WPv4,R4ml@:!KB\n9'
        o_auth2_mixin_0.authorize_redirect(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        o_auth_mixin_0 = module_0.OAuthMixin()
        dict_0 = o_auth_mixin_0.get_authenticated_user()
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        async_h_t_t_p_client_0 = o_auth2_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        open_id_mixin_0 = module_0.OpenIdMixin()
        open_id_mixin_0.authenticate_redirect(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Sec-Websocket-Version'
        open_id_mixin_0 = module_0.OpenIdMixin()
        open_id_mixin_0.authenticate_redirect(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        facebook_graph_mixin_0 = module_0.FacebookGraphMixin()
        str_0 = 'P\x0c^M:pP(be6FZ9'
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        o_auth2_mixin_0.authorize_redirect(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        str_0 = 'Translation methods for generating localized strings.\n\nTo load a locale and generate a translated string::\n\n    user_locale = tornado.locale.get("es_LA")\n    print(user_locale.translate("Sign out"))\n\n`tornado.locale.get()` returns the closest matching locale, not necessarily the\nspecific locale you requested. You can support pluralization with\nadditional arguments to `~Locale.translate()`, e.g.::\n\n    people = [...]\n    message = user_locale.translate(\n        "%(list)s is online", "%(list)s are online", len(people))\n    print(message % {"list": user_locale.list(people)})\n\nThe first string is chosen if ``len(people) == 1``, otherwise the second\nstring is chosen.\n\nApplications should call one of `load_translations` (which uses a simple\nCSV format) or `load_gettext_translations` (which uses the ``.mo`` format\nsupported by `gettext` and related tools).  If neither method is called,\nthe `Locale.translate` method will simply return the original string.\n'
        google_o_auth2_mixin_0 = module_0.GoogleOAuth2Mixin()
        str_1 = 'EP\t~'
        dict_0 = google_o_auth2_mixin_0.get_authenticated_user(str_0, str_1)
        o_auth2_mixin_0.authorize_redirect()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'P\x0c:p(be6FZS|9'
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        list_0 = [o_auth2_mixin_0, o_auth2_mixin_0, str_0, str_0]
        str_1 = '1pT*WPv4,R4ml@:!KB\n9'
        str_2 = '5LW^'
        str_3 = '4g3^uCH'
        auth_error_0 = module_0.AuthError()
        bytes_0 = b'\xad\xf6\xb5\x8ca\x18'
        list_1 = [str_1, bytes_0]
        dict_0 = {str_2: list_0, str_3: list_1}
        list_2 = []
        str_4 = "R'=q&/v-5=pT35#TZ"
        o_auth2_mixin_0.authorize_redirect(str_1, str_1, dict_0, list_2, str_4)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'P\x0c:p(be6FZS|9'
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        list_0 = [o_auth2_mixin_0, o_auth2_mixin_0, str_0, str_0]
        str_1 = '1pT*WPv4,R4ml@:!KB\n9'
        str_2 = '5LW^'
        str_3 = '4g3^uCH'
        auth_error_0 = module_0.AuthError()
        bytes_0 = b'\xad\xf6\xb5\x8ca\x18'
        list_1 = [str_1, bytes_0]
        dict_0 = {str_2: list_0, str_3: list_1}
        list_2 = [str_0]
        str_4 = "R'=q&/v-5=pT35#TZ"
        o_auth2_mixin_0.authorize_redirect(str_1, str_1, dict_0, list_2, str_4)
    except BaseException:
        pass