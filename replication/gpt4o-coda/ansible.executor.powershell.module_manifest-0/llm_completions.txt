

# Generated at 2024-05-30 21:44:06.749340
```python
    finder = PSModuleDepFinder()

    # Test with a simple PowerShell module data
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True

    # Test with

# Generated at 2024-05-30 21:44:10.258699
```python
    finder = PSModuleDepFinder()
    
    # Test with a simple PowerShell module data
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)
    
    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True
    
    #

# Generated at 2024-05-30 21:44:15.566673
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.Test" in

# Generated at 2024-05-30 21:44:19.595001
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil\n"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil\n"

    # Mock the pkgutil.get_data method to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils

# Generated at 2024-05-30 21:44:24.702408
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.test" in

# Generated at 2024-05-30 21:44:27.963251
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.Test" in

# Generated at 2024-05-30 21:44:32.101882
```python
    finder = PSModuleDepFinder()
    script_name = "test_script"
    
    # Mock the pkgutil.get_data to return a sample script data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -Powershell Ansible.ModuleUtils.TestUtil"
        return None

    pkgutil.get_data = mock_get_data

    finder.scan_exec_script(script_name)

    assert script_name in finder.exec_scripts
    assert b"#Requires -Module Ansible.ModuleUtils.Test" in finder.exec_scripts[script_name]
    assert b"#AnsibleRequires -Powershell Ansible.ModuleUtils.TestUtil" in finder.exec_scripts[script_name]
    assert "Ansible.ModuleUtils.Test" in finder.ps_modules
    assert "Ansible.ModuleUtils.TestUtil" in finder.ps_modules


# Generated at 2024-05-30 21:44:36.025982
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.Test" in

# Generated at 2024-05-30 21:44:39.970260
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #ansiblerequires -wrapper SomeWrapper
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert "SomeWrapper" in finder.exec_scripts
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
   

# Generated at 2024-05-30 21:44:43.792704
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.test" in

# Generated at 2024-05-30 21:45:45.436784
```python
    finder = PSModuleDepFinder()

    # Test with a valid script name
    valid_script_name = 'valid_script'
    valid_script_data = b'#Requires -Module Ansible.ModuleUtils.some_util\n#AnsibleRequires -Powershell Ansible.ModuleUtils.some_other_util'
    pkgutil.get_data = lambda *args, **kwargs: valid_script_data

    finder.scan_exec_script(valid_script_name)
    assert valid_script_name in finder.exec_scripts
    assert finder.ps_modules['Ansible.ModuleUtils.some_util']['data'] == valid_script_data
    assert finder.ps_modules['Ansible.ModuleUtils.some_other_util']['data'] == valid_script_data

    # Test with a non-existent script name
    invalid_script_name = 'invalid_script'
    pkgutil.get_data = lambda *args, **kwargs: None

    try:
        finder.scan_exec_script(invalid_script_name)
    except AnsibleError as e:
        assert str(e) ==

# Generated at 2024-05-30 21:45:51.062981
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.Test" in

# Generated at 2024-05-30 21:45:55.686088
```python
    finder = PSModuleDepFinder()
    
    # Test with a simple PowerShell module data
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.TestUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.CSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)
    
    assert 'Ansible.ModuleUtils.TestUtil' in finder.ps_modules
    assert 'Ansible.ModuleUtils.AnotherUtil' in finder.ps_modules
    assert 'Ansible.CSharpUtil' in finder.cs_utils_module
    assert finder.ps_version == '5.1.0'
    assert finder.os_version == '10.0.0'
    assert finder.become is True
    
    # Test with

# Generated at 2024-05-30 21:46:00.891696
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True
```

# Generated at 2024-05-30 21:46:05.346321
```python
    finder = PSModuleDepFinder()
    
    # Test with a simple PowerShell module data
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)
    
    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True
    
    #

# Generated at 2024-05-30 21:46:10.423320
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.test" in

# Generated at 2024-05-30 21:46:16.356632
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #ansiblerequires -powershell ansible_collections.namespace.collection.plugins.module_utils.some_util
    #ansiblerequires -csharputil ansible_collections.namespace.collection.plugins.module_utils.some_csharp_util
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert "

# Generated at 2024-05-30 21:46:20.652503
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.Test" in

# Generated at 2024-05-30 21:46:24.023255
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.test" in

# Generated at 2024-05-30 21:46:27.985274
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.CSharpUtil
    #Requires -Version 5.1
    #AnsibleRequires -OSVersion 10.0
    #AnsibleRequires -Become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.CSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True
```

# Generated at 2024-05-30 21:48:53.021920
```python
    finder = PSModuleDepFinder()

    # Test with a valid script name
    valid_script_name = 'valid_script'
    valid_script_data = b'#Requires -Module Ansible.ModuleUtils.some_util\n#AnsibleRequires -Powershell Ansible.ModuleUtils.some_other_util'
    pkgutil.get_data = lambda *args: valid_script_data
    finder.scan_exec_script(valid_script_name)
    assert valid_script_name in finder.exec_scripts
    assert finder.exec_scripts[valid_script_name] == valid_script_data

    # Test with a non-existent script name
    invalid_script_name = 'invalid_script'
    pkgutil.get_data = lambda *args: None
    try:
        finder.scan_exec_script(invalid_script_name)
    except AnsibleError as e:
        assert str(e) == "Could not find executor powershell script for 'invalid_script'"

    # Test with a script that has dependencies
    dependent_script_name = 'dependent_script

# Generated at 2024-05-30 21:48:57.433472
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #ansiblerequires -wrapper SomeWrapper
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert "SomeWrapper" in finder.exec_scripts
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
   

# Generated at 2024-05-30 21:49:01.370936
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #Requires -Version 5.1
    #AnsibleRequires -OSVersion 10.0
    #AnsibleRequires -Become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True
```

# Generated at 2024-05-30 21:49:04.695353
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #ansiblerequires -powershell ansible_collections.namespace.collection.plugins.module_utils.some_util
    #ansiblerequires -csharputil ansible_collections.namespace.collection.plugins.module_utils.some_csharp_util
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert "

# Generated at 2024-05-30 21:49:08.033963
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.test" in

# Generated at 2024-05-30 21:49:11.392190
```python
    finder = PSModuleDepFinder()

    # Test with a simple PowerShell module data
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True

    # Test with

# Generated at 2024-05-30 21:49:15.171462
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.CSharpUtil
    #Requires -Version 5.1
    #AnsibleRequires -OSVersion 10.0
    #AnsibleRequires -Become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.CSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True
```

# Generated at 2024-05-30 21:49:19.174260
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil\n"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil\n"

    # Mock the pkgutil.get_data method to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils

# Generated at 2024-05-30 21:49:22.970664
```python
    finder = PSModuleDepFinder()

    # Test with a simple PowerShell module data
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True

    # Test with

# Generated at 2024-05-30 21:49:26.560548
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.test" in

# Generated at 2024-05-30 21:51:31.046849
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.test_util"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.test" in

# Generated at 2024-05-30 21:51:35.759316
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.Test" in

# Generated at 2024-05-30 21:51:42.065276
```python
    finder = PSModuleDepFinder()
    
    # Mock data for the test
    script_name = "test_script"
    script_content = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"
    
    # Mock the pkgutil.get_data to return the script content
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_content
        return None
    
    pkgutil.get_data = mock_get_data
    
    # Call the method
    finder.scan_exec_script(script_name)
    
    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == script_content
    assert "Ansible.ModuleUtils.Test" in finder.ps_modules
    assert "Ansible.ModuleUtils.TestUtil" in finder.ps_modules
```

# Generated at 2024-05-30 21:51:45.711295
```python
    finder = PSModuleDepFinder()

    # Test with a valid script name
    valid_script_name = 'valid_script'
    valid_script_data = b'#Requires -Module Ansible.ModuleUtils.some_util\n#AnsibleRequires -Powershell Ansible.ModuleUtils.some_other_util'
    pkgutil.get_data = lambda *args: valid_script_data
    finder.scan_exec_script(valid_script_name)
    assert valid_script_name in finder.exec_scripts
    assert finder.ps_modules['Ansible.ModuleUtils.some_util']['data'] == valid_script_data
    assert finder.ps_modules['Ansible.ModuleUtils.some_other_util']['data'] == valid_script_data

    # Test with a non-existent script name
    invalid_script_name = 'invalid_script'
    pkgutil.get_data = lambda *args: None
    try:
        finder.scan_exec_script(invalid_script_name)
    except AnsibleError as e:
        assert str(e) == "Could not find executor powers

# Generated at 2024-05-30 21:51:51.346595
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #ansiblerequires -powershell ansible_collections.namespace.collection.plugins.module_utils.some_util
    #ansiblerequires -csharputil ansible_collections.namespace.collection.plugins.module_utils.some_csharp_util
    #ansiblerequires -wrapper some_wrapper_script
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert 'Ansible.ModuleUtils.SomeUtil' in finder.ps_modules
    assert 'Ansible.ModuleUtils.AnotherUtil' in finder.ps_modules
    assert 'Ansible.SomeC

# Generated at 2024-05-30 21:51:54.968950
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1"
    assert finder.os_version == "10.0"
    assert finder.become is True
```

# Generated at 2024-05-30 21:51:58.732981
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True
```

# Generated at 2024-05-30 21:52:02.732065
```python
    finder = PSModuleDepFinder()

    # Mock data for the test
    script_name = "test_script"
    script_data = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"
    expected_exec_script = b"#Requires -Module Ansible.ModuleUtils.Test\n#AnsibleRequires -PowerShell Ansible.ModuleUtils.TestUtil"

    # Mock the pkgutil.get_data to return the script_data
    def mock_get_data(package, resource):
        if package == "ansible.executor.powershell" and resource == "test_script.ps1":
            return script_data
        return None

    pkgutil.get_data = mock_get_data

    # Call the method
    finder.scan_exec_script(script_name)

    # Assertions
    assert script_name in finder.exec_scripts
    assert finder.exec_scripts[script_name] == expected_exec_script
    assert "Ansible.ModuleUtils.Test" in

# Generated at 2024-05-30 21:52:07.080574
```python
    finder = PSModuleDepFinder()

    # Test with a simple PowerShell module data
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
    assert finder.become is True

    # Test with

# Generated at 2024-05-30 21:52:10.652979
```python
    finder = PSModuleDepFinder()
    module_data = b"""
    #Requires -Module Ansible.ModuleUtils.SomeUtil
    #AnsibleRequires -PowerShell Ansible.ModuleUtils.AnotherUtil
    #AnsibleRequires -CSharpUtil Ansible.SomeCSharpUtil
    #ansiblerequires -wrapper SomeWrapper
    #requires -version 5.1
    #ansiblerequires -osversion 10.0
    #ansiblerequires -become
    """
    finder.scan_module(module_data)

    assert "Ansible.ModuleUtils.SomeUtil" in finder.ps_modules
    assert "Ansible.ModuleUtils.AnotherUtil" in finder.ps_modules
    assert "Ansible.SomeCSharpUtil" in finder.cs_utils_module
    assert "SomeWrapper" in finder.exec_scripts
    assert finder.ps_version == "5.1.0"
    assert finder.os_version == "10.0.0"
   