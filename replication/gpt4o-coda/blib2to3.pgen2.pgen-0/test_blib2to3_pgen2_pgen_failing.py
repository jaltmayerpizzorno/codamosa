# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0
import os as module_1

def test_case_0():
    try:
        str_0 = "iBKdKcZ~<?i T'"
        set_0 = {str_0, str_0, str_0, str_0}
        parser_generator_0 = module_0.ParserGenerator(str_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '2'
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_1: n_f_a_state_0}
        n_f_a_state_1.addarc(n_f_a_state_0)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
        bool_1 = d_f_a_state_0.__eq__(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_1 = d_f_a_state_0.__eq__(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'rdz}y5vNhQy}sU3mF'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        str_1 = 'Ft>1bFJJi5g!p'
        dict_0 = {n_f_a_state_0: str_1}
        n_f_a_state_1 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_6():
    try:
        n_f_a_state_0 = module_0.NFAState()
        str_0 = 'KQF+ov'
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        n_f_a_state_1 = None
        n_f_a_state_0.addarc(n_f_a_state_1)
    except BaseException:
        pass

def test_case_7():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        list_0 = [d_f_a_state_1]
        n_f_a_state_1.addarc(n_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        n_f_a_state_2.addarc(n_f_a_state_1, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        n_f_a_state_0 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'b$]2NfDAe+yIM>ue'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_1 = None
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1.addarc(d_f_a_state_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        pgen_grammar_0 = module_0.PgenGrammar()
        str_0 = '};\n'
        pgen_grammar_1 = module_0.PgenGrammar()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_2)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_0.addarc(d_f_a_state_1, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        pgen_grammar_0 = module_0.PgenGrammar()
        str_0 = '};\n'
        d_f_a_state_0 = None
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        n_f_a_state_0 = None
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_13():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = '};\n'
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        pgen_grammar_0 = module_0.PgenGrammar()
        str_1 = '\n        Return a cloned (deep) copy of self.\n\n        This must be implemented by the concrete subclass.\n        '
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1.addarc(d_f_a_state_0, str_1)
        pgen_grammar_1 = module_0.PgenGrammar()
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_1)
        path_like_0 = module_1.PathLike()
    except BaseException:
        pass