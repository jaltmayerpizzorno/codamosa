

# Generated at 2024-05-30 20:31:05.049591
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})()
    config.update_setting(global_setting)
    assert config.get_setting('global_setting').value == 'global_value'

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'plugin_type', 'name': 'plugin_name'})()
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})()
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin).value == 'plugin_value'

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None


# Generated at 2024-05-30 20:31:09.532513
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:31:15.664603
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})
    config.update_setting(global_setting)
    assert config.get_setting('global_setting').value == 'global_value'

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'plugin_type', 'name': 'plugin_name'})
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin).value == 'plugin_value'

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None
```

# Generated at 2024-05-30 20:31:20.237402
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:31:25.041055
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})
    config.update_setting(global_setting)
    assert config.get_setting('global_setting').value == 'global_value'

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'plugin_type', 'name': 'plugin_name'})
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin).value == 'plugin_value'

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None
```

# Generated at 2024-05-30 20:31:29.083461
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:31:33.658921
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin1_setting1', 'value1')
    plugin_setting2 = Setting('plugin1_setting2', 'value2')
   

# Generated at 2024-05-30 20:31:37.665187
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:31:40.704537
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:31:44.159037
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:31:52.490517
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:31:57.715797
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert setting1 in global_settings
    assert setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin

# Generated at 2024-05-30 20:32:04.118235
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:32:07.671946
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})
    config.update_setting(global_setting)
    assert config.get_setting('global_setting').value == 'global_value'

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'test_type', 'name': 'test_plugin'})
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin).value == 'plugin_value'

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None
```

# Generated at 2024-05-30 20:32:15.067937
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin1_setting1', 'value1')
    plugin_setting2 = Setting('plugin1_setting

# Generated at 2024-05-30 20:32:19.598552
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:32:23.208343
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test plugin setting
    plugin = MockPlugin('type1', 'plugin1')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test non-existent global setting
    assert config.get_setting('non_existent') is None

    # Test non-existent plugin setting
    assert config.get_setting('non_existent

# Generated at 2024-05-30 20:32:26.745808
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:32:30.793400
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})()
    config.update_setting(global_setting)
    assert config.get_setting('global_setting').value == 'global_value'

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'plugin_type', 'name': 'plugin_name'})()
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})()
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin).value == 'plugin_value'

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None


# Generated at 2024-05-30 20:32:33.974107
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert setting1 in global_settings
    assert setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', '

# Generated at 2024-05-30 20:32:46.502231
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global

# Generated at 2024-05-30 20:32:51.075054
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:32:55.700806
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global

# Generated at 2024-05-30 20:32:59.070450
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    assert config.get_settings() == [setting1, setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin_value1')
    config.update_setting(plugin_setting1, plugin1)

    # Test with plugin

# Generated at 2024-05-30 20:33:03.386504
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert setting1 in global_settings
    assert setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', '

# Generated at 2024-05-30 20:33:08.707135
```python
    config_data = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config_data.update_setting(global_setting)
    assert config_data.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config_data.update_setting(plugin_setting, plugin=plugin)
    assert config_data.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new

# Generated at 2024-05-30 20:33:13.513833
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test global setting retrieval
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test plugin-specific setting retrieval
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test non-existent plugin-specific setting
    assert config.get

# Generated at 2024-05-30 20:33:17.776758
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    assert config.get_settings() == [setting1, setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin_value1')
    config.update_setting(plugin_setting1, plugin1)

    # Test with plugin

# Generated at 2024-05-30 20:33:27.931137
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin1_setting1', 'value1')
    plugin_setting2 = Setting('plugin1_setting

# Generated at 2024-05-30 20:33:31.157497
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating another global setting
    another_global_setting = Setting(name="another_global_setting", value="another_global

# Generated at 2024-05-30 20:33:41.777901
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global

# Generated at 2024-05-30 20:33:46.749138
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:33:51.290092
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert setting1 in global_settings
    assert setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', '

# Generated at 2024-05-30 20:33:55.203427
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'name1')
    plugin_setting1 = Setting('plugin1', 'value1')
    config.update_setting(plugin_setting1, plugin1)

   

# Generated at 2024-05-30 20:33:58.939744
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global

# Generated at 2024-05-30 20:34:03.091625
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test case 1: Get global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})
    config.update_setting(global_setting)
    assert config.get_setting('global_setting').value == 'global_value'

    # Test case 2: Get plugin-specific setting
    plugin = MockPlugin(type='test_type', name='test_name')
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin).value == 'plugin_value'

    # Test case 3: Setting not found
    assert config.get_setting('non_existent_setting') is None
    assert

# Generated at 2024-05-30 20:34:07.185664
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert global_setting1 in global_settings
    assert global_setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting

# Generated at 2024-05-30 20:34:14.926352
```python
    config_data = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config_data.update_setting(global_setting)
    assert config_data.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config_data.update_setting(plugin_setting, plugin=plugin)
    assert config_data.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new

# Generated at 2024-05-30 20:34:19.502301
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:34:24.133307
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:34:40.989146
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:34:44.266529
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin1_setting1', 'value1')
    plugin_setting2 = Setting('plugin1_setting

# Generated at 2024-05-30 20:34:48.420227
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    assert config.get_settings() == [setting1, setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin_value1')
    config.update_setting(plugin_setting1, plugin1)

    # Test with plugin

# Generated at 2024-05-30 20:34:51.676798
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:34:56.405465
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:35:02.313519
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})()
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'plugin_type', 'name': 'plugin_name'})()
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})()
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None
```

# Generated at 2024-05-30 20:35:06.427125
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert setting1 in global_settings
    assert setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', '

# Generated at 2024-05-30 20:35:10.513771
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global

# Generated at 2024-05-30 20:35:15.187921
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})
    config.update_setting(global_setting)
    assert config.get_setting('global_setting').value == 'global_value'

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'test_type', 'name': 'test_plugin'})
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin).value == 'plugin_value'

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None
```

# Generated at 2024-05-30 20:35:19.058533
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin1_setting1', 'value1')
    plugin_setting2 = Setting('plugin1_setting

# Generated at 2024-05-30 20:35:47.316529
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating another global setting
    another_global_setting = Setting(name="another_global_setting", value="another_global

# Generated at 2024-05-30 20:35:53.597673
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating another global setting
    another_global_setting = Setting(name="another_global_setting", value="another_global

# Generated at 2024-05-30 20:35:58.237780
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin1_setting1', 'value1')
    plugin_setting2 = Setting('plugin1_setting2', 'value2')
   

# Generated at 2024-05-30 20:36:08.246208
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'name1')
    plugin_setting1 = Setting('plugin1', 'value1')
    config.update_setting(plugin_setting1, plugin1)

   

# Generated at 2024-05-30 20:36:13.496132
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global_value")
    config

# Generated at 2024-05-30 20:36:17.647598
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert global_setting1 in global_settings
    assert global_setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting

# Generated at 2024-05-30 20:36:21.285001
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert setting1 in global_settings
    assert setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', '

# Generated at 2024-05-30 20:36:28.542673
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:36:32.598745
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert global_setting1 in global_settings
    assert global_setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting

# Generated at 2024-05-30 20:36:36.542518
def test_ConfigData_update_setting():
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global

# Generated at 2024-05-30 20:37:34.562783
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test plugin setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test non-existent plugin setting
    assert config.get_setting('non_ex

# Generated at 2024-05-30 20:37:39.599838
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    assert config.get_settings() == [setting1, setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin_value1')
    config.update_setting(plugin_setting1, plugin1)

    # Test with plugin

# Generated at 2024-05-30 20:37:43.795164
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    assert config.get_settings() == [setting1, setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin_value1')
    config.update_setting(plugin_setting1, plugin1)

    assert config.get_settings(plugin1) == [plugin_setting

# Generated at 2024-05-30 20:37:48.427005
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:37:53.914620
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    global_setting1 = Setting('global1', 'value1')
    global_setting2 = Setting('global2', 'value2')
    config.update_setting(global_setting1)
    config.update_setting(global_setting2)

    # Test with global settings
    assert config.get_settings() == [global_setting1, global_setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin1_setting1', 'value1')
    plugin_setting2 = Setting('plugin1_setting

# Generated at 2024-05-30 20:37:58.340458
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:38:02.471481
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:38:05.758708
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    assert config.get_settings() == [setting1, setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin_value1')
    config.update_setting(plugin_setting1, plugin1)

    assert config.get_settings(plugin1) == [plugin_setting

# Generated at 2024-05-30 20:38:10.250775
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    assert config.get_settings() == [setting1, setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin_value1')
    config.update_setting(plugin_setting1, plugin1)

    # Test with plugin

# Generated at 2024-05-30 20:38:14.320883
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})()
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'test_type', 'name': 'test_plugin'})()
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})()
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None
```

# Generated at 2024-05-30 20:40:00.995622
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test getting a global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test getting a plugin-specific setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin-specific

# Generated at 2024-05-30 20:40:05.507123
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert setting1 in global_settings
    assert setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', '

# Generated at 2024-05-30 20:40:10.284935
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global_value")
    config

# Generated at 2024-05-30 20:40:16.105851
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test plugin setting
    plugin = MockPlugin('type1', 'plugin1')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test non-existent global setting
    assert config.get_setting('non_existent') is None

    # Test non-existent plugin setting
    assert config.get_setting('non_existent

# Generated at 2024-05-30 20:40:20.633833
def test_ConfigData_get_settings():
    config = ConfigData()

    # Test with no plugins
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    assert config.get_settings() == [setting1, setting2]

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', 'plugin_value1')
    config.update_setting(plugin_setting1, plugin1)

    assert config.get_settings(plugin1) == [plugin_setting

# Generated at 2024-05-30 20:40:26.421072
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name="global_setting", value="global_value")
    config.update_setting(global_setting)
    assert config.get_setting("global_setting") == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type="test_type", name="test_plugin")
    plugin_setting = Setting(name="plugin_setting", value="plugin_value")
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting("plugin_setting", plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name="global_setting", value="new_global_value")
    config

# Generated at 2024-05-30 20:40:30.022991
```python
    config = ConfigData()

    # Test getting a global setting
    global_setting = type('Setting', (object,), {'name': 'global_setting', 'value': 'global_value'})()
    config.update_setting(global_setting)
    assert config.get_setting('global_setting').value == 'global_value'

    # Test getting a plugin setting
    plugin = type('Plugin', (object,), {'type': 'test_type', 'name': 'test_plugin'})()
    plugin_setting = type('Setting', (object,), {'name': 'plugin_setting', 'value': 'plugin_value'})()
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin).value == 'plugin_value'

    # Test getting a non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test getting a non-existent plugin setting
    assert config.get_setting('non_existent_setting', plugin) is None


# Generated at 2024-05-30 20:40:33.728453
```python
    config = ConfigData()

    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    # Test updating a global setting
    global_setting = Setting(name='global_setting', value='global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test updating a plugin-specific setting
    plugin = Plugin(type='test_type', name='test_plugin')
    plugin_setting = Setting(name='plugin_setting', value='plugin_value')
    config.update_setting(plugin_setting, plugin=plugin)
    assert config.get_setting('plugin_setting', plugin=plugin) == plugin_setting

    # Test updating an existing global setting
    new_global_setting = Setting(name='global_setting', value='new_global_value')
    config

# Generated at 2024-05-30 20:40:37.931588
```python
    config = ConfigData()

    # Test with no plugins and no global settings
    assert config.get_settings() == []

    # Add global settings
    class Setting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    setting1 = Setting('setting1', 'value1')
    setting2 = Setting('setting2', 'value2')
    config.update_setting(setting1)
    config.update_setting(setting2)

    # Test with global settings
    global_settings = config.get_settings()
    assert len(global_settings) == 2
    assert setting1 in global_settings
    assert setting2 in global_settings

    # Add plugin settings
    class Plugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    plugin1 = Plugin('type1', 'plugin1')
    plugin_setting1 = Setting('plugin_setting1', '

# Generated at 2024-05-30 20:40:41.731195
```python
    config = ConfigData()

    class MockPlugin:
        def __init__(self, type, name):
            self.type = type
            self.name = name

    class MockSetting:
        def __init__(self, name, value):
            self.name = name
            self.value = value

    # Test global setting
    global_setting = MockSetting('global_setting', 'global_value')
    config.update_setting(global_setting)
    assert config.get_setting('global_setting') == global_setting

    # Test plugin setting
    plugin = MockPlugin('plugin_type', 'plugin_name')
    plugin_setting = MockSetting('plugin_setting', 'plugin_value')
    config.update_setting(plugin_setting, plugin)
    assert config.get_setting('plugin_setting', plugin) == plugin_setting

    # Test non-existent global setting
    assert config.get_setting('non_existent_setting') is None

    # Test non-existent plugin setting
    assert config.get_setting('non_ex