# Automatically generated by Pynguin.
import ansible.inventory.data as module_0

def test_case_0():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '^l_'
        var_0 = inventory_data_0.add_group(str_0)
        var_1 = inventory_data_0.get_groups_dict()
        str_1 = '#:1'
        var_2 = inventory_data_0.get_host(str_1)
        var_3 = inventory_data_0.get_groups_dict()
        var_4 = inventory_data_0.add_host(str_0, str_0)
        var_5 = inventory_data_0.add_host(str_0)
        var_6 = inventory_data_0.remove_group(str_0)
        var_7 = inventory_data_0.serialize()
        var_8 = inventory_data_0.reconcile_inventory()
        var_9 = inventory_data_0.get_groups_dict()
        var_10 = inventory_data_0.get_groups_dict()
        int_0 = 2
        bool_0 = True
        bytes_0 = b'\xf4\xe8U\x0cQ\xb1'
        tuple_0 = (bool_0, bytes_0)
        tuple_1 = (int_0, inventory_data_0, tuple_0, tuple_0)
        var_11 = inventory_data_0.add_group(tuple_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ':!'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_host(str_0)
        list_0 = []
        var_1 = inventory_data_0.add_group(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '[J\x0bN\r\n'
        bytes_0 = b'\xde\xd1Fr\x8e\xb4\x08d\xf1\xdbQ \x80\x81\x19~*\xbfL\x13'
        var_0 = inventory_data_0.add_host(str_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_data_0 = module_0.InventoryData()
        int_0 = 3600
        str_0 = '29y8\x0cLigR$G"m8CX'
        var_0 = inventory_data_0.add_host(int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_group(inventory_data_0)
        inventory_data_1 = module_0.InventoryData()
        int_0 = 399
        var_1 = inventory_data_1.remove_host(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Q|'
        str_1 = ''
        bool_0 = False
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.set_variable(str_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        inventory_data_0 = module_0.InventoryData()
        float_0 = -26.0
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.add_child(inventory_data_0, float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_group(inventory_data_0)
        inventory_data_1 = module_0.InventoryData()
        bool_0 = None
        list_0 = []
        var_1 = inventory_data_0.add_host(bool_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '`,'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.reconcile_inventory()
        str_1 = 'bOh>AOz'
        var_2 = inventory_data_0.remove_group(str_1)
        var_3 = inventory_data_0.reconcile_inventory()
        var_4 = inventory_data_0.get_groups_dict()
        int_0 = None
        var_5 = inventory_data_0.get_host(int_0)
        var_6 = inventory_data_0.get_host(str_0)
        var_7 = inventory_data_0.add_host(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'TwEC<'
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.add_group(str_0)
        str_1 = 'OOHjh9E8>S`(v'
        var_1 = inventory_data_0.remove_group(str_1)
        bytes_0 = None
        var_2 = inventory_data_0.add_host(var_0, bytes_0)
        var_3 = inventory_data_0.reconcile_inventory()
        str_2 = 'bOh>AOz'
        var_4 = inventory_data_0.remove_group(str_2)
        var_5 = inventory_data_0.serialize()
        var_6 = inventory_data_0.remove_group(inventory_data_0)
        var_7 = inventory_data_0.reconcile_inventory()
        var_8 = inventory_data_1.get_host(str_2)
        str_3 = 'ungrouped'
        var_9 = inventory_data_1.add_child(str_3, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'all'
        var_0 = inventory_data_0.add_group(str_0)
        var_1 = inventory_data_0.remove_group(str_0)
        var_2 = inventory_data_0.get_groups_dict()
        bytes_0 = None
        var_3 = inventory_data_0.add_host(var_0, bytes_0)
        var_4 = inventory_data_0.add_host(str_0)
        var_5 = inventory_data_0.reconcile_inventory()
        str_1 = 'bOh>AOz'
        var_6 = inventory_data_0.remove_group(str_1)
        var_7 = inventory_data_0.serialize()
        var_8 = inventory_data_0.reconcile_inventory()
    except BaseException:
        pass