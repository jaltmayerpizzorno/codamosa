

---- 2024-06-02 15:12:31.755789
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:32.939669
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:34.273059
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:35.771900
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:37.115346
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:38.836003
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:39.845156
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:41.224461
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:42.209090
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:43.699384
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:50.429578
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:51.704752
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:53.178400
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:54.992479
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:56.134632
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:57.154651
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:12:58.999799
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:00.426754
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:01.851153
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:03.114024
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:15.496441
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:16.519461
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:17.816363
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:18.830301
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:20.015965
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:21.155092
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:22.309012
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:23.294369
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:24.420670
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:25.351581
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:50.692097
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:51.999560
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:53.222662
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:54.447650
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:55.425029
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:56.670508
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:57.886132
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:13:59.209627
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:01.304782
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:02.242739
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:47.979347
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:49.702954
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:51.371075
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:52.687539
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:54.813235
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:56.010510
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:57.846703
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:14:59.104018
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:15:00.464817
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:15:01.541963
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:29.117509
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:30.553369
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:32.076324
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:33.545185
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:34.894882
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:36.338064
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:37.250751
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:39.140912
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:40.350678
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:16:42.290786
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:20.099578
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:21.490758
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:22.690340
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:23.891633
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:26.389521
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:27.639661
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:28.787706
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n\n# Unit test for constructor of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:30.034701
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:32.021200
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __iter__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___iter__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-02 15:20:33.520364
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        name=HTTPie  language=Python  description='CLI HTTP client'\n\n    ':=' Non-string JSON data fields (only with --json, -j):\n\n        awesome:=true  amount:=42  colors:='[\"red\", \"green\", \"blue\"]'\n\n    '@' Form file fields (only with --form or --multipart):\n\n        cv@~/Documents/CV.pdf\n        cv@'~/Documents/CV.pdf;type=application/pdf'\n\n    '=@' A data field like '=', but takes a file path and embeds its content:\n\n         essay=@Documents/essay.txt\n\n    ':=@' A raw JSON field like ':=', but takes a file path and embeds its content:\n\n        package:=@./package.json\n\n    You can use a backslash to escape a colliding separator in the field name:\n\n        field-name-with\\:colon=value\n\n    '''\n)\n\n#######################################################################\n# Content type.\n#######################################################################\n\ncontent_type = parser.add_argument_group(\n    title='Predefined Content Types',\n    description=None\n)\n\ncontent_type.add_argument(\n    '--json', '-j',\n    action='store_const',\n    const=RequestType.JSON,\n    dest='request_type',\n    help='''\n    (default) Data items from the command line are serialized as a JSON object.\n    The Content-Type and Accept headers are set to application/json\n    (if not specified).\n\n    '''\n)\ncontent_type.add_argument(\n    '--form', '-f',\n    action='store_const',\n    const=RequestType.FORM,\n    dest='request_type',\n    help='''\n    Data items from the command line are serialized as form fields.\n\n    The Content-Type is set to application/x-www-form-urlencoded (if not\n    specified). The presence of any file fields results in a\n    multipart/form-data request.\n\n    '''\n)\ncontent_type.add_argument(\n    '--multipart',\n    action='store_const',\n    const=RequestType.MULTIPART,\n    dest='request_type',\n    help='''\n    Similar to --form, but always sends a multipart/form-data\n    request (i.e., even without files).\n\n    '''\n)\ncontent_type.add_argument(\n    '--boundary',\n    help='''\n    Specify a custom boundary string for multipart/form-data requests.\n    Only has effect only together with --form.\n\n    '''\n)\n\n\n#######################################################################\n# Content processing.\n#######################################################################\n\ncontent_processing = parser.add_argument_group(\n    title='Content Processing Options',\n    description=None\n)\n\ncontent_processing.add_argument(\n    '--compress', '-x',\n    action='count',\n    default=0,\n    help='''\n    Content compressed (encoded) with Deflate algorithm.\n    The Content-Encoding header is set to deflate.\n\n    Compression is skipped if it appears that compression ratio is\n    negative. Compression can be forced by repeating the argument.\n\n    '''\n)\n\n#######################################################################\n# Output processing\n#######################################################################\n\noutput_processing = parser.add_argument_group(title='Output Processing')\n\noutput_processing.add_argument(\n    '--pretty',\n    dest='prettify',\n    default=PRETTY_STDOUT_TTY_ONLY,\n    choices=sorted(PRETTY_MAP.keys()),\n    help='''\n    Controls output processing. The value can be \"none\" to not prettify\n    the output (default for redirected output), \"all\" to apply both colors\n    and formatting (default for terminal output), \"colors\", or \"format\".\n\n    '''\n)\noutput_processing.add_argument(\n    '--style', '-s',\n    dest='style',\n    metavar='STYLE',\n    default=DEFAULT_STYLE,\n    choices=AVAILABLE_STYLES,\n    help='''\n    Output coloring style (default is \"{default}\"). It can be One of:\n\n    {available_styles}\n\n    The \"{auto_style}\" style follows your terminal's ANSI color styles.\n\n    For non-{auto_style} styles to work properly, please make sure that the\n    $TERM environment variable is set to \"xterm-256color\" or similar\n    (e.g., via `export TERM=xterm-256color' in your ~/.bashrc).\n\n    '''.format(\n        default=DEFAULT_STYLE,\n        available_styles='\\n'.join(\n            '{0}{1}'.format(8 * ' ', line.strip())\n            for line in wrap(', '.join(sorted(AVAILABLE_STYLES)), 60)\n        ).strip(),\n        auto_style=AUTO_STYLE,\n    )\n)\n_sorted_kwargs = {\n    'action': 'append_const',\n    'const': SORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n_unsorted_kwargs = {\n    'action': 'append_const',\n    'const': UNSORTED_FORMAT_OPTIONS_STRING,\n    'dest': 'format_options'\n}\n# The closest approx. of the documented resetting to default via --no-<option>.\n# We hide them from the doc because they act only as low-level aliases here.\noutput_processing.add_argument('--no-unsorted', **_sorted_kwargs, help=SUPPRESS)\noutput_processing.add_argument('--no-sorted', **_unsorted_kwargs, help=SUPPRESS)\n\noutput_processing.add_argument(\n    '--unsorted',\n    **_unsorted_kwargs,\n    help=f'''\n    Disables all sorting while formatting output. It is a shortcut for:\n\n        --format-options={UNSORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\noutput_processing.add_argument(\n    '--sorted',\n    **_sorted_kwargs,\n    help=f'''\n    Re-enables all sorting options while formatting output. It is a shortcut for:\n\n        --format-options={SORTED_FORMAT_OPTIONS_STRING}\n\n    '''\n)\n\n\noutput_processing.add_argument(\n    '--format-options',\n    action='append',\n    help='''\n    Controls output formatting. Only relevant when formatting is enabled\n    through (explicit or implied) --pretty=all or --pretty=format.\n    The following are the default options:\n\n        {option_list}\n\n    You may use this option multiple times, as well as specify multiple\n    comma-separated options at the same time. For example, this modifies the\n    settings to disable the sorting of JSON keys, and sets the indent size to 2:\n\n        --format-options json.sort_keys:false,json.indent:2\n\n    This is something you will typically put into your config file.\n\n    '''.format(\n        option_list='\\n'.join(\n            (8 * ' ') + option for option in DEFAULT_FORMAT_OPTIONS).strip()\n    )\n)\n\n#######################################################################\n# Output options\n#######################################################################\noutput_options = parser.add_argument_group(title='Output Options')\n\noutput_options.add_argument(\n    '--print', '-p',\n    dest='output_options',\n    metavar='WHAT',\n    help=f'''\n    String specifying what the output should contain:\n\n        '{OUT_REQ_HEAD}' request headers\n        '{OUT_REQ_BODY}' request body\n        '{OUT_RESP_HEAD}' response headers\n        '{OUT_RESP_BODY}' response body\n\n    The default behaviour is '{OUTPUT_OPTIONS_DEFAULT}' (i.e., the response\n    headers and body is printed), if standard output is not redirected.\n    If the output is piped to another program or to a file, then only the\n    response body is printed by default.\n\n    '''\n)\noutput_options.add_argument(\n    '--headers', '-h',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_HEAD,\n    help=f'''\n    Print only the response headers. Shortcut for --print={OUT_RESP_HEAD}.\n\n    '''\n)\noutput_options.add_argument(\n    '--body', '-b',\n    dest='output_options',\n    action='store_const',\n    const=OUT_RESP_BODY,\n    help=f'''\n    Print only the response body. Shortcut for --print={OUT_RESP_BODY}.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--verbose', '-v',\n    dest='verbose',\n    action='store_true',\n    help='''\n    Verbose output. Print the whole request as well as the response. Also print\n    any intermediary requests/responses (such as redirects).\n    It's a shortcut for: --all --print={0}\n\n    '''.format(''.join(OUTPUT_OPTIONS))\n)\noutput_options.add_argument(\n    '--all',\n    default=False,\n    action='store_true',\n    help='''\n    By default, only the final request/response is shown. Use this flag to show\n    any intermediary requests/responses as well. Intermediary requests include\n    followed redirects (with --follow), the first unauthorized request when\n    Digest auth is used (--auth=digest), etc.\n\n    '''\n)\noutput_options.add_argument(\n    '--history-print', '-P',\n    dest='output_options_history',\n    metavar='WHAT',\n    help='''\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '''\n)\noutput_options.add_argument(\n    '--stream', '-S',\n    action='store_true',\n    default=False,\n    help='''\n    Always stream the response body by line, i.e., behave like `tail -f'.\n\n    Without --stream and with --pretty (either set or implied),\n    HTTPie fetches the whole response before it outputs the processed data.\n\n    Set this option when you want to continuously display a prettified\n    long-lived response, such as one from the Twitter streaming API.\n\n    It is useful also without --pretty: It ensures that the output is flushed\n    more often and in smaller chunks.\n\n    '''\n)\noutput_options.add_argument(\n    '--output', '-o',\n    type=FileType('a+b'),\n    dest='output_file',\n    metavar='FILE',\n    help='''\n    Save output to FILE instead of stdout. If --download is also set, then only\n    the response body is saved to FILE. Other parts of the HTTP exchange are\n    printed to stderr.\n\n    '''\n\n)\n\noutput_options.add_argument(\n    '--download', '-d',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print the response body to stdout. Rather, download it and store it\n    in a file. The filename is guessed unless specified with --output\n    [filename]. This action is similar to the default behaviour of wget.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--continue', '-c',\n    dest='download_resume',\n    action='store_true',\n    default=False,\n    help='''\n    Resume an interrupted download. Note that the --output option needs to be\n    specified as well.\n\n    '''\n)\n\noutput_options.add_argument(\n    '--quiet', '-q',\n    action='store_true',\n    default=False,\n    help='''\n    Do not print to stdout or stderr.\n    stdout is still redirected if --output is specified.\n    Flag doesn't affect behaviour of download beyond not printing to terminal.\n    '''\n)\n\n#######################################################################\n# Sessions\n#######################################################################\n\nsessions = parser.add_argument_group(title='Sessions') \\\n    .add_mutually_exclusive_group(required=False)\n\nsession_name_validator = SessionNameValidator(\n    'Session name contains invalid characters.'\n)\n\nsessions.add_argument(\n    '--session',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help=f'''\n    Create, or reuse and update a session. Within a session, custom headers,\n    auth credential, as well as any cookies sent by the server persist between\n    requests.\n\n    Session files are stored in:\n\n        {DEFAULT_SESSIONS_DIR}/<HOST>/<SESSION_NAME>.json.\n\n    '''\n)\nsessions.add_argument(\n    '--session-read-only',\n    metavar='SESSION_NAME_OR_PATH',\n    type=session_name_validator,\n    help='''\n    Create or read a session without updating it form the request/response\n    exchange.\n\n    '''\n)\n\n#######################################################################\n# Authentication\n#######################################################################\n\n# ``requests.request`` keyword arguments.\nauth = parser.add_argument_group(title='Authentication')\nauth.add_argument(\n    '--auth', '-a',\n    default=None,\n    metavar='USER[:PASS]',\n    help='''\n    If only the username is provided (-a username), HTTPie will prompt\n    for the password.\n\n    ''',\n)\n\n\nclass _AuthTypeLazyChoices:\n    # Needed for plugin testing\n\n    def __contains__(self, item):\n        return item in plugin_manager.get_auth_plugin_mapping()\n\n    def __iter__(self):\n        return iter(sorted(plugin_manager.get_auth_plugin_mapping().keys()))\n# Unit test for method __contains__ of class _AuthTypeLazyChoices\ndef test__AuthTypeLazyChoices___contains__():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}