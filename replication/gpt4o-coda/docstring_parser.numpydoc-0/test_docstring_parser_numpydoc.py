# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_1():
    str_0 = "\n    Short description.\n\n    Long description.\n\n    Parameters\n    ----------\n    x : int\n        Description of parameter `x`.\n    y : str, optional\n        Description of parameter `y`. Default is 'default'.\n    z : float, optional\n        Description of parameter `z`. Default is 0.0.\n\n    Returns\n    -------\n    bool\n        Description of return value.\n    "
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = "\n    Short description.\n\n    Long description.\n\n    Parameters\n    ----------\n    x : int\n        Description of parameter `x`.\n    y : str, optional\n        Description of parameter `y`. Default is 'default'.\n    z : float, optional\n        Description of parameter `z`. Default is 0.0.\n\n    Returns\n    -------\n    bool\n        Description of return value.\n    "
    docstring_0 = module_0.parse(str_0)
    section_0 = module_0.Section(str_0, str_0)
    numpydoc_parser_0 = module_0.NumpydocParser()
    var_0 = numpydoc_parser_0.add_section(section_0)

def test_case_3():
    str_0 = "\n    Short description.\n\n    Long description.\n\n    Parameters\n    ----------\n    x : int\n       Description of parameter `x`.\n    y : str, optional\n        Description of parameter `y`. Default is 'default'.\n    z : float, optional\n        Description of parameter `z`. Default is 0.0.\n\n    Returns\n    -------\n    bool\n        Description of return value.\n    "
    docstring_0 = module_0.parse(str_0)
    str_1 = None
    docstring_1 = module_0.parse(str_1)

def test_case_4():
    str_0 = '>K\noD@%O#'
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = 'w28\\G;|z\x0c8Z(@1\x0ciU\\'
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_6():
    str_0 = "\n    Short description.\n\n    Long description.\n\n    Parameters\n    ----------\n    x : iQt\n        Description of parameter `x`.\n    y : str, optional\n        Description of parameter `y`. Default is 'default'.\n    z : float, optional\n        Description of parameter `z`. Default is 0.0.\n\n    Returns\n    ------E\n    bool\n        Description of return value.\n    "
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = '!q*Q*\\#v\n\t'
    docstring_0 = module_0.parse(str_0)