

# Generated at 2024-06-01 06:01:04.574292
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"


# Generated at 2024-06-01 06:01:07.542624
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:01:10.189279
```python
    secret = "mysecret"
    vaultid = "filter_default"
    data = "sensitive data"
    
    # Encrypt the data first
    encrypted_data = do_vault(data, secret, vaultid=vaultid)
    
    # Test decryption
    decrypted_data = do_unvault(encrypted_data, secret, vaultid=vaultid)
    
    assert decrypted_data == data, f"Expected {data}, but got {decrypted_data}"
    
    # Test with AnsibleVaultEncryptedUnicode
    encrypted_data_obj = do_vault(data, secret, vaultid=vaultid, wrap_object=True)
    decrypted_data_obj = do_unvault(encrypted_data_obj, secret, vaultid=vaultid)
    
    assert decrypted_data_obj == data, f"Expected {data}, but got {decrypted_data_obj}"
    
    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid

# Generated at 2024-06-01 06:01:12.798224

    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', but got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected decryption error, but got {e}"

   

# Generated at 2024-06-01 06:01:16.104965
```python
    secret = "mysecret"
    vaultid = "filter_default"
    data = "sensitive data"
    
    # Encrypt the data first
    encrypted_data = do_vault(data, secret, vaultid=vaultid)
    
    # Test decryption
    decrypted_data = do_unvault(encrypted_data, secret, vaultid=vaultid)
    assert decrypted_data == data, f"Expected {data}, but got {decrypted_data}"
    
    # Test with AnsibleVaultEncryptedUnicode
    encrypted_unicode = AnsibleVaultEncryptedUnicode(encrypted_data)
    decrypted_data_unicode = do_unvault(encrypted_unicode, secret, vaultid=vaultid)
    assert decrypted_data_unicode == data, f"Expected {data}, but got {decrypted_data_unicode}"
    
    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid=vaultid)
    except AnsibleFilterError:
       

# Generated at 2024-06-01 06:01:18.770978
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:01:22.001175
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:01:24.894126
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:01:27.867730

    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n9192939495969798999a9b9c9d9e9fa0\n"
    
    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"
    
    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "

# Generated at 2024-06-01 06:01:30.958195

    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', but got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected 'Unable to decrypt' error, but got {

# Generated at 2024-06-01 06:01:38.260997
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:01:41.004772
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:01:44.077388
```python
    secret = "mysecret"
    vaultid = "filter_default"
    data = "sensitive data"
    
    # Encrypt the data first
    encrypted_data = do_vault(data, secret, vaultid=vaultid)
    
    # Test decryption
    decrypted_data = do_unvault(encrypted_data, secret, vaultid=vaultid)
    
    assert decrypted_data == data, f"Expected {data}, but got {decrypted_data}"
    
    # Test with AnsibleVaultEncryptedUnicode
    encrypted_data_obj = do_vault(data, secret, vaultid=vaultid, wrap_object=True)
    decrypted_data_obj = do_unvault(encrypted_data_obj, secret, vaultid=vaultid)
    
    assert decrypted_data_obj == data, f"Expected {data}, but got {decrypted_data_obj}"
    
    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid

# Generated at 2024-06-01 06:01:47.214048
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith("$ANSIBLE_VAULT;")

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:01:50.968687
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"


# Generated at 2024-06-01 06:01:54.024989
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:01:56.620357
```python
    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected decryption error, got {e}"

   

# Generated at 2024-06-01 06:01:59.264639
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    wrapped_encrypted_data = do_vault(data, secret, wrap_object=True)
    assert isinstance(wrapped_encrypted_data, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:02.199829
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:05.362607
```python
    secret = "mysecret"
    vaultid = "filter_default"
    data = "sensitive data"
    
    # Encrypt the data first
    encrypted_data = do_vault(data, secret, vaultid=vaultid)
    
    # Test decryption
    decrypted_data = do_unvault(encrypted_data, secret, vaultid=vaultid)
    assert decrypted_data == data, f"Expected {data}, but got {decrypted_data}"
    
    # Test with AnsibleVaultEncryptedUnicode
    encrypted_unicode = AnsibleVaultEncryptedUnicode(encrypted_data)
    decrypted_data_unicode = do_unvault(encrypted_unicode, secret, vaultid=vaultid)
    assert decrypted_data_unicode == data, f"Expected {data}, but got {decrypted_data_unicode}"
    
    # Test with incorrect secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid=vaultid)
    except AnsibleFilterError:
       

# Generated at 2024-06-01 06:02:16.577961
```python
    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n9192939495969798999a9b9c9d9e9fa0\n"
    
    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"
    
    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
       

# Generated at 2024-06-01 06:02:19.353398
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:22.717214
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"



# Generated at 2024-06-01 06:02:25.654373
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:28.389333
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:31.175756
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:34.633140
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_obj = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_obj, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"
```

# Generated at 2024-06-01 06:02:37.579373
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"


# Generated at 2024-06-01 06:02:40.513378
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:43.149326
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"



# Generated at 2024-06-01 06:02:53.303474
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:56.166204
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:02:59.131744
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:03:02.316141
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:03:05.352804

    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "abcdefghijklmno", f"Expected 'abcdefghijklmno', got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected 'Unable to decrypt' error, got {e}"

    # Test with non-encrypted data
    non_encrypted_data = "plain text"
    decrypted_data = do_unvault(non_encrypted_data, secret, vaultid)


# Generated at 2024-06-01 06:03:08.023507
```python
    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n9192939495969798999a9b9c9d9e9fa0\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "

# Generated at 2024-06-01 06:03:10.757969
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:03:13.682318
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:03:19.696506
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    wrapped_encrypted_data = do_vault(data, secret, wrap_object=True)
    assert isinstance(wrapped_encrypted_data, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:03:22.474175
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"


# Generated at 2024-06-01 06:03:37.742138
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:03:40.542117
```python
    secret = "mysecret"
    vaultid = "filter_default"
    data = "sensitive data"
    
    # Encrypt the data first
    encrypted_data = do_vault(data, secret, vaultid=vaultid)
    
    # Test decryption
    decrypted_data = do_unvault(encrypted_data, secret, vaultid=vaultid)
    assert decrypted_data == data, f"Expected {data}, but got {decrypted_data}"
    
    # Test with AnsibleVaultEncryptedUnicode
    encrypted_unicode = AnsibleVaultEncryptedUnicode(encrypted_data)
    decrypted_data_unicode = do_unvault(encrypted_unicode, secret, vaultid=vaultid)
    assert decrypted_data_unicode == data, f"Expected {data}, but got {decrypted_data_unicode}"
    
    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid=vaultid)
    except AnsibleFilterError:
       

# Generated at 2024-06-01 06:03:43.595415
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"


# Generated at 2024-06-01 06:03:46.233423
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:03:49.253438

    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "abcdefghijklmno", f"Expected 'abcdefghijklmno', got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected decryption error, got {e}"

    # Test with non-encrypted data
    non_encrypted_data = "plain text"
    decrypted_data = do_unvault(non_encrypted_data, secret, vaultid)
    assert decrypted

# Generated at 2024-06-01 06:03:53.470752

    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"

# Generated at 2024-06-01 06:03:56.693076
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:03:59.515017
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:04:02.474143
```python
    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected decryption error, got {e}"

   

# Generated at 2024-06-01 06:04:05.918277
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_obj = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_obj, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"
```

# Generated at 2024-06-01 06:04:25.849859
```python
    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected decryption error, got {e}"

    # Test with non-encrypted data
    non_encrypted_data = "plain text"
    result

# Generated at 2024-06-01 06:04:29.035599
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    wrapped_encrypted_data = do_vault(data, secret, wrap_object=True)
    assert isinstance(wrapped_encrypted_data, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:04:31.490838

    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n"

    # Test with valid encrypted data
    result = do_unvault(encrypted_data, secret, vaultid)
    assert result == "abcdefghijklmno", f"Expected 'abcdefghijklmno', got {result}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected decryption error, got {e}"

    # Test with non-encrypted data
    non_encrypted_data = "plain text"
    result = do_unvault(non_encrypted_data, secret, vaultid)
    assert result == non_encrypted_data

# Generated at 2024-06-01 06:04:39.895393
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:04:42.656861
```python
    secret = "mysecret"
    vaultid = "filter_default"
    data = "sensitive data"
    
    # Encrypt the data first
    encrypted_data = do_vault(data, secret, vaultid=vaultid)
    
    # Test decryption
    decrypted_data = do_unvault(encrypted_data, secret, vaultid=vaultid)
    assert decrypted_data == data, f"Expected {data}, but got {decrypted_data}"
    
    # Test with AnsibleVaultEncryptedUnicode
    encrypted_unicode = AnsibleVaultEncryptedUnicode(encrypted_data)
    decrypted_data_unicode = do_unvault(encrypted_unicode, secret, vaultid=vaultid)
    assert decrypted_data_unicode == data, f"Expected {data}, but got {decrypted_data_unicode}"
    
    # Test with incorrect secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid=vaultid)
    except AnsibleFilterError:
       

# Generated at 2024-06-01 06:04:45.325567
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:04:48.470041
```python
    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected decryption error, got {e}"

   

# Generated at 2024-06-01 06:04:51.067862
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:04:54.206415
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:04:58.751591
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:05:18.666929
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:05:21.229601
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"


# Generated at 2024-06-01 06:05:23.875003
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:05:27.194757
```python
    secret = "mysecret"
    data = "mydata"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>"


# Generated at 2024-06-01 06:05:30.307350
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith("$ANSIBLE_VAULT;")

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:05:34.192306
```python
    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n9192939495969798999a9b9c9d9e9fa0\n"
    
    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"
    
    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
       

# Generated at 2024-06-01 06:05:37.861000
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>

# Generated at 2024-06-01 06:05:40.509591
```python
    secret = "mysecret"
    vaultid = "filter_default"
    encrypted_data = "$ANSIBLE_VAULT;1.1;AES256\n6162636465666768696a6b6c6d6e6f70\n7172737475767778797a7b7c7d7e7f80\n8182838485868788898a8b8c8d8e8f90\n"

    # Test with valid encrypted data
    decrypted_data = do_unvault(encrypted_data, secret, vaultid)
    assert decrypted_data == "mydata", f"Expected 'mydata', got {decrypted_data}"

    # Test with invalid secret
    try:
        do_unvault(encrypted_data, "wrongsecret", vaultid)
    except AnsibleFilterError as e:
        assert "Unable to decrypt" in str(e), f"Expected decryption error, got {e}"

   

# Generated at 2024-06-01 06:05:43.089153
```python
    secret = "mysecret"
    data = "sensitive data"
    encrypted_data = do_vault(data, secret)
    assert isinstance(encrypted_data, str)
    assert encrypted_data.startswith('$ANSIBLE_VAULT;')

    # Test with wrap_object=True
    encrypted_data_wrapped = do_vault(data, secret, wrap_object=True)
    assert isinstance(encrypted_data_wrapped, AnsibleVaultEncryptedUnicode)

    # Test with invalid secret type
    try:
        do_vault(data, 12345)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Secret passed is required to be a string, instead we got: <class 'int'>"

    # Test with invalid data type
    try:
        do_vault(12345, secret)
    except AnsibleFilterTypeError as e:
        assert str(e) == "Can only vault strings, instead we got: <class 'int'>