

# Generated at 2024-06-02 15:33:09.826254
```python
    args = argparse.Namespace(
        data=None,
        form=False,
        json=False,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA
    })
    assert make_default_headers(args) == expected_headers

    args = argparse.Namespace(
        data={'key': 'value'},
        form=False,
        json=True,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Accept': JSON_ACCEPT,
        'Content-Type': JSON_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args = argparse.Namespace(
        data={'key': 'value'},
        form=True,
        json=False,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args

# Generated at 2024-06-02 15:33:15.743136
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={},
        url='http://example.com',
        ssl_version=None,
        ciphers=None,
        auth_plugin=None,
        debug=False,
        path_as_is=False,
        compress=0,
        offline=False,
        max_headers=None,
        max_redirects=None,
        follow=False,
        all=False,
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        chunked=False,
        auth=None,
        params={}
    )
    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config_dir))
    assert len

# Generated at 2024-06-02 15:33:16.900082
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:33:17.863853
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:33:19.648798
```python
    args = argparse.Namespace(timeout=30, allow_redirects=False)
    expected = {'timeout': 30, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = argparse.Namespace(timeout=None, allow_redirects=False)
    expected = {'timeout': None, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = argparse.Namespace(timeout=10, allow_redirects=True)
    expected = {'timeout': 10, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected
```

# Generated at 2024-06-02 15:33:20.622260
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:33:23.438305
```python
    args = argparse.Namespace(
        method='GET',
        url='http://example.com',
        headers=RequestHeadersDict({'Custom-Header': 'value'}),
        data=None,
        json=False,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        chunked=False,
        offline=False
    )
    expected = {
        'method': 'get',
        'url': 'http://example.com',
        'headers': RequestHeadersDict({
            'User-Agent': DEFAULT_UA,
            'Custom-Header': 'value'
        }),
        'data': None,
        'auth': None,
        'params': []
    }
    result = make_request_kwargs(args)
    assert result == expected
```

# Generated at 2024-06-02 15:33:26.363209
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={},
        url='http://example.com',
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        ssl_version=None,
        ciphers=None,
        verify='yes',
        proxy=[],
        timeout=None,
        max_headers=None,
        compress=0,
        path_as_is=False,
        offline=False,
        chunked=False,
        follow=False,
        all=False,
        max_redirects=None,
        debug=False,
        auth_plugin=None
    )
    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config_dir))
    assert len(messages) == 1
    assert

# Generated at 2024-06-02 15:33:27.388975
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:33:29.218809
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:33:55.056745
```python
    args = argparse.Namespace(timeout=30, allow_redirects=True)
    expected = {
        'timeout': 30,
        'allow_redirects': False,
    }
    result = make_send_kwargs(args)
    assert result == expected, f'Expected {expected}, but got {result}'
```

# Generated at 2024-06-02 15:33:59.396822
```python
    args = argparse.Namespace(
        method='GET',
        url='http://example.com',
        headers={},
        data=None,
        json=False,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        chunked=False,
        offline=False
    )
    expected = {
        'method': 'get',
        'url': 'http://example.com',
        'headers': {'User-Agent': DEFAULT_UA},
        'data': None,
        'auth': None,
        'params': [],
    }
    result = make_request_kwargs(args)
    assert result == expected

    args = argparse.Namespace(
        method='POST',
        url='http://example.com',
        headers={'Custom-Header': 'value'},
        data={'key': 'value'},
        json=True,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary

# Generated at 2024-06-02 15:34:01.072958
```python
    args = argparse.Namespace(timeout=30, allow_redirects=False)
    expected = {'timeout': 30, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = argparse.Namespace(timeout=None, allow_redirects=False)
    expected = {'timeout': None, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected
```

# Generated at 2024-06-02 15:34:03.689723
```python
    args = argparse.Namespace(timeout=30, allow_redirects=False)
    expected = {'timeout': 30, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = argparse.Namespace(timeout=None, allow_redirects=False)
    expected = {'timeout': None, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = argparse.Namespace(timeout=10, allow_redirects=True)
    expected = {'timeout': 10, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected
```

# Generated at 2024-06-02 15:34:06.012473
```python
    args = argparse.Namespace(timeout=30, allow_redirects=False)
    expected = {'timeout': 30, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = argparse.Namespace(timeout=None, allow_redirects=False)
    expected = {'timeout': None, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = argparse.Namespace(timeout=10, allow_redirects=True)
    expected = {'timeout': 10, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected
```

# Generated at 2024-06-02 15:34:09.223785
```python
    # Test case 1: Verify with 'yes'
    args = argparse.Namespace(
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None
    )
    expected = {
        'proxies': {},
        'stream': True,
        'verify': True,
        'cert': None,
    }
    assert make_send_kwargs_mergeable_from_env(args) == expected

    # Test case 2: Verify with 'no'
    args = argparse.Namespace(
        proxy=[],
        verify='no',
        cert=None,
        cert_key=None
    )
    expected = {
        'proxies': {},
        'stream': True,
        'verify': False,
        'cert': None,
    }
    assert make_send_kwargs_mergeable_from_env(args) == expected

    # Test case 3: Custom cert without key
    args = argparse.Namespace(
        proxy=[],
        verify='true',
        cert='/path/to/c

# Generated at 2024-06-02 15:34:10.311957
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:34:11.283641
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:34:14.180028
```python
    args = argparse.Namespace(
        json=False,
        data=None,
        form=False,
        files=None
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA
    })
    assert make_default_headers(args) == expected_headers

    args.json = True
    expected_headers['Accept'] = JSON_ACCEPT
    expected_headers['Content-Type'] = JSON_CONTENT_TYPE
    assert make_default_headers(args) == expected_headers

    args.json = False
    args.data = {'key': 'value'}
    expected_headers['Accept'] = JSON_ACCEPT
    expected_headers['Content-Type'] = JSON_CONTENT_TYPE
    assert make_default_headers(args) == expected_headers

    args.data = None
    args.form = True
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args.files =

# Generated at 2024-06-02 15:34:16.220051
```python
    session = build_requests_session(verify=True, ssl_version='TLSv1.2', ciphers='ECDHE-RSA-AES128-GCM-SHA256')
    assert isinstance(session, requests.Session)
    assert 'https://' in session.adapters
    adapter = session.get_adapter('https://')
    assert isinstance(adapter, HTTPieHTTPSAdapter)
    assert adapter._ssl_version == AVAILABLE_SSL_VERSION_ARG_MAPPING['TLSv1.2']
    assert adapter._ciphers == 'ECDHE-RSA-AES128-GCM-SHA256'
```

# Generated at 2024-06-02 15:34:58.131697
```python
    # Test case 1: No data, no form, no json
    args = argparse.Namespace(data=None, form=False, json=False, files=False)
    expected_headers = RequestHeadersDict({'User-Agent': DEFAULT_UA})
    assert make_default_headers(args) == expected_headers

    # Test case 2: JSON data
    args = argparse.Namespace(data={'key': 'value'}, form=False, json=True, files=False)
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Accept': JSON_ACCEPT,
        'Content-Type': JSON_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    # Test case 3: Form data
    args = argparse.Namespace(data={'key': 'value'}, form=True, json=False, files=False)
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert

# Generated at 2024-06-02 15:34:59.215350
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:35:02.206868
```python
    class Args:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = Args(
        session=None,
        session_read_only=None,
        headers={'Host': 'example.com'},
        url='http://example.com',
        ssl_version=None,
        ciphers=None,
        auth_plugin=None,
        debug=False,
        path_as_is=False,
        compress=0,
        offline=False,
        max_headers=None,
        max_redirects=None,
        follow=False,
        all=False,
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        chunked=False,
        auth=None,
        params={}
    )

    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config_dir))



# Generated at 2024-06-02 15:35:05.547126
```python
    args = argparse.Namespace(
        method='GET',
        url='http://example.com',
        headers=RequestHeadersDict({'Custom-Header': 'value'}),
        data=None,
        json=False,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        chunked=False,
        offline=False
    )
    base_headers = RequestHeadersDict({'Base-Header': 'base-value'})
    expected = {
        'method': 'get',
        'url': 'http://example.com',
        'headers': RequestHeadersDict({
            'User-Agent': DEFAULT_UA,
            'Base-Header': 'base-value',
            'Custom-Header': 'value'
        }),
        'data': None,
        'auth': None,
        'params': []
    }
    result = make_request_kwargs(args, base_headers)
    assert result == expected
```

# Generated at 2024-06-02 15:35:10.254840
```python
    class MockArgs:
        def __init__(self):
            self.session = None
            self.session_read_only = None
            self.headers = {'Host': 'example.com'}
            self.url = 'http://example.com'
            self.ssl_version = None
            self.ciphers = None
            self.auth_plugin = None
            self.debug = False
            self.path_as_is = False
            self.compress = 0
            self.offline = False
            self.max_headers = None
            self.max_redirects = None
            self.follow = False
            self.all = False
            self.timeout = None
            self.proxy = []
            self.verify = 'yes'
            self.cert = None
            self.cert_key = None
            self.data = None
            self.form = False
            self.json = False
            self.files = None
            self.multipart = False
            self.multipart_data = None
            self.boundary = None

# Generated at 2024-06-02 15:35:13.103363
```python
    args = argparse.Namespace(
        data=None,
        form=False,
        json=False,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA
    })
    assert make_default_headers(args) == expected_headers

    args = argparse.Namespace(
        data={'key': 'value'},
        form=False,
        json=True,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Accept': JSON_ACCEPT,
        'Content-Type': JSON_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args = argparse.Namespace(
        data={'key': 'value'},
        form=True,
        json=False,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args

# Generated at 2024-06-02 15:35:17.121842
```python
    class Args:
        def __init__(self, proxy, verify, cert=None, cert_key=None):
            self.proxy = proxy
            self.verify = verify
            self.cert = cert
            self.cert_key = cert_key

    args = Args(proxy=[argparse.Namespace(key='http', value='http://proxy.example.com')],
                verify='true',
                cert='/path/to/cert',
                cert_key='/path/to/cert_key')

    expected_output = {
        'proxies': {'http': 'http://proxy.example.com'},
        'stream': True,
        'verify': True,
        'cert': ('/path/to/cert', '/path/to/cert_key')
    }

    assert make_send_kwargs_mergeable_from_env(args) == expected_output

    args = Args(proxy=[argparse.Namespace(key='https', value='https://proxy.example.com')],
                verify='false')

    expected_output = {
        'proxies': {'https

# Generated at 2024-06-02 15:35:18.095254
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:35:21.332643
```python
    # Test case 1: No data, no form, no json
    args = argparse.Namespace(data=None, form=False, json=False, files=None)
    expected_headers = RequestHeadersDict({'User-Agent': DEFAULT_UA})
    assert make_default_headers(args) == expected_headers

    # Test case 2: JSON data
    args = argparse.Namespace(data={'key': 'value'}, form=False, json=True, files=None)
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Accept': JSON_ACCEPT,
        'Content-Type': JSON_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    # Test case 3: Form data
    args = argparse.Namespace(data={'key': 'value'}, form=True, json=False, files=None)
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert

# Generated at 2024-06-02 15:35:24.755256
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={},
        url='http://example.com',
        ssl_version=None,
        ciphers=None,
        auth_plugin=None,
        debug=False,
        path_as_is=False,
        compress=0,
        offline=False,
        max_headers=None,
        max_redirects=None,
        follow=False,
        all=False,
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        chunked=False,
        auth=None,
        params={}
    )

    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config_dir))

    assert len

# Generated at 2024-06-02 15:36:06.366078
```python
    class Args:
        def __init__(self, method, url, headers=None, data=None, json=False, form=False, files=None, multipart=False, multipart_data=None, boundary=None, chunked=False, offline=False, auth=None, params=None):
            self.method = method
            self.url = url
            self.headers = headers or {}
            self.data = data
            self.json = json
            self.form = form
            self.files = files
            self.multipart = multipart
            self.multipart_data = multipart_data
            self.boundary = boundary
            self.chunked = chunked
            self.offline = offline
            self.auth = auth
            self.params = params or {}

    args = Args(
        method='POST',
        url='http://example.com',
        headers={'Custom-Header': 'value'},
        data={'key': 'value'},
        json=True,
        auth=('user', 'pass'),
        params={'param

# Generated at 2024-06-02 15:36:09.378140
```python
    args = argparse.Namespace(
        method='GET',
        url='http://example.com',
        headers=RequestHeadersDict({'Custom-Header': 'value'}),
        data=None,
        json=False,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        chunked=False,
        offline=False
    )
    base_headers = RequestHeadersDict({'Base-Header': 'base-value'})
    expected = {
        'method': 'get',
        'url': 'http://example.com',
        'headers': RequestHeadersDict({
            'User-Agent': DEFAULT_UA,
            'Base-Header': 'base-value',
            'Custom-Header': 'value'
        }),
        'data': None,
        'auth': None,
        'params': []
    }
    result = make_request_kwargs(args, base_headers)
    assert result == expected
```

# Generated at 2024-06-02 15:36:12.295907
```python
    # Test case 1: No data, no form, no json
    args = argparse.Namespace(data=None, form=False, json=False, files=None)
    expected_headers = RequestHeadersDict({'User-Agent': DEFAULT_UA})
    assert make_default_headers(args) == expected_headers

    # Test case 2: JSON data
    args = argparse.Namespace(data={'key': 'value'}, form=False, json=True, files=None)
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Accept': JSON_ACCEPT,
        'Content-Type': JSON_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    # Test case 3: Form data
    args = argparse.Namespace(data={'key': 'value'}, form=True, json=False, files=None)
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert

# Generated at 2024-06-02 15:36:16.793821
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={'Host': 'example.com'},
        url='http://example.com',
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        auth_plugin=None,
        params={},
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        ssl_version=None,
        ciphers=None,
        compress=0,
        chunked=False,
        offline=False,
        path_as_is=False,
        follow=False,
        all=False,
        max_redirects=None,
        max_headers=None,
        debug=False
    )
    config_dir = Path('/tmp')
    messages = list(collect_messages(args,

# Generated at 2024-06-02 15:36:18.129010
```python
    args = argparse.Namespace(timeout=30)
    expected = {'timeout': 30, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = argparse.Namespace(timeout=None)
    expected = {'timeout': None, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected
```

# Generated at 2024-06-02 15:36:19.407660
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:36:22.096400
```python
    args = argparse.Namespace(
        method='GET',
        url='http://example.com',
        headers=RequestHeadersDict({'Custom-Header': 'value'}),
        data=None,
        json=False,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        chunked=False,
        offline=False
    )
    expected = {
        'method': 'get',
        'url': 'http://example.com',
        'headers': RequestHeadersDict({
            'User-Agent': DEFAULT_UA,
            'Custom-Header': 'value'
        }),
        'data': None,
        'auth': None,
        'params': []
    }
    result = make_request_kwargs(args)
    assert result == expected
```

# Generated at 2024-06-02 15:36:26.205605
```python
    args = argparse.Namespace(
        proxy=[argparse.Namespace(key='http', value='http://proxy.example.com')],
        verify='true',
        cert=None,
        cert_key=None
    )
    expected_output = {
        'proxies': {'http': 'http://proxy.example.com'},
        'stream': True,
        'verify': True,
        'cert': None,
    }
    assert make_send_kwargs_mergeable_from_env(args) == expected_output

    args = argparse.Namespace(
        proxy=[argparse.Namespace(key='https', value='https://proxy.example.com')],
        verify='false',
        cert='/path/to/cert',
        cert_key='/path/to/key'
    )
    expected_output = {
        'proxies': {'https': 'https://proxy.example.com'},
        'stream': True,
        'verify': False,
        'cert': ('/path/to/cert', '/path/to/key'),
    }
    assert make_send_kwargs

# Generated at 2024-06-02 15:36:30.136735
```python
    # Test case 1: No data, no form, no json
    args = argparse.Namespace(data=None, form=False, json=False, files=False)
    expected = RequestHeadersDict({'User-Agent': DEFAULT_UA})
    assert make_default_headers(args) == expected

    # Test case 2: JSON data
    args = argparse.Namespace(data={'key': 'value'}, form=False, json=True, files=False)
    expected = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Accept': JSON_ACCEPT,
        'Content-Type': JSON_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected

    # Test case 3: Form data
    args = argparse.Namespace(data={'key': 'value'}, form=True, json=False, files=False)
    expected = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert make_default_headers(args)

# Generated at 2024-06-02 15:36:32.464177
```python
    headers = RequestHeadersDict({
        'Content-Type': ' application/json ',
        'User-Agent': ' HTTPie/1.0 ',
        'Custom-Header': ' Custom Value ',
        'None-Header': None
    })
    expected = RequestHeadersDict({
        'Content-Type': b'application/json',
        'User-Agent': b'HTTPie/1.0',
        'Custom-Header': b'Custom Value'
    })
    assert finalize_headers(headers) == expected
```

# Generated at 2024-06-02 15:37:47.138346
```python
    args = argparse.Namespace(
        json=False,
        data=None,
        form=False,
        files=None
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA
    })
    assert make_default_headers(args) == expected_headers

    args.json = True
    expected_headers['Accept'] = JSON_ACCEPT
    expected_headers['Content-Type'] = JSON_CONTENT_TYPE
    assert make_default_headers(args) == expected_headers

    args.json = False
    args.data = {'key': 'value'}
    expected_headers['Accept'] = JSON_ACCEPT
    expected_headers['Content-Type'] = JSON_CONTENT_TYPE
    assert make_default_headers(args) == expected_headers

    args.data = None
    args.form = True
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args.files =

# Generated at 2024-06-02 15:37:52.413727
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={},
        url='http://example.com',
        ssl_version=None,
        ciphers=None,
        auth_plugin=None,
        debug=False,
        path_as_is=False,
        compress=0,
        offline=False,
        max_headers=None,
        max_redirects=None,
        follow=False,
        all=False,
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        chunked=False,
        auth=None,
        params={}
    )
    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config_dir))
    assert len

# Generated at 2024-06-02 15:37:56.844315
```python
    args = argparse.Namespace(
        proxy=[argparse.Namespace(key='http', value='http://proxy.example.com')],
        verify='true',
        cert=None,
        cert_key=None
    )
    expected_output = {
        'proxies': {'http': 'http://proxy.example.com'},
        'stream': True,
        'verify': True,
        'cert': None,
    }
    assert make_send_kwargs_mergeable_from_env(args) == expected_output

    args = argparse.Namespace(
        proxy=[argparse.Namespace(key='https', value='https://proxy.example.com')],
        verify='false',
        cert='/path/to/cert',
        cert_key='/path/to/key'
    )
    expected_output = {
        'proxies': {'https': 'https://proxy.example.com'},
        'stream': True,
        'verify': False,
        'cert': ('/path/to/cert', '/path/to/key'),
    }
    assert make_send_kwargs

# Generated at 2024-06-02 15:38:00.230062
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={'Host': 'example.com'},
        url='http://example.com',
        ssl_version=None,
        ciphers=None,
        auth_plugin=None,
        debug=False,
        path_as_is=False,
        compress=0,
        offline=False,
        max_headers=None,
        max_redirects=None,
        follow=False,
        all=False,
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        chunked=False,
        auth=None,
        params={}
    )
    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config

# Generated at 2024-06-02 15:38:03.196697
```python
    class Args:
        def __init__(self, method, url, headers=None, data=None, json=False, form=False, files=None, multipart=False, multipart_data=None, boundary=None, chunked=False, offline=False, auth=None, params=None):
            self.method = method
            self.url = url
            self.headers = headers or {}
            self.data = data
            self.json = json
            self.form = form
            self.files = files
            self.multipart = multipart
            self.multipart_data = multipart_data
            self.boundary = boundary
            self.chunked = chunked
            self.offline = offline
            self.auth = auth
            self.params = params or {}

    args = Args(
        method='POST',
        url='http://example.com',
        headers={'Custom-Header': 'value'},
        data={'key': 'value'},
        json=True,
        auth=('user', 'pass'),
        params={'param

# Generated at 2024-06-02 15:38:06.096987
```python
    args = argparse.Namespace(
        method='GET',
        url='http://example.com',
        headers=RequestHeadersDict({'Custom-Header': 'value'}),
        data=None,
        json=False,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        chunked=False,
        offline=False
    )
    expected = {
        'method': 'get',
        'url': 'http://example.com',
        'headers': RequestHeadersDict({
            'User-Agent': DEFAULT_UA,
            'Custom-Header': 'value'
        }),
        'data': None,
        'auth': None,
        'params': []
    }
    result = make_request_kwargs(args)
    assert result == expected
```

# Generated at 2024-06-02 15:38:09.314320
```python
    args = argparse.Namespace(
        data=None,
        form=False,
        json=False,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA
    })
    assert make_default_headers(args) == expected_headers

    args = argparse.Namespace(
        data={'key': 'value'},
        form=False,
        json=True,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Accept': JSON_ACCEPT,
        'Content-Type': JSON_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args = argparse.Namespace(
        data={'key': 'value'},
        form=True,
        json=False,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args

# Generated at 2024-06-02 15:38:12.219329
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={},
        url='http://example.com',
        ssl_version=None,
        ciphers=None,
        auth_plugin=None,
        debug=False,
        path_as_is=False,
        compress=0,
        offline=False,
        max_headers=None,
        max_redirects=None,
        follow=False,
        all=False,
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        chunked=False,
        auth=None,
        params={}
    )

    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config_dir))

    assert len

# Generated at 2024-06-02 15:38:15.496360
```python
    args = argparse.Namespace(
        data=None,
        form=False,
        json=False,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA
    })
    assert make_default_headers(args) == expected_headers

    args = argparse.Namespace(
        data={'key': 'value'},
        form=False,
        json=True,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Accept': JSON_ACCEPT,
        'Content-Type': JSON_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args = argparse.Namespace(
        data={'key': 'value'},
        form=True,
        json=False,
        files=False
    )
    expected_headers = RequestHeadersDict({
        'User-Agent': DEFAULT_UA,
        'Content-Type': FORM_CONTENT_TYPE
    })
    assert make_default_headers(args) == expected_headers

    args

# Generated at 2024-06-02 15:38:18.016527
```python
    args = argparse.Namespace(
        method='GET',
        url='http://example.com',
        headers=RequestHeadersDict({'Custom-Header': 'value'}),
        data=None,
        json=False,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        chunked=False,
        offline=False
    )
    expected = {
        'method': 'get',
        'url': 'http://example.com',
        'headers': RequestHeadersDict({
            'User-Agent': DEFAULT_UA,
            'Custom-Header': 'value'
        }),
        'data': None,
        'auth': None,
        'params': []
    }
    result = make_request_kwargs(args)
    assert result == expected
```

# Generated at 2024-06-02 15:41:34.055065
```python
    limit = 10
    with max_headers(limit):
        assert http.client._MAXHEADERS == limit
    assert http.client._MAXHEADERS != limit
```

# Generated at 2024-06-02 15:41:36.227272
```python
    class Args:
        def __init__(self, timeout=None):
            self.timeout = timeout

    # Test case 1: No timeout provided
    args = Args()
    result = make_send_kwargs(args)
    assert result == {'timeout': None, 'allow_redirects': False}

    # Test case 2: Timeout provided
    args = Args(timeout=10)
    result = make_send_kwargs(args)
    assert result == {'timeout': 10, 'allow_redirects': False}

    print("All test cases passed for make_send_kwargs")

test_make_send_kwargs()
```

# Generated at 2024-06-02 15:41:39.754309
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={'Host': 'example.com'},
        url='http://example.com',
        ssl_version=None,
        ciphers=None,
        auth_plugin=None,
        debug=False,
        path_as_is=False,
        compress=0,
        offline=False,
        max_headers=None,
        max_redirects=None,
        follow=False,
        all=False,
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        chunked=False,
        auth=None,
        params={}
    )

    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config

# Generated at 2024-06-02 15:41:44.625194
```python
    class Args:
        def __init__(self, proxy, verify, cert=None, cert_key=None):
            self.proxy = proxy
            self.verify = verify
            self.cert = cert
            self.cert_key = cert_key

    args = Args(proxy=[argparse.Namespace(key='http', value='http://proxy.example.com')],
                verify='true',
                cert='/path/to/cert',
                cert_key='/path/to/cert_key')

    expected_output = {
        'proxies': {'http': 'http://proxy.example.com'},
        'stream': True,
        'verify': True,
        'cert': ('/path/to/cert', '/path/to/cert_key')
    }

    assert make_send_kwargs_mergeable_from_env(args) == expected_output

    args = Args(proxy=[argparse.Namespace(key='https', value='https://proxy.example.com')],
                verify='false')

    expected_output = {
        'proxies': {'https

# Generated at 2024-06-02 15:41:48.849989
```python
    args = argparse.Namespace(
        proxy=[argparse.Namespace(key='http', value='http://proxy.example.com')],
        verify='true',
        cert=None,
        cert_key=None
    )
    expected_output = {
        'proxies': {'http': 'http://proxy.example.com'},
        'stream': True,
        'verify': True,
        'cert': None,
    }
    assert make_send_kwargs_mergeable_from_env(args) == expected_output

    args = argparse.Namespace(
        proxy=[argparse.Namespace(key='https', value='https://proxy.example.com')],
        verify='false',
        cert='/path/to/cert',
        cert_key='/path/to/key'
    )
    expected_output = {
        'proxies': {'https': 'https://proxy.example.com'},
        'stream': True,
        'verify': False,
        'cert': ('/path/to/cert', '/path/to/key'),
    }
    assert make_send_kwargs

# Generated at 2024-06-02 15:41:51.976789
```python
    args = argparse.Namespace(
        method='POST',
        url='http://example.com',
        headers=RequestHeadersDict({'Custom-Header': 'value'}),
        data={'key': 'value'},
        json=True,
        form=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        auth=None,
        params={},
        chunked=False,
        offline=False
    )
    base_headers = RequestHeadersDict({'Base-Header': 'base-value'})
    request_body_read_callback = lambda chunk: chunk

    expected = {
        'method': 'post',
        'url': 'http://example.com',
        'headers': {
            'User-Agent': DEFAULT_UA,
            'Accept': JSON_ACCEPT,
            'Content-Type': JSON_CONTENT_TYPE,
            'Custom-Header': 'value',
            'Base-Header': 'base-value'
        },
        'data': json.dumps({'key': 'value'}),
        '

# Generated at 2024-06-02 15:41:55.078583
```python
    class MockArgs:
        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    args = MockArgs(
        session=None,
        session_read_only=None,
        headers={},
        url='http://example.com',
        ssl_version=None,
        ciphers=None,
        auth_plugin=None,
        debug=False,
        path_as_is=False,
        compress=0,
        offline=False,
        max_headers=None,
        max_redirects=None,
        follow=False,
        all=False,
        timeout=None,
        proxy=[],
        verify='yes',
        cert=None,
        cert_key=None,
        method='GET',
        data=None,
        form=False,
        json=False,
        files=None,
        multipart=False,
        multipart_data=None,
        boundary=None,
        chunked=False,
        auth=None,
        params={}
    )

    config_dir = Path('/tmp')
    messages = list(collect_messages(args, config_dir))

    assert len

# Generated at 2024-06-02 15:42:00.169795
```python
    args = argparse.Namespace(
        proxy=[argparse.Namespace(key='http', value='http://proxy.example.com')],
        verify='true',
        cert=None,
        cert_key=None
    )
    expected_output = {
        'proxies': {'http': 'http://proxy.example.com'},
        'stream': True,
        'verify': True,
        'cert': None,
    }
    assert make_send_kwargs_mergeable_from_env(args) == expected_output

    args = argparse.Namespace(
        proxy=[argparse.Namespace(key='https', value='https://proxy.example.com')],
        verify='false',
        cert='path/to/cert',
        cert_key='path/to/key'
    )
    expected_output = {
        'proxies': {'https': 'https://proxy.example.com'},
        'stream': True,
        'verify': False,
        'cert': ('path/to/cert', 'path/to/key'),
    }
    assert make_send_kwargs_merge

# Generated at 2024-06-02 15:42:02.826013
```python
    class Args:
        def __init__(self, method, url, headers=None, data=None, json=False, form=False, files=None, multipart=False, multipart_data=None, boundary=None, auth=None, params=None, chunked=False, offline=False):
            self.method = method
            self.url = url
            self.headers = headers or {}
            self.data = data
            self.json = json
            self.form = form
            self.files = files
            self.multipart = multipart
            self.multipart_data = multipart_data
            self.boundary = boundary
            self.auth = auth
            self.params = params or {}
            self.chunked = chunked
            self.offline = offline

    args = Args(
        method='POST',
        url='http://example.com',
        headers={'Custom-Header': 'value'},
        data={'key': 'value'},
        json=True,
        auth=('user', 'pass'),
        params={'param

# Generated at 2024-06-02 15:42:04.329148
```python
    class Args:
        def __init__(self, timeout):
            self.timeout = timeout

    args = Args(timeout=10)
    expected = {'timeout': 10, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected

    args = Args(timeout=None)
    expected = {'timeout': None, 'allow_redirects': False}
    assert make_send_kwargs(args) == expected
```