# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        schema_metaclass_0 = module_0.SchemaMetaclass()
    except BaseException:
        pass

def test_case_1():
    try:
        field_0 = None
        schema_definitions_0 = module_0.SchemaDefinitions()
        any_0 = schema_definitions_0.__getitem__(field_0)
    except BaseException:
        pass

def test_case_2():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        dict_0 = {int_0: int_0}
        schema_definitions_0.__delitem__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '4+tU%D_,3.5%ZU<\x0b\rjE'
        str_1 = 'tag:yaml.org,2002:int'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        schema_0 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        bool_0 = True
        schema_0 = module_0.Schema()
        bool_1 = schema_0.__eq__(schema_definitions_0)
        any_0 = schema_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n    Returns a two-tuple of `(type_strings, allow_null)`.\n    '
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '4'
        dict_0 = {str_0: str_0}
        reference_0 = module_0.Reference(str_0)
        reference_1 = module_0.Reference(dict_0, reference_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'empty'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        iterator_0 = None
        list_0 = [iterator_0, iterator_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        schema_0 = module_0.Schema()
        iterator_0 = schema_0.__iter__()
        schema_1 = module_0.Schema(**dict_0)
        str_0 = schema_1.__repr__()
        dict_1 = {}
        dict_2 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_2)
        schema_definitions_0.__delitem__(dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        field_0 = None
        str_0 = 'Must have at least {min_items} items.'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(field_0)
    except BaseException:
        pass

def test_case_11():
    try:
        iterator_0 = None
        str_0 = ''
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(iterator_0)
        str_1 = 'empty'
        schema_0 = module_0.Schema()
        any_1 = reference_0.serialize(schema_0)
        schema_1 = module_0.Schema()
        bool_0 = schema_1.__eq__(iterator_0)
        schema_definitions_0 = None
        str_2 = schema_0.__repr__()
        int_0 = schema_0.__len__()
        str_3 = ' q5d8I'
        field_0 = module_1.Field(title=str_3, default=str_1)
        str_4 = ' ]YrB~s*apV'
        field_1 = module_1.Field(title=str_4)
        module_0.set_definitions(field_1, schema_definitions_0)
        dict_0 = None
        list_0 = [dict_0]
        str_5 = '[}8?Y$g3:+i;\r%:*z;lP'
        dict_1 = {str_5: schema_1}
        schema_2 = module_0.Schema(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        bool_0 = True
        str_0 = " ^JnC/nx'r;"
        schema_definitions_0 = module_0.SchemaDefinitions()
        reference_0 = module_0.Reference(str_0, schema_definitions_0)
        any_0 = reference_0.validate(list_0, strict=bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        iterator_0 = None
        str_0 = "Ja>g#0O\\6p9.'WuI"
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(iterator_0)
        schema_0 = module_0.Schema()
        any_1 = reference_0.serialize(schema_0)
        bool_0 = schema_0.__eq__(str_0)
        iterator_1 = schema_0.__iter__()
        str_1 = '\n+Wb+BctQ\x0cC'
        field_0 = module_1.Field(description=str_1, default=str_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(any_0, schema_0)
        bool_1 = schema_0.__eq__(schema_0)
        dict_0 = {str_1: bool_0, str_0: bool_0}
        schema_definitions_1 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_1.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'ovS'
        bool_0 = True
        field_0 = module_1.Field(title=str_0, description=str_0, allow_null=bool_0)
        tuple_0 = (schema_definitions_0, field_0, field_0)
        list_0 = [tuple_0, str_0, schema_definitions_0, field_0]
        schema_metaclass_0 = module_0.SchemaMetaclass(*list_0)
    except BaseException:
        pass