

# Generated at 2024-06-04 20:07:18.448102
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    sparse_instance = TestSchema(field1="value1")
    sparse_keys = list(sparse_instance.__iter__())
    assert sparse_keys == ["field1"]
```

# Generated at 2024-06-04 20:07:21.853004
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    # Test with positional argument as dictionary
    schema_instance = TestSchema({"field1": "value1", "field2": "value2"})
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test with keyword arguments
    schema_instance = TestSchema(field1="value1", field2="value2")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test with missing fields and default values
    class TestSchemaWithDefaults(Schema):
        field1 = Field()
        field2 = Field(default="default_value")

    schema_instance = TestSchemaWithDefaults(field1="value1")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "default_value"

    # Test with invalid keyword argument

# Generated at 2024-06-04 20:07:23.772448
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    sparse_instance = TestSchema(field1="value1")
    sparse_keys = list(sparse_instance.__iter__())
    assert sparse_keys == ["field1"]
```

# Generated at 2024-06-04 20:07:25.794831
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    instance_sparse = TestSchema(field1="value1")
    keys_sparse = list(instance_sparse.__iter__())
    assert keys_sparse == ["field1"]
```

# Generated at 2024-06-04 20:07:31.896558
```python
    schema_definitions = SchemaDefinitions()
    schema = Schema()
    
    # Test with Schema type
    ref = Reference(to=schema.__class__, definitions=schema_definitions)
    assert ref.to == schema.__class__
    assert ref.definitions == schema_definitions
    assert ref.target == schema.__class__
    
    # Test with string reference
    schema_definitions['TestSchema'] = schema.__class__
    ref = Reference(to='TestSchema', definitions=schema_definitions)
    assert ref.to == 'TestSchema'
    assert ref.definitions == schema_definitions
    assert ref.target == schema.__class__
    
    # Test with missing definitions
    try:
        ref = Reference(to='TestSchema')
    except AssertionError as e:
        assert str(e) == "String reference missing 'definitions'."
    
    # Test with invalid schema type
    try:
        ref = Reference(to='InvalidSchema', definitions=schema_definitions)


# Generated at 2024-06-04 20:07:36.119311
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field(default=42)

    # Test initialization with positional argument (dictionary)
    schema_instance = TestSchema({"field1": "value1"})
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == 42

    # Test initialization with keyword arguments
    schema_instance = TestSchema(field1="value1", field2="value2")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test initialization with missing optional field
    schema_instance = TestSchema(field1="value1")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == 42

    # Test initialization with invalid field
    try:
        TestSchema(field1="value1", field3="value3")
    except TypeError as e:
        assert str(e) == "'

# Generated at 2024-06-04 20:07:40.260435
```python
    schema_definitions = SchemaDefinitions()
    schema = Schema()
    
    # Test with Schema type
    ref = Reference(to=schema.__class__, definitions=schema_definitions)
    assert ref.to == schema.__class__
    assert ref.definitions == schema_definitions
    assert ref.target == schema.__class__
    
    # Test with string reference
    schema_definitions['TestSchema'] = schema.__class__
    ref = Reference(to='TestSchema', definitions=schema_definitions)
    assert ref.to == 'TestSchema'
    assert ref.definitions == schema_definitions
    assert ref.target == schema.__class__
    
    # Test with missing definitions
    try:
        ref = Reference(to='MissingSchema')
    except AssertionError as e:
        assert str(e) == "String reference missing 'definitions'."
```

# Generated at 2024-06-04 20:07:44.037304
```python
    schema_definitions = SchemaDefinitions()
    schema = Schema()
    
    # Test with Schema type
    ref = Reference(to=schema.__class__, definitions=schema_definitions)
    assert ref.to == schema.__class__
    assert ref.definitions == schema_definitions
    assert ref.target == schema.__class__
    
    # Test with string reference
    schema_definitions['TestSchema'] = schema.__class__
    ref = Reference(to='TestSchema', definitions=schema_definitions)
    assert ref.to == 'TestSchema'
    assert ref.definitions == schema_definitions
    assert ref.target == schema.__class__
    
    # Test with missing definitions
    try:
        ref = Reference(to='TestSchema')
    except AssertionError as e:
        assert str(e) == "String reference missing 'definitions'."
```

# Generated at 2024-06-04 20:07:48.040418
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field(default=42)

    # Test initialization with positional argument (dictionary)
    schema_instance = TestSchema({"field1": "value1"})
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == 42

    # Test initialization with keyword arguments
    schema_instance = TestSchema(field1="value1", field2="value2")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test initialization with missing required field
    try:
        TestSchema()
    except TypeError as e:
        assert str(e) == "Invalid argument 'field1' for TestSchema(). "

    # Test initialization with invalid keyword argument
    try:
        TestSchema(field3="value3")
    except TypeError as e:
        assert str(e) == "'field3' is an invalid

# Generated at 2024-06-04 20:07:49.987517
```python
    definitions = SchemaDefinitions()
    definitions["key1"] = "value1"
    assert definitions["key1"] == "value1"

    try:
        definitions["key1"] = "value2"
    except AssertionError as e:
        assert str(e) == "Definition for 'key1' has already been set."
    else:
        assert False, "Expected an AssertionError"
```

# Generated at 2024-06-04 20:08:05.553569
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema1 != "not_a_schema"
```

# Generated at 2024-06-04 20:08:09.215931
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:08:11.918980
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    instance_sparse = TestSchema(field1="value1")
    keys_sparse = list(instance_sparse.__iter__())
    assert keys_sparse == ["field1"]
```

# Generated at 2024-06-04 20:08:14.355883
```python
    definitions = SchemaDefinitions()
    field = Reference(to="SomeSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="SomeSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="SomeSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="SomeSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions
```

# Generated at 2024-06-04 20:08:16.885837
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    instance_sparse = TestSchema(field1="value1")
    keys_sparse = list(instance_sparse.__iter__())
    assert keys_sparse == ["field1"]
```

# Generated at 2024-06-04 20:08:19.366527
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    sparse_instance = TestSchema(field1="value1")
    sparse_keys = list(sparse_instance.__iter__())
    assert sparse_keys == ["field1"]
```

# Generated at 2024-06-04 20:08:22.705907
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    sparse_instance = TestSchema(field1="value1")
    sparse_keys = list(sparse_instance.__iter__())
    assert sparse_keys == ["field1"]
```

# Generated at 2024-06-04 20:08:24.430904
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:08:26.108736
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:08:28.543165
```python
    definitions = SchemaDefinitions()

    class ChildSchema(Schema):
        pass

    class ParentSchema(Schema):
        child = Reference(to=ChildSchema)

    definitions["ChildSchema"] = ChildSchema

    parent_field = Reference(to=ParentSchema)
    set_definitions(parent_field, definitions)

    assert parent_field.definitions == definitions
    assert parent_field.target.fields["child"].definitions == definitions
```

# Generated at 2024-06-04 20:08:44.225855
```python
    class TestField(Field):
        def __init__(self, default=None):
            super().__init__()
            self._default = default

        def has_default(self):
            return self._default is not None

        def get_default_value(self):
            return self._default

        def validate_or_error(self, value):
            return value, None

    class TestSchema(Schema):
        field1 = TestField()
        field2 = TestField(default="default_value")
        field3 = TestField()

    schema_instance = TestSchema(field1="value1", field3="value3")
    assert len(schema_instance) == 2

    schema_instance = TestSchema(field1="value1")
    assert len(schema_instance) == 1

    schema_instance = TestSchema()
    assert len(schema_instance) == 0
```

# Generated at 2024-06-04 20:08:45.937425
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:08:48.427137
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    sparse_instance = TestSchema(field1="value1")
    sparse_keys = list(sparse_instance.__iter__())
    assert sparse_keys == ["field1"]
```

# Generated at 2024-06-04 20:08:50.458121
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:08:53.999166
```python
    schema_definitions = SchemaDefinitions()
    schema = Schema()
    
    # Test with Schema type
    ref = Reference(to=schema.__class__, definitions=schema_definitions)
    assert ref.to == schema.__class__
    assert ref.definitions == schema_definitions
    assert ref.target == schema.__class__
    
    # Test with string reference
    ref = Reference(to="Schema", definitions=schema_definitions)
    assert ref.to == "Schema"
    assert ref.definitions == schema_definitions
    assert ref.target_string == "Schema"
    
    # Test with missing definitions
    try:
        ref = Reference(to="Schema")
    except AssertionError as e:
        assert str(e) == "String reference missing 'definitions'."
    
    # Test with invalid type
    try:
        ref = Reference(to=123)
    except AssertionError:
        pass
```

# Generated at 2024-06-04 20:08:55.986634
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:09:00.640542
```python
    class TestField(Field):
        _creation_counter = 0

        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self._creation_counter = TestField._creation_counter
            TestField._creation_counter += 1

    class TestSchema(metaclass=SchemaMetaclass):
        field1 = TestField()
        field2 = TestField()

    assert hasattr(TestSchema, 'fields')
    assert 'field1' in TestSchema.fields
    assert 'field2' in TestSchema.fields
    assert isinstance(TestSchema.fields['field1'], TestField)
    assert isinstance(TestSchema.fields['field2'], TestField)
    assert list(TestSchema.fields.keys()) == ['field1', 'field2']

    definitions = SchemaDefinitions()
    class TestSchemaWithDefinitions(metaclass=SchemaMetaclass, definitions=definitions):
        field1 = TestField()
        field2 = TestField()

    assert 'TestSchema

# Generated at 2024-06-04 20:09:02.978402
```python
    definitions = SchemaDefinitions()
    field1 = Reference(to="Schema1")
    field2 = Array(items=Reference(to="Schema2"))
    field3 = Object(properties={"field": Reference(to="Schema3")})

    set_definitions(field1, definitions)
    set_definitions(field2, definitions)
    set_definitions(field3, definitions)

    assert field1.definitions is definitions
    assert field2.items.definitions is definitions
    assert field3.properties["field"].definitions is definitions
```

# Generated at 2024-06-04 20:09:04.952924
```python
    definitions = SchemaDefinitions()
    definitions["key1"] = "value1"
    assert definitions["key1"] == "value1"

    try:
        definitions["key1"] = "value2"
    except AssertionError as e:
        assert str(e) == "Definition for 'key1' has already been set."
    else:
        assert False, "Expected an AssertionError"
```

# Generated at 2024-06-04 20:09:06.942139
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:09:42.356368
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    definitions = SchemaDefinitions()
    definitions["TestSchema"] = TestSchema

    ref_field = Reference(to="TestSchema", definitions=definitions)

    # Test with valid data
    valid_data = {"field1": "value1", "field2": "value2"}
    result = ref_field.validate(valid_data)
    assert isinstance(result, TestSchema)
    assert result.field1 == "value1"
    assert result.field2 == "value2"

    # Test with invalid data
    invalid_data = {"field1": "value1"}
    try:
        ref_field.validate(invalid_data)
    except ValidationError:
        pass
    else:
        assert False, "Expected ValidationError"

    # Test with None and allow_null=True
    ref_field.allow_null = True
    result = ref_field.validate(None)
    assert result is None

    #

# Generated at 2024-06-04 20:09:44.234779
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3
```

# Generated at 2024-06-04 20:09:46.076816
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:09:49.121024
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:09:51.294294
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3
```

# Generated at 2024-06-04 20:09:55.007278
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field(default=42)

    # Test initialization with positional argument (dictionary)
    schema = TestSchema({"field1": "value1"})
    assert schema.field1 == "value1"
    assert schema.field2 == 42

    # Test initialization with keyword arguments
    schema = TestSchema(field1="value1", field2="value2")
    assert schema.field1 == "value1"
    assert schema.field2 == "value2"

    # Test initialization with missing optional field
    schema = TestSchema(field1="value1")
    assert schema.field1 == "value1"
    assert schema.field2 == 42

    # Test initialization with invalid field
    try:
        TestSchema(field1="value1", invalid_field="value")
    except TypeError as e:
        assert str(e) == "'invalid_field' is an invalid keyword argument for Test

# Generated at 2024-06-04 20:09:59.699223
```python
    class TestField(Field):
        _creation_counter = 0

        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self._creation_counter = TestField._creation_counter
            TestField._creation_counter += 1

    class TestSchema(metaclass=SchemaMetaclass):
        field1 = TestField()
        field2 = TestField()

    assert hasattr(TestSchema, 'fields')
    assert 'field1' in TestSchema.fields
    assert 'field2' in TestSchema.fields
    assert isinstance(TestSchema.fields['field1'], TestField)
    assert isinstance(TestSchema.fields['field2'], TestField)
    assert list(TestSchema.fields.keys()) == ['field1', 'field2']

    definitions = SchemaDefinitions()
    class TestSchemaWithDefinitions(metaclass=SchemaMetaclass, definitions=definitions):
        field1 = TestField()
        field2 = TestField()

    assert 'TestSchema

# Generated at 2024-06-04 20:10:01.697116
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    sparse_instance = TestSchema(field1="value1")
    sparse_keys = list(sparse_instance.__iter__())
    assert sparse_keys == ["field1"]
```

# Generated at 2024-06-04 20:10:05.821827
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    # Test with positional argument as dictionary
    schema_instance = TestSchema({"field1": "value1", "field2": "value2"})
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test with keyword arguments
    schema_instance = TestSchema(field1="value1", field2="value2")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test with missing fields
    schema_instance = TestSchema(field1="value1")
    assert schema_instance.field1 == "value1"
    assert not hasattr(schema_instance, "field2")

    # Test with invalid field
    try:
        TestSchema(field3="value3")
    except TypeError as e:
        assert str(e) == "'field3' is

# Generated at 2024-06-04 20:10:07.812526
```python
    class TestSchema(Schema):
        field1 = Field(default="value1")
        field2 = Field(default="value2")

    schema_instance = TestSchema()
    assert repr(schema_instance) == "TestSchema(field1='value1', field2='value2')"

    schema_instance_sparse = TestSchema(field1="new_value1")
    assert repr(schema_instance_sparse) == "TestSchema(field1='new_value1')[sparse]"
```

# Generated at 2024-06-04 20:10:31.422957
```python
    class TestField(Field):
        def __init__(self, value):
            self.value = value

        def serialize(self, value):
            return value

    class TestSchema(Schema):
        field1 = TestField(value="value1")
        field2 = TestField(value="value2")

    schema_instance = TestSchema(field1="value1", field2="value2")

    assert schema_instance["field1"] == "value1"
    assert schema_instance["field2"] == "value2"

    try:
        schema_instance["field3"]
    except KeyError as e:
        assert str(e) == "'field3'"
```

# Generated at 2024-06-04 20:10:34.247117
```python
    class TestField(Field):
        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self._creation_counter = 0

        def validate(self, value, *, strict=False):
            return value

        def serialize(self, value):
            return value

    class TestSchema(Schema):
        field1 = TestField()
        field2 = TestField()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]
```

# Generated at 2024-06-04 20:10:36.530943
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3
```

# Generated at 2024-06-04 20:10:40.014471
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field(default=42)

    # Test initialization with positional argument (dictionary)
    schema = TestSchema({"field1": "value1"})
    assert schema.field1 == "value1"
    assert schema.field2 == 42

    # Test initialization with keyword arguments
    schema = TestSchema(field1="value1", field2="value2")
    assert schema.field1 == "value1"
    assert schema.field2 == "value2"

    # Test initialization with missing optional field
    schema = TestSchema(field1="value1")
    assert schema.field1 == "value1"
    assert schema.field2 == 42

    # Test initialization with invalid field
    try:
        TestSchema(field1="value1", invalid_field="value")
    except TypeError as e:
        assert str(e) == "'invalid_field' is an invalid keyword argument for Test

# Generated at 2024-06-04 20:10:42.926728
```python
    class TestField(Field):
        def __init__(self, value):
            self.value = value

        def serialize(self, value):
            return value

    class TestSchema(Schema):
        field1 = TestField(value="value1")
        field2 = TestField(value="value2")

    schema_instance = TestSchema(field1="value1", field2="value2")

    assert schema_instance["field1"] == "value1"
    assert schema_instance["field2"] == "value2"

    try:
        schema_instance["field3"]
    except KeyError as e:
        assert str(e) == "'field3'"
```

# Generated at 2024-06-04 20:10:48.974224
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions
```

# Generated at 2024-06-04 20:10:51.240851
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(iter(instance))
    assert keys == ["field1", "field2"]

    sparse_instance = TestSchema(field1="value1")
    sparse_keys = list(iter(sparse_instance))
    assert sparse_keys == ["field1"]
```

# Generated at 2024-06-04 20:10:55.509914
```python
    class ExampleSchema(Schema):
        field1 = Field()
        field2 = Field()

    definitions = SchemaDefinitions()
    definitions["ExampleSchema"] = ExampleSchema

    reference_field = Reference(to="ExampleSchema", definitions=definitions)

    # Test with valid data
    valid_data = {"field1": "value1", "field2": "value2"}
    validated_data = reference_field.validate(valid_data)
    assert isinstance(validated_data, ExampleSchema)
    assert validated_data.field1 == "value1"
    assert validated_data.field2 == "value2"

    # Test with invalid data
    invalid_data = {"field1": "value1"}
    try:
        reference_field.validate(invalid_data)
    except ValidationError:
        pass
    else:
        assert False, "Expected ValidationError"

    # Test with None and allow_null=False
    try:
        reference_field.validate(None)
    except ValidationError:
        pass
    else

# Generated at 2024-06-04 20:10:59.119541
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field(default=42)

    # Test initialization with positional argument (dictionary)
    schema_instance = TestSchema({"field1": "value1"})
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == 42

    # Test initialization with keyword arguments
    schema_instance = TestSchema(field1="value1", field2="value2")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test initialization with missing optional field
    schema_instance = TestSchema(field1="value1")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == 42

    # Test initialization with invalid field
    try:
        TestSchema(field1="value1", field3="value3")
    except TypeError as e:
        assert str(e) == "'

# Generated at 2024-06-04 20:11:05.096226
```python
    class TestField(Field):
        _creation_counter = 0

        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self._creation_counter = TestField._creation_counter
            TestField._creation_counter += 1

    class BaseSchema(Schema):
        base_field = TestField()

    class ChildSchema(Schema, BaseSchema):
        child_field = TestField()

    definitions = SchemaDefinitions()
    schema_class = SchemaMetaclass.__new__(SchemaMetaclass, 'TestSchema', (ChildSchema,), {}, definitions)

    assert 'base_field' in schema_class.fields
    assert 'child_field' in schema_class.fields
    assert schema_class.fields['base_field']._creation_counter < schema_class.fields['child_field']._creation_counter
    assert 'TestSchema' in definitions
    assert definitions['TestSchema'] is schema_class
```

# Generated at 2024-06-04 20:11:45.569839
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    # Test case 1: Schema with no fields set
    schema_instance = TestSchema()
    assert len(schema_instance) == 0

    # Test case 2: Schema with one field set
    schema_instance = TestSchema(field1="value1")
    assert len(schema_instance) == 1

    # Test case 3: Schema with all fields set
    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    # Test case 4: Schema with fields set to None
    schema_instance = TestSchema(field1=None, field2=None)
    assert len(schema_instance) == 2
```

# Generated at 2024-06-04 20:11:48.993703
```python
    class TestField(Field):
        def __init__(self, value):
            self.value = value

        def serialize(self, value):
            return value

    class TestSchema(Schema):
        fields = {
            "field1": TestField("value1"),
            "field2": TestField("value2"),
        }

    schema_instance = TestSchema(field1="value1", field2="value2")

    assert schema_instance["field1"] == "value1"
    assert schema_instance["field2"] == "value2"

    try:
        schema_instance["field3"]
    except KeyError as e:
        assert str(e) == "'field3'"
```

# Generated at 2024-06-04 20:11:52.215324
```python
    schema_definitions = SchemaDefinitions()
    schema = Schema()
    
    # Test with Schema class
    ref = Reference(to=schema.__class__, definitions=schema_definitions)
    assert ref.to == schema.__class__
    assert ref.definitions == schema_definitions
    assert ref.target == schema.__class__
    
    # Test with string reference
    ref = Reference(to="Schema", definitions=schema_definitions)
    assert ref.to == "Schema"
    assert ref.definitions == schema_definitions
    assert ref.target_string == "Schema"
    
    # Test with missing definitions
    try:
        ref = Reference(to="Schema")
    except AssertionError as e:
        assert str(e) == "String reference missing 'definitions'."
    
    # Test with invalid schema type
    try:
        ref = Reference(to=int, definitions=schema_definitions)
    except AssertionError as e:
        assert str(e) == "issubclass(to

# Generated at 2024-06-04 20:11:54.287631
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3
```

# Generated at 2024-06-04 20:11:57.572878
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    # Test with positional argument as dictionary
    schema_instance = TestSchema({"field1": "value1", "field2": "value2"})
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test with keyword arguments
    schema_instance = TestSchema(field1="value1", field2="value2")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test with missing fields and default values
    class TestSchemaWithDefaults(Schema):
        field1 = Field(default="default1")
        field2 = Field(default="default2")

    schema_instance = TestSchemaWithDefaults()
    assert schema_instance.field1 == "default1"
    assert schema_instance.field2 == "default2"

    # Test with invalid keyword argument


# Generated at 2024-06-04 20:11:59.462285
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema1 != "not_a_schema"
```

# Generated at 2024-06-04 20:12:02.880377
```python
    class TestField(Field):
        _creation_counter = 0

        def __init__(self, name):
            super().__init__()
            self.name = name
            self._creation_counter = TestField._creation_counter
            TestField._creation_counter += 1

    class BaseSchema(Schema):
        base_field = TestField("base_field")

    class TestSchema(Schema):
        test_field = TestField("test_field")

    definitions = SchemaDefinitions()
    TestSchemaWithDefinitions = SchemaMetaclass.__new__(
        SchemaMetaclass, "TestSchemaWithDefinitions", (BaseSchema,), {"new_field": TestField("new_field")}, definitions
    )

    assert "base_field" in TestSchemaWithDefinitions.fields
    assert "test_field" not in TestSchemaWithDefinitions.fields
    assert "new_field" in TestSchemaWithDefinitions.fields
    assert definitions["TestSchemaWithDefinitions"] == TestSchemaWithDefinitions
```

# Generated at 2024-06-04 20:12:04.853150
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    instance_sparse = TestSchema(field1="value1")
    keys_sparse = list(instance_sparse.__iter__())
    assert keys_sparse == ["field1"]
```

# Generated at 2024-06-04 20:12:08.920312
```python
    class DummyField(Field):
        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self.definitions = None

    class DummyArray(Array):
        def __init__(self, items=None, **kwargs):
            super().__init__(items=items, **kwargs)
            self.definitions = None

    class DummyObject(Object):
        def __init__(self, properties=None, **kwargs):
            super().__init__(properties=properties, **kwargs)
            self.definitions = None

    definitions = SchemaDefinitions()

    # Test with Reference field
    ref_field = Reference(to="SomeSchema")
    set_definitions(ref_field, definitions)
    assert ref_field.definitions is definitions

    # Test with Array field containing a single item
    array_field = DummyArray(items=ref_field)
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    # Test with Array field containing multiple

# Generated at 2024-06-04 20:12:10.758992
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:13:15.294569
```python
    class TestField(Field):
        _creation_counter = 0

        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self._creation_counter = TestField._creation_counter
            TestField._creation_counter += 1

    class TestSchema(metaclass=SchemaMetaclass):
        field1 = TestField()
        field2 = TestField()

    assert hasattr(TestSchema, 'fields')
    assert 'field1' in TestSchema.fields
    assert 'field2' in TestSchema.fields
    assert isinstance(TestSchema.fields['field1'], TestField)
    assert isinstance(TestSchema.fields['field2'], TestField)
    assert list(TestSchema.fields.keys()) == ['field1', 'field2']

    definitions = SchemaDefinitions()
    class TestSchemaWithDefinitions(metaclass=SchemaMetaclass, definitions=definitions):
        field1 = TestField()
        field2 = TestField()

    assert 'TestSchema

# Generated at 2024-06-04 20:13:20.123798
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:13:22.417159
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    instance_sparse = TestSchema(field1="value1")
    keys_sparse = list(instance_sparse.__iter__())
    assert keys_sparse == ["field1"]
```

# Generated at 2024-06-04 20:13:24.511896
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3
```

# Generated at 2024-06-04 20:13:26.657007
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3
```

# Generated at 2024-06-04 20:13:31.397759
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field(default=42)

    # Test initialization with positional argument (dictionary)
    schema_instance = TestSchema({"field1": "value1"})
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == 42

    # Test initialization with keyword arguments
    schema_instance = TestSchema(field1="value1", field2="value2")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == "value2"

    # Test initialization with missing optional field
    schema_instance = TestSchema(field1="value1")
    assert schema_instance.field1 == "value1"
    assert schema_instance.field2 == 42

    # Test initialization with invalid field
    try:
        TestSchema(field1="value1", field3="value3")
    except TypeError as e:
        assert str(e) == "'

# Generated at 2024-06-04 20:13:34.493784
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:13:38.041647
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:13:41.684667
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:13:45.000975
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:14:27.935149
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions
```

# Generated at 2024-06-04 20:14:29.926904
```python
    class TestSchema(Schema):
        field1 = Field(default="value1")
        field2 = Field(default="value2")

    schema_instance = TestSchema()
    assert repr(schema_instance) == "TestSchema(field1='value1', field2='value2')"

    schema_instance_sparse = TestSchema(field1="new_value1")
    assert repr(schema_instance_sparse) == "TestSchema(field1='new_value1')[sparse]"
```

# Generated at 2024-06-04 20:14:32.670452
```python
    class TestField(Field):
        def __init__(self, **kwargs):
            super().__init__(**kwargs)
            self._creation_counter = 0

        def validate(self, value, *, strict=False):
            return value

        def serialize(self, value):
            return value

    class TestSchema(Schema):
        field1 = TestField()
        field2 = TestField()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]
```

# Generated at 2024-06-04 20:14:37.379566
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions
```

# Generated at 2024-06-04 20:14:39.607034
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:14:41.404861
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3
```

# Generated at 2024-06-04 20:14:43.595989
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3
```

# Generated at 2024-06-04 20:14:46.755566
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    instance_sparse = TestSchema(field1="value1")
    keys_sparse = list(instance_sparse.__iter__())
    assert keys_sparse == ["field1"]
```

# Generated at 2024-06-04 20:14:50.040540
```python
    class TestField(Field):
        def __init__(self, value):
            self.value = value

        def serialize(self, value):
            return value

    class TestSchema(Schema):
        field1 = TestField(value="value1")
        field2 = TestField(value="value2")

    schema_instance = TestSchema(field1="value1", field2="value2")

    assert schema_instance["field1"] == "value1"
    assert schema_instance["field2"] == "value2"

    try:
        schema_instance["field3"]
    except KeyError as e:
        assert str(e) == "'field3'"
```

# Generated at 2024-06-04 20:14:52.753169
```python
    class TestSchema(Schema):
        field1 = Field(default="value1")
        field2 = Field(default="value2")

    schema_instance = TestSchema(field1="test1")
    assert repr(schema_instance) == "TestSchema(field1='test1', field2='value2') [sparse]"

    schema_instance = TestSchema(field1="test1", field2="test2")
    assert repr(schema_instance) == "TestSchema(field1='test1', field2='test2')"

    schema_instance = TestSchema()
    assert repr(schema_instance) == "TestSchema(field1='value1', field2='value2')"
```

# Generated at 2024-06-04 20:15:33.951576
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:15:37.702259
```python
    class TestField(Field):
        _creation_counter = 0

        def __init__(self, name):
            super().__init__()
            self.name = name
            self._creation_counter = TestField._creation_counter
            TestField._creation_counter += 1

    class BaseSchema(Schema):
        base_field = TestField("base_field")

    class TestSchema(Schema):
        field1 = TestField("field1")
        field2 = TestField("field2")

    definitions = SchemaDefinitions()
    TestSchemaWithMeta = SchemaMetaclass(
        "TestSchemaWithMeta", (BaseSchema, TestSchema), {}, definitions
    )

    assert "field1" in TestSchemaWithMeta.fields
    assert "field2" in TestSchemaWithMeta.fields
    assert "base_field" in TestSchemaWithMeta.fields
    assert definitions["TestSchemaWithMeta"] == TestSchemaWithMeta
```

# Generated at 2024-06-04 20:15:40.809422
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema1 = TestSchema(field1="value1", field2="value2")
    schema2 = TestSchema(field1="value1", field2="value2")
    schema3 = TestSchema(field1="value1", field2="different_value")

    assert schema1 == schema2
    assert schema1 != schema3
    assert schema2 != schema3

    class AnotherSchema(Schema):
        field1 = Field()
        field2 = Field()

    another_schema = AnotherSchema(field1="value1", field2="value2")
    assert schema1 != another_schema
```

# Generated at 2024-06-04 20:15:45.651748
```python
    definitions = SchemaDefinitions()
    field = Reference(to="SomeSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="SomeSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="SomeSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="SomeSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="SomeSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:15:48.743315
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    schema_instance = TestSchema(field1="value1", field2="value2")
    assert len(schema_instance) == 2

    schema_instance_sparse = TestSchema(field1="value1")
    assert len(schema_instance_sparse) == 1

    schema_instance_empty = TestSchema()
    assert len(schema_instance_empty) == 0
```

# Generated at 2024-06-04 20:15:51.004064
```python
    definitions = SchemaDefinitions()
    field1 = Reference(to="Schema1")
    field2 = Array(items=Reference(to="Schema2"))
    field3 = Object(properties={"field": Reference(to="Schema3")})

    set_definitions(field1, definitions)
    set_definitions(field2, definitions)
    set_definitions(field3, definitions)

    assert field1.definitions is definitions
    assert field2.items.definitions is definitions
    assert field3.properties["field"].definitions is definitions
```

# Generated at 2024-06-04 20:15:54.370421
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object

# Generated at 2024-06-04 20:15:57.184882
```python
    class TestField(Field):
        def __init__(self, **kwargs):
            super().__init__(**kwargs)

        def validate(self, value, *, strict=False):
            return value

        def serialize(self, value):
            return value

    class TestSchema(Schema):
        field1 = TestField()
        field2 = TestField()

    schema_instance = TestSchema(field1="value1", field2="value2")

    assert schema_instance["field1"] == "value1"
    assert schema_instance["field2"] == "value2"

    try:
        schema_instance["field3"]
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent field"
```

# Generated at 2024-06-04 20:15:59.680732
```python
    class TestSchema(Schema):
        field1 = Field()
        field2 = Field()

    instance = TestSchema(field1="value1", field2="value2")
    keys = list(instance.__iter__())
    assert keys == ["field1", "field2"]

    sparse_instance = TestSchema(field1="value1")
    sparse_keys = list(sparse_instance.__iter__())
    assert sparse_keys == ["field1"]
```

# Generated at 2024-06-04 20:16:03.350214
```python
    definitions = SchemaDefinitions()
    field = Reference(to="TestSchema")
    set_definitions(field, definitions)
    assert field.definitions is definitions

    array_field = Array(items=Reference(to="TestSchema"))
    set_definitions(array_field, definitions)
    assert array_field.items.definitions is definitions

    object_field = Object(properties={"child": Reference(to="TestSchema")})
    set_definitions(object_field, definitions)
    assert object_field.properties["child"].definitions is definitions

    nested_array_field = Array(items=[Reference(to="TestSchema"), Reference(to="AnotherSchema")])
    set_definitions(nested_array_field, definitions)
    assert nested_array_field.items[0].definitions is definitions
    assert nested_array_field.items[1].definitions is definitions

    nested_object_field = Object(properties={"child": Object(properties={"grandchild": Reference(to="TestSchema")})})
    set_definitions(nested_object_field, definitions)
    assert nested_object