# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        dict_0 = {}
        bool_0 = False
        var_0 = module_0.unique(dict_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "nh'kb\r=+l$I(j~Cp\x0c:"
        bytes_0 = b'a\xd8\xc3\xd0\x9bg\x15'
        str_1 = ')f{Dfdt/giR@EKv&e`o7'
        var_0 = module_0.difference(str_0, bytes_0, str_1)
        float_0 = -1387.81
        bool_0 = None
        var_1 = module_0.inversepower(float_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x81\x0c\x9c\x9d\xa4\x88N\x7f\xde'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.max(bytes_0, dict_0)
        bool_0 = True
        bytes_1 = b'\x8e~\xaa\x7f'
        int_0 = 199
        var_1 = module_0.symmetric_difference(bool_0, bytes_1, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'w\n'
        str_1 = 'update_cache'
        float_0 = -645.366801
        var_0 = module_0.union(str_0, str_1, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -3215
        var_0 = module_0.logarithm(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        var_0 = module_0.logarithm(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        str_0 = 'PjHz)wQ CwM7)}8=G'
        str_1 = 'Xx#7&mWK\nD-#m5gPKY<'
        list_0 = [str_0, str_1]
        tuple_0 = (str_0, str_1, list_0)
        var_0 = module_0.power(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\x0c'
        var_0 = module_0.inversepower(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = None
        list_0 = [var_0]
        dict_0 = None
        var_1 = module_0.inversepower(list_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'n1f1\tO/)O;GDmj}#'
        float_0 = None
        bool_0 = True
        var_0 = module_0.human_readable(str_0, float_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Ts'
        str_1 = 'Z$!-]q;aLUXAz+'
        var_0 = module_0.human_readable(str_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '$R\n+k%}41g\t%AsV[\x0ch'
        var_0 = module_0.human_to_bytes(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = None
        float_0 = -1408.015
        var_0 = module_0.rekey_on_member(float_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '~q'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.rekey_on_member(dict_0, filter_module_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "p'CF\n]c0x3d"
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.symmetric_difference(str_0, list_0, list_0)
        float_0 = None
        bytes_0 = b'\xa4\xe1\x1e\x91^\x9c{\r\t\xea\x17=C\xb3\x1d\x7ff\xb4p3'
        var_1 = module_0.rekey_on_member(str_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 1061.43
        int_0 = None
        tuple_0 = ()
        int_1 = 3911
        bool_0 = False
        dict_0 = {tuple_0: int_1, int_0: bool_0}
        var_0 = module_0.difference(float_0, tuple_0, dict_0)
        filter_module_0 = module_0.FilterModule()
        dict_1 = {}
        var_1 = filter_module_0.filters()
        var_2 = module_0.inversepower(dict_1)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 1061.43
        int_0 = None
        tuple_0 = ()
        int_1 = 3904
        bool_0 = False
        tuple_1 = (int_0, tuple_0, int_1, bool_0)
        dict_0 = {tuple_0: int_1, int_0: bool_0}
        var_0 = module_0.difference(float_0, tuple_1, dict_0)
        filter_module_0 = module_0.FilterModule()
        dict_1 = {}
        var_1 = filter_module_0.filters()
        var_2 = module_0.inversepower(dict_1)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'{\xce\x08\xc6'
        int_0 = None
        set_0 = set()
        var_0 = module_0.symmetric_difference(int_0, bytes_0, set_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\x1d'
        list_0 = None
        bool_0 = True
        list_1 = [bool_0, list_0]
        var_0 = module_0.union(bytes_0, list_0, list_1)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = []
        bytes_0 = b'\x99<\x05'
        var_0 = module_0.rekey_on_member(list_0, bytes_0)
        float_0 = -3810.697
        tuple_0 = (float_0,)
        var_1 = module_0.inversepower(tuple_0)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = None
        filter_module_0 = None
        str_0 = '| 5qS'
        bytes_0 = b'ZlzF\xeblt\x9e\xac'
        dict_0 = {str_0: bytes_0}
        str_1 = 'fH*5'
        str_2 = 'a7;|sZ>'
        tuple_0 = ()
        var_0 = module_0.intersect(str_2, str_1, tuple_0)
        tuple_1 = (filter_module_0, dict_0, str_1)
        bool_0 = True
        var_1 = module_0.logarithm(bool_0)
        str_3 = "T\\]\rCU}uu'<"
        bool_1 = False
        var_2 = module_0.unique(list_0, tuple_1, str_3, bool_1)
        str_4 = '\n@.S:>T'
        bool_2 = None
        var_3 = module_0.max(str_4, bool_2)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = None
        float_0 = -1408.015
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_1 = 'OI|taa0>,PXo?>j'
        filter_module_1 = None
        set_0 = {filter_module_1, float_0, str_0}
        var_1 = module_0.rekey_on_member(str_1, set_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = False
        float_0 = -2625.81
        var_0 = module_0.power(bool_0, float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        list_0 = None
        filter_module_0 = None
        str_0 = '| 8p'
        bytes_0 = b'ZlzF\xeblt\x9e\xac'
        dict_0 = {str_0: bytes_0}
        tuple_0 = (filter_module_0, dict_0, str_0)
        str_1 = "T\\]\rCU}uu'<"
        bool_0 = False
        var_0 = module_0.unique(list_0, tuple_0, str_1, bool_0)
        var_1 = module_0.human_to_bytes(bool_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '&&>M>NsH#d'
        filter_module_0 = module_0.FilterModule()
        set_0 = None
        list_0 = [filter_module_0, set_0]
        var_0 = module_0.unique(str_0, filter_module_0, set_0, list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        bytes_0 = b'm\x12 Oi\xb0\xac/;\x84Y?\xf6\xdd\x91\x99'
        set_0 = set()
        list_0 = [set_0, set_0]
        list_1 = [set_0, list_0, list_0, set_0]
        var_0 = module_0.union(set_0, list_0, list_1)
        bool_0 = True
        var_1 = module_0.inversepower(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_26():
    try:
        set_0 = None
        dict_0 = {set_0: set_0}
        str_0 = '%"o(sPNf| '
        dict_1 = {str_0: set_0, str_0: dict_0}
        var_0 = module_0.rekey_on_member(dict_1, str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '\\lnbO\\%Ja'
        int_0 = -19
        var_0 = {str_0: int_0, str_0: str_0}
        var_1 = [var_0, var_0, str_0]
        var_2 = module_0.rekey_on_member(var_1, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'm\x12 Oi\xb0\xac/;\x84Y?\xf6\xdd\x91\x99'
        str_0 = 'g0CaZP(7^u.!K9D|&>LU'
        tuple_0 = (str_0, str_0)
        set_0 = None
        dict_0 = {set_0: set_0}
        var_0 = module_0.min(dict_0, tuple_0)
        dict_1 = {str_0: var_0, str_0: tuple_0, str_0: bytes_0, str_0: dict_0}
        var_1 = module_0.rekey_on_member(dict_1, dict_1)
    except BaseException:
        pass

def test_case_29():
    try:
        list_0 = []
        bool_0 = False
        bool_1 = False
        var_0 = module_0.unique(list_0, bool_0, bool_1)
    except BaseException:
        pass

def test_case_30():
    try:
        filter_module_0 = module_0.FilterModule()
        float_0 = 0.0
        var_0 = module_0.inversepower(filter_module_0, float_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '8-R@~r/w/t>\rBm7x\x0bp]'
        int_0 = 1158
        var_0 = module_0.human_to_bytes(str_0, int_0)
    except BaseException:
        pass