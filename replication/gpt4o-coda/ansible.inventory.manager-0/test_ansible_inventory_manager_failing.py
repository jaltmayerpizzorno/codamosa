# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    try:
        str_0 = "'Q+VjqwXXCa7pv%]"
        float_0 = 678.145577
        tuple_0 = (str_0, float_0)
        inventory_manager_0 = module_0.InventoryManager(tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = "d'"
        list_0 = [str_0, str_0, str_0]
        dict_0 = {str_0: list_0}
        inventory_manager_0 = module_0.InventoryManager(list_0, dict_0)
        var_0 = inventory_manager_0.parse_sources(bool_0)
        float_0 = 512.0
        var_1 = inventory_manager_0.add_host(float_0, inventory_manager_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = None
        dict_0 = {int_0: int_0, int_0: int_0}
        str_0 = 'NTZ9w@(*@\x0ce*pewu?5x'
        set_0 = {str_0, str_0}
        inventory_manager_0 = module_0.InventoryManager(set_0)
        var_0 = inventory_manager_0.add_group(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b':m\x01i\x99\x97\xb2\xd4 s'
        inventory_manager_0 = module_0.InventoryManager(bytes_0)
        var_0 = inventory_manager_0.get_groups_dict()
        inventory_manager_1 = module_0.InventoryManager()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2460
        inventory_manager_0 = module_0.InventoryManager(int_0)
        var_0 = inventory_manager_0.restrict_to_hosts(inventory_manager_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        str_0 = '54>w^Q\x0c$BgW'
        int_0 = -111
        float_0 = -4001.3902300168315
        tuple_0 = (str_0, int_0, int_0, float_0)
        int_1 = -1095
        inventory_manager_0 = module_0.InventoryManager(tuple_0, int_1, dict_0)
        var_0 = inventory_manager_0.get_groups_dict()
        var_1 = module_0.split_host_pattern(dict_0)
        str_1 = "'fI=Xb_/:k[~/nBV9"
        inventory_manager_1 = module_0.InventoryManager(dict_0, str_1)
        var_2 = inventory_manager_1.restrict_to_hosts(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b"\xc1uh\xe0'\xcb"
        int_0 = -1442
        float_0 = 1000.0
        set_0 = {float_0, bytes_0, bytes_0}
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, int_0: bytes_0, int_0: set_0}
        list_0 = [int_0]
        inventory_manager_0 = module_0.InventoryManager(list_0)
        var_0 = inventory_manager_0.list_hosts()
        bool_0 = False
        var_1 = inventory_manager_0.list_hosts(bool_0)
        str_0 = 'dzhg`&=%W"Oj;>'
        str_1 = 'A'
        tuple_0 = (str_0, str_1)
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0, tuple_0)
        bytes_1 = b',\xe7\xa2\xcamz'
        inventory_manager_2 = module_0.InventoryManager(bytes_1)
        float_1 = -524.67
        var_2 = inventory_manager_2.get_hosts(bytes_1, dict_0, dict_0, float_1)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = None
        set_1 = {set_0}
        var_0 = module_0.order_patterns(set_1)
        float_0 = 0.0
        dict_0 = {float_0: float_0, float_0: float_0}
        inventory_manager_0 = module_0.InventoryManager(float_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        str_0 = "d'"
        list_0 = [str_0, str_0, str_0]
        dict_0 = {str_0: list_0}
        inventory_manager_0 = module_0.InventoryManager(list_0, dict_0)
        var_0 = inventory_manager_0.parse_sources(bool_0)
        str_1 = '/pynguin/zd/|#=La[>&+A'
        var_1 = module_0.order_patterns(str_1)
        float_0 = 512.0
        var_2 = inventory_manager_0.add_host(float_0, inventory_manager_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 118.21381124542663
        inventory_manager_0 = module_0.InventoryManager(float_0)
        var_0 = inventory_manager_0.get_groups_dict()
        str_0 = 'A+_L\r!l?L)S5'
        var_1 = inventory_manager_0.remove_restriction()
        var_2 = inventory_manager_0.subset(str_0)
        var_3 = inventory_manager_0.reconcile_inventory()
        var_4 = inventory_manager_0.get_hosts(float_0)
        set_0 = set()
        inventory_manager_1 = module_0.InventoryManager(str_0, set_0)
        var_5 = inventory_manager_1.subset(str_0)
        var_6 = inventory_manager_0.remove_restriction()
        var_7 = inventory_manager_1.list_hosts()
        tuple_0 = ()
        var_8 = inventory_manager_1.list_groups()
        var_9 = inventory_manager_1.parse_sources(set_0)
        var_10 = inventory_manager_0.reconcile_inventory()
        str_1 = "],R$;ZPT'\r;"
        var_11 = module_0.split_host_pattern(str_1)
        var_12 = inventory_manager_0.get_hosts()
        list_0 = [str_1, var_11, var_11]
        inventory_manager_2 = module_0.InventoryManager(tuple_0)
        var_13 = inventory_manager_1.parse_source(str_1)
        inventory_manager_3 = module_0.InventoryManager(tuple_0, list_0, inventory_manager_2)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'A+_L\rJ!l?L\t)S5'
        inventory_manager_0 = module_0.InventoryManager(str_0, str_0)
        var_0 = inventory_manager_0.remove_restriction()
        var_1 = inventory_manager_0.subset(str_0)
        var_2 = inventory_manager_0.refresh_inventory()
        bytes_0 = b'\xb1\xff=Sr8\xc2\xd6\xca\xe7\xd1F\xa3\xaa\x94f\x08'
        var_3 = inventory_manager_0.reconcile_inventory()
        dict_0 = {bytes_0: var_0}
        var_4 = inventory_manager_0.parse_source(dict_0)
        var_5 = inventory_manager_0.clear_caches()
        str_1 = 'B~7};(n$prR.1'
        set_0 = set()
        list_0 = None
        var_6 = inventory_manager_0.parse_sources(list_0)
        inventory_manager_1 = module_0.InventoryManager(str_1, set_0)
        var_7 = inventory_manager_1.get_groups_dict()
        tuple_0 = (str_0,)
        var_8 = inventory_manager_0.list_hosts()
        tuple_1 = ()
        var_9 = inventory_manager_1.list_groups()
        var_10 = inventory_manager_0.reconcile_inventory()
        str_2 = "],R$;ZPT'\r;"
        var_11 = module_0.split_host_pattern(str_2)
        var_12 = inventory_manager_0.get_hosts()
        int_0 = -1108
        var_13 = inventory_manager_1.restrict_to_hosts(list_0)
        dict_1 = {int_0: inventory_manager_1, bytes_0: inventory_manager_0}
        var_14 = module_0.split_host_pattern(dict_1)
        list_1 = [var_5, var_2, var_2]
        inventory_manager_2 = module_0.InventoryManager(tuple_1)
        inventory_manager_3 = module_0.InventoryManager(tuple_1, list_1, inventory_manager_2)
        var_15 = inventory_manager_3.parse_sources(tuple_0)
        var_16 = inventory_manager_1.add_group(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'btYuv[~d0Sd}cm'
        inventory_manager_0 = module_0.InventoryManager(str_0, str_0)
        var_0 = inventory_manager_0.remove_restriction()
        bytes_0 = b'\xd8w\x12\xda'
        var_1 = inventory_manager_0.get_host(bytes_0)
        var_2 = inventory_manager_0.subset(str_0)
        var_3 = inventory_manager_0.refresh_inventory()
        bytes_1 = b'\xb1\xff=Sr8\xc2\xd6\xca\xe7\xd1F\xa3\xaa\x94f\x08'
        var_4 = inventory_manager_0.reconcile_inventory()
        var_5 = inventory_manager_0.clear_caches()
        str_1 = 'B~7};(n$prR.1'
        set_0 = set()
        inventory_manager_1 = module_0.InventoryManager(str_1, set_0)
        var_6 = inventory_manager_1.get_groups_dict()
        var_7 = inventory_manager_0.list_hosts()
        var_8 = inventory_manager_1.restrict_to_hosts(bytes_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'A+_L\rJ!l?L\t)S5'
        inventory_manager_0 = module_0.InventoryManager(str_0, str_0)
        var_0 = inventory_manager_0.remove_restriction()
        var_1 = inventory_manager_0.subset(str_0)
        var_2 = inventory_manager_0.refresh_inventory()
        bytes_0 = b'\xb1\xff=Sr8\xc2\xd6\xca\xe7\xd1F\xa3\xaa\x94f\x08'
        dict_0 = {bytes_0: var_0}
        var_3 = inventory_manager_0.parse_source(dict_0)
        var_4 = inventory_manager_0.clear_caches()
        float_0 = -779.4
        var_5 = inventory_manager_0.get_hosts(float_0)
        str_1 = 'x|E^Dez[\n-g|A+S'
        int_0 = -603
        bool_0 = False
        var_6 = inventory_manager_0.get_hosts(str_1, int_0, bool_0)
        set_0 = set()
        inventory_manager_1 = module_0.InventoryManager(str_0, set_0)
        var_7 = inventory_manager_0.list_hosts()
        bytes_1 = b'\xc3n\x95@\xb2\xa6'
        var_8 = inventory_manager_0.parse_source(bytes_1)
        tuple_0 = ()
        var_9 = inventory_manager_1.list_groups()
        str_2 = '2-HU*whG=5tO*D4p'
        inventory_manager_2 = module_0.InventoryManager(set_0, str_1)
        var_10 = inventory_manager_2.parse_sources(str_2)
        var_11 = inventory_manager_0.reconcile_inventory()
        str_3 = "],R$;ZPT'\r;"
        var_12 = module_0.split_host_pattern(str_3)
        var_13 = inventory_manager_0.get_hosts()
        list_0 = [var_4, var_2, var_2]
        inventory_manager_3 = module_0.InventoryManager(tuple_0)
        inventory_manager_4 = module_0.InventoryManager(bytes_1)
        var_14 = inventory_manager_4.list_hosts(inventory_manager_3)
        var_15 = inventory_manager_0.restrict_to_hosts(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        bool_0 = True
        set_1 = {bool_0}
        list_0 = []
        bytes_0 = b'\xef\xa2\xa5'
        int_0 = -44
        float_0 = 482.85
        str_0 = ''
        str_1 = 'V\rl'
        tuple_0 = (float_0, str_0, str_1, int_0)
        tuple_1 = (bool_0, bytes_0, int_0, tuple_0)
        inventory_manager_0 = module_0.InventoryManager(tuple_1)
        var_0 = inventory_manager_0.get_hosts(list_0)
        tuple_2 = (bool_0, set_1)
        inventory_manager_1 = module_0.InventoryManager(tuple_2)
        var_1 = inventory_manager_1.list_hosts(set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 118.214
        inventory_manager_0 = module_0.InventoryManager(float_0)
        str_0 = '@4'
        inventory_manager_1 = module_0.InventoryManager(str_0, str_0)
        var_0 = inventory_manager_1.subset(str_0)
    except BaseException:
        pass