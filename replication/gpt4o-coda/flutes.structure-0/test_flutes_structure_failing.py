# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        dict_0 = None
        list_0 = module_0.reverse_map(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = None
        var_0 = module_0.no_map_instance(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1152
        tuple_0 = (int_0,)
        var_0 = module_0.map_structure(int_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2891
        set_0 = {int_0}
        var_0 = module_0.map_structure(int_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -1250.57336
        var_0 = module_0.map_structure(float_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '@\n['
        var_0 = module_0.map_structure_zip(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        var_0 = module_0.map_structure(bool_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'n6C\tpyP^'
        set_0 = {str_0, str_0}
        list_0 = None
        var_0 = None
        list_1 = [set_0, list_0, var_0]
        var_1 = module_0.map_structure_zip(str_0, list_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "(Z0ftOP0'{R5kj-ZRK%"
        list_0 = []
        complex_0 = None
        set_0 = set()
        var_0 = module_0.map_structure(complex_0, set_0)
        var_1 = module_0.no_map_instance(list_0)
        var_2 = module_0.no_map_instance(var_1)
        tuple_0 = ()
        bytes_0 = None
        var_3 = module_0.no_map_instance(tuple_0)
        int_0 = -485
        int_1 = 999
        dict_0 = {int_0: int_1}
        var_4 = module_0.no_map_instance(tuple_0)
        list_1 = module_0.reverse_map(dict_0)
        module_0.register_no_map_class(bytes_0)
        var_5 = module_0.map_structure(str_0, tuple_0)
        int_2 = -3677
        module_0.register_no_map_class(int_2)
        list_2 = [dict_0, list_1, tuple_0, list_1]
        var_6 = module_0.map_structure_zip(bytes_0, list_2)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = ()
        bytes_0 = None
        int_0 = 32771
        dict_0 = {int_0: int_0}
        list_0 = module_0.reverse_map(dict_0)
        module_0.register_no_map_class(bytes_0)
        list_1 = [dict_0, list_0, tuple_0, list_0]
        var_0 = module_0.map_structure_zip(bytes_0, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'V>=sR$u\x0b"Dy&}i\x0bOi+NY'
        tuple_0 = ()
        bytes_0 = None
        int_0 = -485
        dict_0 = {int_0: int_0}
        list_0 = module_0.reverse_map(dict_0)
        module_0.register_no_map_class(bytes_0)
        var_0 = module_0.map_structure(str_0, tuple_0)
        list_1 = [list_0, list_0]
        var_1 = module_0.map_structure_zip(bytes_0, list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "(Z0ftOP0'{R5kj-ZRK%"
        list_0 = []
        var_0 = module_0.no_map_instance(list_0)
        bytes_0 = b'\xeao\xbf@e\xc4]\x07\xab\xda\x1b\xe4\xb2\x03\xfa'
        var_1 = module_0.no_map_instance(var_0)
        tuple_0 = ()
        var_2 = module_0.no_map_instance(tuple_0)
        int_0 = -485
        int_1 = 1058
        dict_0 = {int_0: int_1}
        list_1 = module_0.reverse_map(dict_0)
        module_0.register_no_map_class(bytes_0)
        var_3 = module_0.map_structure(str_0, tuple_0)
        list_2 = [dict_0, list_1, tuple_0, list_1]
        var_4 = module_0.map_structure_zip(bytes_0, list_2)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        str_0 = '*]\x0cp;fYR<'
        str_1 = '|:&G^;`\\vb`LcAEbolC'
        list_0 = [str_0, str_1, dict_0]
        set_0 = None
        var_0 = None
        str_2 = None
        var_1 = module_0.map_structure(str_2, dict_0)
        list_1 = [list_0, set_0, var_0]
        var_2 = module_0.map_structure_zip(dict_0, list_1)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        list_0 = [bool_0]
        tuple_0 = (list_0,)
        list_1 = [tuple_0]
        var_0 = module_0.map_structure_zip(list_1, list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xeao\xbf@e\xc4]\x07\xab\xda\x1b\xe4\xb2\x03\xfa'
        var_0 = module_0.no_map_instance(bytes_0)
        tuple_0 = ()
        var_1 = module_0.no_map_instance(tuple_0)
        str_0 = 'c4XhS.;_gcN8w3w7'
        list_0 = [tuple_0, var_0]
        var_2 = module_0.map_structure(str_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        tuple_0 = None
        set_0 = {tuple_0, tuple_0}
        str_0 = 'V>=sR$u\x0b"Dy&}i\x0bOi+NY'
        tuple_1 = ()
        bytes_0 = None
        int_0 = -485
        dict_0 = {int_0: int_0}
        list_0 = module_0.reverse_map(dict_0)
        module_0.register_no_map_class(bytes_0)
        var_0 = module_0.map_structure(str_0, tuple_1)
        var_1 = module_0.no_map_instance(set_0)
        int_1 = -3661
        module_0.register_no_map_class(int_1)
        list_1 = [var_1, dict_0, list_0, tuple_0, list_0, list_0]
        var_2 = module_0.map_structure_zip(bytes_0, list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'V>=sR$u\x0b"Dy&}i\x0bOi+NY'
        bytes_0 = b'\xeao\xbf@e\xc4]\x07\xab\xda\x1b\xe4\xb2\x03\xfa'
        var_0 = module_0.no_map_instance(bytes_0)
        tuple_0 = ()
        bytes_1 = None
        var_1 = module_0.no_map_instance(tuple_0)
        int_0 = -1236
        int_1 = 999
        dict_0 = {int_0: int_1}
        list_0 = module_0.reverse_map(dict_0)
        module_0.register_no_map_class(bytes_1)
        var_2 = module_0.map_structure(str_0, tuple_0)
        list_1 = [dict_0]
        var_3 = module_0.map_structure_zip(bytes_1, list_1)
    except BaseException:
        pass