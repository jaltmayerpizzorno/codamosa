

# Generated at 2024-06-01 18:40:47.723738
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:40:51.402090
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:40:54.676267
def test_parse():
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
   

# Generated at 2024-06-01 18:40:57.492325
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:41:00.865034
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = [meta for meta in parsed.meta if isinstance(meta, DocstringParam)]
    assert len(param_meta) == 2
    assert param_meta[0].arg_name == "name"
    assert param_meta[0].type_name == "str"
    assert param_meta[0].description == "The name of the person."
    
    assert param_meta[1].arg_name == "age"
    assert param_meta[1].type_name == "int"
    assert

# Generated at 2024-06-01 18:41:05.635736
def test_parse():
    docstring = """
    Short description.

    Long description spanning
    multiple lines.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description spanning\nmultiple lines."
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "

# Generated at 2024-06-01 18:41:10.759775
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:41:13.896654
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The

# Generated at 2024-06-01 18:41:18.510720
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:41:21.370582
def test_parse():
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "

# Generated at 2024-06-01 18:41:48.564848
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The

# Generated at 2024-06-01 18:41:53.732118
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:41:57.105082
def test_parse():
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
   

# Generated at 2024-06-01 18:42:02.959655
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:42:06.517133
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:42:09.542684
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The

# Generated at 2024-06-01 18:42:12.525317
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:42:15.968784
def test_parse():
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = [meta for meta in parsed.meta if isinstance(meta, DocstringParam)]
    assert len(param_meta) == 2
    assert param_meta[0].arg_name == "name"
    assert param_meta[0].type_name == "str"
    assert param_meta[0].description == "The name of the person."
    
    assert param_meta[1].arg_name == "age"
    assert param_meta[1].type_name == "int"
   

# Generated at 2024-06-01 18:42:19.643648
def test_parse():
    docstring = """
    Short description.

    Long description spanning
    multiple lines.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description spanning\nmultiple lines."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "

# Generated at 2024-06-01 18:42:22.796136
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert

# Generated at 2024-06-01 18:43:11.301853
def test_parse():
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = [meta for meta in parsed.meta if isinstance(meta, DocstringParam)]
    assert len(param_meta) == 2
    assert param_meta[0].arg_name == "name"
    assert param_meta[0].type_name == "str"
    assert param_meta[0].description == "The name of the person."
    
    assert param_meta[1].arg_name == "age"
    assert param_meta[1].type_name == "int"
   

# Generated at 2024-06-01 18:43:14.444603
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:43:17.724155
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:43:20.717197
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:43:23.653847
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:43:27.025481
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:43:29.937045
def test_parse():
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = [meta for meta in parsed.meta if isinstance(meta, DocstringParam)]
    assert len(param_meta) == 2
    assert param_meta[0].arg_name == "name"
    assert param_meta[0].type_name == "str"
    assert param_meta[0].description == "The name of the person."
    
    assert param_meta[1].arg_name == "age"
    assert param_meta[1].type_name == "int"
   

# Generated at 2024-06-01 18:43:33.554024
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = [meta for meta in parsed.meta if isinstance(meta, DocstringParam)]
    assert len(param_meta) == 2
    assert param_meta[0].arg_name == "name"
    assert param_meta[0].type_name == "str"
    assert param_meta[0].description == "The name of the person."
    assert param_meta[1].arg_name == "age"
    assert param_meta[1].type_name == "int"
    assert param

# Generated at 2024-06-01 18:43:38.113315
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = [meta for meta in parsed.meta if isinstance(meta, DocstringParam)]
    assert len(param_meta) == 2
    assert param_meta[0].arg_name == "name"
    assert param_meta[0].type_name == "str"
    assert param_meta[0].description == "The name of the person."
    assert param_meta[1].arg_name == "age"
    assert param_meta[1].type_name == "int"
    assert param

# Generated at 2024-06-01 18:43:41.528107
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:45:16.770631
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The

# Generated at 2024-06-01 18:45:19.524590
def test_parse():
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
   

# Generated at 2024-06-01 18:45:22.613054
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:45:25.740009
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:45:29.406558
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The

# Generated at 2024-06-01 18:45:32.459099
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The

# Generated at 2024-06-01 18:45:35.506048
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The

# Generated at 2024-06-01 18:45:38.700298
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:45:41.368665
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:45:44.568104
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:48:50.189039
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 4
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:48:53.349174
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:48:56.616551
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "int"
    assert param_meta.description == "The

# Generated at 2024-06-01 18:49:00.085975
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    expected = Docstring(
        short_description="Short description.",
        long_description="Long description.",
        blank_after_short_description=True,
        blank_after_long_description=True,
        meta=[
            DocstringParam(
                args=["param", "str", "name"],
                description="The name of the person.",
                arg_name="name",
                type_name="str",
                is_optional=False,
                default=None,
            ),
            DocstringParam(
                args=["param", "int", "age"],
                description="The age of the person.",
                arg_name="age",
                type_name="int",
                is_optional=False,
                default=None,
            ),
            DocstringReturns(


# Generated at 2024-06-01 18:49:02.956082
def test_parse():
    docstring = """
    Short description.

    Long description spanning
    multiple lines.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description spanning\nmultiple lines."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "

# Generated at 2024-06-01 18:49:06.426254
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The

# Generated at 2024-06-01 18:49:09.991890
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert parsed.blank_after_short_description
    assert parsed.blank_after_long_description
    
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert

# Generated at 2024-06-01 18:49:12.970739
def test_parse():
    docstring = """
    Short description.

    Long description spanning
    multiple lines.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description spanning\nmultiple lines."
    assert len(parsed.meta) == 3
    
    param_meta = parsed.meta[0]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "name"
    assert param_meta.type_name == "str"
    assert param_meta.description == "The name of the person."
    
    param_meta = parsed.meta[1]
    assert isinstance(param_meta, DocstringParam)
    assert param_meta.arg_name == "age"
    assert param_meta.type_name == "

# Generated at 2024-06-01 18:49:16.245255
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_meta = [meta for meta in parsed.meta if isinstance(meta, DocstringParam)]
    assert len(param_meta) == 2
    assert param_meta[0].arg_name == "name"
    assert param_meta[0].type_name == "str"
    assert param_meta[0].description == "The name of the person."
    assert param_meta[1].arg_name == "age"
    assert param_meta[1].type_name == "int"
    assert param

# Generated at 2024-06-01 18:49:19.387900
```python
    docstring = """
    Short description.

    Long description.

    :param str name: The name of the person.
    :param int age: The age of the person.
    :returns: A greeting string.
    :raises ValueError: If the age is negative.
    """
    parsed = parse(docstring)
    
    assert parsed.short_description == "Short description."
    assert parsed.long_description == "Long description."
    assert len(parsed.meta) == 3
    
    param_name = parsed.meta[0]
    assert isinstance(param_name, DocstringParam)
    assert param_name.arg_name == "name"
    assert param_name.type_name == "str"
    assert param_name.description == "The name of the person."
    
    param_age = parsed.meta[1]
    assert isinstance(param_age, DocstringParam)
    assert param_age.arg_name == "age"
    assert param_age.type_name == "int"
    assert param_age.description == "The