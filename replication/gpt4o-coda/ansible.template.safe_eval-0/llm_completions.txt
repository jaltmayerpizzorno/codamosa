

# Generated at 2024-06-01 11:32:46.466670
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:32:50.285654
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:32:56.591249
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:33:00.308247
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:33:03.616276
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("1 + 2 * (3 - 4)") == -1
    assert safe_eval("1 + 2 * (3 - 

# Generated at 2024-06-01 11:33:07.007777
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:33:09.699565
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 + 'a'", include_exceptions=True)[1] is not None
    assert safe_eval("sum([1, 2, 3])", locals={"sum": sum}) == 6
    assert safe_eval("len('test')", locals={"len": len}) == 4


# Generated at 2024-06-01 11:33:14.742351
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:33:18.562468
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:33:21.580164
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:33:27.847443
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:33:34.060275
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:33:37.066221
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:33:40.509386
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:33:46.536809
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:33:49.355327
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:33:53.158092
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:33:56.592774
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:34:00.565142
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:34:04.177076
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:34:10.306067
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:34:13.297133
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:34:16.911366
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:34:20.784194
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:34:24.294769
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:34:28.144007
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1

# Generated at 2024-06-01 11:34:31.579186
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:34:35.044888
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:34:38.940879
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:34:42.412822
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:34:49.599299
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:34:55.319295
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:34:58.734980
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:35:02.525990
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:35:07.721971
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:35:12.076026
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:35:15.028946
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("1 + 2 * (

# Generated at 2024-06-01 11:35:18.565792
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:35:22.074101
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:35:25.160020
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1, 2, 3])", locals={"len": len}) == 3
    assert safe_eval("

# Generated at 2024-06-01 11:35:31.428244
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:35:36.323549
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:35:41.094159
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:35:44.405922
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:35:47.596874
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:35:50.807074
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:35:54.228768
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:35:57.584255
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid + 1", include_exceptions=True) == ("invalid + 1", Exception("invalid expression (invalid

# Generated at 2024-06-01 11:36:00.798752
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:36:04.510306
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:36:10.883708
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:36:14.350968
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1, 2, 3])", locals={"len": len}) == 3
    assert safe_eval("

# Generated at 2024-06-01 11:36:17.716271
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:36:20.876722
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:36:24.037600
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:36:27.633765
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:36:30.570310
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:36:33.481506
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("null") == None
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'key': 'value'}") == {'key': 'value'}
    assert safe_eval("1 + 'a'", include_exceptions=True)[1] is not None
    assert safe_eval("len([1, 2, 3])", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 1", locals={'a': 1}) == 2
    assert safe_eval("a + 1", locals={'a': 1}) == 2
```

# Generated at 2024-06-01 11:36:39.066611
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:36:42.038520
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:36:49.495334
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:36:52.765565
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:36:56.050182
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:36:59.852974
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:37:03.214442
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:37:06.515499
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:37:09.922547
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_var", include_exceptions=True) == ("invalid_var", Exception("invalid expression (invalid_var)"))
   

# Generated at 2024-06-01 11:37:12.926067
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:37:16.162575
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:37:19.062025
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("import os", include_exceptions=True)[1] is not None
    assert safe_eval("os.system('ls')", include_exceptions=True)[1] is not None
    assert safe_eval("len('test')", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 'a'", include_exceptions=True)[1] is

# Generated at 2024-06-01 11:37:26.033914
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:37:29.281052
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:37:32.615681
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:37:36.576095
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:37:43.249052
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:37:46.036908
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:37:49.593497
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:37:52.709919
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:37:55.904618
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("

# Generated at 2024-06-01 11:37:59.099426
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:06.456574
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:38:09.858914
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("1 + 2 * 

# Generated at 2024-06-01 11:38:13.347079
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:16.531356
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:20.058800
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:23.598810
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:38:27.116701
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:30.402426
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:34.095317
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:37.169924
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("false") == False
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("open('file.txt')", include_exceptions=True)[1] is not None
    assert safe_eval("1 + unknown_var", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 1", locals={'a': 1}) == 2
    assert safe_eval("a

# Generated at 2024-06-01 11:38:45.321115
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:48.829245
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:38:54.848901
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:38:58.442902
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1

# Generated at 2024-06-01 11:39:02.066448
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:39:05.426394
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:39:08.227958
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:39:11.939698
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:39:14.884555
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError)
    assert safe_eval("invalid_syntax(",

# Generated at 2024-06-01 11:39:19.823333
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:39:26.305551
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:39:31.234452
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:39:34.618564
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:39:37.830978
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("import os", include_exceptions=True)[1] is not None
    assert safe_eval("os.system('ls')", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 'a'", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 1", locals={'a': 1}) ==

# Generated at 2024-06-01 11:39:41.111193
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("false") == False
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("open('file.txt')", include_exceptions=True)[1] is not None
    assert safe_eval("1 + unknown_var", locals={'unknown_var': 2}) == 3
    assert safe_eval("1 + unknown_var", locals={'unknown_var': 2}, include_exceptions=True) == (3

# Generated at 2024-06-01 11:39:44.338096
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("import os", include_exceptions=True)[1] is not None
    assert safe_eval("os.system('ls')", include_exceptions=True)[1] is not None
    assert safe_eval("len('test')", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 'a'", include_exceptions=True)[1] is

# Generated at 2024-06-01 11:39:47.946515
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:39:52.641903
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:39:55.930169
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:39:59.308096
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:40:06.345846
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1, 2, 3])", locals={'len': len}) == 3
    assert safe_eval("

# Generated at 2024-06-01 11:40:09.365408
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("invalid_syntax", include_exceptions=True)[1] is not None
    assert safe_eval("1 + unknown_var", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 1", locals={'a': 1}) == 2
    assert safe_eval("a + 1", locals={'a': 1}) ==

# Generated at 2024-06-01 11:40:12.364907
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("false") == False
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("open('file.txt')", include_exceptions=True)[1] is not None
    assert safe_eval("1 + unknown_var", locals={'unknown_var': 2}) == 3
    assert safe_eval("1 + unknown_var", include_exceptions=True)[1] is not None
```

# Generated at 2024-06-01 11:40:15.994871
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:40:19.357020
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:40:22.519819
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:40:25.906087
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("import os", include_exceptions=True)[1] is not None
    assert safe_eval("os.system('ls')", include_exceptions=True)[1] is not None
    assert safe_eval("len('test')", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 'a'", include_exceptions=True)[1] is

# Generated at 2024-06-01 11:40:29.111545
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:40:32.388721
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:40:35.626328
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid + 1", include_exceptions=True) == ("invalid + 1", Exception("invalid expression (invalid

# Generated at 2024-06-01 11:40:42.903552
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError)
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1, 2, 3])", locals={"len": len}) == 3
    assert safe_eval("1 + unknown_var

# Generated at 2024-06-01 11:40:46.247225
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:40:49.985041
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:40:53.711315
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:40:57.231992
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("1 + 2 * (

# Generated at 2024-06-01 11:41:01.210700
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("1 + 2 * 

# Generated at 2024-06-01 11:41:05.039888
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1

# Generated at 2024-06-01 11:41:08.223763
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:41:11.790350
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:41:14.799822
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("not_a_var", locals={'

# Generated at 2024-06-01 11:41:22.036131
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1, 2, 3])", locals={"len": len}) == 3
    assert safe_eval("

# Generated at 2024-06-01 11:41:25.310451
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError)
    assert safe_eval("invalid + 1", include_exceptions=True) == ("invalid + 1", Exception)
    assert safe_eval("len([1, 2, 3])", locals={"len": len}) == 3
    assert safe_eval("

# Generated at 2024-06-01 11:41:28.559931
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("1 + 2 * (

# Generated at 2024-06-01 11:41:32.373037
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:41:35.571296
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", include_exceptions=True) == (True, None)
    assert safe_eval("null") == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("1 / 0", include_exceptions=True)[1] is not None
    assert safe_eval("import os", include_exceptions=True)[1] is not None
    assert safe_eval("os.system('ls')", include_exceptions=True)[1] is not None
    assert safe_eval("sum([1, 2, 3])", include_exceptions=True)[1] is not None
    assert safe_eval("1 + 'a'", include_ex

# Generated at 2024-06-01 11:41:39.056713
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:41:42.176742
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:41:51.573925
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:41:55.139735
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:41:58.951476
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("not_a_var", locals={'

# Generated at 2024-06-01 11:42:05.904891
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("invalid_syntax(", include_exceptions=True)[1] is not None
    assert safe_eval("len([1

# Generated at 2024-06-01 11:42:09.398052
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:42:12.621455
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3 / 4 - 5") == 1 + 2 * 3 / 4 - 5


# Generated at 2024-06-01 11:42:16.337607
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={'true': True}) == True
    assert safe_eval("false", locals={'false': False}) == False
    assert safe_eval("null", locals={'null': None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("not_a_var", locals={'

# Generated at 2024-06-01 11:42:19.837774
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:42:22.666079
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 * 2") == 2
    assert safe_eval("

# Generated at 2024-06-01 11:42:28.603518
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("not_a_var", locals={"

# Generated at 2024-06-01 11:42:31.640220
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 / 0", include_exceptions=True) == ("1 / 0", ZeroDivisionError('division by zero'))
    assert safe_eval("

# Generated at 2024-06-01 11:42:34.674541
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("{1, 2, 3}") == {1, 2, 3}
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert

# Generated at 2024-06-01 11:42:38.425286
```python
    assert safe_eval("1 + 1") == 2
    assert safe_eval("true", locals={"true": True}) == True
    assert safe_eval("false", locals={"false": False}) == False
    assert safe_eval("null", locals={"null": None}) == None
    assert safe_eval("[1, 2, 3]") == [1, 2, 3]
    assert safe_eval("{'a': 1, 'b': 2}") == {'a': 1, 'b': 2}
    assert safe_eval("(1, 2, 3)") == (1, 2, 3)
    assert safe_eval("1 + 2 * 3") == 7
    assert safe_eval("1 / 2") == 0.5
    assert safe_eval("1 - 2") == -1
    assert safe_eval("not_a_var", locals={"