# Automatically generated by Pynguin.
import ansible.playbook.conditional as module_0

def test_case_0():
    str_0 = "can't parse stride=%s as integer"
    conditional_0 = module_0.Conditional(str_0)

def test_case_1():
    str_0 = ';mg/g'
    conditional_0 = module_0.Conditional(str_0)
    var_0 = conditional_0.extract_defined_undefined(str_0)

def test_case_2():
    float_0 = -91.98
    conditional_0 = module_0.Conditional(float_0)
    str_0 = 'Return sort key function return value for given requirement.\n\n        This result should be based on preference that is defined as\n        "I think this requirement should be resolved first".\n        The lower the return value is, the more preferred this\n        group of arguments is.\n\n        :param resolution: Currently pinned candidate, or ``None``.\n\n        :param candidates: A list of possible candidates.\n\n        :param information: A list of requirement information.\n\n        Each ``information`` instance is a named tuple with two entries:\n\n          * ``requirement`` specifies a requirement contributing to\n            the current candidate list\n\n          * ``parent`` specifies the candidate that provides\n            (dependend on) the requirement, or `None`\n            to indicate a root requirement.\n\n        The preference could depend on a various of issues, including\n        (not necessarily in this order):\n\n          * Is this package pinned in the current resolution result?\n\n          * How relaxed is the requirement? Stricter ones should\n            probably be worked on first? (I don\'t know, actually.)\n\n          * How many possibilities are there to satisfy this\n            requirement? Those with few left should likely be worked on\n            first, I guess?\n\n          * Are there any known conflicts for this requirement?\n            We should probably work on those with the most\n            known conflicts.\n\n        A sortable value should be returned (this will be used as the\n        `key` parameter of the built-in sorting function). The smaller\n        the value is, the more preferred this requirement is (i.e. the\n        sorting function is called with ``reverse=False``).\n        '
    var_0 = conditional_0.extract_defined_undefined(str_0)