# Automatically generated by Pynguin.
import ansible.utils.jsonrpc as module_0

def test_case_0():
    try:
        float_0 = 100.0
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.handle_request(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'x%\x9e\xcf'
        list_0 = [bytes_0, bytes_0]
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.register(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.response()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.parse_error(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        complex_0 = None
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.method_not_found(complex_0)
    except BaseException:
        pass

def test_case_5():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        json_rpc_server_1 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_1.invalid_request(json_rpc_server_0)
    except BaseException:
        pass

def test_case_6():
    try:
        complex_0 = None
        dict_0 = {complex_0: complex_0}
        list_0 = [dict_0, complex_0, dict_0]
        str_0 = '#vd1@p1QB?qS"~'
        bytes_0 = b'\xa3\xd4G'
        str_1 = 'S #h>F?+}3~J5y35eAD'
        str_2 = None
        dict_1 = {str_0: dict_0, str_2: dict_0}
        dict_2 = {str_0: bytes_0, str_0: list_0, str_1: dict_0, str_1: dict_1}
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.invalid_params(dict_2)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -526.4
        json_rpc_server_0 = module_0.JsonRpcServer()
        list_0 = [float_0, float_0, float_0, float_0]
        json_rpc_server_1 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_1.internal_error(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        dict_0 = {}
        var_0 = json_rpc_server_0.handle_request(dict_0)
    except BaseException:
        pass