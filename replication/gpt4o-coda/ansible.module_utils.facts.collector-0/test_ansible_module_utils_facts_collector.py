# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    var_0 = module_0.get_collector_names()

def test_case_1():
    base_fact_collector_0 = module_0.BaseFactCollector()

def test_case_2():
    collector_not_found_error_0 = module_0.CollectorNotFoundError()
    str_0 = ''
    base_fact_collector_0 = module_0.BaseFactCollector(str_0, collector_not_found_error_0)
    var_0 = base_fact_collector_0.collect_with_namespace()

def test_case_3():
    cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
    base_fact_collector_0 = module_0.BaseFactCollector(cycle_found_in_fact_deps_0)
    var_0 = base_fact_collector_0.collect()

def test_case_4():
    set_0 = set()
    list_0 = []
    tuple_0 = (list_0,)
    base_fact_collector_0 = module_0.BaseFactCollector(set_0, tuple_0)
    var_0 = base_fact_collector_0.collect_with_namespace()
    list_1 = [base_fact_collector_0]
    dict_0 = {}
    var_1 = module_0.collector_classes_from_gather_subset(list_1, dict_0)

def test_case_5():
    cycle_found_in_fact_deps_0 = None
    var_0 = module_0.collector_classes_from_gather_subset(cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0)

def test_case_6():
    list_0 = []
    int_0 = -3263
    str_0 = 'T,y\r_K'
    var_0 = module_0.collector_classes_from_gather_subset(list_0, int_0, str_0)

def test_case_7():
    float_0 = -1422.9831
    base_fact_collector_0 = module_0.BaseFactCollector(float_0)
    list_0 = [base_fact_collector_0, base_fact_collector_0, base_fact_collector_0]
    bool_0 = None
    list_1 = [list_0, bool_0, list_0, base_fact_collector_0]
    var_0 = module_0.resolve_requires(list_0, list_1)