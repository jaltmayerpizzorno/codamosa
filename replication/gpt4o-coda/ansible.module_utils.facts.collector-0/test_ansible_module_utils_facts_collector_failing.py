# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        var_0 = module_0.collector_classes_from_gather_subset(collector_not_found_error_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -1422.9831
        base_fact_collector_0 = module_0.BaseFactCollector(float_0)
        int_0 = -262
        tuple_0 = (base_fact_collector_0, int_0)
        var_0 = module_0.build_fact_id_to_collector_map(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ';"G8:'
        var_0 = module_0.find_unresolved_requires(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        set_0 = {cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0}
        int_0 = -2570
        var_0 = module_0.resolve_requires(set_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '=<EEEh5\rO$'
        bool_0 = True
        tuple_0 = (bool_0,)
        var_0 = module_0.build_dep_data(str_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        set_0 = {cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0}
        str_0 = None
        list_0 = [str_0]
        base_fact_collector_0 = module_0.BaseFactCollector(list_0)
        var_0 = base_fact_collector_0.collect_with_namespace()
        set_1 = None
        base_fact_collector_1 = module_0.BaseFactCollector(set_1)
        var_1 = module_0.select_collector_classes(set_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        unresolved_fact_dep_1 = module_0.UnresolvedFactDep()
        str_0 = '!Nl>'
        var_0 = module_0.get_collector_names()
        base_fact_collector_0 = module_0.BaseFactCollector()
        list_0 = [str_0, collector_not_found_error_0]
        var_1 = module_0.get_collector_names(list_0, str_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_0 = module_0.get_collector_names(cycle_found_in_fact_deps_0)
    except BaseException:
        pass

def test_case_8():
    try:
        unresolved_fact_dep_0 = None
        str_0 = '3keO\\pzeHh*$yA,'
        dict_0 = {str_0: str_0}
        bytes_0 = b'\x8e\xc9S\xc3\x96VWE\x91\xa6\x8a\xf4j\xf8\xb2\x80r\x1e]'
        tuple_0 = (dict_0, bytes_0)
        base_fact_collector_0 = module_0.BaseFactCollector()
        int_0 = -934
        var_0 = module_0.collector_classes_from_gather_subset(unresolved_fact_dep_0, str_0, tuple_0, base_fact_collector_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'M'
        tuple_0 = ()
        var_0 = module_0.resolve_requires(str_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = '\x0c'
        dict_0 = {str_0: str_0}
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_1 = '1;34'
        list_0 = [str_1, dict_0, str_1]
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_0 = module_0.get_collector_names(collector_not_found_error_0, dict_0, list_0, unresolved_fact_dep_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        str_1 = None
        list_0 = [str_1]
        dict_0 = {str_1: str_1, str_1: list_0, str_0: str_0}
        var_0 = module_0.get_collector_names()
        var_1 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        base_fact_collector_0 = module_0.BaseFactCollector()
        list_0 = [bool_0, base_fact_collector_0, base_fact_collector_0]
        var_0 = base_fact_collector_0.collect_with_namespace(list_0)
        int_0 = 212
        list_1 = [bool_0, int_0, bool_0, int_0]
        var_1 = base_fact_collector_0.collect()
        str_0 = 'Dv\x0c\n\x0bEx~0(W ZrfR-jh'
        bool_1 = True
        base_fact_collector_1 = module_0.BaseFactCollector(bool_1)
        var_2 = base_fact_collector_1.collect(str_0)
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_1)
        var_3 = base_fact_collector_1.collect_with_namespace()
        str_1 = "8'm"
        dict_0 = {str_0: var_2, str_1: str_0}
        var_4 = module_0.tsort(dict_0)
        int_1 = 511
        var_5 = module_0.get_collector_names(int_1)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -2274.01
        base_fact_collector_0 = module_0.BaseFactCollector(float_0)
        bytes_0 = b'\xc8\xcfc\xe4\xb9\xaf \xdanN\x83\xa8'
        base_fact_collector_1 = module_0.BaseFactCollector()
        float_1 = 1597.624
        set_0 = {bytes_0, float_1, float_1, float_0}
        str_0 = 'MJ|ctZ]R\t'
        dict_0 = {str_0: bytes_0}
        var_0 = base_fact_collector_0.collect_with_namespace()
        var_1 = module_0.find_unresolved_requires(set_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = None
        bool_0 = True
        dict_0 = {list_0: list_0, bool_0: list_0}
        str_0 = 'min'
        var_0 = module_0.get_collector_names(list_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        set_0 = set()
        list_0 = []
        tuple_0 = (list_0,)
        base_fact_collector_0 = module_0.BaseFactCollector(set_0, tuple_0)
        var_0 = base_fact_collector_0.collect_with_namespace()
        dict_0 = {}
        dict_1 = {}
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        var_1 = module_0.collector_classes_from_gather_subset(list_0, dict_1)
        str_0 = "itu-PezR'aJ\x0c#dV4O\x0cu"
        collector_not_found_error_1 = module_0.CollectorNotFoundError()
        bool_0 = False
        var_2 = module_0.get_collector_names(bool_0)
        var_3 = module_0.collector_classes_from_gather_subset(dict_0, base_fact_collector_0, str_0)
        var_4 = module_0.get_collector_names()
        collector_not_found_error_2 = module_0.CollectorNotFoundError()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_1 = [str_0, collector_not_found_error_0]
        var_5 = module_0.get_collector_names(list_1, str_0, list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'FC;7\n4ZtHPz*Y,r,K#C'
        base_fact_collector_0 = module_0.BaseFactCollector(str_0)
        var_0 = base_fact_collector_0.collect_with_namespace()
        set_0 = set()
        list_0 = [base_fact_collector_0]
        tuple_0 = (list_0,)
        base_fact_collector_1 = module_0.BaseFactCollector(set_0, tuple_0)
        var_1 = base_fact_collector_1.collect_with_namespace()
        list_1 = [base_fact_collector_1, base_fact_collector_0, base_fact_collector_0]
        dict_0 = {}
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        var_2 = module_0.collector_classes_from_gather_subset(list_1, dict_0)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        str_1 = 'XX@H9zxKAz^\x0c]z'
        collector_not_found_error_1 = module_0.CollectorNotFoundError()
        bool_0 = False
        var_3 = module_0.get_collector_names(bool_0)
        var_4 = module_0.get_collector_names()
        base_fact_collector_2 = module_0.BaseFactCollector()
        list_2 = [str_1, collector_not_found_error_0]
        var_5 = module_0.get_collector_names(list_1, str_1, list_2)
    except BaseException:
        pass

def test_case_17():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = '(W'
        collector_not_found_error_1 = module_0.CollectorNotFoundError()
        collector_not_found_error_2 = module_0.CollectorNotFoundError()
        set_0 = {collector_not_found_error_1, collector_not_found_error_1, collector_not_found_error_1, str_0}
        tuple_0 = ()
        str_1 = 'Y0'
        dict_0 = {}
        float_0 = 3629.1966
        str_2 = '\niZx4%SxyV4MMrj\\"'
        list_0 = []
        list_1 = [str_0]
        var_0 = module_0.collector_classes_from_gather_subset(dict_0, float_0, str_2, list_0, dict_0, list_1)
        var_1 = module_0.select_collector_classes(tuple_0, str_1)
        var_2 = module_0.find_unresolved_requires(set_0, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        str_1 = '/var/lib/apt/lists/'
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_2 = 'h 4,4jFlbZ{$P'
        bool_0 = False
        dict_0 = {str_0: str_0, str_1: str_0, str_2: bool_0, str_1: str_2}
        list_0 = [str_0]
        bool_1 = False
        tuple_0 = (str_2, list_0, bool_1)
        list_1 = []
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_1)
        var_0 = base_fact_collector_0.collect(tuple_0)
        var_1 = module_0.select_collector_classes(dict_0, dict_0)
    except BaseException:
        pass