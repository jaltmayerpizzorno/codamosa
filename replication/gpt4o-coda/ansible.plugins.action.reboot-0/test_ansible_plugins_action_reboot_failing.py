# Automatically generated by Pynguin.
import ansible.plugins.action.reboot as module_0

def test_case_0():
    try:
        action_module_0 = module_0.ActionModule()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '3c!)Pf'
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
        action_module_0 = module_0.ActionModule(*list_0)
        action_module_1 = module_0.ActionModule(*list_0)
        var_0 = action_module_1.deprecated_args()
        int_0 = None
        var_1 = action_module_1.validate_reboot(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
        timed_out_exception_0 = module_0.TimedOutException()
        action_module_0 = module_0.ActionModule(*list_0)
        list_1 = [timed_out_exception_0]
        str_1 = 'XgO{2VQ#-0[\x0ckfV?g'
        var_0 = action_module_0.deprecated_args()
        var_1 = action_module_0.perform_reboot(list_1, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '3c!)Pf'
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
        timed_out_exception_0 = module_0.TimedOutException()
        action_module_0 = module_0.ActionModule(*list_0)
        list_1 = [timed_out_exception_0]
        var_0 = action_module_0.get_system_boot_time(list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '3c!)Pf'
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
        action_module_0 = module_0.ActionModule(*list_0)
        str_1 = 'XgO{2VQ#-0[\x0ckfV?g'
        dict_0 = {str_1: action_module_0}
        var_0 = action_module_0.get_distribution(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '3c!)Pf'
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
        action_module_0 = module_0.ActionModule(*list_0)
        action_module_1 = module_0.ActionModule(*list_0)
        var_0 = action_module_1.deprecated_args()
        tuple_0 = ()
        var_1 = action_module_1.run(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '3cY)Pf'
        str_1 = ''
        list_0 = [str_1, str_1, str_1, str_0, str_1, str_1]
        timed_out_exception_0 = module_0.TimedOutException()
        action_module_0 = module_0.ActionModule(*list_0)
        bool_0 = False
        var_0 = action_module_0.get_shutdown_command_args(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '3c!)Pf'
        str_1 = ''
        list_0 = [str_1, str_1, str_1, str_0, str_1, str_1]
        timed_out_exception_0 = module_0.TimedOutException()
        action_module_0 = module_0.ActionModule(*list_0)
        action_module_1 = module_0.ActionModule(*list_0)
        set_0 = {action_module_0, str_1, action_module_1}
        var_0 = action_module_0.check_boot_time(timed_out_exception_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '3c!)Pf'
        str_1 = ''
        list_0 = [str_1, str_1, str_1, str_0, str_1, str_1]
        timed_out_exception_0 = module_0.TimedOutException()
        action_module_0 = module_0.ActionModule(*list_0)
        var_0 = action_module_0.run_test_command(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
        timed_out_exception_0 = module_0.TimedOutException()
        int_0 = 37
        action_module_0 = module_0.ActionModule(*list_0)
        bytes_0 = b'\x83~\xe3$\n\xc2\xa9f'
        bool_0 = True
        var_0 = action_module_0.do_until_success_or_timeout(bytes_0, bool_0, timed_out_exception_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'E'
        list_0 = [str_0, str_0, str_0, str_0, str_0, str_0]
        timed_out_exception_0 = module_0.TimedOutException()
        int_0 = 24
        action_module_0 = module_0.ActionModule(*list_0)
        var_0 = action_module_0.deprecated_args()
        bytes_0 = b'\x83~\xe3$\n\xc2\xa9f'
        bool_0 = False
        var_1 = action_module_0.do_until_success_or_timeout(bytes_0, bool_0, timed_out_exception_0, int_0)
    except BaseException:
        pass