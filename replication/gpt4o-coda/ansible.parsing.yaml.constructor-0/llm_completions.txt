

# Generated at 2024-05-31 18:37:04.782136
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='!unsafe', value=[('key', 'value')])
    result = constructor.construct_yaml_unsafe(node)
    assert isinstance(result, dict)
    assert result['key'] == 'value'
```

# Generated at 2024-05-31 18:37:06.615783
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:37:10.380334
```python
    node = type('Node', (object,), {'value': 'vault-encrypted-data', 'start_mark': type('Mark', (object,), {'line': 1, 'column': 1, 'name': 'test.yaml'})()})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 2, 2)
```

# Generated at 2024-05-31 18:37:13.427298
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos is not None
```

# Generated at 2024-05-31 18:37:15.987732
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:37:18.629750
```python
    node = MappingNode(tag='!vault', value=[('key', 'value')])
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', 'password')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:37:21.281068
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos == (None, 1, 1)
```

# Generated at 2024-05-31 18:37:24.581170
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test'})(), 'value': 'vault-encrypted-data'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test', 1, 1)
```

# Generated at 2024-05-31 18:37:25.965123
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:37:27.539838
```python
    node = MappingNode(tag='tag:yaml.org,2002:str', value=[('key', 'value')])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_str(node)
    assert isinstance(result, AnsibleUnicode)
    assert result == 'value'
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:37:36.178136
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:37:37.453339
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='!unsafe', value=[('key', 'value')])
    result = constructor.construct_yaml_unsafe(node)
    assert isinstance(result, dict)
    assert result['key'] == 'value'
```

# Generated at 2024-05-31 18:37:41.732677
```python
    node = type('Node', (object,), {'value': 'vault-encrypted-data', 'start_mark': type('Mark', (object,), {'line': 1, 'column': 1, 'name': 'test.yaml'})()})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 2, 2)
```

# Generated at 2024-05-31 18:37:43.130077
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='!unsafe', value=[('key', 'value')])
    result = constructor.construct_yaml_unsafe(node)
    assert isinstance(result, dict)
    assert result['key'] == 'value'
```

# Generated at 2024-05-31 18:37:51.404781
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:37:54.145804
```python
    node = type('Node', (object,), {'value': 'test_value', 'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test_file'})()})()
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_str(node)
    assert isinstance(result, AnsibleUnicode)
    assert result == 'test_value'
    assert result.ansible_pos == ('test_file', 1, 1)
```

# Generated at 2024-05-31 18:37:56.309793
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:37:59.346048
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos == (None, 1, 1)
```

# Generated at 2024-05-31 18:38:00.730221
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:38:03.816777
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:38:22.517899
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert 'ansible_pos' in result
```

# Generated at 2024-05-31 18:38:24.489348
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:38:27.582570
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:38:30.261953
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:38:33.207799
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:38:37.928268
```python
    node = Mock()
    node.start_mark = Mock()
    node.start_mark.line = 0
    node.start_mark.column = 0
    node.start_mark.name = 'test_file'
    node.value = 'vault_value'

    vault_secret = ('default', b'secret')
    vault_lib = VaultLib(secrets=[vault_secret])
    constructor = AnsibleConstructor(vault_secrets=[vault_secret])
    constructor._vaults['default'] = vault_lib

    result = constructor.construct_vault_encrypted_unicode(node)

    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == vault_lib
    assert result.ansible_pos == ('test_file', 1, 1)
```

# Generated at 2024-05-31 18:38:40.285023
```python
    node = type('Node', (object,), {'value': 'vault-encrypted-data', 'start_mark': type('Mark', (object,), {'line': 1, 'column': 1, 'name': 'test.yaml'})()})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 2, 2)
```

# Generated at 2024-05-31 18:38:42.029376
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:38:43.227314
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='!unsafe', value=[('key', 'value')])
    result = constructor.construct_yaml_unsafe(node)
    assert isinstance(result, dict)
    assert result['key'] == 'value'
```

# Generated at 2024-05-31 18:38:45.710436
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:39:12.267134
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos == (None, 1, 1)
```

# Generated at 2024-05-31 18:39:13.954076
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:39:16.577359
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'line': 1, 'column': 1, 'name': 'test.yaml'})(), 'value': 'vault_value'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 2, 2)
```

# Generated at 2024-05-31 18:39:17.855632
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='!unsafe', value=[('key', 'value')])
    result = constructor.construct_yaml_unsafe(node)
    assert isinstance(result, dict)
    assert result['key'] == 'value'
```

# Generated at 2024-05-31 18:39:19.336114
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:39:22.308705
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:39:23.678143
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:39:26.530924
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:39:29.521935
```python
    node = type('Node', (object,), {'value': 'vault-encrypted-data', 'start_mark': type('Mark', (object,), {'line': 1, 'column': 1, 'name': 'test.yaml'})()})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 2, 2)
```

# Generated at 2024-05-31 18:39:33.221938
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:40:27.211695
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test.yaml'})(), 'value': 'vault-encrypted-data'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 1, 1)
```

# Generated at 2024-05-31 18:40:28.824422
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:40:30.750780
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:40:33.502537
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:40:36.285778
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos == (None, 1, 1)
```

# Generated at 2024-05-31 18:40:38.993850
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test.yaml'})(), 'value': 'vault-encrypted-data'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 1, 1)
```

# Generated at 2024-05-31 18:40:41.794022
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos == (None, 1, 1)
```

# Generated at 2024-05-31 18:40:44.595517
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:str', value=[('key', 'value')])
    result = constructor.construct_yaml_str(node)
    assert isinstance(result, AnsibleUnicode)
    assert result == 'value'
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:40:46.551074
```python
    node = MappingNode(tag='!vault', value=[('key', 'value')])
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:40:47.840166
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='!unsafe', value=[('key', 'value')])
    result = constructor.construct_yaml_unsafe(node)
    assert isinstance(result, dict)
    assert result['key'] == 'value'
```

# Generated at 2024-05-31 18:42:17.608809
```python
    node = type('Node', (object,), {'value': 'test_value', 'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test_file'})()})()
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_str(node)
    assert isinstance(result, AnsibleUnicode)
    assert result == 'test_value'
    assert result.ansible_pos == ('test_file', 1, 1)
```

# Generated at 2024-05-31 18:42:20.623375
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test.yaml'})(), 'value': 'vault-encrypted-data'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 1, 1)
```

# Generated at 2024-05-31 18:42:25.323733
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test.yaml'})(), 'value': 'vault_value'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 1, 1)
```

# Generated at 2024-05-31 18:42:28.399815
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test'})(), 'value': 'vault-encrypted-data'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test', 1, 1)
```

# Generated at 2024-05-31 18:42:29.844806
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:42:32.932288
```python
    node = MappingNode(tag='tag:yaml.org,2002:str', value=[('key', 'value')])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_str(node)
    assert isinstance(result, AnsibleUnicode)
    assert result == 'value'
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:42:35.206806
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test'})(), 'value': 'vault-encrypted-data'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test', 1, 1)
```

# Generated at 2024-05-31 18:42:36.785655
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    result = next(constructor.construct_yaml_map(node))
    assert isinstance(result, AnsibleMapping)
    assert result.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:42:40.215194
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos == (None, 1, 1)
```

# Generated at 2024-05-31 18:42:41.726840
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:45:40.094696
```python
    node = Mock()
    node.start_mark = Mock()
    node.start_mark.line = 0
    node.start_mark.column = 0
    node.start_mark.name = 'test.yaml'
    node.value = 'vault-encrypted-data'

    constructor = AnsibleConstructor()
    constructor._vaults['default'] = Mock()
    constructor._vaults['default'].secrets = ['secret']

    result = constructor.construct_vault_encrypted_unicode(node)

    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test.yaml', 1, 1)
```

# Generated at 2024-05-31 18:45:42.621679
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert 'ansible_pos' in result
```

# Generated at 2024-05-31 18:45:48.216807
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos == (None, 1, 1)
```

# Generated at 2024-05-31 18:45:50.796977
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test'})(), 'value': 'vault_value'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test', 1, 1)
```

# Generated at 2024-05-31 18:45:53.606333
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert 'ansible_pos' in result
```

# Generated at 2024-05-31 18:45:55.053110
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:45:56.658274
```python
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[])
    constructor = AnsibleConstructor()
    result = constructor.construct_yaml_map(node)
    data = next(result)
    assert isinstance(data, AnsibleMapping)
    assert data.ansible_pos == constructor._node_position_info(node)
```

# Generated at 2024-05-31 18:45:59.556981
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:map', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='key1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='key2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_mapping(node)
    assert isinstance(result, AnsibleMapping)
    assert result['key1'] == 'value1'
    assert result['key2'] == 'value2'
    assert result.ansible_pos == (None, 1, 1)
```

# Generated at 2024-05-31 18:46:03.021213
```python
    constructor = AnsibleConstructor()
    node = MappingNode(tag='tag:yaml.org,2002:seq', value=[
        (MappingNode(tag='tag:yaml.org,2002:str', value='item1'), MappingNode(tag='tag:yaml.org,2002:str', value='value1')),
        (MappingNode(tag='tag:yaml.org,2002:str', value='item2'), MappingNode(tag='tag:yaml.org,2002:str', value='value2'))
    ])
    result = constructor.construct_yaml_seq(node)
    assert isinstance(result, AnsibleSequence)
    assert result == ['item1', 'item2']
    assert hasattr(result, 'ansible_pos')
```

# Generated at 2024-05-31 18:46:05.477959
```python
    node = type('Node', (object,), {'start_mark': type('Mark', (object,), {'column': 0, 'line': 0, 'name': 'test'})(), 'value': 'vault_value'})
    constructor = AnsibleConstructor()
    constructor._vaults['default'] = VaultLib(secrets=[('default', b'secret')])
    result = constructor.construct_vault_encrypted_unicode(node)
    assert isinstance(result, AnsibleVaultEncryptedUnicode)
    assert result.vault == constructor._vaults['default']
    assert result.ansible_pos == ('test', 1, 1)
```