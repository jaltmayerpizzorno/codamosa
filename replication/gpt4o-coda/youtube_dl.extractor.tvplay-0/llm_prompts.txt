

---- 2024-06-05 00:58:46.770107
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:58:50.613995
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:58:52.018202
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:58:53.838927
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:58:55.256828
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:58:56.570342
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:00.559714
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:02.068323
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:06.496873
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:08.928530
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:47.062027
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:49.661777
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:51.392006
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:54.399934
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:55.765449
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 00:59:59.089960
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:00:01.843672
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:00:04.324776
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:00:06.463880
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:00:09.873906
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:20.398356
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:23.333706
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:25.505476
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:27.895836
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:30.607037
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:33.715350
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:36.211086
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:38.778784
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:41.478840
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:01:44.446571
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:00.761962
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:06.000426
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:08.707994
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:11.563127
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:13.017843
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:15.732123
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:18.192094
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n\nclass TVPlayHomeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv3?)?play\\.(?:tv3\\.lt|skaties\\.lv|tv3\\.ee)/(?:[^/]+/)*[^/?#&]+-(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tvplay.tv3.lt/aferistai-n-7/aferistai-10047125/',\n        'info_dict': {\n            'id': '366367',\n            'ext': 'mp4',\n            'title': 'Aferistai',\n            'description': 'Aferistai. Kal\u0117din\u0117 pasaka.',\n            'series': 'Aferistai [N-7]',\n            'season': '1 sezonas',\n            'season_number': 1,\n            'duration': 464,\n            'timestamp': 1394209658,\n            'upload_date': '20140307',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tvplay.skaties.lv/vinas-melo-labak/vinas-melo-labak-10280317/',\n        'only_matching': True,\n    }, {\n        'url': 'https://tvplay.tv3.ee/cool-d-ga-mehhikosse/cool-d-ga-mehhikosse-10044354/',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.lt/aferistai-10047125',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv3play.skaties.lv/vinas-melo-labak-10280317',\n        'only_matching': True,\n    }, {\n        'url': 'https://play.tv3.ee/cool-d-ga-mehhikosse-10044354',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        asset = self._download_json(\n            urljoin(url, '/sb/public/asset/' + video_id), video_id)\n\n        m3u8_url = asset['movie']['contentUrl']\n        video_id = asset['assetId']\n        asset_title = asset['title']\n        title = asset_title['title']\n\n        formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        thumbnails = None\n        image_url = asset.get('imageUrl')\n        if image_url:\n            thumbnails = [{\n                'url': urljoin(url, image_url),\n                'ext': 'jpg',\n            }]\n\n        metadata = asset.get('metadata') or {}\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': asset_title.get('summaryLong') or asset_title.get('summaryShort'),\n            'thumbnails': thumbnails,\n            'duration': parse_duration(asset_title.get('runTime')),\n            'series': asset.get('tvSeriesTitle'),\n            'season': asset.get('tvSeasonTitle'),\n            'season_number': int_or_none(metadata.get('seasonNumber')),\n            'episode': asset_title.get('titleBrief'),\n            'episode_number': int_or_none(metadata.get('episodeNumber')),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class TVPlayHomeIE\ndef test_TVPlayHomeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:20.779318
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:22.287265
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    qualities,\n    try_get,\n    update_url_query,\n    url_or_none,\n    urljoin,\n)\n\n\nclass TVPlayIE(InfoExtractor):\n    IE_NAME = 'mtg'\n    IE_DESC = 'MTG services'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        mtg:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                tvplay(?:\\.skaties)?\\.lv(?:/parraides)?|\n                                (?:tv3play|play\\.tv3)\\.lt(?:/programos)?|\n                                tv3play(?:\\.tv3)?\\.ee/sisu|\n                                (?:tv(?:3|6|8|10)play|viafree)\\.se/program|\n                                (?:(?:tv3play|viasat4play|tv6play|viafree)\\.no|(?:tv3play|viafree)\\.dk)/programmer|\n                                play\\.nova(?:tv)?\\.bg/programi\n                            )\n                            /(?:[^/]+/)+\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://www.tvplay.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'md5': 'a1612fe0849455423ad8718fe049be21',\n            'info_dict': {\n                'id': '418113',\n                'ext': 'mp4',\n                'title': 'K\u0101di ir \u012bri? - Vi\u0146as melo lab\u0101k',\n                'description': 'Baiba apsmej \u012brus, k\u0101di tie ir un ko vi\u0146i dara.',\n                'series': 'Vi\u0146as melo lab\u0101k',\n                'season': '2.sezona',\n                'season_number': 2,\n                'duration': 25,\n                'timestamp': 1406097056,\n                'upload_date': '20140723',\n            },\n        },\n        {\n            'url': 'http://play.tv3.lt/programos/moterys-meluoja-geriau/409229?autostart=true',\n            'info_dict': {\n                'id': '409229',\n                'ext': 'flv',\n                'title': 'Moterys meluoja geriau',\n                'description': 'md5:9aec0fc68e2cbc992d2a140bd41fa89e',\n                'series': 'Moterys meluoja geriau',\n                'episode_number': 47,\n                'season': '1 sezonas',\n                'season_number': 1,\n                'duration': 1330,\n                'timestamp': 1403769181,\n                'upload_date': '20140626',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'info_dict': {\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n# Unit test for constructor of class TVPlayIE\ndef test_TVPlayIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-05 01:04:23.817180
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n                'id': '238551',\n                'ext': 'flv',\n                'title': 'Kodu keset linna 398537',\n                'description': 'md5:7df175e3c94db9e47c0d81ffa5d68701',\n                'duration': 1257,\n                'timestamp': 1292449761,\n                'upload_date': '20101215',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.se/program/husraddarna/395385?autostart=true',\n            'info_dict': {\n                'id': '395385',\n                'ext': 'mp4',\n                'title': 'Husr\u00e4ddarna S02E07',\n                'description': 'md5:f210c6c89f42d4fc39faa551be813777',\n                'duration': 2574,\n                'timestamp': 1400596321,\n                'upload_date': '20140520',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.se/program/den-sista-dokusapan/266636?autostart=true',\n            'info_dict': {\n                'id': '266636',\n                'ext': 'mp4',\n                'title': 'Den sista dokus\u00e5pan S01E08',\n                'description': 'md5:295be39c872520221b933830f660b110',\n                'duration': 1492,\n                'timestamp': 1330522854,\n                'upload_date': '20120229',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv8play.se/program/antikjakten/282756?autostart=true',\n            'info_dict': {\n                'id': '282756',\n                'ext': 'mp4',\n                'title': 'Antikjakten S01E10',\n                'description': 'md5:1b201169beabd97e20c5ad0ad67b13b8',\n                'duration': 2646,\n                'timestamp': 1348575868,\n                'upload_date': '20120925',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv3play.no/programmer/anna-anka-soker-assistent/230898?autostart=true',\n            'info_dict': {\n                'id': '230898',\n                'ext': 'mp4',\n                'title': 'Anna Anka s\u00f8ker assistent - Ep. 8',\n                'description': 'md5:f80916bf5bbe1c5f760d127f8dd71474',\n                'duration': 2656,\n                'timestamp': 1277720005,\n                'upload_date': '20100628',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.viasat4play.no/programmer/budbringerne/21873?autostart=true',\n            'info_dict': {\n                'id': '21873',\n                'ext': 'mp4',\n                'title': 'Budbringerne program 10',\n                'description': 'md5:4db78dc4ec8a85bb04fd322a3ee5092d',\n                'duration': 1297,\n                'timestamp': 1254205102,\n                'upload_date': '20090929',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://www.tv6play.no/programmer/hotelinspektor-alex-polizzi/361883?autostart=true',\n            'info_dict': {\n                'id': '361883',\n                'ext': 'mp4',\n                'title': 'Hotelinspekt\u00f8r Alex Polizzi - Ep. 10',\n                'description': 'md5:3ecf808db9ec96c862c8ecb3a7fdaf81',\n                'duration': 2594,\n                'timestamp': 1393236292,\n                'upload_date': '20140224',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://play.novatv.bg/programi/zdravei-bulgariya/624952?autostart=true',\n            'info_dict': {\n                'id': '624952',\n                'ext': 'flv',\n                'title': '\u0417\u0434\u0440\u0430\u0432\u0435\u0439, \u0411\u044a\u043b\u0433\u0430\u0440\u0438\u044f (12.06.2015 \u0433.) ',\n                'description': 'md5:99f3700451ac5bb71a260268b8daefd7',\n                'duration': 8838,\n                'timestamp': 1434100372,\n                'upload_date': '20150612',\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://play.nova.bg/programi/zdravei-bulgariya/764300?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tvplay.skaties.lv/parraides/vinas-melo-labak/418113?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://tvplay.skaties.lv/vinas-melo-labak/418113/?autostart=true',\n            'only_matching': True,\n        },\n        {\n            # views is null\n            'url': 'http://tvplay.skaties.lv/parraides/tv3-zinas/760183',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://tv3play.tv3.ee/sisu/kodu-keset-linna/238551?autostart=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.viafree.se/program/underhallning/i-like-radio-live/sasong-1/676869',\n            'only_matching': True,\n        },\n        {\n            'url': 'mtg:418113',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        geo_country = self._search_regex(\n            r'https?://[^/]+\\.([a-z]{2})', url,\n            'geo country', default=None)\n        if geo_country:\n            self._initialize_geo_bypass({'countries': [geo_country.upper()]})\n        video = self._download_json(\n            'http://playapi.mtgx.tv/v3/videos/%s' % video_id, video_id, 'Downloading video JSON')\n\n        title = video['title']\n\n        try:\n            streams = self._download_json(\n                'http://playapi.mtgx.tv/v3/videos/stream/%s' % video_id,\n                video_id, 'Downloading streams JSON')\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                msg = self._parse_json(e.cause.read().decode('utf-8'), video_id)\n                raise ExtractorError(msg['msg'], expected=True)\n            raise\n\n        quality = qualities(['hls', 'medium', 'high'])\n        formats = []\n        for format_id, video_url in streams.get('streams', {}).items():\n            video_url = url_or_none(video_url)\n            if not video_url:\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(video_url, {\n                        'hdcore': '3.5.0',\n                        'plugin': 'aasp-3.5.0.151.81'\n                    }), video_id, f4m_id='hds', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'ext': ext,\n                }\n                if video_url.startswith('rtmp'):\n                    m = re.search(\n                        r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', video_url)\n                    if not m:\n                        continue\n                    fmt.update({\n                        'ext': 'flv',\n                        'url': m.group('url'),\n                        'app': m.group('app'),\n                        'play_path': m.group('playpath'),\n                        'preference': -1,\n                    })\n                else:\n                    fmt.update({\n                        'url': video_url,\n                    })\n                formats.append(fmt)\n\n        if not formats and video.get('is_geo_blocked'):\n            self.raise_geo_restricted(\n                'This content might not be available in your country due to copyright reasons')\n\n        self._sort_formats(formats)\n\n        # TODO: webvtt in m3u8\n        subtitles = {}\n        sami_path = video.get('sami_path')\n        if sami_path:\n            lang = self._search_regex(\n                r'_([a-z]{2})\\.xml', sami_path, 'lang',\n                default=compat_urlparse.urlparse(url).netloc.rsplit('.', 1)[-1])\n            subtitles[lang] = [{\n                'url': sami_path,\n            }]\n\n        series = video.get('format_title')\n        episode_number = int_or_none(video.get('format_position', {}).get('episode'))\n        season = video.get('_embedded', {}).get('season', {}).get('title')\n        season_number = int_or_none(video.get('format_position', {}).get('season'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'series': series,\n            'episode_number': episode_number,\n            'season': season,\n            'season_number': season_number,\n            'duration': int_or_none(video.get('duration')),\n            'timestamp': parse_iso8601(video.get('created_at')),\n            'view_count': try_get(video, lambda x: x['views']['total'], int),\n            'age_limit': int_or_none(video.get('age_limit', 0)),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViafreeIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        viafree\\.(?P<country>dk|no|se)\n                        /(?P<id>program(?:mer)?/(?:[^/]+/)+[^/?#&]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.viafree.no/programmer/underholdning/det-beste-vorspielet/sesong-2/episode-1',\n        'info_dict': {\n            'id': '757786',\n            'ext': 'mp4',\n            'title': 'Det beste vorspielet - Sesong 2 - Episode 1',\n            'description': 'md5:b632cb848331404ccacd8cd03e83b4c3',\n            'series': 'Det beste vorspielet',\n            'season_number': 2,\n            'duration': 1116,\n            'timestamp': 1471200600,\n            'upload_date': '20160814',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with relatedClips\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-1',\n        'only_matching': True,\n    }, {\n        # Different og:image URL schema\n        'url': 'http://www.viafree.se/program/reality/sommaren-med-youtube-stjarnorna/sasong-1/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.se/program/livsstil/husraddarna/sasong-2/avsnitt-2',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.viafree.dk/programmer/reality/paradise-hotel/saeson-7/episode-5',\n        'only_matching': True,\n    }]\n    _GEO_BYPASS = False\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TVPlayIE.suitable(url) else super(ViafreeIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        country, path = re.match(self._VALID_URL, url).groups()\n        content = self._download_json(\n            'https://viafree-content.mtg-api.com/viafree-content/v1/%s/path/%s' % (country, path), path)\n        program = content['_embedded']['viafreeBlocks'][0]['_embedded']['program']\n        guid = program['guid']\n        meta = content['meta']\n        title = meta['title']\n\n        try:\n            stream_href = self._download_json(\n                program['_links']['streamLink']['href'], guid,\n                headers=self.geo_verification_headers())['embedded']['prioritizedStreams'][0]['links']['stream']['href']\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 403:\n                self.raise_geo_restricted(countries=[country])\n            raise\n\n        formats = self._extract_m3u8_formats(stream_href, guid, 'mp4')\n        self._sort_formats(formats)\n        episode = program.get('episode') or {}\n\n        return {\n            'id': guid,\n            'title': title,\n            'thumbnail': meta.get('image'),\n            'description': meta.get('description'),\n            'series': episode.get('seriesTitle'),\n            'episode_number': int_or_none(episode.get('episodeNumber')),\n            'season_number': int_or_none(episode.get('seasonNumber')),\n            'duration': int_or_none(try_get(program, lambda x: x['video']['duration']['milliseconds']), 1000),\n            'timestamp': parse_iso8601(try_get(program, lambda x: x['availability']['start'])),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class ViafreeIE\ndef test_ViafreeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}