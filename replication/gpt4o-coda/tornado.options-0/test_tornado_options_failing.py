# Automatically generated by Pynguin.
import tornado.options as module_0
import typing as module_1

def test_case_0():
    try:
        str_0 = 'e8wv@@,F'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, mockable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\x0c'
        str_1 = "\tO4|\r0tap'-pT"
        str_2 = 'b/'
        optional_0 = None
        option_0 = module_0._Option(str_2, optional_0, str_1)
        any_0 = option_0.value()
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.__setitem__(str_0, optional_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\x0c'
        text_i_o_0 = module_1.TextIO()
        text_i_o_1 = text_i_o_0.__enter__()
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0, text_i_o_1, str_0, str_0)
        option_parser_0.__setattr__(str_0, text_i_o_0)
    except BaseException:
        pass

def test_case_3():
    try:
        optional_0 = None
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        list_0 = module_0.parse_command_line(optional_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '/input/tornado/options.py'
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        option_parser_0 = module_0.OptionParser()
        module_0.print_help()
        option_parser_1 = module_0.OptionParser()
        str_0 = '8Hq2rR[\t|'
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_2 = module_0.OptionParser()
        option_parser_3 = module_0.OptionParser()
        set_0 = option_parser_3.groups()
        iterable_0 = option_parser_0.items()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_6():
    try:
        module_0.print_help()
        str_0 = 'A('
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        iterable_0 = option_parser_0.items()
        bool_0 = True
        str_1 = '+/\x0c92$X'
        module_0.define(str_0, str_0, bool_0, str_1)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'R0'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        dict_1 = option_parser_0.group_dict(str_0)
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        option_parser_0.define(str_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_9():
    try:
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        list_0 = []
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '1paR]\x0b$y-'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        optional_0 = None
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        list_0 = module_0.parse_command_line(optional_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'H\\;_kC2Fu41}+1&'
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        float_0 = 0.0
        module_0.add_parse_callback(float_0)
        str_1 = '/input/tornado/options.py'
        option_parser_1 = module_0.OptionParser()
        mockable_0 = option_parser_1.mockable()
        mockable_0.__delattr__(str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ';wla/<Urv0m=Tf'
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        iterator_0 = option_parser_1.__iter__()
        str_1 = '/input/tornado/log.py'
        bool_0 = None
        option_0 = module_0._Option(str_1, str_1, str_0)
        option_0.set(bool_0)
        option_parser_1.parse_config_file(str_1, bool_0)
        option_parser_1.run_parse_callbacks()
        mockable_0 = option_parser_1.mockable()
        option_parser_1.parse_config_file(str_1)
        str_2 = '#g'
        option_1 = module_0._Option(str_2)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'f,ao&Hk8z$\r'
        option_0 = module_0._Option(str_0, str_0, str_0)
        option_0.set(option_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'R0'
        module_0.print_help()
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        iterable_0 = option_parser_0.items()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\x0c'
        str_1 = "\tO4|\r0tap'-pT"
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'i'
        str_1 = 'L~\x0c PPEqP7<U_'
        bool_0 = False
        option_0 = module_0._Option(str_1, str_1, bool_0, str_1, option_parser_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '\x0c0'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = None
        dict_1 = option_parser_0.group_dict(str_1)
        dict_2 = option_parser_0.group_dict(str_1)
        iterable_0 = option_parser_0.items()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'L"`'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        any_0 = None
        bool_0 = False
        option_parser_0.define(str_0, any_0, bool_0)
        mockable_0.__setattr__(str_0, mockable_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '4v/)o.yA\\u/'
        str_1 = ''
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        str_2 = '#V7(/Fh%I'
        bool_0 = True
        option_0 = module_0._Option(str_1, mockable_0, str_2, bool_0, str_2, str_2)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        module_0.print_help()
        str_0 = 'A('
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        iterable_0 = option_parser_0.items()
        bool_0 = True
        str_1 = '+/\x0c92$X'
        module_0.define(str_0, str_0, bool_0, str_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = ',XRq'
        option_0 = module_0._Option(str_0, str_0, str_0)
        str_1 = '0'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_1.group_dict(str_1)
        option_parser_2 = module_0.OptionParser()
        iterable_0 = option_parser_1.items()
        str_2 = '--'
        list_0 = [str_0, str_2]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '0'
        none_type_0 = None
        list_0 = []
        bool_0 = False
        option_0 = module_0._Option(str_0, none_type_0, list_0, str_0, bool_0, str_0)
        option_parser_0 = module_0.OptionParser()
        str_1 = "'\x0cW?k'\\~5)DIf?4"
        dict_0 = option_parser_0.group_dict(str_1)
        list_1 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_26():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'W'
        list_0 = [str_0, str_0]
        option_parser_0.define(str_0, list_0)
        option_parser_0.run_parse_callbacks()
        str_1 = "+6Xzq](s7_;hg'Xsc{"
        set_0 = option_parser_0.groups()
        bool_0 = None
        option_parser_0.define(str_1, bool_0)
        str_2 = "7['|EP'U"
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_1, str_2)
        option_parser_1 = module_0.OptionParser()
        list_1 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_27():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'WyShJGo1 C+jw?&"'
        str_1 = 'W'
        list_0 = [str_1, str_0]
        option_parser_0.define(str_0, list_0)
        option_parser_0.run_parse_callbacks()
        option_parser_1 = module_0.OptionParser()
        str_2 = '<ast>'
        dict_0 = option_parser_0.group_dict(str_2)
        option_parser_2 = module_0.OptionParser()
        iterable_0 = option_parser_2.items()
        option_parser_3 = module_0.OptionParser()
        list_1 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_28():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_29():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'WyShJGo1 C+jw?&"'
        str_1 = 'W'
        list_0 = [str_1, str_0]
        option_parser_0.define(str_0, list_0)
        option_parser_0.run_parse_callbacks()
        option_parser_0.run_parse_callbacks()
        str_2 = "+6Xzq](s7_;hg'Xsc{"
        set_0 = option_parser_0.groups()
        bool_0 = None
        option_parser_0.define(str_2, bool_0)
        option_parser_0.print_help()
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_2, str_2)
        mockable_0.__setattr__(str_2, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'W'
        list_0 = [str_0, str_0]
        option_parser_0.define(str_0, list_0)
        option_parser_0.run_parse_callbacks()
        option_parser_0.run_parse_callbacks()
        str_1 = "+6Xzq](s7_;hg'Xsc{"
        bool_0 = None
        option_0 = module_0._Option(str_1, str_1, str_1)
        any_0 = option_0.value()
        option_parser_0.define(str_1, any_0, str_1, bool_0, str_0, any_0)
        str_2 = 'Handles the login for the Facebook user, returning a user object.\n\n        Example usage:\n\n        .. testcode::\n\n            class FacebookGraphLoginHandler(tornado.web.RequestHandler,\n                                            tornado.auth.FacebookGraphMixin):\n              async def get(self):\n                  if self.get_argument("code", False):\n                      user = await self.get_authenticated_user(\n                          redirect_uri=\'/auth/facebookgraph/\',\n                          client_id=self.settings["facebook_api_key"],\n                          client_secret=self.settings["facebook_secret"],\n                          code=self.get_argument("code"))\n                      # Save the user with e.g. set_secure_cookie\n                  else:\n                      self.authorize_redirect(\n                          redirect_uri=\'/auth/facebookgraph/\',\n                          client_id=self.settings["facebook_api_key"],\n                          extra_params={"scope": "read_stream,offline_access"})\n\n        .. testoutput::\n           :hide:\n\n        This method returns a dictionary which may contain the following fields:\n\n        * ``access_token``, a string which may be passed to `facebook_request`\n        * ``session_expires``, an integer encoded as a string representing\n          the time until the access token expires in seconds. This field should\n          be used like ``int(user[\'session_expires\'])``; in a future version of\n          Tornado it will change from a string to an integer.\n        * ``id``, ``name``, ``first_name``, ``last_name``, ``locale``, ``picture``,\n          ``link``, plus any fields named in the ``extra_fields`` argument. These\n          fields are copied from the Facebook graph API\n          `user object <https://developers.facebook.com/docs/graph-api/reference/user>`_\n\n        .. versionchanged:: 4.5\n           The ``session_expires`` field was updated to support changes made to the\n           Facebook API in March 2017.\n\n        .. versionchanged:: 6.0\n\n           The ``callback`` argument was removed. Use the returned awaitable object instead.\n        '
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_1, str_2)
    except BaseException:
        pass

def test_case_31():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '_9V'
        bool_0 = False
        list_0 = module_0.parse_command_line(str_0, bool_0)
        module_0.print_help()
        option_parser_1 = module_0.OptionParser()
        option_parser_2 = module_0.OptionParser()
        set_0 = option_parser_2.groups()
        str_1 = 'o'
        str_2 = 'oauth_signature'
        bool_1 = False
        optional_0 = None
        option_parser_0.define(str_1, bool_1, optional_0, str_2, str_0, str_0)
        option_parser_0.__setitem__(str_1, list_0)
    except BaseException:
        pass

def test_case_32():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'WyShJGo1 C+jw?&"'
        str_1 = 'W'
        str_2 = '"!?QiNO?H">);a@'
        iterator_0 = option_parser_0.__iter__()
        tuple_0 = (str_1, iterator_0)
        bool_0 = False
        str_3 = '%s?v=%s'
        str_4 = '8G8s/pD8$-q-o/xn0'
        list_0 = [str_3, str_4]
        option_parser_0.define(str_2, tuple_0, str_2, str_1, bool_0, str_0, list_0)
        option_parser_0.run_parse_callbacks()
        option_parser_0.run_parse_callbacks()
        set_0 = option_parser_0.groups()
    except BaseException:
        pass