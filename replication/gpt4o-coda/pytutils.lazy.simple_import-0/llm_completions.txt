

# Generated at 2024-06-03 05:44:35.159381
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    setattr(sys.modules[module_name], 'test_attr', 'test_value')

    make_lazy(module_name)

    assert isinstance(sys.modules[module_name], _LazyModuleMarker)
    assert sys.modules[module_name].test_attr == 'test_value'
```

# Generated at 2024-06-03 05:44:36.882555
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:44:39.657233
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:44:41.364097
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:44:43.407423
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:44:44.277749
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    dummy_code = """

# Generated at 2024-06-03 05:44:45.456648
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:44:48.560783
def test_make_lazy():
    import sys
    import types

    # Create a dummy module to test with
    module_name = 'dummy_module'
    dummy_module = types.ModuleType(module_name)
    dummy_module.test_attr = 'test_value'
    sys.modules[module_name] = dummy_module

    # Apply make_lazy to the dummy module
    make_lazy(module_name)

    # Ensure the module is now a LazyModule
    assert isinstance(sys.modules[module_name], _LazyModuleMarker)

    # Access an attribute to trigger the actual import
    assert sys.modules[module_name].test_attr == 'test_value'

    # Ensure the module is now fully imported
    assert isinstance(sys.modules[module_name], types.ModuleType)

    # Clean up
    del sys.modules[module_name]

# Generated at 2024-06-03 05:44:49.370830
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:44:50.831507
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    setattr(sys.modules[module_name], 'test_attr', 'test_value')

    make_lazy(module_name)

    assert isinstance(sys.modules[module_name], _LazyModuleMarker)
    assert sys.modules[module_name].test_attr == 'test_value'
```

# Generated at 2024-06-03 05:44:55.021524
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:44:56.745773
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:44:57.509908
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:44:58.313341
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:44:59.155295
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:45:01.957160
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:45:03.548053
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:45:04.309418
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    dummy_code = """

# Generated at 2024-06-03 05:45:07.044558
def test_make_lazy():
    import sys
    import types

    # Create a dummy module to test with
    module_name = 'dummy_module'
    dummy_module = types.ModuleType(module_name)
    dummy_module.test_attr = 'test_value'
    sys.modules[module_name] = dummy_module

    # Apply make_lazy to the dummy module
    make_lazy(module_name)

    # Ensure the module is now a LazyModule
    assert isinstance(sys.modules[module_name], _LazyModuleMarker)

    # Access an attribute to trigger the actual import
    assert sys.modules[module_name].test_attr == 'test_value'

    # Ensure the module is now the actual module
    assert isinstance(sys.modules[module_name], types.ModuleType)
    assert sys.modules[module_name].test_attr == 'test_value'

    # Clean up
    del sys.modules[module_name]

# Generated at 2024-06-03 05:45:07.975128
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:45:14.326302
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    dummy_code = """

# Generated at 2024-06-03 05:45:15.354821
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:45:16.703135
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    setattr(sys.modules[module_name], 'test_attr', 'test_value')

    make_lazy(module_name)

    assert isinstance(sys.modules[module_name], _LazyModuleMarker)
    assert sys.modules[module_name].test_attr == 'test_value'
```

# Generated at 2024-06-03 05:45:17.741781
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:45:19.193471
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:45:19.939520
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    dummy_code = """

# Generated at 2024-06-03 05:45:20.859582
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:45:22.787227
```python
    module_path = 'os'
    make_lazy(module_path)
    
    # Check if the module is marked as lazy
    assert isinstance(sys.modules[module_path], _LazyModuleMarker)
    
    # Access an attribute to trigger the actual import
    _ = sys.modules[module_path].path
    
    # Check if the module is now fully imported
    assert isinstance(sys.modules[module_path], ModuleType)
```

# Generated at 2024-06-03 05:45:24.541256
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:45:26.517764
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:45:38.120457
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:45:40.393087
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    setattr(sys.modules[module_name], 'test_attr', 'test_value')

    make_lazy(module_name)
    lazy_module = sys.modules[module_name]

    assert isinstance(lazy_module, _LazyModuleMarker), "Module is not marked as lazy"
    assert lazy_module.test_attr == 'test_value', "Lazy module did not load correctly"
```

# Generated at 2024-06-03 05:45:41.249233
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:45:45.285425
def test_make_lazy():
    import sys
    import types

    # Create a dummy module to test with
    module_name = 'dummy_module'
    dummy_module = types.ModuleType(module_name)
    dummy_module.test_attr = 'test_value'
    sys.modules[module_name] = dummy_module

    # Apply make_lazy to the dummy module
    make_lazy(module_name)

    # Ensure the module is now a LazyModule
    assert isinstance(sys.modules[module_name], _LazyModuleMarker)

    # Access an attribute to trigger the actual import
    assert sys.modules[module_name].test_attr == 'test_value'

    # Ensure the module is now the actual module
    assert sys.modules[module_name] is dummy_module

    # Clean up
    del sys.modules[module_name]

# Generated at 2024-06-03 05:45:45.777596
```python

# Generated at 2024-06-03 05:45:46.508597
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:45:47.680538
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:45:49.055051
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:45:49.851382
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:45:50.965932
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:46:13.907454
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module should be a LazyModuleMarker instance"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module should be a regular ModuleType instance after access"
```

# Generated at 2024-06-03 05:46:14.907006
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:46:16.219444
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:46:17.100591
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:46:17.988663
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:46:18.893192
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:46:19.690348
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:46:22.485566
def test_make_lazy():
    import sys
    import types

    # Create a dummy module to test with
    module_name = 'dummy_module'
    dummy_module = types.ModuleType(module_name)
    dummy_module.test_attr = 'test_value'
    sys.modules[module_name] = dummy_module

    # Apply make_lazy to the dummy module
    make_lazy(module_name)

    # Ensure the module is now a LazyModule
    assert isinstance(sys.modules[module_name], _LazyModuleMarker)

    # Access an attribute to trigger the actual import
    assert sys.modules[module_name].test_attr == 'test_value'

    # Ensure the module is now fully imported
    assert isinstance(sys.modules[module_name], types.ModuleType)

    # Clean up
    del sys.modules[module_name]

# Generated at 2024-06-03 05:46:22.948131
```python

# Generated at 2024-06-03 05:46:23.737961
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:47:08.076267
```python
    module_path = 'os'
    make_lazy(module_path)
    
    # Check if the module is marked as lazy
    assert isinstance(sys.modules[module_path], _LazyModuleMarker)
    
    # Access an attribute to trigger the actual import
    _ = sys.modules[module_path].path
    
    # Check if the module is now fully imported
    assert isinstance(sys.modules[module_path], ModuleType)
```

# Generated at 2024-06-03 05:47:10.576014
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:47:12.016429
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    setattr(sys.modules[module_name], 'test_attr', 'test_value')

    make_lazy(module_name)

    assert isinstance(sys.modules[module_name], _LazyModuleMarker)
    assert sys.modules[module_name].test_attr == 'test_value'
```

# Generated at 2024-06-03 05:47:13.719374
```python
    module_path = 'os'
    make_lazy(module_path)
    
    # Check if the module is marked as lazy
    assert isinstance(sys.modules[module_path], _LazyModuleMarker)
    
    # Access an attribute to trigger the actual import
    _ = sys.modules[module_path].path
    
    # Check if the module is now fully imported
    assert isinstance(sys.modules[module_path], ModuleType)
```

# Generated at 2024-06-03 05:47:14.541527
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:47:15.867169
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:47:17.029966
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:47:18.041183
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:47:19.148429
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:47:20.900222
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:48:49.432081
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:48:50.217429
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:48:51.712219
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:48:52.761808
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:48:54.398692
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:48:55.232992
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:48:56.167418
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:48:57.450873
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:48:58.321299
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:49:00.109730
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the actual import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:51:56.264759
def test_make_lazy():
    import sys
    import types

    # Create a dummy module to test with
    module_name = 'dummy_module'
    dummy_module = types.ModuleType(module_name)
    dummy_module.test_attr = 'test_value'
    sys.modules[module_name] = dummy_module

    # Apply make_lazy to the dummy module
    make_lazy(module_name)

    # Ensure the module is now a LazyModule
    assert isinstance(sys.modules[module_name], _LazyModuleMarker)

    # Access an attribute to trigger the actual import
    assert sys.modules[module_name].test_attr == 'test_value'

    # Ensure the module is now the actual module
    assert isinstance(sys.modules[module_name], types.ModuleType)

    # Clean up
    del sys.modules[module_name]

# Generated at 2024-06-03 05:51:57.714377
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:51:58.600953
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:51:59.361589
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:52:02.141947
def test_make_lazy():
    import sys
    import types

    # Create a dummy module to test with
    module_name = 'dummy_module'
    dummy_module = types.ModuleType(module_name)
    dummy_module.test_attr = 'test_value'
    sys.modules[module_name] = dummy_module

    # Apply make_lazy to the dummy module
    make_lazy(module_name)

    # Ensure the module is now a LazyModule
    assert isinstance(sys.modules[module_name], _LazyModuleMarker)

    # Access an attribute to trigger the actual import
    assert sys.modules[module_name].test_attr == 'test_value'

    # Ensure the module is now fully imported
    assert isinstance(sys.modules[module_name], types.ModuleType)

    # Clean up
    del sys.modules[module_name]

# Generated at 2024-06-03 05:52:02.993360
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:52:03.854677
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """
value = 42

# Generated at 2024-06-03 05:52:04.849487
```python
    import importlib

    # Create a dummy module for testing
    module_name = 'dummy_module'
    module_code = """

# Generated at 2024-06-03 05:52:06.635669
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```

# Generated at 2024-06-03 05:52:08.152097
```python
    module_name = 'test_module'
    sys.modules[module_name] = ModuleType(module_name)
    make_lazy(module_name)
    
    assert isinstance(sys.modules[module_name], _LazyModuleMarker), "Module is not marked as lazy"
    
    # Access an attribute to trigger the import
    sys.modules[module_name].__name__
    
    assert isinstance(sys.modules[module_name], ModuleType), "Module was not properly imported"
```