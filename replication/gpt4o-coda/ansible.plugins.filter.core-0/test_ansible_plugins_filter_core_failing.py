# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0

def test_case_0():
    try:
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_0 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        bytes_0 = None
        set_0 = {bytes_0}
        str_0 = '{epoch}:{name}-{version}-{release}.{arch}'
        dict_0 = {str_0: str_0}
        var_0 = module_0.to_nice_json(bool_0, set_0, **dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        list_0 = [bool_0]
        var_0 = module_0.flatten(list_0)
        var_1 = module_0.to_bool(bool_0)
        float_0 = -1698.00826
        str_0 = '`F]Hz'
        str_1 = 'c$()P4=8W'
        str_2 = 'Q.'
        str_3 = '\n- name: Ensure a job that runs at 2 and 5 exists. Creates an entry like "0 5,2 * * ls -alh > /dev/null"\n  ansible.builtin.cron:\n    name: "check dirs"\n    minute: "0"\n    hour: "5,2"\n    job: "ls -alh > /dev/null"\n\n- name: \'Ensure an old job is no longer present. Removes any job that is prefixed by "#Ansible: an old job" from the crontab\'\n  ansible.builtin.cron:\n    name: "an old job"\n    state: absent\n\n- name: Creates an entry like "@reboot /some/job.sh"\n  ansible.builtin.cron:\n    name: "a job for reboot"\n    special_time: reboot\n    job: "/some/job.sh"\n\n- name: Creates an entry like "PATH=/opt/bin" on top of crontab\n  ansible.builtin.cron:\n    name: PATH\n    env: yes\n    job: /opt/bin\n\n- name: Creates an entry like "APP_HOME=/srv/app" and insert it after PATH declaration\n  ansible.builtin.cron:\n    name: APP_HOME\n    env: yes\n    job: /srv/app\n    insertafter: PATH\n\n- name: Creates a cron file under /etc/cron.d\n  ansible.builtin.cron:\n    name: yum autoupdate\n    weekday: "2"\n    minute: "0"\n    hour: "12"\n    user: root\n    job: "YUMINTERACTIVE=0 /usr/sbin/yum-autoupdate"\n    cron_file: ansible_yum-autoupdate\n\n- name: Removes a cron file from under /etc/cron.d\n  ansible.builtin.cron:\n    name: "yum autoupdate"\n    cron_file: ansible_yum-autoupdate\n    state: absent\n\n- name: Removes "APP_HOME" environment variable from crontab\n  ansible.builtin.cron:\n    name: APP_HOME\n    env: yes\n    state: absent\n'
        bytes_0 = b'\x8azq6\x82@\xc4\x1f\x9e:\xfc'
        dict_0 = {str_2: float_0, str_2: str_1, str_3: bytes_0}
        dict_1 = {str_0: var_1, str_0: var_0, str_1: dict_0}
        str_4 = 'ansible_playbook_python'
        var_2 = module_0.extract(float_0, dict_1, dict_0, str_4)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.combine()
        list_0 = []
        var_1 = module_0.strftime(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0}
        var_0 = module_0.strftime(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        int_0 = 25
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.regex_findall(int_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        var_0 = module_0.from_yaml(list_0)
        int_0 = 13
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.regex_findall(int_0, filter_module_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'python'
        tuple_0 = ()
        set_0 = {tuple_0, str_0}
        var_0 = module_0.from_yaml_all(tuple_0)
        var_1 = module_0.extract(str_0, tuple_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'yc:d'
        var_0 = module_0.get_hash(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'y\x84E\xd2k\xa1^'
        str_0 = 'D.5\n=|'
        set_0 = {str_0, str_0, bytes_0}
        str_1 = '#lif'
        var_0 = module_0.get_hash(str_1)
        list_0 = [str_0, str_0]
        var_1 = module_0.regex_search(set_0, str_0, *list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'python'
        var_0 = module_0.regex_replace(str_0)
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_1 = filter_module_0.filters()
        int_0 = 1563
        list_0 = [str_0, str_0, int_0]
        var_2 = module_0.get_encrypted_password(str_0, str_0, filter_module_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        set_0 = set()
        list_0 = [set_0, set_0]
        var_0 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 1187
        var_0 = module_0.to_uuid(int_0)
        list_0 = [var_0, var_0, int_0]
        str_0 = '/b2xL\r'
        str_1 = 'lnk_source'
        dict_0 = {str_0: str_0, str_0: list_0, str_1: list_0}
        var_1 = module_0.combine(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\x9c\xc4\xd5op\xbca+\xa5'
        bool_0 = None
        var_0 = module_0.from_yaml(bool_0)
        set_0 = {var_0, bytes_0}
        int_0 = 768
        str_0 = 'I:,\n:Dd&\\elm|b-U'
        var_1 = module_0.extract(set_0, int_0, str_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x86$~\xe0\xbeC%\xd7\x87\x9bm\xd1\x08\xd9\xf8E\xd8\x9f\xec'
        bytes_1 = b'\xb7\x96\x87IR\x15\xf4,\xe52+\xffk\xf7\x03\x97\xd4\x19dF'
        tuple_0 = ()
        var_0 = module_0.extract(bytes_0, bytes_1, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        str_1 = 'nzc3'
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_0: str_1}
        float_0 = -1912.121576
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(dict_0)
        bytes_0 = b'iO\x8aD\xb8\x04l&\x1a\x844\xd9\xbf\x16P%\x03\xb4'
        var_1 = module_0.regex_findall(float_0, bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ' '
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0]
        var_0 = module_0.randomize_list(list_0)
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        list_0 = []
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
        str_0 = 'F$(.Csnil3My2"G<'
        set_0 = {str_0}
        bool_0 = True
        list_1 = [bool_0, bool_0, str_0]
        var_1 = module_0.extract(set_0, bool_0, list_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '>'
        str_1 = 'linux'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
        list_0 = [dict_0, dict_0, str_1]
        var_0 = module_0.path_join(list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        var_0 = module_0.rand(bytes_0, list_0)
        float_0 = None
        var_1 = module_0.path_join(float_0)
    except BaseException:
        pass

def test_case_20():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = ":9%w@e*Z^LM4k\\e2se;'"
        var_0 = filter_module_0.filters()
        var_1 = module_0.extract(filter_module_0, str_0, filter_module_0)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_0 = module_0.to_nice_yaml(filter_module_0, **dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = None
        var_0 = module_0.to_datetime(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = None
        var_0 = module_0.fileglob(bytes_0)
    except BaseException:
        pass

def test_case_24():
    try:
        filter_module_0 = module_0.FilterModule()
        bool_0 = True
        var_0 = module_0.to_uuid(filter_module_0, bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'ZjV<jjk\x0b9UouL+ZW/'
        int_0 = 1127
        list_0 = [str_0, int_0, int_0]
        var_0 = module_0.subelements(list_0, int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        list_0 = []
        filter_module_0 = module_0.FilterModule(*list_0)
        bool_0 = False
        var_0 = module_0.subelements(filter_module_0, bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        list_0 = []
        filter_module_0 = module_0.FilterModule(*list_0)
        var_0 = module_0.subelements(list_0, list_0, filter_module_0)
        list_1 = []
        float_0 = -2078.0
        var_1 = module_0.mandatory(list_1, float_0)
        dict_0 = None
        bool_0 = True
        var_2 = module_0.rand(dict_0, bool_0)
        dict_1 = {}
        str_0 = "'@\\.oeJ\\\x0bB\r"
        var_3 = module_0.fileglob(str_0)
        var_4 = filter_module_0.filters()
        var_5 = module_0.flatten(list_0)
        filter_module_1 = module_0.FilterModule()
        filter_module_2 = module_0.FilterModule(*list_0, **dict_1)
        filter_module_3 = module_0.FilterModule()
        var_6 = module_0.dict_to_list_of_dict_key_value_elements(filter_module_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'y\x84E\xd2k\xa1^'
        str_0 = 'D.5\n=|'
        set_0 = {str_0, str_0, bytes_0}
        str_1 = '#lif'
        var_0 = module_0.get_hash(str_1)
        list_0 = [bytes_0, str_0]
        var_1 = module_0.quote(list_0)
        list_1 = [str_0, str_0]
        var_2 = module_0.regex_search(set_0, str_0, *list_1)
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = b'\xbf\x14XGn/\x8at\xfa'
        dict_0 = {bytes_0: bytes_0}
        list_0 = [bytes_0, dict_0, dict_0, dict_0]
        str_0 = ';0AW'
        filter_module_0 = module_0.FilterModule()
        str_1 = 'Fr'
        var_0 = module_0.from_yaml(str_1)
        var_1 = module_0.b64encode(filter_module_0)
        var_2 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bytes_0 = b'y\x84E\xd2k\xa1^'
        str_0 = ' U{.kY\r-'
        var_0 = module_0.regex_search(bytes_0, str_0)
        int_0 = 3235
        str_1 = '6/r kKlhIkyN9eW E(\\n'
        bool_0 = True
        var_1 = module_0.rand(int_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'world'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.to_bool(dict_0)
        dict_1 = {}
        list_0 = []
        dict_2 = {str_0: list_0, str_0: list_0}
        var_1 = module_0.regex_search(str_0, dict_1, *list_0, **dict_2)
    except BaseException:
        pass

def test_case_32():
    try:
        list_0 = []
        var_0 = module_0.b64decode(list_0)
        list_1 = []
        var_1 = module_0.randomize_list(list_1)
        bool_0 = True
        str_0 = 'posix_extended'
        dict_0 = {str_0: list_0, str_0: bool_0}
        var_2 = module_0.mandatory(list_0, dict_0)
        set_0 = set()
        str_1 = "!y)_]F.G$y'b\rfwY6!"
        int_0 = -134
        dict_1 = {str_1: int_0}
        bytes_0 = b'\x83\xfdsC'
        var_3 = module_0.ternary(set_0, dict_1, bytes_0)
        bool_1 = False
        tuple_0 = (bool_1,)
        list_2 = [tuple_0, bool_0]
        var_4 = module_0.ternary(bool_0, tuple_0, list_2)
        str_2 = "*\\BHjWL?Z/pYWM'"
        var_5 = module_0.regex_replace()
        str_3 = '_raw'
        var_6 = module_0.do_groupby(set_0, str_2, str_3)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = '}O\x0b"4W1CBF j8SE'
        str_1 = '\\GaoZ>nS.*tAAh=;'
        str_2 = '8On*D\x0c\rgY5M1v&(IxVJ'
        str_3 = 'GD5wn'
        int_0 = -1744
        list_0 = [int_0]
        tuple_0 = (str_3,)
        list_1 = [tuple_0, list_0]
        tuple_1 = (list_0, list_1, str_2)
        var_0 = module_0.regex_findall(str_2, str_3, list_0, tuple_1)
        var_1 = module_0.get_encrypted_password(str_0, str_1, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = ']N"r\'u'
        list_0 = [str_0, str_0]
        var_0 = module_0.regex_search(list_0, str_0, *list_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = None
        filter_module_0 = module_0.FilterModule()
        list_0 = [int_0]
        var_0 = module_0.to_json(list_0)
        list_1 = [filter_module_0, filter_module_0]
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(list_1, list_1)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = None
        list_0 = [int_0]
        var_0 = module_0.to_json(list_0)
        filter_module_0 = module_0.FilterModule()
        str_0 = 'zZm'
        int_1 = 10
        var_1 = module_0.regex_replace(str_0, int_0, str_0, int_1)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = -1460
        set_0 = set()
        tuple_0 = (set_0,)
        var_0 = module_0.rand(int_0, tuple_0)
        var_1 = module_0.combine()
        tuple_1 = ()
        str_0 = '2JaZ'
        set_1 = {tuple_1, str_0, str_0, str_0}
        var_2 = module_0.flatten(set_1)
        filter_module_0 = None
        list_0 = [filter_module_0, str_0, filter_module_0, var_1]
        var_3 = module_0.regex_findall(filter_module_0, list_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = '#'
        str_1 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        bytes_0 = b'\xf0K\xb6'
        int_0 = 1449
        bool_0 = False
        float_0 = 1000.0
        tuple_0 = (bool_0, float_0)
        var_0 = module_0.from_yaml_all(tuple_0)
        var_1 = module_0.rand(str_0, dict_0, dict_0, bytes_0, int_0)
    except BaseException:
        pass

def test_case_39():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.mandatory(filter_module_0)
        dict_0 = {filter_module_0: filter_module_0, var_0: var_0, var_0: filter_module_0, filter_module_0: filter_module_0}
        float_0 = 1000.0
        bytes_0 = b')\x1fv'
        list_0 = [bytes_0, bytes_0, dict_0, var_0]
        tuple_0 = (dict_0, float_0, bytes_0, list_0)
        bool_0 = True
        var_1 = module_0.to_json(bool_0)
        var_2 = filter_module_0.filters()
        var_3 = module_0.from_yaml_all(bool_0)
        list_1 = [tuple_0]
        var_4 = module_0.combine(*list_1)
    except BaseException:
        pass

def test_case_40():
    try:
        bytes_0 = b'y\x84E\xd2k\xa1^'
        str_0 = ' U{.kY\r-'
        var_0 = module_0.regex_search(bytes_0, str_0)
        filter_module_0 = module_0.FilterModule()
        float_0 = 0.1
        var_1 = module_0.rand(filter_module_0, float_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bytes_0 = b'\x15\xe8\x89\xa95\xcd\x01\x85\x9c\x90\xa1\x15M\xec\x9d\xed'
        set_0 = {bytes_0}
        str_0 = "PH+=lh\x0bo+'W]R"
        var_0 = module_0.flatten(set_0, str_0)
        dict_0 = {}
        var_1 = module_0.regex_escape(dict_0, set_0)
    except BaseException:
        pass

def test_case_42():
    try:
        var_0 = module_0.regex_replace()
        bytes_0 = b'\x1dI\x1f\xd7\xca,\xb6\xf6\xe4'
        var_1 = module_0.to_bool(bytes_0)
        str_0 = "/4'\r^f|RN7EZR~zu"
        int_0 = -579
        dict_0 = {var_0: int_0}
        list_0 = [dict_0]
        var_2 = module_0.rand(str_0, int_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'y5X32xT4_*\r$\\}z'
        str_1 = '%" :3xP&"Z^'
        dict_0 = {str_0: str_0, str_1: str_0}
        list_0 = [str_0, str_0, dict_0, str_1]
        bytes_0 = b'\x84\xe7|\x86\x1f\xf9\xe6\x02![\x1f\xf3[ptxf\xf1\xfe\x95'
        var_0 = module_0.subelements(dict_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_44():
    try:
        bytes_0 = b'\x18\xd5%K\xbc\x0c\x19\x18\xc3\xf5\xdf\xee\xdf'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = [bytes_0, dict_0, dict_0]
        str_0 = '2F"tiZ\'\\'
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = 'ZjV<jjk\x0b9UouL+ZW/'
        list_0 = []
        int_0 = None
        var_0 = module_0.mandatory(int_0)
        tuple_0 = (list_0, str_0)
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.extract(int_0, tuple_0, filter_module_0, list_0)
    except BaseException:
        pass

def test_case_46():
    try:
        bytes_0 = b'y\xc0E\xeck\x124'
        str_0 = ' U$.kY\r'
        var_0 = module_0.regex_search(bytes_0, str_0)
        int_0 = 2439
        str_1 = '\n'
        dict_0 = {var_0: bytes_0}
        bytes_1 = None
        var_1 = module_0.flatten(str_1, dict_0, bytes_1)
        var_2 = module_0.to_uuid(int_0)
        str_2 = ')*`C8'
        var_3 = module_0.subelements(str_2, str_0)
    except BaseException:
        pass

def test_case_47():
    try:
        bool_0 = True
        var_0 = module_0.get_encrypted_password(bool_0)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = "w*vj`Sb'D*mdlST"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: dict_0, str_0: str_0, str_0: dict_0}
        set_0 = {str_0}
        tuple_0 = (set_0, set_0)
        var_0 = module_0.subelements(dict_1, str_0, tuple_0)
    except BaseException:
        pass

def test_case_49():
    try:
        bool_0 = True
        list_0 = [bool_0]
        str_0 = ''
        str_1 = 'sha512_crypt'
        dict_0 = {str_0: str_0, str_1: str_1, str_1: list_0}
        float_0 = None
        bool_1 = True
        var_0 = module_0.rand(bool_0, dict_0, float_0, bool_1)
    except BaseException:
        pass

def test_case_50():
    try:
        float_0 = 0.0001
        var_0 = module_0.to_bool(float_0)
        bytes_0 = b'\xbe\xaa"'
        tuple_0 = None
        var_1 = module_0.to_uuid(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_51():
    try:
        bytes_0 = b'\xbf`X\x86Gn\x8atr\xeb\xfa'
        dict_0 = {bytes_0: bytes_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_0 = ';0AW'
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_52():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        var_0 = module_0.combine(*list_0)
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.regex_search(filter_module_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_53():
    try:
        bool_0 = None
        var_0 = module_0.to_bool(bool_0)
        str_0 = "u*vj`.b'D*mdlST"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = '\n'
        float_0 = -646.125
        var_1 = module_0.get_hash(float_0)
        var_2 = module_0.regex_escape(str_1)
        var_3 = module_0.comment(str_1)
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: dict_0, str_0: str_0, str_0: dict_0}
        set_0 = {str_0}
        tuple_0 = (set_0, set_0)
        var_4 = module_0.mandatory(dict_1)
        var_5 = module_0.subelements(dict_1, str_0, tuple_0)
        var_6 = module_0.regex_replace()
        str_2 = 'x>VAC+\\.(d'
        str_3 = '%ZZG'
        str_4 = 'N>aF<Q|Sz]DB*~Bf`'
        list_0 = [bool_0, float_0, str_4]
        filter_module_0 = module_0.FilterModule()
        var_7 = module_0.regex_replace(str_2, str_3, list_0, filter_module_0, dict_1)
    except BaseException:
        pass

def test_case_54():
    try:
        tuple_0 = None
        var_0 = module_0.randomize_list(tuple_0)
        set_0 = {var_0, var_0, var_0}
        int_0 = -216
        str_0 = '['
        var_1 = module_0.to_bool(str_0)
        str_1 = '\\oX\x0b.4'
        int_1 = -874
        list_0 = [str_1, str_1, str_0, int_0]
        str_2 = ']|,bJ[j_ X7MPI'
        dict_0 = {str_1: int_1, str_2: set_0}
        var_2 = module_0.regex_search(str_0, int_1, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_55():
    try:
        int_0 = -1507
        int_1 = 1
        var_0 = module_0.to_bool(int_1)
        list_0 = []
        var_1 = module_0.dict_to_list_of_dict_key_value_elements(int_0, list_0)
    except BaseException:
        pass