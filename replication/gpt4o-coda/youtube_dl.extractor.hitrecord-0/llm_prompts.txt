

---- 2024-06-04 23:07:26.483393
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:29.775965
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:32.225910
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:35.681226
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:39.309761
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:42.907347
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:46.054299
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:49.373776
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:54.583363
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:07:57.797606
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:11.223139
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:13.624008
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:23.748579
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:27.283058
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:31.206316
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:34.835832
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:38.281065
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:39.413312
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:41.936997
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:08:44.282995
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:09.706747
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:12.669440
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:15.666608
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:17.654769
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:23.064288
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:26.302652
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:29.552247
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:33.143702
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:35.908185
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:09:36.860221
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:26.279739
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:27.473775
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:30.142292
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:34.196365
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:35.237896
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:36.584148
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:37.835566
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:38.868804
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:42.656981
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:10:45.368331
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:21.487456
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:26.690811
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:30.439887
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:34.426014
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:38.300715
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:41.440087
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:43.897348
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:46.422471
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:49.736105
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:12:53.097219
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:00.216281
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:03.835542
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:06.933618
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:09.950012
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:13.627163
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:16.961691
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:18.095994
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:19.207500
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:22.600987
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 23:16:25.998849
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    clean_html,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass HitRecordIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hitrecord\\.org/records/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://hitrecord.org/records/2954362',\n        'md5': 'fe1cdc2023bce0bbb95c39c57426aa71',\n        'info_dict': {\n            'id': '2954362',\n            'ext': 'mp4',\n            'title': 'A Very Different World (HITRECORD x ACLU)',\n            'description': 'md5:e62defaffab5075a5277736bead95a3d',\n            'duration': 139.327,\n            'timestamp': 1471557582,\n            'upload_date': '20160818',\n            'uploader': 'Zuzi.C12',\n            'uploader_id': '362811',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n            'tags': list,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://hitrecord.org/api/web/records/%s' % video_id, video_id)\n\n        title = video['title']\n        video_url = video['source_url']['mp4_url']\n\n        tags = None\n        tags_list = try_get(video, lambda x: x['tags'], list)\n        if tags_list:\n            tags = [\n                t['text']\n                for t in tags_list\n                if isinstance(t, dict) and t.get('text')\n                and isinstance(t['text'], compat_str)]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': clean_html(video.get('body')),\n            'duration': float_or_none(video.get('duration'), 1000),\n            'timestamp': int_or_none(video.get('created_at_i')),\n            'uploader': try_get(\n                video, lambda x: x['user']['username'], compat_str),\n            'uploader_id': try_get(\n                video, lambda x: compat_str(x['user']['id'])),\n            'view_count': int_or_none(video.get('total_views_count')),\n            'like_count': int_or_none(video.get('hearts_count')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'tags': tags,\n        }\n\n# Unit test for constructor of class HitRecordIE\ndef test_HitRecordIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}