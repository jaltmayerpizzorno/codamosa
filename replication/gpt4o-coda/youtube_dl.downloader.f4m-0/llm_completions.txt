

# Generated at 2024-06-04 21:26:59.283058
```python
    data = (
        b'\x00'  # version
        b'\x00\x00\x00'  # flags
        b'\x02'  # quality_entry_count
        b'quality1\x00'
        b'quality2\x00'
        b'\x00\x00\x00\x02'  # segment_run_count
        b'\x00\x00\x00\x01'  # first_segment
        b'\x00\x00\x00\x05'  # fragments_per_segment
        b'\x00\x00\x00\x02'  # first_segment
        b'\x00\x00\x00\x03'  # fragments_per_segment
    )
    reader = FlvReader(data)
    result = reader.read_asrt()
    expected = {
        'segment_run': [
            (1, 5),
            (2, 3),
        ],
    }
    assert result == expected, f

# Generated at 2024-06-04 21:27:02.914754
```python
    # Sample FLV data for testing
    sample_data = (
        b'\x00\x00\x00\x1c'  # box size
        b'abst'              # box type
        b'\x00'              # version
        b'\x00\x00\x00'      # flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x00'              # flags (Profile, Live, Update, Reserved)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier (empty string)
        b'\x00'              # Server

# Generated at 2024-06-04 21:27:04.255637
```python
    stream = io.BytesIO()
    write_flv_header(stream)
    assert stream.getvalue() == b'FLV\x01\x05\x00\x00\x00\x09\x00\x00\x00\x00'
```

# Generated at 2024-06-04 21:27:08.910890
```python
    data = (
        b'\x00'  # version
        b'\x00\x00\x00'  # flags
        b'\x02'  # quality_entry_count
        b'quality1\x00'
        b'quality2\x00'
        b'\x00\x00\x00\x02'  # segment_run_count
        b'\x00\x00\x00\x01'  # first_segment
        b'\x00\x00\x00\x05'  # fragments_per_segment
        b'\x00\x00\x00\x02'  # first_segment
        b'\x00\x00\x00\x03'  # fragments_per_segment
    )
    reader = FlvReader(data)
    result = reader.read_asrt()
    expected = {
        'segment_run': [
            (1, 5),
            (2, 3),
        ],
    }
    assert result == expected, f

# Generated at 2024-06-04 21:27:11.176386
```python
    f4mfd = F4mFD()
    assert f4mfd.FD_NAME == 'f4m'
    assert hasattr(f4mfd, '_get_unencrypted_media')
    assert hasattr(f4mfd, '_get_bootstrap_from_url')
    assert hasattr(f4mfd, '_update_live_fragments')
    assert hasattr(f4mfd, '_parse_bootstrap_node')
    assert hasattr(f4mfd, 'real_download')
```

# Generated at 2024-06-04 21:27:14.511242
```python
    import io
    from unittest.mock import patch, MagicMock

    # Mocking necessary components
    mock_ydl = MagicMock()
    mock_info_dict = {
        'url': 'http://example.com/manifest.f4m',
        'tbr': None,
        'extra_param_to_segment_url': None
    }
    mock_params = {'test': True}

    # Creating an instance of F4mFD
    f4mfd = F4mFD(mock_ydl, mock_params)

    # Mocking methods and attributes
    f4mfd.to_screen = MagicMock()
    f4mfd._prepare_url = MagicMock(return_value='http://example.com/manifest.f4m')
    f4mfd._prepare_frag_download = MagicMock()
    f4mfd._start_frag_download = MagicMock()
    f4mfd._finish_frag_download = MagicMock()
    f4mfd._download

# Generated at 2024-06-04 21:27:15.773705
```python
    stream = io.BytesIO()
    write_flv_header(stream)
    assert stream.getvalue() == b'FLV\x01\x05\x00\x00\x00\x09\x00\x00\x00\x00'
```

# Generated at 2024-06-04 21:27:19.242626
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData
        b'\x00'              # MetaData
        b'\x01'              # segments_count
        b

# Generated at 2024-06-04 21:27:23.089845
```python
    manifest_with_base_url = compat_etree_fromstring('''
        <manifest xmlns="http://ns.adobe.com/f4m/1.0">
            <baseURL>http://example.com/</baseURL>
        </manifest>
    ''')
    assert get_base_url(manifest_with_base_url) == 'http://example.com/'

    manifest_with_base_url_v2 = compat_etree_fromstring('''
        <manifest xmlns="http://ns.adobe.com/f4m/2.0">
            <baseURL>http://example.com/v2/</baseURL>
        </manifest>
    ''')
    assert get_base_url(manifest_with_base_url_v2) == 'http://example.com/v2/'

    manifest_without_base_url = compat_etree_fromstring('''
        <manifest xmlns="http://ns.adobe.com/f4m/1.0">
        </manifest>
    ''')
    assert get_base_url(man

# Generated at 2024-06-04 21:27:27.558225
```python
    boot_info = {
        'segments': [{'segment_run': [(1, 3), (2, 2)]}],
        'fragments': [{'fragments': [
            {'first': 1, 'ts': 0, 'duration': 1000, 'discontinuity_indicator': None},
            {'first': 4, 'ts': 3000, 'duration': 1000, 'discontinuity_indicator': None}
        ]}],
        'live': False
    }
    expected_output = [(1, 1), (1, 2), (1, 3), (2, 4), (2, 5)]
    assert build_fragments_list(boot_info) == expected_output

    boot_info_live = {
        'segments': [{'segment_run': [(1, 4294967295)]}],
        'fragments': [{'fragments': [
            {'first': 1, 'ts': 

# Generated at 2024-06-04 21:28:16.967093
```python
    data = (
        b'\x00'  # version
        b'\x00\x00\x00'  # flags
        b'\x00\x00\x00\x01'  # time scale
        b'\x01'  # quality entry count
        b'quality\x00'  # quality segment url modifier
        b'\x00\x00\x00\x01'  # fragments count
        b'\x00\x00\x00\x01'  # first
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # first_ts
        b'\x00\x00\x00\x02'  # duration
        b'\x00'  # discontinuity indicator
    )
    reader = FlvReader(data)
    result = reader.read_afrt()
    expected = {
        'fragments': [
            {
                'first': 1,
                'ts

# Generated at 2024-06-04 21:28:21.179959
```python
    from xml.etree.ElementTree import Element

    # Test case 1: Base URL present in version 1.0 namespace
    manifest = Element('manifest')
    base_url_elem = Element('{http://ns.adobe.com/f4m/1.0}baseURL')
    base_url_elem.text = 'http://example.com/base1'
    manifest.append(base_url_elem)
    assert get_base_url(manifest) == 'http://example.com/base1'

    # Test case 2: Base URL present in version 2.0 namespace
    manifest = Element('manifest')
    base_url_elem = Element('{http://ns.adobe.com/f4m/2.0}baseURL')
    base_url_elem.text = 'http://example.com/base2'
    manifest.append(base_url_elem)
    assert get_base_url(manifest) == 'http://example.com/base2'

    # Test case 3: No Base URL present
   

# Generated at 2024-06-04 21:28:25.575307
```python
    import io
    from unittest.mock import patch, MagicMock

    # Mocking necessary methods and attributes
    mock_ydl = MagicMock()
    mock_info_dict = {
        'url': 'http://example.com/manifest.f4m',
        'tbr': None,
        'extra_param_to_segment_url': None
    }
    mock_params = {'test': True}
    mock_self = F4mFD(mock_ydl, mock_params)

    mock_self.ydl.urlopen.return_value.read.return_value = b'<manifest></manifest>'
    mock_self.ydl.urlopen.return_value.geturl.return_value = 'http://example.com/manifest.f4m'
    mock_self._prepare_url = lambda info_dict, url: url
    mock_self._prepare_frag_download = lambda ctx: None
    mock_self._start_frag_download = lambda ctx: None
    mock_self._finish_frag_download = lambda ctx: None
    mock

# Generated at 2024-06-04 21:28:26.596559
```python
    f4mfd = F4mFD()
    assert f4mfd.FD_NAME == 'f4m'
    assert isinstance(f4mfd, FragmentFD)
```

# Generated at 2024-06-04 21:28:30.317695
```python
    data = (
        b'\x00'  # version
        b'\x00\x00\x00'  # flags
        b'\x00\x00\x00\x01'  # time scale
        b'\x01'  # quality entry count
        b'quality\x00'  # quality segment url modifier
        b'\x00\x00\x00\x01'  # fragments count
        b'\x00\x00\x00\x01'  # first
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # first_ts
        b'\x00\x00\x00\x01'  # duration
    )
    reader = FlvReader(data)
    result = reader.read_afrt()
    expected = {
        'fragments': [
            {
                'first': 1,
                'ts': 1,
                'duration': 1,
               

# Generated at 2024-06-04 21:28:35.254044
```python
    from xml.etree.ElementTree import Element

    # Test case 1: Base URL present in version 1.0 namespace
    manifest = Element('manifest')
    base_url_elem = Element('{http://ns.adobe.com/f4m/1.0}baseURL')
    base_url_elem.text = 'http://example.com/base1'
    manifest.append(base_url_elem)
    assert get_base_url(manifest) == 'http://example.com/base1'

    # Test case 2: Base URL present in version 2.0 namespace
    manifest = Element('manifest')
    base_url_elem = Element('{http://ns.adobe.com/f4m/2.0}baseURL')
    base_url_elem.text = 'http://example.com/base2'
    manifest.append(base_url_elem)
    assert get_base_url(manifest) == 'http://example.com/base2'

    # Test case 3: No base URL present
   

# Generated at 2024-06-04 21:28:39.672334
```python
    data = (
        b'\x00'  # version
        b'\x00\x00\x00'  # flags
        b'\x02'  # quality_entry_count
        b'quality1\x00'
        b'quality2\x00'
        b'\x00\x00\x00\x02'  # segment_run_count
        b'\x00\x00\x00\x01'  # first_segment
        b'\x00\x00\x00\x05'  # fragments_per_segment
        b'\x00\x00\x00\x02'  # first_segment
        b'\x00\x00\x00\x03'  # fragments_per_segment
    )
    reader = FlvReader(data)
    result = reader.read_asrt()
    expected = {
        'segment_run': [
            (1, 5),
            (2, 3),
        ],
    }
    assert result == expected, f

# Generated at 2024-06-04 21:28:40.737164
```python
    downloader = F4mFD()
    assert downloader.FD_NAME == 'f4m'
```

# Generated at 2024-06-04 21:28:45.489732
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData
        b'\x00'              # MetaData
        b'\x01'              # segments_count
        b

# Generated at 2024-06-04 21:28:49.375263
```python
    import io
    from unittest.mock import patch, MagicMock

    # Mocking necessary components
    mock_ydl = MagicMock()
    mock_info_dict = {
        'url': 'http://example.com/manifest.f4m',
        'tbr': None,
        'extra_param_to_segment_url': None
    }
    mock_params = {'test': True}

    # Mocking the response of urlopen
    mock_response = MagicMock()
    mock_response.read.return_value = b'<manifest></manifest>'
    mock_response.geturl.return_value = 'http://example.com/manifest.f4m'
    mock_ydl.urlopen.return_value = mock_response

    # Mocking the methods of F4mFD
    with patch('compat_etree_fromstring', return_value=MagicMock()), \
         patch('fix_xml_ampersands', return_value='<manifest></manifest>'), \
         patch('compat_urlparse.urljoin', return

# Generated at 2024-06-04 21:31:17.838017
```python
    from xml.etree.ElementTree import Element

    # Test case 1: Base URL present in version 1.0 namespace
    manifest = Element('manifest')
    base_url_elem = Element('{http://ns.adobe.com/f4m/1.0}baseURL')
    base_url_elem.text = 'http://example.com/'
    manifest.append(base_url_elem)
    assert get_base_url(manifest) == 'http://example.com/'

    # Test case 2: Base URL present in version 2.0 namespace
    manifest = Element('manifest')
    base_url_elem = Element('{http://ns.adobe.com/f4m/2.0}baseURL')
    base_url_elem.text = 'http://example.org/'
    manifest.append(base_url_elem)
    assert get_base_url(manifest) == 'http://example.org/'

    # Test case 3: No base URL present
    manifest = Element('manifest')


# Generated at 2024-06-04 21:31:21.970644
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier (empty string)
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData (empty string)
        b'\x00'              # MetaData (empty string)
        b'\x

# Generated at 2024-06-04 21:31:25.762229
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier (empty string)
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData (empty string)
        b'\x00'              # MetaData (empty string)
        b'\x

# Generated at 2024-06-04 21:31:30.215821
```python
    import io
    from unittest.mock import patch, MagicMock

    # Mocking necessary components
    mock_ydl = MagicMock()
    mock_ydl.urlopen.return_value.read.return_value = b'<manifest></manifest>'
    mock_ydl.urlopen.return_value.geturl.return_value = 'http://example.com/manifest.f4m'

    mock_info_dict = {
        'url': 'http://example.com/manifest.f4m',
        'tbr': None,
        'extra_param_to_segment_url': None
    }

    mock_params = {
        'test': False
    }

    mock_self = F4mFD(mock_ydl, mock_params)

    with patch('compat_etree_fromstring', return_value=MagicMock()), \
         patch('fix_xml_ampersands', return_value='<manifest></manifest>'), \
         patch('compat_urlparse.urljoin', return_value='http://example.com/segment'), \
        

# Generated at 2024-06-04 21:31:32.301922
```python
    data = (
        b'\x00\x00\x00\x10'  # size = 16
        b'test'              # type = 'test'
        b'\x01\x02\x03\x04\x05\x06\x07\x08'  # data
    )
    reader = FlvReader(data)
    box_size, box_type, box_data = reader.read_box_info()
    assert box_size == 16
    assert box_type == b'test'
    assert box_data == b'\x01\x02\x03\x04\x05\x06\x07\x08'
```

# Generated at 2024-06-04 21:31:35.939029
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData
        b'\x00'              # MetaData
        b'\x01'              # segments_count
        b

# Generated at 2024-06-04 21:31:40.371627
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData
        b'\x00'              # MetaData
        b'\x01'              # segments_count
        b

# Generated at 2024-06-04 21:31:43.465735
```python
    from xml.etree.ElementTree import Element

    # Test case 1: No encrypted media
    media = [Element('media', attrib={}), Element('media', attrib={})]
    result = remove_encrypted_media(media)
    assert len(result) == 2

    # Test case 2: All encrypted media
    media = [Element('media', attrib={'drmAdditionalHeaderId': '1'}), Element('media', attrib={'drmAdditionalHeaderSetId': '2'})]
    result = remove_encrypted_media(media)
    assert len(result) == 0

    # Test case 3: Mixed media
    media = [Element('media', attrib={'drmAdditionalHeaderId': '1'}), Element('media', attrib={}), Element('media', attrib={'drmAdditionalHeaderSetId': '2'})]
    result = remove_encrypted_media(media)
    assert len(result) == 1
   

# Generated at 2024-06-04 21:31:48.692469
```python
    import io
    from unittest.mock import patch, MagicMock

    # Mocking necessary methods and attributes
    with patch('builtins.open', new_callable=MagicMock), \
         patch('time.sleep', return_value=None), \
         patch('compat_urllib_parse_urlparse', return_value=MagicMock()), \
         patch('compat_etree_fromstring', return_value=MagicMock()), \
         patch('compat_b64decode', return_value=b''), \
         patch('compat_struct_pack', return_value=b'\x00\x00\x00\x00'), \
         patch('FlvReader.read_box_info', return_value=(0, b'mdat', b'')), \
         patch('FlvReader.read_abst', return_value={'segments': [], 'fragments': [], 'live': False}), \
         patch('FlvReader.read_asrt', return_value={'segment_run': [(1, 1)]}), \
         patch('FlvReader

# Generated at 2024-06-04 21:31:52.261993
```python
    data = (
        b'\x00'  # version
        b'\x00\x00\x00'  # flags
        b'\x00\x00\x00\x01'  # time scale
        b'\x01'  # quality entry count
        b'quality_entry\x00'  # quality segment URL modifier
        b'\x00\x00\x00\x01'  # fragments count
        b'\x00\x00\x00\x01'  # first
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # first_ts
        b'\x00\x00\x00\x01'  # duration
    )
    reader = FlvReader(data)
    result = reader.read_afrt()
    expected = {
        'fragments': [
            {
                'first': 1,
                'ts': 1,
                'duration': 1,


# Generated at 2024-06-04 21:33:11.885710
```python
    data = (
        b'\x00'  # version
        b'\x00\x00\x00'  # flags
        b'\x02'  # quality_entry_count
        b'quality1\x00'
        b'quality2\x00'
        b'\x00\x00\x00\x02'  # segment_run_count
        b'\x00\x00\x00\x01'  # first_segment
        b'\x00\x00\x00\x05'  # fragments_per_segment
        b'\x00\x00\x00\x02'  # first_segment
        b'\x00\x00\x00\x03'  # fragments_per_segment
    )
    reader = FlvReader(data)
    result = reader.read_asrt()
    expected = {
        'segment_run': [
            (1, 5),
            (2, 3),
        ],
    }
    assert result == expected, f

# Generated at 2024-06-04 21:33:15.500469
```python
    data = (
        b'\x00\x00\x00\x10'  # size = 16
        b'test'              # type = 'test'
        b'\x01\x02\x03\x04\x05\x06\x07\x08'  # data
    )
    reader = FlvReader(data)
    box_size, box_type, box_data = reader.read_box_info()
    assert box_size == 16
    assert box_type == b'test'
    assert box_data == b'\x01\x02\x03\x04\x05\x06\x07\x08'
```

# Generated at 2024-06-04 21:33:20.474090
```python
    from xml.etree.ElementTree import Element

    # Test case 1: Base URL present in version 1.0 namespace
    manifest = Element('manifest')
    base_url_elem = Element('{http://ns.adobe.com/f4m/1.0}baseURL')
    base_url_elem.text = 'http://example.com/base1'
    manifest.append(base_url_elem)
    assert get_base_url(manifest) == 'http://example.com/base1'

    # Test case 2: Base URL present in version 2.0 namespace
    manifest = Element('manifest')
    base_url_elem = Element('{http://ns.adobe.com/f4m/2.0}baseURL')
    base_url_elem.text = 'http://example.com/base2'
    manifest.append(base_url_elem)
    assert get_base_url(manifest) == 'http://example.com/base2'

    # Test case 3: No base URL present
   

# Generated at 2024-06-04 21:33:24.785998
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData
        b'\x00'              # MetaData
        b'\x01'              # segments_count
        b

# Generated at 2024-06-04 21:33:28.839082
```python
    data = (
        b'\x00'  # version
        b'\x00\x00\x00'  # flags
        b'\x00\x00\x00\x01'  # time scale
        b'\x01'  # quality entry count
        b'quality_entry\x00'  # quality segment URL modifier
        b'\x00\x00\x00\x01'  # fragments count
        b'\x00\x00\x00\x01'  # first
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # first_ts
        b'\x00\x00\x00\x01'  # duration
    )
    reader = FlvReader(data)
    result = reader.read_afrt()
    expected = {
        'fragments': [
            {
                'first': 1,
                'ts': 1,
                'duration': 1,


# Generated at 2024-06-04 21:33:32.479739
```python
    boot_info = {
        'segments': [{'segment_run': [(1, 3), (2, 2)]}],
        'fragments': [{'fragments': [
            {'first': 1, 'ts': 0, 'duration': 1000, 'discontinuity_indicator': None},
            {'first': 4, 'ts': 3000, 'duration': 1000, 'discontinuity_indicator': None}
        ]}],
        'live': False
    }
    expected_output = [(1, 1), (1, 2), (1, 3), (2, 4), (2, 5)]
    assert build_fragments_list(boot_info) == expected_output

    boot_info_live = {
        'segments': [{'segment_run': [(1, 4294967295)]}],
        'fragments': [{'fragments': [
            {'first': 1, 'ts': 

# Generated at 2024-06-04 21:33:35.990911
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier (empty string)
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData (empty string)
        b'\x00'              # MetaData (empty string)
        b'\x

# Generated at 2024-06-04 21:33:39.940372
```python
    data = (
        b'\x00\x00\x00\x00'  # version and flags
        b'\x00\x00\x00\x01'  # BootstrapinfoVersion
        b'\x20'              # flags (live)
        b'\x00\x00\x00\x01'  # time scale
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # CurrentMediaTime
        b'\x00\x00\x00\x00\x00\x00\x00\x01'  # SmpteTimeCodeOffset
        b'\x00'              # MovieIdentifier (empty string)
        b'\x00'              # ServerEntryTable count
        b'\x00'              # QualityEntryTable count
        b'\x00'              # DrmData (empty string)
        b'\x00'              # MetaData (empty string)
        b'\x

# Generated at 2024-06-04 21:33:43.209889
```python
    boot_info = {
        'segments': [{'segment_run': [(1, 3), (2, 2)]}],
        'fragments': [{'fragments': [
            {'first': 1, 'ts': 0, 'duration': 1000, 'discontinuity_indicator': None},
            {'first': 4, 'ts': 3000, 'duration': 1000, 'discontinuity_indicator': None}
        ]}],
        'live': False
    }
    expected_output = [(1, 1), (1, 2), (1, 3), (2, 4), (2, 5)]
    assert build_fragments_list(boot_info) == expected_output

    boot_info_live = {
        'segments': [{'segment_run': [(1, 4294967295)]}],
        'fragments': [{'fragments': [
            {'first': 1, 'ts': 

# Generated at 2024-06-04 21:33:47.435147
```python
    import io
    from unittest.mock import patch, MagicMock

    # Mocking necessary methods and attributes
    with patch('builtins.open', new_callable=MagicMock), \
         patch('time.sleep', return_value=None), \
         patch('compat_urllib_parse_urlparse', return_value=MagicMock()), \
         patch('compat_etree_fromstring', return_value=MagicMock()), \
         patch('compat_b64decode', return_value=b''), \
         patch('compat_struct_pack', return_value=b'\x00\x00\x00\x00'), \
         patch('FlvReader.read_box_info', return_value=(0, b'mdat', b'')), \
         patch('FlvReader.read_abst', return_value={'segments': [], 'fragments': [], 'live': False}), \
         patch('FlvReader.read_asrt', return_value={'segment_run': [(1, 1)]}), \
         patch('FlvReader