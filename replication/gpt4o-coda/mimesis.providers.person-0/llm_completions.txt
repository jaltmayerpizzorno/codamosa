

# Generated at 2024-06-02 21:12:42.778280
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email
    assert email.split('@')[1] in EMAIL_DOMAINS

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email
    assert email.split('@')[1] in custom_domains

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2

    # Test with seeded provider and unique=True should raise ValueError
    person.seed = 12345
    try:
        person.email(unique=True)
    except ValueError as e:
        assert str(e) == 'You cannot use «unique» parameter with a seeded provider'
    else:
        assert False, "Expected ValueError not raised"
```

# Generated at 2024-06-02 21:12:45.908024
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected surname to be in {surnames}, but got {result}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones', 'Brown']
    }
    person._data['surname'] = gender_surnames

    result_male = person.surname(Gender.MALE)
    assert result_male in gender_surnames[Gender.MALE], f"Expected surname to be in {gender_surnames[Gender.MALE]}, but got {result_male}"

    result_female = person.surname(Gender

# Generated at 2024-06-02 21:12:48.561074
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str), "Nationality should be a string"
    assert nationality in person._data['nationality'], "Nationality should be in the predefined list"

    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str), "Nationality should be a string"
        assert nationality in person._data['nationality'][gender], "Nationality should be in the predefined list for the given gender"
```

# Generated at 2024-06-02 21:12:51.566309
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)  # Seed for reproducibility

    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"

    # Test with gender
    person._data['surname'] = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    surname_male = person.surname(Gender.MALE)
    assert surname_male in person._data['surname'][Gender.MALE], f"Expected surname to be in {person._data['surname'][Gender.MALE]}, but got {surname_male}"

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in person

# Generated at 2024-06-02 21:12:54.316892
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random()

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    person._data['surname'] = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones', 'Brown']
    }
    surname_male = person.surname(Gender.MALE)
    assert surname_male in person._data['surname'][Gender.MALE]

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in person._data['surname'][Gender.FEMALE]
```

# Generated at 2024-06-02 21:12:58.861815
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Male nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Female nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:13:03.177638
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in EMAIL_DOMAINS, "Email domain should be in default domains"

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in custom_domains, "Email domain should be in custom domains"

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2, "Unique emails should be different"

    # Test exception when unique is True and seed is set
    person.seed = 12345
    try:
        person.email(unique=True)
        assert False, "ValueError should

# Generated at 2024-06-02 21:13:07.270601
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Male nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Female nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:13:10.642589
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random()

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones', 'Brown']
    }
    person._data['surname'] = gender_surnames

    male_surname = person.surname(Gender.MALE)
    assert male_surname in gender_surnames[Gender.MALE]

    female_surname = person.surname(Gender.FEMALE)
    assert female_surname in gender_surnames[Gender.FEMALE]

    # Test with invalid gender
    try:
        person.surname('invalid_gender')
    except NonEnumerableError

# Generated at 2024-06-02 21:13:13.782482
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Male nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Female nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:13:31.129243
```python
    person = Person()
    surnames = person._data['surname']

    # Test with no gender specified
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"

    # Test with male gender
    male_surnames = surnames[Gender.MALE]
    surname = person.surname(Gender.MALE)
    assert surname in male_surnames, f"Expected surname to be in {male_surnames}, but got {surname}"

    # Test with female gender
    female_surnames = surnames[Gender.FEMALE]
    surname = person.surname(Gender.FEMALE)
    assert surname in female_surnames, f"Expected surname to be in {female_surnames}, but got {surname}"
```

# Generated at 2024-06-02 21:13:35.971093
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected one of {surnames}, but got {result}"

    # Test with gender
    surnames_by_gender = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data = {'surname': surnames_by_gender}

    result_male = person.surname(Gender.MALE)
    assert result_male in surnames_by_gender[Gender.MALE], f"Expected one of {surnames_by_gender[Gender.MALE]}, but got {result_male}"

    result_female = person.surname(Gender.FEMALE)
    assert result_female in surnames

# Generated at 2024-06-02 21:13:39.453539
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    
    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"
    
    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones', 'Brown']
    }
    person._data['surname'] = gender_surnames
    
    male_surname = person.surname(Gender.MALE)
    assert male_surname in gender_surnames[Gender.MALE], f"Expected male surname to be in {gender_surnames[Gender.MALE]}, but got {male_surname}"
    
    female_surname = person.surname(Gender.FEMALE)
   

# Generated at 2024-06-02 21:13:44.442468
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected one of {surnames}, but got {result}"

    # Test with gender
    surnames_by_gender = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = surnames_by_gender

    result_male = person.surname(Gender.MALE)
    assert result_male in surnames_by_gender[Gender.MALE], f"Expected one of {surnames_by_gender[Gender.MALE]}, but got {result_male}"

    result_female = person.surname(Gender.FEMALE)
    assert result_female in surnames

# Generated at 2024-06-02 21:13:48.010353
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    
    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"
    
    # Test with gender
    surnames_by_gender = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones', 'Brown']
    }
    person._data['surname'] = surnames_by_gender
    
    male_surname = person.surname(Gender.MALE)
    assert male_surname in surnames_by_gender[Gender.MALE], f"Expected male surname to be in {surnames_by_gender[Gender.MALE]}, but got {male_surname}"
    
    female_surname = person.surname(Gender.FEMALE)


# Generated at 2024-06-02 21:13:51.162183
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)  # Seed for reproducibility

    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = gender_surnames

    surname_male = person.surname(Gender.MALE)
    assert surname_male in gender_surnames[Gender.MALE], f"Expected surname to be in {gender_surnames[Gender.MALE]}, but got {surname_male}"

    surname_female = person.surname(Gender.FEMA

# Generated at 2024-06-02 21:13:56.175942
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    
    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"
    
    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones']
    }
    person._data['surname'] = gender_surnames
    
    male_surname = person.surname(Gender.MALE)
    assert male_surname in gender_surnames[Gender.MALE], f"Expected male surname to be in {gender_surnames[Gender.MALE]}, but got {male_surname}"
    
    female_surname = person.surname(Gender.FEMALE)
    assert female_s

# Generated at 2024-06-02 21:13:58.624452
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality'].values() if isinstance(person._data['nationality'], dict) else person._data['nationality']
    
    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        if isinstance(person._data['nationality'], dict):
            assert nationality in person._data['nationality'][gender]
        else:
            assert nationality in person._data['nationality']
```

# Generated at 2024-06-02 21:14:01.715299
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected one of {surnames}, but got {result}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = gender_surnames

    result = person.surname(Gender.MALE)
    assert result in gender_surnames[Gender.MALE], f"Expected one of {gender_surnames[Gender.MALE]}, but got {result}"

    result = person.surname(Gender.FEMALE)
    assert result in gender_surnames[Gender.FEMALE], f"Expected

# Generated at 2024-06-02 21:14:04.999944
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality'].values() if isinstance(person._data['nationality'], dict) else person._data['nationality']
    
    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert isinstance(nationality_male, str)
    if isinstance(person._data['nationality'], dict):
        assert nationality_male in person._data['nationality'][Gender.MALE]
    
    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert isinstance(nationality_female, str)
    if isinstance(person._data['nationality'], dict):
        assert nationality_female in person._data['nationality'][Gender.FEMALE]
    
    # Test with invalid gender
    try

# Generated at 2024-06-02 21:14:18.321349
```python
    person = Person()
    
    # Test with default parameters
    email = person.email()
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in EMAIL_DOMAINS, "Email domain should be in the default domains list"

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in custom_domains, "Email domain should be in the custom domains list"

    # Test with unique parameter
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2, "Unique emails should be different"

    # Test with seeded provider and unique parameter
    person.seed = 12345
    try:
        person.email(unique=True)
    except ValueError as e:


# Generated at 2024-06-02 21:14:21.447175
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected one of {surnames}, but got {result}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = gender_surnames

    result_male = person.surname(Gender.MALE)
    assert result_male in gender_surnames[Gender.MALE], f"Expected one of {gender_surnames[Gender.MALE]}, but got {result_male}"

    result_female = person.surname(Gender.FEMALE)
    assert result_female in gender_surn

# Generated at 2024-06-02 21:14:24.959741
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], f"Unexpected nationality: {nationality}"
    
    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], f"Unexpected male nationality: {nationality_male}"
    
    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], f"Unexpected female nationality: {nationality_female}"
    
    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:14:29.513196
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email and '.' in email.split('@')[1], "Email should contain '@' and a domain"

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert any(email.endswith(domain) for domain in custom_domains), "Email should end with one of the custom domains"

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2, "Unique emails should be different"

    # Test exception when unique is True and seed is set
    person.seed = 12345
    try:
        person.email(unique=True)
        assert False, "ValueError should be raised when unique is True and seed is set"
    except ValueError:
        pass
```

# Generated at 2024-06-02 21:14:32.829184
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email
    assert email.split('@')[1] in EMAIL_DOMAINS

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email
    assert email.split('@')[1] in custom_domains

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2

    # Test with seeded provider and unique=True should raise ValueError
    person.seed = 12345
    try:
        person.email(unique=True)
    except ValueError as e:
        assert str(e) == 'You cannot use «unique» parameter with a seeded provider'
```

# Generated at 2024-06-02 21:14:36.564417
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email and '.' in email.split('@')[1], "Email should contain '@' and a domain"

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert any(email.endswith(domain) for domain in custom_domains), "Email should end with one of the custom domains"

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2, "Unique emails should be different"

    # Test exception when unique is True and seed is set
    person.seed = 12345
    try:
        person.email(unique=True)
        assert False, "ValueError should be raised when unique is True and seed is set"
    except ValueError:
        pass
```

# Generated at 2024-06-02 21:14:39.593464
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random()

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones', 'Brown']
    }
    person._data['surname'] = gender_surnames

    male_surname = person.surname(Gender.MALE)
    assert male_surname in gender_surnames[Gender.MALE]

    female_surname = person.surname(Gender.FEMALE)
    assert female_surname in gender_surnames[Gender.FEMALE]
```

# Generated at 2024-06-02 21:14:42.685915
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random()

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    person._data['surname'] = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones']
    }
    surname_male = person.surname(Gender.MALE)
    assert surname_male in person._data['surname'][Gender.MALE]

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in person._data['surname'][Gender.FEMALE]

    # Test with invalid gender
    try:
        person.surname('invalid_gender')
    except NonEnumerableError:
        pass
    else:
        assert False, "

# Generated at 2024-06-02 21:14:45.759533
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:14:48.222234
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality'].values() if isinstance(person._data['nationality'], dict) else person._data['nationality']
    
    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        assert nationality in person._data['nationality'][gender] if isinstance(person._data['nationality'], dict) else person._data['nationality']
```

# Generated at 2024-06-02 21:15:08.026208
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality']

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert isinstance(nationality_male, str)
    assert nationality_male in person._data['nationality'][Gender.MALE]

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert isinstance(nationality_female, str)
    assert nationality_female in person._data['nationality'][Gender.FEMALE]

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError"
```

# Generated at 2024-06-02 21:15:11.629696
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:15:14.783717
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)  # Seed for reproducibility

    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = gender_surnames

    surname_male = person.surname(Gender.MALE)
    assert surname_male in gender_surnames[Gender.MALE], f"Expected surname to be in {gender_surnames[Gender.MALE]}, but got {surname_male}"

    surname_female = person.surname(Gender.FEMA

# Generated at 2024-06-02 21:15:19.751302
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in EMAIL_DOMAINS, "Email domain should be in default domains"

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in custom_domains, "Email domain should be in custom domains"

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2, "Unique emails should be different"

    # Test with seeded provider and unique=True should raise ValueError
    person.seed = 12345
    try:
        person.email(unique=True)
    except ValueError as e:


# Generated at 2024-06-02 21:15:22.429284
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Male nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Female nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:15:25.549252
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)  # Seed for reproducibility

    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = gender_surnames

    surname_male = person.surname(Gender.MALE)
    assert surname_male in gender_surnames[Gender.MALE], f"Expected surname to be in {gender_surnames[Gender.MALE]}, but got {surname_male}"

    surname_female = person.surname(Gender.FEMA

# Generated at 2024-06-02 21:15:27.142130
```python
    person = Person()
    genders = [None, Gender.MALE, Gender.FEMALE]

    for gender in genders:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        assert nationality in person._data['nationality'] if not isinstance(person._data['nationality'], dict) else person._data['nationality'][gender]
```

# Generated at 2024-06-02 21:15:31.001059
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)  # Seed for reproducibility

    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = gender_surnames

    surname_male = person.surname(Gender.MALE)
    assert surname_male in gender_surnames[Gender.MALE], f"Expected surname to be in {gender_surnames[Gender.MALE]}, but got {surname_male}"

    surname_female = person.surname(Gender.FEMA

# Generated at 2024-06-02 21:15:33.355453
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random()

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    person._data['surname'] = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones']
    }
    surname_male = person.surname(Gender.MALE)
    surname_female = person.surname(Gender.FEMALE)
    assert surname_male in person._data['surname'][Gender.MALE]
    assert surname_female in person._data['surname'][Gender.FEMALE]
```

# Generated at 2024-06-02 21:15:36.442321
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    surnames_by_gender = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = surnames_by_gender

    surname_male = person.surname(Gender.MALE)
    assert surname_male in surnames_by_gender[Gender.MALE]

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in surnames_by_gender[Gender.FEMALE]
```

# Generated at 2024-06-02 21:16:13.112208
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality'].values() if isinstance(person._data['nationality'], dict) else person._data['nationality']
    
    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        if isinstance(person._data['nationality'], dict):
            assert nationality in person._data['nationality'][gender]
        else:
            assert nationality in person._data['nationality']
```

# Generated at 2024-06-02 21:16:17.064379
```python
    person = Person()
    nationalities = person._data['nationality']

    # Test without gender
    nationality = person.nationality()
    assert nationality in nationalities, f"Nationality {nationality} not in {nationalities}"

    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        if isinstance(nationalities, dict):
            assert nationality in nationalities[gender], f"Nationality {nationality} not in {nationalities[gender]}"
        else:
            assert nationality in nationalities, f"Nationality {nationality} not in {nationalities}"
```

# Generated at 2024-06-02 21:16:19.719056
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = gender_surnames

    surname_male = person.surname(Gender.MALE)
    assert surname_male in gender_surnames[Gender.MALE]

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in gender_surnames[Gender.FEMALE]
```

# Generated at 2024-06-02 21:16:21.825159
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality'].values() if isinstance(person._data['nationality'], dict) else person._data['nationality']
    
    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        if isinstance(person._data['nationality'], dict):
            assert nationality in person._data['nationality'][gender]
        else:
            assert nationality in person._data['nationality']
```

# Generated at 2024-06-02 21:16:24.712420
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random(0)  # Seed for reproducibility

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected one of {surnames}, but got {result}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones']
    }
    person._data['surname'] = gender_surnames

    result_male = person.surname(Gender.MALE)
    assert result_male in gender_surnames[Gender.MALE], f"Expected one of {gender_surnames[Gender.MALE]}, but got {result_male}"

    result_female = person.surname(Gender

# Generated at 2024-06-02 21:16:26.713302
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str), "Nationality should be a string"
    assert nationality in person._data['nationality'], "Nationality should be in the predefined list"

    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str), "Nationality should be a string"
        assert nationality in person._data['nationality'][gender], "Nationality should be in the predefined list for the given gender"
```

# Generated at 2024-06-02 21:16:30.031443
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Male nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Female nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:16:32.838267
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email
    assert email.split('@')[1] in EMAIL_DOMAINS

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email
    assert email.split('@')[1] in custom_domains

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2

    # Test with seeded provider and unique=True should raise ValueError
    person.seed = 12345
    try:
        person.email(unique=True)
    except ValueError as e:
        assert str(e) == 'You cannot use «unique» parameter with a seeded provider'
    else:
        assert False, "Expected ValueError not raised"
```

# Generated at 2024-06-02 21:16:35.912415
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)  # Seed for reproducibility

    # Test without gender
    surname = person.surname()
    assert surname in surnames, f"Expected surname to be in {surnames}, but got {surname}"

    # Test with gender
    person._data['surname'] = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    surname_male = person.surname(Gender.MALE)
    assert surname_male in person._data['surname'][Gender.MALE], f"Expected surname to be in {person._data['surname'][Gender.MALE]}, but got {surname_male}"

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in person

# Generated at 2024-06-02 21:16:38.606220
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random()

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    person._data['surname'] = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones']
    }
    surname_male = person.surname(Gender.MALE)
    assert surname_male in person._data['surname'][Gender.MALE]

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in person._data['surname'][Gender.FEMALE]
```

# Generated at 2024-06-02 21:17:45.272668
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected one of {surnames}, but got {result}"

    # Test with gender
    surnames_by_gender = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data = {'surname': surnames_by_gender}

    result_male = person.surname(Gender.MALE)
    assert result_male in surnames_by_gender[Gender.MALE], f"Expected one of {surnames_by_gender[Gender.MALE]}, but got {result_male}"

    result_female = person.surname(Gender.FEMALE)
    assert result_female in surnames

# Generated at 2024-06-02 21:17:48.254113
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in EMAIL_DOMAINS, "Email domain should be in default domains"

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in custom_domains, "Email domain should be in custom domains"

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2, "Unique emails should be different"

    # Test exception when unique is True and seed is set
    person.seed = 12345
    try:
        person.email(unique=True)
        assert False, "ValueError should

# Generated at 2024-06-02 21:17:51.221172
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random()

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones', 'Brown']
    }
    person._data['surname'] = gender_surnames

    male_surname = person.surname(Gender.MALE)
    assert male_surname in gender_surnames[Gender.MALE]

    female_surname = person.surname(Gender.FEMALE)
    assert female_surname in gender_surnames[Gender.FEMALE]

    # Test with invalid gender
    try:
        person.surname('invalid_gender')
    except NonEnumerableError

# Generated at 2024-06-02 21:17:54.249972
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in EMAIL_DOMAINS, "Email domain should be in default domains"

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in custom_domains, "Email domain should be in custom domains"

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2, "Unique emails should be different"

    # Test with seeded provider and unique=True should raise ValueError
    person.seed = 12345
    try:
        person.email(unique=True)
        assert False, "Expected Value

# Generated at 2024-06-02 21:17:57.909175
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Male nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Female nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:18:01.397630
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected one of {surnames}, but got {result}"

    # Test with gender
    gender_surnames = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones', 'Brown']
    }
    person._data['surname'] = gender_surnames

    result_male = person.surname(Gender.MALE)
    assert result_male in gender_surnames[Gender.MALE], f"Expected one of {gender_surnames[Gender.MALE]}, but got {result_male}"

    result_female = person.surname(Gender.FEMALE)


# Generated at 2024-06-02 21:18:05.247151
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], f"Unexpected nationality: {nationality}"
    
    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], f"Unexpected male nationality: {nationality_male}"
    
    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], f"Unexpected female nationality: {nationality_female}"
    
    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:18:09.197795
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with male gender
    nationality_male = person.nationality(Gender.MALE)
    assert nationality_male in person._data['nationality'][Gender.MALE], "Male nationality not in the list of male nationalities"

    # Test with female gender
    nationality_female = person.nationality(Gender.FEMALE)
    assert nationality_female in person._data['nationality'][Gender.FEMALE], "Female nationality not in the list of female nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```

# Generated at 2024-06-02 21:18:11.790968
```python
    person = Person()
    nationalities = person._data['nationality']

    # Test without gender
    nationality = person.nationality()
    assert nationality in nationalities, f"Nationality {nationality} not in {nationalities}"

    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        if isinstance(nationalities, dict):
            assert nationality in nationalities[gender], f"Nationality {nationality} not in {nationalities[gender]}"
        else:
            assert nationality in nationalities, f"Nationality {nationality} not in {nationalities}"
```

# Generated at 2024-06-02 21:18:16.920189
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    result = person.surname()
    assert result in surnames, f"Expected one of {surnames}, but got {result}"

    # Test with gender
    surnames_by_gender = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = surnames_by_gender

    result_male = person.surname(Gender.MALE)
    assert result_male in surnames_by_gender[Gender.MALE], f"Expected one of {surnames_by_gender[Gender.MALE]}, but got {result_male}"

    result_female = person.surname(Gender.FEMALE)
    assert result_female in surnames

# Generated at 2024-06-02 21:20:33.227769
```python
    person = Person()
    genders = [None, Gender.MALE, Gender.FEMALE]

    for gender in genders:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        assert nationality in person._data['nationality'][gender] if isinstance(person._data['nationality'], dict) else person._data['nationality']
```

# Generated at 2024-06-02 21:20:35.631357
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality'].values() if isinstance(person._data['nationality'], dict) else person._data['nationality']
    
    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        if isinstance(person._data['nationality'], dict):
            assert nationality in person._data['nationality'][gender]
        else:
            assert nationality in person._data['nationality']
```

# Generated at 2024-06-02 21:20:38.613921
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown']
    person._data = {'surname': surnames}
    person.random = random.Random()

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    person._data['surname'] = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Jones']
    }
    surname_male = person.surname(Gender.MALE)
    assert surname_male in person._data['surname'][Gender.MALE]

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in person._data['surname'][Gender.FEMALE]
```

# Generated at 2024-06-02 21:20:40.967564
```python
    person = Person()
    nationalities = person._data['nationality']

    # Test without gender
    nationality = person.nationality()
    assert nationality in nationalities, f"Nationality {nationality} not in {nationalities}"

    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        if isinstance(nationalities, dict):
            assert nationality in nationalities[gender], f"Nationality {nationality} not in {nationalities[gender]}"
        else:
            assert nationality in nationalities, f"Nationality {nationality} not in {nationalities}"
```

# Generated at 2024-06-02 21:20:43.593786
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality'].values() if isinstance(person._data['nationality'], dict) else person._data['nationality']
    
    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        if isinstance(person._data['nationality'], dict):
            assert nationality in person._data['nationality'][gender]
        else:
            assert nationality in person._data['nationality']
```

# Generated at 2024-06-02 21:20:47.152434
```python
    person = Person()
    
    # Test with default domains
    email = person.email()
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in EMAIL_DOMAINS, "Email domain should be in default domains"

    # Test with custom domains
    custom_domains = ['example.com', 'test.org']
    email = person.email(domains=custom_domains)
    assert '@' in email, "Email should contain '@'"
    assert email.split('@')[1] in custom_domains, "Email domain should be in custom domains"

    # Test unique email generation
    email1 = person.email(unique=True)
    email2 = person.email(unique=True)
    assert email1 != email2, "Unique emails should be different"

    # Test with seeded provider and unique=True should raise ValueError
    person.seed = 12345
    try:
        person.email(unique=True)
    except ValueError as e:


# Generated at 2024-06-02 21:20:50.123677
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    surname = person.surname()
    assert surname in surnames

    # Test with gender
    surnames_by_gender = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    person._data['surname'] = surnames_by_gender

    surname_male = person.surname(Gender.MALE)
    assert surname_male in surnames_by_gender[Gender.MALE]

    surname_female = person.surname(Gender.FEMALE)
    assert surname_female in surnames_by_gender[Gender.FEMALE]
```

# Generated at 2024-06-02 21:20:53.005970
```python
    person = Person()
    surnames = ['Smith', 'Johnson', 'Williams']
    person._data = {'surname': surnames}
    person.random = random.Random(0)

    # Test without gender
    assert person.surname() in surnames

    # Test with gender
    person._data['surname'] = {
        Gender.MALE: ['Smith', 'Johnson'],
        Gender.FEMALE: ['Williams', 'Brown']
    }
    assert person.surname(Gender.MALE) in ['Smith', 'Johnson']
    assert person.surname(Gender.FEMALE) in ['Williams', 'Brown']

    # Test with invalid gender
    try:
        person.surname('invalid_gender')
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError"
```

# Generated at 2024-06-02 21:20:55.326874
```python
    person = Person()
    
    # Test without gender
    nationality = person.nationality()
    assert isinstance(nationality, str)
    assert nationality in person._data['nationality'].values() if isinstance(person._data['nationality'], dict) else person._data['nationality']
    
    # Test with gender
    for gender in Gender:
        nationality = person.nationality(gender)
        assert isinstance(nationality, str)
        if isinstance(person._data['nationality'], dict):
            assert nationality in person._data['nationality'][gender]
        else:
            assert nationality in person._data['nationality']
```

# Generated at 2024-06-02 21:20:57.926488
```python
    person = Person()
    
    # Test with no gender specified
    nationality = person.nationality()
    assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with gender specified
    for gender in Gender:
        nationality = person.nationality(gender)
        if isinstance(person._data['nationality'], dict):
            assert nationality in person._data['nationality'][gender], f"Nationality not in the list of nationalities for gender {gender}"
        else:
            assert nationality in person._data['nationality'], "Nationality not in the list of nationalities"

    # Test with invalid gender
    try:
        person.nationality("invalid_gender")
    except NonEnumerableError:
        pass
    else:
        assert False, "Expected NonEnumerableError for invalid gender"
```