

# Generated at 2024-06-02 17:19:56.935283
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:20:04.790993
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:20:06.440330
```python
    manager = PluginManager()
    
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    
    expected_mapping = {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
    
    assert manager.get_auth_plugin_mapping() == expected_mapping
```

# Generated at 2024-06-02 17:20:09.230701
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:20:10.710799
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:20:12.853652
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    manager = PluginManager()
    manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    assert MockPlugin in manager.filter(BasePlugin)
    assert MockAuthPlugin in manager.filter(AuthPlugin)
    assert MockFormatterPlugin in manager.filter(FormatterPlugin)
    assert MockPlugin not in manager.filter(AuthPlugin)
    assert MockAuthPlugin not in manager.filter(FormatterPlugin)
    assert MockFormatterPlugin not in manager.filter(AuthPlugin)
```

# Generated at 2024-06-02 17:20:15.353098
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:20:18.285941
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:20:20.244802
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:20:22.230948
```python
    manager = PluginManager()
    
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    
    expected_mapping = {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
    
    assert manager.get_auth_plugin_mapping() == expected_mapping
```

# Generated at 2024-06-02 17:20:32.170479
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:20:36.452308
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    plugin_manager = PluginManager()
    plugin_manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    # Test filtering by BasePlugin
    base_plugins = plugin_manager.filter(BasePlugin)
    assert MockPlugin in base_plugins
    assert MockAuthPlugin in base_plugins
    assert MockFormatterPlugin in base_plugins

    # Test filtering by AuthPlugin
    auth_plugins = plugin_manager.filter(AuthPlugin)
    assert MockAuthPlugin in auth_plugins
    assert MockPlugin not in auth_plugins
    assert MockFormatterPlugin not in auth_plugins

    # Test filtering by FormatterPlugin
    formatter_plugins = plugin_manager.filter(FormatterPlugin)
    assert MockFormatterPlugin in formatter_plugins
    assert MockPlugin not in formatter_plugins
    assert MockAuthPlugin not in formatter_plugins
```

# Generated at 2024-06-02 17:20:37.608774
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0
    for plugin in manager:
        assert isinstance(plugin, BasePlugin)
        assert hasattr(plugin, 'package_name')
```

# Generated at 2024-06-02 17:20:41.213561
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    manager = PluginManager()
    manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    assert MockPlugin in manager.filter(BasePlugin)
    assert MockAuthPlugin in manager.filter(AuthPlugin)
    assert MockFormatterPlugin in manager.filter(FormatterPlugin)
    assert MockPlugin not in manager.filter(AuthPlugin)
    assert MockAuthPlugin not in manager.filter(FormatterPlugin)
    assert MockFormatterPlugin not in manager.filter(AuthPlugin)
```

# Generated at 2024-06-02 17:20:44.270978
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    manager = PluginManager()
    manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    assert MockPlugin in manager.filter(BasePlugin)
    assert MockAuthPlugin in manager.filter(AuthPlugin)
    assert MockFormatterPlugin in manager.filter(FormatterPlugin)
    assert MockPlugin not in manager.filter(AuthPlugin)
    assert MockAuthPlugin not in manager.filter(FormatterPlugin)
    assert MockFormatterPlugin not in manager.filter(AuthPlugin)
```

# Generated at 2024-06-02 17:20:45.773448
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:20:46.991768
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0
    for plugin in manager:
        assert isinstance(plugin, BasePlugin)
        assert hasattr(plugin, 'package_name')
```

# Generated at 2024-06-02 17:20:48.861875
```python
    manager = PluginManager()
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    auth_plugin_mapping = manager.get_auth_plugin_mapping()
    
    assert auth_plugin_mapping['mock1'] is MockAuthPlugin1
    assert auth_plugin_mapping['mock2'] is MockAuthPlugin2
```

# Generated at 2024-06-02 17:20:51.751833
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    manager = PluginManager()
    manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    assert MockPlugin in manager.filter(BasePlugin)
    assert MockAuthPlugin in manager.filter(AuthPlugin)
    assert MockFormatterPlugin in manager.filter(FormatterPlugin)
    assert MockPlugin not in manager.filter(AuthPlugin)
    assert MockAuthPlugin not in manager.filter(FormatterPlugin)
    assert MockFormatterPlugin not in manager.filter(AuthPlugin)
```

# Generated at 2024-06-02 17:20:54.984511
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:21:18.032148
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    manager = PluginManager()
    manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    assert MockPlugin in manager.filter(BasePlugin)
    assert MockAuthPlugin in manager.filter(AuthPlugin)
    assert MockFormatterPlugin in manager.filter(FormatterPlugin)
    assert MockPlugin not in manager.filter(AuthPlugin)
    assert MockAuthPlugin not in manager.filter(FormatterPlugin)
    assert MockFormatterPlugin not in manager.filter(AuthPlugin)
```

# Generated at 2024-06-02 17:21:21.057002
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:21:22.592003
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:21:25.015953
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    manager = PluginManager()
    manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    assert MockPlugin in manager.filter(BasePlugin)
    assert MockAuthPlugin in manager.filter(AuthPlugin)
    assert MockFormatterPlugin in manager.filter(FormatterPlugin)
    assert MockPlugin not in manager.filter(AuthPlugin)
    assert MockAuthPlugin not in manager.filter(FormatterPlugin)
    assert MockFormatterPlugin not in manager.filter(AuthPlugin)
```

# Generated at 2024-06-02 17:21:27.025317
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    manager = PluginManager()
    manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    assert MockPlugin in manager.filter(BasePlugin)
    assert MockAuthPlugin in manager.filter(AuthPlugin)
    assert MockFormatterPlugin in manager.filter(FormatterPlugin)
    assert MockPlugin not in manager.filter(AuthPlugin)
    assert MockAuthPlugin not in manager.filter(FormatterPlugin)
    assert MockFormatterPlugin not in manager.filter(AuthPlugin)
```

# Generated at 2024-06-02 17:21:29.660001
```python
    class MockPlugin(BasePlugin):
        pass

    class MockAuthPlugin(AuthPlugin):
        pass

    class MockFormatterPlugin(FormatterPlugin):
        pass

    manager = PluginManager()
    manager.register(MockPlugin, MockAuthPlugin, MockFormatterPlugin)

    assert MockPlugin in manager.filter(BasePlugin)
    assert MockAuthPlugin in manager.filter(AuthPlugin)
    assert MockFormatterPlugin in manager.filter(FormatterPlugin)
    assert MockPlugin not in manager.filter(AuthPlugin)
    assert MockAuthPlugin not in manager.filter(FormatterPlugin)
    assert MockFormatterPlugin not in manager.filter(AuthPlugin)
```

# Generated at 2024-06-02 17:21:31.362493
```python
    manager = PluginManager()
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    auth_plugin_mapping = manager.get_auth_plugin_mapping()
    
    assert auth_plugin_mapping == {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
```

# Generated at 2024-06-02 17:21:32.589119
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
```

# Generated at 2024-06-02 17:21:36.155230
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:21:37.717035
```python
    manager = PluginManager()
    
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    
    expected_mapping = {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
    
    assert manager.get_auth_plugin_mapping() == expected_mapping
```

# Generated at 2024-06-02 17:22:20.434444
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:22:23.901707
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:22:27.073880
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:22:29.550280
```python
    manager = PluginManager()
    
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    
    expected_mapping = {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
    
    assert manager.get_auth_plugin_mapping() == expected_mapping
```

# Generated at 2024-06-02 17:22:30.717389
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0
    for plugin in manager:
        assert isinstance(plugin, BasePlugin)
        assert hasattr(plugin, 'package_name')
```

# Generated at 2024-06-02 17:22:33.470870
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:22:35.135968
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:22:37.106768
```python
    manager = PluginManager()
    
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    
    expected_mapping = {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
    
    assert manager.get_auth_plugin_mapping() == expected_mapping
```

# Generated at 2024-06-02 17:22:38.823837
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:22:40.158753
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:24:45.678989
```python
    class MockFormatterPlugin(FormatterPlugin):
        def __init__(self, group_name):
            self.group_name = group_name

    plugin_manager = PluginManager()

    formatter1 = MockFormatterPlugin(group_name='group1')
    formatter2 = MockFormatterPlugin(group_name='group1')
    formatter3 = MockFormatterPlugin(group_name='group2')

    plugin_manager.register(formatter1, formatter2, formatter3)

    grouped_formatters = plugin_manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert formatter1 in grouped_formatters['group1']
    assert formatter2 in grouped_formatters['group1']
    assert formatter3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:24:47.255984
```python
    manager = PluginManager()
    
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    
    expected_mapping = {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
    
    assert manager.get_auth_plugin_mapping() == expected_mapping
```

# Generated at 2024-06-02 17:24:50.014576
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:24:52.948245
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:24:55.642046
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:24:57.990640
```python
    manager = PluginManager()

    class FormatterPluginA(FormatterPlugin):
        group_name = 'group1'

    class FormatterPluginB(FormatterPlugin):
        group_name = 'group1'

    class FormatterPluginC(FormatterPlugin):
        group_name = 'group2'

    manager.register(FormatterPluginA, FormatterPluginB, FormatterPluginC)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert FormatterPluginA in grouped_formatters['group1']
    assert FormatterPluginB in grouped_formatters['group1']
    assert FormatterPluginC in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:24:59.383499
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:25:02.241830
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:25:04.085331
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:25:07.172193
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:27:29.706409
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0
    for plugin in manager:
        assert isinstance(plugin, BasePlugin)
        assert hasattr(plugin, 'package_name')
```

# Generated at 2024-06-02 17:27:31.543422
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:27:33.414006
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:27:37.148035
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:27:38.823495
```python
    manager = PluginManager()
    
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    
    expected_mapping = {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
    
    assert manager.get_auth_plugin_mapping() == expected_mapping
```

# Generated at 2024-06-02 17:27:41.581542
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:27:44.306443
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```

# Generated at 2024-06-02 17:27:46.982500
```python
    class MockFormatterPlugin1(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin2(FormatterPlugin):
        group_name = 'group1'

    class MockFormatterPlugin3(FormatterPlugin):
        group_name = 'group2'

    manager = PluginManager()
    manager.register(MockFormatterPlugin1, MockFormatterPlugin2, MockFormatterPlugin3)

    grouped_formatters = manager.get_formatters_grouped()

    assert 'group1' in grouped_formatters
    assert 'group2' in grouped_formatters
    assert len(grouped_formatters['group1']) == 2
    assert len(grouped_formatters['group2']) == 1
    assert MockFormatterPlugin1 in grouped_formatters['group1']
    assert MockFormatterPlugin2 in grouped_formatters['group1']
    assert MockFormatterPlugin3 in grouped_formatters['group2']
```

# Generated at 2024-06-02 17:27:49.485795
```python
    manager = PluginManager()
    
    class MockAuthPlugin1(AuthPlugin):
        auth_type = 'mock1'
    
    class MockAuthPlugin2(AuthPlugin):
        auth_type = 'mock2'
    
    manager.register(MockAuthPlugin1, MockAuthPlugin2)
    
    expected_mapping = {
        'mock1': MockAuthPlugin1,
        'mock2': MockAuthPlugin2
    }
    
    assert manager.get_auth_plugin_mapping() == expected_mapping
```

# Generated at 2024-06-02 17:27:51.136367
```python
    manager = PluginManager()
    manager.load_installed_plugins()
    assert len(manager) > 0, "No plugins were loaded"
    for plugin in manager:
        assert isinstance(plugin, BasePlugin), f"Loaded plugin {plugin} is not an instance of BasePlugin"
        assert hasattr(plugin, 'package_name'), f"Loaded plugin {plugin} does not have a package_name attribute"
```