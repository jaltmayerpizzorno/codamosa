# Automatically generated by Pynguin.
import blib2to3.pgen2.tokenize as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        stop_tokenizing_0 = module_0.StopTokenizing()
        list_0 = []
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        untokenizer_0 = module_0.Untokenizer()
        path_like_0 = None
        var_1 = module_0.printtoken(list_0, var_0, untokenizer_0, path_like_0, path_like_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xc1\xa2\xfe\xf29\xd5*\xe4\xbd\xfd\x0co\xe8\x14\xa1q\x1137'
        bool_0 = False
        int_0 = 1111
        list_0 = [bool_0, int_0]
        str_0 = 'OU'
        grammar_0 = module_1.Grammar()
        var_0 = module_0.printtoken(bytes_0, bool_0, list_0, str_0, grammar_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = None
        module_0.tokenize(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1215
        untokenizer_0 = module_0.Untokenizer()
        str_0 = untokenizer_0.untokenize(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = module_0.maybe()
        str_0 = "<RKv!Rz\x0byN'Y"
        str_1 = module_0.untokenize(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        untokenizer_0 = module_0.Untokenizer()
        str_0 = untokenizer_0.untokenize(dict_0)
        int_0 = -2246
        callable_0 = None
        module_0.tokenize(int_0, callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1362
        str_0 = '\\s+("(?:\\\\\\d\\d\\d)*")},$'
        tuple_0 = (int_0, str_0)
        list_0 = [int_0, int_0, str_0, tuple_0]
        untokenizer_0 = module_0.Untokenizer()
        untokenizer_0.compat(tuple_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = True
        str_0 = None
        tuple_0 = (int_0, str_0)
        iterable_0 = None
        stop_tokenizing_0 = module_0.StopTokenizing()
        untokenizer_0 = module_0.Untokenizer()
        untokenizer_0.compat(tuple_0, iterable_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        tuple_0 = module_0.detect_encoding(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 910
        int_1 = 731
        tuple_0 = (int_0, int_1)
        untokenizer_0 = module_0.Untokenizer()
        untokenizer_0.add_whitespace(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 24
        bool_0 = None
        str_0 = '"['
        grammar_0 = module_1.Grammar()
        iterator_0 = module_0.generate_tokens(str_0, grammar_0)
        list_0 = None
        float_0 = 494.0
        var_0 = module_0.printtoken(int_0, bool_0, iterator_0, list_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 2242.6187
        iterator_0 = module_0.generate_tokens(float_0)
        untokenizer_0 = module_0.Untokenizer()
        int_0 = 359
        str_0 = ">2cgW6-:a'0@T+'"
        tuple_0 = (int_0, str_0)
        list_0 = []
        untokenizer_0.compat(tuple_0, list_0)
        str_1 = 'd|A-\n'
        dict_0 = {str_1: int_0, str_0: untokenizer_0}
        str_2 = untokenizer_0.untokenize(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 119
        str_0 = '\\d+(?:_\\d+)*\\.(?:\\d+(?:_\\d+)*)?'
        tuple_0 = (int_0, str_0)
        list_0 = [str_0, int_0]
        untokenizer_0 = module_0.Untokenizer()
        untokenizer_0.compat(tuple_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        untokenizer_0 = module_0.Untokenizer()
        var_0 = module_0.any()
        var_1 = module_0.group()
        bool_0 = False
        int_0 = False
        tuple_0 = (int_0, int_0)
        untokenizer_0.add_whitespace(tuple_0)
        str_0 = untokenizer_0.untokenize(bool_0)
    except BaseException:
        pass