

# Generated at 2024-06-03 03:24:25.192399
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    queries = [
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)),
        (Currencies["GBP"], Currencies["USD"], date(2023, 1, 1)),
    ]
    expected_rates = [
        FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        FXRate(Currencies["GBP"], Currencies["USD"], date(2023, 1, 1), Decimal("1.3")),
    ]

    # Configure the mock to return the expected rates
    mock_service.queries.return_value = expected_rates

    # Call the method under test


# Generated at 2024-06-03 03:24:28.421070
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency class
    Currency = Mock()
    ccy1 = Currency("USD")
    ccy2 = Currency("EUR")

    # Mock FXRateService class
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == "USD" and ccy2 == "EUR" and asof == date(2023, 1, 1):
                return FXRate(ccy1, ccy2, asof, Decimal("0.85"))
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof

# Generated at 2024-06-03 03:24:32.452898
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal
    from .currencies import Currencies

    rates = {
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)): FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        (Currencies["USD"], Currencies

# Generated at 2024-06-03 03:24:35.325084
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the test data
    mock_service.query.return_value = rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:24:38.646192
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal

    # Mock data
    ccy1 = Currency("USD")
    ccy2 = Currency("EUR")
    ccy3 = Currency("GBP")
    asof1 = date(2023, 1, 1)
    asof2 = date(2023, 1, 2)
    rate1 = FXRate(ccy1, ccy2, as

# Generated at 2024-06-03 03:24:41.710965
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    fx_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the test data
    mock_service.query.return_value = fx_rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, False)
```

# Generated at 2024-06-03 03:24:45.205374
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:24:48.865841
```python
    from datetime import date
    from unittest.mock import MagicMock

    # Mock Currency and FXRate
    mock_currency1 = MagicMock(spec=Currency)
    mock_currency2 = MagicMock(spec=Currency)
    mock_date = date.today()
    mock_fxrate = FXRate(mock_currency1, mock_currency2, mock_date, Decimal("1.5"))

    # Create a mock FXRateService
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == mock_currency1 and ccy2 == mock_currency2 and asof == mock_date:
                return mock_fxrate
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict)

# Generated at 2024-06-03 03:24:52.136908
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Mock FXRateService
    service = MagicMock(spec=FXRateService)

    # Define test data
    queries = [
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)),
        (Currencies["GBP"], Currencies["USD"], date(2023, 1, 1)),
        (Currencies["JPY"], Currencies["USD"], date(2023, 1, 1))
    ]
    rates = [
        FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        FXRate(Currencies["GBP"], Currencies["USD"], date(2023, 1, 1), Decimal("1.3")),
        None  # Simulate a missing rate
    ]

    #

# Generated at 2024-06-03 03:24:55.272741
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency class
    Currency = Mock()
    ccy1 = Currency("USD")
    ccy2 = Currency("EUR")

    # Mock FXRateService class
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == "USD" and ccy2 == "EUR" and asof == date(2023, 1, 1):
                return FXRate(ccy1, ccy2, asof, Decimal("0.85"))
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof

# Generated at 2024-06-03 03:25:02.737784
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal

    # Mock data
    eur = Currency("EUR")
    usd = Currency("USD")
    gbp = Currency("GBP")
    today = date.today()
    rates = {
        (eur, usd, today): FXRate(eur, usd, today, Decimal("1.1")),
        (usd, gbp, today): FXRate(usd, gbp, today,

# Generated at 2024-06-03 03:25:08.663794
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the test data
    mock_service.query.return_value = rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:25:11.973691
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    ccy1 = Currency("EUR")
    ccy2 = Currency("USD")
    ccy3 = Currency("GBP")
    asof = date(2023, 1, 1)
    rate1 = FXRate(ccy1, ccy2, asof, Decimal("1.1"))
    rate

# Generated at 2024-06-03 03:25:15.477765
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = FXRateService()
    service.query = MagicMock()

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:25:20.794525
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency class
    Currency = Mock()
    ccy1 = Currency("USD")
    ccy2 = Currency("EUR")

    # Mock FXRateService class
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == "USD" and ccy2 == "EUR" and asof == date(2023, 1, 1):
                return FXRate(ccy1, ccy2, asof, Decimal("0.85"))
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof

# Generated at 2024-06-03 03:25:23.981602
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, False)
```

# Generated at 2024-06-03 03:25:27.302486
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = FXRateService()
    service.query = MagicMock()

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:25:30.942026
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency class
    Currency = Mock()
    ccy1 = Currency("USD")
    ccy2 = Currency("EUR")

    # Mock FXRateService class
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == "USD" and ccy2 == "EUR" and asof == date(2023, 1, 1):
                return FXRate(ccy1, ccy2, asof, Decimal("0.85"))
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof

# Generated at 2024-06-03 03:25:35.190983
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:25:38.971923
```python
    from datetime import date
    from unittest.mock import MagicMock

    # Mock Currency and FXRate
    mock_currency1 = MagicMock(spec=Currency)
    mock_currency2 = MagicMock(spec=Currency)
    mock_date = date.today()
    mock_fxrate = FXRate(mock_currency1, mock_currency2, mock_date, Decimal("1.5"))

    # Create a mock FXRateService
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == mock_currency1 and ccy2 == mock_currency2 and asof == mock_date:
                return mock_fxrate
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict)

# Generated at 2024-06-03 03:25:50.605050
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:25:53.569665
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:25:56.494990
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    fx_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the test data
    mock_service.query.return_value = fx_rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:25:59.585066
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    ccy1 = Currency("EUR")
    ccy2 = Currency("USD")
    ccy3 = Currency("GBP")
    asof = date(2023, 1, 1)
    rate1 = FXRate(ccy1, ccy2, asof, Decimal("1.1"))
    rate

# Generated at 2024-06-03 03:26:04.701673
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal
    from .currencies import Currencies

    rates = {
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)): FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        (Currencies["USD"], Currencies["JPY"], date(2023

# Generated at 2024-06-03 03:26:10.554234
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal
    from .currencies import Currencies

    rates = {
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)): FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        (Currencies["USD"], Currencies["JPY"], date(2023

# Generated at 2024-06-03 03:26:14.198940
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal
    from .currencies import Currencies

    rates = {
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)): FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        (Currencies["USD"], Currencies

# Generated at 2024-06-03 03:26:17.997786
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    ccy1 = Currency("EUR")
    ccy2 = Currency("USD")
    ccy3 = Currency("GBP")
    asof = date(2023, 1, 1)
    rate1 = FXRate(ccy1, ccy2, asof, Decimal("1.1"))
    rate

# Generated at 2024-06-03 03:26:21.530844
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    ccy1 = Currency("EUR")
    ccy2 = Currency("USD")
    asof = date(2023, 1, 1)
    rate = FXRate(ccy1, ccy2, asof, Decimal("1.1"))

    service = MockFXRateService({(ccy1, ccy2

# Generated at 2024-06-03 03:26:26.246546
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal

    # Mock data
    eur = Currency("EUR")
    usd = Currency("USD")
    jpy = Currency("JPY")
    mock_rates = {
        (eur, usd, date(2023, 1, 1)): FXRate(eur, usd, date(2023, 1, 1), Decimal("1.1")),
        (usd, jpy

# Generated at 2024-06-03 03:26:46.107790
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    ccy1 = Currency("EUR")
    ccy2 = Currency("USD")
    ccy3 = Currency("GBP")
    asof = date(2023, 1, 1)
    rate1 = FXRate(ccy1, ccy2, asof, Decimal("1.1"))
    rate2 = FXRate

# Generated at 2024-06-03 03:26:49.007442
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency class
    Currency = Mock()
    ccy1 = Currency("USD")
    ccy2 = Currency("EUR")

    # Mock FXRateService class
    FXRateServiceMock = Mock(spec=FXRateService)
    fx_rate_service = FXRateServiceMock()

    # Define a sample FXRate
    sample_rate = FXRate(ccy1, ccy2, date(2023, 1, 1), Decimal("1.2"))

    # Mock the query method to return the sample_rate
    fx_rate_service.query.return_value = sample_rate

    # Call the query method
    result = fx_rate_service.query(ccy1, ccy2, date(2023, 1, 1))

    # Assertions
    assert result == sample_rate
    fx_rate_service.query.assert_called_once_with(ccy1, ccy2, date

# Generated at 2024-06-03 03:26:53.753525
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = FXRateService()
    service.query = MagicMock()

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Set the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, False)
```

# Generated at 2024-06-03 03:26:57.474579
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    eur = Currency("EUR")
    usd = Currency("USD")
    gbp = Currency("GBP")
    today = date.today()
    rates = {
        (eur, usd, today): FXRate(eur, usd, today, Decimal("1.1")),
        (usd, gbp, today): FXRate(

# Generated at 2024-06-03 03:27:00.887841
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:27:04.705715
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRateService
    mock_currency1 = Mock(spec=Currency)
    mock_currency2 = Mock(spec=Currency)
    mock_date = date.today()
    mock_fxrate = FXRate(mock_currency1, mock_currency2, mock_date, Decimal("1.5"))

    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == mock_currency1 and ccy2 == mock_currency2 and asof == mock_date:
                return mock_fxrate
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof

# Generated at 2024-06-03 03:27:07.601925
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock currencies
    ccy1 = Mock(spec=Currency)
    ccy2 = Mock(spec=Currency)

    # Mock FXRateService
    service = Mock(spec=FXRateService)

    # Define a date
    asof = date.today()

    # Define a mock FXRate
    fx_rate = FXRate(ccy1, ccy2, asof, Decimal("1.25"))

    # Configure the mock to return the FXRate
    service.query.return_value = fx_rate

    # Call the query method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:27:10.826869
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    queries = [
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)),
        (Currencies["GBP"], Currencies["USD"], date(2023, 1, 1)),
        (Currencies["JPY"], Currencies["USD"], date(2023, 1, 1))
    ]
    expected_rates = [
        FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        FXRate(Currencies["GBP"], Currencies["USD"], date(2023, 1, 1), Decimal("1.3")),
        None  # Simulate a missing rate


# Generated at 2024-06-03 03:27:13.827418
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency class
    Currency = Mock()
    USD = Currency("USD")
    EUR = Currency("EUR")

    # Mock FXRateService class
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == USD and ccy2 == EUR and asof == date(2023, 1, 1):
                return FXRate(USD, EUR, asof, Decimal("0.85"))
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    service = MockFXRateService()



# Generated at 2024-06-03 03:27:17.487541
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, False)
```

# Generated at 2024-06-03 03:27:54.667347
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal

    # Mock data
    mock_rates = {
        (Currency("EUR"), Currency("USD"), date(2023, 1, 1)): FXRate(Currency("EUR"), Currency("USD"), date(2023, 1, 1), Decimal("1.1")),
        (Currency("USD"), Currency("JPY"), date(2023, 1, 1

# Generated at 2024-06-03 03:27:57.803919
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:28:01.027899
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    fx_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the test data
    mock_service.query.return_value = fx_rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:28:05.607431
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = FXRateService()
    service.query = MagicMock()

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, False)
```

# Generated at 2024-06-03 03:28:08.897485
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    eur = Currency("EUR")
    usd = Currency("USD")
    gbp = Currency("GBP")
    today = date.today()
    rates = {
        (eur, usd, today): FXRate(eur, usd, today, Decimal("1.1")),
        (usd, gbp, today): FXRate(usd, gbp

# Generated at 2024-06-03 03:28:11.951751
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal

    # Mock data
    mock_rates = {
        (Currency("EUR"), Currency("USD"), date(2023, 1, 1)): FXRate(Currency("EUR"), Currency("USD"), date(2023, 1, 1), Decimal("1.1")),
        (Currency("USD"), Currency("JPY"), date(2023, 1, 1

# Generated at 2024-06-03 03:28:15.092459
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from .currencies import Currencies

    rates = {
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)): FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        (Currencies["USD"], Currencies["JPY"], date(2023, 1, 1

# Generated at 2024-06-03 03:28:18.542931
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    mock_service.query.return_value = expected_rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:28:22.012315
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:28:25.424738
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:29:35.234875
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:29:38.864586
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal
    from .currencies import Currencies

    rates = {
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)): FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        (Currencies["USD"], Currencies

# Generated at 2024-06-03 03:29:42.872747
```python
    from datetime import date
    from unittest.mock import MagicMock

    # Mock Currency and FXRateService
    mock_currency1 = MagicMock(spec=Currency)
    mock_currency2 = MagicMock(spec=Currency)
    mock_date = date.today()
    mock_fxrate = FXRate(mock_currency1, mock_currency2, mock_date, Decimal("1.5"))

    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == mock_currency1 and ccy2 == mock_currency2 and asof == mock_date:
                return mock_fxrate
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2

# Generated at 2024-06-03 03:29:45.882184
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:29:49.846131
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal
    from .currencies import Currencies

    rates = {
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)): FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        (Currencies["USD"], Currencies["JPY"], date(2023

# Generated at 2024-06-03 03:29:52.980455
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency and FXRate
    CurrencyMock = Mock(spec=Currency)
    FXRateMock = Mock(spec=FXRate)

    # Create a mock FXRateService
    fx_service = Mock(spec=FXRateService)

    # Define test data
    ccy1 = CurrencyMock("USD")
    ccy2 = CurrencyMock("EUR")
    asof = date(2023, 1, 1)
    fx_rate = FXRateMock(ccy1, ccy2, asof, Decimal("0.85"))

    # Configure the mock to return the test data
    fx_service.query.return_value = fx_rate

    # Call the method
    result = fx_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    fx_service.query.assert_called_once_with(ccy1, ccy2,

# Generated at 2024-06-03 03:29:56.411340
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    ccy1 = Currency("EUR")
    ccy2 = Currency("USD")
    ccy3 = Currency("GBP")
    asof = date.today()
    rate1 = FXRate(ccy1, ccy2, asof, Decimal("1.2"))
    rate2 = FXRate(ccy2,

# Generated at 2024-06-03 03:29:59.571318
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    mock_service.query.return_value = expected_rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:30:02.629141
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    fx_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the test data
    mock_service.query.return_value = fx_rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, False)
```

# Generated at 2024-06-03 03:30:05.944462
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency class
    Currency = Mock()
    USD = Currency("USD")
    EUR = Currency("EUR")

    # Mock FXRateService class
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == USD and ccy2 == EUR and asof == date(2023, 1, 1):
                return FXRate(USD, EUR, asof, Decimal("0.85"))
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    service = MockFXRateService()



# Generated at 2024-06-03 03:32:21.298979
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal
    from .currencies import Currencies

    rates = {
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)): FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        (Currencies["USD"], Currencies

# Generated at 2024-06-03 03:32:24.959642
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal

    # Mock data
    mock_rates = {
        (Currency("EUR"), Currency("USD"), date(2023, 1, 1)): FXRate(Currency("EUR"), Currency("USD"), date(2023, 1, 1), Decimal("1.1")),
        (Currency("USD"), Currency("JPY"), date(2023, 1, 1

# Generated at 2024-06-03 03:32:28.313917
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    mock_service = MagicMock(spec=FXRateService)

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    fx_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the test data
    mock_service.query.return_value = fx_rate

    # Call the method
    result = mock_service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == fx_rate
    mock_service.query.assert_called_once_with(ccy1, ccy2, asof, False)
```

# Generated at 2024-06-03 03:32:32.091144
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Mock FXRateService
    service = MagicMock(spec=FXRateService)

    # Define test data
    queries = [
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)),
        (Currencies["GBP"], Currencies["USD"], date(2023, 1, 1)),
    ]
    expected_rates = [
        FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        FXRate(Currencies["GBP"], Currencies["USD"], date(2023, 1, 1), Decimal("1.3")),
    ]

    # Configure the mock to return the expected rates
    service.queries.return_value = expected_rates

    # Call the method
    result = list(service.

# Generated at 2024-06-03 03:32:36.200554
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    from datetime import date
    from decimal import Decimal

    # Mock data
    eur = Currency("EUR")
    usd = Currency("USD")
    gbp = Currency("GBP")
    rates = {
        (eur, usd, date(2023, 1, 1)): FXRate(eur, usd, date(2023, 1, 1), Decimal("1.1")),
        (usd, gbp,

# Generated at 2024-06-03 03:32:39.579759
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Mock FXRateService
    service = MagicMock(spec=FXRateService)

    # Define test data
    queries = [
        (Currencies["EUR"], Currencies["USD"], date(2023, 1, 1)),
        (Currencies["GBP"], Currencies["USD"], date(2023, 1, 1)),
        (Currencies["JPY"], Currencies["USD"], date(2023, 1, 1))
    ]
    rates = [
        FXRate(Currencies["EUR"], Currencies["USD"], date(2023, 1, 1), Decimal("1.1")),
        FXRate(Currencies["GBP"], Currencies["USD"], date(2023, 1, 1), Decimal("1.3")),
        None  # Simulate a missing rate
    ]

    #

# Generated at 2024-06-03 03:32:42.792427
```python
    from datetime import date
    from unittest.mock import Mock

    # Mock Currency class
    Currency = Mock()
    USD = Currency("USD")
    EUR = Currency("EUR")

    # Mock FXRateService class
    class MockFXRateService(FXRateService):
        def query(self, ccy1, ccy2, asof, strict=False):
            if ccy1 == USD and ccy2 == EUR and asof == date(2023, 1, 1):
                return FXRate(USD, EUR, asof, Decimal("0.85"))
            if strict:
                raise FXRateLookupError(ccy1, ccy2, asof)
            return None

        def queries(self, queries, strict=False):
            return [self.query(ccy1, ccy2, asof, strict) for ccy1, ccy2, asof in queries]

    service = MockFXRateService()



# Generated at 2024-06-03 03:32:45.993572
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = FXRateService()
    service.query = MagicMock()

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```

# Generated at 2024-06-03 03:32:49.900989
```python
    class MockFXRateService(FXRateService):
        def __init__(self, rates):
            self.rates = rates

        def query(self, ccy1, ccy2, asof, strict=False):
            return self.rates.get((ccy1, ccy2, asof))

        def queries(self, queries, strict=False):
            for query in queries:
                rate = self.query(*query, strict=strict)
                if strict and rate is None:
                    raise FXRateLookupError(*query)
                yield rate

    from datetime import date
    from decimal import Decimal

    # Mock data
    ccy1 = Currency("EUR")
    ccy2 = Currency("USD")
    ccy3 = Currency("GBP")
    asof = date(2023, 1, 1)
    rate1 = FXRate(ccy1, ccy2, asof, Decimal("1.1"))
    rate

# Generated at 2024-06-03 03:32:52.729917
```python
    from unittest.mock import MagicMock
    from datetime import date
    from .currencies import Currencies

    # Create a mock FXRateService
    service = FXRateService()
    service.query = MagicMock()

    # Define test data
    ccy1 = Currencies["EUR"]
    ccy2 = Currencies["USD"]
    asof = date.today()
    expected_rate = FXRate(ccy1, ccy2, asof, Decimal("1.2"))

    # Configure the mock to return the expected rate
    service.query.return_value = expected_rate

    # Call the method
    result = service.query(ccy1, ccy2, asof)

    # Assertions
    assert result == expected_rate
    service.query.assert_called_once_with(ccy1, ccy2, asof, strict=False)
```