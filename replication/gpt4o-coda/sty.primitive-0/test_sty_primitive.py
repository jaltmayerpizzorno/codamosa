# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    register_0 = module_0.Register()

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    register_0 = module_0.Register()
    style_0 = module_0.Style()
    register_1 = module_0.Register()
    str_0 = '\n    This is the base Register class. All default registers (fg, bg, ef, rs) are\n    created from this class. You can use it to create your own custom registers.\n    '
    var_0 = register_1.__setattr__(str_0, style_0)

def test_case_3():
    register_0 = module_0.Register()
    str_0 = register_0.__call__()
    register_1 = register_0.copy()
    register_1.unmute()

def test_case_4():
    register_0 = module_0.Register()
    register_0.mute()

def test_case_5():
    register_0 = module_0.Register()
    register_0.unmute()

def test_case_6():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    var_0 = register_0.as_namedtuple()
    register_1.unmute()

def test_case_7():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_1.unmute()

def test_case_8():
    float_0 = 3481.607
    callable_0 = None
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    str_0 = register_0.__call__()
    register_2 = register_0.copy()
    register_1.set_renderfunc(float_0, callable_0)
    register_3 = register_2.copy()
    var_0 = register_3.as_namedtuple()
    str_1 = '\n    Define Eightbit Foreground.\n\n    More info about 8-bit terminal colors: https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n\n    :param num: Eightbit number.\n    '
    register_4 = module_0.Register()
    style_0 = module_0.Style()
    list_0 = [str_1, str_1, str_1]
    str_2 = register_1.__call__(*list_0)
    style_1 = module_0.Style()
    var_1 = register_1.__setattr__(str_1, style_1)
    dict_0 = {}
    str_3 = register_2.__call__(**dict_0)
    register_3.mute()
    register_1.mute()
    register_5 = register_0.copy()
    var_2 = register_4.as_namedtuple()

def test_case_9():
    int_0 = 3554
    list_0 = [int_0]
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    str_0 = register_1.__call__(*list_0)
    register_2 = module_0.Register()