# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        dict_0 = register_2.as_dict()
        register_3 = module_0.Register()
        var_0 = register_3.as_namedtuple()
        register_4 = module_0.Register()
        register_4.mute()
        str_0 = register_4.__call__()
        dict_1 = register_4.as_dict()
        dict_2 = None
        str_1 = register_3.__call__(**dict_2)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_3 = register_2.copy()
        dict_0 = None
        register_0.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        type_0 = None
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'W!\xb0-\xeeMZ\x9do/4\x03\xcdM'
        str_0 = "'LpVa~gaWn\nr58xJ\x0c"
        register_0 = module_0.Register()
        register_0.set_renderfunc(bytes_0, str_0)
        register_1 = register_0.copy()
        register_2 = module_0.Register()
        var_0 = register_2.as_namedtuple()
        register_2.set_eightbit_call(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        str_0 = "x,\x0b-iH/oJh:;'A`S"
        dict_0 = {str_0: register_0}
        str_1 = '!A\x0cTb'
        register_0.mute()
        style_0 = module_0.Style()
        var_0 = register_0.as_namedtuple()
        list_0 = [dict_0, dict_0, register_0, register_0]
        style_1 = module_0.Style(*list_0)
        var_1 = register_0.__setattr__(str_1, style_1)
        dict_1 = register_0.as_dict()
        float_0 = 641.670647
        dict_2 = register_0.as_dict()
        register_0.set_renderfunc(register_0, float_0)
        register_0.unmute()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1563.74499
        float_1 = 3481.607
        callable_0 = None
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_1.set_renderfunc(float_1, callable_0)
        register_2 = module_0.Register()
        var_0 = register_2.as_namedtuple()
        str_0 = '\n    Define Eightbit Foreground.\n\n    More info about 8-bit terminal colors: https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n\n    :param num: Eightbit number.\n    '
        register_3 = module_0.Register()
        list_0 = [str_0, str_0, str_0]
        str_1 = register_1.__call__(*list_0)
        style_0 = module_0.Style()
        var_1 = register_1.__setattr__(str_0, style_0)
        register_2.set_rgb_call(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 1563.74499
        callable_0 = None
        register_0 = module_0.Register()
        register_0.set_renderfunc(float_0, callable_0)
        register_1 = module_0.Register()
        register_1.unmute()
        register_2 = register_0.copy()
        var_0 = register_0.as_namedtuple()
        str_0 = '\n    Define Eightbit Foreground.\n\n    More info about 8-bit terminal colors: https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n\n    :param num: Eightbit number.\n    '
        register_3 = module_0.Register()
        list_0 = [str_0, str_0, str_0]
        str_1 = register_2.__call__(*list_0)
        style_0 = module_0.Style()
        var_1 = register_3.__setattr__(str_0, style_0)
        dict_0 = {}
        str_2 = register_0.__call__(**dict_0)
        register_2.set_rgb_call(float_0)
        tuple_0 = ()
        register_3.set_eightbit_call(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "G'>OjvCRi\n6"
        list_0 = [str_0]
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_1 = register_1.__call__(*list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        type_0 = None
        style_0 = module_0.Style()
        list_0 = []
        style_1 = module_0.Style(*list_0)
        register_0.set_renderfunc(type_0, register_0)
        str_0 = '4=eow7a'
        list_1 = []
        style_2 = module_0.Style(*list_1)
        register_0.set_eightbit_call(type_0)
        style_3 = style_2.__new__(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_0.copy()
        register_3 = module_0.Register()
        register_4 = register_0.copy()
        var_0 = register_2.as_namedtuple()
        str_0 = '\n    Define Eightbit Foreground.\n\n    More info about 8-bit terminal colors: https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit\n\n    :param num: Eightbit number.\n    '
        register_5 = module_0.Register()
        list_0 = [str_0, str_0, str_0]
        str_1 = register_1.__call__(*list_0)
        style_1 = module_0.Style()
        var_1 = register_1.__setattr__(str_0, style_1)
        dict_0 = {}
        register_0.unmute()
        str_2 = register_2.__call__(**dict_0)
        list_1 = [style_0, register_5, var_1]
        style_2 = module_0.Style(*list_1, **dict_0)
        var_2 = register_1.__setattr__(str_0, style_2)
    except BaseException:
        pass

def test_case_11():
    try:
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        register_1 = module_0.Register()
        register_2 = register_1.copy()
        register_2.unmute()
        render_type_0 = module_1.RenderType()
        register_0.mute()
        list_0 = [render_type_0, render_type_0]
        register_1.unmute()
        style_0 = module_0.Style(*list_0)
        str_0 = register_1.__call__()
        str_1 = None
        register_2.unmute()
        var_0 = register_2.__setattr__(str_1, style_0)
    except BaseException:
        pass