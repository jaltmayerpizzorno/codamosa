

# Generated at 2024-06-04 20:37:34.437982
```python
    yaml_content = """
    name: John Doe
    age: 30
    is_student: false
    scores:
      - math: 90
      - science: 85
    """
    token = tokenize_yaml(yaml_content)
    assert isinstance(token, DictToken)
    assert token.value['name'] == 'John Doe'
    assert token.value['age'] == 30
    assert token.value['is_student'] is False
    assert isinstance(token.value['scores'], list)
    assert token.value['scores'][0]['math'] == 90
    assert token.value['scores'][1]['science'] == 85

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no_content"
        assert exc.position.line_no == 1
        assert exc.position.column_no == 1
        assert exc.position.char

# Generated at 2024-06-04 20:37:37.384606
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:37:42.119308
```python
    content = """
    key1: value1
    key2: 123
    key3:
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:37:45.626988
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test with invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:37:48.882529
```python
    content = """
    key1: value1
    key2: 123
    key3:
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:37:56.420364
```python
    content = """
    name: John Doe
    age: 30
    is_student: false
    scores:
      - 85
      - 90
      - 78
    address:
      street: 123 Main St
      city: Anytown
      zip: 12345
    """

    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["name"].value == "John Doe"
    assert token.value["age"].value == 30
    assert token.value["is_student"].value is False
    assert isinstance(token.value["scores"], ListToken)
    assert token.value["scores"].value[0].value == 85
    assert token.value["scores"].value[1].value == 90
    assert token.value["scores"].value[2].value == 78
    assert isinstance(token.value["address"], DictToken)
    assert token.value["address"].value

# Generated at 2024-06-04 20:38:02.892064
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:38:06.300935
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value == {
        "key1": "value1",
        "key2": 123,
        "key3": ["item1", "item2"],
        "key4": True,
        "key5": None,
    }
    assert token.start == 0
    assert token.end == len(content.strip()) - 1

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no_content"
        assert exc.position == Position(column_no=1, line_no=1, char_index=0)

    invalid

# Generated at 2024-06-04 20:38:10.031818
```python
    content = """
    key1: value1
    key2: 123
    key3:
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:38:13.616207
```python
    content = """
    key1: value1
    key2: 123
    key3: 45.67
    key4: true
    key5: null
    key6:
      - item1
      - item2
    key7:
      subkey1: subvalue1
      subkey2: subvalue2
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert token.value["key3"].value == 45.67
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None
    assert isinstance(token.value["key6"], ListToken)
    assert token.value["key6"].value[0].value == "item1"
    assert token.value["key6"].value

# Generated at 2024-06-04 20:38:27.040611
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:38:34.264020
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "

# Generated at 2024-06-04 20:38:38.038503
```python
    content = """
    key1: value1
    key2: 123
    key3:
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:38:41.199628
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:38:44.420995
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:38:49.467921
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value == {
        "key1": "value1",
        "key2": 123,
        "key3": ["item1", "item2"],
        "key4": True,
        "key5": None,
    }
    assert token.start == 0
    assert token.end == len(content) - 1

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no_content"
        assert exc.position == Position(column_no=1, line_no=1, char_index=0)

    invalid_content

# Generated at 2024-06-04 20:38:53.749863
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:38:57.126620
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:39:00.458926
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:39:04.118931
```python
    content = """
    key1: value1
    key2: 123
    key3: 45.67
    key4: true
    key5: null
    key6:
      - item1
      - item2
    key7:
      subkey1: subvalue1
      subkey2: subvalue2
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert token.value["key3"].value == 45.67
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None
    assert isinstance(token.value["key6"], ListToken)
    assert token.value["key6"].value[0].value == "item1"
    assert token.value["key6"].value

# Generated at 2024-06-04 20:39:17.108206
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:39:20.547732
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].text == "Must be a number."

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:39:28.229679
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].text == "Must be a number."

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:39:37.281469
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].text == "Must be a number."

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.text == "No content."
```

# Generated at 2024-06-04 20:39:40.644310
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:39:45.223249
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:39:49.259172
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "

# Generated at 2024-06-04 20:39:52.992202
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:39:57.369958
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:40:02.652897
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test with invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) == 1
    assert error_messages[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:40:16.132983
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:40:19.781803
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:40:27.424011
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) == 1
    assert error_messages[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:40:31.657385
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:40:34.648057


# Generated at 2024-06-04 20:40:38.419780
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:40:42.855462
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "

# Generated at 2024-06-04 20:40:46.768819
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].text == "Must be a number."

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:40:54.869702
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:40:59.893111
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:41:14.945542
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:41:23.052101
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:41:26.239967
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:41:30.055368
```python
    content = """
    key1: value1
    key2: 123
    key3:
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:41:34.518485
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].text == "Must be a number."

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.text == "No content."
```

# Generated at 2024-06-04 20:41:39.135232
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:41:42.367169
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:41:45.484886
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:41:48.877961
```python
    content = """
    key1: value1
    key2: 123
    key3:
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no

# Generated at 2024-06-04 20:41:52.482051
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:04.326354
```python
    content = """
    key1: value1
    key2: 123
    key3: 45.67
    key4: true
    key5: null
    key6:
      - item1
      - item2
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert token.value["key3"].value == 45.67
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None
    assert isinstance(token.value["key6"], ListToken)
    assert token.value["key6"].value[0].value == "item1"
    assert token.value["key6"].value[1].value == "item2"
```

# Generated at 2024-06-04 20:42:08.640258
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:12.197978
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test with invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:15.988001
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:19.422844
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test with invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:24.624547
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "

# Generated at 2024-06-04 20:42:30.503998
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:34.443945
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:42.038808
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:45.881318
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:42:57.969314
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:04.002815
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test with invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].text == "Must be a number."

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code

# Generated at 2024-06-04 20:43:07.740029
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:11.377907
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:16.405471
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:21.198735
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:28.015259
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:32.414910
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:36.636908
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:45.087645
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "

# Generated at 2024-06-04 20:43:54.667377
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:43:59.526059
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].text == "Must be a number."

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:44:07.639219
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:44:18.438865
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:44:22.677226
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:44:27.451150
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) == 1
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:44:34.402684
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "

# Generated at 2024-06-04 20:44:39.600661
```python
    content = """
    key1: value1
    key2: 123
    key3: 
      - item1
      - item2
    key4: true
    key5: null
    """
    token = tokenize_yaml(content)
    assert isinstance(token, DictToken)
    assert token.value["key1"].value == "value1"
    assert token.value["key2"].value == 123
    assert isinstance(token.value["key3"], ListToken)
    assert token.value["key3"].value[0].value == "item1"
    assert token.value["key3"].value[1].value == "item2"
    assert token.value["key4"].value is True
    assert token.value["key5"].value is None

    empty_content = ""
    try:
        tokenize_yaml(empty_content)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "

# Generated at 2024-06-04 20:44:43.232980
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].text == "Must be a number."

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.text == "No content."
        assert exc.code == "no_content"


# Generated at 2024-06-04 20:44:49.250326
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:44:59.173145
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:04.197155
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:08.175751
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:12.771725
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:17.105820
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:23.515117
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) > 0
    assert error_messages[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:28.904365
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:36.328261
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:39.831995
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test with valid YAML
    value, errors = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert errors == []

    # Test with invalid YAML
    value, errors = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(errors) > 0
    assert errors[0].code == "type_error"

    # Test with empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```

# Generated at 2024-06-04 20:45:45.230433
```python
    class ExampleSchema(Schema):
        name = Field(str)
        age = Field(int)

    valid_yaml = """
    name: John Doe
    age: 30
    """

    invalid_yaml = """
    name: John Doe
    age: thirty
    """

    empty_yaml = ""

    # Test valid YAML
    value, error_messages = validate_yaml(valid_yaml, ExampleSchema)
    assert value == {"name": "John Doe", "age": 30}
    assert error_messages == []

    # Test invalid YAML
    value, error_messages = validate_yaml(invalid_yaml, ExampleSchema)
    assert value is None
    assert len(error_messages) == 1
    assert error_messages[0].code == "type_error"

    # Test empty YAML
    try:
        validate_yaml(empty_yaml, ExampleSchema)
    except ParseError as exc:
        assert exc.code == "no_content"
```