

# Generated at 2024-06-03 06:16:10.331423
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:16:13.606281
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    # Test fetching existing node
    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3

    # Test fetching non-existing node with default value
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    # Test fetching non-existing node without default value (should raise KeyError)
    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"

    # Test fetching parent node
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['

# Generated at 2024-06-03 06:16:18.249921
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:16:20.514781
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value'

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value'

    set_tree_node(mapping, 'x:y', 'new_value')
    assert mapping['x']['y'] == 'new_value'

    set_tree_node(mapping, 'x:z', 'another_new_value')
    assert mapping['x']['z'] == 'another_new_value'
```

# Generated at 2024-06-03 06:16:24.001351
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:16:27.469770
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:16:30.684738
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    # Test fetching existing node
    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3

    # Test fetching non-existing node with default value
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    # Test fetching non-existing node without default value (should raise KeyError)
    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"

    # Test fetching parent node
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['

# Generated at 2024-06-03 06:16:33.723285
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:16:37.080256
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:16:41.991640
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    # Test overwriting existing value
    set_tree_node(mapping, 'a:b:c', 5)
    assert mapping['a']['b']['c'] == 5

    # Test setting value in a new branch
    set_tree_node(mapping, 'g:h:i', 6)
    assert mapping['g']['h']['i'] == 6
```

# Generated at 2024-06-03 06:16:51.674082
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5
```

# Generated at 2024-06-03 06:16:53.723765
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value'

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value'

    set_tree_node(mapping, 'x:y:z', 'xyz_value')
    assert mapping['x']['y']['z'] == 'xyz_value'

    set_tree_node(mapping, 'x:y:w', 'xyw_value')
    assert mapping['x']['y']['w'] == 'xyw_value'
```

# Generated at 2024-06-03 06:16:56.291155
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value', "Failed to set value in nested tree structure"

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value', "Failed to set another value in nested tree structure"

    set_tree_node(mapping, 'a:e', 'value_e')
    assert mapping['a']['e'] == 'value_e', "Failed to set value in less nested tree structure"

    set_tree_node(mapping, 'f', 'value_f')
    assert mapping['f'] == 'value_f', "Failed to set value in root level tree structure"
```

# Generated at 2024-06-03 06:16:59.419599
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:04.710288
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:07.738394
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:11.031483
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:14.856264
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:17.950876
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:21.720450
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:45.292127
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:49.524098
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:52.474774
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:55.973285
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:17:58.994910
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:18:02.283802
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:18:05.240285
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:18:08.655324
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    # Test fetching existing node
    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3

    # Test fetching non-existing node with default value
    assert get_tree_node(tree, 'a:b:x', default=99) == 99

    # Test fetching non-existing node without default value (should raise KeyError)
    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"

    # Test fetching parent node
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['

# Generated at 2024-06-03 06:18:11.990989
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value'

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value'

    set_tree_node(mapping, 'x:y:z', 'xyz_value')
    assert mapping['x']['y']['z'] == 'xyz_value'

    set_tree_node(mapping, 'x:y:w', 'xyw_value')
    assert mapping['x']['y']['w'] == 'xyw_value'

    set_tree_node(mapping, 'a:b:c', 'new_value')
    assert mapping['a']['b']['c'] == 'new_value'
```

# Generated at 2024-06-03 06:18:14.975587
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value', "Failed to set value in nested tree structure"

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value', "Failed to set another value in nested tree structure"

    set_tree_node(mapping, 'x:y', 'new_value')
    assert mapping['x']['y'] == 'new_value', "Failed to set value in a different branch of the tree"

    set_tree_node(mapping, 'x:z', 'yet_another_value')
    assert mapping['x']['z'] == 'yet_another_value', "Failed to set yet another value in a different branch of the tree"
```

# Generated at 2024-06-03 06:18:42.283690
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:18:45.445755
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value'

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value'

    set_tree_node(mapping, 'x:y:z', 'xyz_value')
    assert mapping['x']['y']['z'] == 'xyz_value'

    set_tree_node(mapping, 'x:y:w', 'xyw_value')
    assert mapping['x']['y']['w'] == 'xyw_value'

    set_tree_node(mapping, 'a:b:c', 'new_value')
    assert mapping['a']['b']['c'] == 'new_value'
```

# Generated at 2024-06-03 06:18:49.313884
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:18:52.857051
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:18:56.321046
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:18:58.955108
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5

    print("All tests passed.")
```

# Generated at 2024-06-03 06:19:02.280610
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value', "Failed to set value in nested tree structure"

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value', "Failed to set another value in nested tree structure"

    set_tree_node(mapping, 'x:y', 'new_value')
    assert mapping['x']['y'] == 'new_value', "Failed to set value in a different branch of the tree"

    set_tree_node(mapping, 'x:z', 'yet_another_value')
    assert mapping['x']['z'] == 'yet_another_value', "Failed to set yet another value in a different branch of the tree"
```

# Generated at 2024-06-03 06:19:05.518250
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:19:08.486933
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:19:11.602870
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value'

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value'

    set_tree_node(mapping, 'x:y:z', 'xyz_value')
    assert mapping['x']['y']['z'] == 'xyz_value'

    set_tree_node(mapping, 'x:y:w', 'xyw_value')
    assert mapping['x']['y']['w'] == 'xyw_value'
```

# Generated at 2024-06-03 06:20:04.737980
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:20:07.508839
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5
```

# Generated at 2024-06-03 06:20:09.927825
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value'

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value'

    set_tree_node(mapping, 'x:y:z', 'xyz_value')
    assert mapping['x']['y']['z'] == 'xyz_value'

    set_tree_node(mapping, 'x:y:w', 'xyw_value')
    assert mapping['x']['y']['w'] == 'xyw_value'

    set_tree_node(mapping, 'a:b:c', 'new_value')
    assert mapping['a']['b']['c'] == 'new_value'
```

# Generated at 2024-06-03 06:20:14.000382
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:20:18.312640
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    # Test fetching existing node
    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3

    # Test fetching non-existing node with default value
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    # Test fetching non-existing node without default value
    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"

    # Test fetching parent node
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
```

# Generated at 2024-06-03 06:20:20.928530
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value', "Failed to set value in nested tree structure"

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value', "Failed to set another value in nested tree structure"

    set_tree_node(mapping, 'x:y', 'new_value')
    assert mapping['x']['y'] == 'new_value', "Failed to set value in a different branch of the tree"

    set_tree_node(mapping, 'x:z', 'another_new_value')
    assert mapping['x']['z'] == 'another_new_value', "Failed to set another value in a different branch of the tree"
```

# Generated at 2024-06-03 06:20:24.605029
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    # Test overwriting existing value
    set_tree_node(mapping, 'a:b:c', 5)
    assert mapping['a']['b']['c'] == 5

    # Test setting value in a new branch
    set_tree_node(mapping, 'g:h:i', 6)
    assert mapping['g']['h']['i'] == 6
```

# Generated at 2024-06-03 06:20:27.972342
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:20:31.471184
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:20:33.885423
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5
```

# Generated at 2024-06-03 06:22:14.082237
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    # Test fetching existing node
    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3

    # Test fetching non-existing node with default value
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    # Test fetching non-existing node without default value (should raise KeyError)
    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"

    # Test fetching parent node
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['

# Generated at 2024-06-03 06:22:17.288351
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5
```

# Generated at 2024-06-03 06:22:20.383362
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:22:24.633467
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    # Test fetching existing node
    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3

    # Test fetching non-existing node with default value
    assert get_tree_node(tree, 'a:b:x', default=0) == 0

    # Test fetching non-existing node without default value (should raise KeyError)
    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"

    # Test fetching parent node
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['

# Generated at 2024-06-03 06:22:28.930935
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:22:31.335638
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5
```

# Generated at 2024-06-03 06:22:33.510024
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value'

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value'

    set_tree_node(mapping, 'x:y', 'new_value')
    assert mapping['x']['y'] == 'new_value'

    set_tree_node(mapping, 'x:z', 'another_new_value')
    assert mapping['x']['z'] == 'another_new_value'
```

# Generated at 2024-06-03 06:22:37.101811
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value', "Failed to set value at 'a:b:c'"

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value', "Failed to set value at 'a:b:d'"

    set_tree_node(mapping, 'x:y', 'new_value')
    assert mapping['x']['y'] == 'new_value', "Failed to set value at 'x:y'"

    set_tree_node(mapping, 'x:z', 'yet_another_value')
    assert mapping['x']['z'] == 'yet_another_value', "Failed to set value at 'x:z'"

    print("All tests passed for set_tree_node.")
```

# Generated at 2024-06-03 06:22:40.145090
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default='default') == 'default'

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:22:43.256233
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 'value')
    assert mapping['a']['b']['c'] == 'value'

    set_tree_node(mapping, 'a:b:d', 'another_value')
    assert mapping['a']['b']['d'] == 'another_value'

    set_tree_node(mapping, 'x:y:z', 'xyz_value')
    assert mapping['x']['y']['z'] == 'xyz_value'

    set_tree_node(mapping, 'x:y:w', 'xyw_value')
    assert mapping['x']['y']['w'] == 'xyw_value'
```

# Generated at 2024-06-03 06:24:23.719288
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:24:26.672435
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    # Test overwriting existing value
    set_tree_node(mapping, 'a:b:c', 5)
    assert mapping['a']['b']['c'] == 5

    # Test setting value in a new branch
    set_tree_node(mapping, 'g:h:i', 6)
    assert mapping['g']['h']['i'] == 6
```

# Generated at 2024-06-03 06:24:29.126745
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5
```

# Generated at 2024-06-03 06:24:31.889429
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5
```

# Generated at 2024-06-03 06:24:34.458416
```python
    mapping = tree()
    set_tree_node(mapping, 'a:b:c', 1)
    assert mapping['a']['b']['c'] == 1

    set_tree_node(mapping, 'a:b:d', 2)
    assert mapping['a']['b']['d'] == 2

    set_tree_node(mapping, 'a:e', 3)
    assert mapping['a']['e'] == 3

    set_tree_node(mapping, 'f', 4)
    assert mapping['f'] == 4

    set_tree_node(mapping, 'g:h:i:j', 5)
    assert mapping['g']['h']['i']['j'] == 5
```

# Generated at 2024-06-03 06:24:39.545852
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:24:43.243210
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:c', parent=True) == tree['a:b']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:24:46.525899
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:24:50.561752
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```

# Generated at 2024-06-03 06:24:54.016048
```python
    tree = Tree()
    tree['a:b:c'] = 1
    tree['a:b:d'] = 2
    tree['a:e'] = 3

    assert get_tree_node(tree, 'a:b:c') == 1
    assert get_tree_node(tree, 'a:b:d') == 2
    assert get_tree_node(tree, 'a:e') == 3
    assert get_tree_node(tree, 'a:b') == tree['a:b']
    assert get_tree_node(tree, 'a:b', parent=True) == tree['a']
    assert get_tree_node(tree, 'a:b:x', default=4) == 4

    try:
        get_tree_node(tree, 'a:b:x')
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError"
```