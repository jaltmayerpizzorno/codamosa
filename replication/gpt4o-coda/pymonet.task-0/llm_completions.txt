

# Generated at 2024-06-03 02:23:22.203139
```python
    def task_fn(value):
        return Task.of(value * 2)

    task = Task.of(5).bind(task_fn)
    
    def resolve(value):
        assert value == 10

    def reject(value):
        assert False, "Task should not be rejected"

    task.fork(reject, resolve)
```

# Generated at 2024-06-03 02:23:23.451497
```python
    def task_fn(value):
        return Task.of(value * 2)

    task = Task.of(5).bind(task_fn)
    
    def resolve(value):
        assert value == 10

    def reject(value):
        assert False, "Should not be called"

    task.fork(reject, resolve)
```

# Generated at 2024-06-03 02:23:25.255631
```python
    def resolve(value):
        nonlocal resolved_value
        resolved_value = value

    def reject(value):
        nonlocal rejected_value
        rejected_value = value

    resolved_value = None
    rejected_value = None

    task = Task.of(5).map(lambda x: x * 2)
    task.fork(reject, resolve)

    assert resolved_value == 10
    assert rejected_value is None
```

# Generated at 2024-06-03 02:23:27.062901
```python
    def resolve(value):
        nonlocal resolved_value
        resolved_value = value

    def reject(value):
        nonlocal rejected_value
        rejected_value = value

    resolved_value = None
    rejected_value = None

    task = Task.of(5).map(lambda x: x * 2)
    task.fork(reject, resolve)

    assert resolved_value == 10
    assert rejected_value is None
```

# Generated at 2024-06-03 02:23:28.600881
```python
    def resolve(value):
        nonlocal resolved_value
        resolved_value = value

    def reject(value):
        nonlocal rejected_value
        rejected_value = value

    resolved_value = None
    rejected_value = None

    task = Task.of(5).map(lambda x: x * 2)
    task.fork(reject, resolve)

    assert resolved_value == 10
    assert rejected_value is None
```

# Generated at 2024-06-03 02:23:31.733908
def test_Task_bind():
    # Test case 1: Successful bind
    task1 = Task.of(5)
    task2 = task1.bind(lambda x: Task.of(x * 2))
    task2.fork(
        lambda err: assert False,  # Should not reach here
        lambda res: assert res == 10
    )

    # Test case 2: Bind with rejection
    task3 = Task.of(5)
    task4 = task3.bind(lambda x: Task.reject("Error"))
    task4.fork(
        lambda err: assert err == "Error",
        lambda res: assert False  # Should not reach here
    )

    # Test case 3: Chained bind
    task5 = Task.of(5)
    task6 = task5.bind(lambda x: Task.of(x * 2)).bind(lambda x: Task.of(x + 3))
    task6.fork(
        lambda err: assert False,

# Generated at 2024-06-03 02:23:33.187263
```python
    def task_fn(value):
        return Task.of(value * 2)

    task = Task.of(5).bind(task_fn)
    
    def resolve(value):
        assert value == 10

    def reject(value):
        assert False, "Should not be called"

    task.fork(reject, resolve)
```

# Generated at 2024-06-03 02:23:34.915088
```python
    def resolve(value):
        nonlocal resolved_value
        resolved_value = value

    def reject(value):
        nonlocal rejected_value
        rejected_value = value

    resolved_value = None
    rejected_value = None

    task = Task.of(5).map(lambda x: x * 2)
    task.fork(reject, resolve)

    assert resolved_value == 10
    assert rejected_value is None
```

# Generated at 2024-06-03 02:23:36.436953
```python
    def task_fn(value):
        return Task.of(value * 2)

    task = Task.of(5).bind(task_fn)
    
    def resolve(value):
        assert value == 10

    def reject(value):
        assert False, "Task should not be rejected"

    task.fork(reject, resolve)
```

# Generated at 2024-06-03 02:23:38.245909
```python
    def task_fn(value):
        return Task.of(value * 2)

    task = Task.of(5).bind(task_fn)
    
    def resolve(value):
        assert value == 10

    def reject(value):
        assert False, "Task should not be rejected"

    task.fork(reject, resolve)
```