# Automatically generated by Pynguin.
import tornado.escape as module_0

def test_case_0():
    str_0 = 'Hello http://tornadoweb.org!'
    str_1 = module_0.linkify(str_0)

def test_case_1():
    int_0 = -2444
    str_0 = module_0.json_encode(int_0)

def test_case_2():
    str_0 = 'K4xyUk[YW,'
    str_1 = module_0.squeeze(str_0)

def test_case_3():
    bytes_0 = b'\t\x0e\xac\xe6\xc6\x08\xf1\xc8$\x9e\x1f\x93\xe1\xc1\xec\x8a'
    str_0 = module_0.url_escape(bytes_0)

def test_case_4():
    bytes_0 = b'\xa5uJg'
    dict_0 = module_0.parse_qs_bytes(bytes_0)

def test_case_5():
    str_0 = 'Y#<)?7Id7s1'
    optional_0 = module_0.utf8(str_0)

def test_case_6():
    bytes_0 = b'\xf0\x80\xd8\x0e\xca\x1a'
    optional_0 = module_0.utf8(bytes_0)

def test_case_7():
    str_0 = '6AX9UR,P!"j'
    any_0 = module_0.recursive_unicode(str_0)

def test_case_8():
    str_0 = '&F&\x0bjxbsnM>v\\N\n'
    bytes_0 = b'3x=Ux[>M\x19\x1c'
    list_0 = [bytes_0]
    dict_0 = {str_0: list_0, str_0: list_0}
    any_0 = module_0.recursive_unicode(dict_0)
    str_1 = 'ZHU0" \x0cr-3\t='
    str_2 = module_0.json_encode(str_1)
    str_3 = module_0.xhtml_unescape(str_1)
    str_4 = 'y\\'
    optional_0 = module_0.utf8(str_4)

def test_case_9():
    str_0 = 'Hello http://tornadoweb.org!'
    bool_0 = False
    str_1 = module_0.linkify(str_0, bool_0, str_0)

def test_case_10():
    str_0 = 'Y#<)?7Id7s1'
    str_1 = module_0.linkify(str_0)

def test_case_11():
    str_0 = 'http://your.site.com/auth/google\\'
    str_1 = module_0.linkify(str_0, str_0)

def test_case_12():
    str_0 = 'Hello http://tornadoweb.org!'
    str_1 = module_0.linkify(str_0, str_0)

def test_case_13():
    str_0 = "This module contains implementations of various third-party\nauthentication schemes.\n\nAll the classes in this file are class mixins designed to be used with\nthe `tornado.web.RequestHandler` class.  They are used in two ways:\n\n* On a login handler, use methods such as ``authenticate_redirect()``,\n  ``authorize_redirect()``, and ``get_authenticated_user()`` to\n  establish the user's identity and store authentication tokens to your\n  database and/or cookies.\n* In non-login handlers, use methods such as ``facebook_request()``\n  or ``twitter_request()`` to use the authentication tokens to make\n  requests to the respective services.\n\nThey all take slightly different arguments due to the fact all these\nservices implement authentication and authorization slightly differently.\nSee the individual service classes below for complete documentation.\n\nExample usage for Google OAuth:\n\n.. testcode::\n\n    class GoogleOAuth2LoginHandler(tornado.web.RequestHandler,\n                                   tornado.auth.GoogleOAuth2Mixin):\n        async def get(self):\n            if self.get_argument('code', False):\n                user = await self.get_authenticated_user(\n                    redirect_uri='http://your.site.com/auth/google',\n                    code=self.get_argument('code'))\n                # Save the user with e.g. set_secure_cookie\n            else:\n                self.authorize_redirect(\n                    redirect_uri='http://your.site.com/auth/google',\n                    client_id=self.settings['google_oauth']['key'],\n                    scope=['profile', 'email'],\n                    response_type='code',\n                    extra_params={'approval_prompt': 'auto'})\n\n.. testoutput::\n   :hide:\n\n"
    var_0 = module_0.url_unescape(str_0, str_0)
    bool_0 = False
    var_1 = module_0.url_unescape(str_0, bool_0)
    any_0 = module_0.recursive_unicode(var_1)
    optional_0 = module_0.utf8(str_0)
    str_1 = module_0.json_encode(any_0)
    list_0 = []
    any_1 = module_0.recursive_unicode(list_0)
    str_2 = module_0.linkify(str_1, str_1)
    dict_0 = module_0.parse_qs_bytes(str_2)
    str_3 = module_0.xhtml_unescape(str_2)
    str_4 = '@)33oyu !t'
    str_5 = module_0.squeeze(str_4)
    optional_1 = module_0.to_unicode(str_3)
    str_6 = ''
    str_7 = module_0.squeeze(str_6)

def test_case_14():
    str_0 = 'Hello http://tornadoweb.org!'
    bool_0 = False
    list_0 = [str_0, str_0]
    str_1 = module_0.linkify(str_0, bool_0, str_0, list_0)

def test_case_15():
    str_0 = 'Hello htt9://tornadoweb.org!'
    str_1 = module_0.linkify(str_0)