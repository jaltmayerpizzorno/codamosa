# Automatically generated by Pynguin.
import tornado.netutil as module_0
import ssl as module_1
import socket as module_2

def test_case_0():
    pass

def test_case_1():
    int_0 = 332
    list_0 = module_0.bind_sockets(int_0)

def test_case_2():
    str_0 = '5g{N3 2 \t**HQ6owxj<R'
    socket_0 = module_0.bind_unix_socket(str_0)

def test_case_3():
    str_0 = '192.168.1.1'
    bool_0 = module_0.is_valid_ip(str_0)

def test_case_4():
    str_0 = 'h/"\'R)G'
    bool_0 = module_0.is_valid_ip(str_0)

def test_case_5():
    dict_0 = {}
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)

def test_case_6():
    str_0 = '^#(Z|@p[3"x'
    socket_0 = module_0.bind_unix_socket(str_0)
    s_s_l_context_0 = module_1.SSLContext()
    s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0)

def test_case_7():
    str_0 = '5g{N3 2 \t**HQ6owxj<R'
    socket_0 = module_0.bind_unix_socket(str_0)

def test_case_8():
    str_0 = None
    bool_0 = module_0.is_valid_ip(str_0)
    int_0 = 9
    list_0 = module_0.bind_sockets(int_0)

def test_case_9():
    resolver_0 = module_0.Resolver()
    resolver_0.close()
    int_0 = -2694
    address_family_0 = module_2.AddressFamily.AF_NETROM
    dict_0 = {resolver_0: resolver_0, resolver_0: resolver_0, resolver_0: resolver_0}
    list_0 = [resolver_0, resolver_0]
    override_resolver_0 = module_0.OverrideResolver(*list_0)
    override_resolver_0.initialize(resolver_0, dict_0)
    str_0 = 't:JW#p^Z`qOAxV-z\n"5'
    int_1 = None
    awaitable_0 = resolver_0.resolve(str_0, int_1, address_family_0)
    dict_1 = {}
    str_1 = 'Utility classes to write to and read from non-blocking files and sockers.\n\nContents:\n\n* `BaseIOStream`: Generic interface for reading and writing.\n* `IOStream`: Implementation of BaseIOStream using non-blocking sockets.\n* `SSLIOStream`: SSL-aware version of IOStream.\n* `PipeIOStream`: Pipe-based IOStream impleentation.\n'
    awaitable_1 = override_resolver_0.resolve(str_1, int_0)
    str_2 = 'tF\x0b=_>'
    socket_0 = module_0.bind_unix_socket(str_2, int_0)
    s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_1)
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_1)
    str_3 = '_7'
    bool_0 = module_0.is_valid_ip(str_3)
    int_2 = 104857600
    list_1 = module_0.bind_sockets(int_2)