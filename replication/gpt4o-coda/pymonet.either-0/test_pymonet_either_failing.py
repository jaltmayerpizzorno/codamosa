# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        var_0 = None
        callable_0 = None
        either_0 = module_0.Either(var_0)
        var_1 = either_0.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ImmutableList[U]'
        set_0 = {str_0, str_0, str_0}
        bool_0 = True
        list_0 = [str_0, str_0, str_0]
        left_0 = module_0.Left(list_0)
        var_0 = left_0.bind(bool_0)
        either_0 = module_0.Either(var_0)
        var_1 = either_0.ap(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -5128
        bytes_0 = b'0\xf7*\xe0\xe0+5\x9a\x07@\xd5\x1b\x9a\xa2Z\xbd\x11\xc4\x15'
        left_0 = module_0.Left(bytes_0)
        var_0 = left_0.bind(bytes_0)
        str_0 = 'C'
        set_0 = {int_0, int_0}
        either_0 = module_0.Either(set_0)
        var_1 = either_0.case(var_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '_IF>'
        str_1 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
        bool_0 = False
        left_0 = module_0.Left(bool_0)
        var_0 = left_0.ap(dict_0)
        var_1 = None
        right_0 = module_0.Right(var_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'8\xb2j\x80\xbe\xe5V\x0e\xb2dN\xdbwX|\n\xfe/\xfa'
        left_0 = module_0.Left(bytes_0)
        bool_0 = left_0.is_left()
        right_0 = module_0.Right(left_0)
        str_0 = '24:4Qc;bj0O[P\trR5#'
        dict_0 = {str_0: bytes_0}
        var_0 = right_0.map(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        right_0 = module_0.Right(dict_0)
        var_0 = right_0.to_validation()
        bytes_0 = b'\x8fUO-z\xbd'
        var_1 = right_0.bind(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        object_0 = module_1.object()
        right_0 = module_0.Right(object_0)
        bool_0 = right_0.is_left()
        callable_0 = None
        var_0 = right_0.bind(callable_0)
    except BaseException:
        pass