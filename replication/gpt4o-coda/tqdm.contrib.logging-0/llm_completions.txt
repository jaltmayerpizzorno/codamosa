

# Generated at 2024-06-04 18:21:28.819470
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:21:33.022816
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:21:36.279918
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:21:39.299497
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:21:44.231646
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:21:48.616923
```python
    import logging
    from tqdm import trange
    from ..std import tqdm as std_tqdm

    LOG = logging.getLogger(__name__)

    logging.basicConfig(level=logging.INFO)
    with tqdm_logging_redirect(total=9) as pbar:
        for i in range(9):
            if i == 4:
                LOG.info("console logging redirected to `tqdm.write()`")
            pbar.update(1)
```

# Generated at 2024-06-04 18:21:52.634487
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    # Create a logger object
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)

    # Create a string stream to capture the logs
    log_stream = StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    # Use the logging_redirect_tqdm context manager
    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("This is a test log message.")

    # Check if the log message was redirected to tqdm
    log_contents = log_stream.getvalue()
    assert "This is a test log message." in log_contents

    # Clean up
    logger.removeHandler(stream_handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:21:55.551003
```python
    import logging
    from tqdm import trange
    from io import StringIO

    log_output = StringIO()
    handler = logging.StreamHandler(log_output)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger]):
        for i in trange(3):
            logger.info(f"Logging iteration {i}")

    log_contents = log_output.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents

    log_output.close()
```

# Generated at 2024-06-04 18:21:59.620195
```python
    import logging
    from tqdm import trange
    from io import StringIO

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], total=5) as pbar:
        for i in range(5):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
    assert "Logging iteration 3" in log_contents
    assert "Logging iteration 4" in log_contents
```

# Generated at 2024-06-04 18:22:02.670111
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    tqdm_handler = _TqdmLoggingHandler()
    logger.addHandler(tqdm_handler)

    with logging_redirect_tqdm(loggers=[logger]):
        with std_tqdm(total=3) as pbar:
            logger.info("Test message 1")
            pbar.update(1)
            logger.info("Test message 2")
            pbar.update(1)
            logger.info("Test message 3")
            pbar.update(1)
```

# Generated at 2024-06-04 18:22:11.473673
```python
    import logging
    from tqdm import trange
    from . import tqdm_logging_redirect

    LOG = logging.getLogger(__name__)

    logging.basicConfig(level=logging.INFO)
    with tqdm_logging_redirect(total=9) as pbar:
        for i in range(9):
            if i == 4:
                LOG.info("console logging redirected to `tqdm.write()`")
            pbar.update(1)
```

# Generated at 2024-06-04 18:22:13.492134
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_capture = []
    handler = _TqdmLoggingHandler()
    handler.setFormatter(logging.Formatter('%(message)s'))
    handler.tqdm_class.write = log_capture.append
    logger.addHandler(handler)

    logger.info('Test message')

    assert log_capture == ['Test message']
```

# Generated at 2024-06-04 18:22:15.549490
```python
    import logging
    from tqdm import trange
    from ..std import tqdm as std_tqdm

    LOG = logging.getLogger(__name__)

    logging.basicConfig(level=logging.INFO)
    with tqdm_logging_redirect(total=9) as pbar:
        for i in range(9):
            if i == 4:
                LOG.info("console logging redirected to `tqdm.write()`")
            pbar.update(1)
```

# Generated at 2024-06-04 18:22:20.748723
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    # Create a logger object
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)

    # Create a string stream to capture the logs
    log_stream = StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    # Use the logging_redirect_tqdm context manager
    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("This is a test log message.")

    # Check the output in the log stream
    log_contents = log_stream.getvalue()
    assert "This is a test log message." in log_contents

    # Clean up
    logger.removeHandler(stream_handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:22:23.770032
```python
    import logging
    from tqdm import trange
    from io import StringIO

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger]):
        for i in trange(3):
            logger.info(f"Logging iteration {i}")

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:22:27.439661
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    # Create a logger object
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)

    # Create a string stream to capture the logs
    log_stream = StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    # Use the logging_redirect_tqdm context manager
    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    # Check if the message was redirected to tqdm
    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    # Clean up
    logger.removeHandler(stream_handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:22:29.726717
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_capture = []

    class MockTqdm:
        @staticmethod
        def write(msg, file=None):
            log_capture.append(msg)

    handler = _TqdmLoggingHandler(tqdm_class=MockTqdm)
    logger.addHandler(handler)

    logger.info("Test message")

    assert log_capture == ["Test message"]
```

# Generated at 2024-06-04 18:22:32.059543
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_capture = []
    handler = _TqdmLoggingHandler()
    handler.setFormatter(logging.Formatter('%(message)s'))
    handler.tqdm_class.write = log_capture.append
    logger.addHandler(handler)

    logger.info('Test message')

    assert log_capture == ['Test message']
```

# Generated at 2024-06-04 18:22:37.155186
```
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:22:39.491584
```
    import logging
    from tqdm import tqdm

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    stream_handler = logging.StreamHandler(sys.stdout)
    logger.addHandler(stream_handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm) as pbar:
        logger.info("Test message")
        pbar.update(1)

    assert "Test message" in sys.stdout.getvalue()
```

# Generated at 2024-06-04 18:22:56.394739
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)

    # Use the logging_redirect_tqdm context manager
    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    # Check if the message was redirected to tqdm
    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    # Clean up
    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:23:00.502895
```
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:23:04.725703
```
    import logging
    from tqdm import tqdm

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_stream = io.StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    with tqdm_logging_redirect(loggers=[logger], total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:23:07.274492
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:23:10.458052
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:23:12.463536
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_capture = []
    handler = _TqdmLoggingHandler()
    handler.setFormatter(logging.Formatter('%(message)s'))
    handler.tqdm_class.write = log_capture.append
    logger.addHandler(handler)

    logger.info('Test message')

    assert log_capture == ['Test message']
```

# Generated at 2024-06-04 18:23:15.648153
```
    import logging
    from tqdm import tqdm

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_stream = logging.StreamHandler()
    logger.addHandler(log_stream)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm) as pbar:
        logger.info("Test message")
        pbar.update(1)

    log_contents = log_stream.stream.getvalue()
    assert "Test message" in log_contents
```

# Generated at 2024-06-04 18:23:20.313307
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:23:23.368890
```python
    import logging
    from ..std import tqdm as std_tqdm
    from io import StringIO

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_stream = StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=std_tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents
```

# Generated at 2024-06-04 18:23:27.186837
```python
    import logging
    from tqdm import trange
    from ..std import tqdm as std_tqdm

    LOG = logging.getLogger(__name__)

    logging.basicConfig(level=logging.INFO)
    with tqdm_logging_redirect(total=9, loggers=[LOG]) as pbar:
        for i in range(9):
            if i == 4:
                LOG.info("console logging redirected to `tqdm.write()`")
            pbar.update(1)
```

# Generated at 2024-06-04 18:23:56.467448
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:23:59.574105
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:24:02.835581
```python
    import logging
    from tqdm import trange
    from io import StringIO

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger]):
        for i in trange(3):
            if i == 1:
                logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents
```

# Generated at 2024-06-04 18:24:06.360711
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:24:09.936320
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:24:12.104089
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_capture = []

    class MockTqdm:
        @staticmethod
        def write(msg, file=None):
            log_capture.append(msg)

    handler = _TqdmLoggingHandler(tqdm_class=MockTqdm)
    logger.addHandler(handler)

    logger.info("Test message")

    assert log_capture == ["Test message"]
```

# Generated at 2024-06-04 18:24:16.964945
```python
    import io
    from unittest.mock import MagicMock

    # Create a logger and a stream to capture the output
    logger = logging.getLogger('test_logger')
    stream = io.StringIO()
    handler = _TqdmLoggingHandler()
    handler.setStream(stream)
    logger.addHandler(handler)
    logger.setLevel(logging.INFO)

    # Mock the tqdm_class.write method
    handler.tqdm_class.write = MagicMock()

    # Emit a log record
    logger.info("Test message")

    # Check if the message was written using tqdm_class.write
    handler.tqdm_class.write.assert_called_with("Test message\n", file=stream)
```

# Generated at 2024-06-04 18:24:19.211927
```
    import logging
    from tqdm import tqdm

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_stream = logging.StreamHandler()
    logger.addHandler(log_stream)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm) as pbar:
        logger.info("Test message")
        pbar.update(1)

    log_contents = log_stream.stream.getvalue()
    assert "Test message" in log_contents
```

# Generated at 2024-06-04 18:24:21.836410
```
    import logging
    from tqdm import tqdm

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_stream = logging.StreamHandler()
    logger.addHandler(log_stream)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm) as pbar:
        logger.info("Test message")
        pbar.update(1)

    log_contents = log_stream.stream.getvalue()
    assert "Test message" in log_contents
```

# Generated at 2024-06-04 18:24:27.351782
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:25:22.940360
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    # Create a logger object
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)

    # Create a string stream to capture the logs
    log_stream = StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    # Use the logging_redirect_tqdm context manager
    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("This is a test log message.")

    # Check if the log message was redirected to tqdm
    log_contents = log_stream.getvalue()
    assert "This is a test log message." in log_contents

    # Clean up
    logger.removeHandler(stream_handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:25:26.553175
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:25:29.178132
```python
    import logging
    from tqdm import trange
    from . import tqdm_logging_redirect

    LOG = logging.getLogger(__name__)

    logging.basicConfig(level=logging.INFO)
    with tqdm_logging_redirect(total=9) as pbar:
        for i in range(9):
            if i == 4:
                LOG.info("console logging redirected to `tqdm.write()`")
            pbar.update(1)
```

# Generated at 2024-06-04 18:25:33.058383
```python
    import logging
    from tqdm import trange
    from ..std import tqdm as std_tqdm

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    stream_handler = logging.StreamHandler(sys.stdout)
    logger.addHandler(stream_handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=std_tqdm):
        for i in trange(5):
            if i == 2:
                logger.info("Test message")

    # Check if the handler was restored
    assert any(isinstance(handler, logging.StreamHandler) for handler in logger.handlers)
```

# Generated at 2024-06-04 18:25:38.183008
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:25:40.517126
```python
    import logging
    from tqdm import trange
    from . import tqdm_logging_redirect

    LOG = logging.getLogger(__name__)

    logging.basicConfig(level=logging.INFO)
    with tqdm_logging_redirect(total=9) as pbar:
        for i in range(9):
            if i == 4:
                LOG.info("console logging redirected to `tqdm.write()`")
            pbar.update(1)
```

# Generated at 2024-06-04 18:25:44.239385
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    # Create a logger
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_stream = StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    # Test the logging redirection
    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    # Check if the message was redirected to tqdm
    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents, "The log message was not redirected to tqdm"
```

# Generated at 2024-06-04 18:25:48.584891
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:25:51.571307
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    tqdm_handler = _TqdmLoggingHandler()
    logger.addHandler(tqdm_handler)

    with logging_redirect_tqdm([logger]):
        with std_tqdm(total=3) as pbar:
            logger.info("Test message 1")
            pbar.update(1)
            logger.info("Test message 2")
            pbar.update(1)
            logger.info("Test message 3")
            pbar.update(1)
```

# Generated at 2024-06-04 18:25:54.141066
```
    import logging
    from tqdm import tqdm

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_stream = io.StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm) as pbar:
        logger.info("Test message")
        pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents
```

# Generated at 2024-06-04 18:27:39.383586
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_capture = []
    handler = _TqdmLoggingHandler()
    handler.tqdm_class.write = log_capture.append
    logger.addHandler(handler)

    logger.info("Test message")

    assert len(log_capture) == 1
    assert "Test message" in log_capture[0]
```

# Generated at 2024-06-04 18:27:44.214621
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:27:47.828840
```
    import logging
    from tqdm import tqdm

    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_stream = io.StringIO()
    stream_handler = logging.StreamHandler(log_stream)
    logger.addHandler(stream_handler)

    with tqdm_logging_redirect(loggers=[logger], total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:27:50.343671
```python
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    log_capture = []

    class MockTqdm:
        @staticmethod
        def write(msg, file=None):
            log_capture.append(msg)

    handler = _TqdmLoggingHandler(tqdm_class=MockTqdm)
    logger.addHandler(handler)

    logger.info("Test message")

    assert log_capture == ["Test message"]
```

# Generated at 2024-06-04 18:27:53.929289
```
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:27:56.070868
```python
    import logging
    from tqdm import trange
    from ..std import tqdm as std_tqdm

    LOG = logging.getLogger(__name__)

    logging.basicConfig(level=logging.INFO)
    with tqdm_logging_redirect(total=9) as pbar:
        for i in range(9):
            if i == 4:
                LOG.info("console logging redirected to `tqdm.write()`")
            pbar.update(1)
```

# Generated at 2024-06-04 18:28:00.002570
```python
    import logging
    from io import StringIO
    from tqdm import tqdm

    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=tqdm):
        logger.info("Test message")

    log_contents = log_stream.getvalue()
    assert "Test message" in log_contents

    logger.removeHandler(handler)
    log_stream.close()
```

# Generated at 2024-06-04 18:28:04.318843
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:28:08.570189
```python
    import logging
    from tqdm import tqdm
    from io import StringIO

    log_stream = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    with tqdm_logging_redirect(loggers=[logger], tqdm_class=tqdm, total=3) as pbar:
        for i in range(3):
            logger.info(f"Logging iteration {i}")
            pbar.update(1)

    log_contents = log_stream.getvalue()
    assert "Logging iteration 0" in log_contents
    assert "Logging iteration 1" in log_contents
    assert "Logging iteration 2" in log_contents
```

# Generated at 2024-06-04 18:28:10.844797
```python
    import logging
    from io import StringIO
    from ..std import tqdm as std_tqdm

    log_output = StringIO()
    logger = logging.getLogger('test_logger')
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler(log_output)
    logger.addHandler(handler)

    with logging_redirect_tqdm(loggers=[logger], tqdm_class=std_tqdm):
        logger.info("Test message")

    log_contents = log_output.getvalue()
    assert "Test message" in log_contents
```