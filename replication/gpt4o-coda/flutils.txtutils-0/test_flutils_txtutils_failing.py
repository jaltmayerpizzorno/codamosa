# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    try:
        str_0 = 'o;u&8cv-S'
        bool_0 = False
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_0, placeholder=str_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\tf%*+V'
        bool_0 = True
        int_0 = 220
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        int_0 = module_0.len_without_ansi(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '.8 '
        int_0 = 50855936
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, max_lines=int_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = '%me?F-Qn<-YBE)i@Kj'
        bool_0 = True
        bool_1 = False
        str_2 = 'ACc\rN}Dt:@\r'
        str_3 = ansi_text_wrapper_0.fill(str_2)
        int_1 = None
        str_4 = '\x0c Q=?J$4mkeor~\n}\t'
        bool_2 = None
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(str_4, bool_2, bool_0)
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_1, str_1, bool_0, bool_0, bool_1, int_1, placeholder=str_1)
        bool_3 = True
        bool_4 = False
        ansi_text_wrapper_3 = module_0.AnsiTextWrapper(bool_3, bool_4, bool_1)
        str_5 = ansi_text_wrapper_1.fill(str_4)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        bool_0 = True
        int_0 = 50987760
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_0, int_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        str_1 = '*bK'
        bool_1 = True
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_1, int_0, max_lines=int_0)
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper()
        list_1 = ansi_text_wrapper_0.wrap(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "/04Q'H7Jj[&&y/"
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
        str_2 = ansi_text_wrapper_0.fill(str_0)
        str_3 = ' *RM2seq[D8k8m'
        list_0 = ansi_text_wrapper_0.wrap(str_3)
        str_4 = ansi_text_wrapper_0.fill(str_0)
        int_0 = 404
        str_5 = '`lw='
        bool_1 = False
        int_1 = -1787
        str_6 = 'VTx'
        str_7 = ansi_text_wrapper_0.fill(str_6)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_5, bool_1, bool_1, max_lines=int_1)
        str_8 = "Convert the given ``text`` into a string of escaped UTF8 hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped UTF8 hexadecimal.\n\n    Example:\n        >>> from flutils.strutils import as_literal_utf8\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_escaped_utf8_literal(t)\n        '\\\\x31\\\\x2e\\\\xe2\\\\x98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b\n        \\\\x91'\n    "
        str_9 = '#f'
        str_10 = ansi_text_wrapper_1.fill(str_9)
        bool_2 = None
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(int_0, bool_1, bool_2, bool_1, max_lines=int_0)
        str_11 = ansi_text_wrapper_1.fill(str_8)
        str_12 = "Return a string describing the file type if it exists.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to check for existence.\n\n    :rtype:\n        :obj:`str`\n\n        * ``''`` (empty string): if the given ``path`` does NOT exist; or,\n          is a broken symbolic link; or, other errors (such as permission\n          errors) are propagated.\n        * ``'directory'``: if the given ``path`` points to a directory or\n          is a symbolic link pointing to a directory.\n        * ``'file'``: if the given ``path`` points to a regular file or is a\n          symbolic link pointing to a regular file.\n        * ``'block device'``: if the given ``path`` points to a block device or\n          is a symbolic link pointing to a block device.\n        * ``'char device'``: if the given ``path`` points to a character device\n          or is a symbolic link pointing to a character device.\n        * ``'FIFO'``: if the given ``path`` points to a FIFO or is a symbolic\n          link pointing to a FIFO.\n        * ``'socket'``: if the given ``path`` points to a Unix socket or is a\n          symbolic link pointing to a Unix socket.\n\n    Example:\n        >>> from flutils.pathutils import exists_as\n        >>> exists_as('~/tmp')\n        'directory'\n    "
        list_1 = ansi_text_wrapper_1.wrap(str_12)
        list_2 = ansi_text_wrapper_1.wrap(str_11)
        str_13 = '98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b'
        list_3 = ansi_text_wrapper_1.wrap(str_13)
        list_4 = ansi_text_wrapper_2.wrap(str_12)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        str_0 = "The given 'identifier' mustbe a 'str'.  Got: %r"
        int_0 = 384
        int_1 = -1787
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, bool_0, bool_0, max_lines=int_1)
        str_1 = "Convert the given ``text`` into a string of escaped UTF8 hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped UTF8 hexadecimal.\n\n    Example:\n        >>> from flutils.strutils import as_literal_utf8\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_escaped_utf8_literal(t)\n        '\\\\x31\\\\x2e\\\\xe2\\\\x98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b\n        \\\\x91'\n    "
        int_2 = 3630
        bool_1 = True
        str_2 = '#f'
        str_3 = ansi_text_wrapper_0.fill(str_2)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_2, bool_1, bool_0, max_lines=int_2)
        str_4 = ansi_text_wrapper_0.fill(str_1)
        list_0 = ansi_text_wrapper_0.wrap(str_4)
        list_1 = ansi_text_wrapper_1.wrap(str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 384
        str_0 = '`lw='
        bool_0 = False
        int_1 = -1787
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, bool_0, bool_0, max_lines=int_1)
        int_2 = 3630
        bool_1 = None
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_2, bool_0, bool_1, bool_0, max_lines=int_2)
        str_1 = None
        str_2 = "Return a string describing the file type if it exists.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to check for existence.\n\n    :rtype:\n        :obj:`str`\n\n        * ``''`` (empty string): if the given ``path`` does NOT exist; or,\n          is a broken symbolic link; or, other errors (such as permission\n          errors) are propagated.\n        * ``'directory'``: if the given ``path`` points to a directory or\n          is a symbolic link pointing to a directory.\n        * ``'file'``: if the given ``path`` points to a regular file or is a\n          symbolic link pointing to a regular file.\n        * ``'block device'``: if the given ``path`` points to a block device or\n          is a symbolic link pointing to a block device.\n        * ``'char device'``: if the given ``path`` points to a character device\n          or is a symbolic link pointing to a character device.\n        * ``'FIFO'``: if the given ``path`` points to a FIFO or is a symbolic\n          link pointing to a FIFO.\n        * ``'socket'``: if the given ``path`` points to a Unix socket or is a\n          symbolic link pointing to a Unix socket.\n\n    Example:\n        >>> from flutils.pathutils import exists_as\n        >>> exists_as('~/tmp')\n        'directory'\n    "
        list_0 = ansi_text_wrapper_0.wrap(str_2)
        list_1 = ansi_text_wrapper_0.wrap(str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "/04Q'H7Jj[&&y/"
        int_0 = 384
        bool_0 = False
        int_1 = -1787
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, bool_0, bool_0, max_lines=int_1)
        str_1 = "Convert the given ``text`` into a string of escaped UTF8 hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped UTF8 hexadecimal.\n\n    Example:\n        >>> from flutils.strutils import as_literal_utf8\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_escaped_utf8_literal(t)\n        '\\\\x31\\\\x2e\\\\xe2\\\\x98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b\n        \\\\x91'\n    "
        int_2 = 3630
        bool_1 = True
        str_2 = '#f'
        str_3 = ansi_text_wrapper_0.fill(str_2)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_2, bool_1, bool_0, max_lines=int_2)
        str_4 = ansi_text_wrapper_0.fill(str_1)
        list_0 = ansi_text_wrapper_0.wrap(str_4)
        list_1 = ansi_text_wrapper_1.wrap(str_2)
    except BaseException:
        pass