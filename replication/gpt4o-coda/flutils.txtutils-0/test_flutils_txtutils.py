# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()

def test_case_1():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_2():
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    str_0 = 'OvRx):64<~#)PX;Y.\x0c'
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_3():
    bool_0 = True
    str_0 = '.,'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_4():
    str_0 = 'S$`/^Q<^'
    int_0 = -1728
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_5():
    str_0 = 'P$1ssBvd\x0b>Ub*$;V\x0by;-'
    bool_0 = True
    int_0 = -2976
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, int_0)
    str_1 = ''
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, placeholder=str_1)
    list_0 = ansi_text_wrapper_1.wrap(str_0)

def test_case_6():
    str_0 = "/04Q'H7Jj[&&y/"
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)
    str_2 = ansi_text_wrapper_0.fill(str_0)
    str_3 = ansi_text_wrapper_0.fill(str_0)
    int_0 = 404
    str_4 = '`lw='
    int_1 = -1787
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, str_4, bool_0, bool_0, max_lines=int_1)
    str_5 = "Convert the given ``text`` into a string of escaped UTF8 hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped UTF8 hexadecimal.\n\n    Example:\n        >>> from flutils.strutils import as_literal_utf8\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_escaped_utf8_literal(t)\n        '\\\\x31\\\\x2e\\\\xe2\\\\x98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b\n        \\\\x91'\n    "
    str_6 = '#f'
    str_7 = ansi_text_wrapper_1.fill(str_6)
    str_8 = ansi_text_wrapper_1.fill(str_5)
    str_9 = "Return a string describing the file type if it exists.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to check for existence.\n\n    :rtype:\n        :obj:`str`\n\n        * ``''`` (empty string): if the given ``path`` does NOT exist; or,\n          is a broken symbolic link; or, other errors (such as permission\n          errors) are propagated.\n        * ``'directory'``: if the given ``path`` points to a directory or\n          is a symbolic link pointing to a directory.\n        * ``'file'``: if the given ``path`` points to a regular file or is a\n          symbolic link pointing to a regular file.\n        * ``'block device'``: if the given ``path`` points to a block device or\n          is a symbolic link pointing to a block device.\n        * ``'char device'``: if the given ``path`` points to a character device\n          or is a symbolic link pointing to a character device.\n        * ``'FIFO'``: if the given ``path`` points to a FIFO or is a symbolic\n          link pointing to a FIFO.\n        * ``'socket'``: if the given ``path`` points to a Unix socket or is a\n          symbolic link pointing to a Unix socket.\n\n    Example:\n        >>> from flutils.pathutils import exists_as\n        >>> exists_as('~/tmp')\n        'directory'\n    "
    list_0 = ansi_text_wrapper_1.wrap(str_9)
    list_1 = ansi_text_wrapper_1.wrap(str_8)
    str_10 = '98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b'
    list_2 = ansi_text_wrapper_1.wrap(str_10)
    list_3 = ansi_text_wrapper_0.wrap(str_9)

def test_case_7():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    set_0 = {str_0, str_0, str_0, str_0}
    int_0 = module_0.len_without_ansi(set_0)
    str_1 = 'f"o{0nT'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, placeholder=str_1)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_8():
    str_0 = '\x1b[38;5;209foobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)
    str_1 = 'b)T|@<E73s_Kg_7'
    bool_0 = True
    bool_1 = True
    bool_2 = False
    str_2 = '{0<v+~!dq'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(str_1, bool_0, bool_1, bool_2, max_lines=int_0, placeholder=str_2)