

# Generated at 2024-05-31 21:30:58.297346
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:31:05.656675
```python
    play = None
    current_role_path = '/path/to/role'
    variable_manager = None
    loader = None
    collection_list = None

    # Test with valid string data
    data = 'valid_role'
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {'name': 'valid_role'}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e) == "Invalid role definition: 12345

# Generated at 2024-05-31 21:31:10.321449
```python
    play = None
    current_role_path = '/path/to/role'
    variable_manager = None
    loader = None
    collection_list = None

    # Test with valid string data
    data = 'valid_role'
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {'name': 'valid_role'}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e) == "Invalid role definition: 12345

# Generated at 2024-05-31 21:31:14.004807
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:31:18.201674
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:31:23.467456
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:31:28.315266
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:31:31.635983
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:31:36.267715
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:31:42.516866
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:31:51.505271
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:31:55.525971
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:32:00.891911
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:32:04.304668
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:32:07.963090
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:32:12.385246
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:32:16.588843
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:32:21.000541
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:32:25.024447
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:32:27.836710
```python
    play = None
    current_role_path = '/path/to/role'
    variable_manager = None
    loader = None
    collection_list = None

    # Test with valid string data
    data = 'valid_role'
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {'name': 'valid_role'}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e) == "Invalid role definition: 12345

# Generated at 2024-05-31 21:32:39.666204
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:32:51.534575
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:32:54.490451
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:32:59.434233
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:33:02.506079
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:33:07.167962
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:33:11.270509
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:33:16.203387
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:33:19.989889
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:33:23.196763
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:33:45.342886
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:33:49.123506
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:33:52.763517
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:33:56.899321
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:34:01.328875
```python
    play = None
    current_role_path = '/path/to/role'
    variable_manager = None
    loader = None
    collection_list = None

    # Test with valid string data
    data = 'valid_role'
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {'name': 'valid_role'}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e) == "Invalid role definition: 12345

# Generated at 2024-05-31 21:34:04.627053
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:34:07.980573
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:34:11.371229
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:34:15.026690
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:34:19.353016
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:35:00.688855
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:35:04.467065
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:35:08.114973
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:35:14.005816
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:35:17.881889
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:35:23.826134
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:35:27.164565
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:35:30.432616
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:35:34.488067
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:35:39.085036
```python
    play = None
    current_role_path = '/path/to/role'
    variable_manager = None
    loader = None
    collection_list = None

    # Test with valid string data
    data = 'valid_role'
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {'name': 'valid_role'}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e) == "Invalid role definition: 12345

# Generated at 2024-05-31 21:37:02.239875
```python
    play = "dummy_play"
    current_role_path = "/path/to/role"
    variable_manager = "dummy_variable_manager"
    loader = "dummy_loader"
    collection_list = ["dummy_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:37:05.351662
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:37:09.416985
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:37:13.265875
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:37:17.258066
```python
    play = None
    current_role_path = '/path/to/role'
    variable_manager = None
    loader = None
    collection_list = None

    # Test with valid string data
    data = 'valid_role'
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {'name': 'valid_role'}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e) == "Invalid role definition: 12345

# Generated at 2024-05-31 21:37:25.752961
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:37:30.622143
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:37:34.725677
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:37:39.341047
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:37:43.168974
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:40:19.218461
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:40:23.179020
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:40:26.411669
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:40:29.422937
def test_RoleInclude_load():
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
       

# Generated at 2024-05-31 21:40:32.671987
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:40:36.570766
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:40:40.614607
```python
    play = "dummy_play"
    current_role_path = "/path/to/role"
    variable_manager = "dummy_variable_manager"
    loader = "dummy_loader"
    collection_list = ["dummy_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:40:44.195296
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:40:47.619775
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "test_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "test_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:40:52.189179
```python
    play = "test_play"
    current_role_path = "/path/to/role"
    variable_manager = "test_variable_manager"
    loader = "test_loader"
    collection_list = ["test_collection"]

    # Test with valid string data
    data = "valid_role"
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with valid dict data
    data = {"name": "valid_role"}
    role_include = RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    assert isinstance(role_include, RoleInclude)

    # Test with invalid data type
    data = 12345
    try:
        RoleInclude.load(data, play, current_role_path, None, variable_manager, loader, collection_list)
    except AnsibleParserError as e:
        assert str(e)

# Generated at 2024-05-31 21:41:11.061858
```python
    parent_role = Role()
    parent_role.get_role_params = lambda: {'param1': 'value1'}
    parent_role.get_name = lambda: 'parent_role_name'
    parent_role._role_path = 'parent_role_path'

    include_role = IncludeRole(role=parent_role)
    include_role.get_include_params = IncludeRole.get_include_params.__get__(include_role)

    result = include_role.get_include_params()

    expected = {
        'param1': 'value1',
        'ansible_parent_role_names': ['parent_role_name'],
        'ansible_parent_role_paths': ['parent_role_path']
    }

    assert result == expected, f"Expected {expected}, but got {result}"
```

# Generated at 2024-05-31 21:41:14.521106
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self

# Generated at 2024-05-31 21:41:16.418039
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:41:18.224593
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:41:21.396223
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mock RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    RoleInclude.load = mock_role_include_load

    # Mock Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._metadata = type('', (), {})()
                self._metadata.allow_duplicates = True
                self._role_path = "/mock/role/path"
                self.collections = []
            def compile(self

# Generated at 2024-05-31 21:41:25.045145
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:41:27.636141
```python
    parent_role = Role()
    parent_role._role_path = '/path/to/parent_role'
    parent_role.get_name = lambda: 'parent_role'
    parent_role.get_role_params = lambda: {'param1': 'value1'}

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert 'param1' in params
    assert params['param1'] == 'value1'
    assert 'ansible_parent_role_names' in params
    assert params['ansible_parent_role_names'] == ['parent_role']
    assert 'ansible_parent_role_paths' in params
    assert params['ansible_parent_role_paths'] == ['/path/to/parent_role']
```

# Generated at 2024-05-31 21:41:30.767965
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:41:33.130504
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:41:36.744560
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:41:50.173630
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:41:53.169866
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:41:57.040471
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._from_files['handlers'] == 'main

# Generated at 2024-05-31 21:41:58.923921
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:42:02.604284
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:42:05.036255
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:42:08.906114
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:42:12.862715
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 21:42:16.757883
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:42:19.450877
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:42:28.733999
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:42:31.699496
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True

# Generated at 2024-05-31 21:42:33.350758
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:42:38.073177
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:42:41.324766
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:42:44.913852
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:42:48.350095
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:42:50.517308
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:42:54.434534
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    RoleInclude.load = mock_role_include_load

    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('obj', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile

# Generated at 2024-05-31 21:42:56.708677
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:43:06.547971
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:43:11.191519
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:43:13.088949
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:43:16.225351
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:43:18.827407
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:43:20.991888
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:43:24.457995
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:43:27.940125
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:43:31.482400
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:43:33.931790
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:43:44.633536
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:43:46.639022
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:43:49.184620
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:43:51.384759
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:43:54.374957
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 21:43:56.422673
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 21:43:59.270692
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 21:44:04.100343
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:44:06.899996
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:44:11.721283
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 21:44:22.655861
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:44:25.618674
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:44:27.692342
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 21:44:30.569193
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:44:32.597465
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 21:44:34.384492
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:44:35.890189
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:44:37.825111
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:44:39.933324
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 21:44:42.941507
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:44:52.177574
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:44:55.781608
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:44:59.361463
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:45:01.209493
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:02.886544
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:06.239999
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:45:08.487179
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:45:11.558815
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:45:13.230255
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:15.023330
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:24.278821
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:45:27.466639
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:45:29.339274
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:45:31.158026
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:45:34.300009
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:45:36.184918
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:38.127747
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:40.062684
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:41.902457
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:44.011312
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:53.142699
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:45:55.886117
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:45:57.980840
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:45:59.820633
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:46:01.679848
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:46:06.150786
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:46:09.353008
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:46:11.236405
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:46:15.961507
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:46:17.858951
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:46:26.561480
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:46:28.538561
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:46:32.693992
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 21:46:34.936821
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:46:37.270625
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:46:39.014348
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:46:40.690092
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:46:42.623664
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:46:45.799231
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:46:48.815094
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:46:59.251170
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True

# Generated at 2024-05-31 21:47:01.396540
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:47:04.373395
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:47:08.123258
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:47:11.408065
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:47:13.303643
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:47:15.563443
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:47:19.681450
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:47:21.807364
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:47:24.342291
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 21:47:35.369503
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self

# Generated at 2024-05-31 21:47:37.756470
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:47:41.297427
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:47:44.388746
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:47:47.855120
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:47:49.468860
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:47:52.033440
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:47:55.593431
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self

# Generated at 2024-05-31 21:47:57.377363
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:48:00.110729
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:48:10.716862
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:48:14.569779
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:48:18.356690
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:48:21.508272
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:48:25.405428
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('obj', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self

# Generated at 2024-05-31 21:48:29.044123
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:48:31.667647
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    assert all(isinstance(b, Block) for b in blocks)
    assert all(isinstance(h, Block) for h in handlers)
```

# Generated at 2024-05-31 21:48:35.197663
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:48:37.690816
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:48:39.464642
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:48:54.849351
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:48:56.982453
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:48:59.105584
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:49:01.481988
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 21:49:05.058389
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mock RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mock Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self._role_path = '/mock/role/path'
                self.collections = []
            def compile(self, play

# Generated at 2024-05-31 21:49:07.717956
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:49:10.223346
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:49:12.498858
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:49:18.037381
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 21:49:20.455361
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:49:37.529128
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:49:39.761639
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 21:49:43.090139
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 21:49:47.127671
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:49:49.043348
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:49:52.005958
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 21:49:54.004174
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 21:49:55.681418
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 21:49:58.685220
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:50:03.138526
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 21:50:20.292684
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._from_files['handlers'] == 'main

# Generated at 2024-05-31 21:50:22.735677
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 21:50:24.616612
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:50:28.416902
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('obj', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 21:50:31.713609
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 21:50:34.869993
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 21:50:37.014843
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:50:39.960222
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mock RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mock Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play

# Generated at 2024-05-31 21:50:41.888953
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 21:50:44.374835
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```