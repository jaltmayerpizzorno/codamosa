

# Generated at 2024-06-03 03:55:33.535959
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 03:55:37.011975
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"

    session = build_requests_session(raise_for_status=False)
    assert isinstance(session, Session)
    assert "response" not in session.hooks

    session = build_requests_session(retry=False)
    assert isinstance(session, Session)
    assert not any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())

    session = build_requests_session(retry=3)
    assert isinstance(session, Session)
    assert any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())

    retry_instance = Retry(total=5)
    session = build_requests_session(retry=retry_instance)
    assert isinstance(session, Session)
    assert any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    assert session.adapters["http://"].max_retries.total == 5
    assert session.adapters

# Generated at 2024-06-03 03:55:40.033762
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 03:55:43.014454
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    decorated_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = decorated_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_contents


# Generated at 2024-06-03 03:55:46.590384
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    
    session = build_requests_session(raise_for_status=False)
    assert isinstance(session, Session)
    assert "response" not in session.hooks
    
    session = build_requests_session(retry=False)
    assert isinstance(session, Session)
    assert not any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    
    session = build_requests_session(retry=3)
    assert isinstance(session, Session)
    assert any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    
    retry_instance = Retry(total=5)
    session = build_requests_session(retry=retry_instance)
    assert isinstance(session, Session)
    assert any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    assert session.adapters["http://"].max_retries.total == 5
    assert

# Generated at 2024-06-03 03:55:50.435912
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a handler to capture log output
    class ListHandler(logging.Handler):
        def emit(self, record):
            log_output.append(self.format(record))

    handler = ListHandler()
    handler.setFormatter(logging.Formatter("%(message)s"))
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the log output
    assert log_output[0] == "sample_function(1, 2, c

# Generated at 2024-06-03 03:55:53.723496
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    decorated_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = decorated_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_contents


# Generated at 2024-06-03 03:55:57.894798
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:56:01.892493
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:56:05.125022
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=3):
        return a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=4)

    # Check the result of the function call
    assert result == 7

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=4)" in log_contents
    assert "sample_function

# Generated at 2024-06-03 03:56:11.975724
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    
    session = build_requests_session(raise_for_status=False)
    assert "response" not in session.hooks
    
    session = build_requests_session(retry=False)
    assert not any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    
    session = build_requests_session(retry=3)
    assert isinstance(session.adapters["http://"].max_retries, Retry)
    assert session.adapters["http://"].max_retries.total == 3
    
    custom_retry = Retry(total=5)
    session = build_requests_session(retry=custom_retry)
    assert session.adapters["http://"].max_retries.total == 5
```

# Generated at 2024-06-03 03:56:15.276572
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:56:18.533287
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    
    session = build_requests_session(raise_for_status=False)
    assert "response" not in session.hooks
    
    session = build_requests_session(retry=False)
    assert not any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    
    session = build_requests_session(retry=3)
    assert isinstance(session.adapters["http://"].max_retries, Retry)
    assert session.adapters["http://"].max_retries.total == 3
    
    custom_retry = Retry(total=5)
    session = build_requests_session(retry=custom_retry)
    assert session.adapters["http://"].max_retries.total == 5
```

# Generated at 2024-06-03 03:56:21.729325
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 03:56:24.937399
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:56:27.965361
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:56:31.010628
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a handler to capture log output
    class ListHandler(logging.Handler):
        def emit(self, record):
            log_output.append(self.format(record))

    handler = ListHandler()
    handler.setFormatter(logging.Formatter("%(message)s"))
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    assert log_output[

# Generated at 2024-06-03 03:56:34.134474
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Add a handler to capture log output
    class ListHandler(logging.Handler):
        def emit(self, record):
            log_output.append(self.format(record))

    handler = ListHandler()
    handler.setFormatter(logging.Formatter("%(message)s"))
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    assert log_output[0] ==

# Generated at 2024-06-03 03:56:37.815568
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    
    session = build_requests_session(raise_for_status=False)
    assert isinstance(session, Session)
    assert "response" not in session.hooks
    
    session = build_requests_session(retry=False)
    assert isinstance(session, Session)
    assert not any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    
    session = build_requests_session(retry=3)
    assert isinstance(session, Session)
    assert any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    
    custom_retry = Retry(total=5)
    session = build_requests_session(retry=custom_retry)
    assert isinstance(session, Session)
    assert any(isinstance(adapter, HTTPAdapter) and adapter.max_retries.total == 5 for adapter in session.adapters.values())
```

# Generated at 2024-06-03 03:56:42.588773
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_stream.seek(0)
    logs = log_stream.read()
    assert "sample_function(1, 2, c

# Generated at 2024-06-03 03:56:53.013255
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:56:57.262296
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    
    session = build_requests_session(raise_for_status=False)
    assert "response" not in session.hooks
    
    session = build_requests_session(retry=False)
    assert not any(isinstance(adapter, HTTPAdapter) and adapter.max_retries.total == 0 for adapter in session.adapters.values())
    
    session = build_requests_session(retry=3)
    assert any(isinstance(adapter, HTTPAdapter) and adapter.max_retries.total == 3 for adapter in session.adapters.values())
    
    custom_retry = Retry(total=5)
    session = build_requests_session(retry=custom_retry)
    assert any(isinstance(adapter, HTTPAdapter) and adapter.max_retries.total == 5 for adapter in session.adapters.values())
    
    try:
        build_requests_session(retry="invalid")
    except ValueError as e

# Generated at 2024-06-03 03:57:03.875816
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:57:07.237399
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a handler to capture log output
    class ListHandler(logging.Handler):
        def emit(self, record):
            log_output.append(self.format(record))

    handler = ListHandler()
    handler.setFormatter(logging.Formatter("%(message)s"))
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the log output
    assert log_output[0] == "sample_function(1, 2, c

# Generated at 2024-06-03 03:57:10.853597
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:57:14.397114
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:57:18.621559
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:57:21.950667
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Add a handler to capture log output
    class ListHandler(logging.Handler):
        def emit(self, record):
            log_output.append(self.format(record))

    handler = ListHandler()
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    assert log_output[0] == "sample_function(1, 2,

# Generated at 2024-06-03 03:57:24.881100
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=3):
        return a + b + c

    # Decorate the sample function with LoggedFunction
    decorated_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = decorated_function(1, 2, c=4)

    # Check the result of the function call
    assert result == 7

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=4)" in log_contents
    assert "sample_function -> 

# Generated at 2024-06-03 03:57:27.993329
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 03:57:45.235564
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=3):
        return a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=4)

    # Check the result
    assert result == 7

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=4)" in log_output
    assert "sample_function -> 7" in log

# Generated at 2024-06-03 03:57:48.296804
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:57:52.743987
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    assert isinstance(session.get_adapter("http://"), HTTPAdapter)
    assert isinstance(session.get_adapter("https://"), HTTPAdapter)

    session_no_raise = build_requests_session(raise_for_status=False)
    assert "response" not in session_no_raise.hooks

    session_with_retry_int = build_requests_session(retry=5)
    assert isinstance(session_with_retry_int.get_adapter("http://").max_retries, Retry)
    assert session_with_retry_int.get_adapter("http://").max_retries.total == 5

    custom_retry = Retry(total=3, backoff_factor=1)
    session_with_custom_retry = build_requests_session(retry=custom_retry)
    assert session_with_custom_retry.get_adapter("http://").max_retries == custom_retry

    try:
        build_requests_session(retry="invalid

# Generated at 2024-06-03 03:57:55.767857
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:57:59.972471
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:58:02.998939
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 03:58:06.395081
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger("test_logger")
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:58:14.057628
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    
    session = build_requests_session(raise_for_status=False)
    assert "response" not in session.hooks
    
    session = build_requests_session(retry=False)
    assert not any(isinstance(adapter, HTTPAdapter) for adapter in session.adapters.values())
    
    session = build_requests_session(retry=3)
    assert isinstance(session.adapters["http://"].max_retries, Retry)
    assert session.adapters["http://"].max_retries.total == 3
    
    custom_retry = Retry(total=5)
    session = build_requests_session(retry=custom_retry)
    assert session.adapters["http://"].max_retries.total == 5
```

# Generated at 2024-06-03 03:58:17.587383
```python
    # Test with default parameters
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    assert isinstance(session.get_adapter("http://").max_retries, Retry)
    
    # Test with raise_for_status=False
    session = build_requests_session(raise_for_status=False)
    assert isinstance(session, Session)
    assert "response" not in session.hooks
    
    # Test with retry as integer
    session = build_requests_session(retry=5)
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    assert session.get_adapter("http://").max_retries.total == 5
    
    # Test with retry as Retry instance
    custom_retry = Retry(total=10)
    session = build_requests_session(retry=custom_retry)
    assert isinstance(session, Session)
    assert session.hooks["

# Generated at 2024-06-03 03:58:23.142756
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:58:41.994249
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    assert isinstance(session.get_adapter("http://"), HTTPAdapter)
    assert isinstance(session.get_adapter("https://"), HTTPAdapter)

    session_no_raise = build_requests_session(raise_for_status=False)
    assert "response" not in session_no_raise.hooks

    session_with_retry_int = build_requests_session(retry=5)
    assert isinstance(session_with_retry_int.get_adapter("http://").max_retries, Retry)
    assert session_with_retry_int.get_adapter("http://").max_retries.total == 5

    custom_retry = Retry(total=3, backoff_factor=1)
    session_with_custom_retry = build_requests_session(retry=custom_retry)
    assert session_with_custom_retry.get_adapter("http://").max_retries == custom_retry

    try:
        build_requests_session(retry="invalid

# Generated at 2024-06-03 03:58:47.771373
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    decorated_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = decorated_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample_function ->

# Generated at 2024-06-03 03:58:51.222088
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 03:58:55.648643
```python
    import logging

    class MockLogger:
        def __init__(self):
            self.messages = []

        def debug(self, message):
            self.messages.append(message)

    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    mock_logger = MockLogger()
    logged_function = LoggedFunction(mock_logger)(sample_function)

    # Test without kwargs
    result = logged_function(1, 2)
    assert result == 3
    assert mock_logger.messages[0] == "sample_function(1, 2)"
    assert mock_logger.messages[1] == "sample_function -> 3"

    # Test with kwargs
    mock_logger.messages.clear()
    result = logged_function(1, 2, c=3)
    assert result == 6
    assert mock_logger.messages[0] == "sample_function(1, 2, c=3)"
    assert mock

# Generated at 2024-06-03 03:58:58.974525
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:59:02.539199
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:59:06.638011
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger("test_logger")
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:59:09.349074
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:59:12.551172
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:59:15.920201
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 03:59:56.154046
```python
    import logging

    class MockLogger:
        def __init__(self):
            self.messages = []

        def debug(self, message):
            self.messages.append(message)

    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    mock_logger = MockLogger()
    logged_function = LoggedFunction(mock_logger)(sample_function)

    # Test without kwargs
    result = logged_function(1, 2)
    assert result == 3
    assert mock_logger.messages[0] == "sample_function(1, 2)"
    assert mock_logger.messages[1] == "sample_function -> 3"

    # Test with kwargs
    mock_logger.messages.clear()
    result = logged_function(1, 2, c=3)
    assert result == 6
    assert mock_logger.messages[0] == "sample_function(1, 2, c=3)"
    assert mock

# Generated at 2024-06-03 03:59:59.146511
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:00:01.977239
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:00:12.430886
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:00:15.632815
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:00:19.207427
```python
    import logging

    class MockLogger:
        def __init__(self):
            self.messages = []

        def debug(self, message):
            self.messages.append(message)

    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    mock_logger = MockLogger()
    logged_function = LoggedFunction(mock_logger)(sample_function)

    # Test without kwargs
    result = logged_function(1, 2)
    assert result == 3
    assert mock_logger.messages[0] == "sample_function(1, 2)"
    assert mock_logger.messages[1] == "sample_function -> 3"

    # Test with kwargs
    mock_logger.messages.clear()
    result = logged_function(1, 2, c=3)
    assert result == 6
    assert mock_logger.messages[0] == "sample_function(1, 2, c=3)"
    assert mock

# Generated at 2024-06-03 04:00:25.751498
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:00:28.744765
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:00:32.305696
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Add a handler to capture log output
    class ListHandler(logging.Handler):
        def emit(self, record):
            log_output.append(self.format(record))

    handler = ListHandler()
    handler.setFormatter(logging.Formatter("%(message)s"))
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    assert log_output ==

# Generated at 2024-06-03 04:00:36.350246
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    log_stream = StringIO()
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:01:53.878261
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:02:01.097476
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:02:06.332016
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 04:02:11.759523
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:02:15.370485
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    decorated_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = decorated_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample_function ->

# Generated at 2024-06-03 04:02:18.783421
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:02:22.448577
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:02:31.547787
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    assert isinstance(session.get_adapter("http://"), HTTPAdapter)
    assert isinstance(session.get_adapter("https://"), HTTPAdapter)

    session_no_raise = build_requests_session(raise_for_status=False)
    assert "response" not in session_no_raise.hooks

    session_with_retry_int = build_requests_session(retry=5)
    assert isinstance(session_with_retry_int.get_adapter("http://").max_retries, Retry)
    assert session_with_retry_int.get_adapter("http://").max_retries.total == 5

    custom_retry = Retry(total=3, backoff_factor=1)
    session_with_custom_retry = build_requests_session(retry=custom_retry)
    assert session_with_custom_retry.get_adapter("http://").max_retries == custom_retry

    try:
        build_requests_session(retry="invalid

# Generated at 2024-06-03 04:02:34.637868
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Add a handler to capture log output
    class ListHandler(logging.Handler):
        def emit(self, record):
            log_output.append(self.format(record))

    handler = ListHandler()
    logger.addHandler(handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    assert log_output[0] == "sample_function(1, 2,

# Generated at 2024-06-03 04:02:40.712952
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:05:10.737164
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 04:05:13.934556
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result of the function call
    assert result == 6

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log

# Generated at 2024-06-03 04:05:17.628777
```python
    import logging

    # Create a logger object
    logger = logging.getLogger("test_logger")
    logger.setLevel(logging.DEBUG)
    log_output = []

    # Create a stream handler to capture log output
    stream_handler = logging.StreamHandler(log_output)
    logger.addHandler(stream_handler)

    # Create a sample function to be decorated
    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=3)

    # Check the result
    assert result == 6

    # Check the log output
    log_output = stream_handler.stream.getvalue()
    assert "sample_function(1, 2, c=3)" in log_output
    assert "sample

# Generated at 2024-06-03 04:05:20.573701
```python
    session = build_requests_session()
    assert isinstance(session, Session)
    assert session.hooks["response"][0].__name__ == "<lambda>"
    assert isinstance(session.get_adapter("http://"), HTTPAdapter)
    assert isinstance(session.get_adapter("https://"), HTTPAdapter)

    session_no_raise = build_requests_session(raise_for_status=False)
    assert "response" not in session_no_raise.hooks

    session_with_retry_int = build_requests_session(retry=5)
    assert isinstance(session_with_retry_int.get_adapter("http://").max_retries, Retry)
    assert session_with_retry_int.get_adapter("http://").max_retries.total == 5

    custom_retry = Retry(total=3, backoff_factor=1)
    session_with_custom_retry = build_requests_session(retry=custom_retry)
    assert session_with_custom_retry.get_adapter("http://").max_retries == custom_retry

    try:
        build_requests_session(retry="invalid

# Generated at 2024-06-03 04:05:24.857926
```python
    import logging

    class MockLogger:
        def __init__(self):
            self.messages = []

        def debug(self, message):
            self.messages.append(message)

    def sample_function(a, b, c=None):
        return a + b if c is None else a + b + c

    mock_logger = MockLogger()
    logged_function = LoggedFunction(mock_logger)(sample_function)

    # Test without kwargs
    result = logged_function(1, 2)
    assert result == 3
    assert mock_logger.messages[0] == "sample_function(1, 2)"
    assert mock_logger.messages[1] == "sample_function -> 3"

    # Test with kwargs
    mock_logger.messages.clear()
    result = logged_function(1, 2, c=3)
    assert result == 6
    assert mock_logger.messages[0] == "sample_function(1, 2, c=3)"
    assert mock

# Generated at 2024-06-03 04:05:28.738332
```python
    import logging
    from io import StringIO

    # Create a logger object and a string stream to capture the logs
    logger = logging.getLogger('test_logger')
    log_stream = StringIO()
    handler = logging.StreamHandler(log_stream)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)

    # Create a sample function to be decorated
    def sample_function(a, b, c=3):
        return a + b + c

    # Decorate the sample function with LoggedFunction
    logged_sample_function = LoggedFunction(logger)(sample_function)

    # Call the decorated function
    result = logged_sample_function(1, 2, c=4)

    # Check the result of the function call
    assert result == 7

    # Check the logs
    log_contents = log_stream.getvalue()
    assert "sample_function(1, 2, c=4)" in log_contents
    assert "sample_function