# Automatically generated by Pynguin.
import typesystem.formats as module_0

def test_case_0():
    try:
        str_0 = 'Mus be an obje6t.'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xb6\xb8\xf7}\x15\x86l+'
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'nv=!{nTXfs5N+S'
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass

def test_case_5():
    try:
        u_u_i_d_format_0 = None
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(u_u_i_d_format_0)
        date_time_format_0 = module_0.DateTimeFormat()
        optional_1 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_6():
    try:
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "&(Vn+vm''b \n0"
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(str_0)
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '4'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '4v'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(str_0)
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ",N7*\x0cd\\\nAKW>\nt'E\x0b"
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        dict_0 = {}
        u_u_i_d_format_0 = module_0.UUIDFormat(**dict_0)
        str_1 = u_u_i_d_format_0.serialize(str_0)
        u_u_i_d_format_1 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_1.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = None
        dict_0 = {}
        date_format_0 = module_0.DateFormat(**dict_0)
        optional_0 = date_format_0.serialize(float_0)
        set_0 = {float_0, float_0, float_0, optional_0}
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        optional_1 = base_format_0.serialize(set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(time_format_0)
        u_u_i_d_format_0 = None
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(u_u_i_d_format_0)
        date_time_format_0 = module_0.DateTimeFormat()
        optional_1 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ''
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(str_0)
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = None
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(bool_0)
        date_format_0 = module_0.DateFormat()
        optional_1 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass