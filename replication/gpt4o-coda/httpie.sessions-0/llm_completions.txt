

# Generated at 2024-06-02 17:30:09.731463
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:30:12.624540
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:30:16.073636
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:30:19.954685
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:30:24.080236
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:30:29.093511
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:30:32.282660
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:30:35.404606
```python
    session = Session('/path/to/session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:30:40.323802
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:30:43.568370
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:30:52.271041
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:30:55.843644
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:30:58.907252
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:02.563478
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:05.387885
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:31:08.063320
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:31:10.662933
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:31:14.308801
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:19.742127
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:22.990491
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:31.275000
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:34.850853
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:40.054103
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:42.920684
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:31:45.795061
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:31:49.144937
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:31:52.282456
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:31:54.893025
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:31:57.366984
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:32:00.554893
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:08.997792
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:11.997161
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:14.915011
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:18.695267
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:21.972419
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:25.339003
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:28.124710
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:32:31.017258
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:32:34.176748
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:38.208661
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert session.cookies['sessionid'].value == '12345'
    assert session.cookies['csrftoken'].value == 'abcdef'
```

# Generated at 2024-06-02 17:32:46.590266
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:49.555146
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:52.903386
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:32:56.164276
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:00.139660
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:03.920151
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:08.181312
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:12.027070
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:14.767402
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:17.911336
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:33:26.052788
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:28.754221
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:31.920195
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:35.803890
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:38.635863
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:33:42.196937
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:45.466044
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:33:48.240448
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:33:51.669287
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:33:56.102013
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:02.225826
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'}
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:34:05.965340
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:08.943160
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:12.965981
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:15.337665
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:34:17.823827
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:34:21.043056
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:24.210815
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:27.089889
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:30.462073
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:39.400176
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:34:42.312672
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:45.391035
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:34:47.630540
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:34:50.633192
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:54.855521
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:34:57.933496
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:35:00.974633
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'custom_value'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'custom_value'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:35:03.561330
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:35:06.881704
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert session.cookies['sessionid'].value == '12345'
    assert session.cookies['csrftoken'].value == 'abcdef'
```

# Generated at 2024-06-02 17:35:13.884658
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:35:16.777481
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:35:19.189000
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:35:21.756549
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:35:24.413918
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:35:26.743766
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:35:29.714941
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:35:32.207439
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:35:34.962369
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:35:37.115236
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:35:43.781949
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:35:46.601260
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:35:51.395946
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:35:54.865886
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session['cookies']
    assert session['cookies']['sessionid']['value'] == '12345'
    assert 'csrftoken' in session['cookies']
    assert session['

# Generated at 2024-06-02 17:35:58.240418
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:00.873607
```python
    session = Session('/path/to/session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:36:03.708973
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:06.656820
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:09.256723
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert session.cookies['sessionid'].value == '12345'
    assert session.cookies['csrftoken'].value == 'abcdef'
```

# Generated at 2024-06-02 17:36:12.181588
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:18.646851
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:36:21.521114
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:36:25.161726
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:28.181627
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:32.081165
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:34.470069
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:36:37.541485
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:40.637235
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:43.956126
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })
    
    session.update_headers(request_headers)
    
    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csr

# Generated at 2024-06-02 17:36:47.231095
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:36:53.850916
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:36:56.920293
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:36:59.815898
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:02.159765
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:37:06.260914
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:08.985272
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:12.185877
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:14.726424
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:37:17.721770
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:20.888029
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:27.887184
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:31.505576
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:34.603724
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:37.979744
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:37:41.163913
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:45.075927
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:47.851588
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:50.261500
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:37:53.289118
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:37:56.384314
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:38:04.113781
```python

# Generated at 2024-06-02 17:38:08.086144
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:38:10.954807
```python
    session = Session('/path/to/session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345'
    })
    
    session.update_headers(request_headers)
    
    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
```

# Generated at 2024-06-02 17:38:14.018953
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:38:18.700996
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:38:22.683806
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
```

# Generated at 2024-06-02 17:38:26.107950
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:38:29.293642
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:38:33.737446
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345'
    })
    
    session.update_headers(request_headers)
    
    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
```

# Generated at 2024-06-02 17:38:39.611468
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:38:45.986881
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:38:49.110992
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/2.4.0',
        'Content-Type': 'application/json',
        'Authorization': 'Bearer token',
        'Custom-Header': 'CustomValue',
        'Cookie': 'sessionid=12345; csrftoken=abcdef'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:38:52.113348
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:38:54.691401
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:38:57.026666
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:38:59.577762
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:02.935495
```python
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:39:05.921067
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }

    session.remove_cookies(['cookie1', 'cookie3'])

    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:08.113790
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:10.369108
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:16.601550
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:19.544986
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:24.246578
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:26.710207
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:39:30.676048
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:39:35.222653
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:37.687809
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:39:43.672964
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert session['cookies']['cookie2']['value'] == 'value2'
```

# Generated at 2024-06-02 17:39:47.280103
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken

# Generated at 2024-06-02 17:39:49.483676
```python
    session = Session(path="test_session.json")
    session['cookies'] = {
        'cookie1': {'value': 'value1', 'path': '/', 'secure': False, 'expires': None},
        'cookie2': {'value': 'value2', 'path': '/', 'secure': False, 'expires': None},
        'cookie3': {'value': 'value3', 'path': '/', 'secure': False, 'expires': None},
    }
    
    session.remove_cookies(['cookie1', 'cookie3'])
    
    assert 'cookie1' not in session['cookies']
    assert 'cookie3' not in session['cookies']
    assert 'cookie2' in session['cookies']
```

# Generated at 2024-06-02 17:39:59.788012
```python
    session = Session(path="test_session.json")
    request_headers = RequestHeadersDict({
        'Content-Type': 'application/json',
        'User-Agent': 'HTTPie/2.4.0',
        'Authorization': 'Bearer token',
        'Cookie': 'sessionid=12345; csrftoken=abcdef',
        'Custom-Header': 'CustomValue'
    })

    session.update_headers(request_headers)

    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Authorization' in session.headers
    assert session.headers['Authorization'] == 'Bearer token'
    assert 'Custom-Header' in session.headers
    assert session.headers['Custom-Header'] == 'CustomValue'
    assert 'sessionid' in session.cookies
    assert session.cookies['sessionid'].value == '12345'
    assert 'csrftoken' in session.cookies
    assert session.cookies['csrftoken