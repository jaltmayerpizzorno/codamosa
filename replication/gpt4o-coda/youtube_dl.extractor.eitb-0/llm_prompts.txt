

---- 2024-06-04 22:27:04.382804
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:07.426032
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:11.645268
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:14.520966
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:18.002246
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:21.131465
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:24.112174
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:29.021739
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:33.118367
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:38.999439
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:27:57.498735
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:01.524655
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:05.227541
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:08.942105
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:13.046871
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:16.178055
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:19.520611
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:23.326055
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:27.298582
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:28:31.212327
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:05.251090
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:09.162526
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:12.130581
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:16.283806
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:19.705620
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:22.515751
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:26.463367
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:29.832903
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:33.226407
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:29:36.508473
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:30:40.089424
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:30:44.576981
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:30:48.377908
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:30:52.254247
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:30:55.398740
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:31:02.337762
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:31:11.491241
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:31:15.149874
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:31:20.064232
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:31:24.051579
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:28.955109
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:32.535180
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:36.003064
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:39.552608
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:42.921753
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:46.755502
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:49.874437
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:53.103726
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:56.018047
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:33:59.444769
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass EitbIE(InfoExtractor):\n    IE_NAME = 'eitb.tv'\n    _VALID_URL = r'https?://(?:www\\.)?eitb\\.tv/(?:eu/bideoa|es/video)/[^/]+/\\d+/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.eitb.tv/es/video/60-minutos-60-minutos-2013-2014/4104995148001/4090227752001/lasa-y-zabala-30-anos/',\n        'md5': 'edf4436247185adee3ea18ce64c47998',\n        'info_dict': {\n            'id': '4090227752001',\n            'ext': 'mp4',\n            'title': '60 minutos (Lasa y Zabala, 30 a\u00f1os)',\n            'description': 'Programa de reportajes de actualidad.',\n            'duration': 3996.76,\n            'timestamp': 1381789200,\n            'upload_date': '20131014',\n            'tags': list,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://mam.eitb.eus/mam/REST/ServiceMultiweb/Video/MULTIWEBTV/%s/' % video_id,\n            video_id, 'Downloading video JSON')\n\n        media = video['web_media'][0]\n\n        formats = []\n        for rendition in media['RENDITIONS']:\n            video_url = rendition.get('PMD_URL')\n            if not video_url:\n                continue\n            tbr = float_or_none(rendition.get('ENCODING_RATE'), 1000)\n            format_id = 'http'\n            if tbr:\n                format_id += '-%d' % int(tbr)\n            formats.append({\n                'url': rendition['PMD_URL'],\n                'format_id': format_id,\n                'width': int_or_none(rendition.get('FRAME_WIDTH')),\n                'height': int_or_none(rendition.get('FRAME_HEIGHT')),\n                'tbr': tbr,\n            })\n\n        hls_url = media.get('HLS_SURL')\n        if hls_url:\n            request = sanitized_Request(\n                'http://mam.eitb.eus/mam/REST/ServiceMultiweb/DomainRestrictedSecurity/TokenAuth/',\n                headers={'Referer': url})\n            token_data = self._download_json(\n                request, video_id, 'Downloading auth token', fatal=False)\n            if token_data:\n                token = token_data.get('token')\n                if token:\n                    formats.extend(self._extract_m3u8_formats(\n                        '%s?hdnts=%s' % (hls_url, token), video_id, m3u8_id='hls', fatal=False))\n\n        hds_url = media.get('HDS_SURL')\n        if hds_url:\n            formats.extend(self._extract_f4m_formats(\n                '%s?hdcore=3.7.0' % hds_url.replace('euskalsvod', 'euskalvod'),\n                video_id, f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': media.get('NAME_ES') or media.get('name') or media['NAME_EU'],\n            'description': media.get('SHORT_DESC_ES') or video.get('desc_group') or media.get('SHORT_DESC_EU'),\n            'thumbnail': media.get('STILL_URL') or media.get('THUMBNAIL_URL'),\n            'duration': float_or_none(media.get('LENGTH'), 1000),\n            'timestamp': parse_iso8601(media.get('BROADCST_DATE'), ' '),\n            'tags': media.get('TAGS'),\n            'formats': formats,\n        }\n\n# Unit test for constructor of class EitbIE\ndef test_EitbIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}