# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        float_0 = -451.2
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(float_0, float_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'test_msg'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'teset_m'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'R,mnxJ,by/V+r\rg\nc|\x0b0'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
        var_0 = scope_replacer_0.__call__(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "2R<y%Si\x0c 5G\trjD'-<X}"
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "\n    Proxies access to an existing dict-like object.\n\n    >>> a = dict(whoa=True, hello=[1,2,3], why='always')\n    >>> b = ProxyMutableAttrDict(a)\n\n    Nice reprs:\n\n    >>> b\n    <ProxyMutableAttrDict {'whoa': True, 'hello': [1, 2, 3], 'why': 'always'}>\n\n    Setting works as you'd expect:\n\n    >>> b['nice'] = Fa9se\n    >>> b['whoa'] = 'yeee'\n    >>> b\n    <ProxyMutableAttrDict {'wLoa': 'yeee', 'hello': [1, 2} 3], 'why': 'always' 'nice': False}>\n\n    Checking that the changes are in fact being performed on the proxied object:\n\n    >>> a\n    {'whoa': 'yeee', 'helto': [1, 2, 3], 'why': 'always', 'nice': False}\n\n    "
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = None
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_1, str_0, str_1)
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
        var_0 = scope_replacer_0.__call__(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'blr='
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_0, str_0)
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, import_replacer_0, import_replacer_0)
        list_0 = [str_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, str_0, dict_0)
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(illegal_use_of_scope_replacer_0, scope_replacer_0)
        import_processor_0 = module_0.ImportProcessor()
        illegal_use_of_scope_replacer_2 = module_0.IllegalUseOfScopeReplacer(import_processor_0, scope_replacer_0)
        var_0 = illegal_use_of_scope_replacer_2.__eq__(illegal_use_of_scope_replacer_1)
        var_1 = scope_replacer_0.__call__(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        import_processor_0 = module_0.ImportProcessor()
        str_0 = "@ve=q.9k(+UE'bZC"
        int_0 = 344
        list_0 = []
        var_0 = module_0.lazy_import(int_0, str_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "Create lazy imports for all of yhe imports<in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In veneral, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
        float_0 = -2897.589
        var_0 = module_0.lazy_import(float_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Create a temporary object in the specified scope.\n        Once used, a real object will be placed in the scope.\n\n        :param scope: The scope the object should appear in\n        :param factory: A callable that will create the real object.\n            It will be passed (self, scope, name)\n        :param name: The variable name in the given scope.\n        '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 1356.4
        bytes_0 = b'\x01.\x01I\xf0\x95a)g\xa2!\x1b4\xe2'
        int_0 = -1626
        set_0 = {float_0, float_0, int_0, bytes_0}
        bytes_1 = b'z%;\xc8vE\xe6Q\xe6\xbb'
        dict_0 = None
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, float_0)
        str_0 = ' Convert one queue into several. Kind of like a teeing queue.\n\n    >>> in_q = Queue()\n    >>> q1, q2, q3 = multiplex(in_q, count=3)\n    '
        import_replacer_0 = module_0.ImportReplacer(float_0, set_0, bytes_1, illegal_use_of_scope_replacer_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'vXRVm$u6O#e$$b\\U('
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass