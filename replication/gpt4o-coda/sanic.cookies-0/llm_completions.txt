

# Generated at 2024-06-03 06:46:53.019920
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    cookie["secure"] = True
    cookie["httponly"] = True
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Jan-2023 12:00:00 GMT; Secure; HttpOnly'
    )
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:46:56.659209
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:46:59.292788
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
```

# Generated at 2024-06-03 06:47:02.275448
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    cookie["samesite"] = "Lax"
    
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Oct-2023 12:00:00 GMT; Secure; HttpOnly; SameSite=Lax'
    )
    
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:47:05.433659
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
    
    # Ensure the cookie is marked for deletion in headers
    assert any("test_cookie=" in cookie and "Max-Age=0" in cookie for cookie in headers.get("Set-Cookie", []))
```

# Generated at 2024-06-03 06:47:10.240657
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    cookie["samesite"] = "Strict"
    
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'Expires=Sun, 01-Oct-2023 12:00:00 GMT; Secure; HttpOnly; SameSite=Strict'
    )
    
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:47:14.075687
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    cookie["samesite"] = "Lax"
    
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'Expires=Sun, 01-Jan-2023 12:00:00 GMT; Secure; HttpOnly; SameSite=Lax'
    )
    
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:47:17.648335
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:47:21.080128
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:47:25.771986
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:47:35.045772
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/home"
    assert cookie["path"] == "/home"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 10, 1, 12, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e

# Generated at 2024-06-03 06:47:37.780069
```python
    headers = {}
    jar = CookieJar(headers)
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])

    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:47:41.056834
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Test adding a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert "Set-Cookie" in headers
    assert str(jar["test_cookie"]) in headers["Set-Cookie"]
    
    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert str(jar["test_cookie"]) in headers["Set-Cookie"]
    
    # Test adding another cookie
    jar["another_cookie"] = "another_value"
    assert "another_cookie" in jar
    assert jar["another_cookie"].value == "another_value"
    assert str(jar["another_cookie"]) in headers["Set-Cookie"]
```

# Generated at 2024-06-03 06:47:44.245512
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
```

# Generated at 2024-06-03 06:47:48.641232
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = "session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = 'empty=""'
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:47:51.871134
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert "Set-Cookie" in headers
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:47:56.347493
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = "session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = "empty="
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:48:00.923131
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:48:05.779132
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Test adding a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert headers["Set-Cookie"].startswith("test_cookie=test_value")
    
    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert headers["Set-Cookie"].startswith("test_cookie=new_value")
    
    # Test adding another cookie
    jar["another_cookie"] = "another_value"
    assert "another_cookie" in jar
    assert jar["another_cookie"].value == "another_value"
    assert "test_cookie=new_value" in headers["Set-Cookie"]
    assert "another_cookie=another_value" in headers["Set-Cookie"]
```

# Generated at 2024-06-03 06:48:09.901529
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = (
        'test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax'
    )
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    expected_output = (
        'session=abc123; Expires=Sun, 01-Jan-2023 12:00:00 GMT'
    )
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:48:18.833053
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
```

# Generated at 2024-06-03 06:48:22.684755
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "'Unknown cookie property'"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:48:26.250728
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Test setting a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert "Set-Cookie" in headers
    assert str(jar["test_cookie"]) in headers["Set-Cookie"]
    
    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert str(jar["test_cookie"]) in headers["Set-Cookie"]
    
    # Test setting a cookie with illegal key
    try:
        jar["illegal key"] = "value"
    except KeyError as e:
        assert str(e) == "Cookie key contains illegal characters"
    
    # Test setting a cookie with reserved key
    try:
        jar["expires"] = "value"
    except

# Generated at 2024-06-03 06:48:30.729670
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    expected_output = "session=abc123; Expires=Sun, 01-Jan-2023 12:00:00 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = "empty="
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:48:35.217041
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = "session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = "empty="
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:48:40.502288
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    expected_output = 'test=value; Path=/; Max-Age=3600; Secure; HttpOnly'
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = 'session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT'
    assert str(cookie) == expected_output

    cookie = Cookie("user", "john_doe")
    expected_output = 'user=john_doe'
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:48:45.550725
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
       

# Generated at 2024-06-03 06:48:49.458917
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
    
    # Ensure the cookie is marked for deletion
    assert any("test_cookie=" in cookie and "Max-Age=0" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:48:55.135163
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = 'test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax'
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = 'session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT'
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = 'empty='
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:48:59.737660
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:49:10.647732
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    expected_output = 'test=value; Path=/; Max-Age=3600; Secure; HttpOnly'
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = 'session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT'
    assert str(cookie) == expected_output

    cookie = Cookie("user", "john_doe")
    expected_output = 'user=john_doe'
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:49:14.028118
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'Expires=Sun, 01-Oct-2023 12:00:00 GMT; Secure; HttpOnly'
    )
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:49:16.649129
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    cookie["secure"] = True
    cookie["httponly"] = True
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Jan-2023 12:00:00 GMT; Secure; HttpOnly'
    )
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:49:19.330770
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    cookie["samesite"] = "Lax"
    
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Oct-2023 12:00:00 GMT; Secure; HttpOnly; SameSite=Lax'
    )
    
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:49:22.757736
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:49:27.900733
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/home"
    assert cookie["path"] == "/home"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 10, 1, 12, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e

# Generated at 2024-06-03 06:49:30.778571
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Oct-2023 12:00:00 GMT; Secure; HttpOnly'
    )
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:49:34.553245
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:49:37.962399
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:49:40.564863
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    cookie["samesite"] = "Lax"
    
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Oct-2023 12:00:00 GMT; Secure; HttpOnly; SameSite=Lax'
    )
    
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:49:57.099403
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:50:00.974216
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/home"
    assert cookie["path"] == "/home"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e

# Generated at 2024-06-03 06:50:03.495140
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
```

# Generated at 2024-06-03 06:50:09.621496
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/"
    assert cookie["path"] == "/"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e:
        assert str(e

# Generated at 2024-06-03 06:50:12.363531
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Jan-2023 12:00:00 GMT; Secure; HttpOnly'
    )
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:50:22.424159
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    cookie["samesite"] = "Lax"
    
    expected_output = (
        'test="value"; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Oct-2023 12:00:00 GMT; Secure; HttpOnly; SameSite=Lax'
    )
    
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:50:25.692900
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Strict"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Strict"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    expected_output = "session=abc123; Expires=Sun, 01-Oct-2023 12:00:00 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = "empty="
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:50:31.130116
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = "session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = "empty="
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:50:35.398303
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Test adding a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert headers["Set-Cookie"].startswith("test_cookie=test_value; Path=/")
    
    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert headers["Set-Cookie"].startswith("test_cookie=new_value; Path=/")
    
    # Test adding another cookie
    jar["another_cookie"] = "another_value"
    assert "another_cookie" in jar
    assert jar["another_cookie"].value == "another_value"
    assert "test_cookie=new_value; Path=/" in headers["Set-Cookie"]
    assert "another_cookie=another_value; Path=/" in headers["Set

# Generated at 2024-06-03 06:50:41.812135
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Test adding a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert "Set-Cookie" in headers
    assert str(jar["test_cookie"]) in headers["Set-Cookie"]
    
    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert str(jar["test_cookie"]) in headers["Set-Cookie"]
    
    # Test adding another new cookie
    jar["another_cookie"] = "another_value"
    assert "another_cookie" in jar
    assert jar["another_cookie"].value == "another_value"
    assert str(jar["another_cookie"]) in headers["Set-Cookie"]
```

# Generated at 2024-06-03 06:51:07.885298
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = "session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = "empty="
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:51:10.217050
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
```

# Generated at 2024-06-03 06:51:12.603564
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["expires"] = datetime(2023, 10, 1, 12, 0, 0)
    cookie["secure"] = True
    cookie["httponly"] = True
    expected_output = (
        'test=value; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Oct-2023 12:00:00 GMT; Secure; HttpOnly'
    )
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:51:15.073889
```python
    headers = {}
    jar = CookieJar(headers)
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert "Set-Cookie" not in headers
```

# Generated at 2024-06-03 06:51:19.114997
```python
    cookie = Cookie("test", "value")
    
    # Test setting a valid property
    cookie["path"] = "/home"
    assert cookie["path"] == "/home"
    
    # Test setting max-age with a valid integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600
    
    # Test setting expires with a valid datetime
    expires = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires
    assert cookie["expires"] == expires
    
    # Test setting an unknown property
    try:
        cookie["unknown"] = "value"
    except KeyError as e:
        assert str(e) == "Unknown cookie property"
    
    # Test setting max-age with a non-integer value
    try:
        cookie["max-age"] = "not-an-integer"
    except ValueError as e

# Generated at 2024-06-03 06:51:22.541905
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
```

# Generated at 2024-06-03 06:51:28.146585
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = "session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = "empty="
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:51:31.111781
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:51:34.101541
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    expected_output = 'test=value; Path=/; Max-Age=3600; Secure; HttpOnly'
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = 'session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT'
    assert str(cookie) == expected_output

    cookie = Cookie("user", "john_doe")
    expected_output = 'user=john_doe'
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:51:36.428619
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:53:05.061742
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert "Set-Cookie" in headers
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:53:08.334818
```python
    headers = Headers()
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert any("test_cookie" in cookie for cookie in headers.get_all("Set-Cookie"))
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get_all("Set-Cookie"))
    
    # Ensure the cookie is marked for deletion
    assert any("test_cookie=; Max-Age=0" in cookie for cookie in headers.get_all("Set-Cookie"))
```

# Generated at 2024-06-03 06:53:10.288899
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:53:13.319956
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Lax"
    expected_output = "test=value; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Lax"
    assert str(cookie) == expected_output

    cookie = Cookie("session", "abc123")
    cookie["expires"] = datetime(2023, 12, 31, 23, 59, 59)
    expected_output = "session=abc123; Expires=Sun, 31-Dec-2023 23:59:59 GMT"
    assert str(cookie) == expected_output

    cookie = Cookie("empty", "")
    expected_output = "empty="
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:53:16.523230
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert "Set-Cookie" in headers
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
    
    # Ensure the cookie is marked for deletion in the headers
    assert any("test_cookie=" in cookie and "Max-Age=0" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:53:19.475046
```python
    cookie = Cookie("test", "value")
    cookie["path"] = "/"
    cookie["max-age"] = 3600
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Strict"
    
    expected_output = (
        'test="value"; Path=/; Max-Age=3600; '
        'expires=Sun, 01-Jan-2023 12:00:00 GMT; Secure; HttpOnly; SameSite=Strict'
    )
    
    assert str(cookie) == expected_output
```

# Generated at 2024-06-03 06:53:21.771452
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
```

# Generated at 2024-06-03 06:53:27.286323
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Test adding a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert "Set-Cookie" in headers
    assert str(jar["test_cookie"]) in headers["Set-Cookie"]
    
    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert str(jar["test_cookie"]) in headers["Set-Cookie"]
    
    # Test adding another cookie
    jar["another_cookie"] = "another_value"
    assert "another_cookie" in jar
    assert jar["another_cookie"].value == "another_value"
    assert str(jar["another_cookie"]) in headers["Set-Cookie"]
```

# Generated at 2024-06-03 06:53:29.540751
```python
    headers = {}
    jar = CookieJar(headers)
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie" in cookie for cookie in headers["Set-Cookie"])

    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers["Set-Cookie"])
```

# Generated at 2024-06-03 06:53:31.831685
```python
    headers = {}
    jar = CookieJar(headers)
    
    # Add a cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert "Set-Cookie" in headers
    assert any("test_cookie=test_value" in cookie for cookie in headers["Set-Cookie"])
    
    # Delete the cookie
    del jar["test_cookie"]
    assert "test_cookie" not in jar
    assert not any("test_cookie" in cookie for cookie in headers.get("Set-Cookie", []))
```