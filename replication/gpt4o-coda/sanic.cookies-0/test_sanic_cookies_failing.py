# Automatically generated by Pynguin.
import sanic.cookies as module_0

def test_case_0():
    try:
        bytes_0 = b'\xf6m\xe3jRs-F\xf11\\\xb7\xcfK\x1b\x88\xa5\xa9\xdd'
        cookie_jar_0 = module_0.CookieJar(bytes_0)
        var_0 = cookie_jar_0.__delitem__(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '3?'
        bytes_0 = b'Rm\t\xdb\x11\xb2\xe0'
        set_0 = {str_0, bytes_0}
        bytes_1 = b'\xf6(\xfc\xf4\xd3\x10\xa3\xdb\xb4\x1b||\xdf'
        cookie_jar_0 = module_0.CookieJar(bytes_1)
        var_0 = cookie_jar_0.__setitem__(str_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '_$Yz'
        str_1 = ' with %s'
        cookie_0 = module_0.Cookie(str_0, str_1)
        var_0 = cookie_0.__str__()
        list_0 = [str_0]
        var_1 = cookie_0.encode(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '_$Yz'
        list_0 = [str_0, str_0, str_0]
        cookie_jar_0 = module_0.CookieJar(list_0)
        var_0 = cookie_jar_0.__delitem__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        str_0 = 'expires'
        cookie_0 = module_0.Cookie(str_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '_$Yz'
        str_1 = "Z+MBZV=u\x0b^J&nf$$H'\\z"
        cookie_0 = module_0.Cookie(str_0, str_1)
        int_0 = 2679
        bool_0 = True
        list_0 = [int_0, str_1, bool_0]
        cookie_jar_0 = module_0.CookieJar(list_0)
        tuple_0 = (cookie_jar_0, bool_0)
        var_0 = cookie_0.__setitem__(int_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '_aYz'
        str_1 = None
        cookie_0 = module_0.Cookie(str_0, str_1)
        var_0 = cookie_0.__str__()
        list_0 = [str_1, str_0]
        cookie_jar_0 = module_0.CookieJar(list_0)
        var_1 = cookie_jar_0.__delitem__(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '_$Yz'
        cookie_0 = module_0.Cookie(str_0, str_0)
        str_1 = 'expires'
        bool_0 = True
        var_0 = cookie_0.__setitem__(str_1, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '_aYz'
        cookie_0 = module_0.Cookie(str_0, str_0)
        str_1 = 'max-age'
        list_0 = [str_1, cookie_0]
        var_0 = cookie_0.__setitem__(str_1, list_0)
    except BaseException:
        pass