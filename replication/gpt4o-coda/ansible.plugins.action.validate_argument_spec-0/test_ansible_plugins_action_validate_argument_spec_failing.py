# Automatically generated by Pynguin.
import ansible.plugins.action.validate_argument_spec as module_0

def test_case_0():
    try:
        action_module_0 = module_0.ActionModule()
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = None
        str_0 = 'W?T\t6soWYBn*xy"aw'
        bytes_0 = b'~\x8f'
        set_0 = {bytes_0, bytes_0, bytes_0}
        int_0 = 126
        dict_0 = {int_0: bytes_0}
        action_module_0 = module_0.ActionModule(str_0, bytes_0, bytes_0, set_0, int_0, dict_0)
        var_0 = action_module_0.get_args_from_task_vars(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 591
        list_0 = [int_0]
        int_1 = 2027
        int_2 = 131072
        float_0 = 1786.746318
        bool_0 = True
        bytes_0 = b'\xf2Sx\x84\xc6'
        str_0 = 'flags_set'
        tuple_0 = None
        tuple_1 = (bytes_0, list_0, str_0, tuple_0)
        int_3 = 1020
        int_4 = 277
        action_module_0 = module_0.ActionModule(tuple_1, tuple_1, float_0, int_3, int_4, float_0)
        set_0 = {int_2, int_3}
        str_1 = None
        dict_0 = {int_0: list_0, action_module_0: set_0, int_1: bool_0}
        bytes_1 = b'\xbd@\xbfM\x92{E#'
        action_module_1 = module_0.ActionModule(list_0, list_0, action_module_0, action_module_0, bytes_1, str_1)
        var_0 = action_module_1.get_args_from_task_vars(dict_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        tuple_0 = None
        str_0 = 'wW?T\t6soWYBn*xy"aw'
        bytes_0 = b'~\x8f'
        set_0 = {bytes_0, bytes_0, bytes_0}
        int_0 = 126
        dict_1 = {}
        action_module_0 = module_0.ActionModule(str_0, bytes_0, bytes_0, set_0, int_0, dict_1)
        var_0 = action_module_0.get_args_from_task_vars(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = None
        list_0 = [float_0]
        float_1 = 233.6
        bytes_0 = b'E\xc97\xa8\xcb\xd8@/\x87?M\xfb\x94T\xc4\xb4'
        action_module_0 = module_0.ActionModule(list_0, list_0, float_1, list_0, list_0, bytes_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        set_0 = {dict_0, dict_0, dict_0}
        float_0 = 4840.1
        bool_0 = False
        tuple_0 = (set_0, float_0, bool_0)
        float_1 = -2198.75
        int_0 = 1526
        dict_1 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
        tuple_1 = ()
        str_0 = '@[g0|J\rpAW'
        bool_1 = False
        bytes_0 = b'\x01XiPi\x11\x9f\xbb{f\x05j\xb7m'
        int_1 = -677
        bytes_1 = b'9\xd1\xdeAt\x96~\x92\xaa\x92'
        action_module_0 = module_0.ActionModule(bool_1, bytes_0, int_1, int_0, int_0, bytes_1)
        set_1 = set()
        action_module_1 = module_0.ActionModule(dict_1, tuple_1, int_0, str_0, action_module_0, set_1)
        var_0 = action_module_1.run(tuple_0, float_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '.f\n^<\x0crb+hrC|A@`D'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = 'Cg2)hP\\ZVz"'
        complex_0 = None
        set_0 = {complex_0}
        float_0 = -1017.454548
        dict_1 = {}
        bool_0 = True
        tuple_0 = (float_0, dict_1, dict_1, bool_0)
        bytes_0 = b'ZS\x81\xb5ux\xd4*\xbf\xd6\xc8'
        tuple_1 = (set_0, tuple_0, bytes_0)
        str_2 = '*K\\<W{rl\t'
        str_3 = 'Unable to import %s due to %s'
        int_0 = -1154
        str_4 = '@XUj\\xl?V)Ht'
        str_5 = 'w3c%\x0cJlN'
        tuple_2 = (str_5,)
        set_1 = {bool_0, tuple_2, bytes_0}
        action_module_0 = module_0.ActionModule(str_4, set_1, dict_1, bytes_0, float_0, tuple_1)
        action_module_1 = module_0.ActionModule(dict_1, str_3, dict_1, int_0, action_module_0, int_0)
        action_module_2 = module_0.ActionModule(tuple_1, str_2, tuple_1, complex_0, action_module_1, action_module_0)
        var_0 = action_module_2.get_args_from_task_vars(dict_0, str_1)
    except BaseException:
        pass