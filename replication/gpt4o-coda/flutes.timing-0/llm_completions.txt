

# Generated at 2024-06-01 19:10:58.763290
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (1.0"), f"Unexpected output: {output}"
```

# Generated at 2024-06-01 19:11:00.942481
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:11:03.022356
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (1.")
    assert output.endswith("s)")
```

# Generated at 2024-06-01 19:11:06.276527
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert output.endswith("s)")
    time_taken = float(output.split("(")[1].split("s")[0])
    assert 0.9 <= time_taken <= 1.1, f"Expected time around 1s, but got {time_taken}s"
```

# Generated at 2024-06-01 19:11:09.752374
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:11:12.231771
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:11:14.212326
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:11:16.112513
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:11:18.022626
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (1.0"), f"Unexpected output: {output}"
```

# Generated at 2024-06-01 19:11:20.286307
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:11:27.306819
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:11:29.314025
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:11:31.207573
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:11:33.549164
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:11:36.580685
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (1.0"), f"Unexpected output: {output}"
```

# Generated at 2024-06-01 19:11:38.766519
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:11:41.182115
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allow slight variation in timing

test_work_in_progress()

# Generated at 2024-06-01 19:11:43.136730
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.0" in output or "(0.9" in output  # Allowing slight variations in timing
```

# Generated at 2024-06-01 19:11:45.539098
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.00s" in output or "1.01s" in output  # Allowing slight variation in timing

# Generated at 2024-06-01 19:11:47.703696
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.00s" in output or "1.01s" in output  # Allowing slight variation in time measurement

# Generated at 2024-06-01 19:11:59.718824
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in timing
```

# Generated at 2024-06-01 19:12:01.961996
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:12:05.804522
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in timing
```

# Generated at 2024-06-01 19:12:08.615793
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:12:10.523852
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:12:12.434387
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in timing
```

# Generated at 2024-06-01 19:12:14.652663
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:12:16.842225
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:12:20.154722
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert output.endswith("s)")
    time_taken = float(output.split('(')[1].split('s')[0])
    assert 0.9 <= time_taken <= 1.1, f"Expected time around 1s, but got {time_taken}s"
```

# Generated at 2024-06-01 19:12:22.581443
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:12:46.171951
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:12:48.667404
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:12:50.940812
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in timing
```

# Generated at 2024-06-01 19:12:52.845693
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:12:55.165171
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output or "(0.99s)" in output  # Allowing slight variations in time

# Run the test
test_work_in_progress()

# Generated at 2024-06-01 19:12:57.557754
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:13:00.237910
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.0" in output or "1.00" in output  # Allow for slight variations in timing

test_work_in_progress()

# Generated at 2024-06-01 19:13:02.336462
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.00s" in output or "1.01s" in output  # Allowing slight variation in time measurement

# Generated at 2024-06-01 19:13:04.225371
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in timing
```

# Generated at 2024-06-01 19:13:06.477026
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (1.0"), f"Unexpected output: {output}"
```

# Generated at 2024-06-01 19:13:48.751593
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.0" in output or "1.00" in output  # Allow for slight variations in timing

# Run the test
test_work_in_progress()

# Generated at 2024-06-01 19:13:51.414650
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.0" in output or "1.00" in output  # Allow for slight variations in timing

# Run the test
test_work_in_progress()

# Generated at 2024-06-01 19:13:55.557265
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:13:57.248623
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert float(output.split('(')[1][:-2]) >= 1.0
```

# Generated at 2024-06-01 19:13:59.912614
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:14:02.422551
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output or "(1.02s)" in output  # Allowing slight variations in time

# Run the test
test_work_in_progress()

# Generated at 2024-06-01 19:14:05.862724
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (1.0"), f"Unexpected output: {output}"
```

# Generated at 2024-06-01 19:14:08.166669
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time measurement

# Generated at 2024-06-01 19:14:10.286163
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:14:12.948945
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.00s" in output or "1.01s" in output  # Allowing slight variation in timing

# Generated at 2024-06-01 19:15:35.942958
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.0" in output or "1.00" in output  # Allow for slight variations in timing

# Run the test
test_work_in_progress()

# Generated at 2024-06-01 19:15:37.853771
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.00s" in output or "1.01s" in output  # Allowing slight variation in timing

# Generated at 2024-06-01 19:15:40.285347
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.00s" in output or "1.01s" in output  # Allowing slight variation in timing

# Generated at 2024-06-01 19:15:42.761816
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:15:45.166702
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.0" in output or "1.00" in output  # Allow for slight variations in timing

# Run the test
test_work_in_progress()

# Generated at 2024-06-01 19:15:47.001195
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (1.0"), f"Unexpected output: {output}"
```

# Generated at 2024-06-01 19:15:48.807954
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:15:51.219968
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.0" in output or "1.00" in output  # Allow for slight variations in timing

# Run the test
test_work_in_progress()

# Generated at 2024-06-01 19:15:53.189474
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:15:54.960183
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:18:38.285471
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output or "(0.99s)" in output
```

# Generated at 2024-06-01 19:18:40.372817
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.00" in output or "1.01" in output  # Allowing slight variation in timing
```

# Generated at 2024-06-01 19:18:42.920749
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the captured output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output or "(0.99s)" in output
```

# Generated at 2024-06-01 19:18:45.246801
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in time
```

# Generated at 2024-06-01 19:18:47.419163
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:18:49.471977
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output  # Allow slight variation in timing
```

# Generated at 2024-06-01 19:18:51.236572
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00" in output or "(1.01" in output  # Allowing slight variation in timing
```

# Generated at 2024-06-01 19:18:53.225861
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert "Test task... done." in output
    assert "(1.00s)" in output or "(1.01s)" in output or "(0.99s)" in output
```

# Generated at 2024-06-01 19:18:54.872807
```python
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (1.0"), f"Unexpected output: {output}"
```

# Generated at 2024-06-01 19:18:56.812064
def test_work_in_progress():
    import io
    import sys

    # Capture the output
    captured_output = io.StringIO()
    sys.stdout = captured_output

    # Test the context manager
    with work_in_progress("Test task"):
        time.sleep(1)  # Simulate a task that takes 1 second

    # Reset redirect.
    sys.stdout = sys.__stdout__

    # Check the output
    output = captured_output.getvalue().strip()
    assert output.startswith("Test task... done. (")
    assert "1.00s" in output or "1.01s" in output  # Allowing slight variation in time measurement