# Automatically generated by Pynguin.
import ansible.playbook.helpers as module_0

def test_case_0():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, str_0, str_0, dict_0, dict_0]
        var_0 = module_0.load_list_of_blocks(list_0, str_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '8z*fb!./2{iO['
        float_0 = 2.0
        str_1 = 'g"<Jv)'
        var_0 = module_0.load_list_of_blocks(str_0, float_0, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xd1WX:Yw\xd2'
        set_0 = {bytes_0}
        float_0 = 2580.65
        var_0 = module_0.load_list_of_tasks(set_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        list_0 = [str_0, dict_0, dict_0]
        var_0 = module_0.load_list_of_blocks(list_0, str_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 2274.4092
        int_0 = 70
        bool_0 = None
        set_0 = {bool_0}
        str_0 = ' w ('
        list_0 = []
        dict_0 = {}
        var_0 = module_0.load_list_of_roles(list_0, dict_0)
        dict_1 = None
        tuple_0 = (str_0, dict_0, dict_1)
        var_1 = module_0.load_list_of_blocks(bool_0, set_0, tuple_0)
        list_1 = [str_0, int_0, int_0]
        var_2 = module_0.load_list_of_blocks(list_1, float_0, int_0, list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        list_0 = [str_0, dict_0, dict_0, dict_0]
        bool_0 = True
        var_0 = module_0.load_list_of_roles(list_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'GhD[e%!`;,|.+'
        int_0 = -1118
        var_0 = module_0.load_list_of_roles(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0]
        float_0 = 3458.024
        var_0 = module_0.load_list_of_blocks(list_0, float_0)
        str_0 = '--track-subs'
        str_1 = 'EUT'
        var_1 = module_0.load_list_of_blocks(str_0, str_1, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = []
        str_1 = ''
        str_2 = 'Successfully installed'
        int_0 = None
        var_0 = module_0.load_list_of_tasks(list_0, str_1, str_2, int_0)
        list_1 = [dict_0, str_0, str_0, dict_0, str_0]
        var_1 = module_0.load_list_of_blocks(list_1, list_1, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '&'
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, str_0, str_0, dict_0, dict_0]
        var_0 = module_0.load_list_of_blocks(list_0, str_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '[SPocCY"![Yb!'
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, str_0, str_0, dict_0, str_0, dict_0, dict_0]
        var_0 = module_0.load_list_of_blocks(list_0, str_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, str_0, str_0, str_0, dict_0, dict_0, str_0, dict_0]
        float_0 = 512.0
        str_1 = "(7x'C7zP5E/\rKGv4"
        int_0 = 464
        bytes_0 = b'i\xc4AZh9\xcb\x08Zl\xc4/\xe4Q(\x9e~\x9f\x82'
        var_0 = module_0.load_list_of_blocks(list_0, float_0, list_0, str_1, int_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        tuple_0 = (list_0, dict_0)
        bytes_0 = b'`\xb3\x9fw\xb1\x04!0\x81\x19\x18\xb8\xb9\xed\xfad'
        str_0 = '{(gMNi5'
        var_0 = module_0.load_list_of_tasks(list_0, tuple_0, bytes_0, str_0)
    except BaseException:
        pass