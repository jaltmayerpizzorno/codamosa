

# Generated at 2024-05-31 18:06:13.914186
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f" g=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f" g=h i="j k"') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h', 'i="j k"']
    assert split_args('a=b c="foo bar"

# Generated at 2024-05-31 18:06:21.165982
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1=value1 key2='value with spaces'"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value1 key2=value\ with\ spaces"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:06:25.320983
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = 'key1="value with spaces" key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r'key1=value\ with\ spaces key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key

# Generated at 2024-05-31 18:06:28.334368
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:06:32.820241
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar"\nd=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f"\ng=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="

# Generated at 2024-05-31 18:06:36.617534
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:06:40.197138
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:06:44.128707
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = 'key1="value with spaces" key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r'key1=value\ with\ spaces key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key

# Generated at 2024-05-31 18:06:48.490179
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:06:54.821883
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1='value with spaces' key2=value2"
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = "key1=value\\ with\\ spaces key2=value2"
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:07:31.088150
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1=value1 key2='value with spaces'"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value1 key2=value\ with\ spaces"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:07:34.783466
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f" g=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f" g=h i="j k"') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h', 'i="j k"']
    assert split_args('a=b c="foo bar"

# Generated at 2024-05-31 18:07:41.065666
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:07:45.482361
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar"\nd=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h=i') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h=i']
    assert split_args('a

# Generated at 2024-05-31 18:07:49.025339
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:07:52.961689
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 extra_param', check_raw=True) ==

# Generated at 2024-05-31 18:07:58.179202
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f" g=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f" g=h i="j k"') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h', 'i="j k"']
    assert split_args('a=b c="foo bar"

# Generated at 2024-05-31 18:08:03.525431
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = 'key1="value with spaces" key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r'key1=value\ with\ spaces key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key

# Generated at 2024-05-31 18:08:07.809679
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar"\nd=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h=i') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h=i']
    assert split_args('a

# Generated at 2024-05-31 18:08:13.645411
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:08:35.757278
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = 'key1="value with spaces" key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r'key1=value\ with\ spaces key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key

# Generated at 2024-05-31 18:08:39.720291
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar"\nd=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h=i') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h=i']
    assert split_args('a

# Generated at 2024-05-31 18:08:43.833069
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f"\ng=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f"\ng=h i=j') == ['a=b', 'c="foo bar"', 'd="e f"',

# Generated at 2024-05-31 18:08:49.678838
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:08:53.273254
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:08:56.727416
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:09:01.233440
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = 'key1="value with spaces" key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r'key1=value\ with\ spaces key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key

# Generated at 2024-05-31 18:09:04.681411
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = 'key1="value with spaces" key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = 'key1=value\\ with\\ spaces key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:09:08.641757
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1=value1 key2='value with spaces'"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value1 key2=value\ with\ spaces"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:09:14.085021
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e f="hello world"') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"']
    assert split_args('a=b c="foo bar" d=e f="hello world" g=h') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"', 'g=h']
    assert split_args('a=b c="foo bar" d=e f="hello world" g=h i="test"') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"', 'g=h', 'i

# Generated at 2024-05-31 18:09:36.371837
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f" g=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f" g=h i="j k"') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h', 'i="j k"']
    assert split_args('a=b c="foo bar"

# Generated at 2024-05-31 18:09:39.912772
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1=value1 key2='value with spaces'"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value1 key2=value\=with\=equals"
    expected = {"key1": "value1", "key2": "value=with=equals"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1

# Generated at 2024-05-31 18:09:43.639023
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:09:49.113189
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1=value1 key2='value with spaces'"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value1 key2=value\ with\ spaces"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:09:53.494893
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:09:56.731417
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f"\ng=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f"\ng=h i=j') == ['a=b', 'c="foo bar"', 'd="e f"',

# Generated at 2024-05-31 18:10:00.341256
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:10:06.153853
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:10:11.842054
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f" g=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f" g=h i="j k"') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h', 'i="j k"']
    assert split_args('a=b c="foo bar"

# Generated at 2024-05-31 18:10:16.773312
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d="baz qux"') == ['a=b', 'c="foo bar"', 'd="baz qux"']
    assert split_args('a=b c="foo bar" d="baz qux"\ne=f') == ['a=b', 'c="foo bar"', 'd="baz qux"', 'e=f']
    assert split_args('a=b c="foo bar" d="baz qux"\ne=f g=h') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:10:30.349381
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1=value1 key2='value with spaces'"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value1 key2=value\ with\ spaces"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:10:34.512197
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:10:45.229986
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:10:53.479086
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:10:58.004466
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:11:01.649234
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:11:05.426555
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1='value with spaces' key2=value2"
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value\ with\ spaces key2=value2"
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key

# Generated at 2024-05-31 18:11:10.014176
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2=value2', check_raw=True) == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2=value2 key3', check_raw=True) == {'key1': 'value1', 'key2': 'value2', '_raw_params': 'key3'}
    assert parse_kv('key1=value1 key2=value2 key3') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="

# Generated at 2024-05-31 18:11:13.316317
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:11:17.972053
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:11:32.427083
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e f="hello world"') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"']
    assert split_args('a=b c="foo bar" d=e f="hello world" g=h') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"', 'g=h']
    assert split_args('a=b c="foo bar" d=e f="hello world" g=h i="test"') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"', 'g=h', 'i

# Generated at 2024-05-31 18:11:36.257577
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:11:40.679396
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d="hello world"') == ['a=b', 'c="foo bar"', 'd="hello world"']
    assert split_args('a=b c="foo bar" d="hello world"\ne=f') == ['a=b', 'c="foo bar"', 'd="hello world"', 'e=f']
    assert split_args('a=b c="foo bar" d="hello world"\ne=f g=h') == ['a=b', 'c="foo bar"', 'd="hello world"',

# Generated at 2024-05-31 18:11:44.907361
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:11:48.917222
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:11:53.010849
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b',

# Generated at 2024-05-31 18:11:56.175912
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:11:59.381341
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:12:03.170062
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h=i') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h=i']
    assert split_args('a=b c="foo bar" d=e\nf=g h=i j=k') == ['a=b', 'c="foo bar"', 'd=e

# Generated at 2024-05-31 18:12:07.918599
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:12:21.362570
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar"\nd=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h=i') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h=i']
    assert split_args('a

# Generated at 2024-05-31 18:12:25.414719
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:12:28.665280
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:12:32.289250
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:12:35.771052
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 creates=/tmp/file', check_raw=True

# Generated at 2024-05-31 18:12:40.318208
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 extra_param', check_raw=True) ==

# Generated at 2024-05-31 18:12:44.230525
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:12:50.239572
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = 'key1="value with spaces" key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r'key1=value\ with\ spaces key2=value2'
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key

# Generated at 2024-05-31 18:12:53.635702
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:12:57.273874
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:13:11.815893
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:13:15.316556
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1='value with spaces' key2=value2"
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = "key1=value\\ with\\ spaces key2=value2"
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:13:18.872312
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:13:22.439294
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f" g=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f" g="h i"') == ['a=b', 'c="foo bar"', 'd="e f"', 'g="h i"']
    assert split_args('a=b c="foo bar" d="e f" g

# Generated at 2024-05-31 18:13:25.992857
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:13:29.557451
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:13:33.903875
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:13:37.433630
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1='value with spaces' key2=value2"
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = "key1=value\\ with\\ spaces key2=value2"
    expected = {"key1": "value with spaces", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:13:42.789585
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar"\nd=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f"\ng=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="

# Generated at 2024-05-31 18:13:46.374165
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar"\nd=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']


# Generated at 2024-05-31 18:14:05.112960
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert

# Generated at 2024-05-31 18:14:09.090857
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:14:13.502353
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:14:17.402884
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f"\ng=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert

# Generated at 2024-05-31 18:14:21.360454
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:14:25.661987
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:14:30.192028
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:14:35.434305
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b',

# Generated at 2024-05-31 18:14:41.399760
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l m=n') == ['a=b', 'c="foo bar"', '

# Generated at 2024-05-31 18:14:45.028870
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:15:00.506710
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f" g=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f" g="h i"') == ['a=b', 'c="foo bar"', 'd="e f"', 'g="h i"']
    assert split_args('a=b c="foo bar" d="e f" g

# Generated at 2024-05-31 18:15:03.821937
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e f="hello world"') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"']
    assert split_args('a=b c="foo bar" d=e f="hello world" g=h') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"', 'g=h']
    assert split_args('a=b c="foo bar" d=e f="hello world" g=h i="test"') == ['a=b', 'c="foo bar"', 'd=e', 'f="hello world"', 'g=h', 'i

# Generated at 2024-05-31 18:15:07.388841
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1=value1 key2='value with spaces'"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value1 key2=value\ with\ spaces"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1=value1 key2

# Generated at 2024-05-31 18:15:10.858635
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces
    args = "key1=value1 key2='value with spaces'"
    expected = {"key1": "value1", "key2": "value with spaces"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r"key1=value1 key2=value\=with\=equals"
    expected = {"key1": "value1", "key2": "value=with=equals"}
    assert parse_kv(args) == expected

    # Test case 4: Key-value pairs with raw parameters
    args = "key1

# Generated at 2024-05-31 18:15:14.801520
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:15:18.211907
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==

# Generated at 2024-05-31 18:15:21.716283
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d=e\nf=g') == ['a=b', 'c="foo bar"', 'd=e', 'f=g']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"']
    assert split_args('a=b c="foo bar" d=e\nf=g h="i j"\nk=l') == ['a=b', 'c="foo bar"', 'd=e', 'f=g', 'h="i j"', 'k=l']
    assert

# Generated at 2024-05-31 18:15:26.081043
```python
    assert split_args('a=b c="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b\nc="foo bar"') == ['a=b', 'c="foo bar"']
    assert split_args('a=b c="foo bar" d=e') == ['a=b', 'c="foo bar"', 'd=e']
    assert split_args('a=b c="foo bar" d="e f"') == ['a=b', 'c="foo bar"', 'd="e f"']
    assert split_args('a=b c="foo bar" d="e f"\ng=h') == ['a=b', 'c="foo bar"', 'd="e f"', 'g=h']
    assert split_args('a=b c="foo bar" d="e f"\ng=h i=j') == ['a=b', 'c="foo bar"', 'd="e f"',

# Generated at 2024-05-31 18:15:31.846372
```python
    # Test case 1: Basic key-value pairs
    args = "key1=value1 key2=value2"
    expected = {"key1": "value1", "key2": "value2"}
    assert parse_kv(args) == expected

    # Test case 2: Key-value pairs with spaces and quotes
    args = 'key1="value with spaces" key2=\'another value\''
    expected = {"key1": "value with spaces", "key2": "another value"}
    assert parse_kv(args) == expected

    # Test case 3: Key-value pairs with escaped characters
    args = r'key1=value1 key2=escaped\=value'
    expected = {"key1": "value1", "key2": "escaped=value"}
    assert parse_kv(args) == expected

    # Test case 4: Raw parameters without check_raw
    args = "key1=value

# Generated at 2024-05-31 18:15:34.965120
```python
    assert parse_kv('key1=value1 key2=value2') == {'key1': 'value1', 'key2': 'value2'}
    assert parse_kv('key1=value1 key2="value with spaces"') == {'key1': 'value1', 'key2': 'value with spaces'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3') == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3', check_raw=True) == {'key1': 'value1', 'key2': 'value with spaces', 'key3': 'value3'}
    assert parse_kv('key1=value1 key2="value with spaces" key3=value3 raw_param', check_raw=True) ==