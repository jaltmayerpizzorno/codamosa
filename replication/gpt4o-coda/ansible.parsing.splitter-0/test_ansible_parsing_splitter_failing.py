# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    try:
        float_0 = -848.0
        var_0 = module_0.split_args(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        var_0 = module_0.parse_kv(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "'/n<Nbd"
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '+T>)@" '
        bytes_0 = b'C\xe3\x9a\xc5&\x14d\\\xd6S\xfd4'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.parse_kv(str_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'key'
        var_0 = module_0.parse_kv(str_0)
        str_1 = '\t'
        str_2 = '$(%}t'
        str_3 = 'gge_*;o}ajVRxQNnUG2f'
        var_1 = module_0.parse_kv(str_2, str_3)
        float_0 = -561.13
        set_0 = {float_0, str_1}
        var_2 = module_0.split_args(set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'ZMjx,z$)B;v+${%wE'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "sL\\h'\nQr;*f1"
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'qQoZe&%rE\'"@"TM='
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '= oS1pO^{/\nCoC'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'ke="vauewith spaces"5H=vaPue2'
        var_1 = module_0.parse_kv(str_1)
        str_2 = "\ndescription:\n- Templates are processed by the L(Jinja2 templating language,http://jinja.pocoo.org/docs/).\n- Documentation on the template formatting can be found in the\n  L(Template Designer Documentation,http://jinja.pocoo.org/docs/templates/).\n- Additional variables listed below can be used in templates.\n- C(ansible_managed) (configurable via the C(defaults) section of C(ansible.cfg)) contains a string which can be used to\n  describe the template name, host, modification time of the template file and the owner uid.\n- C(template_host) contains the node name of the template's machine.\n- C(template_uid) is the numeric user id of the owner.\n- C(template_path) is the path of the template.\n- C(template_fullpath) is the absolute path of the template.\n- C(template_destpath) is the path of the template on the remote system (added in 2.8).\n- C(template_run_date) is the date that the template was rendered.\noptions:\n  src:\n    description:\n    - Path of a Jinja2 formatted template on the Ansible controller.\n    - This can be a relative or an absolute path.\n    - The file must be encoded with C(utf-8) but I(output_encoding) can be used to control the encoding of the output\n      template.\n    type: path\n    required: yes\n  dest:\n    description:\n    - Location to render the template to on the remote machine.\n    type: path\n    required: yes\n  newline_sequence:\n    description:\n    - Specify the newline sequence to use for templating files.\n    type: str\n    choices: [ '\\n', '\\r', '\\r\\n' ]\n    default: '\\n'\n    version_added: '2.4'\n  block_start_string:\n    description:\n    - The string marking the beginning of a block.\n    type: str\n    default: '{%'\n    version_added: '2.4'\n  block_end_string:\n    description:\n    - The string marking the end of a block.\n    type: str\n    default: '%}'\n    version_added: '2.4'\n  variable_start_string:\n    description:\n    - The string marking the beginning of a print statement.\n    type: str\n    default: '{{'\n    version_added: '2.4'\n  variable_end_string:\n    description:\n    - The string marking the end of a print statement.\n    type: str\n    default: '}}'\n    version_added: '2.4'\n  comment_start_string:\n    description:\n    - The string marking the beginning of a comment statement.\n    type: str\n    version_added: '2.12'\n  comment_end_string:\n    description:\n    - The string marking the end of a comment statement.\n    type: str\n    version_added: '2.12'\n  trim_blocks:\n    description:\n    - Determine when newlines should be removed from blocks.\n    - When set to C(yes) the first newline after a block is removed (block, not variable tag!).\n    type: bool\n    default: yes\n    version_added: '2.4'\n  lstrip_blocks:\n    description:\n    - Determine when leading spaces and tabs should be stripped.\n    - When set to C(yes) leading spaces and tabs are stripped from the start of a line to a block.\n    - This functionality requires Jinja 2.7 or newer.\n    type: bool\n    default: no\n    version_added: '2.6'\n  force:\n    description:\n    - Determine when the file is being transferred if the destination already exists.\n    - When set to C(yes), replace the remote file when contents are different than the source.\n    - When set to C(no), the file will only be transferred if the destination does not exist.\n    type: bool\n    default: yes\n  output_encoding:\n    description:\n    - Overrides the encoding used to write the template file defined by C(dest).\n    - It defaults to C(utf-8), but any encoding supported by python can be used.\n    - The source template file must always be encoded using C(utf-8), for homogeneity.\n    type: str\n    default: utf-8\n    version_added: '2.7'\nnotes:\n- Including a string that uses a date in the template will result in the template being marked 'changed' each time.\n- Since Ansible 0.9, templates are loaded with C(trim_blocks=True).\n- >\n  Also, you can override jinja2 settings by adding a special header to template file.\n  i.e. C(#jinja2:variable_start_string:'[%', variable_end_string:'%]', trim_blocks: False)\n  which changes the variable interpolation markers to C([% var %]) instead of C({{ var }}).\n  This is the best way to prevent evaluation of things that look like, but should not be Jinja2.\n- Using raw/endraw in Jinja2 will not work as you expect because templates in Ansible are recursively\n  evaluated.\n- To find Byte Order Marks in files, use C(Format-Hex <file> -Count 16) on Windows, and use C(od -a -t x1 -N 16 <file>)\n  on Linux.\n"
        var_2 = module_0.parse_kv(str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Xcu>!okPi\x0b\x0b7\r2Th{#3'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass