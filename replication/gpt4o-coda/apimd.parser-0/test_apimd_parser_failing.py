# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    try:
        parser_0 = module_0.Parser()
        str_0 = '\rlET\x0b!-pg_1)iK_'
        str_1 = module_0.esc_underscore(str_0)
        bool_0 = module_0.is_public_family(str_0)
        parser_0.parse(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        name_0 = module_1.Name()
        str_0 = 'int'
        dict_0 = {}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -808.364
        list_0 = [float_0, float_0]
        str_0 = '6QO\t'
        str_1 = '6LDC/g/Ge\x0caXt%Z:4#'
        dict_0 = {str_0: float_0, str_1: str_0, str_0: float_0}
        constant_0 = module_1.Constant(*list_0, **dict_0)
        str_2 = None
        int_0 = -567
        parser_0 = module_0.Parser(int_0)
        str_3 = None
        dict_1 = {str_2: str_2, str_2: str_0, str_2: str_3}
        resolver_0 = module_0.Resolver(str_2, dict_1)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        str_4 = '\\4'
        var_0 = parser_0.__post_init__()
        bool_0 = module_0.is_public_family(str_4)
        import_from_0 = module_1.ImportFrom()
        parser_0.imports(str_0, import_from_0)
        subscript_0 = module_1.Subscript()
        a_s_t_1 = resolver_0.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_3():
    try:
        constant_0 = module_1.Constant()
        str_0 = 'r>(R'
        dict_0 = {}
        str_1 = 'li'
        resolver_0 = module_0.Resolver(str_0, dict_0, str_1)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_4():
    try:
        attribute_0 = module_1.Attribute()
        str_0 = 'DS~z$u]Tb3X\n Wg-Een@'
        str_1 = 'K'
        dict_0 = {str_0: str_1}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'v'
        int_0 = -4
        str_1 = '\x0cx#\'S\tUdi"p2oX1($}'
        str_2 = 'LMQ\n'
        str_3 = 'st'
        str_4 = '\tQE\x0b"l&y-3Fm_v'
        dict_0 = {str_1: str_2, str_3: str_1, str_4: str_3}
        parser_0 = module_0.Parser(int_0, dict_0, dict_0)
        parser_0.parse(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        parser_0 = module_0.Parser()
        str_0 = ')#/EXM>&Ad`\r>x cW0c'
        import_0 = module_1.Import()
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_7():
    try:
        parser_0 = module_0.Parser()
        str_0 = 'dcC4kv_2*sJSK6'
        parser_0.parse(str_0, str_0)
        ann_assign_0 = module_1.AnnAssign()
        parser_0.globals(str_0, ann_assign_0)
    except BaseException:
        pass

def test_case_8():
    try:
        parser_0 = module_0.Parser()
        subscript_0 = module_1.Subscript()
        var_0 = parser_0.__eq__(subscript_0)
        str_0 = 'lxXh\nYY3TR9{ZD/fT@'
        str_1 = 'xc\x0cp}V?_Su'
        str_2 = module_0.doctest(str_1)
        import_from_0 = module_1.ImportFrom()
        dict_0 = {str_1: str_0}
        assign_0 = module_1.Assign(**dict_0)
        parser_0.globals(str_2, assign_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\tD@i%gFEp'
        str_1 = '('
        str_2 = 'x_'
        dict_0 = {str_0: str_1, str_2: str_2}
        parser_0 = module_0.Parser(dict_0)
        str_3 = parser_0.compile()
        str_4 = '4vV4pK.\x0bx,6M$8+\x0b*'
        int_0 = 0
        str_5 = module_0.parent(str_4, level=int_0)
        expr_0 = None
        str_6 = module_0.const_type(expr_0)
        async_function_def_0 = module_1.AsyncFunctionDef()
        parser_0.api(str_1, async_function_def_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '2R[%IF^'
        list_0 = [str_0, str_0, str_0]
        str_1 = '~6cf;'
        dict_0 = {str_1: list_0}
        async_function_def_0 = module_1.AsyncFunctionDef(*list_0, **dict_0)
        bool_0 = False
        parser_0 = module_0.Parser(bool_0, bool_0)
        parser_0.api(str_0, async_function_def_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        arguments_0 = module_1.arguments()
        str_1 = 'p\\+6A'
        str_2 = 'b\t7\\:-\\upR,sg'
        str_3 = 'v^!TR\\X%U|mC,x)\x0b'
        str_4 = '9KQY9]j-WE-#'
        dict_0 = {str_0: str_0, str_1: str_2, str_3: str_4, str_4: str_1}
        bool_0 = False
        int_0 = 101
        dict_1 = {}
        str_5 = 'MtRz!K'
        set_0 = {str_5, str_5, str_5}
        dict_2 = {str_5: set_0}
        str_6 = ' W(;LNN'
        str_7 = None
        str_8 = '#5R#vKS\n@\\+y'
        str_9 = 'I'
        dict_3 = {str_6: str_7, str_8: str_7, str_9: str_5}
        parser_0 = module_0.Parser(int_0, dict_1, dict_1, dict_2, dict_3)
        parser_0.func_api(str_0, str_0, arguments_0, dict_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        parser_0 = module_0.Parser()
        str_0 = ')#/EXM>&Ad`\r>x cW0c'
        bool_0 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        str_0 = ':OFl\\xO)_r|Td'
        str_1 = '\'Kl"0'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1}
        parser_0 = module_0.Parser(bool_0, dict_0)
        str_2 = module_0.code(str_0)
        str_3 = 'RK;(R'
        list_0 = [str_2, str_3, str_3, str_2]
        arguments_0 = module_1.arguments(*list_0)
        optional_0 = None
        bool_1 = False
        str_4 = '~2`jqq'
        str_5 = 'Tv*%`nNG\n0L9V#'
        dict_1 = {str_4: str_4, str_2: str_5}
        str_6 = 'C'
        str_7 = '(='
        str_8 = 'oo'
        str_9 = 'V:D&)y,^1K8E%>'
        dict_2 = {str_2: str_6, str_7: str_7, str_6: str_8, str_9: str_0}
        parser_1 = module_0.Parser(dict_1, dict_1, dict_2)
        parser_1.func_api(str_2, str_3, arguments_0, optional_0, has_self=bool_1, cls_method=bool_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '=X'
        list_0 = [str_0, str_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        bool_0 = False
        str_1 = '\n<\x0b\nFH\x0b&tjeU;'
        dict_0 = {str_1: str_1}
        parser_0 = module_0.Parser(bool_0, bool_0, dict_0, dict_0)
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '2R[%IF^'
        list_0 = [str_0, str_0, str_0]
        dict_0 = {str_0: list_0}
        async_function_def_0 = module_1.AsyncFunctionDef(*list_0, **dict_0)
        subscript_0 = module_1.Subscript()
        str_1 = '9z'
        import_from_0 = module_1.ImportFrom(*list_0)
        int_0 = -2065
        dict_1 = {}
        parser_0 = module_0.Parser(int_0, dict_1)
        parser_0.imports(str_1, import_from_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        dict_0 = {}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        iterable_0 = None
        str_1 = module_0.table(items=iterable_0)
    except BaseException:
        pass

def test_case_17():
    try:
        name_0 = module_1.Name()
        bool_0 = True
        str_0 = None
        function_def_0 = module_1.FunctionDef()
        str_1 = 'Zs'
        str_2 = '<>QJwnMyHI<5s=|}\rj'
        str_3 = ',U+'
        str_4 = '?dmn;3_\tJ6%bs/;*.;'
        str_5 = 'p#|BOf%Hh6j_z'
        dict_0 = {str_2: str_3, str_4: str_5}
        parser_0 = module_0.Parser(bool_0, dict_0)
        parser_0.api(str_0, function_def_0, prefix=str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '9zb"]sH(='
        list_0 = []
        str_1 = '7\nL+Fn6b$X'
        sequence_0 = None
        bool_0 = False
        set_0 = {str_0}
        dict_0 = {str_1: set_0, str_1: set_0}
        dict_1 = {}
        parser_0 = module_0.Parser(dict_0, dict_1)
        iterator_0 = parser_0.func_ann(str_1, sequence_0, has_self=bool_0, cls_method=bool_0)
        list_1 = [sequence_0]
        arguments_0 = module_1.arguments(*list_1)
        bool_1 = False
        parser_0.func_api(str_1, str_0, arguments_0, list_0, has_self=bool_0, cls_method=bool_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '\tplb/I9nk.o6c5'
        bool_0 = False
        bool_1 = False
        list_0 = [str_0]
        constant_0 = module_1.Constant(*list_0)
        str_1 = 'typing.Coroutine'
        str_2 = 'lS'
        dict_0 = {str_2: str_0, str_2: str_2, str_0: str_0, str_1: str_1}
        resolver_0 = module_0.Resolver(str_0, dict_0, str_2)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        parser_0 = module_0.Parser(bool_0, bool_1, dict_0)
        bool_2 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 63
        constant_0 = module_1.Constant()
        str_0 = module_0.const_type(constant_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = ''
        list_0 = [str_0, str_0]
        constant_0 = module_1.Constant(*list_0)
        str_1 = '**'
        str_2 = '\x0bQUL\\\x0csST:RjbNU'
        int_0 = -160
        dict_0 = {str_2: int_0}
        str_3 = '@staticmethod'
        str_4 = '2$A'
        str_5 = 'typing.Container'
        str_6 = 's\x0cpag'
        str_7 = ''
        str_8 = 'beM7'
        dict_1 = {str_3: str_4, str_5: str_6, str_7: str_8, str_5: str_3}
        parser_0 = module_0.Parser(dict_0, dict_1)
        var_0 = parser_0.__repr__()
        str_9 = ''
        str_10 = None
        import_from_0 = module_1.ImportFrom()
        str_11 = 'IABW}XS+}yv"6>ok>C'
        str_12 = '\t\x0bis3\x0b'
        str_13 = "@3/xieJ8F' cs`4Nm"
        dict_2 = {str_11: str_12, str_1: str_13}
        parser_1 = module_0.Parser(dict_2)
        parser_1.imports(str_10, import_from_0)
        str_14 = ')wL'
        str_15 = None
        str_16 = ''
        dict_3 = {str_16: str_1, str_9: str_14, str_15: str_16}
        resolver_0 = module_0.Resolver(str_1, dict_3)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass