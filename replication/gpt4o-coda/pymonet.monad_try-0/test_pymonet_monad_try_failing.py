# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        str_0 = '5Gxs+%]Pn'
        bytes_0 = b'@o\xbb8\xf5c\xfb\xea\x8a\x1ce\xdbiX;\xca\xb6'
        bool_0 = True
        int_0 = True
        bool_1 = False
        try_0 = module_0.Try(int_0, bool_1)
        var_0 = try_0.get()
        try_1 = module_0.Try(bytes_0, bool_0)
        var_1 = try_1.map(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xd4s\xb2\x08[]\xadh\xf1\xf0\x9a'
        bool_0 = None
        try_0 = module_0.Try(bytes_0, bool_0)
        str_0 = '#_748L\x0ctY]'
        bool_1 = False
        tuple_0 = ()
        var_0 = try_0.bind(tuple_0)
        var_1 = try_0.filter(tuple_0)
        float_0 = -4239.95987
        var_2 = try_0.bind(float_0)
        try_1 = module_0.Try(str_0, bool_1)
        var_3 = try_1.filter(try_0)
        tuple_1 = ()
        list_0 = [tuple_1, bytes_0, bool_1, var_3]
        var_4 = try_1.on_fail(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'j54MMAl'
        str_1 = 'm}_W|+J '
        bool_0 = True
        try_0 = module_0.Try(str_1, bool_0)
        var_0 = try_0.bind(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        str_0 = '2*Q4V/q8gk'
        bool_0 = True
        try_0 = module_0.Try(str_0, bool_0)
        var_0 = try_0.get()
        set_0 = {int_0, int_0}
        bool_1 = False
        try_1 = module_0.Try(set_0, bool_1)
        str_1 = try_1.__str__()
        bool_2 = True
        set_1 = set()
        bool_3 = True
        try_2 = module_0.Try(set_1, bool_3)
        var_1 = try_2.on_success(bool_2)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -772.0
        bytes_0 = None
        str_0 = '#0K:.'
        bool_0 = True
        try_0 = module_0.Try(str_0, bool_0)
        var_0 = try_0.on_fail(bytes_0)
        bytes_1 = b'\xe0\xb7VD\xe9\xab\xbe%\xc5w\xab\x0b\xac]\xe8'
        str_1 = try_0.__str__()
        bool_1 = True
        try_1 = module_0.Try(bytes_1, bool_1)
        tuple_0 = ()
        int_0 = False
        bool_2 = True
        str_2 = '$Y!qG&`5mwa& '
        tuple_1 = (tuple_0, int_0, bool_2, str_2)
        list_0 = [int_0, bool_1]
        tuple_2 = (tuple_1, bytes_1, list_0, float_0)
        var_1 = try_0.on_fail(tuple_2)
        var_2 = try_1.on_success(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'dM`}=T8\'{\\R)"W0V'
        int_0 = 836
        bool_0 = False
        try_0 = module_0.Try(int_0, bool_0)
        var_0 = try_0.on_fail(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1464
        int_1 = -1210
        list_0 = [int_1, int_1]
        str_0 = '\\F.gNh6n%+Yq`i-\x0blr?!'
        tuple_0 = (int_1, list_0, str_0)
        bool_0 = True
        try_0 = module_0.Try(tuple_0, bool_0)
        var_0 = try_0.filter(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        complex_0 = None
        try_0 = module_0.Try(complex_0, bool_0)
        bool_1 = try_0.__eq__(try_0)
        tuple_0 = None
        var_0 = try_0.bind(tuple_0)
        str_0 = try_0.__str__()
        try_1 = module_0.Try(bool_1, bool_1)
        str_1 = try_0.__str__()
        int_0 = -1600
        var_1 = try_0.filter(int_0)
        var_2 = try_0.on_fail(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        try_0 = None
        bytes_0 = b'\xbd\x0c\xe1\xf2\x95\xa63\x16jiL\xc5\x91\x8f7\xe2\xd7w'
        tuple_0 = (bytes_0,)
        bool_0 = False
        try_1 = module_0.Try(tuple_0, bool_0)
        var_0 = try_1.map(try_0)
        bytes_1 = b'\xf6@'
        tuple_1 = ()
        float_0 = -3578.16
        str_0 = 'D='
        tuple_2 = (float_0, str_0, float_0)
        bool_1 = False
        try_2 = module_0.Try(tuple_2, bool_1)
        var_1 = try_2.on_success(tuple_1)
        bool_2 = False
        try_3 = module_0.Try(tuple_2, bool_2)
        bool_3 = False
        try_4 = module_0.Try(bytes_1, bool_3)
        str_1 = try_4.__str__()
        var_2 = try_4.get()
        bool_4 = False
        bool_5 = try_1.__eq__(try_2)
        str_2 = 'OA\\5dP '
        bool_6 = True
        try_5 = module_0.Try(str_2, bool_6)
        bool_7 = True
        try_6 = module_0.Try(try_5, bool_7)
        bytes_2 = b'\\'
        var_3 = try_6.get_or_else(bytes_2)
        bool_8 = try_6.__eq__(bytes_2)
        var_4 = try_6.map(bool_4)
    except BaseException:
        pass