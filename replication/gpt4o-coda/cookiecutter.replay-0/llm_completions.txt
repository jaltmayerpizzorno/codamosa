

# Generated at 2024-06-01 16:58:41.744072
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author_name": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:58:44.208606
```python
    replay_dir = "/path/to/replay"
    template_name = "template"
    expected = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = "template.json"
    expected_with_suffix = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 16:58:49.698326
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "test_project"
            }
        }

        # Dump the context to a file
        dump(temp_dir, "test_template", context)

        # Load the context from the file
        loaded_context = load(temp_dir, "test_template")

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template_name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing 'cookiecutter' key in context
        invalid_context = {
            "project_name": "test_project"
        }
        dump(temp_dir,

# Generated at 2024-06-01 16:58:52.866227
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:58:54.630445
```python
    replay_dir = 'test_dir'
    template_name = 'template'
    expected = os.path.join(replay_dir, 'template.json')
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = 'template.json'
    expected_with_suffix = os.path.join(replay_dir, 'template.json')
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 16:58:58.010012
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:01.181230
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key in context
        invalid

# Generated at 2024-06-01 16:59:03.811448
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:06.948270
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:09.822855
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = "test_template"
        context = {"cookiecutter": {"project_name": "Test Project"}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:15.429090
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:18.555926
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            loaded_context = json.load(f)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:21.352174
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key in context
        invalid

# Generated at 2024-06-01 16:59:24.534910
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = "test_template"
        context = {"cookiecutter": {"project_name": "Test Project"}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:27.003057
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = "test_template"
        context = {"cookiecutter": {"project_name": "Test Project"}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:28.511666
```python
    replay_dir = 'test_dir'
    template_name = 'template'
    expected = os.path.join(replay_dir, 'template.json')
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = 'template.json'
    expected_with_suffix = os.path.join(replay_dir, 'template.json')
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 16:59:31.195417
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author_name": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key
        invalid_context

# Generated at 2024-06-01 16:59:34.159740
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:37.058838
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:39.593079
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:46.127443
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author_name": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:49.054899
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:50.557233
```python
    replay_dir = "/path/to/replay"
    template_name = "template"
    expected = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = "template.json"
    expected_with_suffix = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 16:59:53.494679
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "test_project",
                "author": "test_author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 16:59:56.892688
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Dump the context to a file
        dump(temp_dir, "test_template", context)

        # Load the context from the file
        loaded_context = load(temp_dir, "test_template")

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key in context
        invalid_context = {
            "project_name": "Test Project",
           

# Generated at 2024-06-01 17:00:00.187770
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key in context
        invalid

# Generated at 2024-06-01 17:00:03.665505
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author_name": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key
        invalid_context

# Generated at 2024-06-01 17:00:06.828352
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = "test_template"
        context = {"cookiecutter": {"project_name": "Test Project"}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:09.131755
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:10.754355
```python
    replay_dir = 'test_dir'
    template_name = 'template'
    expected = os.path.join(replay_dir, 'template.json')
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = 'template.json'
    expected_with_suffix = os.path.join(replay_dir, 'template.json')
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 17:00:16.133890
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:18.294065
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:21.065388
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:24.018116
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            loaded_context = json.load(f)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:27.727421
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:31.369319
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:32.936197
```python
    replay_dir = 'test_replay_dir'
    template_name = 'test_template'
    expected = os.path.join(replay_dir, 'test_template.json')
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = 'test_template.json'
    expected_with_suffix = os.path.join(replay_dir, 'test_template.json')
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 17:00:34.781382
```python
    replay_dir = 'test_replay_dir'
    template_name = 'test_template'
    expected = os.path.join(replay_dir, 'test_template.json')
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = 'test_template.json'
    expected_with_suffix = os.path.join(replay_dir, 'test_template.json')
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 17:00:37.122820
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:39.515831
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:49.842693
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:00:53.537235
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for TypeError when template_name is not a string
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for ValueError when 'cookie

# Generated at 2024-06-01 17:00:55.054022
```python
    replay_dir = "/path/to/replay"
    template_name = "template"
    expected = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = "template.json"
    expected_with_suffix = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 17:00:57.684963
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:00.484285
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:03.401384
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing 'cookiecutter' key in context


# Generated at 2024-06-01 17:01:06.367782
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define the template name and context
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assertions to check if the loaded context matches the original context
        assert loaded_context == context
        assert 'cookiecutter' in loaded_context
        assert loaded_context['cookiecutter']['project_name'] == 'Test Project'
    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:10.962924
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:13.823314
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:17.358474
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        context = {
            "cookiecutter": {
                "project_name": "test_project",
                "author": "test_author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:33.517774
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:38.140178
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:40.618101
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        context = {
            "cookiecutter": {
                "project_name": "test_project",
                "author": "test_author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:42.536159
```python
    replay_dir = "/path/to/replay"
    template_name = "template"
    expected = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = "template.json"
    expected_with_suffix = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 17:01:46.083105
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:48.725637
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:51.114344
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:52.857244
```python
    replay_dir = "/path/to/replay"
    template_name = "template"
    expected = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name) == expected

    template_name_with_suffix = "template.json"
    expected_with_suffix = "/path/to/replay/template.json"
    assert get_file_name(replay_dir, template_name_with_suffix) == expected_with_suffix
```

# Generated at 2024-06-01 17:01:55.960718
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:01:58.821864
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:02:38.218386
def test_load():
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define the template name and context
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assertions to check if the loaded context matches the original context
        assert loaded_context == context
        assert 'cookiecutter' in loaded_context
        assert loaded_context['cookiecutter']['project_name'] == 'Test Project'

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)

# Generated at 2024-06-01 17:02:40.993369
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author_name": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:02:44.146090
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:02:47.923459
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key in context
        invalid

# Generated at 2024-06-01 17:02:50.660258
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:02:53.940363
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "test_project"
            }
        }

        # Dump the context to a file
        dump(temp_dir, "test_template", context)

        # Load the context from the file
        loaded_context = load(temp_dir, "test_template")

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key in context
        invalid_context = {}
        dump(temp_dir, "invalid_template", invalid_context)
        try:
            load(temp

# Generated at 2024-06-01 17:02:56.459140
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:02:59.142987
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:03:02.626112
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            loaded_context = json.load(f)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:03:05.600488
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:03:40.039293
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:03:42.906212
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key in context
        invalid

# Generated at 2024-06-01 17:03:45.604726
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:03:48.032633
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:03:50.491063
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:03:54.060967
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:03:57.319340
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = "test_template"
        context = {"cookiecutter": {"project_name": "Test Project"}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:04:00.872760
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        template_name = "test_template"
        context = {"cookiecutter": {"project_name": "Test Project"}}
        
        # Call the dump function
        dump(temp_dir, template_name, context)
        
        # Verify the file was created
        replay_file = get_file_name(temp_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created"
        
        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context data does not match"
    
    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:04:03.935575
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:04:06.562960
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:09.369080
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:11.489387
def test_load():
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define the template name and context
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assertions
        assert loaded_context == context, "Loaded context does not match the original context"
    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)

# Generated at 2024-06-01 17:05:16.190054
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:18.960044
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        template_name = "test_template"
        context = {"cookiecutter": {"project_name": "Test Project"}}

        # Call the dump function
        dump(temp_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(temp_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:21.773334
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:25.298267
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:28.807458
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:32.741647
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:36.221072
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:05:39.173503
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define test parameters
        replay_dir = temp_dir
        template_name = 'test_template'
        context = {'cookiecutter': {'project_name': 'Test Project'}}

        # Call the dump function
        dump(replay_dir, template_name, context)

        # Verify the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created."

        # Verify the content of the file
        with open(replay_file, 'r') as infile:
            loaded_context = json.load(infile)
            assert loaded_context == context, "Context in file does not match expected context."

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:07:35.722871
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:07:42.720591
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a sample template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:07:53.628766
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "test_project",
                "author": "test_author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

        # Test for TypeError when template_name is not a string
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for Value

# Generated at 2024-06-01 17:07:56.189963
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:07:58.816450
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "test_project",
                "author": "test_author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:08:01.149210
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:08:03.837908
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Dump the context to a file
        dump(temp_dir, "test_template", context)

        # Load the context from the file
        loaded_context = load(temp_dir, "test_template")

        # Assertions to check if the loaded context matches the original context
        assert loaded_context == context, "Loaded context does not match the original context"

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing 'cookiecutter' key in context
       

# Generated at 2024-06-01 17:08:08.199122
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a valid context
        context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test for invalid template name type
        try:
            load(temp_dir, 123)
        except TypeError as e:
            assert str(e) == 'Template name is required to be of type str'

        # Test for missing cookiecutter key
        invalid_context =

# Generated at 2024-06-01 17:08:11.023210
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        context = {
            "cookiecutter": {
                "project_name": "test_project",
                "author": "test_author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the context to a file
        dump(temp_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```

# Generated at 2024-06-01 17:08:14.294206
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    try:
        # Define a sample context
        sample_context = {
            "cookiecutter": {
                "project_name": "Test Project",
                "author": "Test Author"
            }
        }

        # Define a template name
        template_name = "test_template"

        # Dump the sample context to a file
        dump(temp_dir, template_name, sample_context)

        # Load the context from the file
        loaded_context = load(temp_dir, template_name)

        # Assert that the loaded context matches the sample context
        assert loaded_context == sample_context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(temp_dir)
```