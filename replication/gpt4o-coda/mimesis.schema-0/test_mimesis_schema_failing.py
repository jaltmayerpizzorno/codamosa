# Automatically generated by Pynguin.
import mimesis.schema as module_0

def test_case_0():
    try:
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__()
    except BaseException:
        pass

def test_case_1():
    try:
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(abstract_field_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ' f!Z*\nV[Il8()N'
        dict_0 = {str_0: str_0}
        schema_0 = module_0.Schema(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = ''
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '.&O'
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        abstract_field_0 = module_0.AbstractField()
        schema_0 = module_0.Schema(abstract_field_0)
        list_0 = schema_0.create()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'choice'
        abstract_field_0 = module_0.AbstractField()
        var_0 = abstract_field_0.__str__()
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = "Generate a random full name.\n\n        :param reverse: Return reversed full name.\n        :param gender: Gender's enum object.\n        :return: Full name.\n\n        :Example:\n            Johann Wolfgang.\n        "
        str_1 = '\x0bdV>Fb&(d%\\_!"b*\\"'
        dict_0 = {str_1: str_0, str_1: abstract_field_0}
        any_0 = abstract_field_0.__call__(str_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = ''
        abstract_field_1 = module_0.AbstractField(str_0, str_0, abstract_field_0)
    except BaseException:
        pass