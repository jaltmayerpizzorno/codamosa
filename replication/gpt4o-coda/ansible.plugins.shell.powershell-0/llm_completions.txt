

# Generated at 2024-06-01 10:49:07.045602
```python
    shell_module = ShellModule()

    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result

    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result

    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result
```

# Generated at 2024-06-01 10:49:09.981690
```python
    shell_module = ShellModule()
    env_string = "env_var=value"
    shebang = "#!powershell"
    cmd = "test_command"
    arg_path = "arg_path"

    # Test case 1: pipelining bypass
    result = shell_module.build_module_command(env_string, shebang, '')
    assert "bootstrap_wrapper.ps1" in result

    # Test case 2: non-pipelining with PowerShell shebang
    result = shell_module.build_module_command(env_string, shebang, cmd)
    assert "type test_command |" in result

    # Test case 3: non-pipelining with other shebang
    shebang = "#!/bin/bash"
    result = shell_module.build_module_command(env_string, shebang, cmd)
    assert "#!/bin/bash test_command" in result

    # Test case 4: non-pipelining without shebang
    result = shell_module.build_module

# Generated at 2024-06-01 10:49:11.904500
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:13.441405
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:14.855440
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:17.112697
```python
    shell_module = ShellModule()
    basefile = "testdir"
    tmpdir = "C:\\Temp"
    
    result = shell_module.mkdtemp(basefile=basefile, tmpdir=tmpdir)
    
    expected_script = '''
        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('C:\\Temp')
        $tmp = New-Item -Type Directory -Path $tmp_path -Name 'testdir'
        Write-Output -InputObject $tmp.FullName
    '''.strip()
    
    expected_result = shell_module._encode_script(expected_script)
    
    assert result == expected_result
```

# Generated at 2024-06-01 10:49:18.820580
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:20.475913
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:21.950392
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:23.530812
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:32.647514
```python
    shell_module = ShellModule()
    
    # Test case 1: Pathname with .ps1 extension
    assert shell_module.get_remote_filename("script.ps1") == "script.ps1"
    
    # Test case 2: Pathname with .exe extension
    assert shell_module.get_remote_filename("program.exe") == "program.exe"
    
    # Test case 3: Pathname with no extension
    assert shell_module.get_remote_filename("script") == "script.ps1"
    
    # Test case 4: Pathname with different extension
    assert shell_module.get_remote_filename("script.txt") == "script.ps1"
    
    # Test case 5: Pathname with leading/trailing spaces
    assert shell_module.get_remote_filename("  script.ps1  ") == "script.ps1"
    assert shell_module.get_remote_filename("  script  ") == "script.ps1"
    
    # Test case 6: Pathname

# Generated at 2024-06-01 10:49:35.991067
```python
    shell_module = ShellModule()

    assert shell_module.path_has_trailing_slash("C:\\path\\to\\dir\\") == True
    assert shell_module.path_has_trailing_slash("C:\\path\\to\\dir") == False
    assert shell_module.path_has_trailing_slash("C:/path/to/dir/") == True
    assert shell_module.path_has_trailing_slash("C:/path/to/dir") == False
    assert shell_module.path_has_trailing_slash("C:\\path\\to\\dir\\subdir\\") == True
    assert shell_module.path_has_trailing_slash("C:\\path\\to\\dir\\subdir") == False
    assert shell_module.path_has_trailing_slash("C:/path/to/dir/subdir/") == True
    assert shell_module.path_has_trailing_slash("C:/path/to/dir/subdir") == False
```

# Generated at 2024-06-01 10:49:38.056210
```python
    shell_module = ShellModule()
    assert isinstance(shell_module, ShellModule)
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
```

# Generated at 2024-06-01 10:49:41.822734
```python
    shell_module = ShellModule()
    env_string = "env_var=value"
    shebang = "#!powershell"
    cmd = "test_command"
    arg_path = "arg_path"

    # Test case 1: pipelining bypass
    result = shell_module.build_module_command(env_string, shebang, '')
    assert "bootstrap_wrapper.ps1" in result

    # Test case 2: non-pipelining with PowerShell shebang
    result = shell_module.build_module_command(env_string, shebang, cmd, arg_path)
    assert "type test_command |" in result

    # Test case 3: non-pipelining with other shebang
    shebang = "#!/bin/bash"
    result = shell_module.build_module_command(env_string, shebang, cmd, arg_path)
    assert shebang[2:] in result

    # Test case 4: non-pipelining without shebang
    result =

# Generated at 2024-06-01 10:49:45.257424
```python
    shell_module = ShellModule()
    
    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + '\\Documents')"
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result, f"Expected script

# Generated at 2024-06-01 10:49:46.855312
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:48.417632
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:49:50.582123
```python
    shell_module = ShellModule()
    basefile = "testdir"
    tmpdir = "C:\\Temp"
    
    expected_script = '''
        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('C:\\Temp')
        $tmp = New-Item -Type Directory -Path $tmp_path -Name 'testdir'
        Write-Output -InputObject $tmp.FullName
    '''.strip()
    
    encoded_script = shell_module._encode_script(expected_script)
    result = shell_module.mkdtemp(basefile=basefile, tmpdir=tmpdir)
    
    assert result == encoded_script
```

# Generated at 2024-06-01 10:49:53.266235
```python
    shell_module = ShellModule()

    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result

    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result

    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result
```

# Generated at 2024-06-01 10:49:55.339079
```python
    shell_module = ShellModule()
    assert shell_module.get_remote_filename("script") == "script.ps1"
    assert shell_module.get_remote_filename("script.ps1") == "script.ps1"
    assert shell_module.get_remote_filename("script.exe") == "script.exe"
    assert shell_module.get_remote_filename("path/to/script") == "script.ps1"
    assert shell_module.get_remote_filename("path/to/script.ps1") == "script.ps1"
    assert shell_module.get_remote_filename("path/to/script.exe") == "script.exe"
```

# Generated at 2024-06-01 10:50:05.094690
```python
    shell_module = ShellModule()
    
    # Test case 1: Pathname with .ps1 extension
    assert shell_module.get_remote_filename("script.ps1") == "script.ps1"
    
    # Test case 2: Pathname with .exe extension
    assert shell_module.get_remote_filename("program.exe") == "program.exe"
    
    # Test case 3: Pathname with no extension
    assert shell_module.get_remote_filename("script") == "script.ps1"
    
    # Test case 4: Pathname with different extension
    assert shell_module.get_remote_filename("script.txt") == "script.ps1"
    
    # Test case 5: Pathname with leading/trailing spaces
    assert shell_module.get_remote_filename("  script.ps1  ") == "script.ps1"
    assert shell_module.get_remote_filename("  script  ") == "script.ps1"
    
    # Test case 6: Pathname

# Generated at 2024-06-01 10:50:09.862152
```python
    shell_module = ShellModule()

    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\') == True
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir') == False
    assert shell_module.path_has_trailing_slash('C:/path/to/dir/') == True
    assert shell_module.path_has_trailing_slash('C:/path/to/dir') == False
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\subdir\\') == True
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\subdir') == False
    assert shell_module.path_has_trailing_slash('C:/path/to/dir/subdir/') == True
    assert shell_module.path_has_trailing_slash('C:/path/to/dir/subdir') == False
```

# Generated at 2024-06-01 10:50:12.159652
```python
    shell_module = ShellModule()
    basefile = "testdir"
    tmpdir = "C:\\Temp"
    
    result = shell_module.mkdtemp(basefile=basefile, tmpdir=tmpdir)
    
    expected_script = '''
        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('C:\\Temp')
        $tmp = New-Item -Type Directory -Path $tmp_path -Name 'testdir'
        Write-Output -InputObject $tmp.FullName
    '''.strip()
    
    expected_result = shell_module._encode_script(expected_script)
    
    assert result == expected_result
```

# Generated at 2024-06-01 10:50:15.863007
```python
    shell_module = ShellModule()
    shell_module.get_option = lambda x: 'C:\\Windows\\Temp' if x == 'remote_tmp' else None

    # Test with no basefile, no tmpdir
    result = shell_module.mkdtemp()
    assert '$tmp_path = [System.Environment]::ExpandEnvironmentVariables(\'C:\\Windows\\Temp\')' in result
    assert 'New-Item -Type Directory -Path $tmp_path -Name' in result

    # Test with basefile
    result = shell_module.mkdtemp(basefile='testdir')
    assert '$tmp_path = [System.Environment]::ExpandEnvironmentVariables(\'C:\\Windows\\Temp\')' in result
    assert 'New-Item -Type Directory -Path $tmp_path -Name \'testdir\'' in result

    # Test with tmpdir
    result = shell_module.mkdtemp(tmpdir='D:\\Temp')
    assert '$tmp

# Generated at 2024-06-01 10:50:18.389857
```python
    shell_module = ShellModule()
    shell_module.get_option = lambda x: 'C:\\Windows\\Temp' if x == 'remote_tmp' else None
    shell_module._unquote = lambda x: x
    shell_module._escape = lambda x: x

    result = shell_module.mkdtemp(basefile='testdir')
    expected_script = '''
        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('C:\\Windows\\Temp')
        $tmp = New-Item -Type Directory -Path $tmp_path -Name 'testdir'
        Write-Output -InputObject $tmp.FullName
    '''.strip()
    expected_result = shell_module._encode_script(expected_script)

    assert result == expected_result
```

# Generated at 2024-06-01 10:50:20.722731
```python
    shell_module = ShellModule()

    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\') == True
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir') == False
    assert shell_module.path_has_trailing_slash('C:/path/to/dir/') == True
    assert shell_module.path_has_trailing_slash('C:/path/to/dir') == False
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\subdir\\') == True
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\subdir') == False
```

# Generated at 2024-06-01 10:50:22.572219
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:50:24.508690
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:50:26.089112

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:50:29.950351
```python
    shell_module = ShellModule()
    
    # Test case 1: Pathname with .ps1 extension
    assert shell_module.get_remote_filename("script.ps1") == "script.ps1"
    
    # Test case 2: Pathname with .exe extension
    assert shell_module.get_remote_filename("program.exe") == "program.exe"
    
    # Test case 3: Pathname with no extension
    assert shell_module.get_remote_filename("script") == "script.ps1"
    
    # Test case 4: Pathname with different extension
    assert shell_module.get_remote_filename("script.txt") == "script.ps1"
    
    # Test case 5: Pathname with leading/trailing spaces
    assert shell_module.get_remote_filename("  script.ps1  ") == "script.ps1"
    assert shell_module.get_remote_filename("  script  ") == "script.ps1"
    
    # Test case 6: Pathname

# Generated at 2024-06-01 10:50:46.180269
```python
    shell_module = ShellModule()

    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\') == True
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir') == False
    assert shell_module.path_has_trailing_slash('C:/path/to/dir/') == True
    assert shell_module.path_has_trailing_slash('C:/path/to/dir') == False
    assert shell_module.path_has_trailing_slash('~/path/to/dir/') == True
    assert shell_module.path_has_trailing_slash('~/path/to/dir') == False
```

# Generated at 2024-06-01 10:50:47.684692

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:50:51.028931
```python
    shell_module = ShellModule()
    
    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result, f"Expected script

# Generated at 2024-06-01 10:50:52.895584
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:50:56.239980
```python
    shell_module = ShellModule()
    
    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result, f"Expected script

# Generated at 2024-06-01 10:50:58.418640
```python
    shell_module = ShellModule()
    basefile = "testdir"
    tmpdir = "C:\\Temp"
    
    result = shell_module.mkdtemp(basefile=basefile, tmpdir=tmpdir)
    
    expected_script = '''
        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('C:\\Temp')
        $tmp = New-Item -Type Directory -Path $tmp_path -Name 'testdir'
        Write-Output -InputObject $tmp.FullName
    '''.strip()
    
    expected_result = shell_module._encode_script(expected_script)
    
    assert result == expected_result
```

# Generated at 2024-06-01 10:50:59.905875
```python
    shell_module = ShellModule()
    assert isinstance(shell_module, ShellModule)
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
```

# Generated at 2024-06-01 10:51:01.415934
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:51:05.294346
```python
    shell_module = ShellModule()

    assert shell_module.path_has_trailing_slash("C:\\path\\to\\dir\\") == True
    assert shell_module.path_has_trailing_slash("C:\\path\\to\\dir") == False
    assert shell_module.path_has_trailing_slash("C:/path/to/dir/") == True
    assert shell_module.path_has_trailing_slash("C:/path/to/dir") == False
    assert shell_module.path_has_trailing_slash("C:\\path\\to\\dir\\subdir\\") == True
    assert shell_module.path_has_trailing_slash("C:\\path\\to\\dir\\subdir") == False
    assert shell_module.path_has_trailing_slash("C:/path/to/dir/subdir/") == True
    assert shell_module.path_has_trailing_slash("C:/path/to/dir/subdir") == False
```

# Generated at 2024-06-01 10:51:08.463978
```python
    shell_module = ShellModule()

    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result

    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result

    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result
```

# Generated at 2024-06-01 10:51:38.428776
```python
    shell_module = ShellModule()
    env_string = "env_var=value"
    shebang = "#!powershell"
    cmd = "test_command"
    arg_path = "arg_path"

    result = shell_module.build_module_command(env_string, shebang, cmd, arg_path)
    expected_result = '& %s; exit $LASTEXITCODE' % shell_module._encode_script(
        '''
        Try
        {
            env_var=value
            test_command
        }
        Catch
        {
            $_obj = @{ failed = $true }
            If ($_.Exception.GetType)
            {
                $_obj.Add('msg', $_.Exception.Message)
            }
            Else
            {
                $_obj.Add('msg', $_.ToString())
            }
            If ($_.InvocationInfo.PositionMessage)
            {
                $_obj.Add('exception', $_.InvocationInfo.PositionMessage)
            }
            ElseIf ($_.ScriptStackTrace)
            {
                $_obj

# Generated at 2024-06-01 10:51:41.031642
```python
    shell_module = ShellModule()
    shell_module.get_option = lambda x: 'C:\\Windows\\Temp' if x == 'remote_tmp' else None
    shell_module._unquote = lambda x: x
    shell_module._escape = lambda x: x

    result = shell_module.mkdtemp(basefile='testdir')
    expected_script = '''
        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('C:\\Windows\\Temp')
        $tmp = New-Item -Type Directory -Path $tmp_path -Name 'testdir'
        Write-Output -InputObject $tmp.FullName
    '''.strip()
    expected_result = shell_module._encode_script(expected_script)

    assert result == expected_result
```

# Generated at 2024-06-01 10:51:42.522803

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:51:44.233028

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:51:48.469935
```python
    shell_module = ShellModule()
    
    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result, f"Expected script

# Generated at 2024-06-01 10:51:50.774229
```python
    shell_module = ShellModule()
    basefile = "testdir"
    tmpdir = "C:\\Temp"
    
    result = shell_module.mkdtemp(basefile=basefile, tmpdir=tmpdir)
    
    expected_script = '''
        $tmp_path = [System.Environment]::ExpandEnvironmentVariables('C:\\Temp')
        $tmp = New-Item -Type Directory -Path $tmp_path -Name 'testdir'
        Write-Output -InputObject $tmp.FullName
    '''.strip()
    
    expected_result = shell_module._encode_script(expected_script)
    
    assert result == expected_result
```

# Generated at 2024-06-01 10:51:53.178687
```python
    shell_module = ShellModule()
    assert shell_module.get_remote_filename("script") == "script.ps1"
    assert shell_module.get_remote_filename("script.ps1") == "script.ps1"
    assert shell_module.get_remote_filename("script.exe") == "script.exe"
    assert shell_module.get_remote_filename("path/to/script") == "script.ps1"
    assert shell_module.get_remote_filename("path/to/script.ps1") == "script.ps1"
    assert shell_module.get_remote_filename("path/to/script.exe") == "script.exe"
```

# Generated at 2024-06-01 10:51:54.618868

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:51:58.226855
```python
    shell_module = ShellModule()

    # Test case 1: pipelining bypass
    env_string = ""
    shebang = ""
    cmd = ""
    arg_path = None
    result = shell_module.build_module_command(env_string, shebang, cmd, arg_path)
    assert result.startswith("PowerShell -NoProfile -NonInteractive -ExecutionPolicy Unrestricted -EncodedCommand")

    # Test case 2: non-pipelining with PowerShell shebang
    env_string = ""
    shebang = "#!powershell"
    cmd = "test_module"
    arg_path = None
    result = shell_module.build_module_command(env_string, shebang, cmd, arg_path)
    assert "type test_module.ps1 |" in result

    # Test case 3: non-pipelining with other shebang
    env_string = ""
    shebang = "#!/bin/bash"
    cmd = "test_module"
    arg_path =

# Generated at 2024-06-01 10:51:59.697065
```python
    shell_module = ShellModule()
    assert isinstance(shell_module, ShellModule)
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
```

# Generated at 2024-06-01 10:53:37.293322
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:53:38.808128

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:53:40.409712

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:53:41.906105
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:53:43.515958

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:53:45.081646

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:53:46.624622
```python
    shell_module = ShellModule()
    assert isinstance(shell_module, ShellModule)
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
```

# Generated at 2024-06-01 10:53:56.307706
```python
    shell_module = ShellModule()

    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\') == True
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir') == False
    assert shell_module.path_has_trailing_slash('C:/path/to/dir/') == True
    assert shell_module.path_has_trailing_slash('C:/path/to/dir') == False
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\subdir\\') == True
    assert shell_module.path_has_trailing_slash('C:\\path\\to\\dir\\subdir') == False
    assert shell_module.path_has_trailing_slash('C:/path/to/dir/subdir/') == True
    assert shell_module.path_has_trailing_slash('C:/path/to/dir/subdir') == False
```

# Generated at 2024-06-01 10:53:58.037005
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:54:01.575857
```python
    shell_module = ShellModule()
    
    # Test case 1: Pathname with .ps1 extension
    assert shell_module.get_remote_filename("script.ps1") == "script.ps1"
    
    # Test case 2: Pathname with .exe extension
    assert shell_module.get_remote_filename("program.exe") == "program.exe"
    
    # Test case 3: Pathname with no extension
    assert shell_module.get_remote_filename("script") == "script.ps1"
    
    # Test case 4: Pathname with different extension
    assert shell_module.get_remote_filename("script.txt") == "script.ps1"
    
    # Test case 5: Pathname with leading/trailing spaces
    assert shell_module.get_remote_filename("  script.ps1  ") == "script.ps1"
    assert shell_module.get_remote_filename("  script  ") == "script.ps1"
    
    # Test case 6: Pathname

# Generated at 2024-06-01 10:55:52.319934
```python
    shell_module = ShellModule()
    
    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result, f"Expected script

# Generated at 2024-06-01 10:55:58.238960
```python
    shell_module = ShellModule()
    
    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\User')
    expected_script = "Write-Output 'C:\\Users\\User'"
    assert expected_script in result, f"Expected script

# Generated at 2024-06-01 10:55:59.966270

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:56:02.310514
```python
    shell_module = ShellModule()
    assert shell_module.get_remote_filename("script") == "script.ps1"
    assert shell_module.get_remote_filename("script.ps1") == "script.ps1"
    assert shell_module.get_remote_filename("script.exe") == "script.exe"
    assert shell_module.get_remote_filename("path/to/script") == "script.ps1"
    assert shell_module.get_remote_filename("path/to/script.ps1") == "script.ps1"
    assert shell_module.get_remote_filename("path/to/script.exe") == "script.exe"
```

# Generated at 2024-06-01 10:56:04.762575
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:56:06.803017
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:56:08.614775

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()

# Generated at 2024-06-01 10:56:10.433119
```python
    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._IS_WINDOWS is True
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module.COMPATIBLE_SHELLS == frozenset()
```

# Generated at 2024-06-01 10:56:14.060218
```python
    shell_module = ShellModule()
    
    # Test case 1: user_home_path is '~'
    result = shell_module.expand_user('~')
    expected_script = 'Write-Output (Get-Location).Path'
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 2: user_home_path starts with '~\\'
    result = shell_module.expand_user('~\\Documents')
    expected_script = "Write-Output ((Get-Location).Path + 'Documents')"
    assert expected_script in result, f"Expected script to contain: {expected_script}, but got: {result}"
    
    # Test case 3: user_home_path is a normal path
    result = shell_module.expand_user('C:\\Users\\Admin')
    expected_script = "Write-Output 'C:\\Users\\Admin'"
    assert expected_script in result, f"Expected script

# Generated at 2024-06-01 10:56:15.637436

    shell_module = ShellModule()
    assert shell_module.SHELL_FAMILY == 'powershell'
    assert shell_module._SHELL_REDIRECT_ALLNULL == '> $null'
    assert shell_module._SHELL_AND == ';'
    assert shell_module._IS_WINDOWS is True
    assert shell_module.COMPATIBLE_SHELLS == frozenset()