# Automatically generated by Pynguin.
import ansible.plugins.shell.powershell as module_0

def test_case_0():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.env_prefix()
        bytes_0 = b'\x80\xbeu\xec\xd74\xbcn\x9d\xfa\x7fb\x9e\x13\t\x1eJ'
        var_1 = shell_module_0.path_has_trailing_slash(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.join_path()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.get_remote_filename(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        shell_module_0 = module_0.ShellModule()
        bytes_0 = b'\x80\xbeu\xec\xd74\xbcn\x9d\xfa\x7fb\x9e\x13\t\x1eJ'
        var_0 = shell_module_0.path_has_trailing_slash(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b"\xbc\xc2Q\x19\xd7\xc5\xb4\x8b\x10'\xb6\x99\x12\xf9e\xbd\xe8"
        list_0 = [bytes_0, bytes_0, bytes_0]
        list_1 = [list_0]
        bytes_1 = b'y\xfe\x05\x86\x106\xf5\t\xc4D\xc3('
        bool_0 = True
        tuple_0 = (list_1, bytes_1, bool_0)
        complex_0 = None
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.chmod(tuple_0, complex_0)
    except BaseException:
        pass

def test_case_5():
    try:
        shell_module_0 = module_0.ShellModule()
        float_0 = None
        str_0 = 'zAK@gZ'
        dict_0 = {str_0: float_0}
        shell_module_1 = module_0.ShellModule()
        int_0 = -214
        bool_0 = True
        str_1 = 'UZC'
        list_0 = [dict_0, float_0, shell_module_0, str_1]
        var_0 = shell_module_1.checksum(shell_module_1, *list_0)
        var_1 = shell_module_0.remove(dict_0)
        var_2 = shell_module_1.chown(int_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        float_0 = 1647.0
        dict_0 = {}
        var_0 = shell_module_0.wrap_for_exec(dict_0)
        shell_module_2 = module_0.ShellModule()
        var_1 = shell_module_0.exists(float_0)
        var_2 = shell_module_0.wrap_for_exec(float_0)
        str_0 = 'H'
        list_0 = [float_0, shell_module_1, shell_module_1]
        var_3 = shell_module_1.join_path(*list_0)
        int_0 = -86
        str_1 = '\n        Oerride post validation for the loop field, which is templated\n        specially in the TaskExecutor class when evaluating loops.\n        '
        var_4 = shell_module_0.expand_user(str_1)
        var_5 = shell_module_0.remove(int_0)
        var_6 = shell_module_1.get_remote_filename(str_1)
        var_7 = shell_module_0.expand_user(list_0)
        int_1 = -1589
        var_8 = shell_module_0.env_prefix()
        var_9 = shell_module_0.checksum(int_1)
        int_2 = -127
        var_10 = shell_module_1.build_module_command(int_2, str_0, str_0)
        bytes_0 = b'\x1c\x84\xbf7'
        var_11 = shell_module_1.set_user_facl(bytes_0, shell_module_0, shell_module_1)
    except BaseException:
        pass

def test_case_7():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.mkdtemp()
    except BaseException:
        pass

def test_case_8():
    try:
        shell_module_0 = module_0.ShellModule()
        bytes_0 = b'\x9d\xef\xc2\x8f\xbb\x0b\xea\x06'
        var_0 = shell_module_0.checksum(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -2999.83
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.wrap_for_exec(float_0)
        list_0 = [float_0, shell_module_0, shell_module_0]
        var_1 = shell_module_0.path_has_trailing_slash(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        shell_module_0 = module_0.ShellModule()
        list_0 = [shell_module_0, shell_module_0, shell_module_0, shell_module_0]
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.join_path(*list_0)
        var_1 = shell_module_0.join_path()
    except BaseException:
        pass

def test_case_11():
    try:
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.mkdtemp(shell_module_0, shell_module_0, shell_module_0)
    except BaseException:
        pass

def test_case_12():
    try:
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        float_0 = 1647.0
        dict_0 = {}
        var_0 = shell_module_0.wrap_for_exec(dict_0)
        var_1 = shell_module_0.exists(float_0)
        bool_0 = False
        set_0 = set()
        str_0 = '.`nI7i!Wv\x0cz9/6|V'
        var_2 = shell_module_1.build_module_command(bool_0, set_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '4Z-?,B9O'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.remove(str_0, str_0)
        shell_module_1 = module_0.ShellModule()
    except BaseException:
        pass

def test_case_14():
    try:
        shell_module_0 = module_0.ShellModule()
        float_0 = 1647.0
        dict_0 = {}
        var_0 = shell_module_0.wrap_for_exec(dict_0)
        shell_module_1 = module_0.ShellModule()
        int_0 = 394
        var_1 = shell_module_0.wrap_for_exec(int_0)
        var_2 = shell_module_0.exists(float_0)
        var_3 = shell_module_0.wrap_for_exec(float_0)
        str_0 = 'H'
        list_0 = [float_0, shell_module_0, shell_module_0]
        var_4 = shell_module_0.join_path(*list_0)
        shell_module_2 = module_0.ShellModule()
        int_1 = -86
        var_5 = shell_module_0.remove(int_1)
        list_1 = []
        str_1 = '<1.^X'
        var_6 = shell_module_0.get_remote_filename(str_1)
        var_7 = shell_module_0.expand_user(list_1)
        int_2 = -1589
        var_8 = shell_module_0.checksum(int_2)
        int_3 = -127
        str_2 = '--init-path'
        var_9 = shell_module_0.build_module_command(int_3, str_0, str_2)
        list_2 = [str_2]
        str_3 = ''
        var_10 = shell_module_1.build_module_command(list_2, shell_module_0, str_3)
        var_11 = shell_module_1.mkdtemp(list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\xe9'
        bool_0 = True
        tuple_0 = (bytes_0, bool_0)
        int_0 = 2025
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.mkdtemp(tuple_0, int_0, shell_module_0, int_0)
        complex_0 = None
        shell_module_2 = module_0.ShellModule()
        int_1 = 709
        var_1 = shell_module_2.expand_user(shell_module_2, int_1)
        bytes_1 = b'\x94EH\xa4b\x83\xec\xd39\xaa"\x0f\xbb'
        var_2 = shell_module_2.wrap_for_exec(bytes_1)
        shell_module_3 = module_0.ShellModule()
        var_3 = shell_module_3.get_remote_filename(complex_0)
    except BaseException:
        pass