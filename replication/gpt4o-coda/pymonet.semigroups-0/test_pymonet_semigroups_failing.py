# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        first_0 = None
        semigroup_0 = module_0.Semigroup(first_0)
        int_0 = 2421
        bool_0 = semigroup_0.__eq__(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -389
        all_0 = module_0.All(int_0)
        all_1 = all_0.concat(all_0)
        all_2 = all_0.concat(all_0)
        str_0 = '-\r\rNn"%X'
        one_0 = module_0.One(str_0)
        sum_0 = module_0.Sum(one_0)
        list_0 = [all_1]
        semigroup_0 = module_0.Semigroup(list_0)
        var_0 = semigroup_0.fold(sum_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n        Transform Lazy into Try with constructor_fn result.\n        Try will be successful only when constructor_fn not raise anything.\n\n        :returns: Try with constructor_fn result\n        :rtype: Try[A] | Try[Error]\n        '
        sum_0 = module_0.Sum(str_0)
        int_0 = -3578
        sum_1 = module_0.Sum(int_0)
        list_0 = None
        one_0 = module_0.One(list_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 799
        float_0 = 1619.05
        last_0 = module_0.Last(float_0)
        var_0 = last_0.concat(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        str_1 = '\n        If Maybe is empty or filterer returns False return default_value, in other case\n        return new instance of Maybe with the same value.\n\n        :param filterer:\n        :type filterer: Function(A) -> Boolean\n        :returns: copy of self when filterer returns True, in other case empty Maybe\n        :rtype: Maybe[A] | Maybe[None]\n        '
        map_0 = module_0.Map(str_1)
        var_0 = map_0.concat(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        int_0 = -1103
        list_0 = [bool_0, bool_0]
        one_0 = module_0.One(list_0)
        last_0 = module_0.Last(one_0)
        last_1 = module_0.Last(last_0)
        tuple_0 = (last_1,)
        min_0 = module_0.Min(tuple_0)
        str_0 = min_0.__str__()
        min_1 = module_0.Min(int_0)
        max_0 = module_0.Max(min_1)
        var_0 = max_0.concat(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = set()
        first_0 = None
        one_0 = module_0.One(first_0)
        tuple_0 = (one_0,)
        tuple_1 = (tuple_0,)
        all_0 = module_0.All(set_0)
        str_0 = all_0.__str__()
        all_1 = module_0.All(tuple_1)
        dict_0 = {}
        all_2 = module_0.All(dict_0)
        all_3 = all_2.concat(all_1)
        sum_0 = module_0.Sum(all_3)
        str_1 = sum_0.__str__()
        list_0 = []
        map_0 = module_0.Map(first_0)
        semigroup_0 = module_0.Semigroup(list_0)
        bool_0 = semigroup_0.__eq__(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -680
        dict_0 = {}
        one_0 = module_0.One(dict_0)
        int_1 = True
        str_0 = one_0.__str__()
        bool_0 = True
        semigroup_0 = module_0.Semigroup(bool_0)
        bytes_0 = None
        first_0 = module_0.First(bytes_0)
        last_0 = module_0.Last(first_0)
        first_1 = module_0.First(one_0)
        var_0 = first_1.concat(last_0)
        sum_0 = module_0.Sum(int_1)
        var_1 = one_0.concat(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -3664
        max_0 = module_0.Max(int_0)
        first_0 = module_0.First(max_0)
        tuple_0 = (first_0,)
        last_0 = module_0.Last(tuple_0)
        all_0 = None
        list_0 = [all_0, all_0, all_0]
        str_0 = 'u7R;!U^DBq\x0cRgybbU!'
        str_1 = last_0.__str__()
        one_0 = module_0.One(str_0)
        var_0 = one_0.concat(list_0)
        int_1 = 285
        first_1 = module_0.First(str_1)
        list_1 = []
        var_1 = one_0.concat(list_1)
        str_2 = first_0.__str__()
        all_1 = module_0.All(all_0)
        str_3 = all_0.__str__()
        bytes_0 = b''
        dict_0 = {bytes_0: int_1}
        map_0 = module_0.Map(dict_0)
        all_2 = all_1.concat(all_0)
        semigroup_0 = module_0.Semigroup(tuple_0)
        str_4 = 'dRFzhU.I{aV'
        sum_0 = module_0.Sum(str_4)
        str_5 = 'v+qj/T@FQlgp)Ct=As4q'
        sum_1 = module_0.Sum(str_5)
        sum_2 = sum_1.concat(sum_0)
        max_1 = module_0.Max(semigroup_0)
        var_2 = map_0.concat(first_1)
    except BaseException:
        pass