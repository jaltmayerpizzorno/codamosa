# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    str_0 = '\n        Transform Lazy into Try with constructor_fn result.\n        Try will be successful only when constructor_fn not raise anything.\n\n        :returns: Try with constructor_fn result\n        :rtype: Try[A] | Try[Error]\n        '
    sum_0 = module_0.Sum(str_0)

def test_case_1():
    str_0 = ' t:B=-'
    max_0 = module_0.Max(str_0)
    sum_0 = module_0.Sum(max_0)
    last_0 = module_0.Last(sum_0)
    str_1 = last_0.__str__()

def test_case_2():
    str_0 = '\n    Task are data-type for handle execution of functions (in lazy way)\n    transform results of this function and handle errors.\n    '
    float_0 = 248.035548
    last_0 = module_0.Last(float_0)
    str_1 = last_0.__str__()
    min_0 = module_0.Min(str_0)
    str_2 = 'H4$TC[(K'
    all_0 = module_0.All(str_2)
    str_3 = all_0.__str__()
    str_4 = '^1]Pw0'
    max_0 = module_0.Max(str_4)
    int_0 = -632
    map_0 = module_0.Map(int_0)
    all_1 = all_0.concat(all_0)
    str_5 = max_0.__str__()

def test_case_3():
    int_0 = -3664
    max_0 = module_0.Max(int_0)
    first_0 = module_0.First(max_0)
    tuple_0 = (first_0,)
    last_0 = module_0.Last(tuple_0)
    all_0 = None
    list_0 = [all_0, all_0, all_0]
    str_0 = 'u7R;!U^DBq\x0cRgybbU!'
    str_1 = last_0.__str__()
    one_0 = module_0.One(str_0)
    var_0 = one_0.concat(list_0)
    int_1 = 271
    sum_0 = module_0.Sum(int_1)
    str_2 = sum_0.__str__()
    bool_0 = True
    bool_1 = True
    var_1 = one_0.concat(bool_1)
    sum_1 = module_0.Sum(bool_0)
    str_3 = first_0.__str__()
    str_4 = one_0.__str__()
    bool_2 = True
    one_1 = module_0.One(bool_2)
    all_1 = module_0.All(int_0)
    str_5 = all_1.__str__()
    str_6 = sum_1.__str__()

def test_case_4():
    str_0 = '\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        '
    min_0 = module_0.Min(str_0)
    float_0 = 2796.664804
    list_0 = [float_0, min_0, str_0, float_0]
    last_0 = module_0.Last(list_0)
    bool_0 = True
    last_1 = module_0.Last(bool_0)
    sum_0 = module_0.Sum(last_1)
    tuple_0 = (sum_0,)
    one_0 = module_0.One(tuple_0)
    var_0 = one_0.concat(last_0)
    str_1 = min_0.__str__()
    min_1 = None
    one_1 = module_0.One(min_1)
    min_2 = module_0.Min(one_1)
    one_2 = module_0.One(last_0)

def test_case_5():
    str_0 = '%{Udy01 @]BOc<N8'
    int_0 = -2796
    first_0 = module_0.First(int_0)
    var_0 = first_0.concat(str_0)

def test_case_6():
    str_0 = '\n        Transform Box into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        '
    min_0 = module_0.Min(str_0)
    float_0 = 2796.664804
    list_0 = [float_0, min_0, str_0, float_0]
    last_0 = module_0.Last(list_0)
    bool_0 = True
    str_1 = last_0.__str__()
    last_1 = module_0.Last(bool_0)
    sum_0 = module_0.Sum(last_1)
    tuple_0 = (sum_0,)
    one_0 = module_0.One(tuple_0)
    var_0 = one_0.concat(last_0)
    str_2 = min_0.__str__()
    str_3 = min_0.__str__()
    first_0 = module_0.First(sum_0)
    str_4 = first_0.__str__()
    str_5 = one_0.__str__()
    bool_1 = True
    semigroup_0 = module_0.Semigroup(bool_1)
    one_1 = module_0.One(semigroup_0)
    map_0 = module_0.Map(float_0)
    all_0 = module_0.All(map_0)
    str_6 = all_0.__str__()
    str_7 = sum_0.__str__()

def test_case_7():
    bool_0 = False
    first_0 = module_0.First(bool_0)
    float_0 = 1830.551839
    max_0 = module_0.Max(float_0)
    var_0 = max_0.concat(first_0)

def test_case_8():
    int_0 = 119
    min_0 = module_0.Min(int_0)
    int_1 = -851
    one_0 = module_0.One(int_1)
    var_0 = min_0.concat(one_0)

def test_case_9():
    bool_0 = False
    first_0 = module_0.First(bool_0)
    one_0 = None
    var_0 = first_0.concat(one_0)
    float_0 = 1830.551839
    max_0 = module_0.Max(float_0)
    var_1 = max_0.concat(first_0)
    str_0 = first_0.__str__()

def test_case_10():
    str_0 = " 0'YWI ,vGev3?N"
    one_0 = module_0.One(str_0)
    str_1 = one_0.__str__()
    str_2 = '\t'
    str_3 = one_0.__str__()
    bool_0 = False
    max_0 = module_0.Max(bool_0)
    max_1 = module_0.Max(str_2)
    var_0 = max_0.concat(max_0)
    int_0 = -2603
    var_1 = one_0.concat(int_0)
    map_0 = module_0.Map(str_2)
    str_4 = map_0.__str__()
    str_5 = map_0.__str__()
    sum_0 = module_0.Sum(map_0)
    all_0 = module_0.All(sum_0)
    str_6 = all_0.__str__()
    str_7 = '#|I#%'
    max_2 = module_0.Max(str_7)
    list_0 = [str_2]
    map_1 = module_0.Map(list_0)

def test_case_11():
    int_0 = -3664
    max_0 = module_0.Max(int_0)
    first_0 = module_0.First(max_0)
    tuple_0 = (first_0,)
    last_0 = module_0.Last(tuple_0)
    all_0 = None
    list_0 = [all_0, all_0, all_0]
    str_0 = 'u7R;!U^DBq\x0cRgybbU!'
    str_1 = last_0.__str__()
    one_0 = module_0.One(str_0)
    var_0 = one_0.concat(list_0)
    first_1 = module_0.First(str_1)
    str_2 = first_0.__str__()
    all_1 = module_0.All(all_0)
    str_3 = all_0.__str__()
    dict_0 = {}
    str_4 = last_0.__str__()
    map_0 = module_0.Map(dict_0)
    all_2 = all_1.concat(all_0)
    semigroup_0 = module_0.Semigroup(tuple_0)
    str_5 = 'dRFzhU.I{aV'
    sum_0 = module_0.Sum(str_5)
    str_6 = 'v+qj/T@FQlgp)Ct=As4q'
    sum_1 = module_0.Sum(str_6)
    sum_2 = sum_1.concat(sum_0)
    semigroup_1 = module_0.Semigroup(last_0)
    max_1 = module_0.Max(first_1)
    var_1 = map_0.concat(list_0)

def test_case_12():
    int_0 = 119
    min_0 = module_0.Min(int_0)
    one_0 = module_0.One(int_0)
    var_0 = min_0.concat(one_0)