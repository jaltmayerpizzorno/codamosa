# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        float_0 = 1950.56033
        never_match_0 = module_0.NeverMatch()
        any_0 = never_match_0.validate(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = None
        list_1 = []
        one_of_0 = module_0.OneOf(list_1)
        any_0 = one_of_0.validate(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        field_0 = None
        list_0 = [field_0, field_0, field_0, field_0]
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        never_match_0 = module_0.NeverMatch()
        not_0 = module_0.Not(never_match_0)
        bool_0 = True
        str_0 = 'additionalProperties'
        field_0 = module_1.Field(title=str_0)
        any_0 = not_0.validate(never_match_0)
        list_0 = [field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        not_1 = module_0.Not(field_0)
        any_1 = all_of_0.validate(not_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        all_of_0 = module_0.AllOf(list_0)
        any_0 = all_of_0.validate(all_of_0)
        str_0 = 'b(]\x0bdNVt'
        str_1 = 'MY\x0c8RR?4b&66]sO'
        bool_0 = True
        any_1 = all_of_0.validate(list_0, bool_0)
        dict_0 = {str_0: any_0, str_0: list_0, str_1: list_0}
        never_match_0 = module_0.NeverMatch(**dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        field_0 = module_1.Field(description=str_0)
        dict_0 = {}
        if_then_else_0 = module_0.IfThenElse(field_0, **dict_0)
        never_match_0 = module_0.NeverMatch()
        any_0 = never_match_0.validate(if_then_else_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        str_0 = ''
        field_0 = module_1.Field(title=str_0)
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, field_0)
        any_0 = if_then_else_0.validate(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n    Raised by `typesystem.tokenize_json()` and `typesystem.tokenize_yaml()`.\n    '
        bool_0 = None
        field_0 = module_1.Field(description=str_0, allow_null=bool_0)
        not_0 = module_0.Not(field_0)
        tuple_0 = ()
        str_1 = 'allow_null'
        validation_error_0 = None
        str_2 = '\n    Always matches.\n    '
        str_3 = '9p5Z;O!^p{a@oVE4k/ch'
        str_4 = '"'
        dict_0 = {str_1: validation_error_0, str_2: str_3, str_4: tuple_0, str_1: str_3}
        if_then_else_0 = module_0.IfThenElse(field_0, field_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        str_0 = 'allow_null'
        validation_error_0 = None
        str_1 = '\n    Always matches.\n    '
        str_2 = '9p5Z;O!^p{a@oVE4k/ch'
        str_3 = '"'
        dict_0 = {str_0: validation_error_0, str_1: str_2, str_3: tuple_0, str_0: str_2}
        list_0 = []
        one_of_0 = module_0.OneOf(list_0)
        all_of_0 = module_0.AllOf(list_0, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\n    Raised by `typesystem.tokenize_json()` and `typesystem.tokenize_yaml()`.\n    '
        bool_0 = None
        field_0 = module_1.Field(description=str_0, allow_null=bool_0)
        not_0 = module_0.Not(field_0)
        str_1 = 'allow_null'
        validation_error_0 = None
        str_2 = '"'
        list_0 = [field_0]
        dict_0 = {str_1: str_2, str_2: validation_error_0}
        one_of_0 = module_0.OneOf(list_0, **dict_0)
    except BaseException:
        pass