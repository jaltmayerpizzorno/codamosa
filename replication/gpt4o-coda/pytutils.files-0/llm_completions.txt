

# Generated at 2024-06-03 05:14:25.784097
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:14:29.749064
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:14:36.498785
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:14:39.788033
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:14:43.005006
```python
    # Test reading from a file by line
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write('line1\nline2\nline3\n')

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunk
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:14:46.896997
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp('-', "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        os.environ['TEST_VAR'] = 'test_value'
        burp('~/test_$TEST_VAR.txt',

# Generated at 2024-06-03 05:14:52.321807
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    captured_output = io.StringIO()
    sys.stdout = captured_output
    try:
        burp("-", "Hello, Stdout!", allow_stdout=True)
        assert captured_output.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = sys.__stdout__

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    temp_filename = os.path.join(home_dir, "test_burp_file")
    try:
        burp("~/test_burp_file", "Hello,

# Generated at 2024-06-03 05:14:55.364155
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:14:57.756993
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        test_content = "Hello, World!"
        burp(temp_filename, test_content)
        with open(temp_filename, 'r') as f:
            assert f.read() == test_content

        # Test writing to stdout
        stdout_backup = sys.stdout
        sys.stdout = io.StringIO()
        burp('-', test_content)
        assert sys.stdout.getvalue() == test_content
    finally:
        sys.stdout = stdout_backup
        os.remove(temp_filename)
```

# Generated at 2024-06-03 05:15:01.329239
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=3))
    assert result == ['123', '456', '789', '0']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys

# Generated at 2024-06-03 05:15:08.199573
```python
    import io
    import unittest
    from unittest.mock import patch

    @patch('builtins.open', new_callable=unittest.mock.mock_open)
    def test_burp_write_to_file(mock_open):
        filename = 'testfile.txt'
        contents = 'Hello, World!'
        burp(filename, contents)
        mock_open.assert_called_once_with(filename, 'w')
        mock_open().write.assert_called_once_with(contents)

    @patch('sys.stdout', new_callable=io.StringIO)
    def test_burp_write_to_stdout(mock_stdout):
        filename = '-'
        contents = 'Hello, World!'
        burp(filename, contents)
        assert mock_stdout.getvalue() == contents

    @patch('os.path.expanduser', side_effect=lambda x: x.replace('~', '/home/user'))
    @patch('os.path.expandvars', side_effect=lambda x: x.replace('$HOME', '/home/user'))
    @patch('builtins.open

# Generated at 2024-06-03 05:15:11.672670
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:15:15.094403
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:15:19.505278
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    with tempfile.NamedTemporaryFile(dir=home_dir, delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(os.path.join("

# Generated at 2024-06-03 05:15:22.651926
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:15:25.778895
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        content = "Hello, World!"
        burp(temp_filename, content)
        
        with open(temp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    temp_filename = os.path.join("~", "test_burp.txt")
    os.environ["TEST_BURP"] = "test_burp_env.txt"


# Generated at 2024-06-03 05:15:29.594407
```python
    # Test reading from a file by line
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write("line1\nline2\nline3\n")

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunk
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:15:33.588739
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:15:36.596266
```python
    # Test reading from a file by line
    test_file = 'test_file.txt'
    with open(test_file, 'w') as f:
        f.write('line1\nline2\nline3\n')

    result = list(islurp(test_file))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunk
    result = list(islurp(test_file, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_file, 'r')
    result = list

# Generated at 2024-06-03 05:15:39.493636
```python
    # Test reading from a file by line
    test_filename = 'test_file.txt'
    test_content = 'line1\nline2\nline3\n'
    with open(test_filename, 'w') as f:
        f.write(test_content)
    
    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    
    # Test reading from a file by chunk
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"
    
    # Test reading from stdin
    sys.stdin = open

# Generated at 2024-06-03 05:15:45.633738
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_filename = tmp_file.name

    test_content = "Hello, World!"
    burp(tmp_filename, test_content)

    with open(tmp_filename, 'r') as f:
        assert f.read() == test_content

    os.remove(tmp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    burp('-', test_content)
    assert sys.stdout.getvalue() == test_content
    sys.stdout = stdout_backup

    # Test expanding user and vars
    test_content = "Hello, User!"
    home_dir = os.path.expanduser("~")
    test_filename = "~/test_burp.txt"
    burp(test_filename, test_content, expanduser=True, expandvars=True)

    with open(os.path.join(home_dir, "test_burp

# Generated at 2024-06-03 05:15:49.265401
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:15:52.290291
```python
    import io
    import unittest
    from unittest.mock import patch

    class TestBurp(unittest.TestCase):
        @patch('builtins.open', new_callable=unittest.mock.mock_open)
        def test_burp_to_file(self, mock_open):
            filename = 'testfile.txt'
            contents = 'Hello, World!'
            burp(filename, contents)
            mock_open.assert_called_once_with(filename, 'w')
            mock_open().write.assert_called_once_with(contents)

        @patch('sys.stdout', new_callable=io.StringIO)
        def test_burp_to_stdout(self, mock_stdout):
            filename = '-'
            contents = 'Hello, World!'
            burp(filename, contents)
            self.assertEqual(mock_stdout.getvalue(), contents)

        @patch('builtins.open', new_callable=unittest.mock.mock_open)
        def test_burp_with_expanduser(self, mock_open):
            filename = '~/testfile.txt'
            contents =

# Generated at 2024-06-03 05:15:55.593671
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:15:58.621142
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:16:02.425022
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:16:08.963993
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nli', 'ne3\n'], f"Expected ['line1', '\\nline', '2\\nli',

# Generated at 2024-06-03 05:16:12.200067
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_filename = tmp_file.name

    try:
        content = "Hello, World!"
        burp(tmp_filename, content)
        
        with open(tmp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(tmp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    test_filename = "~/test_burp_file"
    os.environ["TEST_BURP_VAR"] = "test_burp_var_value"
    test_filename_with_var

# Generated at 2024-06-03 05:16:15.953473
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:16:19.274849
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        content = "Hello, World!"
        burp(temp_filename, content)

        with open(temp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout_backup = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout_backup

    # Test expanding user and vars
    user_content = "User content"
    user_filename = "~/test_burp_file"
    os.environ['TEST_BURP_VAR'] = 'test_burp_var_value'
    var_filename = "$TEST_B

# Generated at 2024-06-03 05:16:27.477193
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:16:31.830558
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!", allow_stdout=True)
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    with tempfile.NamedTemporaryFile(dir=home_dir, delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp

# Generated at 2024-06-03 05:16:35.151252
```python
    # Test reading from a file by line
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write("line1\nline2\nline3\n")

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunk
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:16:38.100245
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nli', 'ne3\n'], f"Expected ['line1', '\\nline', '2\\nli',

# Generated at 2024-06-03 05:16:41.392125
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:16:44.409483
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    saved_stdout = sys.stdout
    try:
        out = io.StringIO()
        sys.stdout = out
        burp("-", "Hello, Stdout!", allow_stdout=True)
        assert out.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = saved_stdout

    # Test expanding user directory
    user_dir = os.path.expanduser("~")
    test_filename = os.path.join("~", "test_burp.txt")
    expanded_filename = os.path.join(user_dir, "test_b

# Generated at 2024-06-03 05:16:47.185002
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:16:53.125411
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user directory
    user_dir = os.path.expanduser("~")
    test_filename = os.path.join("~", "test_burp.txt")
    expanded_filename = os.path.join(user_dir, "test_burp.txt")
    try:
        bur

# Generated at 2024-06-03 05:16:56.981167
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    test_content = "Hello, World!"
    burp(temp_filename, test_content)

    with open(temp_filename, 'r') as f:
        assert f.read() == test_content

    os.remove(temp_filename)

    # Test writing to stdout
    old_stdout = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp('-', test_content)
        assert sys.stdout.getvalue() == test_content
    finally:
        sys.stdout = old_stdout

    # Test expanding user and vars
    temp_dir = tempfile.mkdtemp()
    temp_filename = os.path.join(temp_dir, 'testfile')
    os.environ['TEST_DIR'] = temp_dir

    burp('~/testfile', test_content, expanduser=True, expandvars=False)
   

# Generated at 2024-06-03 05:16:59.613016
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        content = "Hello, World!"
        burp(temp_filename, content)
        
        with open(temp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    temp_filename = os.path.join("~", "test_burp_file")
    os.environ["TEST_BURP_VAR"] = "test_burp_file"


# Generated at 2024-06-03 05:17:04.895777
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:17:07.763109
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nli', 'ne3\n'], f"Expected ['line1', '\\nline', '2\\nli',

# Generated at 2024-06-03 05:17:11.732671
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    with tempfile.NamedTemporaryFile(dir=home_dir, delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp("~/" + os.path

# Generated at 2024-06-03 05:17:14.804490
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        os.environ['TEST_VAR'] = 'test_value'
        burp(f"{temp_filename}_$TEST_VAR

# Generated at 2024-06-03 05:17:17.464348
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_filename = tmp_file.name

    try:
        content = "Hello, World!"
        burp(tmp_filename, content)
        
        with open(tmp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(tmp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    test_filename = "~/test_burp_file"
    os.environ["TEST_BURP_VAR"] = "test_burp_var_value"
    test_filename_with_var

# Generated at 2024-06-03 05:17:20.448783
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nli', 'ne3\n'], f"Expected ['line1', '\\nline', '2\\nli',

# Generated at 2024-06-03 05:17:27.016159
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    captured_output = io.StringIO()
    sys.stdout = captured_output
    try:
        burp("-", "Hello, Stdout!")
        assert captured_output.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = sys.__stdout__

    # Test expanding user and vars
    temp_dir = tempfile.mkdtemp()
    try:
        os.environ['TEST_VAR'] = 'test_value'
        burp(os.path.join(temp_dir, '$TEST_VAR.txt'), "Hello, Env Vars!")
        with

# Generated at 2024-06-03 05:17:30.039196
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:17:33.384020
```python
    import io
    import unittest
    from unittest.mock import patch

    @patch('builtins.open', new_callable=unittest.mock.mock_open)
    def test_burp_write_to_file(mock_open):
        filename = 'testfile.txt'
        contents = 'Hello, World!'
        burp(filename, contents)
        mock_open.assert_called_once_with(filename, 'w')
        mock_open().write.assert_called_once_with(contents)

    @patch('sys.stdout', new_callable=io.StringIO)
    def test_burp_write_to_stdout(mock_stdout):
        contents = 'Hello, World!'
        burp('-', contents)
        assert mock_stdout.getvalue() == contents

    @patch('os.path.expanduser', side_effect=lambda x: x.replace('~', '/home/user'))
    @patch('os.path.expandvars', side_effect=lambda x: x.replace('$HOME', '/home/user'))
    @patch('builtins.open', new_callable=unittest

# Generated at 2024-06-03 05:17:36.798767
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:17:43.288180
```python
    # Test reading from a file by line
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write("line1\nline2\nline3\n")

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunk
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:17:47.071910
```python
    # Test reading from a file by lines
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write('line1\nline2\nline3\n')

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunks
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:17:49.931744
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        test_content = "Hello, World!"
        burp(temp_filename, test_content)
        with open(temp_filename, 'r') as f:
            assert f.read() == test_content

        # Test writing to stdout
        sys_stdout = sys.stdout
        sys.stdout = io.StringIO()
        try:
            burp('-', test_content)
            assert sys.stdout.getvalue() == test_content
        finally:
            sys.stdout = sys_stdout

        # Test expanding user and vars
        user_dir = os.path.expanduser("~")
        burp("~/test_burp.txt", test_content)
        with open(os.path.join(user_dir, "test_burp.txt"), 'r') as f:
            assert f.read() == test_content
        os.remove(os

# Generated at 2024-06-03 05:17:53.655388
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        content = "Hello, World!"
        burp(temp_filename, content)
        
        with open(temp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    temp_filename = os.path.join("~", "test_burp_file")
    os.environ["TEST_BURP_VAR"] = "test_burp_file"


# Generated at 2024-06-03 05:17:57.167135
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!", allow_stdout=True)
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    temp_filename = os.path.join(home_dir, "test_burp_file")
    try:
        burp("~/test_burp_file", "Hello, Home

# Generated at 2024-06-03 05:18:05.101215
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:18:09.433631
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:18:14.095895
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    temp_filename = os.path.join(home_dir, "test_burp.txt")
    try:
        burp("~/test_burp.txt", "Hello, Home!")
        with open

# Generated at 2024-06-03 05:18:17.156690
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    saved_stdout = sys.stdout
    try:
        out = io.StringIO()
        sys.stdout = out
        burp("-", "Hello, Stdout!", allow_stdout=True)
        assert out.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = saved_stdout

    # Test expanding user and vars
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        os.environ['TEST_VAR'] = 'test'
        burp(f

# Generated at 2024-06-03 05:18:21.589019
```python
    import io
    import unittest
    from unittest.mock import patch

    @patch('builtins.open', new_callable=unittest.mock.mock_open)
    def test_burp_write_to_file(mock_open):
        filename = 'testfile.txt'
        contents = 'Hello, World!'
        burp(filename, contents)
        mock_open.assert_called_once_with(filename, 'w')
        mock_open().write.assert_called_once_with(contents)

    @patch('sys.stdout', new_callable=io.StringIO)
    def test_burp_write_to_stdout(mock_stdout):
        filename = '-'
        contents = 'Hello, World!'
        burp(filename, contents)
        assert mock_stdout.getvalue() == contents

    @patch('os.path.expanduser', side_effect=lambda x: x.replace('~', '/home/user'))
    @patch('os.path.expandvars', side_effect=lambda x: x.replace('$HOME', '/home/user'))
    @patch('builtins.open

# Generated at 2024-06-03 05:18:28.084794
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=3))
    assert result == ['123', '456', '789', '0'], f"Expected ['123', '456', '789', '0'], but got {result}"
    os.remove('testfile.txt')



# Generated at 2024-06-03 05:18:31.213393
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:18:34.686018
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user directory
    user_dir = os.path.expanduser("~")
    test_filename = os.path.join("~", "test_burp.txt")
    expanded_filename = os.path.join(user_dir, "test_burp.txt")
    try:
        bur

# Generated at 2024-06-03 05:18:41.174107
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:18:44.302802
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_filename = tmp_file.name

    try:
        content = "Hello, World!"
        burp(tmp_filename, content)

        with open(tmp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(tmp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    test_filename = "~/test_burp_file"
    os.environ["TEST_BURP_VAR"] = "test_burp_var_value"
    test_filename_with_var =

# Generated at 2024-06-03 05:18:48.587329
```python
    # Test reading from a file by lines
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write('line1\nline2\nline3\n')

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunks
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:18:51.666995
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_filename = tmp_file.name

    try:
        content = "Hello, World!"
        burp(tmp_filename, content)
        
        with open(tmp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(tmp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    test_filename = "~/test_burp.txt"
    os.environ["TEST_BURP"] = "test_burp_env.txt"
    test_filename_env = "$

# Generated at 2024-06-03 05:18:54.874385
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nli', 'ne3\n'], f"Expected ['line1', '\\nline', '2\\nli',

# Generated at 2024-06-03 05:18:59.090124
```python
    import io
    import unittest
    from unittest.mock import patch

    @patch('builtins.open', new_callable=unittest.mock.mock_open)
    def test_burp_write_to_file(mock_open):
        filename = 'testfile.txt'
        contents = 'Hello, World!'
        burp(filename, contents)
        mock_open.assert_called_once_with(filename, 'w')
        mock_open().write.assert_called_once_with(contents)

    @patch('sys.stdout', new_callable=io.StringIO)
    def test_burp_write_to_stdout(mock_stdout):
        filename = '-'
        contents = 'Hello, World!'
        burp(filename, contents)
        assert mock_stdout.getvalue() == contents

    @patch('os.path.expanduser', side_effect=lambda x: x.replace('~', '/home/user'))
    @patch('os.path.expandvars', side_effect=lambda x: x.replace('$HOME', '/home/user'))
    @patch('builtins.open

# Generated at 2024-06-03 05:19:02.253385
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:19:12.716855
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        content = "Hello, World!"
        burp(temp_filename, content)
        
        with open(temp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout_backup = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout_backup

    # Test expanding user and vars
    user_content = "User content"
    user_filename = "~/test_burp_file"
    os.environ['TEST_BURP_VAR'] = 'test_burp_var_value'
    var_content = "Var

# Generated at 2024-06-03 05:19:20.055522
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:19:24.086130
```python
    import io
    import unittest
    from unittest.mock import patch

    class TestBurp(unittest.TestCase):
        @patch('builtins.open', new_callable=unittest.mock.mock_open)
        def test_burp_to_file(self, mock_open):
            filename = 'testfile.txt'
            contents = 'Hello, World!'
            burp(filename, contents)
            mock_open.assert_called_once_with(filename, 'w')
            mock_open().write.assert_called_once_with(contents)

        @patch('sys.stdout', new_callable=io.StringIO)
        def test_burp_to_stdout(self, mock_stdout):
            filename = '-'
            contents = 'Hello, World!'
            burp(filename, contents)
            self.assertEqual(mock_stdout.getvalue(), contents)

        @patch('builtins.open', new_callable=unittest.mock.mock_open)
        def test_burp_with_expanduser(self, mock_open):
            filename = '~/testfile.txt'
            contents =

# Generated at 2024-06-03 05:19:28.513651
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:19:31.460276
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!", allow_stdout=True)
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        os.environ['TEST_VAR'] = 'test_value'
        burp(f"~/{

# Generated at 2024-06-03 05:19:35.261306
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:19:38.292291
```python
    # Test reading from a file by line
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write('line1\nline2\nline3\n')

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunk
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:19:44.633611
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:19:47.594159
def test_burp():
    import tempfile
    import os

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        content = "Hello, World!"
        burp(temp_filename, content)

        with open(temp_filename, 'r') as f:
            assert f.read() == content

    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    from io import StringIO
    sys_stdout = sys.stdout
    try:
        sys.stdout = StringIO()
        burp('-', content)
        assert sys.stdout.getvalue() == content
    finally:
        sys.stdout = sys_stdout

    # Test expanding user and vars
    temp_dir = tempfile.mkdtemp()
    try:
        os.environ['TEST_VAR'] = 'test_value'
        temp_filename = os.path.join(temp_dir, '${TEST_VAR}_file.txt')
        burp(temp

# Generated at 2024-06-03 05:19:50.628678
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    with tempfile.NamedTemporaryFile(delete=False, dir=home_dir) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello,

# Generated at 2024-06-03 05:20:00.384282
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:20:03.399221
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout

    # Test expanding user and vars
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        os.environ['TEST_VAR'] = 'test'
        burp(f"{temp_filename}_$TEST_VAR", "Hello

# Generated at 2024-06-03 05:20:06.506477
```python
    # Test reading from a file by line
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write('line1\nline2\nline3\n')

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunk
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:20:09.338149
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:20:13.210472
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:20:18.313438
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:20:21.810309
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    saved_stdout = sys.stdout
    try:
        out = io.StringIO()
        sys.stdout = out
        burp("-", "Hello, Stdout!", allow_stdout=True)
        assert out.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = saved_stdout

    # Test expanding user directory
    user_dir = os.path.expanduser("~")
    test_filename = os.path.join("~", "test_burp.txt")
    expanded_filename = os.path.join(user_dir, "test_b

# Generated at 2024-06-03 05:20:24.565717
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=3))
    assert result == ['123', '456', '789', '0'], f"Expected ['123', '456', '789', '0'], but got {result}"
    os.remove('testfile.txt')



# Generated at 2024-06-03 05:20:27.701989
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:20:31.523318
```python
    import io
    import unittest
    from unittest.mock import patch

    class TestBurp(unittest.TestCase):
        @patch('builtins.open', new_callable=unittest.mock.mock_open)
        def test_burp_to_file(self, mock_open):
            filename = 'testfile.txt'
            contents = 'Hello, World!'
            burp(filename, contents)
            mock_open.assert_called_once_with(filename, 'w')
            mock_open().write.assert_called_once_with(contents)

        @patch('sys.stdout', new_callable=io.StringIO)
        def test_burp_to_stdout(self, mock_stdout):
            filename = '-'
            contents = 'Hello, World!'
            burp(filename, contents)
            self.assertEqual(mock_stdout.getvalue(), contents)

        @patch('builtins.open', new_callable=unittest.mock.mock_open)
        def test_burp_with_expanduser(self, mock_open):
            filename = '~/testfile.txt'
            contents =

# Generated at 2024-06-03 05:20:44.584037
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:20:49.635519
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp('-', "Hello, Stdout!", allow_stdout=True)
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user directory
    user_dir = os.path.expanduser("~")
    test_filename = os.path.join("~", "test_burp.txt")
    expanded_filename = os.path.join(user_dir, "test_burp.txt")
   

# Generated at 2024-06-03 05:20:52.720761
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:20:55.160714
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        tmp_filename = tmp_file.name
    try:
        burp(tmp_filename, "Hello, World!")
        with open(tmp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(tmp_filename)

    # Test writing to stdout
    captured_output = io.StringIO()
    sys.stdout = captured_output
    try:
        burp("-", "Hello, Stdout!")
        assert captured_output.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = sys.__stdout__
```

# Generated at 2024-06-03 05:20:58.928189
```python
    # Test reading from a file by lines
    test_filename = 'test_file.txt'
    with open(test_filename, 'w') as f:
        f.write('line1\nline2\nline3\n')

    result = list(islurp(test_filename))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"

    # Test reading from a file by chunks
    result = list(islurp(test_filename, iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin', 'e3\\n'], but got {result}"

    # Test reading from stdin
    sys.stdin = open(test_filename, 'r')
    result = list

# Generated at 2024-06-03 05:21:01.598129
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:21:04.989677
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:21:10.582924
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=3))
    assert result == ['123', '456', '789', '0'], f"Expected ['123', '456', '789', '0'], but got {result}"
    os.remove('testfile.txt')



# Generated at 2024-06-03 05:21:13.873426
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=3))
    assert result == ['123', '456', '789', '0'], f"Expected ['123', '456', '789', '0'], but got {result}"
    os.remove('testfile.txt')



# Generated at 2024-06-03 05:21:16.909677
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:21:31.133802
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        os.environ['TEST_VAR'] = 'test_value'
        burp(f"{temp_filename}_$TEST_VAR

# Generated at 2024-06-03 05:21:34.384937
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    home_dir = os.path.expanduser("~")
    temp_filename = os.path.join(home_dir, "test_burp_file")
    try:
        burp("~/test_burp_file", "Hello, Home!")
        with open

# Generated at 2024-06-03 05:21:37.387747
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    captured_output = io.StringIO()
    sys.stdout = captured_output
    try:
        burp("-", "Hello, Stdout!")
        assert captured_output.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = sys.__stdout__

    # Test expanding user directory
    user_dir = os.path.expanduser("~")
    test_filename = os.path.join("~", "test_burp.txt")
    expanded_filename = os.path.join(user_dir, "test_burp.txt")
    try:
       

# Generated at 2024-06-03 05:21:40.850911
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        test_content = "Hello, World!"
        burp(temp_filename, test_content)
        with open(temp_filename, 'r') as f:
            assert f.read() == test_content

        # Test writing to stdout
        sys_stdout = sys.stdout
        sys.stdout = io.StringIO()
        try:
            burp('-', test_content)
            assert sys.stdout.getvalue() == test_content
        finally:
            sys.stdout = sys_stdout

        # Test expanding user and vars
        os.environ['TEST_VAR'] = 'test'
        user_path = os.path.expanduser('~')
        burp('~/test_$TEST_VAR.txt', test_content, expanduser=True, expandvars=True)
        with open(f'{user_path}/test_test.txt', '

# Generated at 2024-06-03 05:21:44.595941
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:21:48.057166
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:21:51.968281
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:21:55.137457
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout_backup = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!", allow_stdout=True)
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout_backup

    # Test expanding user and vars
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        os.environ['TEST_VAR'] = 'test_value'
        burp(f"{temp_filename

# Generated at 2024-06-03 05:21:58.034706
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n']

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90']

    # Test reading from stdin
    import io
    sys.stdin = io.StringIO('stdin line1\nstdin line2\n')
    result = list(islurp('-', allow_stdin=True))
    assert result == ['stdin line1\n', 'stdin line2\n']
    sys.stdin = sys.__

# Generated at 2024-06-03 05:22:00.791758
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:22:25.829815
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        test_content = "Hello, World!"
        burp(temp_filename, test_content)
        
        with open(temp_filename, 'r') as f:
            assert f.read() == test_content

    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    saved_stdout = sys.stdout
    try:
        out = io.StringIO()
        sys.stdout = out
        burp('-', "Hello, Stdout!", allow_stdout=True)
        assert out.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = saved_stdout

    # Test expanding user and vars
    test_content = "User and Vars"
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:


# Generated at 2024-06-03 05:22:28.805444
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:22:32.598941
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=3))
    assert result == ['123', '456', '789', '0'], f"Expected ['123', '456', '789', '0'], but got {result}"
    os.remove('testfile.txt')



# Generated at 2024-06-03 05:22:35.824352
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    stdout = sys.stdout
    sys.stdout = io.StringIO()
    try:
        burp("-", "Hello, Stdout!")
        assert sys.stdout.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = stdout

    # Test expanding user and vars
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        os.environ['TEST_VAR'] = 'test'
        burp(f"{temp_filename}_$TEST_VAR", "Hello

# Generated at 2024-06-03 05:22:38.949921
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    captured_output = io.StringIO()
    sys.stdout = captured_output
    try:
        burp("-", "Hello, Stdout!")
        assert captured_output.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = sys.__stdout__

    # Test expanding user and vars
    temp_dir = tempfile.mkdtemp()
    try:
        os.environ['TEST_VAR'] = 'test_value'
        burp(os.path.join(temp_dir, "${TEST_VAR}_file.txt"), "Hello, Env Vars!",

# Generated at 2024-06-03 05:22:42.689722
```python
    # Test reading from a file by lines
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunks
    with open('testfile.txt', 'w') as f:
        f.write('1234567890')
    result = list(islurp('testfile.txt', iter_by=4))
    assert result == ['1234', '5678', '90'], f"Expected ['1234', '5678', '90'], but got {result}"
    os.remove('testfile.txt')

    #

# Generated at 2024-06-03 05:22:45.435979
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:22:47.574252
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name
    try:
        burp(temp_filename, "Hello, World!")
        with open(temp_filename, 'r') as f:
            assert f.read() == "Hello, World!"
    finally:
        os.remove(temp_filename)

    # Test writing to stdout
    captured_output = io.StringIO()
    sys.stdout = captured_output
    try:
        burp('-', "Hello, Stdout!")
        assert captured_output.getvalue() == "Hello, Stdout!"
    finally:
        sys.stdout = sys.__stdout__
```

# Generated at 2024-06-03 05:22:50.555180
```python
    # Test reading from a file by line
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt'))
    assert result == ['line1\n', 'line2\n', 'line3\n'], f"Expected ['line1\\n', 'line2\\n', 'line3\\n'], but got {result}"
    os.remove('testfile.txt')

    # Test reading from a file by chunk
    with open('testfile.txt', 'w') as f:
        f.write('line1\nline2\nline3\n')
    result = list(islurp('testfile.txt', iter_by=5))
    assert result == ['line1', '\nline', '2\nlin', 'e3\n'], f"Expected ['line1', '\\nline', '2\\nlin',

# Generated at 2024-06-03 05:22:54.514875
```python
    import io
    import unittest
    from unittest.mock import patch

    # Test writing to a file
    with patch('builtins.open', unittest.mock.mock_open()) as mock_file:
        burp('testfile.txt', 'Hello, World!')
        mock_file.assert_called_once_with('testfile.txt', 'w')
        mock_file().write.assert_called_once_with('Hello, World!')

    # Test writing to stdout
    with patch('sys.stdout', new_callable=io.StringIO) as mock_stdout:
        burp('-', 'Hello, World!')
        assert mock_stdout.getvalue() == 'Hello, World!'

    # Test expanding user and vars
    with patch('os.path.expanduser', return_value='/home/user/testfile.txt') as mock_expanduser, \
         patch('os.path.expandvars', return_value='/home/user/testfile.txt') as mock_expandvars, \
         patch('builtins.open', unittest.mock.mock_open

# Generated at 2024-06-03 05:24:19.173692
```python
    import io
    import tempfile

    # Test writing to a file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_filename = temp_file.name

    try:
        test_content = "Hello, World!"
        burp(temp_filename, test_content)
        with open(temp_filename, 'r') as f:
            assert f.read() == test_content

        # Test writing to stdout
        sys_stdout = sys.stdout
        sys.stdout = io.StringIO()
        try:
            burp('-', test_content)
            assert sys.stdout.getvalue() == test_content
        finally:
            sys.stdout = sys_stdout

        # Test expanding user and vars
        home_dir = os.path.expanduser("~")
        burp("~/test_burp.txt", test_content)
        with open(os.path.join(home_dir, "test_burp.txt"), 'r') as f:
            assert f.read() == test_content
        os.remove(os