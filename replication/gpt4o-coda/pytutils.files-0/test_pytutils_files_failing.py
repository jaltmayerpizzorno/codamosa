# Automatically generated by Pynguin.
import pytutils.files as module_0

def test_case_0():
    try:
        int_0 = 600
        str_0 = "\n        :param str prefix: Prefix to add/remove from keys.\n        :param collections.MutableMapping mapping: Dict-like object to wrap\n        :param bool fancy_repr: If True, show fancy repr, otherwise just show dict's\n        :param bool dictify_repr: If True, cast mapping to a dict on repr\n        "
        var_0 = module_0.burp(int_0, int_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -570
        str_0 = 'YTZ'
        var_0 = module_0.burp(str_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xe6\x1d\x96\x0f\x10\xaa\x9e\xd1\t\x01\x16\xd3\xf4\x9a\x01\xd0s1'
        bool_0 = False
        str_0 = '>R>\t5'
        set_0 = {str_0, bytes_0}
        complex_0 = None
        str_1 = 'search'
        var_0 = module_0.burp(bytes_0, bool_0, str_0, set_0, complex_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'line1\nline2line63\n'
        var_0 = module_0.islurp(str_0)
        var_1 = list(var_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '-'
        bool_0 = True
        var_0 = module_0.islurp(str_0, bool_0)
        var_1 = list(var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xe6\x1d\x96\x0f\x10\xaa\x9e\xd1\t\x01\x16\xd3\xf4\x9a\x01\xd0s1'
        bool_0 = False
        str_0 = '>R>\t5'
        set_0 = {str_0, bytes_0}
        complex_0 = None
        str_1 = ''
        var_0 = module_0.burp(bytes_0, bool_0, str_0, set_0, complex_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\x0b%4/1R\t96|r42b^;I#'
        tuple_0 = None
        bytes_0 = b'5D$\x97\xad\xff\x1aiE\x80}7'
        tuple_1 = (str_0, tuple_0, bytes_0, str_0)
        var_0 = module_0.islurp(str_0, tuple_1)
        var_1 = module_0.islurp(bytes_0, tuple_1, str_0, str_0, tuple_0)
        var_2 = list(var_1)
    except BaseException:
        pass