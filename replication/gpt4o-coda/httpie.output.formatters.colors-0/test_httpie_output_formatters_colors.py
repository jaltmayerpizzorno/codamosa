# Automatically generated by Pynguin.
import httpie.output.formatters.colors as module_0
import httpie.context as module_1

def test_case_0():
    simplified_h_t_t_p_lexer_0 = module_0.SimplifiedHTTPLexer()

def test_case_1():
    str_0 = '\n    The same as --print, -p but applies only to intermediary requests/responses\n    (such as redirects) when their inclusion is enabled with --all. If this\n    options is not specified, then they are formatted the same way as the final\n    response.\n\n    '
    optional_0 = module_0.get_lexer(str_0)

def test_case_2():
    str_0 = 'text/plain'
    bool_0 = True
    optional_0 = module_0.get_lexer(str_0, bool_0, str_0)

def test_case_3():
    str_0 = 'sw+$'
    str_1 = 'RCM/&6#m0OKymNcp'
    optional_0 = module_0.get_lexer(str_1, str_0)
    environment_0 = module_1.Environment()

def test_case_4():
    str_0 = '\\s_/\x0baqJ\\c\ngoyE+'
    optional_0 = module_0.get_lexer(str_0)

def test_case_5():
    str_0 = 'RCM/&6#m0OKymNcp'
    int_0 = 1021
    list_0 = [int_0]
    bytes_0 = b'4dY'
    optional_0 = module_0.get_lexer(str_0, list_0, bytes_0)

def test_case_6():
    str_0 = 'application/json'
    optional_0 = module_0.get_lexer(str_0)
    str_1 = 'text/plain'
    str_2 = 'text/html'
    bool_0 = True
    optional_1 = module_0.get_lexer(str_1, bool_0, str_2)

def test_case_7():
    str_0 = 'application/json'
    optional_0 = module_0.get_lexer(str_0)
    str_1 = 'text/plain'
    optional_1 = module_0.get_lexer(str_1)
    str_2 = 'text/html'
    optional_2 = module_0.get_lexer(str_2)
    bool_0 = True
    str_3 = '{"key": "value"}'
    optional_3 = module_0.get_lexer(str_1, bool_0, str_3)

def test_case_8():
    str_0 = 'format_options'
    dict_0 = {str_0: str_0, str_0: str_0}
    environment_0 = module_1.Environment()
    color_formatter_0 = module_0.ColorFormatter(environment_0, **dict_0)

def test_case_9():
    str_0 = 'T4'
    environment_0 = module_1.Environment()
    str_1 = 'fx%VT,xM~Cogu%,'
    str_2 = 'format_options'
    dict_0 = {str_2: str_0, str_2: str_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, **dict_0)
    type_0 = color_formatter_0.get_style_class(str_1)
    str_3 = 'c0/IL6oltt3C|lk;O%'
    optional_0 = color_formatter_0.get_lexer_for_body(str_3, str_1)
    str_4 = color_formatter_0.format_headers(str_2)
    str_5 = color_formatter_0.format_body(str_1, str_3)
    environment_1 = module_1.Environment()
    solarized256_style_0 = module_0.Solarized256Style()

def test_case_10():
    environment_0 = module_1.Environment()
    str_0 = 'format_options'
    dict_0 = {str_0: str_0, str_0: environment_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, **dict_0)
    str_1 = 'c0/IL6oltt3C|lk;O%'
    str_2 = color_formatter_0.format_headers(str_0)
    str_3 = color_formatter_0.format_body(str_0, str_1)

def test_case_11():
    environment_0 = module_1.Environment()
    str_0 = 'format_options'
    dict_0 = {str_0: str_0, str_0: environment_0}
    color_formatter_0 = module_0.ColorFormatter(environment_0, **dict_0)
    str_1 = 'c0/IL6oltt3C|lk;O%'
    str_2 = color_formatter_0.format_body(str_0, str_1)