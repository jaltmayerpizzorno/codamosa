# Automatically generated by Pynguin.
import httpie.context as module_0
import httpie.output.formatters.colors as module_1

def test_case_0():
    try:
        environment_0 = None
        environment_1 = module_0.Environment(environment_0)
        color_formatter_0 = module_1.ColorFormatter(environment_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "i0<\\MEoE';"
        optional_0 = module_1.get_lexer(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ap,Tlication/j%on'
        set_0 = set()
        optional_0 = module_1.get_lexer(str_0, set_0)
        optional_1 = module_1.get_lexer(str_0)
        str_1 = 'applictiwon/xml'
        dict_0 = {}
        solarized256_style_0 = module_1.Solarized256Style(**dict_0)
        optional_2 = module_1.get_lexer(str_1)
        bool_0 = True
        str_2 = 'P,t\tGI^?6'
        simplified_h_t_t_p_lexer_0 = module_1.SimplifiedHTTPLexer()
        optional_3 = module_1.get_lexer(str_1, bool_0, str_2)
        environment_0 = module_0.Environment()
        environment_1 = module_0.Environment()
        str_3 = 'Tj?P!'
        dict_1 = {str_3: str_0, str_0: str_1}
        color_formatter_0 = module_1.ColorFormatter(environment_1, **dict_1)
    except BaseException:
        pass

def test_case_3():
    try:
        environment_0 = module_0.Environment()
        str_0 = 'format_options'
        dict_0 = {str_0: str_0, str_0: str_0}
        bool_0 = False
        color_formatter_0 = module_1.ColorFormatter(environment_0, str_0, bool_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'T4'
        str_1 = "46l/>e70Lq@-P%'2Ds_"
        simplified_h_t_t_p_lexer_0 = module_1.SimplifiedHTTPLexer()
        int_0 = 4
        list_0 = [int_0]
        bytes_0 = b'4dY'
        optional_0 = module_1.get_lexer(str_1, list_0, bytes_0)
        environment_0 = module_0.Environment()
        str_2 = 'fx%VT,xM~Cogu%,'
        str_3 = 'format_options'
        dict_0 = {str_3: str_1, str_3: str_0}
        color_formatter_0 = module_1.ColorFormatter(environment_0, **dict_0)
        type_0 = color_formatter_0.get_style_class(str_2)
        str_4 = 'c0/IL6oltt3Ck;O%'
        optional_1 = module_1.get_lexer(str_4, str_3, simplified_h_t_t_p_lexer_0)
    except BaseException:
        pass