

# Generated at 2024-06-01 12:54:08.018574
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int("10", 100) == 10
    assert pct_to_int("10%", 10, min_value=2) == 2
    assert pct_to_int("5%", 100, min_value=2) == 5
```

# Generated at 2024-06-01 12:54:10.088084
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']
```

# Generated at 2024-06-01 12:54:12.750321
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
```

# Generated at 2024-06-01 12:54:15.370158
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int("10", 100) == 10
    assert pct_to_int("10%", 100, min_value=5) == 10
    assert pct_to_int("0%", 100, min_value=5) == 5
```

# Generated at 2024-06-01 12:54:18.486263
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int("10", 100) == 10
    assert pct_to_int("10%", 10, min_value=2) == 2
    assert pct_to_int("5%", 100, min_value=10) == 10
```

# Generated at 2024-06-01 12:54:20.918129
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int(0, 100) == 0
    assert pct_to_int("invalid%", 100) == 1
    assert pct_to_int("50%", 200, min_value=10) == 100
    assert pct_to_int("0%", 100, min_value=10) == 10
```

# Generated at 2024-06-01 12:54:23.437173
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int("10", 100) == 10
    assert pct_to_int("10%", 10, min_value=2) == 2
    assert pct_to_int("0%", 10, min_value=2) == 2
```

# Generated at 2024-06-01 12:54:26.407619
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int("10", 100) == 10
    assert pct_to_int("10%", 10, min_value=2) == 2
    assert pct_to_int("5%", 100, min_value=10) == 10
```

# Generated at 2024-06-01 12:54:30.288016
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int("10%", 100, min_value=5) == 10
    assert pct_to_int("0%", 100, min_value=5) == 5
    assert pct_to_int(0, 100, min_value=5) == 0
```

# Generated at 2024-06-01 12:54:32.335234
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int(0, 100) == 0
    assert pct_to_int(5, 100, min_value=5) == 5
    assert pct_to_int("5%", 100, min_value=5) == 5
```

# Generated at 2024-06-01 12:54:40.758109
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
```

# Generated at 2024-06-01 12:54:44.318432
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 12:54:46.315209
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int(0, 100) == 0
    assert pct_to_int(5, 50) == 5
```

# Generated at 2024-06-01 12:54:48.841157
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int(0, 100) == 0
    assert pct_to_int(5, 100, min_value=5) == 5
```

# Generated at 2024-06-01 12:54:51.613076

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

# Generated at 2024-06-01 12:54:53.675220

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:54:56.435090

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:54:58.444745
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
```

# Generated at 2024-06-01 12:55:00.681596
```python
    assert pct_to_int("50%", 200) == 100
    assert pct_to_int("25%", 400) == 100
    assert pct_to_int("0%", 100) == 1
    assert pct_to_int("100%", 50) == 50
    assert pct_to_int("10%", 0) == 1
    assert pct_to_int(10, 100) == 10
    assert pct_to_int("10", 100) == 10
    assert pct_to_int("10%", 10, min_value=2) == 2
    assert pct_to_int("5%", 100, min_value=10) == 10
```

# Generated at 2024-06-01 12:55:02.819227
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3
            self.d = 4

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2, 'd': 4}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1, 'd': 4}
```

# Generated at 2024-06-01 12:55:20.794215

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

# Generated at 2024-06-01 12:55:23.284481

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:55:25.529655
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']
```

# Generated at 2024-06-01 12:55:28.795648

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:55:30.889385
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']
```

# Generated at 2024-06-01 12:55:33.551556

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:55:35.402077
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 12:55:37.570541

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

# Generated at 2024-06-01 12:55:39.575299

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list(['a', 'A', 'a', 'A']) == ['a', 'A']

# Generated at 2024-06-01 12:55:42.016692
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']
```

# Generated at 2024-06-01 12:56:16.467703

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:56:17.894059
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 12:56:20.198435
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3
            self.d = 4

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2, 'd': 4}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1, 'd': 4}
```

# Generated at 2024-06-01 12:56:22.185275

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:56:24.629351
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']
```

# Generated at 2024-06-01 12:56:26.955092

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:56:30.681765

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:56:32.937105
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 'a', 1, 'a']) == [1, 'a']
```

# Generated at 2024-06-01 12:56:35.543486
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']
```

# Generated at 2024-06-01 12:56:37.326799
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 12:57:36.272358
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 12:57:38.203300
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 'a', 1, 'a']) == [1, 'a']
```

# Generated at 2024-06-01 12:57:42.737329
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3
            self.d = 4

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2, 'd': 4}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1, 'd': 4}
```

# Generated at 2024-06-01 12:57:44.421956
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 12:57:47.735303
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 12:57:51.258819

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

# Generated at 2024-06-01 12:57:53.613613

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list(['a', 'A', 'a', 'A']) == ['a', 'A']

# Generated at 2024-06-01 12:57:55.557420

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']

# Generated at 2024-06-01 12:57:57.733946
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 12:58:00.120829

    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

# Generated at 2024-06-01 13:00:05.435997
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1}
```

# Generated at 2024-06-01 13:00:07.712818
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
```

# Generated at 2024-06-01 13:00:09.747083
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3
            self.d = 4

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2, 'd': 4}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1, 'd': 4}
```

# Generated at 2024-06-01 13:00:12.012394
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list(['x', 'y', 'z', 'x', 'y']) == ['x', 'y', 'z']
```

# Generated at 2024-06-01 13:00:15.086826
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3
            self.d = 4

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2, 'd': 4}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1, 'd': 4}
```

# Generated at 2024-06-01 13:00:18.327510
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list(['a', 'A', 'a', 'A']) == ['a', 'A']
```

# Generated at 2024-06-01 13:00:20.466229
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
```

# Generated at 2024-06-01 13:00:23.096034
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3
            self.d = 4

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2, 'd': 4}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1, 'd': 4}
```

# Generated at 2024-06-01 13:00:25.242769
```python
    assert deduplicate_list([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]
    assert deduplicate_list(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']
    assert deduplicate_list([1, 1, 1, 1]) == [1]
    assert deduplicate_list([]) == []
    assert deduplicate_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
```

# Generated at 2024-06-01 13:00:29.736473
```python
    class TestObject:
        def __init__(self):
            self.a = 1
            self.b = 2
            self._c = 3
            self.d = 4

    obj = TestObject()
    result = object_to_dict(obj)
    assert result == {'a': 1, 'b': 2, 'd': 4}

    result_with_exclude = object_to_dict(obj, exclude=['b'])
    assert result_with_exclude == {'a': 1, 'd': 4}
```