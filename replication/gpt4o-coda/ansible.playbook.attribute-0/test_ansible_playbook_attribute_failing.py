# Automatically generated by Pynguin.
import ansible.playbook.attribute as module_0

def test_case_0():
    try:
        str_0 = 'set'
        bool_0 = False
        int_0 = None
        float_0 = -1229.3672
        attribute_0 = module_0.Attribute(bool_0, int_0, str_0, float_0)
        int_1 = 3237
        bytes_0 = b'\xaf0\xcd@\xf6\x00\xa37\xee\xf1'
        set_0 = {bytes_0, int_1}
        attribute_1 = module_0.Attribute(int_1, bytes_0, set_0)
        var_0 = attribute_1.__eq__(attribute_0)
        bool_1 = True
        attribute_2 = module_0.Attribute(str_0, bool_1, str_0, bool_1, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "-B='Q-LS!"
        list_0 = [str_0, str_0, str_0]
        float_0 = 1447.75
        str_1 = 'Compare checksums with the collection(s) found on the server and the installed copy. This does not verify dependencies.'
        str_2 = '"urJX|E\tmag,I?-?'
        attribute_0 = module_0.Attribute(float_0, str_1, str_2)
        var_0 = attribute_0.__ne__(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ' Return a primitive copy of the keys and values from the cache. '
        attribute_0 = module_0.Attribute(str_0)
        bool_0 = True
        int_0 = -1083
        dict_0 = {}
        attribute_1 = module_0.Attribute(int_0, dict_0)
        var_0 = attribute_1.__gt__(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -5398
        bool_0 = False
        attribute_0 = module_0.Attribute(bool_0)
        set_0 = {int_0}
        float_0 = -3066.0
        attribute_1 = module_0.Attribute(float_0, bool_0, set_0, int_0)
        str_0 = '>6k:ntmH?\t.0)8v\\\n'
        attribute_2 = module_0.Attribute(str_0)
        var_0 = attribute_2.__le__(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'st'
        bool_0 = False
        str_1 = 'default_valu\x0c'
        str_2 = 'aliaN_name'
        attribute_0 = module_0.Attribute(str_0, bool_0, str_1, bool_0, str_0, bool_0, str_1, bool_0, bool_0, str_2, bool_0, bool_0, bool_0)
        var_0 = attribute_0.__ge__(str_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'set'
        bool_0 = True
        attribute_0 = module_0.Attribute(str_0, bool_0, str_0, bool_0, str_0)
    except BaseException:
        pass