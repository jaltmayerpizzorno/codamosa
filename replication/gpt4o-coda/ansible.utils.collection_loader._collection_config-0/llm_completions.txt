

# Generated at 2024-06-01 12:03:12.530218
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:03:13.431116
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:03:14.313680
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:03:17.226771
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called, "Handler should have been called"
    assert handler_called_2, "Second handler should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source +=

# Generated at 2024-06-01 12:03:20.893108
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with handler that raises exception
    def handler_with_exception(*args, **kwargs):
        raise Exception

# Generated at 2024-06-01 12:03:23.381975
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler should have been called"
```

# Generated at 2024-06-01 12:03:27.761939
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called and handler_called_2, "Both handlers should have been called"

    # Test firing with handler that raises exception
    def handler_with_exception(*args, **kwargs):
        raise Exception("Test exception")

    event_source += handler_with_exception
    try:
        event_source.fire()


# Generated at 2024-06-01 12:03:29.030652
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:03:32.448996
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
       

# Generated at 2024-06-01 12:03:33.717172
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called by fire method"
```

# Generated at 2024-06-01 12:03:38.754312
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:03:42.027359
```python
    event_source = _EventSource()
    
    # Test handler that increments a counter
    counter = {'count': 0}
    def handler(*args, **kwargs):
        counter['count'] += 1
    
    event_source += handler
    event_source.fire()
    
    assert counter['count'] == 1, "Handler should have been called once"
    
    event_source.fire()
    assert counter['count'] == 2, "Handler should have been called twice"
    
    event_source -= handler
    event_source.fire()
    assert counter['count'] == 2, "Handler should not have been called after removal"
    
    # Test handler that raises an exception
    def exception_handler(*args, **kwargs):
        raise ValueError("Test exception")
    
    event_source += exception_handler
    try:
        event_source.fire()
    except ValueError as e:
        assert str(e) == "Test exception", "Exception message should match

# Generated at 2024-06-01 12:03:43.088761
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:03:46.174725
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    result = []

    def handler(arg):
        result.append(arg)

    event_source += handler
    event_source.fire('test')
    assert result == ['test']

    # Test firing with multiple handlers
    result2 = []

    def handler2(arg):
        result2.append(arg)

    event_source += handler2
    event_source.fire('test2')
    assert result == ['test', 'test2']
    assert result2 == ['test2']

    # Test firing with handler that raises exception
    def handler_with_exception(arg):
        raise ValueError('test exception')

    event_source += handler_with_exception
    try:
        event_source.fire('test3')
    except ValueError as e:
        assert str(e) == 'test exception'
    assert result == ['test', 'test2', 'test

# Generated at 2024-06-01 12:03:47.032521
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:03:49.918785
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
       

# Generated at 2024-06-01 12:03:52.887301
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called
    assert handler_called_2

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise ValueError("Test exception")

    event_source += handler_with_exception
    try:
        event_source.fire()
    except ValueError as e:
        assert str

# Generated at 2024-06-01 12:03:53.765378
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:03:54.684476
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:03:55.894330
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:01.324578
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:02.914877
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:04:04.359471
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:05.971665
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:04:06.842957
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:07.695762
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:08.561873
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:10.075565
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:12.936344
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called and handler_called_2, "Both handlers should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception
    try:
        event

# Generated at 2024-06-01 12:04:15.318787
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    handler_called = False
    event_source -= handler
    event_source.fire()
    assert not handler_called, "Handler should not have been called after removal"

    def exception_handler(*args, **kwargs):
        raise Exception("Test exception")

    event_source += exception_handler
    try:
        event_source.fire()
    except Exception as e:
        assert str(e) == "Test exception", "Exception message should match"
```

# Generated at 2024-06-01 12:04:21.760238
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
       

# Generated at 2024-06-01 12:04:22.606169
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:23.580710
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:24.446306
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:26.527847
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:04:28.780918
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:04:30.059397
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:31.353746
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:32.335131
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:33.514181
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:38.329798
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:40.015424
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:41.596962
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:04:42.919013
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:44.444693
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:04:47.830563
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called and handler_called_2, "Both handlers should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise Exception("Test exception")

    event_source += handler_with_exception
    try:
        event_source

# Generated at 2024-06-01 12:04:48.799842
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:50.395658
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:04:51.703291
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:04:52.759751
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:57.876188
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:58.799506
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:04:59.672892
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:05:01.590360
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:05:05.320650
```python
    event_source = _EventSource()
    handler_called = []

    def handler(*args, **kwargs):
        handler_called.append((args, kwargs))

    event_source += handler
    event_source.fire(1, 2, key='value')

    assert handler_called == [((1, 2), {'key': 'value'})]

    # Test exception handling
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception

    try:
        event_source.fire(3, 4, key='another_value')
    except RuntimeError as e:
        assert str(e) == "Test exception"
    else:
        assert False, "Expected exception was not raised"
```

# Generated at 2024-06-01 12:05:06.571374
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:05:08.303888
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:05:09.525682
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called by fire method"
```

# Generated at 2024-06-01 12:05:12.569396
```python
    event_source = _EventSource()
    
    # Test handler that increments a counter
    counter = {'count': 0}
    def handler(*args, **kwargs):
        counter['count'] += 1

    event_source += handler
    event_source.fire()
    assert counter['count'] == 1, "Handler should have been called once"

    # Test handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise ValueError("Test exception")

    event_source += handler_with_exception
    try:
        event_source.fire()
    except ValueError as e:
        assert str(e) == "Test exception", "Exception message should match"
    else:
        assert False, "Exception should have been raised"

    # Test removing handler
    event_source -= handler
    event_source.fire()
    assert counter['count'] == 1, "Handler should not have been called after removal"
```

# Generated at 2024-06-01 12:05:13.894873
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:05:23.048348
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:05:26.590793
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called, "Handler 1 should have been called"
    assert handler_called_2, "Handler 2 should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

   

# Generated at 2024-06-01 12:05:27.731934
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:05:30.945640
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called and handler_called_2

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception
    try:
        event_source.fire()
    except RuntimeError as e:
        assert str(e)

# Generated at 2024-06-01 12:05:33.604810
```python
    event_source = _EventSource()
    handler_called = []

    def handler(*args, **kwargs):
        handler_called.append((args, kwargs))

    event_source += handler
    event_source.fire(1, 2, key='value')

    assert handler_called == [((1, 2), {'key': 'value'})]

    # Test exception handling
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception

    try:
        event_source.fire(3, 4, key='another_value')
    except RuntimeError as e:
        assert str(e) == "Test exception"

    assert handler_called == [((1, 2), {'key': 'value'}), ((3, 4), {'key': 'another_value'})]
```

# Generated at 2024-06-01 12:05:35.519783
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:05:37.676128
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:05:39.195596
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:05:40.776831
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:05:41.715510
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:05:52.824329
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called
    assert handler_called_2

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception
    try:
        event_source.fire()
    except RuntimeError as e:
        assert str

# Generated at 2024-06-01 12:05:56.793157
```python
    event_source = _EventSource()
    
    # Test firing with no handlers
    event_source.fire()  # Should not raise any exceptions

    # Test firing with one handler
    handler_called = False
    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False
    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called and handler_called_2, "Both handlers should have been called"

    # Test removing a handler
    event_source -= handler
    handler_called = False
    event_source.fire()
    assert not handler_called, "Handler should not have

# Generated at 2024-06-01 12:05:58.050451
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:05:59.341992
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:06:00.649434
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:06:02.054689
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:06:02.901586
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:06:06.799057
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:06:07.590283
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:06:08.574849
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:06:17.671795
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler should have been called"
```

# Generated at 2024-06-01 12:06:18.837326
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:06:19.643068
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:06:20.801498
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:06:21.899736
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:06:23.716413
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:06:25.562471
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:06:28.664401
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called, "Handler should have been called"
    assert handler_called_2, "Second handler should have been called"

    # Test removing a handler
    event_source -= handler
    handler_called = False
    event_source.fire()
    assert not handler_called, "Handler should not have

# Generated at 2024-06-01 12:06:30.719488
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:06:34.649671
```python
    event_source = _EventSource()
    handler_called = []

    def handler(*args, **kwargs):
        handler_called.append((args, kwargs))

    event_source += handler
    event_source.fire(1, 2, key='value')

    assert handler_called == [((1, 2), {'key': 'value'})]

    # Test exception handling
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception

    try:
        event_source.fire(3, 4, key='another_value')
    except RuntimeError as e:
        assert str(e) == "Test exception"
    else:
        assert False, "Exception not raised"
```

# Generated at 2024-06-01 12:06:45.067922
```python
    event_source = _EventSource()
    
    # Test firing with no handlers
    event_source.fire()  # Should not raise any exceptions

    # Test firing with one handler
    handler_called = False
    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False
    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called and handler_called_2, "Both handlers should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source +=

# Generated at 2024-06-01 12:06:46.744781
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:06:47.726705
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:06:50.959376
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called, "Handler should have been called"
    assert handler_called_2, "Second handler should have been called"

    # Test removing a handler
    event_source -= handler
    handler_called = False
    event_source.fire()
    assert not handler_called, "Handler should not have

# Generated at 2024-06-01 12:06:52.760206
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:06:53.770560
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:06:56.467418
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:07:00.023663
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
       

# Generated at 2024-06-01 12:07:03.250508
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
       

# Generated at 2024-06-01 12:07:04.727510
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:07:13.426922
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:14.930474
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:07:15.846689
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:19.036862
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called, "Handler should have been called"
    assert handler_called_2, "Second handler should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source +=

# Generated at 2024-06-01 12:07:19.899666
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:21.394508
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:07:22.305491
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:23.072323
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:26.165862
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called
    assert handler_called_2

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise Exception("Test exception")

    event_source += handler_with_exception
    try:
        event_source.fire()
    except Exception as e:
        assert str(e)

# Generated at 2024-06-01 12:07:28.986635
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called, "Handler should have been called"
    assert handler_called_2, "Second handler should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source +=

# Generated at 2024-06-01 12:07:45.063055
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:46.171068
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:48.367833
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:07:49.727490
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called by fire method"
```

# Generated at 2024-06-01 12:07:50.665433
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:52.318565
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:07:53.590601
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:07:54.496676
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:55.387130
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:07:57.226303
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called by fire method"
```

# Generated at 2024-06-01 12:08:14.480058
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:08:17.951850
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called and handler_called_2

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception
    try:
        event_source.fire()
    except RuntimeError as e:
        assert str(e)

# Generated at 2024-06-01 12:08:18.848492
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:08:20.018746
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:08:21.240294
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:08:23.410968
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:08:24.517337
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:08:26.161586
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:08:27.725805
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:08:29.461120
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:09:00.940420
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler should have been called"
```

# Generated at 2024-06-01 12:09:02.173776
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:09:04.265691
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:09:07.278483
```python
    event_source = _EventSource()
    handler_called = []

    def handler(*args, **kwargs):
        handler_called.append((args, kwargs))

    event_source += handler
    event_source.fire(1, 2, key='value')

    assert handler_called == [((1, 2), {'key': 'value'})]

    # Test exception handling
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception

    try:
        event_source.fire(3, 4, key='another_value')
    except RuntimeError as e:
        assert str(e) == "Test exception"

    assert handler_called == [((1, 2), {'key': 'value'}), ((3, 4), {'key': 'another_value'})]
```

# Generated at 2024-06-01 12:09:08.258692
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:09.647524
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:09:10.625516
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:12.107544
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:09:13.110902
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:14.808026
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:09:45.676185
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:47.223750
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called by fire method"
```

# Generated at 2024-06-01 12:09:48.025181
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:48.862952
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:49.988564
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:09:51.688132
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:52.568833
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:53.432323
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:09:54.537393
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:09:55.951709
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:10:26.090876
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called by fire method"
```

# Generated at 2024-06-01 12:10:28.950265
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
       

# Generated at 2024-06-01 12:10:32.381079
```python
    event_source = _EventSource()
    
    # Test firing with no handlers
    event_source.fire()  # Should not raise any exceptions

    # Test firing with one handler
    handler_called = False
    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False
    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called, "First handler should have been called"
    assert handler_called_2, "Second handler should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise

# Generated at 2024-06-01 12:10:33.385832
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:10:35.238418
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:10:36.678980
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:10:38.767264
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:10:40.073111
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:10:41.966291
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:10:45.410594
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
       

# Generated at 2024-06-01 12:11:17.083412
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:11:18.341568
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:11:21.580610
```python
    event_source = _EventSource()
    
    # Test firing with no handlers
    event_source.fire()  # Should not raise any exceptions

    # Test firing with one handler
    handler_called = False
    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called, "Handler should have been called"

    # Test firing with multiple handlers
    handler_called_2 = False
    def handler2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler2
    event_source.fire()
    assert handler_called and handler_called_2, "Both handlers should have been called"

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with

# Generated at 2024-06-01 12:11:22.893978
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called by fire method"
```

# Generated at 2024-06-01 12:11:23.781725
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:11:25.387140
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:11:26.865936
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:11:28.157480
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:11:31.382552
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler1_called = False
    handler2_called = False

    def handler1(*args, **kwargs):
        nonlocal handler1_called
        handler1_called = True

    def handler2(*args, **kwargs):
        nonlocal handler2_called
        handler2_called = True

    event_source += handler1
    event_source += handler2
    event_source.fire()
    assert handler1_called
    assert handler2_called

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
       

# Generated at 2024-06-01 12:11:32.934406
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:12:04.603020
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:12:05.904438
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler should have been called"
```

# Generated at 2024-06-01 12:12:06.791273
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:12:08.146446
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:12:09.836134
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:12:10.735792
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:12:12.833102
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:12:14.190932
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:12:14.997014
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:12:16.351398
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:12:47.516108
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:12:49.290529
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:12:50.185977
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:12:50.970356
```python
    event_source = _EventSource()
    handler = lambda x: x
    event_source += handler
    assert handler in event_source._handlers
```

# Generated at 2024-06-01 12:12:52.259051
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:12:56.873732
```python
    event_source = _EventSource()

    # Test firing with no handlers
    event_source.fire()

    # Test firing with one handler
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()
    assert handler_called

    # Test firing with multiple handlers
    handler_called_2 = False

    def handler_2(*args, **kwargs):
        nonlocal handler_called_2
        handler_called_2 = True

    event_source += handler_2
    event_source.fire()
    assert handler_called and handler_called_2

    # Test firing with a handler that raises an exception
    def handler_with_exception(*args, **kwargs):
        raise RuntimeError("Test exception")

    event_source += handler_with_exception
    try:
        event_source.fire()
    except RuntimeError as e:
        assert str(e)

# Generated at 2024-06-01 12:12:59.389671
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"
```

# Generated at 2024-06-01 12:13:02.087367
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called when event was fired"

    handler_called = False
    event_source -= handler
    event_source.fire()

    assert not handler_called, "Handler was called after being removed"
```

# Generated at 2024-06-01 12:13:03.289788
```python
    event_source = _EventSource()
    handler_called = False

    def handler(*args, **kwargs):
        nonlocal handler_called
        handler_called = True

    event_source += handler
    event_source.fire()

    assert handler_called, "Handler was not called"
```

# Generated at 2024-06-01 12:13:08.496440
```python
    event_source = _EventSource()
    
    # Test handler that increments a counter
    counter = {'count': 0}
    def handler(*args, **kwargs):
        counter['count'] += 1

    event_source += handler
    event_source.fire()
    assert counter['count'] == 1, "Handler should have been called once"

    event_source.fire()
    assert counter['count'] == 2, "Handler should have been called twice"

    # Test removing handler
    event_source -= handler
    event_source.fire()
    assert counter['count'] == 2, "Handler should not have been called after removal"

    # Test exception handling in handler
    def faulty_handler(*args, **kwargs):
        raise ValueError("Test exception")

    event_source += faulty_handler
    try:
        event_source.fire()
    except ValueError as e:
        assert str(e) == "Test exception", "Exception should be raised