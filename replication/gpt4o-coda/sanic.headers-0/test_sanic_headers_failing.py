# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        dict_0 = {}
        optional_0 = module_0.parse_forwarded(dict_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        optional_0 = module_0.parse_xforwarded(dict_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        iterable_0 = None
        dict_0 = module_0.fwd_normalize(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 64
        iterable_0 = None
        bytes_0 = module_0.format_http1_response(int_0, iterable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -558
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '192.168.0.1'
        dict_0 = module_0.fwd_normalize(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 124
        dict_0 = {}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
        str_0 = '7_19\x0bb5*Y6|Kr\n\r]\\2y6'
        tuple_0 = module_0.parse_content_header(str_0)
        tuple_1 = (str_0, str_0)
        int_1 = -1961
        optional_0 = module_0.parse_forwarded(tuple_1, int_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ',O=?'
        tuple_0 = module_0.parse_content_header(str_0)
        str_1 = 'for'
        str_2 = (str_1, str_1)
        str_3 = (str_2, str_2)
        str_4 = 'host'
        tuple_1 = module_0.parse_host(str_4)
        str_5 = 'example.com'
        str_6 = (str_4, str_5)
        str_7 = 'port'
        str_8 = (str_7, str_5)
        str_9 = 'path'
        str_10 = (str_9, str_8)
        str_11 = [str_2, str_3, str_6, str_8, str_10]
        tuple_2 = module_0.parse_content_header(str_7)
        dict_0 = module_0.fwd_normalize(str_11)
    except BaseException:
        pass