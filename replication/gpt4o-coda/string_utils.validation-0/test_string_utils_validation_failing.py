# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    try:
        str_0 = '-+/uX<3Sl#rMfy'
        bool_0 = True
        bool_1 = module_0.is_isbn_10(str_0, bool_0)
        bool_2 = module_0.is_ip(str_0)
        bool_3 = module_0.is_integer(str_0)
        bool_4 = module_0.is_ip_v6(bool_3)
        str_1 = '$'
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
        bool_5 = i_s_b_n_checker_0.is_isbn_13()
        str_2 = None
        bool_6 = module_0.is_isbn(str_2)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = False
        bool_0 = module_0.is_ip(int_0)
        str_0 = '\x0c`_\nc>'
        bool_1 = module_0.is_email(str_0)
        str_1 = 'is_url'
        bool_2 = module_0.is_decimal(str_0)
        bool_3 = module_0.is_integer(str_1)
        str_2 = None
        bool_4 = module_0.is_snake_case(bool_3, str_0)
        bool_5 = module_0.is_integer(str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'NN8i&s'
        str_1 = 'G8WCNrPy\nAA^E'
        bool_0 = module_0.is_isbn_13(str_1)
        bool_1 = module_0.is_credit_card(str_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        int_0 = module_0.words_count(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        str_1 = '(\\gvL8v2P7Zx'
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
        bool_0 = module_0.is_isogram(str_0)
        bool_1 = module_0.is_email(str_0)
        str_2 = '.s+X|M>7%'
        bool_2 = module_0.is_email(str_2)
        bool_3 = module_0.is_email(bool_1)
        bool_4 = module_0.contains_html(str_2)
        str_3 = None
        bool_5 = module_0.is_integer(str_3)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = None
        bool_0 = module_0.is_palindrome(int_0)
        str_0 = '4;6\t.D^W.anfIg"W${Y'
        bool_1 = module_0.is_integer(str_0)
        str_1 = '6'
        bool_2 = module_0.is_decimal(str_1)
        str_2 = '<mxqj4;x'
        bool_3 = module_0.is_string(bool_1)
        bool_4 = module_0.is_isbn_10(str_2)
        int_1 = -974
        dict_0 = {int_1: int_0}
        bool_5 = module_0.is_slug(dict_0)
        bool_6 = module_0.is_uuid(int_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "+T?\n>Y_DS\r'0"
        bool_0 = module_0.is_decimal(str_0)
        str_1 = None
        bool_1 = module_0.contains_html(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 2043.58185
        bool_0 = module_0.is_uuid(float_0)
        str_0 = '\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel(\'the_snake_is_green\') # returns \'TheSnakeIsGreen\'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to "_").\n    :type separator: str\n    :return: Converted string\n    '
        str_1 = 'g7\\ 4aa8OY.1x'
        bool_1 = module_0.is_ip(str_1)
        bool_2 = module_0.is_palindrome(str_1, bool_1)
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
        bool_3 = i_s_b_n_checker_0.is_isbn_10()
        str_2 = 'C'
        bool_4 = module_0.is_json(str_1)
        bool_5 = module_0.is_email(str_0)
        bool_6 = module_0.is_uuid(str_2, bool_1)
        str_3 = 'we eg$uJ*-H'
        str_4 = 'NN8i&v'
        str_5 = 'booleanize'
        bool_7 = True
        i_s_b_n_checker_1 = module_0.__ISBNChecker(str_3, bool_7)
        bool_8 = i_s_b_n_checker_0.is_isbn_13()
        bool_9 = i_s_b_n_checker_1.is_isbn_13()
        bool_10 = module_0.contains_html(str_5)
        bool_11 = module_0.is_credit_card(str_4, str_2)
    except BaseException:
        pass