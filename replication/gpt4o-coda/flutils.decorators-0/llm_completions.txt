

# Generated at 2024-06-01 19:41:06.539905
```python

# Generated at 2024-06-01 19:41:06.983392
```python

# Generated at 2024-06-01 19:41:07.463089
```python

# Generated at 2024-06-01 19:41:08.013693
```python

# Generated at 2024-06-01 19:41:14.413201
```python
    class TestClass:
        def __init__(self, value):
            self.value = value

        @cached_property
        def computed_value(self):
            return self.value + 10

    obj = TestClass(5)
    assert obj.computed_value == 15
    obj.value = 10
    assert obj.computed_value == 15  # Should still be cached

    del obj.computed_value
    assert obj.computed_value == 20  # Should recompute after deletion

    async def async_test():
        class AsyncTestClass:
            def __init__(self, value):
                self.value = value

            @cached_property
            async def computed_value(self):
                await asyncio.sleep(0.1)
                return self.value + 10

        async_obj = AsyncTestClass(5)
        result = await async_obj.computed_value
        assert result == 15
        async_obj.value = 10
        result

# Generated at 2024-06-01 19:41:17.622718
```python
    class TestClass:
        def __init__(self, value):
            self.value = value

        @cached_property
        def computed_value(self):
            return self.value + 1

    obj = TestClass(10)
    assert obj.computed_value == 11
    obj.value = 20
    assert obj.computed_value == 11  # Should still be cached

    del obj.computed_value
    assert obj.computed_value == 21  # Should recompute after deletion

    async def async_test():
        class AsyncTestClass:
            def __init__(self, value):
                self.value = value

            @cached_property
            async def async_computed_value(self):
                await asyncio.sleep(0.1)
                return self.value + 1

        async_obj = AsyncTestClass(10)
        result = await async_obj.async_computed_value
        assert result == 11
        async_obj.value = 20

# Generated at 2024-06-01 19:41:21.491767
```python
    class TestClass:
        def __init__(self, value):
            self.value = value

        @cached_property
        def computed_value(self):
            return self.value + 1

    obj = TestClass(10)
    assert obj.computed_value == 11
    obj.value = 20
    assert obj.computed_value == 11  # Should still be cached

    del obj.computed_value
    assert obj.computed_value == 21  # Should recompute after deletion

    # Test with coroutine
    class AsyncTestClass:
        def __init__(self, value):
            self.value = value

        @cached_property
        async def computed_value(self):
            await asyncio.sleep(0.1)
            return self.value + 1

    async def async_test():
        obj = AsyncTestClass(10)
        result = await obj.computed_value
        assert result == 11
        obj.value = 20

# Generated at 2024-06-01 19:41:21.915693
```python

# Generated at 2024-06-01 19:41:22.477209
```python

# Generated at 2024-06-01 19:41:22.901059
```python