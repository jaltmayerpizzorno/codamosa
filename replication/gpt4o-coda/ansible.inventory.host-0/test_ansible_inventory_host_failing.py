# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        str_0 = '\n    Return a single named information item from the lsb_release command output\n    data source of the current OS distribution.\n\n    Parameters:\n\n    * ``attribute`` (string): Key of the information item.\n\n    Returns:\n\n    * (string): Value of the information item, if the item exists.\n      The empty string, if the item does not exist.\n\n    See `lsb_release command output`_ for details about these information\n    items.\n    '
        host_0 = module_0.Host(str_0)
        var_0 = host_0.get_name()
        list_0 = [host_0, str_0, host_0, str_0]
        var_1 = host_0.__ne__(list_0)
        tuple_0 = (str_0,)
        var_2 = host_0.add_group(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -369.0
        set_0 = {float_0, float_0}
        host_0 = module_0.Host(float_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xbb\xb2\xc4\xd2\x020&\xd4\x8c\x11'
        float_0 = -61.77395
        host_0 = module_0.Host(float_0)
        host_1 = module_0.Host(host_0)
        var_0 = host_1.populate_ancestors(bytes_0)
        host_2 = module_0.Host()
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0, set_0]
        bytes_0 = None
        host_0 = module_0.Host()
        var_0 = host_0.set_variable(list_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.get_vars()
    except BaseException:
        pass

def test_case_5():
    try:
        host_0 = module_0.Host()
        host_1 = module_0.Host(host_0)
        var_0 = host_1.get_groups()
        dict_0 = None
        var_1 = host_0.get_groups()
        host_2 = module_0.Host()
        bytes_0 = b'\x8fH\xf7\x96\x15\x81\xa2\x90\xfb\xcf-\xc5'
        float_0 = 1.0
        var_2 = host_2.set_variable(bytes_0, float_0)
        var_3 = host_2.remove_group(dict_0)
        str_0 = '\x0bc9?\tD'
        str_1 = 'Cn+}Gmc8-o;NW'
        host_3 = module_0.Host(str_1)
        var_4 = host_3.__str__()
        host_4 = module_0.Host(str_0)
        dict_1 = {var_4: host_3, host_4: host_3, host_3: host_3}
        var_5 = host_3.populate_ancestors(dict_1)
        bytes_1 = b'\xd5\xcf\x15\x1f`\xd8\xd5\xd0\xfe\xce'
        host_5 = module_0.Host()
        host_6 = module_0.Host(bytes_1)
        var_6 = host_3.get_magic_vars()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'test_host'
        host_0 = module_0.Host(str_0)
        str_1 = '(roup1'
        group_0 = module_1.Group(str_1)
        str_2 = '!PK'
        group_1 = module_1.Group(str_2)
        var_0 = host_0.add_group(group_0)
        var_1 = host_0.add_group(group_0)
        var_2 = host_0.__getstate__()
        var_3 = host_0.add_group(group_1)
        var_4 = group_1.serialize()
        var_5 = host_0.get_groups()
        var_6 = host_0.get_groups()
        var_7 = host_0.remove_group(group_0)
        var_8 = group_0.__getstate__()
        int_0 = 607
        bytes_0 = b'\n \xb3\xb6\x03\x87d?|\xc3f\xa2jT\xc6\x952?\x00\x80'
        var_9 = host_0.get_vars()
        var_10 = host_0.set_variable(int_0, bytes_0)
        var_11 = host_0.__eq__(host_0)
        float_0 = 750.6383922703312
        var_12 = host_0.set_variable(float_0, int_0)
        var_13 = host_0.populate_ancestors()
        bool_0 = False
        var_14 = host_0.__repr__()
        dict_0 = {bool_0: var_9, host_0: var_0}
        var_15 = host_0.__setstate__(dict_0)
        var_16 = host_0.get_vars()
    except BaseException:
        pass

def test_case_7():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__repr__()
        float_0 = 1927.6629
        list_0 = None
        host_1 = module_0.Host()
        var_1 = host_1.populate_ancestors()
        int_0 = 411
        host_2 = module_0.Host(host_1, int_0)
        set_0 = {list_0}
        tuple_0 = (list_0, set_0)
        bytes_0 = b' R\x03F6]\xfa\xd3XF\x12q\xbd'
        var_2 = host_0.populate_ancestors(bytes_0)
        host_3 = module_0.Host()
        var_3 = host_3.__eq__(tuple_0)
        host_4 = module_0.Host(float_0)
        var_4 = host_4.get_name()
        var_5 = host_1.__getstate__()
        var_6 = host_1.remove_group(tuple_0)
        dict_0 = {}
        var_7 = host_4.deserialize(dict_0)
        host_5 = module_0.Host(list_0)
        var_8 = host_2.__repr__()
        bool_0 = None
        var_9 = host_2.set_variable(bool_0, host_1)
        var_10 = host_5.__getstate__()
        var_11 = host_1.remove_group(set_0)
        var_12 = host_1.__ne__(set_0)
        var_13 = host_1.remove_group(tuple_0)
        var_14 = host_2.get_magic_vars()
    except BaseException:
        pass