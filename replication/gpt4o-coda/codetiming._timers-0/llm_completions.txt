

# Generated at 2024-06-01 16:28:29.823956
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:28:32.814330
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:28:35.700810
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:28:38.113587
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:28:41.362216
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    timers.add("timer5", 1.0)
    timers.add("timer5", 2.0)
    timers.add("timer5", 3.0)
    timers.add("timer5", 4.0

# Generated at 2024-06-01 16:28:43.898508
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    timers.add("timer3", -2.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("timer4")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:28:46.469909
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.stdev("timer1"), statistics.stdev([1.0, 2.0, 3.0]))

    timers.add("timer2", 5.0)
    assert math.isnan(timers.stdev("timer2"))

    try:
        timers.stdev("timer3")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:28:49.416558
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.add("timer3", 0.0)
    assert timers.min("timer3") == 0.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:28:52.018477
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
```

# Generated at 2024-06-01 16:28:55.043071
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.mean("timer1") == 2.0

    timers.add("timer2", 5.0)
    assert timers.mean("timer2") == 5.0

    timers.add("timer2", 7.0)
    assert timers.mean("timer2") == 6.0

    timers.clear()
    timers.add("timer3", 10.0)
    assert timers.mean("timer3") == 10.0
```

# Generated at 2024-06-01 16:29:05.489996
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:29:08.793073
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)

    timers.add("timer2", 5.0)
    assert math.isclose(timers.mean("timer2"), 5.0, rel_tol=1e-9)

    timers.add("timer2", 7.0)
    assert math.isclose(timers.mean("timer2"), 6.0, rel_tol=1e-9)

    timers.add("timer3", 0.0)
    assert math.isclose(timers.mean("timer3"), 0.0, rel_tol=1e-9)

    timers.clear()
    assert math.isclose(timers.mean("timer1"), 0.

# Generated at 2024-06-01 16:29:12.446798
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.add("timer3", 0.0)
    assert timers.min("timer3") == 0.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:29:15.872882
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:29:18.599883
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:29:20.786068
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0
```

# Generated at 2024-06-01 16:29:24.069943
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.mean("timer1") == 2.0

    timers.add("timer2", 5.0)
    assert timers.mean("timer2") == 5.0

    timers.add("timer2", 7.0)
    assert timers.mean("timer2") == 6.0

    timers.add("timer3", 0.0)
    assert timers.mean("timer3") == 0.0

    try:
        timers.mean("timer4")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:29:26.355630
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.mean("timer1") == 2.0

    timers.add("timer2", 5.0)
    assert timers.mean("timer2") == 5.0

    timers.add("timer2", 7.0)
    assert timers.mean("timer2") == 6.0

    timers.clear()
    timers.add("timer3", 0.0)
    assert timers.mean("timer3") == 0.0
```

# Generated at 2024-06-01 16:29:28.780448
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.min("timer1") == 1.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.min("timer2") == 3.0

    timers.add("timer3", -1.0)
    assert timers.min("timer3") == -1.0

    timers.add("timer4", 0.0)
    assert timers.min("timer4") == 0.0

    assert timers.min("nonexistent_timer") == 0.0
```

# Generated at 2024-06-01 16:29:32.724345
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:29:47.920320
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0
```

# Generated at 2024-06-01 16:29:52.129005
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)

    timers.add("timer2", 4.0)
    assert math.isclose(timers.mean("timer2"), 4.0, rel_tol=1e-9)

    timers.add("timer2", 6.0)
    assert math.isclose(timers.mean("timer2"), 5.0, rel_tol=1e-9)

    timers.add("timer3", 0.0)
    assert math.isclose(timers.mean("timer3"), 0.0, rel_tol=1e-9)

    timers.clear()
    try:
        timers.mean("timer1")
    except KeyError:


# Generated at 2024-06-01 16:29:55.480060
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:29:58.655520
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.clear()
    assert timers.median("timer1") == 0.0
```

# Generated at 2024-06-01 16:30:01.134842
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0
```

# Generated at 2024-06-01 16:30:05.212193
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)

    timers.add("timer2", 5.0)
    assert math.isclose(timers.mean("timer2"), 5.0, rel_tol=1e-9)

    timers.add("timer2", 7.0)
    assert math.isclose(timers.mean("timer2"), 6.0, rel_tol=1e-9)

    timers.add("timer3", 0.0)
    assert math.isclose(timers.mean("timer3"), 0.0, rel_tol=1e-9)

    try:
        timers.mean("timer4")
    except KeyError:
        pass
   

# Generated at 2024-06-01 16:30:07.878024
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    timers.add("timer4", 0.0)
    assert timers.max("timer4") == 0.0

    try:
        timers.max("nonexistent")
    except KeyError:
        pass
```

# Generated at 2024-06-01 16:30:11.029265
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:30:13.501031
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:30:17.088378
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:30:43.846343
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for nonexistent timer"
```

# Generated at 2024-06-01 16:30:46.972075
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.mean("timer1") == 2.0

    timers.add("timer2", 5.0)
    assert timers.mean("timer2") == 5.0

    timers.add("timer2", 7.0)
    assert timers.mean("timer2") == 6.0

    timers.add("timer3", 0.0)
    assert timers.mean("timer3") == 0.0

    try:
        timers.mean("timer4")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:30:50.698572
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)

    timers.add("timer2", 4.0)
    assert math.isclose(timers.mean("timer2"), 4.0, rel_tol=1e-9)

    timers.add("timer2", 6.0)
    assert math.isclose(timers.mean("timer2"), 5.0, rel_tol=1e-9)

    timers.add("timer3", 0.0)
    assert math.isclose(timers.mean("timer3"), 0.0, rel_tol=1e-9)

    timers.clear()
    try:
        timers.mean("timer1")
    except KeyError:


# Generated at 2024-06-01 16:30:53.113619
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:31:00.185892
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)

    timers.add("timer2", 5.0)
    assert math.isclose(timers.mean("timer2"), 5.0, rel_tol=1e-9)

    timers.add("timer2", 7.0)
    assert math.isclose(timers.mean("timer2"), 6.0, rel_tol=1e-9)

    timers.add("timer3", 0.0)
    assert math.isclose(timers.mean("timer3"), 0.0, rel_tol=1e-9)

    try:
        timers.mean("timer4")
    except KeyError:
        pass
   

# Generated at 2024-06-01 16:31:02.862360
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
```

# Generated at 2024-06-01 16:31:05.094401
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    try:
        timers.max("timer3")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:31:07.853781
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:31:10.374879
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:31:13.149006
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    try:
        timers.max("timer3")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:32:03.269039
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0
```

# Generated at 2024-06-01 16:32:05.470933
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.min("timer1") == 1.0

    timers.add("timer2", 5.0)
    assert timers.min("timer2") == 5.0

    timers.add("timer2", 4.0)
    assert timers.min("timer2") == 4.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:32:08.576268
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:32:11.811572
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:32:14.167870
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:32:17.234142
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    timers.add("timer4", 0.0)
    assert timers.max("timer4") == 0.0

    try:
        timers.max("nonexistent")
    except KeyError:
        pass
```

# Generated at 2024-06-01 16:32:21.944190
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    timers.add("timer3", -2.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("timer4")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:32:25.653997
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.min("timer1") == 1.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.min("timer2") == 3.0

    timers.add("timer3", -1.0)
    assert timers.min("timer3") == -1.0

    timers.add("timer4", 0.0)
    assert timers.min("timer4") == 0.0

    timers.add("timer5", 10.0)
    timers.add("timer5", 10.0)
    assert timers.min("timer5") == 10.0

    assert timers.min("nonexistent_timer") == 0.

# Generated at 2024-06-01 16:32:30.288125
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:32:33.017511
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for nonexistent timer"
```

# Generated at 2024-06-01 16:34:12.199911
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:34:14.338827
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:34:18.054144
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for nonexistent timer"
```

# Generated at 2024-06-01 16:34:21.478079
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)

    timers.add("timer2", 4.0)
    assert math.isclose(timers.mean("timer2"), 4.0, rel_tol=1e-9)

    timers.add("timer2", 6.0)
    assert math.isclose(timers.mean("timer2"), 5.0, rel_tol=1e-9)

    timers.add("timer3", 0.0)
    assert math.isclose(timers.mean("timer3"), 0.0, rel_tol=1e-9)

    try:
        timers.mean("nonexistent")
    except KeyError:
        pass
   

# Generated at 2024-06-01 16:34:24.647389
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
```

# Generated at 2024-06-01 16:34:25.863183
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)
```

# Generated at 2024-06-01 16:34:29.810968
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.mean("timer1") == 2.0

    timers.add("timer2", 5.0)
    assert timers.mean("timer2") == 5.0

    timers.add("timer2", 7.0)
    assert timers.mean("timer2") == 6.0

    timers.add("timer3", 0.0)
    assert timers.mean("timer3") == 0.0

    try:
        timers.mean("timer4")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:34:32.693559
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:34:35.254641
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    timers.add("timer5", 1.0)
    timers.add("timer5", 2.0)
    timers.add("timer5", 3.0)
    timers.add("timer5", 4.0

# Generated at 2024-06-01 16:34:38.251511
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 3.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    timers.add("timer4", 0.0)
    assert timers.max("timer4") == 0.0

    try:
        timers.max("nonexistent")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:37:53.720622
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0.0
```

# Generated at 2024-06-01 16:37:56.972886
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:38:00.311343
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)

    timers.add("timer2", 5.0)
    assert math.isclose(timers.mean("timer2"), 5.0, rel_tol=1e-9)

    timers.add("timer2", 7.0)
    assert math.isclose(timers.mean("timer2"), 6.0, rel_tol=1e-9)

    timers.add("timer3", 0.0)
    assert math.isclose(timers.mean("timer3"), 0.0, rel_tol=1e-9)

    timers.clear()
    try:
        timers.mean("timer1")
    except KeyError:


# Generated at 2024-06-01 16:38:02.846871
```python
    timers = Timers()
    timers.add("timer1", 5.0)
    timers.add("timer1", 3.0)
    timers.add("timer1", 8.0)
    assert timers.min("timer1") == 3.0

    timers.add("timer2", 10.0)
    assert timers.min("timer2") == 10.0

    timers.add("timer2", 2.0)
    assert timers.min("timer2") == 2.0

    timers.clear()
    assert timers.min("timer1") == 0
```

# Generated at 2024-06-01 16:38:07.867542
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert math.isclose(timers.mean("timer1"), 2.0, rel_tol=1e-9)

    timers.add("timer2", 5.0)
    assert math.isclose(timers.mean("timer2"), 5.0, rel_tol=1e-9)

    timers.add("timer2", 7.0)
    assert math.isclose(timers.mean("timer2"), 6.0, rel_tol=1e-9)

    timers.add("timer3", 0.0)
    assert math.isclose(timers.mean("timer3"), 0.0, rel_tol=1e-9)

    timers.clear()
    try:
        timers.mean("timer1")
    except KeyError:


# Generated at 2024-06-01 16:38:10.356576
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.max("timer1") == 3.0

    timers.add("timer2", 5.0)
    timers.add("timer2", 4.0)
    assert timers.max("timer2") == 5.0

    timers.add("timer3", -1.0)
    assert timers.max("timer3") == -1.0

    try:
        timers.max("nonexistent")
    except KeyError:
        assert True
    else:
        assert False
```

# Generated at 2024-06-01 16:38:12.858007
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.mean("timer1") == 2.0

    timers.add("timer2", 5.0)
    assert timers.mean("timer2") == 5.0

    timers.add("timer2", 7.0)
    assert timers.mean("timer2") == 6.0

    timers.clear()
    timers.add("timer3", 4.0)
    assert timers.mean("timer3") == 4.0
```

# Generated at 2024-06-01 16:38:15.983920
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        pass
    else:
        assert False, "Expected KeyError for non-existent timer"
```

# Generated at 2024-06-01 16:38:19.852622
```python
    timers = Timers()
    timers.add("timer1", 1.0)
    timers.add("timer1", 2.0)
    timers.add("timer1", 3.0)
    assert timers.median("timer1") == 2.0

    timers.add("timer2", 1.0)
    timers.add("timer2", 2.0)
    assert timers.median("timer2") == 1.5

    timers.add("timer3", 5.0)
    assert timers.median("timer3") == 5.0

    timers.add("timer4", 0.0)
    assert timers.median("timer4") == 0.0

    try:
        timers.median("timer5")
    except KeyError:
        assert True
    else:
        assert False
```