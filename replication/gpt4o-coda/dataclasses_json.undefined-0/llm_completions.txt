

# Generated at 2024-06-01 17:59:31.727026
```python
    @dataclasses.dataclass
    class TestClass:
        a: int
        b: str
        extra: Optional[CatchAllVar] = dataclasses.field(default_factory=dict)

    init_func = _CatchAllUndefinedParameters.create_init(TestClass)
    instance = TestClass.__new__(TestClass)
    init_func(instance, a=1, b='test', c=3, d=4)

    assert instance.a == 1
    assert instance.b == 'test'
    assert instance.extra == {'c': 3, 'd': 4}
```

# Generated at 2024-06-01 17:59:33.775476
```python
    class TestClass:
        a: int
        b: str
        c: Optional[CatchAllVar] = dataclasses.field(default_factory=dict)

    input_dict = {'a': 1, 'b': 'test', 'x': 100, 'y': 'extra'}
    expected_output = {'a': 1, 'b': 'test', 'c': {'x': 100, 'y': 'extra'}}

    result = _CatchAllUndefinedParameters.handle_from_dict(TestClass, input_dict)
    assert result == expected_output, f"Expected {expected_output}, but got {result}"
```

# Generated at 2024-06-01 17:59:36.143127
```python
    class TestClass:
        def __init__(self, a, b, **kwargs):
            self.a = a
            self.b = b
            self.catch_all = kwargs

    obj = TestClass(a=1, b=2, extra1="extra1", extra2="extra2")
    kvs = {"a": 1, "b": 2, "catch_all": {"extra1": "extra1", "extra2": "extra2"}}
    result = _CatchAllUndefinedParameters.handle_to_dict(obj, kvs)
    expected = {"a": 1, "b": 2, "extra1": "extra1", "extra2": "extra2"}
    assert result == expected, f"Expected {expected}, but got {result}"
```

# Generated at 2024-06-01 17:59:37.082131
```python
    with pytest.raises(UndefinedParameterError) as exc_info:
        raise UndefinedParameterError("Test error message")
    assert str(exc_info.value) == "Test error message"
```

# Generated at 2024-06-01 17:59:38.798259
```python
    class TestClass:
        def __init__(self, a, b):
            self.a = a
            self.b = b

    init_func = _UndefinedParameterAction.create_init(TestClass)
    test_instance = TestClass.__new__(TestClass)
    init_func(test_instance, a=1, b=2)

    assert test_instance.a == 1
    assert test_instance.b == 2
```

# Generated at 2024-06-01 17:59:40.296009
```python
    with pytest.raises(UndefinedParameterError) as exc_info:
        raise UndefinedParameterError("Test error message")
    assert str(exc_info.value) == "Test error message"
```

# Generated at 2024-06-01 17:59:41.170267
```python
    with pytest.raises(UndefinedParameterError) as exc_info:
        raise UndefinedParameterError("Test error message")
    assert str(exc_info.value) == "Test error message"
```

# Generated at 2024-06-01 17:59:43.212354
```python
    class TestClass:
        a: int
        b: str
        c: Optional[CatchAllVar] = dataclasses.field(default_factory=dict)

    input_dict = {'a': 1, 'b': 'test', 'x': 100, 'y': 200}
    expected_output = {'a': 1, 'b': 'test', 'c': {'x': 100, 'y': 200}}

    result = _CatchAllUndefinedParameters.handle_from_dict(TestClass, input_dict)
    assert result == expected_output, f"Expected {expected_output}, but got {result}"
```

# Generated at 2024-06-01 17:59:46.576175
```python
    class TestClass:
        def __init__(self, a, b):
            self.a = a
            self.b = b

    valid_input = {'a': 1, 'b': 2}
    invalid_input = {'a': 1, 'b': 2, 'c': 3}

    # Test with valid input
    result = _RaiseUndefinedParameters.handle_from_dict(TestClass, valid_input)
    assert result == valid_input, f"Expected {valid_input}, but got {result}"

    # Test with invalid input
    try:
        _RaiseUndefinedParameters.handle_from_dict(TestClass, invalid_input)
    except UndefinedParameterError as e:
        assert str(e) == "Received undefined initialization arguments {'c': 3}"
    else:
        assert False, "Expected UndefinedParameterError but no error was raised"
```

# Generated at 2024-06-01 17:59:49.164998
```python
    class TestClass:
        def __init__(self, a, b):
            self.a = a
            self.b = b

    kvs = {'a': 1, 'b': 2, 'c': 3}
    known, unknown = _UndefinedParameterAction._separate_defined_undefined_kvs(TestClass, kvs)
    assert known == {'a': 1, 'b': 2}
    assert unknown == {'c': 3}
```