# Automatically generated by Pynguin.
import youtube_dl.swfinterp as module_0

def test_case_0():
    try:
        s_w_f_interpreter_0 = module_0.SWFInterpreter()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xe2\xd7X\xf0\x06\x98\x99\xeaC:\x1e'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'NR?02Scqhd\x0b;hd'
        multiname_0 = module_0._Multiname(str_0)
        list_0 = []
        a_v_m_class__object_0 = module_0._AVMClass_Object(list_0)
        var_0 = a_v_m_class__object_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -384
        scope_dict_0 = module_0._ScopeDict(int_0)
        var_0 = scope_dict_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 591
        scope_dict_0 = module_0._ScopeDict(int_0)
        str_0 = 'Colin being the warrior he is and showing the injustice Asians in Sacramento are being subjected to.'
        a_v_m_class__object_0 = module_0._AVMClass_Object(str_0)
        a_v_m_class__object_1 = module_0._AVMClass_Object(a_v_m_class__object_0)
        a_v_m_class_0 = module_0._AVMClass(scope_dict_0, a_v_m_class__object_1)
        var_0 = a_v_m_class_0.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b"9'aZ\xd5\xf4q\x08\xfe\x1d\x03\xdf\xbd*\x0c8\xd2\x1d\xb8"
        dict_0 = None
        complex_0 = None
        int_0 = 821
        a_v_m_class_0 = module_0._AVMClass(complex_0, int_0)
        bool_0 = False
        a_v_m_class_1 = module_0._AVMClass(a_v_m_class_0, bool_0)
        bool_1 = False
        set_0 = {bytes_0, bytes_0}
        int_1 = 1454342820
        a_v_m_class_2 = module_0._AVMClass(bool_1, set_0, int_1)
        var_0 = a_v_m_class_2.register_methods(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Td'
        multiname_0 = module_0._Multiname(str_0)
        var_0 = multiname_0.__repr__()
    except BaseException:
        pass

def test_case_7():
    try:
        undefined_0 = module_0._Undefined()
        var_0 = undefined_0.__str__()
        dict_0 = {undefined_0: var_0}
        list_0 = [undefined_0, undefined_0, dict_0, undefined_0]
        str_0 = 'Tfr;'
        str_1 = None
        dict_1 = {str_0: list_0, str_1: var_0, str_1: dict_0}
        undefined_1 = module_0._Undefined(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        undefined_0 = module_0._Undefined()
        str_0 = 'Cvu3\tLWe>[@]GWcu8'
        var_0 = undefined_0.__hash__()
        a_v_m_class_0 = module_0._AVMClass(bool_0, str_0)
        var_1 = a_v_m_class_0.make_object()
        var_2 = a_v_m_class_0.__repr__()
        str_1 = '9~O9P'
        str_2 = '3B8Yh\rkU/Rg!v1T&WK\\"'
        dict_0 = {str_1: undefined_0, str_2: undefined_0}
        var_3 = a_v_m_class_0.register_methods(dict_0)
        str_3 = "/qj65^V'f>d[(\x0b0S@Fw"
        a_v_m_class__object_0 = module_0._AVMClass_Object(str_3)
        bytes_0 = b'\xcd\x17\x12L\\\x9c\xf0\xa4\xb6}\xba#\xb7\xd77U\x8b\xf8'
        s_w_f_interpreter_0 = module_0.SWFInterpreter(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        undefined_0 = module_0._Undefined()
        str_0 = 'Cvu3\tLWe>[@]GWcu8'
        var_0 = undefined_0.__hash__()
        a_v_m_class_0 = module_0._AVMClass(bool_0, str_0)
        var_1 = a_v_m_class_0.__repr__()
        bytes_0 = b'\xbb#\x031c\xe5\xcf\x19\xc7\xb94\xdc\\;\n\x1cZJ\x93'
        var_2 = undefined_0.__str__()
        list_0 = [str_0, a_v_m_class_0, var_1, bytes_0]
        multiname_0 = module_0._Multiname(list_0)
        scope_dict_0 = module_0._ScopeDict(multiname_0)
        scope_dict_1 = module_0._ScopeDict(a_v_m_class_0)
        multiname_1 = None
        list_1 = [str_0]
        tuple_0 = (scope_dict_1, multiname_1, list_1)
        s_w_f_interpreter_0 = module_0.SWFInterpreter(tuple_0)
    except BaseException:
        pass