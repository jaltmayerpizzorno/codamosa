# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    try:
        var_0 = module_0.fn()
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        var_1 = module_0.identity(var_0)
        var_2 = module_0.identity(var_1)
        set_0 = {var_2}
        list_0 = [var_1, var_1, var_0, var_2]
        var_3 = module_0.compose(set_0, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        int_0 = -1991
        int_1 = module_0.increase(int_0)
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_0, callable_0, callable_1, callable_0, callable_1, callable_0, callable_1, callable_0, callable_0, callable_1]
        var_0 = module_0.pipe(callable_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1]
        var_0 = module_0.compose(callable_1, *list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0, callable_0)
        list_0 = [callable_1, callable_1]
        var_0 = module_0.pipe(callable_0, *list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0, callable_0)
        list_0 = [callable_1, callable_1, callable_0, callable_0, callable_0, callable_0, callable_1, callable_0, callable_1, callable_0, callable_0, callable_1, callable_1, callable_1, callable_1, callable_1, callable_1, callable_1, callable_0, callable_1]
        list_1 = [callable_1, list_0, callable_1, callable_1]
        str_0 = '=$a*'
        var_0 = module_0.curry(list_1, str_0)
        var_1 = module_0.pipe(callable_1, *list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callable_0 = None
        list_0 = []
        var_0 = module_0.cond(list_0)
        bytes_0 = b'$\x13fF\xf2'
        list_1 = [var_0, callable_0, bytes_0, callable_0]
        var_1 = module_0.pipe(bytes_0, *list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        callable_0 = None
        int_0 = 2
        tuple_0 = (int_0, callable_0)
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.cond(list_0)
        bytes_0 = b'$\x13fF\xf2'
        list_1 = [var_0, callable_0, bytes_0, callable_0]
        var_1 = module_0.pipe(bytes_0, *list_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        float_0 = 1606.0472
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        var_0 = module_0.curry(bool_0, float_0)
        list_0 = [var_0]
        var_1 = module_0.pipe(list_0, *list_0)
        var_2 = module_0.fn()
    except BaseException:
        pass