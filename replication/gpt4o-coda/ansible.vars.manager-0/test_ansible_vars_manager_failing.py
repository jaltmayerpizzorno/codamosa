# Automatically generated by Pynguin.
import ansible.vars.manager as module_0

def test_case_0():
    try:
        float_0 = -4119.9244
        var_0 = module_0.preprocess_vars(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = '=jk3e1n#'
        dict_0 = {variable_manager_0: variable_manager_0}
        dict_1 = {str_0: dict_0}
        var_0 = variable_manager_0.__getstate__()
        vars_with_sources_0 = module_0.VarsWithSources(**dict_1)
        var_1 = variable_manager_0.set_nonpersistent_facts(vars_with_sources_0, dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        vars_with_sources_0 = module_0.VarsWithSources()
        bytes_0 = b't\x93\xb0`\x80\x13\x88\x9b\xe6\xd9\xd9\x7fbG\xc7\xd1'
        float_0 = None
        list_0 = [bytes_0, bytes_0, float_0]
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.__setstate__(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        variable_manager_0 = module_0.VariableManager()
        dict_0 = {variable_manager_0: variable_manager_0, variable_manager_0: variable_manager_0}
        var_0 = variable_manager_0.set_inventory(dict_0)
        dict_1 = {variable_manager_0: variable_manager_0}
        str_0 = 'lDGxCM%oxFTb'
        dict_2 = {str_0: dict_1}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_2)
        var_1 = variable_manager_0.set_nonpersistent_facts(vars_with_sources_0, dict_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '-4'
        set_0 = set()
        dict_0 = {}
        variable_manager_0 = module_0.VariableManager(set_0, dict_0)
        list_0 = [dict_0]
        vars_with_sources_0 = module_0.VarsWithSources(*list_0, **dict_0)
        var_0 = vars_with_sources_0.copy()
        str_1 = 'file already exists but file attributes changed'
        var_1 = vars_with_sources_0.__setitem__(str_0, str_1)
        var_2 = variable_manager_0.set_inventory(str_0)
        str_2 = 'gYNyBHS0\n'
        dict_1 = {str_2: str_2}
        vars_with_sources_1 = module_0.VarsWithSources(**dict_1)
        var_3 = variable_manager_0.get_vars()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1.5
        bool_0 = False
        float_1 = -1430.0
        str_0 = 'z'
        variable_manager_0 = module_0.VariableManager(float_1, str_0)
        var_0 = variable_manager_0.set_host_facts(float_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = 'I3}'
        dict_0 = {str_0: str_0, str_0: variable_manager_0}
        var_0 = variable_manager_0.set_nonpersistent_facts(dict_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        variable_manager_0 = module_0.VariableManager()
        dict_0 = {variable_manager_0: variable_manager_0, variable_manager_0: variable_manager_0}
        list_0 = None
        var_0 = variable_manager_0.set_nonpersistent_facts(dict_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xfd)\x9a"\x81T\xa60o;\x8bf:\xba@x5 \xe1'
        str_0 = 'JB.6Mq+j{45x\x0c/'
        dict_0 = {str_0: str_0}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_0)
        var_0 = vars_with_sources_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'yd"hvcINh1Wd;'
        dict_0 = {str_0: str_0, str_0: str_0}
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__setitem__(str_0, dict_0)
        var_1 = vars_with_sources_0.__len__()
        bytes_0 = b'/\x17T\xbchg\x8a\x87\xbb\x0fgsSK\\I\x7f\xbd'
        list_0 = [bytes_0, bytes_0]
        list_1 = [list_0, bytes_0, list_0, bytes_0]
        dict_1 = {}
        vars_with_sources_1 = module_0.VarsWithSources(*list_1, **dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'^\xa7'
        set_0 = set()
        variable_manager_0 = module_0.VariableManager(set_0)
        str_0 = 'NIXub>'
        dict_0 = {str_0: set_0}
        variable_manager_1 = module_0.VariableManager()
        var_0 = variable_manager_1.set_host_facts(variable_manager_0, dict_0)
        variable_manager_2 = module_0.VariableManager(bytes_0)
        int_0 = 36
        float_0 = -1750.0
        dict_1 = {int_0: int_0, variable_manager_2: variable_manager_2, float_0: int_0, bytes_0: int_0}
        var_1 = variable_manager_2.set_host_variable(variable_manager_2, int_0, dict_1)
        var_2 = variable_manager_2.__getstate__()
        vars_with_sources_0 = module_0.VarsWithSources()
        var_3 = vars_with_sources_0.__iter__()
        var_4 = variable_manager_2.__getstate__()
        var_5 = vars_with_sources_0.__delitem__(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'usr/lib'
        dict_0 = {str_0: str_0}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_0)
        var_0 = vars_with_sources_0.__iter__()
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'^\xa7'
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__iter__()
        list_0 = [vars_with_sources_0, bytes_0, vars_with_sources_0]
        var_1 = module_0.preprocess_vars(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'^\xa7'
        set_0 = set()
        variable_manager_0 = module_0.VariableManager(set_0)
        str_0 = 'IXub>'
        dict_0 = {str_0: set_0}
        variable_manager_1 = module_0.VariableManager()
        var_0 = variable_manager_1.set_host_facts(variable_manager_0, dict_0)
        variable_manager_2 = module_0.VariableManager(bytes_0)
        var_1 = variable_manager_2.__getstate__()
        vars_with_sources_0 = module_0.VarsWithSources()
        var_2 = vars_with_sources_0.__iter__()
        int_0 = None
        set_1 = {int_0, bytes_0}
        var_3 = variable_manager_1.set_nonpersistent_facts(set_1, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = None
        variable_manager_0 = module_0.VariableManager(bytes_0)
        var_0 = variable_manager_0.__getstate__()
        set_0 = set()
        vars_with_sources_0 = module_0.VarsWithSources()
        var_1 = variable_manager_0.set_host_facts(set_0, vars_with_sources_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'^\xd1'
        float_0 = 348.0807
        dict_0 = None
        variable_manager_0 = module_0.VariableManager(float_0)
        list_0 = [variable_manager_0, bytes_0, bytes_0]
        variable_manager_1 = module_0.VariableManager(list_0, float_0)
        dict_1 = {float_0: bytes_0, float_0: variable_manager_1, variable_manager_0: bytes_0, dict_0: variable_manager_0}
        variable_manager_2 = module_0.VariableManager()
        var_0 = variable_manager_2.set_host_variable(float_0, dict_0, dict_1)
        dict_2 = {}
        variable_manager_3 = module_0.VariableManager()
        var_1 = variable_manager_3.__setstate__(dict_2)
        variable_manager_4 = module_0.VariableManager(bytes_0)
        var_2 = variable_manager_4.__getstate__()
        str_0 = 'discovered_interpreter_%s'
        list_1 = [bytes_0, variable_manager_4, str_0]
        vars_with_sources_0 = module_0.VarsWithSources(**dict_2)
        var_3 = vars_with_sources_0.__getitem__(list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'Tf4p8(al'
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.get_source(str_0)
        str_1 = 'z_d{uvE_F@"o\x0bLV6\nc\\='
        str_2 = 'Force overwriting an existing role or collection'
        float_0 = 392.19
        vars_with_sources_1 = module_0.VarsWithSources()
        variable_manager_0 = module_0.VariableManager(float_0, vars_with_sources_1)
        var_1 = variable_manager_0.__getstate__()
        set_0 = set()
        vars_with_sources_2 = module_0.VarsWithSources()
        bytes_0 = b'WHu\xb3\xca\xf3[\xf0(<'
        bool_0 = False
        str_3 = '[sudo via ansible, key=%s] password:'
        tuple_0 = (bytes_0, variable_manager_0, bool_0, str_3)
        complex_0 = None
        tuple_1 = (tuple_0, variable_manager_0, complex_0)
        tuple_2 = (tuple_1, variable_manager_0)
        var_2 = variable_manager_0.clear_facts(tuple_2)
        var_3 = vars_with_sources_2.__setitem__(str_1, set_0)
        str_4 = 'V\\\rFIFH\x0c9n8"X^'
        dict_0 = {str_1: str_1, str_1: str_1, str_2: str_1, str_4: str_2}
        vars_with_sources_3 = module_0.VarsWithSources(**dict_0)
        list_0 = [vars_with_sources_3, vars_with_sources_3, str_4]
        var_4 = vars_with_sources_3.__getitem__(str_1)
        vars_with_sources_4 = module_0.VarsWithSources(*list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'^\xa7'
        set_0 = set()
        list_0 = []
        vars_with_sources_0 = module_0.VarsWithSources(*list_0)
        var_0 = vars_with_sources_0.copy()
        variable_manager_0 = module_0.VariableManager(set_0)
        str_0 = 'NIXub>'
        dict_0 = {str_0: set_0}
        variable_manager_1 = module_0.VariableManager()
        var_1 = vars_with_sources_0.copy()
        var_2 = variable_manager_1.set_host_facts(variable_manager_0, dict_0)
        variable_manager_2 = module_0.VariableManager(bytes_0)
        int_0 = 36
        float_0 = -1750.0
        dict_1 = {int_0: int_0, variable_manager_2: variable_manager_2, float_0: int_0, bytes_0: int_0}
        var_3 = variable_manager_2.set_host_variable(variable_manager_2, int_0, dict_1)
        var_4 = variable_manager_0.set_inventory(dict_0)
        var_5 = vars_with_sources_0.__len__()
        var_6 = vars_with_sources_0.__iter__()
        var_7 = variable_manager_2.__getstate__()
        bytes_1 = b'E\x951}\xedv\x05\xdb\x8fy\x0f\xd7s\xa5\x89\xdfh~\xcf'
        var_8 = variable_manager_2.set_host_variable(variable_manager_2, dict_1, bytes_1)
    except BaseException:
        pass