

# Generated at 2024-06-03 01:07:32.063193
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:36.592320
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:07:38.534612
```python
    tree = ast.parse("a = 1\nb = 2")
    new_node = ast.parse("c = 3").body[0]
    parent = tree.body[0]
    
    insert_at(1, tree, new_node)
    
    assert len(tree.body) == 3
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'c'
    assert tree.body[1].value.n == 3
```

# Generated at 2024-06-03 01:07:40.024132


# Generated at 2024-06-03 01:07:40.591311
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:42.226267
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:42.784140
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:43.250739
```python
    source = """

# Generated at 2024-06-03 01:07:46.359782
```python
    tree = ast.parse("a = 1\nb = 2")
    new_node = ast.parse("c = 3").body[0]
    parent = tree.body[0]
    
    insert_at(1, tree, new_node)
    
    assert len(tree.body) == 3
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'c'
    assert tree.body[1].value.n == 3
```

# Generated at 2024-06-03 01:07:46.935711
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:54.302942
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:55.129417
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:55.712922
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:56.322315
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:07:56.889173
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:00.346312
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].value
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:08:01.047106
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:02.143877
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:02.757935
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:03.359424
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:09.777394
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment (b = 2) with a new assignment (b = 42)
    new_node = ast.parse("b = 42").body[0]
    parent, index = get_non_exp_parent_and_index(tree, assign_nodes[1])
    replace_at(index, parent, new_node)
    
    # Check if the replacement was successful
    assert isinstance(parent.body[index], ast.Assign)
    assert isinstance(parent.body[index].targets[0], ast.Name)
    assert parent.body[index].targets[0].id == 'b'
    assert isinstance(parent.body[index].value, ast.Constant)
    assert parent.body[index].value.value == 42
```

# Generated at 2024-06-03 01:08:12.855332
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0].targets[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:08:13.422076
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:13.944324
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:14.487384
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:15.059794
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:15.635570
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:16.203009
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:18.148054
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    result = list(find(tree, ast.Assign))
    assert len(result) == 2
    assert isinstance(result[0], ast.Assign)
    assert isinstance(result[1], ast.Assign)
    assert result[0].targets[0].id == 'a'
    assert result[1].targets[0].id == 'b'
```

# Generated at 2024-06-03 01:08:19.223934
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:23.570034
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:24.098878
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:24.635362
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:25.153328
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:25.778792
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:26.280556
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:27.099379
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:27.670566
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:30.528103
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0].targets[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:08:33.408082
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    # Test case 1: Get parent of a node
    node = tree.body[2].value  # c = a + b, node is BinOp
    parent = get_parent(tree, node)
    assert parent == tree.body[2], "Test case 1 failed"

    # Test case 2: Node not in _parents, rebuild is False
    node = ast.parse("d = 3").body[0]
    try:
        get_parent(tree, node)
    except NodeNotFound:
        pass
    else:
        assert False, "Test case 2 failed"

    # Test case 3: Node not in _parents, rebuild is True
    node = ast.parse("d = 3").body[0]
    parent = get_parent(tree, node, rebuild

# Generated at 2024-06-03 01:08:37.091506
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:37.714614
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:38.268925
```python
    source = """

# Generated at 2024-06-03 01:08:40.708938
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment (b = 2) with a new assignment (d = 4)
    new_node = ast.parse("d = 4").body[0]
    replace_at(1, tree.body, new_node)
    
    # Check if the replacement was successful
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'd'
    assert tree.body[1].value.n == 4
```

# Generated at 2024-06-03 01:08:41.256880
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:41.897398
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:42.592874
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:43.187791
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:47.708817
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:08:48.262635
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:52.229787
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:54.821120
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    parent = tree.body[0]
    new_node = ast.parse("d = 4").body[0]
    
    # Replace the first node
    replace_at(0, tree, new_node)
    assert isinstance(tree.body[0], ast.Assign)
    assert tree.body[0].targets[0].id == 'd'
    assert tree.body[0].value.n == 4

    # Replace the second node
    new_node = ast.parse("e = 5").body[0]
    replace_at(1, tree, new_node)
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'e'
    assert tree.body[1].value.n == 5

    # Replace with multiple nodes
    new_nodes = ast.parse("f = 6\

# Generated at 2024-06-03 01:08:57.980240
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:08:58.638366
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:59.288455
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:08:59.897740
```python
    source = """

# Generated at 2024-06-03 01:09:00.497355
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:01.021869
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:04.208169
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].value
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:09:09.305386
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment (b = 2) with a new assignment (d = 4)
    new_node = ast.parse("d = 4").body[0]
    replace_at(1, tree.body[0], new_node)
    
    # Check if the replacement was successful
    assert isinstance(tree.body[0].body[1], ast.Assign)
    assert tree.body[0].body[1].targets[0].id == 'd'
    assert tree.body[0].body[1].value.n == 4
```

# Generated at 2024-06-03 01:09:13.085359
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:14.917303
```python
    tree = ast.parse("a = 1\nb = 2")
    new_node = ast.parse("c = 3").body[0]
    parent = tree.body[0].parent

    insert_at(1, tree, new_node)
    
    assert len(tree.body) == 3
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'c'
    assert tree.body[1].value.n == 3
```

# Generated at 2024-06-03 01:09:15.575015
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:18.941864
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:09:21.372273
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment (b = 2) with a new assignment (d = 4)
    new_node = ast.parse("d = 4").body[0]
    replace_at(1, tree.body[0], new_node)
    
    # Check if the replacement was successful
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'd'
    assert tree.body[1].value.n == 4
```

# Generated at 2024-06-03 01:09:24.859144
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:09:27.297247
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment (b = 2) with a new assignment (d = 4)
    new_node = ast.parse("d = 4").body[0]
    parent, index = get_non_exp_parent_and_index(tree, assign_nodes[1])
    replace_at(index, parent, new_node)
    
    # Check if the replacement was successful
    assert isinstance(parent.body[index], ast.Assign)
    assert parent.body[index].targets[0].id == 'd'
    assert parent.body[index].value.n == 4
```

# Generated at 2024-06-03 01:09:27.895742
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:31.132126
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:09:33.176743
```python
    tree = ast.parse("a = 1\nb = 2")
    new_node = ast.parse("c = 3").body[0]
    parent = tree.body[0]
    
    insert_at(1, tree, new_node)
    
    assert len(tree.body) == 3
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'c'
    assert tree.body[1].value.n == 3
```

# Generated at 2024-06-03 01:09:37.883661
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:38.446175
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:39.076936
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:39.607369
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:42.233010
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.Name(id='d', ctx=ast.Load()))
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:09:42.806604
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:43.503702
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:46.126500
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].value
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3"))
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:09:50.650631
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_assign = tree.body[0]
    b_assign = tree.body[1]
    c_assign = tree.body[2]
    
    assert get_parent(tree, a_assign) == tree
    assert get_parent(tree, b_assign) == tree
    assert get_parent(tree, c_assign) == tree
    
    a_name = a_assign.targets[0]
    b_name = b_assign.targets[0]
    c_name = c_assign.targets[0]
    
    assert get_parent(tree, a_name) == a_assign
    assert get_parent(tree, b_name) == b_assign
    assert get_parent(tree, c_name) == c_assign
    
    c_value = c_assign.value
    assert get_parent(tree, c_value) == c_assign
    
    c_left = c_value.left
    c_right =

# Generated at 2024-06-03 01:09:51.392129
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:56.136953
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:09:59.896954
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].value
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:10:00.442513
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:01.087247
```python
    source = """

# Generated at 2024-06-03 01:10:05.684017
```python
    # Create a sample AST
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:06.266089
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:08.539721
```python
    tree = ast.parse("a = 1\nb = 2")
    new_node = ast.parse("c = 3").body[0]
    parent = tree.body[0]
    
    insert_at(1, tree, new_node)
    
    assert len(tree.body) == 3
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'c'
    assert tree.body[1].value.n == 3
```

# Generated at 2024-06-03 01:10:11.745969
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_assign = tree.body[0]
    b_assign = tree.body[1]
    c_assign = tree.body[2]
    
    assert get_parent(tree, a_assign) == tree
    assert get_parent(tree, b_assign) == tree
    assert get_parent(tree, c_assign) == tree
    
    a_name = a_assign.targets[0]
    b_name = b_assign.targets[0]
    c_name = c_assign.targets[0]
    
    assert get_parent(tree, a_name) == a_assign
    assert get_parent(tree, b_name) == b_assign
    assert get_parent(tree, c_name) == c_assign
    
    a_value = a_assign.value
    b_value = b_assign.value
    c_value = c_assign.value
    
    assert get_parent(tree, a_value)

# Generated at 2024-06-03 01:10:12.337774
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:12.917728
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:23.001071
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment with a new one
    new_node = ast.parse("d = 4").body[0]
    parent, index = get_non_exp_parent_and_index(tree, assign_nodes[1])
    replace_at(index, parent, new_node)
    
    # Check if the replacement was successful
    assert isinstance(parent.body[index], ast.Assign)
    assert parent.body[index].targets[0].id == 'd'
    assert parent.body[index].value.n == 4
```

# Generated at 2024-06-03 01:10:23.527306
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:24.033897
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:24.572418
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:25.116176
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:25.945177
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:28.830070
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:10:31.902863
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:10:32.526241
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:33.089495
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:38.746031
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:43.370491
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].value
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:10:43.901635
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:46.508723
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment (b = 2) with a new assignment (d = 4)
    new_node = ast.parse("d = 4").body[0]
    parent, index = get_non_exp_parent_and_index(tree, assign_nodes[1])
    replace_at(index, parent, new_node)
    
    # Check if the replacement was successful
    assert isinstance(parent.body[index], ast.Assign)
    assert parent.body[index].targets[0].id == 'd'
    assert parent.body[index].value.n == 4
```

# Generated at 2024-06-03 01:10:47.063177
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:47.566169
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:50.450032
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].value
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:10:51.003662
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:53.798699
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:10:54.394266
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:10:59.971038
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:00.729035
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:01.301946
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:01.887761
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:02.547279
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:05.837762
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].value
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:11:09.593173
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_assign = tree.body[0]
    b_assign = tree.body[1]
    c_assign = tree.body[2]
    
    assert get_parent(tree, a_assign) == tree
    assert get_parent(tree, b_assign) == tree
    assert get_parent(tree, c_assign) == tree
    
    a_name = a_assign.targets[0]
    b_name = b_assign.targets[0]
    c_name = c_assign.targets[0]
    c_value = c_assign.value
    
    assert get_parent(tree, a_name) == a_assign
    assert get_parent(tree, b_name) == b_assign
    assert get_parent(tree, c_name) == c_assign
    assert get_parent(tree, c_value) == c_assign
```

# Generated at 2024-06-03 01:11:11.643251
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    parent = tree.body[0].parent
    new_node = ast.parse("d = 4").body[0]
    replace_at(1, parent, new_node)
    assert isinstance(parent.body[1], ast.Assign)
    assert parent.body[1].targets[0].id == 'd'
    assert parent.body[1].value.n == 4
```

# Generated at 2024-06-03 01:11:12.173845
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:12.731743
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:18.296773
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:21.364992
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment (b = 2) with a new assignment (d = 4)
    new_node = ast.parse("d = 4").body[0]
    replace_at(1, tree.body[0], new_node)
    
    # Check if the replacement was successful
    assert isinstance(tree.body[1], ast.Assign)
    assert tree.body[1].targets[0].id == 'd'
    assert tree.body[1].value.n == 4
```

# Generated at 2024-06-03 01:11:21.924531
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:24.161016
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    parent = tree.body[0].parent
    new_node = ast.parse("d = 4").body[0]
    replace_at(1, parent, new_node)
    assert isinstance(parent.body[1], ast.Assign)
    assert parent.body[1].targets[0].id == 'd'
    assert parent.body[1].value.n == 4
```

# Generated at 2024-06-03 01:11:24.693919
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:25.324892
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:26.100351
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:29.158337
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].targets[0]
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    # Test with rebuild
    assert get_parent(tree, a_node, rebuild=True) == tree.body[0]
    
    # Test NodeNotFound exception
    try:
        get_parent(tree, ast.parse("d = 3").body[0])
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:11:29.830354
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:32.818914
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    _build_parents(tree)
    
    a_node = tree.body[0].targets[0]
    b_node = tree.body[1].targets[0]
    c_node = tree.body[2].value
    
    assert get_parent(tree, a_node) == tree.body[0]
    assert get_parent(tree, b_node) == tree.body[1]
    assert get_parent(tree, c_node) == tree.body[2]
    
    try:
        get_parent(tree, ast.parse("d = 3"))
    except NodeNotFound:
        pass
    else:
        assert False, "Expected NodeNotFound exception"
```

# Generated at 2024-06-03 01:11:38.586208
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:39.277424
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:41.478375
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    node_to_replace = tree.body[1]
    new_node = ast.parse("d = 4").body[0]

    parent = get_parent(tree, node_to_replace)
    index = parent.body.index(node_to_replace)

    replace_at(index, parent, new_node)

    assert isinstance(parent.body[index], ast.Assign)
    assert parent.body[index].targets[0].id == 'd'
    assert parent.body[index].value.n == 4
```

# Generated at 2024-06-03 01:11:42.070173
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:42.632211
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:43.227029
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:43.814254
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:44.350149
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:44.917116
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:45.486838
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:52.916796
```python
    tree = ast.parse("a = 1\nb = 2\nc = 3")
    _build_parents(tree)
    
    # Find the assignment nodes
    assign_nodes = list(find(tree, ast.Assign))
    
    # Replace the second assignment (b = 2) with a new assignment (d = 4)
    new_node = ast.parse("d = 4").body[0]
    parent, index = get_non_exp_parent_and_index(tree, assign_nodes[1])
    replace_at(index, parent, new_node)
    
    # Check if the replacement was successful
    assert isinstance(parent.body[index], ast.Assign)
    assert parent.body[index].targets[0].id == 'd'
    assert parent.body[index].value.n == 4
```

# Generated at 2024-06-03 01:11:53.690689
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:54.175518
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:54.987674
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:57.228742
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    result = list(find(tree, ast.Assign))
    assert len(result) == 2
    assert isinstance(result[0], ast.Assign)
    assert isinstance(result[1], ast.Assign)
    assert result[0].targets[0].id == 'a'
    assert result[1].targets[0].id == 'b'
```

# Generated at 2024-06-03 01:11:57.897122
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:58.440898
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:11:58.939274
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:01.052156
```python
    tree = ast.parse("a = 1\nb = 2\nc = a + b")
    result = list(find(tree, ast.Assign))
    assert len(result) == 2
    assert isinstance(result[0], ast.Assign)
    assert isinstance(result[1], ast.Assign)
    assert result[0].targets[0].id == 'a'
    assert result[1].targets[0].id == 'b'
```

# Generated at 2024-06-03 01:12:01.563502
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:07.024291
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:07.538765
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:08.078573
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:08.653311
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:09.385200
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:09.986748
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:10.602278
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:11.122304
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:11.657936
```python
    tree = ast.parse("""

# Generated at 2024-06-03 01:12:12.216065
```python
    tree = ast.parse("""