

# Generated at 2024-06-01 17:59:59.219114
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:00:00.742266
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:00:02.537257
```python
    args = ["return"]
    description = "This is a return description."
    type_name = "int"
    is_generator = False
    return_name = "result"

    docstring_returns = DocstringReturns(args, description, type_name, is_generator, return_name)

    assert docstring_returns.args == args
    assert docstring_returns.description == description
    assert docstring_returns.type_name == type_name
    assert docstring_returns.is_generator == is_generator
    assert docstring_returns.return_name == return_name
```

# Generated at 2024-06-01 18:00:03.393799
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:04.588086
```python
    args = ["deprecated"]
    description = "This method is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:00:06.835585
```python
    args = ["return"]
    description = "This is a return description."
    type_name = "int"
    is_generator = False
    return_name = "result"

    docstring_returns = DocstringReturns(args, description, type_name, is_generator, return_name)

    assert docstring_returns.args == args
    assert docstring_returns.description == description
    assert docstring_returns.type_name == type_name
    assert docstring_returns.is_generator == is_generator
    assert docstring_returns.return_name == return_name
```

# Generated at 2024-06-01 18:00:07.974466
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:08.900672
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:10.187668
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:00:11.788947
```python
    args = ["deprecated"]
    description = "This feature is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:00:17.424228
```python
    docstring = Docstring()
    assert docstring.short_description is None
    assert docstring.long_description is None
    assert docstring.blank_after_short_description is False
    assert docstring.blank_after_long_description is False
    assert docstring.meta == []
```

# Generated at 2024-06-01 18:00:18.802827
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:00:20.144753
```python
    args = ["deprecated"]
    description = "This feature is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:00:20.957873
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:23.462960
```python
    args = ["param"]
    description = "This is a parameter"
    arg_name = "param1"
    type_name = "str"
    is_optional = True
    default = "default_value"

    param = DocstringParam(args, description, arg_name, type_name, is_optional, default)

    assert param.args == args
    assert param.description == description
    assert param.arg_name == arg_name
    assert param.type_name == type_name
    assert param.is_optional == is_optional
    assert param.default == default
```

# Generated at 2024-06-01 18:00:26.051849
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:00:27.093474
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:00:29.279422
```python
    args = ["param"]
    description = "This is a parameter"
    arg_name = "param1"
    type_name = "str"
    is_optional = True
    default = "default_value"

    docstring_param = DocstringParam(args, description, arg_name, type_name, is_optional, default)

    assert docstring_param.args == args
    assert docstring_param.description == description
    assert docstring_param.arg_name == arg_name
    assert docstring_param.type_name == type_name
    assert docstring_param.is_optional == is_optional
    assert docstring_param.default == default
```

# Generated at 2024-06-01 18:00:31.124916
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:00:32.729037
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:00:43.336040
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:00:44.861196
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:00:48.709604
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:00:50.015090
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:52.825681
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:00:54.268349
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:55.349079
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:56.278140
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:57.270042
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:00:58.352718
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:01:17.494596
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:01:18.504709
```python
    docstring = Docstring()
    assert docstring.short_description is None
    assert docstring.long_description is None
    assert docstring.blank_after_short_description is False
    assert docstring.blank_after_long_description is False
    assert docstring.meta == []
```

# Generated at 2024-06-01 18:01:19.898136
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:01:22.362125
```python
    args = ["param"]
    description = "This is a parameter"
    arg_name = "param1"
    type_name = "str"
    is_optional = True
    default = "default_value"

    param = DocstringParam(args, description, arg_name, type_name, is_optional, default)

    assert param.args == args
    assert param.description == description
    assert param.arg_name == arg_name
    assert param.type_name == type_name
    assert param.is_optional == is_optional
    assert param.default == default
```

# Generated at 2024-06-01 18:01:23.826316
```python
    docstring = Docstring()
    assert docstring.short_description is None
    assert docstring.long_description is None
    assert docstring.blank_after_short_description is False
    assert docstring.blank_after_long_description is False
    assert docstring.meta == []
```

# Generated at 2024-06-01 18:01:26.311124
```python
    args = ["param"]
    description = "This is a parameter"
    arg_name = "param1"
    type_name = "str"
    is_optional = True
    default = "default_value"

    param = DocstringParam(args, description, arg_name, type_name, is_optional, default)

    assert param.args == args
    assert param.description == description
    assert param.arg_name == arg_name
    assert param.type_name == type_name
    assert param.is_optional == is_optional
    assert param.default == default
```

# Generated at 2024-06-01 18:01:27.172373
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:01:28.358136
```python
    args = ["deprecated"]
    description = "This method is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:01:29.785790
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:01:31.000796
```python
    docstring = Docstring()
    assert docstring.short_description is None
    assert docstring.long_description is None
    assert docstring.blank_after_short_description is False
    assert docstring.blank_after_long_description is False
    assert docstring.meta == []
```

# Generated at 2024-06-01 18:02:11.002159
```python
    args = ["deprecated"]
    description = "This method is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:02:12.135568
```python
    docstring = Docstring()
    assert docstring.short_description is None
    assert docstring.long_description is None
    assert docstring.blank_after_short_description is False
    assert docstring.blank_after_long_description is False
    assert docstring.meta == []
```

# Generated at 2024-06-01 18:02:13.009982
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:02:14.044154
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:02:15.048257
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:02:16.675735
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:02:18.478961
```python
    args = ["param"]
    description = "This is a parameter"
    arg_name = "param1"
    type_name = "str"
    is_optional = True
    default = "default_value"

    param = DocstringParam(args, description, arg_name, type_name, is_optional, default)

    assert param.args == args
    assert param.description == description
    assert param.arg_name == arg_name
    assert param.type_name == type_name
    assert param.is_optional == is_optional
    assert param.default == default
```

# Generated at 2024-06-01 18:02:19.730363
```python
    args = ["deprecated"]
    description = "This method is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:02:21.424113
```python
    args = ["return"]
    description = "This is a return description."
    type_name = "int"
    is_generator = False
    return_name = "result"

    docstring_returns = DocstringReturns(args, description, type_name, is_generator, return_name)

    assert docstring_returns.args == args
    assert docstring_returns.description == description
    assert docstring_returns.type_name == type_name
    assert docstring_returns.is_generator == is_generator
    assert docstring_returns.return_name == return_name
```

# Generated at 2024-06-01 18:02:22.580202
```python
    args = ["param1", "param2"]
    description = "This is a description."
    meta = DocstringMeta(args, description)
    assert meta.args == args
    assert meta.description == description
```

# Generated at 2024-06-01 18:03:38.192438
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:03:39.401369
```python
    docstring = Docstring()
    assert docstring.short_description is None
    assert docstring.long_description is None
    assert docstring.blank_after_short_description is False
    assert docstring.blank_after_long_description is False
    assert docstring.meta == []
```

# Generated at 2024-06-01 18:03:41.902327
```python
    args = ["return"]
    description = "This is a return description."
    type_name = "int"
    is_generator = False
    return_name = "result"

    docstring_returns = DocstringReturns(args, description, type_name, is_generator, return_name)

    assert docstring_returns.args == args
    assert docstring_returns.description == description
    assert docstring_returns.type_name == type_name
    assert docstring_returns.is_generator == is_generator
    assert docstring_returns.return_name == return_name
```

# Generated at 2024-06-01 18:03:43.431983
```python
    args = ["ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:03:44.589595
```python
    docstring = Docstring()
    assert docstring.short_description is None
    assert docstring.long_description is None
    assert docstring.blank_after_short_description is False
    assert docstring.blank_after_long_description is False
    assert docstring.meta == []
```

# Generated at 2024-06-01 18:03:46.783516
```python
    args = ["return"]
    description = "This is a return description."
    type_name = "int"
    is_generator = False
    return_name = "result"

    docstring_returns = DocstringReturns(args, description, type_name, is_generator, return_name)

    assert docstring_returns.args == args
    assert docstring_returns.description == description
    assert docstring_returns.type_name == type_name
    assert docstring_returns.is_generator == is_generator
    assert docstring_returns.return_name == return_name
```

# Generated at 2024-06-01 18:03:48.250490
```python
    args = ["deprecated"]
    description = "This method is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:03:50.240163
```python
    args = ["return"]
    description = "This is a return description."
    type_name = "int"
    is_generator = False
    return_name = "result"

    docstring_returns = DocstringReturns(args, description, type_name, is_generator, return_name)

    assert docstring_returns.args == args
    assert docstring_returns.description == description
    assert docstring_returns.type_name == type_name
    assert docstring_returns.is_generator == is_generator
    assert docstring_returns.return_name == return_name
```

# Generated at 2024-06-01 18:03:51.896640
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:03:53.805558
```python
    docstring = Docstring()
    assert docstring.short_description is None
    assert docstring.long_description is None
    assert docstring.blank_after_short_description is False
    assert docstring.blank_after_long_description is False
    assert docstring.meta == []
```

# Generated at 2024-06-01 18:06:22.757309
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:06:24.649622
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:06:26.202869
```python
    args = ["raises", "ValueError"]
    description = "if something goes wrong"
    type_name = "ValueError"
    
    docstring_raises = DocstringRaises(args, description, type_name)
    
    assert docstring_raises.args == args
    assert docstring_raises.description == description
    assert docstring_raises.type_name == type_name
```

# Generated at 2024-06-01 18:06:28.045128
```python
    args = ["return"]
    description = "This is a return description."
    type_name = "int"
    is_generator = False
    return_name = "result"

    docstring_returns = DocstringReturns(args, description, type_name, is_generator, return_name)

    assert docstring_returns.args == args
    assert docstring_returns.description == description
    assert docstring_returns.type_name == type_name
    assert docstring_returns.is_generator == is_generator
    assert docstring_returns.return_name == return_name
```

# Generated at 2024-06-01 18:06:29.356541
```python
    args = ["deprecated"]
    description = "This method is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:06:31.572678
```python
    args = ["param"]
    description = "This is a parameter"
    arg_name = "param1"
    type_name = "str"
    is_optional = True
    default = "default_value"

    param = DocstringParam(args, description, arg_name, type_name, is_optional, default)

    assert param.args == args
    assert param.description == description
    assert param.arg_name == arg_name
    assert param.type_name == type_name
    assert param.is_optional == is_optional
    assert param.default == default
```

# Generated at 2024-06-01 18:06:34.275734
```python
    args = ["param"]
    description = "This is a parameter"
    arg_name = "param1"
    type_name = "str"
    is_optional = True
    default = "default_value"

    docstring_param = DocstringParam(args, description, arg_name, type_name, is_optional, default)

    assert docstring_param.args == args
    assert docstring_param.description == description
    assert docstring_param.arg_name == arg_name
    assert docstring_param.type_name == type_name
    assert docstring_param.is_optional == is_optional
    assert docstring_param.default == default
```

# Generated at 2024-06-01 18:06:35.178242
```python
    try:
        raise ParseError("This is a parse error")
    except ParseError as e:
        assert str(e) == "This is a parse error"
```

# Generated at 2024-06-01 18:06:36.586551
```python
    args = ["deprecated"]
    description = "This feature is deprecated."
    version = "1.0.0"
    
    deprecated_meta = DocstringDeprecated(args, description, version)
    
    assert deprecated_meta.args == args
    assert deprecated_meta.description == description
    assert deprecated_meta.version == version
```

# Generated at 2024-06-01 18:06:38.265429
```python
    args = ["return"]
    description = "This is a return description."
    type_name = "int"
    is_generator = False
    return_name = "result"

    docstring_returns = DocstringReturns(args, description, type_name, is_generator, return_name)

    assert docstring_returns.args == args
    assert docstring_returns.description == description
    assert docstring_returns.type_name == type_name
    assert docstring_returns.is_generator == is_generator
    assert docstring_returns.return_name == return_name
```