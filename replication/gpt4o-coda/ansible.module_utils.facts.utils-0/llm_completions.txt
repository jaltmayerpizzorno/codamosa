

# Generated at 2024-05-31 07:02:21.185816
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:02:27.225392
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:02:30.969933
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:02:34.636168
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:02:39.495848
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:02:44.170278
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default content") == "default content"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name

    os.chmod(temp_file_path, 0o000)
    assert get_file_content(temp_file_path, default="default content") == "default content"
    os.chmod(temp_file_path, 0o666)
   

# Generated at 2024-05-31 07:02:48.031479
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:02:51.025641
```python
    # Test when file does not exist
    assert get_file_content('/non/existent/path') is None

    # Test when file exists and is readable
    test_path = '/tmp/test_file'
    with open(test_path, 'w') as f:
        f.write('  test content  ')
    
    assert get_file_content(test_path) == 'test content'
    assert get_file_content(test_path, strip=False) == '  test content  '
    
    # Test with default value
    assert get_file_content('/non/existent/path', default='default content') == 'default content'
    
    # Clean up
    os.remove('/tmp/test_file')
```

# Generated at 2024-05-31 07:02:57.217692
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:03:01.045771
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:03:09.142909
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:03:12.292831
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:03:17.474038
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:03:21.277156
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:03:25.186299
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    os.chmod(temp_file_path, 0o000)
    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)
   

# Generated at 2024-05-31 07:03:28.227426
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("/non/existent/path", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  # Restore

# Generated at 2024-05-31 07:03:31.741138
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o644)  #

# Generated at 2024-05-31 07:03:35.537681
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == []



# Generated at 2024-05-31 07:03:38.859113
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:03:45.431372
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:03:56.762214
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:04:00.433725
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:04:04.019803
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:04:11.304167
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:04:16.575993
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    os.chmod(temp_file_path, 0o000)
    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)
   

# Generated at 2024-05-31 07:04:19.879991
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:04:27.431673
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:04:32.510494
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:04:36.729160
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:04:40.905958
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:04:49.046087
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:04:53.017389
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:04:56.485139
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:05:01.194224
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:05:05.451490
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:05:09.198106
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:05:13.923171
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:05:18.772921
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:05:22.557822
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:05:26.066986
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:05:32.814550
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=';') == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:05:35.431827
```python
    # Test when file does not exist
    assert get_file_content('/non/existent/path') is None

    # Test when file exists and is readable
    test_path = '/tmp/test_file'
    with open(test_path, 'w') as f:
        f.write('  test content  ')
    
    assert get_file_content(test_path) == 'test content'
    assert get_file_content(test_path, strip=False) == '  test content  '
    
    # Test with default value
    assert get_file_content('/non/existent/path', default='default content') == 'default content'
    
    # Clean up
    os.remove('/tmp/test_file')
```

# Generated at 2024-05-31 07:05:39.627335
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:05:46.573381
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:05:50.669192
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:05:54.102593
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:06:00.289258
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"

    # Test case 4: File exists and is readable, but strip

# Generated at 2024-05-31 07:06:05.969164
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:06:09.964824

    import tempfile
    import os

    # Test case 1: File exists and contains data
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File exists but is empty
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path, default="default content") == "default content"
    os.remove(temp_file_path)

    # Test case 3: File does not exist
    assert get_file_content("non_existent_file.txt", default="default content") == "default content"

    # Test case 4: File exists and contains data, strip=False
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:


# Generated at 2024-05-31 07:06:13.848948
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    os.chmod(temp_file_path, 0o000)
    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o666)
   

# Generated at 2024-05-31 07:06:21.448531
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:06:25.888778
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:06:29.844155
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default content") == "default content"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name

    os.chmod(temp_file_path, 0o000)
    assert get_file_content(temp_file_path, default="default content") == "default content"
    os.chmod(temp_file_path, 0o777)
   

# Generated at 2024-05-31 07:06:32.781624
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File does not exist
    assert get_file_content("/non/existent/path", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name

    os.chmod(temp_file_path, 0o000)
    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o666)
    os

# Generated at 2024-05-31 07:06:38.305288
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:06:42.763817
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:06:46.210995
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:06:50.889097
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:06:55.260522
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=';') == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:06:59.570101
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:07:07.635870
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("/non/existent/path", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  # Restore

# Generated at 2024-05-31 07:07:11.618677
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:07:17.891482
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:07:22.537729
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:07:26.919457
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:07:30.750952
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=';') == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == []



# Generated at 2024-05-31 07:07:34.783702
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:07:37.955629
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:07:41.968577
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:07:45.435096
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:07:52.322904
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:07:56.407435
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:08:00.372770
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == []



# Generated at 2024-05-31 07:08:04.145249
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:08:07.764144
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("/non/existent/path", default="default content") == "default content"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default content") == "default content"

    # Test case 4: File exists and is readable, but strip is

# Generated at 2024-05-31 07:08:11.708261
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:08:16.418826
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:08:21.529650
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:08:25.201126
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:08:28.608109
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:08:38.953204
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:08:43.408155
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:08:47.571939
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:08:51.032311
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:08:55.475091
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:08:59.469463
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:09:03.901015
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:09:08.211210
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:09:12.590934
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:09:16.198237
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:09:26.630777
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:09:30.502864
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:09:37.075230
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == []



# Generated at 2024-05-31 07:09:44.449905
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    os.chmod(temp_file_path, 0o000)
    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o666)
   

# Generated at 2024-05-31 07:09:47.663508
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:09:51.899296
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:09:55.818426
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:10:00.259666
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:10:08.584376
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:10:12.504954
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:10:22.049317
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=';') == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:10:27.655815
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:10:31.072709
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:10:34.402193
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:10:38.493099
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"

    # Test case 4: File exists and is readable, but strip

# Generated at 2024-05-31 07:10:43.133473
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("/non/existent/path", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"

    # Test case 4: File exists and is readable, but strip is

# Generated at 2024-05-31 07:10:46.961237
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:10:50.024263
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:10:54.571337
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=';') == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:11:00.309329
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:11:16.512302
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:11:23.846426
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:11:27.296888
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("/non/existent/path", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"

    # Test case 4: File exists and is readable, but strip is

# Generated at 2024-05-31 07:11:30.587531
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"
    os.remove(temp_file_path)

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    os.chmod(temp_file_path, 0o000)
    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)
   

# Generated at 2024-05-31 07:11:34.173408
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:11:41.454013
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1|line2|line3|")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep="|") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:11:45.113081
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:11:52.217571
```python
    import tempfile

    # Test case 1: File exists and is readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Hello, World!")
        temp_file_path = temp_file.name

    assert get_file_content(temp_file_path) == "Hello, World!"

    # Test case 2: File does not exist
    assert get_file_content("non_existent_file.txt", default="default_value") == "default_value"

    # Test case 3: File exists but is not readable
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"Unreadable content")
        temp_file_path = temp_file.name
    os.chmod(temp_file_path, 0o000)  # Remove read permissions

    assert get_file_content(temp_file_path, default="default_value") == "default_value"
    os.chmod(temp_file_path, 0o777)  #

# Generated at 2024-05-31 07:11:55.818133
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1,line2,line3,")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=",") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file

# Generated at 2024-05-31 07:11:59.143157
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file

# Generated at 2024-05-31 07:12:14.894765
```python
    import tempfile

    # Test case 1: File with multiple lines
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1\nline2\nline3\n")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path) == ["line1", "line2", "line3"]

    # Test case 2: File with custom line separator
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"line1;line2;line3;")
        temp_file_path = temp_file.name

    assert get_file_lines(temp_file_path, line_sep=";") == ["line1", "line2", "line3"]

    # Test case 3: Empty file
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        temp_file.write(b"")
        temp_file_path = temp_file.name

    assert get_file