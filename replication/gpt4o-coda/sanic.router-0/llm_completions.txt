

# Generated at 2024-06-03 07:48:02.073314
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:03.207585
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:06.326420
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route: /test/<__invalid__>>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:48:08.917178
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    
    # Check if the routes are finalized correctly
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Add a route with invalid parameter names
    router.add("/invalid/<__param__>", ["GET"], lambda x: x)
    
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/invalid/<__param__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid parameter names"
```

# Generated at 2024-06-03 07:48:11.546002
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__invalid__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:48:13.328926
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:48:14.417321
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:16.949140
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    
    # Check if the routes are finalized correctly
    assert len(router.routes_all) > 0
    assert isinstance(router.routes_all, dict)
    
    # Check for invalid route labels
    try:
        router.add("/invalid/<__param__>", ["GET"], lambda x: x)
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route object>. Parameter names cannot use '__'."
```

# Generated at 2024-06-03 07:48:18.337765
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:20.561054
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:48:27.689574
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:28.641146
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:29.808583
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:31.525914
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:48:33.507258
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:35.443387
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:48:36.604195
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:38.527902
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
    assert router.routes_all == []
    assert router.routes_static == []
    assert router.routes_dynamic == {}
    assert router.routes_regex == []
```

# Generated at 2024-06-03 07:48:40.640064
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid parameter names"
```

# Generated at 2024-06-03 07:48:41.813133
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:48:56.577308
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__invalid__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:48:59.963330
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_dynamic, "Dynamic routes should not be empty after finalization"
    
    # Test with invalid route
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__invalid__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:49:01.815867
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:49:03.413735
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:49:06.542983
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route: /test/<__invalid__>>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:49:07.689216
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:49:08.795596
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:49:12.193538
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__invalid__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:49:14.592194
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:49:17.164263
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    
    # Check that the routes are finalized correctly
    assert len(router.routes_all) > 0

    # Add a route with invalid parameter names
    router.add("/invalid/<__param__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route object>. Parameter names cannot use '__'."
```

# Generated at 2024-06-03 07:49:43.774239
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:49:48.984718
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:49:51.560848
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/<__invalid__>/test", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route: /<__invalid__>/test>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:49:52.678362
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:49:53.603125
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:49:56.802210
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_dynamic, "Dynamic routes should not be empty after finalize"
    
    # Test with invalid route
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__invalid__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:49:57.949131
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:00.064113
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    
    # Check if the routes are finalized correctly
    assert router.routes_all
    assert router.routes_dynamic
    assert router.routes_static
    assert router.routes_regex

    # Check for invalid route labels
    with pytest.raises(SanicException):
        router.add("/invalid/<__param__>", ["GET"], lambda x: x)
        router.finalize()
```

# Generated at 2024-06-03 07:50:01.164162
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:03.375402
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    
    # Check if the routes are finalized correctly
    assert router.routes_all
    assert router.routes_dynamic
    assert router.routes_static
    assert router.routes_regex

    # Check for invalid route labels
    with pytest.raises(SanicException):
        router.add("/invalid/<__param__>", ["GET"], lambda x: x)
        router.finalize()
```

# Generated at 2024-06-03 07:50:44.602040
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:46.612265
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:50:47.841025
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:49.914811
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:50:51.052402
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:52.129828
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:53.217676
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:54.194231
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:55.324210
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:50:56.263636
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:51:19.557749
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:51:20.687289
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:51:21.683417
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:51:28.031756
```python
    router = Router()
    handler = lambda x: x

    # Test adding a simple route
    route = router.add("/test", ["GET"], handler)
    assert route.path == "/test"
    assert "GET" in route.methods

    # Test adding a route with multiple methods
    route = router.add("/multi", ["GET", "POST"], handler)
    assert route.path == "/multi"
    assert "GET" in route.methods
    assert "POST" in route.methods

    # Test adding a route with a version
    route = router.add("/versioned", ["GET"], handler, version=1)
    assert route.path == "/v1/versioned"

    # Test adding a route with a host
    route = router.add("/hosted", ["GET"], handler, host="example.com")
    assert route.path == "/hosted"
    assert route.ctx.hosts == ["example.com"]

    # Test adding a route

# Generated at 2024-06-03 07:51:30.557042
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    
    # Check if the dynamic routes are finalized correctly
    assert len(router.routes_dynamic) > 0
    
    # Add a route with invalid parameter name
    router.add("/invalid/<__param__>", ["GET"], lambda x: x)
    
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/invalid/<__param__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException not raised for invalid parameter name"
```

# Generated at 2024-06-03 07:51:31.946522
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:51:33.810624
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:51:34.986736
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:51:36.651789
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
    assert router.routes_all == router.routes
    assert router.routes_static == router.static_routes
    assert router.routes_dynamic == router.dynamic_routes
    assert router.routes_regex == router.regex_routes
```

# Generated at 2024-06-03 07:51:38.175586
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:52:20.769584
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:52:25.297303
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__invalid__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:52:26.444554
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:52:29.321869
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__invalid__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:52:30.570937
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:52:31.495014
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:52:32.520572
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:52:33.570074
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:52:39.366226
```python
    router = Router()
    handler = lambda x: x

    # Test adding a simple route
    route = router.add("/test", ["GET"], handler)
    assert route.path == "/test"
    assert "GET" in route.methods

    # Test adding a route with multiple methods
    route = router.add("/multi", ["GET", "POST"], handler)
    assert route.path == "/multi"
    assert "GET" in route.methods
    assert "POST" in route.methods

    # Test adding a route with a host
    route = router.add("/hosted", ["GET"], handler, host="example.com")
    assert route.path == "/hosted"
    assert route.requirements["host"] == "example.com"

    # Test adding a route with version
    route = router.add("/versioned", ["GET"], handler, version=1)
    assert route.path == "/v1/versioned"

    # Test adding a

# Generated at 2024-06-03 07:52:40.359983
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:54:07.620848
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_dynamic, "Dynamic routes should not be empty after finalization"
    assert all(
        not any(label.startswith("__") and label not in ALLOWED_LABELS for label in route.labels)
        for route in router.routes_dynamic.values()
    ), "Routes should not contain invalid labels"
```

# Generated at 2024-06-03 07:54:09.667207
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    
    # Check if the routes are finalized correctly
    assert len(router.routes_all) > 0

    # Add a route with invalid parameter name
    router.add("/invalid/<__param__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route object>. Parameter names cannot use '__'."
```

# Generated at 2024-06-03 07:54:10.606753
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:54:11.550340
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:54:13.263426
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:54:14.347168
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:54:18.201267
```python
    router = Router()
    handler = lambda x: x

    # Test adding a single route
    route = router.add("/test", ["GET"], handler)
    assert route is not None
    assert route.path == "/test"
    assert "GET" in route.methods

    # Test adding a route with multiple methods
    route = router.add("/multi", ["GET", "POST"], handler)
    assert route is not None
    assert route.path == "/multi"
    assert "GET" in route.methods
    assert "POST" in route.methods

    # Test adding a route with a version
    route = router.add("/versioned", ["GET"], handler, version=1)
    assert route is not None
    assert route.path == "/v1/versioned"

    # Test adding a route with a host
    route = router.add("/hosted", ["GET"], handler, host="example.com")
    assert route is not

# Generated at 2024-06-03 07:54:19.412221
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:54:20.397380
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:54:23.351263
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__param__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__param__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:57:10.150393
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:57:11.172902
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:57:12.724519
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:57:14.181472
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:57:15.169752
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:57:19.774838
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.finalize()
    assert router.routes_all, "Routes should not be empty after finalization"
    
    # Test for invalid route with '__' in parameter names
    router = Router()
    router.add("/test/<__invalid__>", ["GET"], lambda x: x)
    try:
        router.finalize()
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/test/<__invalid__>'>. Parameter names cannot use '__'."
    else:
        assert False, "SanicException was not raised for invalid route"
```

# Generated at 2024-06-03 07:57:24.961957
```python
    router = Router()
    router.add("/test", ["GET"], lambda x: x)
    router.add("/static", ["GET"], lambda x: x, static=True)
    router.add("/dynamic/<param>", ["GET"], lambda x: x)
    router.add("/regex/<__file_uri__>", ["GET"], lambda x: x)

    # Finalize should not raise an exception for valid routes
    try:
        router.finalize()
    except SanicException:
        assert False, "SanicException raised unexpectedly"

    # Add an invalid route and check for exception
    router.add("/invalid/<__invalid_param__>", ["GET"], lambda x: x)
    try:
        router.finalize()
        assert False, "SanicException not raised for invalid route"
    except SanicException as e:
        assert str(e) == "Invalid route: <Route path='/invalid/<__invalid_param__>'>. Parameter names cannot use '__'.

# Generated at 2024-06-03 07:57:26.114096
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:57:27.604407
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```

# Generated at 2024-06-03 07:57:28.621129
```python
    router = Router()
    assert isinstance(router, Router)
    assert router.DEFAULT_METHOD == "GET"
    assert router.ALLOWED_METHODS == HTTP_METHODS
```