# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        dict_token_0 = module_0.DictToken()
    except BaseException:
        pass

def test_case_1():
    try:
        dict_token_0 = None
        list_0 = [dict_token_0, dict_token_0, dict_token_0]
        str_0 = '\n    Returns a two-tuple of `(type_strings, allow_null)`.\n    '
        list_1 = [str_0]
        int_0 = -3035
        token_0 = module_0.Token(list_1, int_0, int_0)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        dict_token_0 = module_0.DictToken(*list_0)
        int_0 = -1627
        token_0 = module_0.Token(dict_token_0, int_0, int_0)
        str_0 = token_0.__repr__()
        int_1 = 1678
        list_1 = [int_1]
        token_1 = token_0.lookup_key(list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        int_0 = 4
        int_1 = -1758
        str_0 = '~^[D\x0b} SjB,E'
        list_token_0 = module_0.ListToken(list_0, int_0, int_1, str_0)
        int_2 = 1511
        str_1 = 'l0#'
        token_0 = module_0.Token(str_0, int_2, int_0, str_1)
        token_1 = token_0.lookup(list_0)
        token_2 = token_1.lookup_key(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n    Raised by `typesystem.tokenize_json()` and `typesystem.tokenize_yaml()`.\n    '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        int_0 = -4031
        token_0 = module_0.Token(dict_0, int_0, int_0)
        bool_0 = token_0.__eq__(dict_0)
        bool_1 = token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_5():
    try:
        set_0 = set()
        int_0 = -525
        int_1 = 0
        str_0 = 'GP0OOWaG\\'
        scalar_token_0 = module_0.ScalarToken(set_0, int_0, int_1, str_0)
        int_2 = 6
        int_3 = None
        scalar_token_1 = module_0.ScalarToken(set_0, int_2, int_3)
        int_4 = 176
        list_token_0 = module_0.ListToken(set_0, int_4, int_4)
        any_0 = scalar_token_1.__hash__()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 3344.7
        list_0 = [float_0, float_0, float_0, float_0]
        dict_token_0 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        token_0 = None
        bytes_0 = b'u\xc9\xaf\x94\x06\x8b\x9e@\xfa\xd8]\xc9\t5\x19\x0f*E\xcd\xf9'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, token_0: token_0, token_0: bytes_0}
        str_0 = token_0.__repr__()
        list_0 = [dict_0, bytes_0, dict_0]
        dict_token_0 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        int_0 = None
        scalar_token_0 = module_0.ScalarToken(dict_0, int_0, int_0)
        set_0 = None
        scalar_token_1 = module_0.ScalarToken(set_0, int_0, int_0)
        int_1 = -698
        int_2 = -4282
        token_0 = module_0.Token(set_0, int_2, int_0)
        list_0 = [int_1, int_1, int_1]
        list_1 = [list_0]
        int_3 = 4
        float_0 = -1843.2409
        tuple_0 = (int_3, float_0)
        token_1 = module_0.Token(tuple_0, int_3, int_3)
        int_4 = 3300
        list_token_0 = module_0.ListToken(int_1, int_1, int_4)
        token_2 = token_1.lookup(list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = None
        int_0 = None
        scalar_token_0 = module_0.ScalarToken(dict_0, int_0, int_0)
        int_1 = -695
        int_2 = 2336
        str_0 = '{2'
        scalar_token_1 = module_0.ScalarToken(scalar_token_0, int_1, int_2, str_0)
        any_0 = scalar_token_0.__hash__()
    except BaseException:
        pass