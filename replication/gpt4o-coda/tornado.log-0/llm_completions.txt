

# Generated at 2024-06-03 15:45:17.177783
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:45:21.439185
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 1
    options.log_rotate_when = "D"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[0

# Generated at 2024-06-03 15:45:27.038557
```python
    import tornado.options
    from tornado.options import OptionParser

    # Create a new OptionParser instance
    options = OptionParser()

    # Call the function to define logging options
    define_logging_options(options)

    # Check if the options are defined correctly
    assert options.logging == "info"
    assert options.log_to_stderr is None
    assert options.log_file_prefix is None
    assert options.log_file_max_size == 100 * 1000 * 1000
    assert options.log_file_num_backups == 10
    assert options.log_rotate_when == "midnight"
    assert options.log_rotate_interval == 1
    assert options.log_rotate_mode == "size"

    # Check if the callback is set correctly
    assert len(options._callbacks) == 1
    assert options._callbacks[0].__name__ == "enable_pretty_logging"
```

# Generated at 2024-06-03 15:45:28.627542
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert isinstance(formatter._normal, str)
```

# Generated at 2024-06-03 15:45:34.411385
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 1
    options.log_rotate_when = "D"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Check if the formatter is a LogFormatter
    assert isinstance

# Generated at 2024-06-03 15:45:35.940278
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:45:38.025476
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:45:43.317647
```python
    formatter = LogFormatter()

    # Test with a simple log record
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted = formatter.format(record)
    assert "[I " in formatted
    assert "Test message" in formatted

    # Test with a log record containing an exception
    try:
        raise ValueError("Test exception")
    except ValueError:
        exc_info = sys.exc_info()
    record = logging.LogRecord(
        name="test",
        level=logging.ERROR,
        pathname=__file__,
        lineno=20,
        msg="Exception occurred",
        args=(),
        exc_info=exc_info,
    )
    formatted = formatter.format(record)
    assert "[E " in formatted
    assert "Exception occurred" in formatted
    assert "ValueError

# Generated at 2024-06-03 15:45:45.421986
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:45:51.160082
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.define("logging", default="info")
    options.define("log_file_prefix", default=None)
    options.define("log_rotate_mode", default="size")
    options.define("log_file_max_size", default=100 * 1024 * 1024)
    options.define("log_file_num_backups", default=10)
    options.define("log_rotate_when", default="midnight")
    options.define("log_rotate_interval", default=1)
    options.define("log_to_stderr", default=True)

    # Test with default options
    enable_pretty_logging(options=options)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert any(isinstance(handler, logging.StreamHandler) for handler in logger.handlers)

    # Test with log_file_prefix
    options.log_file_prefix = "/tmp/test_log

# Generated at 2024-06-03 15:46:12.825023
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:46:17.377995
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.define("logging", default="info")
    options.define("log_file_prefix", default=None)
    options.define("log_rotate_mode", default="size")
    options.define("log_file_max_size", default=100 * 1024 * 1024)
    options.define("log_file_num_backups", default=10)
    options.define("log_rotate_when", default="midnight")
    options.define("log_rotate_interval", default=1)
    options.define("log_to_stderr", default=True)

    # Test with default options
    enable_pretty_logging(options=options)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert any(isinstance(handler, logging.StreamHandler) for handler in logger.handlers)

    # Test with log_file_prefix
    options.log_file_prefix = "/tmp/test_log

# Generated at 2024-06-03 15:46:23.059925
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 3
    options.log_rotate_when = "midnight"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[

# Generated at 2024-06-03 15:46:28.105760
```python
    import tornado.options
    from unittest import mock

    # Mock options
    mock_options = mock.Mock()
    mock_options.logging = "info"
    mock_options.log_file_prefix = None
    mock_options.log_to_stderr = True

    with mock.patch('tornado.options.options', mock_options):
        with mock.patch('logging.getLogger') as mock_get_logger:
            mock_logger = mock.Mock()
            mock_get_logger.return_value = mock_logger

            enable_pretty_logging()

            mock_get_logger.assert_called_once()
            mock_logger.setLevel.assert_called_once_with(logging.INFO)
            mock_logger.addHandler.assert_called()
```

# Generated at 2024-06-03 15:46:32.777682
```python
    formatter = LogFormatter()

    # Test with a simple log record
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted = formatter.format(record)
    assert "Test message" in formatted
    assert "[I " in formatted

    # Test with a log record containing an exception
    try:
        raise ValueError("Test exception")
    except ValueError:
        exc_info = sys.exc_info()
    record = logging.LogRecord(
        name="test",
        level=logging.ERROR,
        pathname=__file__,
        lineno=20,
        msg="Exception occurred",
        args=(),
        exc_info=exc_info,
    )
    formatted = formatter.format(record)
    assert "Exception occurred" in formatted
    assert "ValueError: Test exception" in formatted

   

# Generated at 2024-06-03 15:46:35.831104
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:46:39.357373
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 1
    options.log_rotate_when = "midnight"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[

# Generated at 2024-06-03 15:46:43.586031
```python
    formatter = LogFormatter()

    # Test with a simple log record
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted = formatter.format(record)
    assert "Test message" in formatted
    assert "[I " in formatted

    # Test with a log record containing an exception
    try:
        raise ValueError("Test exception")
    except ValueError:
        record = logging.LogRecord(
            name="test",
            level=logging.ERROR,
            pathname=__file__,
            lineno=20,
            msg="Exception occurred",
            args=(),
            exc_info=sys.exc_info(),
        )
    formatted = formatter.format(record)
    assert "Exception occurred" in formatted
    assert "ValueError: Test exception" in formatted

    # Test with a log record containing non

# Generated at 2024-06-03 15:46:47.378204
```python
    import tornado.options
    from unittest import mock

    # Mock options
    options = mock.Mock()
    options.logging = "info"
    options.log_file_prefix = None
    options.log_to_stderr = True

    with mock.patch('tornado.options.options', options):
        with mock.patch('logging.getLogger') as mock_get_logger:
            mock_logger = mock.Mock()
            mock_get_logger.return_value = mock_logger

            enable_pretty_logging()

            mock_get_logger.assert_called_once()
            mock_logger.setLevel.assert_called_once_with(logging.INFO)
            mock_logger.addHandler.assert_called()
```

# Generated at 2024-06-03 15:46:50.105533
```python
    import tornado.options
    from unittest import mock

    # Mock options
    mock_options = mock.Mock()
    mock_options.logging = "info"
    mock_options.log_file_prefix = None
    mock_options.log_to_stderr = True

    with mock.patch('tornado.options.options', mock_options):
        with mock.patch('logging.getLogger') as mock_get_logger:
            mock_logger = mock.Mock()
            mock_get_logger.return_value = mock_logger

            enable_pretty_logging()

            mock_get_logger.assert_called_once()
            mock_logger.setLevel.assert_called_once_with(logging.INFO)
            mock_logger.addHandler.assert_called()
```

# Generated at 2024-06-03 15:47:02.961985
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:47:07.836032
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.define("logging", default="info")
    options.define("log_file_prefix", default=None)
    options.define("log_rotate_mode", default="size")
    options.define("log_file_max_size", default=100 * 1024 * 1024)
    options.define("log_file_num_backups", default=10)
    options.define("log_rotate_when", default="midnight")
    options.define("log_rotate_interval", default=1)
    options.define("log_to_stderr", default=True)

    # Test with default options
    enable_pretty_logging(options=options)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert any(isinstance(handler, logging.StreamHandler) for handler in logger.handlers)

    # Test with log_file_prefix
    options.log_file_prefix = "/tmp/test_log

# Generated at 2024-06-03 15:47:13.302658
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 1
    options.log_rotate_when = "midnight"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[

# Generated at 2024-06-03 15:47:15.411525
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:47:21.871350
```python
    formatter = LogFormatter()

    # Test with a simple log record
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted = formatter.format(record)
    assert "Test message" in formatted
    assert "[I " in formatted

    # Test with a log record containing an exception
    try:
        raise ValueError("Test exception")
    except ValueError:
        record = logging.LogRecord(
            name="test",
            level=logging.ERROR,
            pathname=__file__,
            lineno=20,
            msg="Exception occurred",
            args=(),
            exc_info=sys.exc_info(),
        )
    formatted = formatter.format(record)
    assert "Exception occurred" in formatted
    assert "ValueError: Test exception" in formatted

    # Test with a log record containing non

# Generated at 2024-06-03 15:47:24.277634
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test:" in formatted_message
    assert "10" in formatted_message
```

# Generated at 2024-06-03 15:47:27.634089
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:47:29.377146
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:47:33.724524
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:47:37.350575
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if a StreamHandler is added
    assert any(isinstance(handler, logging.StreamHandler) for handler in logger.handlers)

    # Check if the formatter is set correctly
    for handler in logger.handlers:
        assert isinstance(handler.formatter, LogFormatter)
```

# Generated at 2024-06-03 15:48:05.252015
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.define("logging", default="info")
    options.define("log_file_prefix", default=None)
    options.define("log_rotate_mode", default="size")
    options.define("log_file_max_size", default=100 * 1024 * 1024)
    options.define("log_file_num_backups", default=10)
    options.define("log_rotate_when", default="midnight")
    options.define("log_rotate_interval", default=1)
    options.define("log_to_stderr", default=True)

    # Test with default options
    enable_pretty_logging(options=options)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert any(isinstance(handler, logging.StreamHandler) for handler in logger.handlers)

    # Test with log_file_prefix
    options.log_file_prefix = "/tmp/test_log

# Generated at 2024-06-03 15:48:07.758743
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:48:11.195819
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:48:12.737464
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert isinstance(formatter._normal, str)
```

# Generated at 2024-06-03 15:48:14.945080
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert isinstance(formatter._normal, str)
```

# Generated at 2024-06-03 15:48:17.450648
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:48:20.246789
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_LogFormatter_format" in formatted_message
```

# Generated at 2024-06-03 15:48:28.009235
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.define("logging", default="info")
    options.define("log_file_prefix", default=None)
    options.define("log_rotate_mode", default="size")
    options.define("log_file_max_size", default=100 * 1024 * 1024)
    options.define("log_file_num_backups", default=10)
    options.define("log_rotate_when", default="midnight")
    options.define("log_rotate_interval", default=1)
    options.define("log_to_stderr", default=True)

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the

# Generated at 2024-06-03 15:48:29.881654
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert isinstance(formatter._normal, str)
```

# Generated at 2024-06-03 15:48:31.224080
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:49:21.487877
```python
    formatter = LogFormatter()

    # Test with a simple log record
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted = formatter.format(record)
    assert "Test message" in formatted
    assert "[I " in formatted

    # Test with a log record containing an exception
    try:
        raise ValueError("Test exception")
    except ValueError:
        exc_info = sys.exc_info()
    record = logging.LogRecord(
        name="test",
        level=logging.ERROR,
        pathname=__file__,
        lineno=20,
        msg="Exception occurred",
        args=(),
        exc_info=exc_info,
    )
    formatted = formatter.format(record)
    assert "Exception occurred" in formatted
    assert "ValueError: Test exception" in formatted

   

# Generated at 2024-06-03 15:49:27.053910
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.define("logging", default="info")
    options.define("log_file_prefix", default=None)
    options.define("log_rotate_mode", default="size")
    options.define("log_file_max_size", default=100 * 1024 * 1024)
    options.define("log_file_num_backups", default=10)
    options.define("log_rotate_when", default="midnight")
    options.define("log_rotate_interval", default=1)
    options.define("log_to_stderr", default=True)

    # Test with default options
    enable_pretty_logging(options=options)
    logger = logging.getLogger()
    assert logger.level == logging.INFO
    assert any(isinstance(handler, logging.StreamHandler) for handler in logger.handlers)

    # Test with log_file_prefix
    options.log_file_prefix = "/tmp/test_log

# Generated at 2024-06-03 15:49:29.365591
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test_log_formatter.py:10" in formatted_message
```

# Generated at 2024-06-03 15:49:33.466484
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 3
    options.log_rotate_when = "midnight"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[

# Generated at 2024-06-03 15:49:39.573970
```python
    formatter = LogFormatter()

    # Test with a simple log record
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted = formatter.format(record)
    assert "Test message" in formatted
    assert "[I " in formatted

    # Test with a log record containing an exception
    try:
        raise ValueError("Test exception")
    except ValueError:
        exc_info = sys.exc_info()
    record = logging.LogRecord(
        name="test",
        level=logging.ERROR,
        pathname=__file__,
        lineno=20,
        msg="Test message with exception",
        args=(),
        exc_info=exc_info,
    )
    formatted = formatter.format(record)
    assert "Test message with exception" in formatted
    assert "ValueError: Test exception"

# Generated at 2024-06-03 15:49:41.892121
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:49:46.187204
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 1
    options.log_rotate_when = "midnight"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function with the mock options and logger
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if the handler is a StreamHandler


# Generated at 2024-06-03 15:49:50.923444
```python
    formatter = LogFormatter()

    # Test with a simple log record
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted = formatter.format(record)
    assert "Test message" in formatted
    assert "[I " in formatted

    # Test with a log record containing an exception
    try:
        raise ValueError("Test exception")
    except ValueError:
        record = logging.LogRecord(
            name="test",
            level=logging.ERROR,
            pathname=__file__,
            lineno=20,
            msg="Exception occurred",
            args=(),
            exc_info=sys.exc_info(),
        )
    formatted = formatter.format(record)
    assert "Exception occurred" in formatted
    assert "ValueError: Test exception" in formatted

    # Test with a log record containing non

# Generated at 2024-06-03 15:49:53.989429
```python
    import tornado.options
    from unittest import mock

    # Mock options
    mock_options = mock.Mock()
    mock_options.logging = "info"
    mock_options.log_file_prefix = None
    mock_options.log_to_stderr = True

    with mock.patch('tornado.options.options', mock_options):
        with mock.patch('logging.getLogger') as mock_get_logger:
            mock_logger = mock.Mock()
            mock_get_logger.return_value = mock_logger

            enable_pretty_logging()

            mock_get_logger.assert_called_once()
            mock_logger.setLevel.assert_called_once_with(logging.INFO)
            mock_logger.addHandler.assert_called()
```

# Generated at 2024-06-03 15:49:56.043143
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:53:04.409544
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if a StreamHandler is added
    assert any(isinstance(handler, logging.StreamHandler) for handler in logger.handlers)

    # Check if the formatter is set correctly
    for handler in logger.handlers:
        assert isinstance(handler.formatter, LogFormatter)
```

# Generated at 2024-06-03 15:53:08.728037
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 1
    options.log_rotate_when = "midnight"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[0], logging.StreamHandler)

    # Check if the formatter is a LogFormatter
    assert

# Generated at 2024-06-03 15:53:10.214153
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:53:13.192847
```python
    formatter = LogFormatter()
    record = logging.LogRecord(
        name="test",
        level=logging.INFO,
        pathname=__file__,
        lineno=10,
        msg="Test message",
        args=(),
        exc_info=None,
    )
    formatted_message = formatter.format(record)
    assert "[I " in formatted_message
    assert "Test message" in formatted_message
    assert "test:10" in formatted_message
```

# Generated at 2024-06-03 15:53:17.388852
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 1
    options.log_rotate_when = "D"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[0

# Generated at 2024-06-03 15:53:19.288662
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert formatter._normal in ["", "\033[0m"]
```

# Generated at 2024-06-03 15:53:23.911225
```python
    import logging
    from tornado.options import OptionParser

    # Create a mock options object
    options = OptionParser()
    options.logging = "debug"
    options.log_file_prefix = None
    options.log_rotate_mode = "size"
    options.log_file_max_size = 1000
    options.log_file_num_backups = 3
    options.log_rotate_when = "midnight"
    options.log_rotate_interval = 1
    options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function
    enable_pretty_logging(options, logger)

    # Check if the logger has handlers
    assert len(logger.handlers) > 0

    # Check if the logger level is set correctly
    assert logger.level == logging.DEBUG

    # Check if the handler is a StreamHandler
    assert isinstance(logger.handlers[

# Generated at 2024-06-03 15:53:25.727540
```python
    formatter = LogFormatter()
    assert formatter._fmt == LogFormatter.DEFAULT_FORMAT
    assert formatter.datefmt == LogFormatter.DEFAULT_DATE_FORMAT
    assert formatter._colors == LogFormatter.DEFAULT_COLORS
    assert isinstance(formatter._normal, str)
```

# Generated at 2024-06-03 15:53:30.441502
```python
    import types
    from tornado.options import OptionParser

    # Create a mock options object
    mock_options = types.SimpleNamespace()
    mock_options.logging = "info"
    mock_options.log_file_prefix = None
    mock_options.log_rotate_mode = "size"
    mock_options.log_file_max_size = 1000
    mock_options.log_file_num_backups = 3
    mock_options.log_rotate_when = "midnight"
    mock_options.log_rotate_interval = 1
    mock_options.log_to_stderr = True

    # Create a logger
    logger = logging.getLogger("test_logger")
    logger.handlers = []  # Clear existing handlers

    # Call the function with the mock options
    enable_pretty_logging(options=mock_options, logger=logger)

    # Check if the logger level is set correctly
    assert logger.level == logging.INFO

    # Check if a StreamHandler is added
    assert any(isinstance(handler,

# Generated at 2024-06-03 15:53:34.147230
```python
    import tornado.options
    from unittest import mock

    # Mock options
    mock_options = mock.Mock()
    mock_options.logging = "info"
    mock_options.log_file_prefix = None
    mock_options.log_to_stderr = True

    with mock.patch('tornado.options.options', mock_options):
        with mock.patch('logging.getLogger') as mock_get_logger:
            mock_logger = mock.Mock()
            mock_get_logger.return_value = mock_logger

            enable_pretty_logging()

            mock_get_logger.assert_called_once()
            mock_logger.setLevel.assert_called_once_with(logging.INFO)
            mock_logger.addHandler.assert_called()
```