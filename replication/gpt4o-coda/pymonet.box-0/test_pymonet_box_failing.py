# Automatically generated by Pynguin.
import pymonet.box as module_0
import builtins as module_1

def test_case_0():
    try:
        int_0 = 1447
        box_0 = module_0.Box(int_0)
        var_0 = box_0.to_lazy()
        list_0 = [box_0]
        var_1 = box_0.map(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        box_0 = module_0.Box(list_0)
        str_0 = '\n    Max is a Monoid that will combines 2 numbers, resulting in the largest of the two.\n    '
        str_1 = ''
        dict_0 = {str_0: box_0, str_1: list_0, str_0: str_1, str_1: str_0}
        var_0 = box_0.bind(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        box_0 = module_0.Box(dict_0)
        var_0 = None
        var_1 = box_0.to_maybe()
        object_0 = module_1.object()
        bool_0 = box_0.__eq__(object_0)
        var_2 = box_0.to_maybe()
        var_3 = box_0.to_maybe()
        var_4 = box_0.to_try()
        tuple_0 = (var_0,)
        var_5 = box_0.to_maybe()
        box_1 = module_0.Box(tuple_0)
        var_6 = box_1.ap(box_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -653.13225
        box_0 = module_0.Box(float_0)
        var_0 = box_0.to_either()
        var_1 = None
        box_1 = module_0.Box(var_1)
        var_2 = box_0.to_validation()
        callable_0 = None
        var_3 = box_0.bind(callable_0)
    except BaseException:
        pass