# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        float_0 = -829.8
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        alpha_0 = module_0._Alpha(numeric_0)
        dict_0 = {float_0: float_0, float_0: alpha_0, bool_0: numeric_0}
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = alpha_0.__repr__()
        var_1 = semantic_version_0.__lt__(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = ''
        var_0 = semantic_version_0.__ne__(str_0)
        int_0 = -592
        str_1 = 'b|W.M0lxVp'
        alpha_0 = module_0._Alpha(str_1)
        var_1 = alpha_0.__eq__(int_0)
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_2():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '2IL|(m+:'
        tuple_0 = ()
        alpha_0 = module_0._Alpha(tuple_0)
        var_0 = alpha_0.__ne__(str_0)
        str_1 = ''
        var_1 = semantic_version_0.__ne__(str_1)
        str_2 = 'b|W.M0lxVp'
        loose_version_0 = module_1.LooseVersion(str_2)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_3():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = 'oE?92n[#y3?l!I\r'
        bytes_0 = b'\x185\xb3Y\xe4\x8e'
        alpha_0 = module_0._Alpha(bytes_0)
        var_0 = alpha_0.__le__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        tuple_0 = ()
        alpha_0 = module_0._Alpha(tuple_0)
        str_0 = ''
        var_1 = semantic_version_0.__ne__(str_0)
        int_0 = -577
        numeric_0 = module_0._Numeric(int_0)
        var_2 = alpha_0.__ge__(numeric_0)
        alpha_1 = module_0._Alpha(str_0)
        loose_version_0 = module_1.LooseVersion(str_0)
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_5():
    try:
        semantic_version_0 = None
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_1.__repr__()
        var_1 = semantic_version_1.__repr__()
        dict_0 = {}
        alpha_0 = module_0._Alpha(semantic_version_0)
        var_2 = alpha_0.__gt__(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'b!MH.v9.M0lxVm,'
        float_0 = 2607.442376
        alpha_0 = module_0._Alpha(float_0)
        var_0 = alpha_0.__ge__(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = ''
        var_0 = semantic_version_0.__ne__(str_0)
        bool_0 = True
        int_0 = -577
        numeric_0 = module_0._Numeric(int_0)
        var_1 = numeric_0.__le__(bool_0)
        str_1 = '`TH>`]y,q+'
        loose_version_0 = module_1.LooseVersion(str_1)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_8():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        float_0 = 981.0
        numeric_0 = module_0._Numeric(float_0)
        float_1 = 701.1664411311452
        numeric_1 = module_0._Numeric(float_1)
        var_1 = numeric_1.__gt__(numeric_0)
        float_2 = 1184.191
        var_2 = numeric_1.__ge__(float_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'GS]%F(*.fr%'
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        int_0 = 694
        var_1 = semantic_version_0.from_loose_version(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        loose_version_0 = None
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_12():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = ''
        var_0 = semantic_version_0.__ne__(str_0)
        int_0 = 2955
        var_1 = semantic_version_0.__lt__(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 3277.1
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__le__(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(semantic_version_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_1 = semantic_version_1.__repr__()
        int_0 = 694
        var_2 = semantic_version_0.from_loose_version(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\r\\ib`I>SsKFF2t^sD'
        str_1 = 'unicode'
        alpha_0 = module_0._Alpha(str_0)
        tuple_0 = None
        int_0 = 5986
        numeric_0 = module_0._Numeric(int_0)
        var_0 = alpha_0.__gt__(numeric_0)
        semantic_version_0 = module_0.SemanticVersion(tuple_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_1 = semantic_version_1.__ge__(semantic_version_0)
        var_2 = alpha_0.__le__(str_1)
        bytes_0 = b''
        var_3 = semantic_version_0.__eq__(bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        str_0 = 'Do not set both path_only and lass_only en calling PluginLoader.all()'
        tuple_0 = ()
        alpha_0 = module_0._Alpha(tuple_0)
        var_1 = alpha_0.__ne__(str_0)
        str_1 = ''
        var_2 = alpha_0.__gt__(alpha_0)
        var_3 = semantic_version_0.__ne__(str_1)
        bool_0 = False
        int_0 = -593
        numeric_0 = module_0._Numeric(int_0)
        var_4 = numeric_0.__le__(bool_0)
        alpha_1 = module_0._Alpha(str_0)
        str_2 = 'k/('
        loose_version_0 = module_1.LooseVersion(str_2)
        var_5 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_18():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = ''
        var_0 = semantic_version_0.__ne__(str_0)
        int_0 = -577
        numeric_0 = module_0._Numeric(int_0)
        var_1 = numeric_0.__le__(numeric_0)
        str_1 = '`TH>`]y\tq+'
        loose_version_0 = module_1.LooseVersion(str_1)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_19():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = 'Do not set both path_only and lass_only en calling PluginLoader.all()'
        tuple_0 = ()
        alpha_0 = module_0._Alpha(tuple_0)
        str_1 = ''
        var_0 = semantic_version_0.__ne__(str_1)
        var_1 = alpha_0.__lt__(alpha_0)
        alpha_1 = module_0._Alpha(str_0)
        loose_version_0 = module_1.LooseVersion(str_1)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_20():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(semantic_version_0)
        semantic_version_1 = module_0.SemanticVersion()
        var_1 = semantic_version_1.__repr__()
        int_0 = 694
        alpha_0 = module_0._Alpha(int_0)
        bool_0 = True
        alpha_1 = module_0._Alpha(bool_0)
        var_2 = alpha_1.__eq__(alpha_0)
        var_3 = semantic_version_0.from_loose_version(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '=R|1373'
        bool_0 = False
        int_0 = 60
        numeric_0 = module_0._Numeric(int_0)
        var_0 = numeric_0.__gt__(bool_0)
        numeric_1 = module_0._Numeric(bool_0)
        alpha_0 = module_0._Alpha(numeric_1)
        var_1 = alpha_0.__eq__(str_0)
        str_1 = '"'
        semantic_version_0 = module_0.SemanticVersion(str_1)
    except BaseException:
        pass

def test_case_22():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        str_0 = 'Do not set both path_only and lass_only en calling PluginLoader.all()'
        tuple_0 = ()
        alpha_0 = module_0._Alpha(tuple_0)
        var_1 = alpha_0.__ne__(str_0)
        str_1 = ''
        var_2 = semantic_version_0.__ne__(str_1)
        int_0 = -577
        var_3 = alpha_0.__lt__(alpha_0)
        numeric_0 = module_0._Numeric(int_0)
        var_4 = numeric_0.__le__(alpha_0)
        alpha_1 = module_0._Alpha(tuple_0)
        loose_version_0 = module_1.LooseVersion()
        var_5 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        loose_version_0 = module_1.LooseVersion()
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_24():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = 'b|W.M0lxVp'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_25():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '`TH>`]y,q+'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_26():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = ''
        var_0 = semantic_version_0.__ne__(str_0)
        str_1 = 'b|Wv.:M0xVm9'
        alpha_0 = module_0._Alpha(str_1)
        str_2 = '`TH>`]yq+'
        loose_version_0 = module_1.LooseVersion(str_2)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass