# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.json_schema as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3

def test_case_0():
    try:
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
        schema_definitions_1 = module_0.SchemaDefinitions()
        str_0 = '&KVM`mi+yDD!y_b_Mu'
        bool_0 = True
        field_1 = module_1.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        field_0 = module_1.from_json_schema(bool_0)
        bool_1 = field_0.has_default()
        union_0 = field_0.__or__(field_0)
        dict_0 = module_1.get_standard_properties(field_0)
        dict_1 = module_1.get_standard_properties(field_0)
        schema_definitions_0 = None
        field_1 = module_1.type_from_json_schema(dict_1, schema_definitions_0)
        var_0 = module_1.to_json_schema(field_1)
        field_2 = module_1.from_json_schema(dict_1)
        dict_2 = None
        field_3 = module_1.enum_from_json_schema(dict_2, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        field_0 = module_1.from_json_schema(dict_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_1 = module_1.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        field_0 = module_1.from_json_schema(bool_0)
        var_0 = module_1.to_json_schema(field_0)
        field_1 = module_1.from_json_schema(bool_0)
        dict_0 = {bool_0: bool_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_2 = module_1.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
        field_1 = module_1.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_7():
    try:
        schema_definitions_0 = None
        field_0 = module_2.Field(default=schema_definitions_0)
        var_0 = module_1.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_8():
    try:
        field_0 = None
        var_0 = module_1.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        field_0 = module_1.from_json_schema(bool_0)
        var_0 = module_1.to_json_schema(field_0)
        field_1 = module_1.from_json_schema(bool_0)
        dict_0 = module_1.get_standard_properties(field_0)
        tuple_0 = module_1.get_valid_types(dict_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_2 = module_1.ref_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        field_0 = module_1.from_json_schema(dict_0)
        dict_1 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_1 = module_1.all_of_from_json_schema(dict_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'type'
        str_1 = 'minLength'
        str_2 = 'pattern'
        dict_0 = {str_1: str_2, str_2: str_0, str_0: str_2}
        schema_definitions_0 = None
        field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'type'
        str_1 = {str_0: str_0}
        field_0 = module_1.from_json_schema(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        any_0 = module_2.Any()
        var_0 = module_1.to_json_schema(any_0)
        never_match_0 = module_3.NeverMatch()
        var_1 = module_1.to_json_schema(never_match_0)
        str_0 = '#/definitions/SomeType'
        var_2 = {}
        reference_0 = module_0.Reference(str_0, var_2)
        var_3 = module_1.to_json_schema(reference_0)
    except BaseException:
        pass

def test_case_14():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        var_0 = module_1.to_json_schema(schema_definitions_0)
        schema_definitions_1 = module_0.SchemaDefinitions()
        dict_0 = {}
        field_0 = module_1.ref_from_json_schema(dict_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = []
        str_0 = "MI^c|1\x0c7,0;3zL1N')"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0}
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0, **dict_0)
        var_0 = module_1.to_json_schema(schema_definitions_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        bool_1 = None
        str_0 = '\\\\34vaU*sYe/YE'
        int_0 = -577
        string_0 = module_2.String(max_length=int_0, min_length=int_0)
        var_0 = module_1.to_json_schema(string_0, bool_0)
        string_1 = module_2.String(trim_whitespace=bool_1, format=str_0)
        var_1 = module_1.to_json_schema(string_1)
        schema_definitions_0 = module_0.SchemaDefinitions()
        var_2 = module_1.to_json_schema(schema_definitions_0)
        field_0 = module_1.from_json_schema(bool_0)
        str_1 = "-=X2O'`*,lS"
        dict_0 = {str_1: bool_1, str_1: bool_1}
        iterator_0 = schema_definitions_0.__iter__()
        tuple_0 = module_1.get_valid_types(dict_0)
        field_1 = module_1.type_from_json_schema(dict_0, schema_definitions_0)
        any_0 = field_0.get_default_value()
        var_3 = module_1.to_json_schema(field_1)
        schema_definitions_1 = None
        field_2 = module_1.from_json_schema(dict_0)
        list_0 = []
        schema_definitions_2 = module_0.SchemaDefinitions(*list_0)
        field_3 = module_1.const_from_json_schema(dict_0, schema_definitions_1)
    except BaseException:
        pass