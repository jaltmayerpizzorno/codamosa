

# Generated at 2024-06-04 20:17:05.648566
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start


# Generated at 2024-06-04 20:17:10.032536
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

# Generated at 2024-06-04 20:17:15.044970
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

    token = Token(value={"name": "John"}, start=0, end=10)
   

# Generated at 2024-06-04 20:17:19.256319
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email

# Generated at 2024-06-04 20:17:24.041989
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

# Generated at 2024-06-04 20:17:27.567798
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end

# Generated at 2024-06-04 20:17:31.213700
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:17:34.536851
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:17:41.511137
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start


# Generated at 2024-06-04 20:17:44.607054
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:17:59.717432
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start

# Generated at 2024-06-04 20:18:04.590919
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end

# Generated at 2024-06-04 20:18:08.499055
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start

# Generated at 2024-06-04 20:18:12.345361
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:18:14.643874
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)

    token = Token(value={"name": "A very long name"}, start=0, end=17)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must have no more than 10 characters."
        assert error.messages[0].start_position == 0
        assert error.messages[0].end_position == 17
```

# Generated at 2024-06-04 20:18:17.535796
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

    token = Token(value={"name": "John"},

# Generated at 2024-06-04 20:18:22.832234
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email

# Generated at 2024-06-04 20:18:29.806773
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[

# Generated at 2024-06-04 20:18:34.335146
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

    token = Token(value={"name": "John"},

# Generated at 2024-06-04 20:18:41.441452
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end

# Generated at 2024-06-04 20:18:55.622209
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[

# Generated at 2024-06-04 20:18:59.180322
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:19:05.552128
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

    token = Token(value={"name":

# Generated at 2024-06-04 20:19:09.109280
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email

# Generated at 2024-06-04 20:19:15.632434
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:19:21.432336
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

    token = Token(value={"name":

# Generated at 2024-06-04 20:19:27.953157
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email

# Generated at 2024-06-04 20:19:32.283239
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:19:38.499668
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:19:43.962600
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:19:57.196311
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

    token = Token(value={"name": "John"}, start=0, end=10)
   

# Generated at 2024-06-04 20:20:00.911434
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[

# Generated at 2024-06-04 20:20:04.964953
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start


# Generated at 2024-06-04 20:20:08.842202
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end

# Generated at 2024-06-04 20:20:13.286518
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:20:18.060546
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:20:22.836182
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

# Generated at 2024-06-04 20:20:27.729558
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start


# Generated at 2024-06-04 20:20:31.388741
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:20:35.242088
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:20:58.843455
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start


# Generated at 2024-06-04 20:21:03.161794
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start


# Generated at 2024-06-04 20:21:08.231471
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:21:12.312594
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email

# Generated at 2024-06-04 20:21:15.816475
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[

# Generated at 2024-06-04 20:21:20.783576
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:21:25.988772
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:21:31.333058
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end
```

# Generated at 2024-06-04 20:21:35.416033
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start

# Generated at 2024-06-04 20:21:40.443949
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email

# Generated at 2024-06-04 20:22:24.285469
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email

# Generated at 2024-06-04 20:22:29.939909
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

    token = Token

# Generated at 2024-06-04 20:22:35.217702
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:22:39.102331
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email

# Generated at 2024-06-04 20:22:44.601157
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end

# Generated at 2024-06-04 20:22:49.183861
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end

# Generated at 2024-06-04 20:22:53.007228
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:22:57.144459
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:23:02.535450
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:23:07.920093
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[

# Generated at 2024-06-04 20:24:29.594942
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:24:33.522025
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:24:40.090860
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:24:46.159758
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:24:49.673107
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:24:52.883189
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(value={"name": "John", "email": "invalid-email"}, start=0, end=20)
    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["email"]).end

    token = Token(value={"name": "John"},

# Generated at 2024-06-04 20:24:56.338674
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start

# Generated at 2024-06-04 20:25:00.214671
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:25:04.057037
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John Doe", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    try:
        validate_with_positions(token=token, validator=ExampleSchema)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
        assert error.messages[0].end_position == token.lookup(["

# Generated at 2024-06-04 20:25:08.910371
```python
    from typesystem.tokenize.tokens import Token
    from typesystem.fields import String
    from typesystem.schemas import Schema
    from typesystem.base import ValidationError

    class ExampleSchema(Schema):
        name = String(max_length=10)
        email = String(format="email")

    token = Token(
        value={"name": "John", "email": "invalid-email"},
        start=0,
        end=20,
        start_position=None,
        end_position=None,
    )

    validator = ExampleSchema

    try:
        validate_with_positions(token=token, validator=validator)
    except ValidationError as error:
        assert len(error.messages) == 1
        assert error.messages[0].text == "Must be a valid email address."
        assert error.messages[0].code == "format"
        assert error.messages[0].index == ["email"]
        assert error.messages[0].start_position == token.lookup(["email"]).start
