# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        str_0 = ',s"t\\jjDUY0J5s&T'
        int_0 = 0
        float_0 = -3008.075
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0, int_0)
        str_1 = 'L\r`w\x0brsh`\n+}}bfp'
        int_1 = -1421
        str_2 = '5[rFP!5I=9$aqFpRc{A\t'
        str_3 = '^|jbE'
        dict_0 = {str_1: int_1, str_1: float_0, str_2: int_1, str_3: int_0}
        argument_parser_0 = module_1.ArgumentParser(dict_0, str_1)
        var_0 = module_0.add_subset_options(argument_parser_0)
        var_1 = sorting_help_formatter_0.add_arguments(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'eaBvurhkt}DA]w\x0c'
        bool_0 = None
        float_0 = -2158.0
        dict_0 = {bool_0: float_0, str_0: bool_0}
        unrecognized_argument_0 = module_0.UnrecognizedArgument(float_0, bool_0, dict_0)
        float_1 = 365.70466
        prepend_list_action_0 = module_0.PrependListAction(str_0, bool_0, unrecognized_argument_0, float_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2091.0
        bool_0 = False
        int_0 = 70
        str_0 = "t%$U,.Fdm=|'#g_s"
        str_1 = '\noptions:\n  stage:\n    description:\n      - Control when this vars plugin may be executed.\n      - Setting this option to C(all) will run the vars plugin after importing inventory and whenever it is demanded by a task.\n      - Setting this option to C(task) will only run the vars plugin whenever it is demanded by a task.\n      - Setting this option to C(inventory) will only run the vars plugin after parsing inventory.\n      - If this option is omitted, the global I(RUN_VARS_PLUGINS) configuration is used to determine when to execute the vars plugin.\n    choices: [\'all\', \'task\', \'inventory\']\n    version_added: "2.10"\n    type: str\n'
        float_1 = -2406.2
        unrecognized_argument_0 = module_0.UnrecognizedArgument(int_0, str_0, str_1, float_1)
        ansible_version_0 = module_0.AnsibleVersion(bool_0, unrecognized_argument_0)
        var_0 = module_0.maybe_unfrack_path(float_0)
        unrecognized_argument_1 = None
        var_1 = module_0.add_meta_options(unrecognized_argument_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        var_0 = module_0.create_base_parser(bool_0)
        str_0 = 'U*omvqbmZ'
        var_1 = module_0.add_connect_options(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        var_0 = module_0.add_verbosity_options(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        list_0 = [tuple_0]
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(list_0)
        var_0 = module_0.add_async_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'F*;I'
        var_0 = module_0.add_basedir_options(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 12.6
        var_0 = module_0.add_check_options(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xee\xf1\xefO9@\xea\xa8\xf9Dq^\xf7\xe3\xd8!'
        var_0 = module_0.add_connect_options(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'A^(zWX{sIQO]{$4E2'
        set_0 = {str_0, str_0, str_0}
        var_0 = module_0.add_fork_options(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_version_0 = None
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(ansible_version_0)
        var_0 = module_0.add_fork_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'F*;I'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.add_inventory_options(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -1093.90873
        var_0 = module_0.add_meta_options(float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        var_0 = module_0.add_output_options(bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        argument_parser_0 = module_1.ArgumentParser()
        var_0 = module_0.add_meta_options(argument_parser_0)
        str_0 = '--force-handlers'
        str_1 = '--flush-cache'
        str_2 = [str_0, str_1]
        var_1 = argument_parser_0.parse_args(str_2)
        var_2 = []
        dict_0 = {argument_parser_0: var_2}
        var_3 = module_0.add_runas_options(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        var_0 = module_0.add_runas_prompt_options(bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        set_0 = set()
        var_0 = module_0.add_runtask_options(set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        var_0 = module_0.add_tasknoplay_options(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'offset'
        var_0 = module_0.add_subset_options(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'requires_ansible'
        int_0 = -2947
        str_1 = '|8(I~EYHM(~'
        bool_0 = True
        unrecognized_argument_0 = module_0.UnrecognizedArgument(int_0, str_1, bool_0)
        set_0 = {str_0, unrecognized_argument_0, str_0}
        complex_0 = None
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(complex_0)
        dict_0 = {complex_0: str_1, complex_0: complex_0, str_1: int_0}
        prepend_list_action_0 = module_0.PrependListAction(int_0, int_0, dict_0)
        float_0 = 0.0001
        prepend_list_action_1 = module_0.PrependListAction(sorting_help_formatter_0, prepend_list_action_0, float_0)
        list_0 = [unrecognized_argument_0]
        ansible_version_0 = module_0.AnsibleVersion(dict_0, set_0, list_0, int_0, sorting_help_formatter_0, float_0, prepend_list_action_1, list_0)
        prepend_list_action_2 = module_0.PrependListAction(prepend_list_action_1, ansible_version_0, set_0)
        str_2 = '--become-pass-file'
        unrecognized_argument_1 = module_0.UnrecognizedArgument(str_0, set_0, prepend_list_action_2, str_2)
        float_1 = -1010.76652
        var_0 = module_0.add_runas_prompt_options(float_1, unrecognized_argument_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 2225
        bool_0 = True
        unrecognized_argument_0 = module_0.UnrecognizedArgument(int_0, bool_0)
        float_0 = 310.55048
        set_0 = {float_0, bool_0, bool_0}
        var_0 = unrecognized_argument_0.__call__(float_0, set_0, int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'JH*t'
        list_0 = [str_0, str_0, str_0, str_0]
        float_0 = -2243.0719
        str_1 = 'a*us},B=om*'
        float_1 = 1546.0
        tuple_0 = (str_0,)
        int_0 = -4745
        set_0 = None
        dict_0 = None
        list_1 = [set_0, float_1, dict_0]
        bool_0 = False
        unrecognized_argument_0 = module_0.UnrecognizedArgument(float_1, tuple_0, int_0, str_0, list_1, bool_0)
        bool_1 = False
        str_2 = 's92R~P\t*@duc'
        str_3 = 'Wc\t4tDdnKU{o'
        ansible_version_0 = module_0.AnsibleVersion(tuple_0, list_1, unrecognized_argument_0, str_3, dict_0)
        bytes_0 = b'$\xcbI lH|&\xe6\x94\xe8N(t\xb5L'
        str_4 = 'w)\tJWQ79*&W`?8[UVDT:'
        ansible_version_1 = module_0.AnsibleVersion(str_2, ansible_version_0, bytes_0, str_4)
        float_2 = 886.97197
        ansible_version_2 = module_0.AnsibleVersion(unrecognized_argument_0, int_0, bool_1, ansible_version_1, float_2)
        var_0 = ansible_version_2.__call__(float_0, str_1, list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 0
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(int_0)
        var_0 = module_0.add_module_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_23():
    try:
        var_0 = module_0.version()
        int_0 = 91
        list_0 = [int_0, int_0, int_0]
        int_1 = 5171
        ansible_version_0 = None
        bytes_0 = b"LK\xe1p\x18\x1eA\xb7\xf3\x1aI\x9en\x12'\x96\x8f\xf8"
        tuple_0 = None
        str_0 = 'D5xuH'
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, bytes_0, tuple_0, ansible_version_0, str_0, ansible_version_0)
        bool_0 = False
        str_1 = 'T*A:Oy'
        float_0 = -1.2043212967315269
        prepend_list_action_1 = module_0.PrependListAction(str_1, float_0)
        unrecognized_argument_0 = module_0.UnrecognizedArgument(prepend_list_action_0, str_1, list_0)
        str_2 = '?'
        set_0 = {var_0, tuple_0, int_1, str_0}
        unrecognized_argument_1 = module_0.UnrecognizedArgument(bool_0, unrecognized_argument_0)
        var_1 = module_0.version(unrecognized_argument_1)
        str_3 = 'kY;<JD?Sxd~9C:\x0cd=Neq'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_2, set_0, str_3)
    except BaseException:
        pass

def test_case_24():
    try:
        var_0 = module_0.version()
        int_0 = 5171
        str_0 = 'D5xuH'
        tuple_0 = None
        set_0 = {str_0}
        bool_0 = False
        list_0 = [int_0]
        str_1 = '_Y`qe)AP'
        prepend_list_action_0 = module_0.PrependListAction(list_0, set_0, bool_0, str_1, tuple_0)
    except BaseException:
        pass

def test_case_25():
    try:
        var_0 = module_0.version()
        ansible_version_0 = None
        bytes_0 = b"LK\xe1p\x18\x1eA\xb7\xf3\x1aI\x9en\x12'\x96\x8f\xf8"
        str_0 = '^|TbE'
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, str_0)
        bool_0 = False
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bool_0)
        var_1 = prepend_list_action_0.__call__(bytes_0, bool_0, ansible_version_0)
    except BaseException:
        pass

def test_case_26():
    try:
        var_0 = module_0.version()
        int_0 = 5192
        ansible_version_0 = None
        bytes_0 = b"LK\xe1p\x18\x1eA\xb7\xf3\x1aI\x9en\x12'\x96\x8f\xf8"
        str_0 = 'D5xuH'
        str_1 = '^|TbE'
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, str_1)
        set_0 = set()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        var_1 = prepend_list_action_0.__call__(sorting_help_formatter_0, prepend_list_action_0, bytes_0)
        str_2 = 'VDy'
        float_0 = 962.0
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(str_2, float_0)
        str_3 = 'F~'
        prepend_list_action_1 = module_0.PrependListAction(int_0, str_2, str_0, str_3)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b';fy\xb3H\x10\x0f\x83\xe3m\xa9\xf3\xbd\xef\rr'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bytes_0)
        var_0 = module_0.add_basedir_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_28():
    try:
        var_0 = module_0.version()
        ansible_version_0 = None
        str_0 = '}Er9\x0cQ'
        set_0 = set()
        var_1 = module_0.create_base_parser(str_0, set_0)
        str_1 = 'Tjbn_S"p4gm\x0c8[.Q|Xj'
        argument_parser_0 = module_1.ArgumentParser(str_1, ansible_version_0)
        var_2 = module_0.add_check_options(argument_parser_0)
        bytes_0 = b"LK\xe1p\x18\x1eA\xb7\xf3\x1aI\x9en\x12'\x96\x8f\xf8"
        tuple_0 = None
        str_2 = 'D5xuH'
        str_3 = '^|TbE'
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, str_3)
        set_1 = set()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_1)
        var_3 = prepend_list_action_0.__call__(sorting_help_formatter_0, prepend_list_action_0, bytes_0)
        str_4 = 'y'
        float_0 = 1808.3471793653111
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(str_4, float_0)
        str_5 = '~'
        str_6 = '\\0/fUa:$`k S"Ch. '
        dict_0 = {str_3: str_4, str_6: ansible_version_0, str_4: sorting_help_formatter_1}
        bool_0 = False
        bool_1 = False
        prepend_list_action_1 = module_0.PrependListAction(dict_0, str_2, str_5, bool_0, bool_1, tuple_0)
    except BaseException:
        pass

def test_case_29():
    try:
        var_0 = module_0.version()
        ansible_version_0 = None
        bytes_0 = b"LK\xe1p\x18\x1eA\xb7\xf3\x1aI\x9en\x12'\x96\x8f\xf8"
        str_0 = '^|TbE'
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, str_0)
        bool_0 = False
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bool_0)
        str_1 = ''
        var_1 = sorting_help_formatter_0.add_arguments(str_1)
        var_2 = prepend_list_action_0.__call__(bytes_0, bool_0, ansible_version_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        var_0 = module_0.version()
        list_0 = [bool_0, bool_0, dict_0, var_0]
        list_1 = None
        int_0 = 2428
        bytes_0 = b'\t[c\xd5K\xef\x0e.\xe3\xf8\x85\\'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(bytes_0)
        argument_parser_0 = module_1.ArgumentParser(list_0, list_1, int_0, sorting_help_formatter_0)
        var_1 = module_0.add_tasknoplay_options(argument_parser_0)
        bytes_1 = b'\x8b\xd0\x15\x06\xedu\x85\xfe'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bool_0, dict_0, bytes_1)
        set_0 = {var_1}
        float_0 = 2485.69941
        str_0 = '*]'
        str_1 = "h2'=h\net\t"
        str_2 = 'BaUJ//w@H:+6Shm#kb7N'
        prepend_list_action_0 = module_0.PrependListAction(set_0, float_0, str_0, str_1, str_2)
    except BaseException:
        pass

def test_case_31():
    try:
        var_0 = module_0.version()
        int_0 = 91
        int_1 = 5192
        ansible_version_0 = None
        bytes_0 = b"LK\xe1p\x18\x1eA\xb7\xf3\x1aI\x9en\x12'\x96\x8f\xf8"
        str_0 = 'D5xuH'
        tuple_0 = None
        str_1 = '^|TbE'
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, str_1)
        set_0 = set()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        float_0 = None
        ansible_version_1 = module_0.AnsibleVersion(prepend_list_action_0, float_0)
        var_1 = prepend_list_action_0.__call__(sorting_help_formatter_0, prepend_list_action_0, bytes_0)
        float_1 = 1202.0
        str_2 = 'F~'
        list_0 = [tuple_0, str_1, float_1]
        unrecognized_argument_0 = module_0.UnrecognizedArgument(sorting_help_formatter_0, int_0, set_0, list_0)
        ansible_version_2 = module_0.AnsibleVersion(unrecognized_argument_0, float_1)
        list_1 = [int_1, ansible_version_2]
        list_2 = [ansible_version_0, str_2, str_1]
        var_2 = prepend_list_action_0.__call__(list_2, prepend_list_action_0, bytes_0)
        dict_0 = {tuple_0: int_0, bytes_0: str_0, float_1: str_1}
        prepend_list_action_1 = module_0.PrependListAction(bytes_0, list_1, sorting_help_formatter_0, unrecognized_argument_0, dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        var_0 = module_0.version()
        ansible_version_0 = None
        bytes_0 = b"LK\xe1p\x18\x1eA\xb7\xf3\x1aI\x9en\x12'\x96\x8f\xf8"
        str_0 = '^|TbE'
        prepend_list_action_0 = module_0.PrependListAction(ansible_version_0, str_0)
        set_0 = set()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        var_1 = prepend_list_action_0.__call__(sorting_help_formatter_0, prepend_list_action_0, bytes_0)
        str_1 = ']#,Z?'
        float_0 = 962.0
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(str_1, float_0)
        var_2 = module_0.add_runtask_options(sorting_help_formatter_1)
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = False
        bytes_0 = b'\xaf:<Rf\x8e\xc4\t\xcf'
        dict_0 = {bool_0: bytes_0, bool_0: bytes_0, bool_0: bytes_0, bytes_0: bytes_0}
        argument_parser_0 = module_1.ArgumentParser(bytes_0, dict_0)
        var_0 = module_0.add_async_options(argument_parser_0)
        var_1 = module_0.add_runas_prompt_options(bool_0)
    except BaseException:
        pass