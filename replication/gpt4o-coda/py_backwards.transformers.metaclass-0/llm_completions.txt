

# Generated at 2024-06-02 23:24:26.731696
```python
    source_code = """

# Generated at 2024-06-02 23:24:29.524260
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source_code = """
    class A(metaclass=B):
        pass
    """
    expected_code = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source_code)
    expected_tree = parse_snippet(expected_code)

    transformed_tree = transformer.visit(tree)
    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source_code = """
    class A:
        pass
    """
    expected_code = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A:
        pass
    """
    tree = parse

# Generated at 2024-06-02 23:24:30.061829
```python
    source = """

# Generated at 2024-06-02 23:24:30.609482
```python
    source_code = """

# Generated at 2024-06-02 23:24:34.869425
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected

# Generated at 2024-06-02 23:24:36.801269
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:24:37.419493
```python
    source_code = """

# Generated at 2024-06-02 23:24:40.508293
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case 1: Class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    tree = parse_snippet(source)
    transformed_tree = transformer.visit(tree)

    expected_source = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    expected_tree = parse_snippet(expected_source)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case 2: Class without metaclass
    source = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    transformed_tree = transformer.visit(tree)

    expected_source = """
    from six import with_metaclass as _py_backwards_six

# Generated at 2024-06-02 23:24:42.205992
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:24:42.692908
```python
    source_code = """

# Generated at 2024-06-02 23:24:47.668733
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:24:48.175156
```python
    source_code = """

# Generated at 2024-06-02 23:24:48.731117
```python
    source = """

# Generated at 2024-06-02 23:24:52.853620
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast

# Generated at 2024-06-02 23:24:54.484899
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:24:56.939242
```python
    source_code = """
    class A(metaclass=B):
        pass
    """
    expected_code = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source_code)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected_code))
```

# Generated at 2024-06-02 23:24:57.458674
```python
    source_code = """

# Generated at 2024-06-02 23:24:59.351764
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:01.163676
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:03.053304
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:11.814795
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)
    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:25:13.808832
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:15.462867
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:17.329766
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:19.061959
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:21.203947
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_source = ast.unparse(transformed_tree)
    assert transformed_source.strip() == expected.strip()
```

# Generated at 2024-06-02 23:25:22.007869
```python
    source_code = """

# Generated at 2024-06-02 23:25:24.303755
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_source = ast.unparse(transformed_tree)
    assert transformed_source.strip() == expected.strip()
```

# Generated at 2024-06-02 23:25:26.217776
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:25:28.047006
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:46.201646
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:49.150865
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:50.571227
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:25:53.367388
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_source = ast.unparse(transformed_tree)
    assert transformed_source.strip() == expected.strip()
```

# Generated at 2024-06-02 23:25:55.191128
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:25:57.364870
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:26:00.133645
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast

# Generated at 2024-06-02 23:26:01.965034
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:26:03.689569
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:26:05.590219
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:26:31.798459
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:26:33.556410
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:26:35.239849
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_source = ast.unparse(transformed_tree)
    assert transformed_source.strip() == expected.strip()
```

# Generated at 2024-06-02 23:26:37.381230
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:26:40.451048
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:26:42.184750
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:26:43.829824
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:26:54.893540
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:26:56.636273
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:27:00.192477
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:27:49.746040
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:27:51.253577
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:27:52.971767
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:27:54.457543
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:27:56.413110
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:27:59.131483
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:28:02.611132
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:28:04.194014
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_source = ast.unparse(transformed_tree)
    assert transformed_source.strip() == expected.strip()
```

# Generated at 2024-06-02 23:28:06.117458
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:28:07.999162
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:29:46.508837
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:29:49.392952
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast

# Generated at 2024-06-02 23:29:50.817794
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:29:52.991004
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:29:54.494563
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:29:56.400359
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)
    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:29:59.121945
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case 1: Class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    tree = parse_snippet(source)
    transformed_tree = transformer.visit(tree)

    expected_source = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    expected_tree = parse_snippet(expected_source)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case 2: Class without metaclass
    source = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    transformed_tree = transformer.visit(tree)

    expected_source = """
    class A:
        pass
    """
    expected_tree = parse

# Generated at 2024-06-02 23:30:01.658450
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected

# Generated at 2024-06-02 23:30:03.242327
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:30:05.892633
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast

# Generated at 2024-06-02 23:33:19.275690
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast

# Generated at 2024-06-02 23:33:20.940273
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:33:22.787174
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:33:24.341099
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:33:28.188964
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast

# Generated at 2024-06-02 23:33:29.668782
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:33:32.404731
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast

# Generated at 2024-06-02 23:33:34.592290
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass

    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    
    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    
    assert ast.dump(transformed_tree) == ast.dump(ast.parse(expected))
```

# Generated at 2024-06-02 23:33:37.015276
```python
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """

    tree = ast.parse(source)
    transformer = MetaclassTransformer()
    transformed_tree = transformer.visit(tree)
    transformed_code = ast.unparse(transformed_tree)

    assert transformed_code.strip() == expected.strip()
```

# Generated at 2024-06-02 23:33:40.178682
```python
    import typed_ast.ast3 as ast
    from ..utils.tree import parse_snippet

    transformer = MetaclassTransformer()

    # Test case: class with metaclass
    source = """
    class A(metaclass=B):
        pass
    """
    expected = """
    from six import with_metaclass as _py_backwards_six_withmetaclass
    class A(_py_backwards_six_withmetaclass(B)):
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast.dump(transformed_tree) == ast.dump(expected_tree)

    # Test case: class without metaclass
    source = """
    class A:
        pass
    """
    expected = """
    class A:
        pass
    """
    tree = parse_snippet(source)
    expected_tree = parse_snippet(expected)
    transformed_tree = transformer.visit(tree)

    assert ast