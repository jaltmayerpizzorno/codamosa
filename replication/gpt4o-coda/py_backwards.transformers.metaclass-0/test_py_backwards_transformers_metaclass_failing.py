# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.metaclass as module_1

def test_case_0():
    try:
        module_x_var_0 = module_0.Module()
        list_0 = []
        a_s_t_0 = module_0.AST(*list_0)
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        module_x_var_1 = metaclass_transformer_0.visit_Module(module_x_var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 801.55856
        list_0 = [float_0, float_0, float_0, float_0]
        str_0 = '5Xh$+'
        dict_0 = {str_0: list_0}
        a_s_t_0 = module_0.AST(**dict_0)
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_0 = module_0.ClassDef(*list_0)
        list_1 = []
        str_1 = '&S8?;,8^a'
        dict_1 = {str_1: list_1}
        a_s_t_1 = module_0.AST(*list_1, **dict_1)
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_1)
        class_def_1 = metaclass_transformer_1.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_2():
    try:
        class_def_0 = module_0.ClassDef()
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        int_0 = 846
        list_1 = [int_0, list_0, list_0, list_0]
        class_def_0 = module_0.ClassDef(*list_1)
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
        list_2 = None
        module_x_var_0 = module_0.Module(*list_2)
    except BaseException:
        pass

def test_case_4():
    try:
        class_def_0 = None
        list_0 = [class_def_0, class_def_0, class_def_0]
        list_1 = [list_0]
        module_x_var_0 = module_0.Module(*list_1)
        int_0 = -2391
        list_2 = [int_0, int_0, int_0, int_0]
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        module_x_var_1 = metaclass_transformer_0.visit_Module(module_x_var_0)
        a_s_t_1 = module_0.AST()
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_1)
        module_x_var_2 = metaclass_transformer_1.visit_Module(module_x_var_0)
        dict_0 = {}
        a_s_t_2 = module_0.AST(*list_2, **dict_0)
    except BaseException:
        pass