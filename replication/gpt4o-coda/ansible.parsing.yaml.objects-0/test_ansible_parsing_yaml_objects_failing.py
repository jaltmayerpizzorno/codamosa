# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.__str__()
        var_1 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'cron instantiated - name: "%s"'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.capitalize()
        bytes_0 = b'\xfc_\x02>R\xae\x0e'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.__complex__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1817.5
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        dict_0 = None
        var_0 = ansible_vault_encrypted_unicode_0.__le__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.lstrip()
        var_1 = ansible_vault_encrypted_unicode_0.__gt__(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        bytes_0 = b'MD\xc1\xae\x84\x92S\xed\x90\x81\xe0\x1b\xc6\x1c'
        str_0 = ''
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        int_0 = 568
        var_1 = ansible_vault_encrypted_unicode_0.__mul__(int_0)
        var_2 = ansible_vault_encrypted_unicode_1.index(ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'g4S*30s61'
        str_1 = '*'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.split()
        bool_0 = True
        var_1 = ansible_vault_encrypted_unicode_1.islower()
        bytes_0 = b''
        tuple_0 = (bool_0, bytes_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_2 = ansible_vault_encrypted_unicode_2.split()
        var_3 = ansible_vault_encrypted_unicode_2.rstrip()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_4 = ansible_vault_encrypted_unicode_2.istitle()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_5 = ansible_vault_encrypted_unicode_3.isalpha()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_6 = ansible_vault_encrypted_unicode_3.__hash__()
        bool_1 = False
        var_7 = ansible_vault_encrypted_unicode_2.__mod__(bool_1)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = None
        list_0 = [bool_0, ansible_base_y_a_m_l_object_0, bool_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '\n0 packages upgraded, 0 newly installed'
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_0 = ansible_vault_encrypted_unicode_0.casefold()
        var_1 = ansible_vault_encrypted_unicode_0.__lt__(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.isupper()
        var_3 = ansible_vault_encrypted_unicode_0.isspace()
        var_4 = ansible_vault_encrypted_unicode_0.__eq__(ansible_vault_encrypted_unicode_0)
        list_1 = None
        var_5 = ansible_vault_encrypted_unicode_0.__add__(list_1)
        var_6 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xda'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        int_0 = 3600
        list_0 = [ansible_base_y_a_m_l_object_0, bytes_0]
        var_0 = ansible_vault_encrypted_unicode_0.center(int_0, *list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 362
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        dict_0 = None
        var_0 = ansible_vault_encrypted_unicode_0.endswith(dict_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'-'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.isnumeric()
        list_0 = None
        bytes_1 = b'_\x87\xd3\xbd\xea\x16[\xa7\x81\xb5\x96s\xfc\xa5\x18\x04\x8b\xc4'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_1 = ansible_vault_encrypted_unicode_2.index(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = '0R@U\x0b$'
        dict_0 = {str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.ljust(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.partition(ansible_sequence_0)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        set_0 = {ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0}
        bytes_0 = b'/\xd0\xd3\xdb~a'
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.replace(set_0, bytes_0, set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'nameservers'
        list_0 = [str_0, str_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.istitle()
        var_1 = ansible_vault_encrypted_unicode_0.rsplit()
        set_0 = {str_0}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        str_1 = ' helper function to bump a statistic '
        dict_0 = {str_0: list_0, str_0: ansible_vault_encrypted_unicode_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_2 = ansible_vault_encrypted_unicode_3.rindex(str_1, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_14():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = True
        bool_1 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_1)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        str_0 = 'cPJ[)aZvga'
        var_1 = ansible_vault_encrypted_unicode_0.expandtabs()
        var_2 = ansible_vault_encrypted_unicode_0.isspace()
        var_3 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        var_4 = ansible_vault_encrypted_unicode_0.is_encrypted()
        str_1 = 'eJU0O ;Nx'
        dict_0 = {str_1: str_0}
        list_0 = []
        var_5 = ansible_vault_encrypted_unicode_0.rjust(bool_0, *list_0)
        float_0 = -3787.69526
        var_6 = ansible_vault_encrypted_unicode_0.replace(dict_0, ansible_vault_encrypted_unicode_0, float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -955
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.isspace()
        list_0 = []
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        bytes_0 = b'V"\xcb4F\xd5\xdd}\xca2\xed\xa9H\xb9tK\xce'
        list_1 = [bytes_0]
        var_1 = ansible_vault_encrypted_unicode_0.rpartition(list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -494
        int_1 = 30
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_1)
        var_0 = ansible_vault_encrypted_unicode_0.startswith(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        bytes_0 = b'\xd4\xef\xa02'
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.is_encrypted()
        int_0 = -3697
        set_0 = set()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_2 = ansible_vault_encrypted_unicode_2.count(set_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -2071
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        list_0 = [ansible_vault_encrypted_unicode_0, int_0, int_0, ansible_vault_encrypted_unicode_0]
        var_0 = ansible_vault_encrypted_unicode_0.zfill(list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        list_0 = []
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = None
        str_0 = 'MHkE'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__len__()
        str_1 = 'h`/H*# <'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        list_0 = [ansible_vault_encrypted_unicode_1, str_1, str_1, str_1]
        var_1 = ansible_vault_encrypted_unicode_1.find(list_0, float_0)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_22():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        str_0 = 'cPJ[)aZvga'
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        str_1 = 'Fz\r&}K&@T2WDv|nZ"fF'
        var_2 = ansible_vault_encrypted_unicode_0.__add__(str_1)
        var_3 = ansible_vault_encrypted_unicode_0.is_encrypted()
        bytes_0 = b'C\\\xf2y\xbe\xb5\xa1'
        var_4 = ansible_vault_encrypted_unicode_0.join(bytes_0)
    except BaseException:
        pass

def test_case_23():
    try:
        tuple_0 = None
        bytes_0 = b'\x04=_u'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.rfind(tuple_0)
    except BaseException:
        pass

def test_case_24():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bytes_0 = b'\x92\xeaa?f|n\x92e\xfc\x1cQ'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.title()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.swapcase()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_2 = ansible_vault_encrypted_unicode_2.lstrip()
        var_3 = ansible_vault_encrypted_unicode_2.__gt__(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_26():
    try:
        dict_0 = {}
        bool_0 = True
        list_0 = [dict_0, dict_0, dict_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.format_map(bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b'\xac\x05W\xdb!\xa4'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_28():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = None
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        str_0 = 'cPJ[)aZvga'
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        str_1 = 'eJU0O ;Nx'
        dict_0 = {str_1: str_0}
        float_0 = -3787.69526
        var_3 = ansible_vault_encrypted_unicode_0.replace(dict_0, ansible_vault_encrypted_unicode_0, float_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = -955
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_1.__le__(ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_1 = ansible_vault_encrypted_unicode_2.isspace()
        dict_0 = None
        list_0 = []
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_2 = ansible_vault_encrypted_unicode_3.__contains__(dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = '=Q\\S:\tw-J\x0cG1B3)'
        str_1 = '\n        Given a dictionary of values, load up the field attributes for\n        this object. As with serialize(), if there are any non-field\n        attribute data members, this method will need to be overridden\n        and extended.\n        '
        str_2 = 'v5c'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_1.find(ansible_vault_encrypted_unicode_0)
        dict_0 = {str_0: str_0, str_1: str_0, str_0: ansible_base_y_a_m_l_object_0}
        set_0 = set()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_1 = ansible_vault_encrypted_unicode_2.isalpha()
        var_2 = ansible_vault_encrypted_unicode_2.__contains__(dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.casefold()
        list_0 = [ansible_unicode_0]
        int_0 = 4239
        var_1 = ansible_vault_encrypted_unicode_0.__reversed__()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_2 = ansible_vault_encrypted_unicode_1.__hash__()
        var_3 = ansible_vault_encrypted_unicode_1.count(ansible_vault_encrypted_unicode_0, list_0)
    except BaseException:
        pass

def test_case_32():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = None
        list_0 = [bool_0, ansible_base_y_a_m_l_object_0, bool_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '\n0 packages upgraded, 0 newly installed'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.islower()
        var_1 = ansible_vault_encrypted_unicode_0.__lt__(str_0)
        bytes_0 = b'\xb5a\xebB\xbc\xd9.\xbb\xca\xc7'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_2 = ansible_vault_encrypted_unicode_0.__lt__(ansible_vault_encrypted_unicode_2)
        var_3 = ansible_vault_encrypted_unicode_0.isspace()
        var_4 = ansible_vault_encrypted_unicode_0.casefold()
        var_5 = ansible_vault_encrypted_unicode_0.__eq__(bool_0)
        list_1 = None
        var_6 = ansible_vault_encrypted_unicode_0.__radd__(ansible_base_y_a_m_l_object_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_7 = ansible_vault_encrypted_unicode_1.__ne__(ansible_sequence_0)
        var_8 = ansible_vault_encrypted_unicode_0.__add__(list_1)
        var_9 = ansible_vault_encrypted_unicode_1.title()
        var_10 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_11 = ansible_vault_encrypted_unicode_3.swapcase()
        str_1 = '{true}'
        var_12 = ansible_vault_encrypted_unicode_0.find(str_1, list_1)
        var_13 = ansible_vault_encrypted_unicode_0.isalnum()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_14 = ansible_vault_encrypted_unicode_0.__ge__(ansible_unicode_0)
        tuple_0 = ()
        var_15 = ansible_vault_encrypted_unicode_0.replace(ansible_unicode_0, tuple_0)
    except BaseException:
        pass

def test_case_33():
    try:
        ansible_mapping_0 = None
        str_0 = 'Unable to cleanup temp files: %s'
        str_1 = 's'
        list_0 = [str_1, ansible_mapping_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_1.rfind(ansible_vault_encrypted_unicode_0, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_0 = None
        list_0 = [bool_0, ansible_base_y_a_m_l_object_0, bool_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '\n0 packages upgraded, 0 newly installed'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.islower()
        var_1 = ansible_vault_encrypted_unicode_0.__lt__(str_0)
        var_2 = ansible_vault_encrypted_unicode_0.isspace()
        var_3 = ansible_vault_encrypted_unicode_0.__eq__(bool_0)
        list_1 = None
        var_4 = ansible_vault_encrypted_unicode_1.__reversed__()
        var_5 = ansible_vault_encrypted_unicode_0.__radd__(ansible_base_y_a_m_l_object_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_6 = ansible_vault_encrypted_unicode_1.__ne__(ansible_sequence_0)
        var_7 = ansible_vault_encrypted_unicode_0.__add__(list_1)
        var_8 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_9 = ansible_vault_encrypted_unicode_2.split()
        var_10 = ansible_vault_encrypted_unicode_2.swapcase()
        str_1 = '{true}'
        var_11 = ansible_vault_encrypted_unicode_0.find(str_1, list_1)
        var_12 = ansible_vault_encrypted_unicode_0.isalnum()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_13 = ansible_vault_encrypted_unicode_0.__ge__(ansible_unicode_0)
        tuple_0 = ()
        var_14 = ansible_vault_encrypted_unicode_2.replace(ansible_vault_encrypted_unicode_2, tuple_0, var_4)
    except BaseException:
        pass