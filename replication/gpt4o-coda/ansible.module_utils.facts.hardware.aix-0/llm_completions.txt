

# Generated at 2024-05-31 02:16:24.786451
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "hdisk0 Available Other\nhdisk1 Available Other\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsattr")

    hardware = AIXHardware(module)
    hardware.module.run_command = Mock(side_effect=[
        (0, "hdisk0 Available Other\nhdisk1 Available Other\n", ""),
        (0, "size 1000\nlocation 00-00-00\n", ""),
        (0, "size 2000\nlocation 00-00-01\n", "")
    ])

    expected_facts = {
        'devices': {
            'hdisk0': {
                'state': 'Available',
                'type': 'Other',
                'attributes': {
                    'size': '1000',
                    'location': '00-00-00'
                }
            },
            'hdisk1': {
                '

# Generated at 2024-05-31 02:16:27.935742
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "hdisk0 Available Other\nhdisk1 Available Other\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsattr")

    hardware = AIXHardware(module)
    hardware.module.run_command = Mock(side_effect=[
        (0, "hdisk0 Available Other\nhdisk1 Available Other\n", ""),
        (0, "size 1000\nlocation 00-00-00\n", ""),
        (0, "size 2000\nlocation 00-00-01\n", "")
    ])

    expected_facts = {
        'devices': {
            'hdisk0': {
                'state': 'Available',
                'type': 'Other',
                'attributes': {
                    'size': '1000',
                    'location': '00-00-00'
                }
            },
            'hdisk1': {
                '

# Generated at 2024-05-31 02:16:29.917899
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "proc0 Available\nproc1 Available\n", ""))
    aix_hardware = AIXHardware(module)
    cpu_facts = aix_hardware.get_cpu_facts()
    assert cpu_facts['processor_count'] == 2
    assert cpu_facts['processor'] == 'PowerPC_POWER8'
    assert cpu_facts['processor_cores'] == 8
```

# Generated at 2024-05-31 02:16:33.196074
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "hdisk0 Available Other\nhdisk1 Available Other\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsattr")

    hardware = AIXHardware(module)
    hardware.module.run_command = Mock(side_effect=[
        (0, "hdisk0 Available Other\nhdisk1 Available Other\n", ""),
        (0, "size 1000\nlocation 00-00-00\n", ""),
        (0, "size 2000\nlocation 00-00-01\n", "")
    ])

    expected_facts = {
        'devices': {
            'hdisk0': {
                'state': 'Available',
                'type': 'Other',
                'attributes': {
                    'size': '1000',
                    'location': '00-00-00'
                }
            },
            'hdisk1': {
                '

# Generated at 2024-05-31 02:16:35.737596
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "fwversion IBM,FW860.30 (SV860_095)\nMachine Serial Number: 1234567\nLPAR Info: LPAR123\nSystem Model: IBM,9117-MMB", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsconf")

    aix_hardware = AIXHardware(module)
    dmi_facts = aix_hardware.get_dmi_facts()

    expected_dmi_facts = {
        'firmware_version': 'FW860.30 (SV860_095)',
        'product_serial': '1234567',
        'lpar_info': 'LPAR123',
        'product_name': 'IBM,9117-MMB'
    }

    assert dmi_facts == expected_dmi_facts
```

# Generated at 2024-05-31 02:16:36.866703
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:16:40.482750
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "node mounted on / type jfs2 read/write on Mon Oct  4 10:00:00 2021\n/dev/hd1 mounted on /home type jfs2 read/write on Mon Oct  4 10:00:00 2021", ""))

    aix_hardware = AIXHardware(module)
    mount_facts = aix_hardware.get_mount_facts()

    expected_mounts = [
        {
            'mount': '/',
            'device': 'node',
            'fstype': 'jfs2',
            'options': 'read/write',
            'time': 'on Mon Oct  4 10:00:00 2021',
            'size_total': 0,
            'size_available': 0,
            'size_used': 0,
            'size_percent': 0
        },
        {
            'mount':

# Generated at 2024-05-31 02:16:45.308813
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size': '128 meg

# Generated at 2024-05-31 02:16:46.172318
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:16:49.746036
```python
    module = MagicMock()
    module.get_bin_path.return_value = '/usr/sbin/mount'
    module.run_command.return_value = (0, 'node mounted on / type jfs2 (rw)\n/dev/hd4 / jfs2 rw,log=/dev/hd8 0 0\n', '')

    aix_hardware = AIXHardware(module)
    mount_facts = aix_hardware.get_mount_facts()

    expected_mount_facts = {
        'mounts': [
            {
                'mount': '/',
                'device': '/dev/hd4',
                'fstype': 'jfs2',
                'options': 'rw,log=/dev/hd8',
                'time': '0 0'
            }
        ]
    }

    assert mount_facts == expected_mount_facts
```

# Generated at 2024-05-31 02:17:11.406101
```python
    module = MagicMock()
    module.run_command = MagicMock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = MagicMock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size':

# Generated at 2024-05-31 02:17:15.092098
```python
    module = MagicMock()
    module.run_command = MagicMock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = MagicMock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size':

# Generated at 2024-05-31 02:17:16.034874
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:17:18.102120
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "memory pages 524288\nfree pages 262144\n", ""))
    aix_hardware = AIXHardware(module)
    memory_facts = aix_hardware.get_memory_facts()
    assert memory_facts['memtotal_mb'] == 2048
    assert memory_facts['memfree_mb'] == 1024
    module.run_command.assert_any_call("/usr/bin/vmstat -v")
    module.run_command.assert_any_call("/usr/sbin/lsps -s")
```

# Generated at 2024-05-31 02:17:21.981435
```python
    module = MagicMock()
    module.run_command = MagicMock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    hardware = AIXHardware(module)
    vgs_facts = hardware.get_vgs_facts()
    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size': '128 megabyte(s)'
                },
                {
                    'pv_name': 'hdisk1',
                    '

# Generated at 2024-05-31 02:17:23.948443
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "proc0 Available\nproc1 Available\n", ""))
    aix_hardware = AIXHardware(module)
    cpu_facts = aix_hardware.get_cpu_facts()
    assert cpu_facts['processor_count'] == 2
    assert cpu_facts['processor'] == 'type'
    assert cpu_facts['processor_cores'] == 4
```

# Generated at 2024-05-31 02:17:27.017199
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "memory pages 1000000\nfree pages 500000\n", ""))
    aix_hardware = AIXHardware(module)
    memory_facts = aix_hardware.get_memory_facts()
    assert memory_facts['memtotal_mb'] == 4096
    assert memory_facts['memfree_mb'] == 2048
    module.run_command.assert_any_call("/usr/bin/vmstat -v")
    module.run_command.assert_any_call("/usr/sbin/lsps -s")
```

# Generated at 2024-05-31 02:17:30.218131
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "node mounted mounted over vfs date options\n/dev/hd4 / jfs2 Jan 01 00:00 rw,log=/dev/hd8\n", ""))
    hardware = AIXHardware(module)
    expected_mount_facts = {
        'mounts': [
            {
                'mount': '/',
                'device': '/dev/hd4',
                'fstype': 'jfs2',
                'options': 'rw,log=/dev/hd8',
                'time': 'Jan 01 00:00',
                'size_total': 0,
                'size_available': 0,
                'size_used': 0,
                'size_percent': 0
            }
        ]
    }
    assert hardware.get_mount_facts() == expected_mount_facts
```

# Generated at 2024-05-31 02:17:31.143444
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:17:33.111743
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "memory pages 524288\nfree pages 262144\n", ""))
    aix_hardware = AIXHardware(module)
    memory_facts = aix_hardware.get_memory_facts()
    assert memory_facts['memtotal_mb'] == 2048
    assert memory_facts['memfree_mb'] == 1024
    module.run_command.assert_any_call("/usr/bin/vmstat -v")
    module.run_command.assert_any_call("/usr/sbin/lsps -s")
```

# Generated at 2024-05-31 02:18:11.358906
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "fwversion IBM,FW860.30 (SV860_095)\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsconf")

    aix_hardware = AIXHardware(module)
    dmi_facts = aix_hardware.get_dmi_facts()

    assert dmi_facts['firmware_version'] == "FW860.30 (SV860_095)"
    assert 'product_serial' in dmi_facts
    assert 'lpar_info' in dmi_facts
    assert 'product_name' in dmi_facts
```

# Generated at 2024-05-31 02:18:12.334900
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:18:15.511626
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size': '128 meg

# Generated at 2024-05-31 02:18:19.685211
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size': '128 meg

# Generated at 2024-05-31 02:18:25.667995
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "fwversion IBM,FW860.30 (SV860_123)\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsconf")

    aix_hardware = AIXHardware(module)
    dmi_facts = aix_hardware.get_dmi_facts()

    assert dmi_facts['firmware_version'] == "FW860.30 (SV860_123)"
    assert 'product_serial' in dmi_facts
    assert 'lpar_info' in dmi_facts
    assert 'product_name' in dmi_facts
```

# Generated at 2024-05-31 02:18:28.845294
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "fwversion IBM,FW860.50 (SV860_215)\nMachine Serial Number: 1234567\nLPAR Info: LPAR123\nSystem Model: IBM,9117-MMB", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsconf")

    aix_hardware = AIXHardware(module)
    dmi_facts = aix_hardware.get_dmi_facts()

    assert dmi_facts['firmware_version'] == 'FW860.50 (SV860_215)'
    assert dmi_facts['product_serial'] == '1234567'
    assert dmi_facts['lpar_info'] == 'LPAR123'
    assert dmi_facts['product_name'] == 'IBM,9117-MMB'
```

# Generated at 2024-05-31 02:18:31.996361
```python
    module = MagicMock()
    module.run_command = MagicMock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    hardware = AIXHardware(module)
    vgs_facts = hardware.get_vgs_facts()
    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size': '128 megabyte(s)'
                },
                {
                    'pv_name': 'hdisk1',
                    '

# Generated at 2024-05-31 02:18:36.784989
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "node mounted on / type jfs2 (rw)\n/dev/hd1 mounted on /home type jfs2 (rw)\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/mount")

    aix_hardware = AIXHardware(module)
    mount_facts = aix_hardware.get_mount_facts()

    expected_mounts = [
        {
            'mount': '/',
            'device': 'node',
            'fstype': 'jfs2',
            'options': 'rw',
            'time': 'mounted on / type jfs2 (rw)',
            'size_total': 0,
            'size_available': 0,
            'size_used': 0,
            'size_percent': 0
        },
        {
            'mount': '/home',
            'device': '/dev/hd1',
            'fstype':

# Generated at 2024-05-31 02:18:40.010223
```python
    module = MagicMock()
    module.run_command = MagicMock(return_value=(0, "fwversion IBM,FW860.30 (SV860_123)\nMachine Serial Number: 1234567\nLPAR Info: 1\nSystem Model: IBM,9117-MMB", ""))
    module.get_bin_path = MagicMock(return_value="/usr/sbin/lsconf")

    aix_hardware = AIXHardware(module)
    dmi_facts = aix_hardware.get_dmi_facts()

    expected_facts = {
        'firmware_version': 'FW860.30 (SV860_123)',
        'product_serial': '1234567',
        'lpar_info': '1',
        'product_name': 'IBM,9117-MMB'
    }

    assert dmi_facts == expected_facts
```

# Generated at 2024-05-31 02:18:47.178856
```python
    module = MagicMock()
    module.run_command = MagicMock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = MagicMock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size':

# Generated at 2024-05-31 02:20:01.824162
```python
    module = Mock()
    module.run_command = Mock(side_effect=[
        (0, "proc0 Available\nproc1 Available\n", ""),
        (0, "type PowerPC_POWER8", ""),
        (0, "smt_threads 8", ""),
        (0, "memory pages 1048576\nfree pages 524288", ""),
        (0, "Total MB 4096MB 50%", ""),
        (0, "fwversion IBM,FW860.30", ""),
        (0, "Machine Serial Number: 1234567\nLPAR Info: LPAR1\nSystem Model: IBM,9119-MHE", ""),
        (0, "rootvg:\nPV_NAME hdisk0\nPV_NAME hdisk1\n", ""),
        (0, "PP SIZE: 128 megabyte(s)", ""),
        (0, "mount\n/dev/hd4 / jfs2 rw,log=/dev/hd8 

# Generated at 2024-05-31 02:20:05.427148
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "node mounted on / type jfs2 (rw)\n/dev/hd1 /home jfs2 rw,log=/dev/hd8 0 0\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/mount")

    aix_hardware = AIXHardware(module)
    mount_facts = aix_hardware.get_mount_facts()

    expected_mounts = [
        {
            'mount': '/',
            'device': 'node',
            'fstype': 'jfs2',
            'options': 'rw',
            'time': 'mounted on / type jfs2 (rw)',
            'size_total': 0,
            'size_available': 0,
            'size_used': 0,
            'size_percent': 0
        },
        {
            'mount': '/home',
            'device': '/dev/hd1

# Generated at 2024-05-31 02:20:06.366182
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:20:09.866318
```python
    module = Mock()
    module.run_command = Mock(side_effect=[
        (0, "proc0 Available\nproc1 Available\n", ""),
        (0, "type PowerPC_POWER8", ""),
        (0, "smt_threads 8", ""),
        (0, "memory pages 1048576\nfree pages 524288\n", ""),
        (0, "Total MB 4096MB 50%", ""),
        (0, "fwversion IBM,FW860.30 (SV860_215)\n", ""),
        (0, "Machine Serial Number: 1234567\nLPAR Info: 1\nSystem Model: IBM,9119-MHE\n", ""),
        (0, "rootvg:\nPV_NAME hdisk0\nPV_NAME hdisk1\n", ""),
        (0, "PP SIZE: 128 megabyte(s)\n", ""),
        (0, "mount\n/dev/hd4 / jfs

# Generated at 2024-05-31 02:20:11.770480
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "memory pages 524288\nfree pages 262144\n", ""))
    aix_hardware = AIXHardware(module)
    memory_facts = aix_hardware.get_memory_facts()
    assert memory_facts['memtotal_mb'] == 2048
    assert memory_facts['memfree_mb'] == 1024
    module.run_command.assert_called_with("/usr/bin/vmstat -v")
```

# Generated at 2024-05-31 02:20:13.021834
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:20:15.646015
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "memory pages 1000000\nfree pages 500000\n", ""))
    aix_hardware = AIXHardware(module)
    memory_facts = aix_hardware.get_memory_facts()
    assert memory_facts['memtotal_mb'] == 4096
    assert memory_facts['memfree_mb'] == 2048
    module.run_command.assert_any_call("/usr/bin/vmstat -v")
    module.run_command.assert_any_call("/usr/sbin/lsps -s")
```

# Generated at 2024-05-31 02:20:18.287509
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "fwversion IBM,FW860.30 (SV860_123)\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsconf")

    aix_hardware = AIXHardware(module)
    dmi_facts = aix_hardware.get_dmi_facts()

    assert dmi_facts['firmware_version'] == "FW860.30 (SV860_123)"
    assert 'product_serial' in dmi_facts
    assert 'lpar_info' in dmi_facts
    assert 'product_name' in dmi_facts
```

# Generated at 2024-05-31 02:20:19.264233
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:20:26.304366
```python
    module = MagicMock()
    module.run_command = MagicMock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = MagicMock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size':

# Generated at 2024-05-31 02:22:50.079813
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "memory pages 524288\nfree pages 262144\n", ""))
    aix_hardware = AIXHardware(module)
    memory_facts = aix_hardware.get_memory_facts()
    assert memory_facts['memtotal_mb'] == 2048
    assert memory_facts['memfree_mb'] == 1024
    module.run_command.assert_any_call("/usr/bin/vmstat -v")
    module.run_command.assert_any_call("/usr/sbin/lsps -s")
```

# Generated at 2024-05-31 02:22:53.190978
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size': '128 meg

# Generated at 2024-05-31 02:22:56.619480
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "fwversion IBM,FW860.30 (SV860_123)\nMachine Serial Number: 1234567\nLPAR Info: 1\nSystem Model: IBM,9117-MMB", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsconf")

    aix_hardware = AIXHardware(module)
    dmi_facts = aix_hardware.get_dmi_facts()

    assert dmi_facts['firmware_version'] == 'FW860.30 (SV860_123)'
    assert dmi_facts['product_serial'] == '1234567'
    assert dmi_facts['lpar_info'] == '1'
    assert dmi_facts['product_name'] == 'IBM,9117-MMB'
```

# Generated at 2024-05-31 02:23:00.077223
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size': '128 meg

# Generated at 2024-05-31 02:23:01.240293
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:23:04.386686
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "hdisk0 Available Other\nhdisk1 Available Other\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsattr")

    hardware = AIXHardware(module)
    hardware.module.run_command = Mock(side_effect=[
        (0, "hdisk0 Available Other\nhdisk1 Available Other\n", ""),
        (0, "size 1000\nstate active\n", ""),
        (0, "size 2000\nstate inactive\n", "")
    ])

    expected_facts = {
        'devices': {
            'hdisk0': {
                'state': 'Available',
                'type': 'Other',
                'attributes': {
                    'size': '1000',
                    'state': 'active'
                }
            },
            'hdisk1': {
                'state': 'Available',
                'type': 'Other',
                '

# Generated at 2024-05-31 02:23:06.045924
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "proc0 Available\nproc1 Available\n", ""))
    aix_hardware = AIXHardware(module)
    cpu_facts = aix_hardware.get_cpu_facts()
    assert cpu_facts['processor_count'] == 2
    assert cpu_facts['processor'] == 'Available'
    assert cpu_facts['processor_cores'] == 1
```

# Generated at 2024-05-31 02:23:07.047652
```python
    collector = AIXHardwareCollector()
    assert collector._platform == 'AIX'
    assert collector._fact_class == AIXHardware
```

# Generated at 2024-05-31 02:23:12.417516
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "fwversion IBM,FW860.30 (SV860_132)\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsconf")

    aix_hardware = AIXHardware(module)
    dmi_facts = aix_hardware.get_dmi_facts()

    assert dmi_facts['firmware_version'] == 'FW860.30 (SV860_132)'
    assert 'product_serial' in dmi_facts
    assert 'lpar_info' in dmi_facts
    assert 'product_name' in dmi_facts
```

# Generated at 2024-05-31 02:23:16.913443
```python
    module = Mock()
    module.run_command = Mock(return_value=(0, "rootvg:\nPV_NAME           PV STATE          TOTAL PPs   FREE PPs    FREE DISTRIBUTION\nhdisk0            active            546         0           00..00..00..00..00\nhdisk1            active            546         113         00..00..00..21..92\n", ""))
    module.get_bin_path = Mock(return_value="/usr/sbin/lsvg")

    aix_hardware = AIXHardware(module)
    vgs_facts = aix_hardware.get_vgs_facts()

    expected_vgs_facts = {
        'vgs': {
            'rootvg': [
                {
                    'pv_name': 'hdisk0',
                    'pv_state': 'active',
                    'total_pps': '546',
                    'free_pps': '0',
                    'pp_size': '128 meg