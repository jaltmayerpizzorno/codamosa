# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 3136
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1382
        bool_0 = True
        list_0 = []
        str_0 = '9'
        node_0 = module_0.Node(int_0, list_0, int_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1382
        bool_0 = True
        none_type_0 = None
        node_pattern_0 = module_0.NodePattern(int_0, bool_0, none_type_0)
    except BaseException:
        pass

def test_case_4():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_5():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = None
        leaf_pattern_1 = module_0.LeafPattern()
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(str_0)
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1317
        leaf_0 = None
        list_0 = [leaf_0, leaf_0, leaf_0, leaf_0]
        int_1 = 8
        list_1 = [list_0]
        node_0 = module_0.Node(int_0, list_0, int_1, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 2848
        str_0 = '\\Gv5$o\r.X2S1n\nV'
        leaf_0 = module_0.Leaf(int_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -1536
        str_0 = ''
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        none_type_0 = None
        tuple_2 = (int_0, int_0, tuple_1, none_type_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1624
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1382
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '+v\x0c@FYj~$j3|Nb1Jd3'
        int_0 = -629
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 4952
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        negated_pattern_0 = module_0.NegatedPattern(node_2)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 11
        str_0 = 'YubDHEh'
        int_1 = 935
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0)
        list_0 = [leaf_0, leaf_0]
        node_0 = module_0.Node(int_1, list_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        optional_0 = None
        node_pattern_0 = module_0.NodePattern(optional_0)
    except BaseException:
        pass

def test_case_15():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -2676
        str_0 = ',8)IJB[2zrK\x0cI. '
        bool_0 = True
        leaf_0 = None
        list_0 = [leaf_0, leaf_0, leaf_0]
        tuple_0 = (int_0, str_0, bool_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 878
        optional_0 = None
        list_0 = []
        tuple_0 = (int_0, optional_0, int_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = 'V<'
        negated_pattern_0 = None
        leaf_0 = None
        var_0 = leaf_pattern_0.match(leaf_0, negated_pattern_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '})e\x0b'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(str_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -1893
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '\x0cOm<E#1^\tM1\r'
        int_0 = 15
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'v'
        int_0 = 5
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = leaf_0.__str__()
        optional_0 = leaf_0.remove()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        wildcard_pattern_1 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_1)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 1
        str_0 = 'a'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        leaf_pattern_1 = [leaf_pattern_0]
        str_1 = 'test'
        node_pattern_0 = module_0.NodePattern(int_0, leaf_pattern_1, str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 28
        str_0 = ',> \nS<7'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        leaf_3 = leaf_1.clone()
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match_seq(str_0)
        int_1 = 1582
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1)
        list_0 = [leaf_3, int_0, leaf_3]
        iterator_0 = wildcard_pattern_0.generate_matches(list_0)
        list_1 = []
        bool_1 = wildcard_pattern_0.match(list_1)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 54
        str_0 = ',> \nS<7'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        int_1 = 1582
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1)
        str_1 = '3><<'
        none_type_0 = None
        node_pattern_0 = module_0.NodePattern(none_type_0, str_1)
    except BaseException:
        pass

def test_case_25():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -293
        str_0 = 'P'
        bytes_0 = b"\xa6\x93\x98\x9e(\xbb'\xe0\xec\xee\x1af\xc13\x93<"
        bytes_1 = b'\xbf'
        tuple_0 = (int_0, str_0, bytes_0, bytes_1)
        var_0 = module_0.convert(grammar_0, tuple_0)
        list_0 = []
        base_pattern_0 = module_0.BasePattern(*list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 1815
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_0.update_sibling_maps()
    except BaseException:
        pass

def test_case_28():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = False
        str_0 = '})e\x0b'
        negated_pattern_0 = None
        leaf_0 = module_0.Leaf(int_0, str_0, negated_pattern_0)
        var_0 = leaf_pattern_0.match(leaf_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = -334
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0, int_1, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 544
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_0 = node_0.__str__()
        negated_pattern_0 = module_0.NegatedPattern()
        int_1 = 19
        int_2 = 2
        leaf_pattern_0 = module_0.LeafPattern(int_1, str_0)
        int_3 = 1
        int_4 = [int_1, int_2, int_3]
        iterator_0 = negated_pattern_0.generate_matches(int_4)
        var_0 = list(iterator_0)
        int_5 = 257
        node_pattern_0 = module_0.NodePattern(int_5)
    except BaseException:
        pass

def test_case_30():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = []
        iterator_0 = negated_pattern_0.generate_matches(var_0)
        var_1 = list(iterator_0)
        negated_pattern_1 = module_0.NegatedPattern()
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = [int_0, int_1, int_2]
        iterator_1 = negated_pattern_1.generate_matches(int_3)
        var_2 = list(iterator_1)
        int_4 = 257
        node_pattern_0 = module_0.NodePattern(int_4)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = False
        str_0 = ',> \nS<7'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        str_1 = 'h\\?&L,Wkk"yw'
        leaf_pattern_1 = module_0.LeafPattern(int_0, str_1)
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = leaf_pattern_1.match(leaf_0, negated_pattern_0)
        var_1 = leaf_pattern_0.match(leaf_0)
        leaf_1 = leaf_0.clone()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        grammar_0 = module_1.Grammar()
        str_2 = 'lW3r+2'
        str_3 = 'E'
        dict_0 = {str_2: wildcard_pattern_0, str_2: leaf_pattern_0, str_3: leaf_pattern_1, str_2: wildcard_pattern_0}
        bool_0 = wildcard_pattern_0.match(dict_0, int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 544
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        int_1 = -188
        node_0.insert_child(int_1, node_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'm'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        var_0 = []
        int_0 = 53
        str_1 = ' (/+\t>>71q,x\x0b=W<w%Nm'
        leaf_0 = module_0.Leaf(int_0, str_1)
        leaf_pattern_0 = module_0.LeafPattern()
        var_1 = leaf_pattern_0.match(leaf_0)
        int_1 = 957
        list_0 = [leaf_0]
        str_2 = None
        int_2 = None
        dict_0 = {str_2: var_0, str_1: int_2, str_0: any_0}
        iterator_0 = leaf_0.pre_order()
        node_0 = module_0.Node(int_1, list_0, any_0, dict_0)
        str_3 = node_0.__repr__()
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = False
        str_0 = 'MF'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        var_0 = leaf_pattern_0.match(leaf_0)
        negated_pattern_0 = module_0.NegatedPattern()
        var_1 = leaf_pattern_0.match(leaf_0)
        list_0 = [leaf_0]
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 1768
        dict_0 = {str_0: var_0, str_0: str_0}
        node_0 = module_0.Node(int_1, list_0, str_0, dict_0)
        node_1 = node_0.clone()
        node_2 = node_0.clone()
        node_2.append_child(leaf_0)
        node_1.update_sibling_maps()
        str_1 = 'E'
        dict_1 = {str_1: wildcard_pattern_0, str_1: leaf_pattern_0, str_1: leaf_pattern_0, str_1: wildcard_pattern_0}
        str_2 = leaf_0.__repr__()
        bool_0 = wildcard_pattern_0.match(dict_1, int_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 1
        str_0 = 'a'
        leaf_0 = module_0.Leaf(int_0, str_0)
        str_1 = 'b'
        leaf_1 = module_0.Leaf(int_0, str_1)
        leaf_2 = []
        leaf_3 = [leaf_2]
        wildcard_pattern_0 = module_0.WildcardPattern(leaf_3)
    except BaseException:
        pass

def test_case_36():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = 'm'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        grammar_0 = module_1.Grammar()
        int_0 = 478
        any_1 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        negated_pattern_1 = module_0.NegatedPattern(any_0)
        var_0 = []
        iterator_0 = negated_pattern_1.generate_matches(var_0)
        iterator_1 = negated_pattern_0.generate_matches(str_0)
        var_1 = list(iterator_0)
        int_1 = 538
        list_0 = []
        node_0 = module_0.Node(int_1, list_0)
        node_1 = node_0.clone()
        negated_pattern_2 = module_0.NegatedPattern()
        int_2 = 32
        node_2 = node_0.clone()
        int_3 = 2
        node_0.insert_child(int_0, node_2)
        leaf_pattern_1 = module_0.LeafPattern(int_2, str_0)
        iterator_2 = negated_pattern_2.generate_matches(int_3)
        var_2 = list(iterator_2)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 21
        str_0 = '^3'
        int_1 = -965
        int_2 = -1897
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_0, tuple_0)
        float_0 = None
        list_0 = [str_0, tuple_0, float_0]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
        str_1 = leaf_0.__repr__()
        leaf_pattern_0 = module_0.LeafPattern(int_0, int_0)
    except BaseException:
        pass

def test_case_38():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = 'm'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = 103
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 478
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_0, tuple_0)
        any_0 = wildcard_pattern_0.optimize()
        any_1 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        negated_pattern_1 = module_0.NegatedPattern(leaf_pattern_0)
        iterator_0 = negated_pattern_1.generate_matches(tuple_1)
        str_1 = leaf_0.__repr__()
        iterator_1 = leaf_0.post_order()
        var_0 = list(iterator_0)
        var_1 = leaf_pattern_0.match(leaf_0, grammar_0)
        int_2 = 544
        leaf_1 = leaf_0.clone()
        int_3 = 32
        int_4 = 2
        leaf_pattern_1 = module_0.LeafPattern(int_3, str_0)
        grammar_0.report()
        int_5 = [int_3, int_4, int_2]
        var_2 = leaf_pattern_1.match(leaf_0)
        iterator_2 = negated_pattern_1.generate_matches(int_5)
        var_3 = list(int_5)
        bool_0 = wildcard_pattern_0.match(iterator_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'a'
        int_0 = True
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'a'
        int_0 = 15
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        int_1 = True
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_1, int_0)
        any_1 = wildcard_pattern_1.optimize()
        float_0 = -1608.2272
        bool_0 = wildcard_pattern_0.match(float_0)
    except BaseException:
        pass

def test_case_41():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = 'm'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = 103
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 478
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_0, tuple_0)
        any_0 = wildcard_pattern_0.optimize()
        any_1 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        negated_pattern_1 = module_0.NegatedPattern(leaf_pattern_0)
        iterator_0 = negated_pattern_1.generate_matches(tuple_1)
        str_1 = leaf_0.__repr__()
        iterator_1 = leaf_0.post_order()
        var_0 = list(iterator_0)
        var_1 = leaf_pattern_0.match(leaf_0, grammar_0)
        leaf_1 = leaf_0.clone()
        int_2 = 32
        leaf_pattern_1 = module_0.LeafPattern(int_2, str_0)
        str_2 = '-+Me'
        str_3 = '\x0bZN\t8\\<\r'
        dict_0 = {str_2: iterator_0, str_2: any_0, str_3: var_1}
        node_pattern_0 = module_0.NodePattern(int_1, dict_0)
    except BaseException:
        pass