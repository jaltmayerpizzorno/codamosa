# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = False
    str_0 = 'dsY><|`*[G6fDp'
    negated_pattern_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0, negated_pattern_0)
    str_1 = leaf_0.__repr__()

def test_case_2():
    int_0 = 4952
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()

def test_case_3():
    int_0 = False
    str_0 = '\x0cFK~&\nuW[!&kT'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_4():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_5():
    int_0 = 1
    str_0 = 'a'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_6():
    str_0 = 'YqP"jx2P'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_7():
    str_0 = '%'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)

def test_case_8():
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = 4
    int_1 = [int_0, int_0, int_0]
    iterator_0 = negated_pattern_0.generate_matches(int_1)
    var_0 = list(iterator_0)

def test_case_9():
    int_0 = False
    str_0 = '\x0cFK~&\nuW[!&kT'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    var_0 = leaf_pattern_0.match(leaf_0)
    leaf_1 = leaf_0.clone()

def test_case_10():
    leaf_pattern_0 = module_0.LeafPattern()
    int_0 = False
    str_0 = ')e\x0b'
    negated_pattern_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0, negated_pattern_0)
    var_0 = leaf_pattern_0.match(leaf_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_11():
    str_0 = '})e\x0b'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_12():
    int_0 = 39
    str_0 = 'FU'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    negated_pattern_0 = module_0.NegatedPattern()
    var_0 = leaf_pattern_0.match(leaf_0, negated_pattern_0)
    var_1 = leaf_pattern_0.match(leaf_0)
    var_2 = leaf_pattern_0.match(leaf_0)

def test_case_13():
    int_0 = 257
    var_0 = []
    node_0 = module_0.Node(int_0, var_0)
    int_1 = 258
    node_1 = [node_0]
    node_2 = module_0.Node(int_1, node_1)
    int_2 = 0
    node_2.set_child(int_2, node_0)

def test_case_14():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    int_2 = 3
    str_2 = 'c'
    leaf_2 = module_0.Leaf(int_2, str_2)
    int_3 = 256
    leaf_3 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_3, leaf_3)
    int_4 = 257
    var_0 = [node_0, leaf_2]
    node_1 = module_0.Node(int_4, var_0)
    iterator_0 = node_1.post_order()
    var_1 = list(iterator_0)

def test_case_15():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    int_2 = 3
    str_2 = 'c'
    leaf_2 = module_0.Leaf(int_2, str_2)
    int_3 = 256
    leaf_3 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_3, leaf_3)
    int_4 = 257
    var_0 = [node_0, leaf_2]
    node_1 = module_0.Node(int_4, var_0)
    iterator_0 = node_1.pre_order()
    var_1 = list(iterator_0)

def test_case_16():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    int_2 = 3
    str_2 = 'c'
    leaf_2 = module_0.Leaf(int_2, str_2)
    int_3 = 256
    leaf_3 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_3, leaf_3)
    int_4 = 257
    node_1 = node_0.clone()
    var_0 = [node_0, leaf_2]
    node_2 = module_0.Node(int_4, var_0)
    iterator_0 = node_2.post_order()
    var_1 = list(iterator_0)

def test_case_17():
    str_0 = 'm'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_18():
    int_0 = False
    str_0 = 'FU'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_19():
    int_0 = 39
    str_0 = 'FU'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    leaf_pattern_1 = module_0.LeafPattern(int_0, str_0)
    negated_pattern_0 = module_0.NegatedPattern()
    var_0 = leaf_pattern_1.match(leaf_0, negated_pattern_0)
    var_1 = leaf_pattern_0.match(leaf_0)

def test_case_20():
    int_0 = False
    str_0 = 'MF'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    int_1 = 1658
    list_0 = []
    node_0 = module_0.Node(int_1, list_0)
    node_0.append_child(leaf_0)
    leaf_pattern_1 = module_0.LeafPattern(int_0, str_0)
    optional_0 = leaf_0.remove()
    leaf_1 = leaf_0.clone()
    grammar_0 = module_1.Grammar()
    node_0.append_child(leaf_1)

def test_case_21():
    str_0 = ';'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    int_0 = 35
    iterator_0 = negated_pattern_0.generate_matches(int_0)
    var_0 = list(iterator_0)

def test_case_22():
    int_0 = 4
    str_0 = 'fo'
    leaf_0 = module_0.Leaf(int_0, str_0)
    optional_0 = leaf_0.remove()

def test_case_23():
    int_0 = 256
    int_1 = 1
    str_0 = 'a'
    leaf_pattern_0 = module_0.LeafPattern(int_1, str_0)
    leaf_pattern_1 = [leaf_pattern_0]
    node_pattern_0 = module_0.NodePattern(int_0, leaf_pattern_1, str_0)

def test_case_24():
    leaf_pattern_0 = module_0.LeafPattern()
    str_0 = 'LC'
    int_0 = 478
    tuple_0 = (int_0, int_0)
    tuple_1 = (str_0, tuple_0)
    negated_pattern_0 = module_0.NegatedPattern()
    negated_pattern_1 = module_0.NegatedPattern(leaf_pattern_0)
    iterator_0 = negated_pattern_1.generate_matches(tuple_1)
    var_0 = list(iterator_0)

def test_case_25():
    str_0 = "'"
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    bytes_0 = b''
    bool_0 = wildcard_pattern_0.match_seq(bytes_0)