# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        str_0 = ','
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -555
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        invalid_pattern_0 = module_0.InvalidPattern(tuple_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -555
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        dict_0 = None
        var_0 = invalid_pattern_0.__eq__(dict_0)
        var_1 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_4():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        int_0 = -791
        var_0 = lazy_regex_0.__getattr__(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'l\xa7\xd5R\xdc>]\x9c\x7fvY\xc4\xbf\xe3'
        bool_0 = False
        invalid_pattern_0 = module_0.InvalidPattern(bool_0)
        list_0 = [invalid_pattern_0, invalid_pattern_0]
        lazy_regex_0 = module_0.LazyRegex(list_0)
        var_0 = lazy_regex_0.__setstate__(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        dict_0 = {}
        var_0 = module_0.finditer_public(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '-YM)p\tb1jQd|@X'
        dict_0 = {}
        str_1 = 'jA?h4DvEM`r2D/%@\x0cR#'
        invalid_pattern_0 = module_0.InvalidPattern(str_1)
        invalid_pattern_1 = module_0.InvalidPattern(dict_0)
        var_0 = invalid_pattern_1.__eq__(invalid_pattern_0)
        list_0 = [str_0, dict_0]
        lazy_regex_0 = module_0.LazyRegex(list_0)
        lazy_regex_1 = module_0.LazyRegex()
        str_2 = 'LINEMODE'
        var_1 = invalid_pattern_0.__eq__(str_2)
        dict_1 = {}
        invalid_pattern_2 = module_0.InvalidPattern(dict_1)
        invalid_pattern_3 = module_0.InvalidPattern(invalid_pattern_2)
        var_2 = invalid_pattern_3.__repr__()
    except BaseException:
        pass

def test_case_8():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = module_0.finditer_public(lazy_regex_0, lazy_regex_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'HYuvk/q-4)rPf~j6'
        bytes_0 = b'\x88\xa9m'
        list_0 = [str_0]
        lazy_regex_0 = module_0.LazyRegex(list_0)
        var_0 = lazy_regex_0.__getattr__(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'test'
        str_1 = (str_0,)
        var_0 = {}
        lazy_regex_0 = module_0.LazyRegex(str_1, var_0)
        var_1 = lazy_regex_0.match
        var_2 = lazy_regex_0.search
        bool_0 = True
        var_3 = lazy_regex_0.__getattr__(bool_0)
    except BaseException:
        pass