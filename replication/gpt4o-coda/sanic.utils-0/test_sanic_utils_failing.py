# Automatically generated by Pynguin.
import sanic.utils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = 's\rRZ L\x0c_)68&[-Vm@J>'
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'N'
        bool_0 = module_0.str_to_bool(str_0)
        list_0 = [str_0]
        var_0 = module_0.load_module_from_file_location(str_0, str_0, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '}"l*g.U.vdFST/#y\x0b^+'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '@@DwrbT!7V5_Dl:V\nD'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x86\xd0\xaaq{b\x14\x8a'
        str_0 = '\t\x0bRQ;_Z5'
        bool_0 = True
        dict_0 = {str_0: str_0, str_0: bool_0, str_0: str_0}
        var_0 = module_0.load_module_from_file_location(bytes_0, **dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        path_0 = module_1.Path()
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'N'
        bool_0 = module_0.str_to_bool(str_0)
        str_1 = ']"<.=Vterf6+'
        dict_0 = {}
        var_0 = module_0.load_module_from_file_location(str_1, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "U'$gU(`s\x0b"
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'Returns loaded module provided as a file path.\n\n    :param args:\n        Coresponds to importlib.util.spec_from_file_location location\n        parameters,but with this differences:\n        - It has to be of a string or bytes type.\n        - You can also use here environment variables\n          in format ${some_env_var}.\n          Mark that $some_env_var will not be resolved as environment variable.\n    :encoding:\n        If location parameter is of a bytes type, then use this encoding\n        to decode it into string.\n    :param args:\n        Coresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n    :param kwargs:\n        Coresponds to the rest of importlib.util.spec_from_file_location\n        parameters.\n\n    For example You can:\n\n        some_module = load_module_from_file_location(\n            "some_module_name",\n            "/some/path/${some_env_var}"\n        )\n    '
        str_1 = '|\tAG.nm?2$Fz9Phm9,'
        int_0 = -1286
        dict_0 = {str_0: str_0, str_1: int_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.load_module_from_file_location(str_0, **dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ' found.\n  Example File: project/saic_server.py -> app\n  Example Module: project.sanic_server.app'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass