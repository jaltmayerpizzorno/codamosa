# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        bool_0 = True
        bytes_0 = b'.\xaa\xe3\xf6}e\x01\x9fva\x93!\x86\x18\x19\x0e\x01'
        list_0 = [bytes_0, bytes_0]
        str_0 = 'd6@\\Diz.b!hN2AiCJ'
        validation_0 = module_0.Validation(list_0, str_0)
        var_0 = validation_0.__str__()
        bytes_1 = b''
        validation_1 = module_0.Validation(bytes_0, bytes_1)
        validation_2 = module_0.Validation(bool_0, validation_1)
        var_1 = validation_2.is_success()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        bool_1 = True
        validation_0 = module_0.Validation(bool_0, bool_1)
        bytes_0 = b"(\x91\xa2\xff}qBV\x10'\xc3\xef\xb0u\x15"
        var_0 = validation_0.map(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -213
        bytes_0 = b"\xa9\xf4\x8c\x01\xb6\x8f@4\t\xe1\xc8$=\xd1\r\x9b\xf00\x12'"
        float_0 = -1621.0
        bool_0 = False
        tuple_0 = (float_0, float_0, bool_0)
        validation_0 = module_0.Validation(bytes_0, tuple_0)
        var_0 = validation_0.bind(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -159.4386
        str_0 = 'F_Bkxk3I{m{w0%4Z'
        set_0 = {float_0, str_0, str_0}
        list_0 = [set_0]
        str_1 = '\n        Two Validations are equals when values and errors lists are equal.\n        '
        int_0 = 785
        validation_0 = module_0.Validation(str_1, int_0)
        var_0 = validation_0.ap(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        bytes_0 = b'Q0\xffX\xb1:\xce\xbfWk2\xe9\x8c\xa2t\xdeo'
        float_0 = -1060.0288
        validation_0 = module_0.Validation(float_0, bytes_0)
        var_0 = validation_0.is_success()
        validation_1 = module_0.Validation(bool_0, bytes_0)
        var_1 = validation_1.to_either()
        str_0 = 'xLXG-\\!P- j&'
        var_2 = validation_0.is_success()
        var_3 = validation_1.to_lazy()
        var_4 = validation_1.to_box()
        var_5 = validation_0.ap(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'z\x12T\xcf\xc03\x8d'
        validation_0 = None
        str_0 = '5M89I#!a"oL\\\x0b}6'
        tuple_0 = (bytes_0, validation_0, str_0)
        set_0 = {tuple_0, validation_0, validation_0, bytes_0}
        set_1 = set()
        tuple_1 = (set_0, set_1, set_0)
        bool_0 = True
        validation_1 = module_0.Validation(tuple_1, bool_0)
        var_0 = validation_1.to_box()
        str_1 = ' #pJP-CQlyT"I\x0b-'
        validation_2 = module_0.Validation(str_1, str_1)
        float_0 = -275.38517
        var_1 = validation_2.bind(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '*8$0S>CP'
        set_0 = set()
        bytes_0 = b'Q0\xffX\xb1:\xce\xbfWk2\xe9\x8c\xa2t\xdeo'
        float_0 = -1060.0288
        validation_0 = module_0.Validation(float_0, bytes_0)
        var_0 = validation_0.is_success()
        int_0 = 407
        list_0 = [bytes_0, int_0]
        validation_1 = module_0.Validation(int_0, list_0)
        var_1 = validation_1.to_maybe()
        var_2 = validation_1.is_fail()
        var_3 = validation_1.to_try()
        tuple_0 = ()
        str_1 = 'xtXG-\\!P- j&'
        var_4 = validation_1.__eq__(str_1)
        validation_2 = module_0.Validation(set_0, tuple_0)
        var_5 = validation_2.is_success()
        var_6 = validation_2.ap(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -966
        dict_0 = {int_0: int_0}
        float_0 = 1470.1247
        bool_0 = False
        float_1 = 1478.437482
        validation_0 = module_0.Validation(bool_0, float_1)
        var_0 = validation_0.__eq__(float_0)
        list_0 = [dict_0, int_0]
        tuple_0 = ()
        var_1 = validation_0.__eq__(tuple_0)
        str_0 = 'Cra\nymD\r6D1|;+(/o'
        str_1 = 'W'
        validation_1 = module_0.Validation(str_0, str_1)
        validation_2 = module_0.Validation(list_0, str_0)
        str_2 = '3eOCYR)as:xE<'
        float_2 = 4220.977709
        validation_3 = module_0.Validation(str_2, float_2)
        var_2 = validation_3.__eq__(validation_3)
        list_1 = []
        var_3 = validation_2.to_maybe()
        bytes_0 = b'`'
        str_3 = '0\x0bD"S&kUQ^&! '
        validation_4 = module_0.Validation(str_3, list_1)
        var_4 = validation_4.map(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        set_0 = set()
        bool_0 = False
        bytes_0 = b'Q0\xffX\xb1:\xce\xbfWk2\xe9\x8c\xa2t\xdeo'
        int_0 = 407
        list_0 = [bytes_0, int_0]
        validation_0 = module_0.Validation(int_0, list_0)
        var_0 = validation_0.to_maybe()
        var_1 = validation_0.is_fail()
        var_2 = validation_0.to_try()
        validation_1 = module_0.Validation(bool_0, bytes_0)
        var_3 = validation_1.to_either()
        tuple_0 = ()
        str_0 = 'xLXG-\\!P- j&'
        var_4 = validation_0.__eq__(str_0)
        var_5 = validation_1.to_box()
        validation_2 = module_0.Validation(set_0, tuple_0)
        var_6 = validation_2.is_success()
        var_7 = validation_1.to_lazy()
        var_8 = validation_2.__str__()
        var_9 = validation_2.to_box()
        var_10 = validation_0.ap(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = set()
        bool_0 = False
        bytes_0 = b'Q0\xffX\xb1:\xce\xbfWk2\xe9\x8c\xa2t\xdeo'
        int_0 = 407
        list_0 = [bytes_0, int_0]
        float_0 = 3234.998
        validation_0 = module_0.Validation(float_0, set_0)
        var_0 = validation_0.to_either()
        validation_1 = module_0.Validation(int_0, list_0)
        var_1 = validation_1.to_maybe()
        var_2 = validation_1.is_fail()
        var_3 = validation_1.to_try()
        validation_2 = module_0.Validation(bool_0, bytes_0)
        var_4 = validation_2.to_either()
        tuple_0 = ()
        str_0 = 'xLXG-\\!P- j&'
        var_5 = validation_1.__eq__(str_0)
        var_6 = validation_2.to_box()
        validation_3 = module_0.Validation(set_0, tuple_0)
        var_7 = validation_3.is_success()
        var_8 = validation_2.to_lazy()
        var_9 = validation_3.__str__()
        var_10 = validation_2.to_box()
        int_1 = -1124
        var_11 = validation_2.ap(int_1)
    except BaseException:
        pass