# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        int_0 = -132
        var_0 = module_0.check_type_bits(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '7'
        bool_0 = True
        var_0 = module_0.check_mutually_exclusive(str_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'w\xc6\x88'
        var_0 = module_0.safe_eval(bytes_0)
        str_0 = None
        str_1 = None
        var_1 = module_0.check_mutually_exclusive(str_1, str_0)
        str_2 = '\\'
        var_2 = module_0.check_type_dict(str_2)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '/XV I\\^('
        list_0 = [str_0, str_0]
        float_0 = 430.252483
        var_0 = module_0.check_required_one_of(list_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "'"
        tuple_0 = (str_0,)
        str_1 = '\x0b]'
        var_0 = module_0.check_required_one_of(tuple_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'oy-|.'
        var_0 = module_0.check_required_by(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = None
        dict_0 = {float_0: float_0, float_0: float_0}
        str_0 = 'w4Z B|wFz@T'
        var_0 = module_0.check_required_arguments(dict_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = 'uM>jB*{j.:OlBJ4\x0cL\\w'
        var_0 = module_0.check_missing_parameters(str_0, dict_0)
        str_1 = None
        var_1 = module_0.check_type_int(str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xba\x8aA\x0e'
        list_0 = []
        var_0 = module_0.check_type_str(bytes_0, list_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = None
        var_0 = module_0.check_type_list(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xe8\x92n\x00i\\\x86}\xc0K'
        var_0 = module_0.check_type_dict(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'b(Ed\x0cNTK'
        set_0 = set()
        var_0 = module_0.safe_eval(str_0, set_0)
        list_0 = [str_0, str_0, str_0, var_0]
        list_1 = [list_0, str_0]
        var_1 = module_0.check_type_bool(list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '<J{At#:P]8lq(Tu>h\nhy'
        float_0 = 2138.95937
        var_0 = module_0.check_type_list(float_0)
        var_1 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = False
        int_0 = 50
        float_0 = 1345.739
        var_0 = module_0.check_type_path(float_0)
        var_1 = module_0.check_type_int(int_0)
        var_2 = module_0.check_type_bool(bool_0)
        bytes_0 = b'q \xdd2-0\xf0\r\xaa\x88'
        var_3 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '#'
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b"'"
        var_0 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = -1770.448
        var_0 = module_0.check_type_bytes(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        var_0 = module_0.check_type_jsonarg(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\x94 \x04'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.check_type_jsonarg(dict_0)
        str_0 = "']rr7\\}Mo};=FI_-c^B"
        var_1 = module_0.check_type_dict(str_0)
        float_0 = 0.0
        var_2 = module_0.safe_eval(float_0)
        bool_0 = True
        var_3 = module_0.check_type_bits(bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = "lR\n`G|y<IUVf'"
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0, tuple_0: str_0, str_0: tuple_0}
        list_0 = [dict_0, dict_0, dict_0]
        bytes_0 = b'\xa23\xbf7\xdc\x1d\xb8P\x18\x9c'
        str_1 = 'Gvh:5J'
        var_0 = module_0.check_required_one_of(list_0, bytes_0, str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        dict_0 = None
        var_0 = module_0.check_type_int(dict_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'oWb'
        list_0 = [str_0, str_0, str_0, str_0]
        float_0 = 0.07578681375007279
        set_0 = set()
        tuple_0 = (float_0, list_0, str_0, set_0)
        var_0 = module_0.check_required_if(list_0, tuple_0)
        var_1 = module_0.check_missing_parameters(str_0)
        var_2 = module_0.check_type_float(tuple_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '9xnz@M-HCI_'
        str_1 = '""'
        var_0 = module_0.check_required_together(str_0, str_1)
        bytes_0 = b'\xa3_\x12X[;\x06\xbd\xdfx'
        var_1 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_23():
    try:
        dict_0 = {}
        var_0 = module_0.check_type_dict(dict_0)
        str_0 = 'ji\rXV{x(,'
        var_1 = module_0.check_missing_parameters(dict_0, str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'HOSTNAMEh%s\n'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = -314.3
        var_0 = module_0.check_type_float(float_0)
        int_0 = -480
        var_1 = module_0.check_type_bool(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'l>W9'
        bool_0 = True
        tuple_0 = ()
        str_1 = 'filename'
        str_2 = "'"
        tuple_1 = (tuple_0, str_1, str_2)
        float_0 = None
        var_0 = module_0.safe_eval(tuple_1, float_0, str_0)
        var_1 = [str_0, str_0, str_0, bool_0]
        list_0 = [str_0, var_1, str_0, str_0]
        float_1 = 2435.937
        set_0 = {float_1}
        tuple_2 = (float_1, list_0, str_0, set_0)
        var_2 = module_0.check_required_if(list_0, tuple_2)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = True
        float_0 = None
        var_0 = module_0.check_required_if(float_0, bool_0)
        str_0 = 'body must be mapping, cannot be type %s'
        var_1 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'VoR8#wM bx;pWE.; '
        str_1 = 'Yo(3ZA'
        var_0 = module_0.check_required_one_of(str_0, str_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'd n5K2@xL=K}-\nIIy'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '.?6![E}1  4r =0}Ya'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'l/y9I'
        set_0 = {str_0, str_0}
        int_0 = 1180
        var_0 = module_0.check_required_one_of(str_0, set_0, int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        float_0 = 1508.818175
        dict_0 = {}
        var_0 = module_0.check_required_arguments(dict_0, float_0)
        var_1 = module_0.check_type_dict(float_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'M$gYn='
        var_0 = module_0.check_type_dict(str_0)
        bool_0 = True
        list_0 = [bool_0, str_0, bool_0, bool_0]
        bytes_0 = b'\x0c\xed\x0eQ\xe3%\xbc\x9b\x931q\x81^\xc1\xdd\xc2\xc5\xc8g\xc7'
        str_1 = 's])\x0bW~geN8oLYn:'
        tuple_0 = (bytes_0, str_1, str_0, list_0)
        set_0 = {str_0, str_0}
        bool_1 = False
        var_1 = module_0.check_type_raw(bool_1)
        var_2 = module_0.check_required_together(tuple_0, set_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'zy#Byn6~4?U3O'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = ':FaMP"JzSD3c'
        var_0 = module_0.check_required_together(dict_0, str_1)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '{Wkey": "Aalue"}'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '-#N%]\x0c7\\h'
        str_1 = "K~05oh's=>6\\[^_fQ\n"
        dict_0 = {str_1: str_0}
        str_2 = '{'
        var_0 = module_0.check_required_by(dict_0, str_2)
        var_1 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'param1'
        str_1 = 'param3'
        str_2 = 'value1'
        str_3 = 'valt\x0cue3'
        str_4 = {str_0: str_2, str_0: str_0, str_1: str_3}
        str_5 = [str_4]
        var_0 = module_0.check_mutually_exclusive(str_5, str_4)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = "lR\n`G|IUVf'"
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0, tuple_0: str_0, str_0: tuple_0}
        var_0 = module_0.check_required_by(dict_0, dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        float_0 = None
        bool_0 = True
        var_0 = module_0.check_type_float(bool_0)
        str_0 = '`MW\x0bA.x&EcV&5\\W;&n'
        dict_0 = {str_0: str_0, float_0: var_0}
        var_1 = module_0.check_required_by(dict_0, dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'lWY9'
        bool_0 = True
        var_0 = [str_0, str_0, str_0, bool_0]
        list_0 = [str_0, var_0, str_0, str_0]
        var_1 = module_0.check_required_if(list_0, list_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = '{"key": "\\`~ue"}'
        bytes_0 = b'\x96/\xc3'
        tuple_0 = ()
        var_0 = module_0.check_type_jsonarg(tuple_0)
        var_1 = module_0.check_type_dict(str_0)
        str_1 = '[vy=valuL'
        var_2 = module_0.check_type_dict(str_1)
        float_0 = -1967.942889
        var_3 = module_0.check_required_if(tuple_0, bytes_0, float_0)
        list_0 = [var_0, str_1, tuple_0]
        var_4 = module_0.check_type_bits(list_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '\x0c'
        tuple_0 = None
        dict_0 = {tuple_0: tuple_0, tuple_0: str_0, str_0: tuple_0}
        bool_0 = False
        var_0 = module_0.check_missing_parameters(bool_0)
        var_1 = module_0.check_missing_parameters(dict_0, dict_0)
    except BaseException:
        pass