# Automatically generated by Pynguin.
import typesystem.tokenize.tokenize_json as module_0

def test_case_0():
    try:
        tokenizing_decoder_0 = module_0._TokenizingDecoder()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'yd\x94\xe3YG\xcb$\x18h)\x1b\xaf\xb0^\xa2>'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '{"key": "value", "number": 123, "boolean": true, "null_value": null}'
        token_0 = module_0.tokenize_json(str_0)
        str_1 = '\n'
        token_1 = module_0.tokenize_json(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{'
        any_0 = module_0.validate_json(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xe0fW!\x99]\xfa\x8d\xd1\x90D\xcet\xc0B\xd9\x0b\x9a\xb7'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '{'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '{"key": "value", "number": 123, "boolean": true, "null_value": null'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'2\x94'
        str_0 = 'xvQ'
        any_0 = module_0.validate_json(bytes_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '[ '
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '{"key": "value", "number": 123, "boolean": tru0, !null_value": null'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\t{PjR12W22=c'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'noC7<7n64d'
        any_0 = module_0.validate_json(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '{"name": "John", "age": 30, "is_student": f{lse'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '{"name": "John", "age": 30, "is_student": false'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '{"key":"value", "number": 123, "boolean": true, "null_value": nul'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '{"key": "value", "number"\t 123, 3boolean": true, "null_value": null}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '{"key": "value", "numbe": 123,\n"bo=lean": true, ull_value": null'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '{"key": "valu\x0c", "numr": 123,\n"bo=lean": true, "ul_value": null'
        field_0 = None
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '{"key": "value", "number": 123, "array": [1, 2, 3]'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '{"key": "value", "number": 123,\n"bo=lean": true "ull_value": nll'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass