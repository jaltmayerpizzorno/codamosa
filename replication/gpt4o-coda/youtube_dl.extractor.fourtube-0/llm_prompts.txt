

---- 2024-06-04 22:37:16.429210
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:19.026617
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:22.810200
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:26.716996
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:30.320176
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:33.831226
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:37.541401
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:42.900464
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:48.247642
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:37:51.412460
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:09.025366
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:12.321561
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:15.841516
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeBaseIE\ndef test_FourTubeBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:16.957259
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeBaseIE\ndef test_FourTubeBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:18.066294
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:21.586475
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:26.010862
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:29.573420
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:32.638596
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeBaseIE\ndef test_FourTubeBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:38:33.847270
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:04.197823
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:08.623040
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:12.768537
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeBaseIE\ndef test_FourTubeBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:13.984230
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:18.758041
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:22.836136
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:26.790869
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeBaseIE\ndef test_FourTubeBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:28.042323
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:32.023156
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:39:35.802179
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:40:33.879576
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:40:39.492714
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:40:43.699391
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:40:47.175623
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:40:50.521644
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:40:54.963190
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:40:59.584230
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:41:03.297851
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:41:06.880833
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:41:10.029741
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:01.921009
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeIE\ndef test_FourTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:04.931140
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:08.143003
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:14.134523
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:17.196232
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornerBrosIE\ndef test_PornerBrosIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:21.189575
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:24.289560
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeBaseIE\ndef test_FourTubeBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:25.380895
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FuxIE\ndef test_FuxIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:28.713684
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class FourTubeBaseIE\ndef test_FourTubeBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-06-04 22:43:29.844251
{"model": "gpt-4o-2024-05-13", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n    str_or_none,\n    str_to_int,\n    try_get,\n    unified_timestamp,\n    url_or_none,\n)\n\n\nclass FourTubeBaseIE(InfoExtractor):\n    def _extract_formats(self, url, video_id, media_id, sources):\n        token_url = 'https://%s/%s/desktop/%s' % (\n            self._TKN_HOST, media_id, '+'.join(sources))\n\n        parsed_url = compat_urlparse.urlparse(url)\n        tokens = self._download_json(token_url, video_id, data=b'', headers={\n            'Origin': '%s://%s' % (parsed_url.scheme, parsed_url.hostname),\n            'Referer': url,\n        })\n        formats = [{\n            'url': tokens[format]['token'],\n            'format_id': format + 'p',\n            'resolution': format + 'p',\n            'quality': int(format),\n        } for format in sources]\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        kind, video_id, display_id = mobj.group('kind', 'id', 'display_id')\n\n        if kind == 'm' or not display_id:\n            url = self._URL_TEMPLATE % video_id\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_meta('name', webpage)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage))\n        thumbnail = self._html_search_meta('thumbnailUrl', webpage)\n        uploader_id = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/([^/\"]+)\" title=\"Go to [^\"]+ page\">',\n            webpage, 'uploader id', fatal=False)\n        uploader = self._html_search_regex(\n            r'<a class=\"item-to-subscribe\" href=\"[^\"]+/(?:channel|user)s?/[^/\"]+\" title=\"Go to ([^\"]+) page\">',\n            webpage, 'uploader', fatal=False)\n\n        categories_html = self._search_regex(\n            r'(?s)><i class=\"icon icon-tag\"></i>\\s*Categories / Tags\\s*.*?<ul class=\"[^\"]*?list[^\"]*?\">(.*?)</ul>',\n            webpage, 'categories', fatal=False)\n        categories = None\n        if categories_html:\n            categories = [\n                c.strip() for c in re.findall(\n                    r'(?s)<li><a.*?>(.*?)</a>', categories_html)]\n\n        view_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([0-9,]+)\">',\n            webpage, 'view count', default=None))\n        like_count = str_to_int(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserLikes:([0-9,]+)\">',\n            webpage, 'like count', default=None))\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n\n        media_id = self._search_regex(\n            r'<button[^>]+data-id=([\"\\'])(?P<id>\\d+)\\1[^>]+data-quality=', webpage,\n            'media id', default=None, group='id')\n        sources = [\n            quality\n            for _, quality in re.findall(r'<button[^>]+data-quality=([\"\\'])(.+?)\\1', webpage)]\n        if not (media_id and sources):\n            player_js = self._download_webpage(\n                self._search_regex(\n                    r'<script[^>]id=([\"\\'])playerembed\\1[^>]+src=([\"\\'])(?P<url>.+?)\\2',\n                    webpage, 'player JS', group='url'),\n                video_id, 'Downloading player JS')\n            params_js = self._search_regex(\n                r'\\$\\.ajax\\(url,\\ opts\\);\\s*\\}\\s*\\}\\)\\(([0-9,\\[\\] ]+)\\)',\n                player_js, 'initialization parameters')\n            params = self._parse_json('[%s]' % params_js, video_id)\n            media_id = params[0]\n            sources = ['%s' % p for p in params[2]]\n\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'categories': categories,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass FourTubeIE(FourTubeBaseIE):\n    IE_NAME = '4tube'\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?4tube\\.com/(?:videos|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.4tube.com/videos/%s/video'\n    _TKN_HOST = 'token.4tube.com'\n    _TESTS = [{\n        'url': 'http://www.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '209733',\n            'ext': 'mp4',\n            'title': 'Hot Babe Holly Michaels gets her ass stuffed by black',\n            'uploader': 'WCP Club',\n            'uploader_id': 'wcp-club',\n            'upload_date': '20131031',\n            'timestamp': 1383263892,\n            'duration': 583,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://www.4tube.com/embed/209733',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.4tube.com/videos/209733/hot-babe-holly-michaels-gets-her-ass-stuffed-by-black',\n        'only_matching': True,\n    }]\n\n\nclass FuxIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?fux\\.com/(?:video|embed)/(?P<id>\\d+)(?:/(?P<display_id>[^/?#&]+))?'\n    _URL_TEMPLATE = 'https://www.fux.com/video/%s/video'\n    _TKN_HOST = 'token.fux.com'\n    _TESTS = [{\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'info_dict': {\n            'id': '195359',\n            'ext': 'mp4',\n            'title': 'Awesome fucking in the kitchen ends with cum swallow',\n            'uploader': 'alenci2342',\n            'uploader_id': 'alenci2342',\n            'upload_date': '20131230',\n            'timestamp': 1388361660,\n            'duration': 289,\n            'view_count': int,\n            'like_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.fux.com/embed/195359',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow',\n        'only_matching': True,\n    }]\n\n\nclass PornTubeIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?porntube\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.porntube.com/videos/video_%s'\n    _TKN_HOST = 'tkn.porntube.com'\n    _TESTS = [{\n        'url': 'https://www.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'info_dict': {\n            'id': '7089759',\n            'ext': 'mp4',\n            'title': 'Teen couple doing anal',\n            'uploader': 'Alexy',\n            'uploader_id': '91488',\n            'upload_date': '20150606',\n            'timestamp': 1433595647,\n            'duration': 5052,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/videos/squirting-teen-ballerina-ecg_1331406',\n        'info_dict': {\n            'id': '1331406',\n            'ext': 'mp4',\n            'title': 'Squirting Teen Ballerina on ECG',\n            'uploader': 'Exploited College Girls',\n            'uploader_id': '665',\n            'channel': 'Exploited College Girls',\n            'channel_id': '665',\n            'upload_date': '20130920',\n            'timestamp': 1379685485,\n            'duration': 851,\n            'view_count': int,\n            'like_count': int,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.porntube.com/embed/7089759',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.porntube.com/videos/teen-couple-doing-anal_7089759',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id, display_id = mobj.group('id', 'display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'INITIALSTATE\\s*=\\s*([\"\\'])(?P<value>(?:(?!\\1).)+)\\1',\n                webpage, 'data', group='value'), video_id,\n            transform_source=lambda x: compat_urllib_parse_unquote(\n                compat_b64decode(x).decode('utf-8')))['page']['video']\n\n        title = video['title']\n        media_id = video['mediaId']\n        sources = [compat_str(e['height'])\n                   for e in video['encodings'] if e.get('height')]\n        formats = self._extract_formats(url, video_id, media_id, sources)\n\n        thumbnail = url_or_none(video.get('masterThumb'))\n        uploader = try_get(video, lambda x: x['user']['username'], compat_str)\n        uploader_id = str_or_none(try_get(\n            video, lambda x: x['user']['id'], int))\n        channel = try_get(video, lambda x: x['channel']['name'], compat_str)\n        channel_id = str_or_none(try_get(\n            video, lambda x: x['channel']['id'], int))\n        like_count = int_or_none(video.get('likes'))\n        dislike_count = int_or_none(video.get('dislikes'))\n        view_count = int_or_none(video.get('playsQty'))\n        duration = int_or_none(video.get('durationInSeconds'))\n        timestamp = unified_timestamp(video.get('publishedAt'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'uploader': uploader or channel,\n            'uploader_id': uploader_id or channel_id,\n            'channel': channel,\n            'channel_id': channel_id,\n            'timestamp': timestamp,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'view_count': view_count,\n            'duration': duration,\n            'age_limit': 18,\n        }\n\n\nclass PornerBrosIE(FourTubeBaseIE):\n    _VALID_URL = r'https?://(?:(?P<kind>www|m)\\.)?pornerbros\\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\\d+)'\n    _URL_TEMPLATE = 'https://www.pornerbros.com/videos/video_%s'\n    _TKN_HOST = 'token.pornerbros.com'\n    _TESTS = [{\n        'url': 'https://www.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'md5': '6516c8ac63b03de06bc8eac14362db4f',\n        'info_dict': {\n            'id': '181369',\n            'ext': 'mp4',\n            'title': 'Skinny brunette takes big cock down her anal hole',\n            'uploader': 'PornerBros HD',\n            'uploader_id': 'pornerbros-hd',\n            'upload_date': '20130130',\n            'timestamp': 1359527401,\n            'duration': 1224,\n            'view_count': int,\n            'categories': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.pornerbros.com/embed/181369',\n        'only_matching': True,\n    }, {\n        'url': 'https://m.pornerbros.com/videos/skinny-brunette-takes-big-cock-down-her-anal-hole_181369',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class PornTubeIE\ndef test_PornTubeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}