# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1574
        float_0 = -1436.8
        rough_parser_0 = module_0.RoughParser(int_0, float_0)
        var_0 = rough_parser_0.find_good_parse_start()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = '  - mak+ sure the devdce has suatable firmware;\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = 'U}balaned parnthee, rake[or brcs:\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_num_lines_in_stmt()
        var_2 = rough_parser_0.find_good_parse_start(bool_0)
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 3329
        list_0 = [int_0]
        bytes_0 = b'\x96EM\xdb\xa0\xe1\xe7YH\xfe\xbf\x93\xec\x06\xb8\x1a'
        hyper_parser_0 = module_0.HyperParser(list_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        bool_1 = False
        var_0 = rough_parser_0.set_lo(bool_1)
        var_1 = rough_parser_0.set_lo(rough_parser_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = "   mak\\bure:^he/deviceTSs uial fjrm'ae;\n"
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_continuation_type()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '  s{mak\\bsure:the deice has sutale firma\\e;\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_base_indent_string()
        var_3 = rough_parser_0.is_block_closer()
        bool_1 = False
        float_0 = -2117.52681
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(bool_1, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        set_0 = set()
        list_1 = []
        rough_parser_0 = module_0.RoughParser(set_0, list_1)
        var_0 = rough_parser_0.set_str(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xb0@'
        bytes_1 = b'\xa6\x03,\xf5\xeb\x1c/\xef>\xd7b\x17\x81?\x9cU\xeb\xf51'
        rough_parser_0 = module_0.RoughParser(bytes_0, bytes_1)
        int_0 = -1494
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0}
        str_0 = '"\x0c'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_0 = string_translate_pseudo_mapping_0.__len__()
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_1 = "   mk\\bsre:^he/deviceTS uial fjrm'ae;\n"
        var_1 = rough_parser_0.set_str(str_1)
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 334.37
        float_1 = -4020.23963
        set_0 = {float_0, float_0, float_0}
        dict_0 = {float_0: float_0, float_0: float_0, float_0: set_0}
        str_0 = 'H#S_DmD p7+&CWwNU*%^'
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, str_0)
        var_0 = string_translate_pseudo_mapping_0.__getitem__(float_1)
        float_2 = 3208.08
        int_0 = -1218
        tuple_0 = (int_0, int_0)
        var_1 = string_translate_pseudo_mapping_0.get(tuple_0)
        hyper_parser_0 = module_0.HyperParser(float_0, float_2)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = '  - make sure the devdce has suatable firmware;\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = '  mak\\bsue:the device Tas iale frmae;\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = "   mak\\bsure:the device Tas uiale firm'ae;\n"
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = False
        bool_1 = None
        rough_parser_0 = module_0.RoughParser(bool_1, bool_0)
        str_0 = 'U}balaned parnthees, brayke[s or brcs:\n\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.compute_bracket_indent()
        dict_0 = {str_0: var_2}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, rough_parser_0)
        var_3 = string_translate_pseudo_mapping_0.__iter__()
        var_4 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = " \r mk\\bsrev^he/deviceTS uial fjrm'ae;\n"
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = 'Unbalaned parthees, backe\x0bs or brces:\n\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_continuation_type()
        var_2 = rough_parser_0.is_block_opener()
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = 'Unbalanced parentheses, brackets or braces:\n\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = 'U}balaned parnthees, rayke[or brcs:\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = 'Unbalaed parnthees, bracke[s or brs:\n\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_3 = rough_parser_0.compute_bracket_indent()
        var_4 = rough_parser_0.set_str(bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = "   mak\\bsure:the device Tas uiale firm'ae;\n"
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = "  s{mak\\bsure:the device has sutale firm'a\\e;\n"
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_base_indent_string()
        bool_1 = False
        float_0 = -2117.52681
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(bool_1, float_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = "  ake'sure:the evice hssuitabXv firm'ar;\n"
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_28():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = '  make\'surethe "evice hassuitabXv firm\'ar;\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_open_bracket_pos()
        var_2 = rough_parser_0.find_good_parse_start(str_0)
        bytes_0 = b'#\x9d\x1c\xd9\xfe\xb3Z\xf7\x1e\x08\x02\x893]C\xf3\x90\x93\x87'
        var_3 = rough_parser_0.set_lo(bytes_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bool_0 = True
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        str_0 = 'Unbalaed parnthees, bracke[s or brs:\n\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_3 = rough_parser_0.compute_bracket_indent()
        bool_1 = True
        var_4 = rough_parser_0.set_lo(bool_1)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = "  {mak\\bsre:the evice ha) sutlefirm'a\\e;\n"
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_base_indent_string()
        var_3 = rough_parser_0.get_num_lines_in_stmt()
        var_4 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_31():
    try:
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(bool_0, bool_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        str_0 = '  {mak\\b"r:the eviceFhas stlei\x0bm&a\\e;\n'
        var_1 = rough_parser_0.set_str(str_0)
        var_2 = rough_parser_0.get_base_indent_string()
        var_3 = rough_parser_0.is_block_closer()
        var_4 = rough_parser_0.get_base_indent_string()
        var_5 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass