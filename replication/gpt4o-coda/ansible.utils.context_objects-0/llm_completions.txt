

# Generated at 2024-06-01 12:33:48.539797
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:33:49.524938
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:33:52.602098
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:33:55.065916
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:33:56.186681
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2
```

# Generated at 2024-06-01 12:33:58.767239
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:34:01.341177
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:34:04.334614
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:34:06.985938
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:34:08.052993
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:34:20.716365
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:34:21.687068
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2
```

# Generated at 2024-06-01 12:34:24.080344
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:34:25.041355
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:34:28.398937
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:34:30.964526
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:34:34.830689
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'set_item1', 'set_item2'}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset({'set_item1', 'set_item2'})
```

# Generated at 2024-06-01 12:34:37.250326
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'set_item1', 'set_item2'}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset({'set_item1', 'set_item2'})
```

# Generated at 2024-06-01 12:34:40.554563
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:34:43.355205
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:34:49.520170
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'set_item1', 'set_item2'}
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset({'set_item1', 'set_item2'})
```

# Generated at 2024-06-01 12:34:52.320251
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:34:54.493745
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:34:57.670682
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:35:00.315891
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:01.385836
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:35:02.311491
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:35:03.285959
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:35:06.017380
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:06.991474
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2
```

# Generated at 2024-06-01 12:35:17.928124
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:21.891759
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:22.961118
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:35:25.677133
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'set_item1', 'set_item2'}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset({'set_item1', 'set_item2'})
```

# Generated at 2024-06-01 12:35:30.942177
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:33.933551
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:35:35.273539
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:35:36.448327
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:35:39.914095
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:35:43.029979
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:48.455721
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert isinstance(global_args, GlobalCLIArgs)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:49.529750
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:35:50.479389
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2
```

# Generated at 2024-06-01 12:35:53.028109
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:55.300748
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'set_item1', 'set_item2'}
    }
    global_args = GlobalCLIArgs(options)
    
    assert isinstance(global_args, GlobalCLIArgs)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset({'set_item1', 'set_item2'})
```

# Generated at 2024-06-01 12:35:58.020426
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:35:59.024608
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:36:00.557022
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:36:02.371974
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg3': 'value3', 'arg4': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance1['arg3'] == 'value3'
```

# Generated at 2024-06-01 12:36:04.851255
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:36:07.870353
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:36:08.893779
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:36:11.454002
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:36:12.347392
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2
```

# Generated at 2024-06-01 12:36:15.160692
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:36:16.926083
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg3': 'value3', 'arg4': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance1['arg3'] == 'value3'
```

# Generated at 2024-06-01 12:36:19.342556
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:36:22.005226
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:36:24.523374
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:36:26.303305
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg3': 'value3', 'arg4': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance1['arg3'] == 'value3'
```

# Generated at 2024-06-01 12:36:30.578204
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg3': 'value3', 'arg4': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance1['arg3'] == 'value3'
```

# Generated at 2024-06-01 12:36:33.716252
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:36:36.369302
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:36:38.866697
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'set_item1', 'set_item2'}
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset({'set_item1', 'set_item2'})
```

# Generated at 2024-06-01 12:36:41.439855
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:36:44.064974
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:36:46.206840
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:36:48.907368
```python
    options = {'arg1': 'value1', 'arg2': ['list_item1', 'list_item2'], 'arg3': {'nested_key': 'nested_value'}}
    global_args = GlobalCLIArgs(options)
    assert isinstance(global_args, GlobalCLIArgs)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
```

# Generated at 2024-06-01 12:36:49.986696
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:36:52.479754
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:36:58.382533
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:37:01.220617
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert isinstance(global_cli_args, GlobalCLIArgs)
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:03.796985
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:37:07.589093
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert isinstance(global_cli_args, GlobalCLIArgs)
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:10.157658
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg3': 'value3', 'arg4': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance1['arg2'] == 'value2'
    assert 'arg3' not in instance1
    assert 'arg4' not in instance1
```

# Generated at 2024-06-01 12:37:12.656645
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert isinstance(global_args, GlobalCLIArgs)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:13.740502
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:37:16.169107
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:18.697068
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:19.928909
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:37:27.135797
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:28.470531
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:37:31.022657
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:34.655020
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:35.652675
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:37:38.009254
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:39.541902
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:37:43.625383
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:46.694201
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert isinstance(global_args, GlobalCLIArgs)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:49.813884
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert isinstance(global_args, GlobalCLIArgs)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:37:55.707087
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:37:58.358824
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:01.497062
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:38:05.773229
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:09.844496
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:38:12.160813
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:14.655778
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:17.024511
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:19.383541
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:23.143871
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg3': 'value3', 'arg4': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance1['arg3'] == 'value3'
```

# Generated at 2024-06-01 12:38:34.225166
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:38.670105
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:38:42.005637
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:44.645396
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:48.176613
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:50.368094
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:52.592000
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:53.669724
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:38:56.103275
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:38:57.149233
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:39:20.105992
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:39:21.778859
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:39:24.336692
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'set_item1', 'set_item2'}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset({'set_item1', 'set_item2'})
```

# Generated at 2024-06-01 12:39:27.140818
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:39:30.363275
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert isinstance(global_cli_args, GlobalCLIArgs)
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:39:33.935705
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:39:37.993373
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:39:39.847517
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:39:41.403949
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:39:44.218723
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:40:14.213654
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:40:15.255872
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:40:17.924785
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:40:20.307394
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:40:21.430913
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:40:23.826984
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:40:24.896857
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:40:27.645505
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'set_item1', 'set_item2'}
    }
    global_args = GlobalCLIArgs(options)
    
    assert isinstance(global_args, GlobalCLIArgs)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset({'set_item1', 'set_item2'})
```

# Generated at 2024-06-01 12:40:30.101189
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:40:32.806203
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:40:50.160802
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:40:51.773409
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:40:56.425871
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:40:58.898780
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:41:02.221628
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert isinstance(global_cli_args, GlobalCLIArgs)
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:41:04.991709
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:41:06.569985
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:41:07.590765
```python
    instance1 = _ABCSingleton('TestSingleton', (object,), {})
    instance2 = _ABCSingleton('TestSingleton', (object,), {})
    assert instance1 is instance2
```

# Generated at 2024-06-01 12:41:10.233307
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:41:12.683821
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:41:29.496568
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:41:33.089199
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:41:34.288623
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:41:36.707957
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg3': 'value3', 'arg4': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance1['arg3'] == 'value3'
```

# Generated at 2024-06-01 12:41:40.315254
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:41:42.496513
```python
    instance1 = GlobalCLIArgs({'arg1': 'value1', 'arg2': 'value2'})
    instance2 = GlobalCLIArgs({'arg1': 'value3', 'arg2': 'value4'})
    
    assert instance1 is instance2
    assert instance1['arg1'] == 'value1'
    assert instance2['arg2'] == 'value2'
```

# Generated at 2024-06-01 12:41:45.127159
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:41:48.237032
```python
    sample_data = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_data)
    
    assert isinstance(cli_args, CLIArgs)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:41:52.875813
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:41:56.570758
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:42:29.109814
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:42:32.132661
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:42:34.904583
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:42:37.311776
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:42:38.299865
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:42:40.606013
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_cli_args = GlobalCLIArgs(options)
    
    assert global_cli_args['arg1'] == 'value1'
    assert global_cli_args['arg2'] == ('list_item1', 'list_item2')
    assert global_cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:42:43.038828
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': {'nested_set': {'set_item1', 'set_item2'}}
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == ImmutableDict({'nested_set': frozenset({'set_item1', 'set_item2'})})
```

# Generated at 2024-06-01 12:42:45.381765
```python
    sample_input = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    cli_args = CLIArgs(sample_input)
    
    assert isinstance(cli_args, ImmutableDict)
    assert cli_args['arg1'] == 'value1'
    assert cli_args['arg2'] == ('list_item1', 'list_item2')
    assert cli_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert cli_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```

# Generated at 2024-06-01 12:42:46.421376
```python
    class TestSingleton(metaclass=_ABCSingleton):
        pass

    instance1 = TestSingleton()
    instance2 = TestSingleton()

    assert instance1 is instance2, "Singleton instances are not the same"
```

# Generated at 2024-06-01 12:42:50.871017
```python
    options = {
        'arg1': 'value1',
        'arg2': ['list_item1', 'list_item2'],
        'arg3': {'nested_key': 'nested_value'},
        'arg4': set(['set_item1', 'set_item2'])
    }
    global_args = GlobalCLIArgs(options)
    
    assert global_args['arg1'] == 'value1'
    assert global_args['arg2'] == ('list_item1', 'list_item2')
    assert global_args['arg3'] == ImmutableDict({'nested_key': 'nested_value'})
    assert global_args['arg4'] == frozenset(['set_item1', 'set_item2'])
```