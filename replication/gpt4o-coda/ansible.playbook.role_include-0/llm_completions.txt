

# Generated at 2024-05-31 22:11:46.443637
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 22:11:49.463810
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:11:52.508337
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:11:56.912838
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:11:59.314328
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert params["param1"] == "value1"
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:12:00.886713
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:03.103124
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:06.021468
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:12:09.565108
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._from_files['handlers'] == 'main

# Generated at 2024-05-31 22:12:11.754613
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:20.547305
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:12:22.521280
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Execute
    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    # Verify
    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:24.434036
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:26.080216
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:29.246502
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:12:30.987796
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 22:12:33.246698
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:12:34.998205
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:38.155956
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:12:40.074765
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:47.865787
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:12:50.101726
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:12:52.551855
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:12:56.861968
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mock methods and attributes
    include_role._parent = type('obj', (object,), {'_play': 'mock_play'})
    include_role._role_name = 'mock_role_name'
    include_role.vars = {}
    include_role.collections = []
    include_role.statically_loaded = False
    include_role.public = False
    include_role.allow_duplicates = True
    include_role.rolespec_validate = True

    RoleInclude.load = lambda *args, **kwargs: type('obj', (object,), {'vars': {}})
    Role.load = lambda *args, **kwargs: type('obj', (object,), {
        '_role_path': 'mock_role_path',
        '

# Generated at 2024-05-31 22:12:59.994629
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:13:02.562651
```python
    parent_role = Role()
    parent_role._role_path = '/path/to/parent_role'
    parent_role.get_role_params = lambda: {'param1': 'value1'}
    parent_role.get_name = lambda: 'parent_role_name'

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert 'param1' in params
    assert params['param1'] == 'value1'
    assert 'ansible_parent_role_names' in params
    assert params['ansible_parent_role_names'] == ['parent_role_name']
    assert 'ansible_parent_role_paths' in params
    assert params['ansible_parent_role_paths'] == ['/path/to/parent_role']
```

# Generated at 2024-05-31 22:13:05.113360
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:13:07.336130
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:13:09.872629
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:13:12.714232
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:13:21.662295
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:13:24.051461
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:13:26.073398
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:13:28.932211
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:13:31.454256
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:13:35.034557
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:13:37.145826
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:13:40.162523
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:13:41.936297
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:13:48.476461
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:13:56.203292
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:13:57.923200
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:14:01.059126
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:14:03.676504
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:14:05.430160
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:14:08.425835
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:14:10.989588
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:14:13.265989
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:14:16.382822
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:14:23.028316
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True

# Generated at 2024-05-31 22:14:32.585064
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True

# Generated at 2024-05-31 22:14:36.539749
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:14:39.827770
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 22:14:44.214954
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('obj', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self

# Generated at 2024-05-31 22:14:48.860289
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:14:52.667829
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:14:54.933768
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 22:14:57.992901
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:15:00.460551
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:15:03.016499
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:15:12.168318
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:15:15.136566
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 22:15:17.046684
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:15:19.906772
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:15:21.722585
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:15:23.744809
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:15:26.944983
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:15:28.648877
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:15:32.474397
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:15:34.530707
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:15:44.360233
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:15:46.780575
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:15:49.426798
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:15:51.193236
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:15:54.222770
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play, dep_chain):
                return [

# Generated at 2024-05-31 22:15:57.170628
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:16:07.743913
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:16:11.084220
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:16:14.052324
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:16:21.508329
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True

# Generated at 2024-05-31 22:16:29.893038
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 22:16:33.161995
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:16:38.428656
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mock RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mock Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play

# Generated at 2024-05-31 22:16:40.920630
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:16:44.259927
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:16:46.227275
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:16:49.452658
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:16:52.660339
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:16:54.553248
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:16:56.830458
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:17:04.931156
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:17:07.936777
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:17:11.230399
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:17:13.786073
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:17:16.994877
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:17:21.643446
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:17:29.876915
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mock RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mock Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('obj', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play

# Generated at 2024-05-31 22:17:32.240353
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:17:35.013571
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:17:37.269513
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:17:46.263259
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:17:49.617839
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._from_files['handlers'] == 'main

# Generated at 2024-05-31 22:17:51.440241
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:17:56.558896
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:17:58.204022
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:18:01.664724
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:18:03.419257
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:18:05.140747
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:18:06.799501
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 22:18:10.058396
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:18:18.725840
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:18:20.399248
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:18:22.135920
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:18:24.594311
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:18:27.781094
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:18:32.800324
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('metadata', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self

# Generated at 2024-05-31 22:18:36.879434
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mocking RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    
    RoleInclude.load = mock_role_include_load

    # Mocking Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('obj', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile

# Generated at 2024-05-31 22:18:39.764094
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:18:42.908240
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:18:46.433397
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:18:58.268825
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:19:03.411532
```python
    # Setup
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    play = None
    variable_manager = None
    loader = None

    # Mock RoleInclude.load
    def mock_role_include_load(role_name, play, variable_manager, loader, collection_list):
        class MockRoleInclude:
            def __init__(self):
                self.vars = {}
        return MockRoleInclude()
    RoleInclude.load = mock_role_include_load

    # Mock Role.load
    def mock_role_load(ri, play, parent_role, from_files, from_include, validate):
        class MockRole:
            def __init__(self):
                self._role_path = "/mock/role/path"
                self._metadata = type('obj', (object,), {'allow_duplicates': True})
                self.collections = []
            def compile(self, play

# Generated at 2024-05-31 22:19:07.052557
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:19:09.544441
```python
    data = {
        'name': 'test_role',
        'apply': {'some_option': 'value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_option': 'value'}
```

# Generated at 2024-05-31 22:19:11.596034
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    
    assert include_role.get_name() == "test_name"
    
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 22:19:15.832547
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:19:18.076141
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:19:20.046564
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:19:22.742404
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:19:26.601441
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:19:36.210063
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:19:43.493250
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True
    assert include_role.allow_duplicates is

# Generated at 2024-05-31 22:19:46.044289
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:19:48.464946
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:19:51.554127
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:19:53.933410
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:19:56.282269
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:19:59.646213
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:20:01.378571
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:20:06.388719
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:20:14.506691
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:20:17.190609
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:20:19.189322
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:20:21.453165
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:20:25.032554
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role._from_files['vars'] == 'main.yml'
    assert include_role._from_files['defaults'] == 'main.yml'
    assert include_role._

# Generated at 2024-05-31 22:20:30.023285
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:20:31.861073
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:20:35.755910
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:20:37.942248
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:20:41.196649
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:20:50.077602
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:20:54.470928
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:20:57.185873
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:21:00.770555
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role_name"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role_name"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:21:03.692967
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.public is True

# Generated at 2024-05-31 22:21:06.073932
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:21:09.257204
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)
    include_role.name = "test_name"
    include_role.action = "include_role"
    include_role._role_name = "test_role"
    assert include_role.get_name() == "test_name"
    include_role.name = None
    assert include_role.get_name() == "include_role : test_role"
```

# Generated at 2024-05-31 22:21:12.097219
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
    for b in blocks:
        assert isinstance(b, Block)
    for h in handlers:
        assert isinstance(h, Block)
```

# Generated at 2024-05-31 22:21:14.963640
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```

# Generated at 2024-05-31 22:21:17.629226
```python
    parent_role = Role()
    parent_role._role_path = "/path/to/parent_role"
    parent_role.get_role_params = lambda: {"param1": "value1"}
    parent_role.get_name = lambda: "parent_role_name"

    include_role = IncludeRole(role=parent_role)
    include_role._parent_role = parent_role

    params = include_role.get_include_params()

    assert "param1" in params
    assert params["param1"] == "value1"
    assert "ansible_parent_role_names" in params
    assert params["ansible_parent_role_names"] == ["parent_role_name"]
    assert "ansible_parent_role_paths" in params
    assert params["ansible_parent_role_paths"] == ["/path/to/parent_role"]
```

# Generated at 2024-05-31 22:21:25.867884
```python
    block = Block()
    role = Role()
    task_include = TaskInclude()
    include_role = IncludeRole(block=block, role=role, task_include=task_include)

    play = None
    variable_manager = None
    loader = None

    blocks, handlers = include_role.get_block_list(play=play, variable_manager=variable_manager, loader=loader)

    assert isinstance(blocks, list)
    assert isinstance(handlers, list)
```

# Generated at 2024-05-31 22:21:30.732033
```python
    data = {
        'name': 'test_role',
        'role': 'test_role',
        'tasks_from': 'tasks/main.yml',
        'vars_from': 'vars/main.yml',
        'defaults_from': 'defaults/main.yml',
        'handlers_from': 'handlers/main.yml',
        'apply': {'some_option': 'some_value'},
        'public': True,
        'allow_duplicates': False,
        'rolespec_validate': True
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files == {
        'tasks': 'main.yml',
        'vars': 'main.yml',
        'defaults': 'main.yml',
        'handlers': 'main.yml'
    }
    assert include_role.apply == {'

# Generated at 2024-05-31 22:21:33.153588
```python
    data = {
        'name': 'test_role',
        'apply': {'some_key': 'some_value'},
        'public': True,
        'tasks_from': 'tasks/main.yml'
    }
    block = Block()
    role = Role()
    task_include = TaskInclude()

    include_role = IncludeRole.load(data, block=block, role=role, task_include=task_include)

    assert include_role._role_name == 'test_role'
    assert include_role._from_files['tasks'] == 'main.yml'
    assert include_role.public is True
    assert include_role.apply == {'some_key': 'some_value'}
```