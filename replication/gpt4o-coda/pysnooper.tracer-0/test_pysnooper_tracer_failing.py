# Automatically generated by Pynguin.
import pysnooper.tracer as module_0

def test_case_0():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        tuple_0 = ()
        list_0 = [tracer_0, tuple_0]
        var_1 = tracer_0.write(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        var_0 = module_0.get_write_function(bool_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '#Vg{Hjl>$v\x0crH^\tbC @'
        int_0 = 3302
        bool_0 = False
        tracer_0 = module_0.Tracer(str_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'Iz\x90\xad\xdbz\x7f'
        unavailable_source_0 = module_0.UnavailableSource()
        tracer_0 = module_0.Tracer(bytes_0, unavailable_source_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = None
        set_0 = {bool_0, bool_0}
        file_writer_0 = module_0.FileWriter(bool_0, set_0)
        dict_0 = {}
        bytes_0 = b'\xde^\x0e\xe6\x93\xe6qyL\x87_\xfd\x9e\xa4\x9c\xe2.\xc95'
        float_0 = None
        tracer_0 = module_0.Tracer(file_writer_0, dict_0, bytes_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 191.4
        bool_0 = True
        file_writer_0 = module_0.FileWriter(float_0, bool_0)
        var_0 = file_writer_0.write(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2
        set_0 = {int_0, int_0, int_0}
        tuple_0 = (int_0, set_0, set_0)
        str_0 = 'G=\r0rr(iP7 A\t9"a%n\n'
        unavailable_source_0 = module_0.UnavailableSource()
        dict_0 = None
        float_0 = 1138.0
        tracer_0 = module_0.Tracer(str_0, tuple_0, unavailable_source_0, tuple_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = None
        str_0 = 'REPR FAILED'
        bool_0 = None
        str_1 = '@~ye'
        dict_0 = {}
        dict_1 = {str_0: set_0, str_1: bool_0, str_1: dict_0}
        tracer_0 = module_0.Tracer(str_1, dict_0, str_0, dict_1)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 155.6147059985765
        bool_0 = False
        file_writer_0 = module_0.FileWriter(float_0, bool_0)
        var_0 = file_writer_0.write(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tracer_0 = module_0.Tracer()
        int_0 = None
        var_0 = tracer_0.__exit__(tracer_0, tracer_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        float_0 = 799.8282682881651
        int_0 = 1
        str_0 = 'ivAcd\\uQCdGO\x0cH6'
        var_1 = tracer_0.__exit__(int_0, float_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tracer_0 = module_0.Tracer()
        float_0 = 798.1598
        var_0 = tracer_0.__call__(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tracer_0 = module_0.Tracer()
        tracer_1 = module_0.Tracer(tracer_0)
        var_0 = tracer_1.__enter__()
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        dict_0 = {}
        unavailable_source_0 = None
        unavailable_source_1 = module_0.UnavailableSource()
        int_0 = None
        str_0 = 'xcep%xCXon'
        tracer_0 = module_0.Tracer(unavailable_source_0, str_0, dict_0)
        var_0 = tracer_0.__enter__()
        var_1 = unavailable_source_1.__getitem__(dict_0)
        tuple_1 = None
        var_2 = tracer_0.__exit__(tuple_1, int_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\\\x82\xff\xce\xd5\x9b\xc1 \xe2\xe4!\x11\x15\xc5\x85e\xa7u'
        tracer_0 = module_0.Tracer()
        str_0 = '.iJWT"?.d-s'
        var_0 = tracer_0.set_thread_info_padding(str_0)
        var_1 = tracer_0.__enter__()
        tuple_0 = ()
        set_0 = {var_1, tuple_0}
        dict_0 = {}
        unavailable_source_0 = None
        var_2 = tracer_0.__enter__()
        file_writer_0 = module_0.FileWriter(set_0, set_0)
        bool_0 = False
        unavailable_source_1 = module_0.UnavailableSource()
        unavailable_source_2 = module_0.UnavailableSource(**dict_0)
        int_0 = None
        str_1 = 'excepCXon'
        var_3 = tracer_0.write(int_0)
        bool_1 = None
        tracer_1 = module_0.Tracer(unavailable_source_0, str_1, dict_0)
        var_4 = unavailable_source_1.__getitem__(dict_0)
        str_2 = '|e:Q~V0xF5'
        list_0 = []
        bytes_1 = b''
        int_1 = -1733
        dict_1 = {bool_1: bool_0, bool_1: var_0, bytes_0: str_2}
        tracer_2 = module_0.Tracer(unavailable_source_0, list_0, bytes_1, int_1, dict_1)
    except BaseException:
        pass