# Automatically generated by Pynguin.
import ansible.plugins.shell.powershell as module_0

def test_case_0():
    try:
        dict_0 = {}
        int_0 = 11
        list_0 = [int_0, int_0, int_0]
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.checksum(int_0, *list_0, **dict_0)
        shell_module_1 = module_0.ShellModule()
        var_1 = shell_module_1.expand_user(dict_0)
        var_2 = shell_module_1.join_path()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'G9ziDZ=.`'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.path_has_trailing_slash(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        shell_module_0 = module_0.ShellModule()
        set_0 = set()
        var_0 = shell_module_0.checksum(set_0)
        str_0 = 'ansible_inventory_sources'
        int_0 = None
        var_1 = shell_module_0.chmod(str_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        shell_module_0 = module_0.ShellModule()
        bool_0 = False
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.chown(shell_module_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = None
        shell_module_0 = module_0.ShellModule()
        str_0 = 'n3RoV ~hnpa;/(-O'
        dict_1 = {str_0: shell_module_0}
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.set_user_facl(dict_0, shell_module_0, dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xfdc0\xa9\x08\xc4\x0c\xc8\xe1X<\xda$\xfd\xc1'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.mkdtemp(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = None
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.mkdtemp(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = None
        str_0 = 'f_m'
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.build_module_command(shell_module_0, set_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '4\x0bTAHdF{|!tr'
        dict_0 = {}
        shell_module_0 = module_0.ShellModule()
        var_0 = shell_module_0.checksum(dict_0)
        bytes_0 = b'\xad\xc5U\xed\xe9\x9f'
        int_0 = None
        tuple_0 = (bytes_0, int_0)
        var_1 = shell_module_0.remove(tuple_0, str_0)
        float_0 = 100.0
        dict_1 = {str_0: dict_0, str_0: float_0, str_0: str_0}
        list_0 = []
        shell_module_1 = module_0.ShellModule()
        var_2 = shell_module_1.build_module_command(float_0, dict_1, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        int_0 = 29
        shell_module_0 = module_0.ShellModule()
        set_0 = set()
        int_1 = -1335
        str_0 = ''
        bool_0 = False
        var_0 = shell_module_0.build_module_command(set_0, int_1, str_0, bool_0)
        set_1 = {shell_module_0}
        var_1 = shell_module_0.remove(set_1)
        shell_module_1 = module_0.ShellModule()
        str_1 = 'eL>x jnia&;70[dg'
        dict_1 = {str_1: dict_0, str_1: shell_module_1, str_1: int_0, str_1: shell_module_1, str_1: int_0}
        var_2 = shell_module_0.expand_user(dict_1)
        str_2 = 'VY~\x0ca7'
        var_3 = shell_module_0.path_has_trailing_slash(str_2)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        shell_module_0 = module_0.ShellModule()
        shell_module_1 = module_0.ShellModule()
        var_0 = shell_module_1.checksum(dict_0)
        var_1 = shell_module_1.wrap_for_exec(shell_module_0)
        str_0 = '+Ym-]OJ|'
        list_0 = []
        list_1 = [list_0]
        var_2 = shell_module_1.join_path(*list_1)
        var_3 = shell_module_1.expand_user(str_0, list_0)
        shell_module_2 = module_0.ShellModule()
        var_4 = shell_module_1.env_prefix()
        int_0 = None
        str_1 = 'Lx'
        var_5 = shell_module_0.get_remote_filename(str_1)
        bool_0 = False
        var_6 = shell_module_1.expand_user(bool_0)
        shell_module_3 = module_0.ShellModule()
        shell_module_4 = module_0.ShellModule()
        shell_module_5 = module_0.ShellModule()
        dict_1 = None
        str_2 = '"0h+ZnQyL%"]hsX]'
        var_7 = shell_module_0.build_module_command(int_0, dict_1, str_2)
    except BaseException:
        pass