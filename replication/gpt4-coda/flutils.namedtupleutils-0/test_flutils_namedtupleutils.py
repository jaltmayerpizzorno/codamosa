# Automatically generated by Pynguin.
import flutils.namedtupleutils as module_0
import types as module_1

def test_case_0():
    list_0 = []
    var_0 = module_0.to_namedtuple(list_0)

def test_case_1():
    bool_0 = None
    list_0 = [bool_0, bool_0]
    var_0 = module_0.to_namedtuple(list_0)
    var_1 = module_0.to_namedtuple(list_0)

def test_case_2():
    simple_namespace_0 = module_1.SimpleNamespace()
    var_0 = module_0.to_namedtuple(simple_namespace_0)

def test_case_3():
    str_0 = 'q9y'
    bool_0 = True
    dict_0 = {str_0: bool_0}
    simple_namespace_0 = module_1.SimpleNamespace(**dict_0)
    var_0 = module_0.to_namedtuple(simple_namespace_0)

def test_case_4():
    str_0 = 'path_absent'
    list_0 = [str_0, str_0, str_0]
    var_0 = module_0.to_namedtuple(list_0)

def test_case_5():
    str_0 = None
    dict_0 = {str_0: str_0, str_0: str_0}
    int_0 = 1330
    tuple_0 = (dict_0, int_0, str_0)
    var_0 = module_0.to_namedtuple(tuple_0)

def test_case_6():
    str_0 = '|#+`JP7G|7B['
    bool_0 = True
    dict_0 = {str_0: bool_0}
    var_0 = module_0.to_namedtuple(dict_0)
    simple_namespace_0 = module_1.SimpleNamespace(**dict_0)

def test_case_7():
    simple_namespace_0 = module_1.SimpleNamespace()
    var_0 = module_0.to_namedtuple(simple_namespace_0)
    var_1 = module_0.to_namedtuple(simple_namespace_0)
    str_0 = 'Rc^UP?G"'
    list_0 = [var_0, var_0, str_0]
    var_2 = module_0.to_namedtuple(list_0)
    var_3 = module_0.to_namedtuple(list_0)

def test_case_8():
    str_0 = 'p'
    int_0 = 67
    int_1 = {str_0: int_0, str_0: int_0, str_0: str_0, int_0: str_0, int_0: str_0}
    var_0 = module_0.to_namedtuple(int_1)
    list_0 = [int_1, var_0, var_0, var_0]
    var_1 = module_0.to_namedtuple(list_0)