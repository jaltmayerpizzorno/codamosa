# Automatically generated by Pynguin.
import httpie.cli.dicts as module_0
import httpie.uploads as module_1
import typing as module_2
import requests_toolbelt.multipart.encoder as module_3
import requests.models as module_4

def test_case_0():
    try:
        str_0 = '2Y8{WI`6Uz\r\\\\/'
        dict_0 = {str_0: str_0}
        request_data_dict_0 = module_0.RequestDataDict(**dict_0)
        callable_0 = None
        var_0 = module_1.prepare_request_body(request_data_dict_0, callable_0)
        str_1 = '#9p|lj7'
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        i_o_0 = module_2.IO()
        str_2 = 'IHr q'
        str_3 = 'HX9?.zA'
        str_4 = ''
        str_5 = None
        dict_1 = {str_2: str_2, str_2: str_0, str_3: callable_0, str_4: str_5}
        list_0 = None
        dict_2 = {i_o_0: dict_1, list_0: str_1}
        str_6 = '.httpie'
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(dict_2, str_6)
        multipart_encoder_0 = module_3.MultipartEncoder(chunked_upload_stream_0, dict_2)
    except BaseException:
        pass

def test_case_1():
    try:
        request_data_dict_0 = module_0.RequestDataDict()
        float_0 = -1617.531
        bool_0 = True
        var_0 = module_1.prepare_request_body(request_data_dict_0, float_0, bool_0)
        float_1 = 0.1
        multipart_encoder_0 = module_3.MultipartEncoder(float_1)
    except BaseException:
        pass

def test_case_2():
    try:
        prepared_request_0 = module_4.PreparedRequest()
        bool_0 = True
        var_0 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        callable_0 = None
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(list_0, callable_0)
        list_1 = [chunked_upload_stream_0]
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict(*list_1)
        dict_0 = {}
        multipart_request_data_dict_1 = module_0.MultipartRequestDataDict(**dict_0)
        int_0 = 10
        multipart_encoder_0 = module_3.MultipartEncoder(list_0, int_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        iterable_0 = None
        dict_0 = {iterable_0: iterable_0, iterable_0: iterable_0}
        multipart_encoder_0 = module_3.MultipartEncoder(dict_0)
        str_0 = "__'RFTj`\x0cie^(<aac"
        tuple_0 = (multipart_encoder_0, str_0)
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, tuple_0)
        iterable_1 = chunked_upload_stream_0.__iter__()
        chunked_upload_stream_1 = module_1.ChunkedUploadStream(iterable_0, multipart_encoder_0)
        float_0 = 986.205
        var_0 = module_1.prepare_request_body(multipart_encoder_0, float_0, multipart_encoder_0)
        chunked_upload_stream_2 = module_1.ChunkedUploadStream(iterable_0, iterable_1)
        var_1 = multipart_encoder_0.to_string()
    except BaseException:
        pass

def test_case_5():
    try:
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        str_0 = 'download_resume'
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        int_0 = 3598
        str_1 = 'W>\t+Wl-'
        prepared_request_0 = module_4.PreparedRequest()
        str_2 = '8'
        tuple_1 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_2)
        callable_0 = None
        list_0 = [str_0]
        var_0 = module_1.prepare_request_body(str_1, callable_0, int_0, list_0)
        bool_0 = False
        var_1 = module_1.prepare_request_body(str_1, callable_0, int_0, bool_0)
        prepared_request_1 = module_4.PreparedRequest()
        var_2 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        iterable_0 = None
        dict_0 = {iterable_0: iterable_0, iterable_0: iterable_0}
        multipart_encoder_0 = module_3.MultipartEncoder(dict_0)
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, multipart_encoder_0)
        float_0 = 986.205
        var_0 = module_1.prepare_request_body(multipart_encoder_0, float_0, multipart_encoder_0)
        bool_0 = None
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        int_0 = 3598
        str_0 = ';uYrGT\t3l}-&;#'
        dict_1 = {}
        i_o_0 = module_2.IO(**dict_1)
        var_1 = i_o_0.read()
        tuple_0 = None
        var_2 = module_1.prepare_request_body(str_0, tuple_0, int_0, i_o_0, chunked_upload_stream_0)
        prepared_request_0 = module_4.PreparedRequest()
        callable_0 = None
        var_3 = module_1.prepare_request_body(multipart_encoder_0, callable_0)
        prepared_request_1 = module_4.PreparedRequest()
        var_4 = module_1.compress_request(prepared_request_1, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        iterable_0 = None
        dict_0 = {iterable_0: iterable_0, iterable_0: iterable_0}
        multipart_encoder_0 = module_3.MultipartEncoder(dict_0)
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, multipart_encoder_0)
        float_0 = 986.205
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        str_0 = 'k'
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        var_0 = module_1.prepare_request_body(multipart_encoder_0, float_0, multipart_encoder_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        int_0 = 3598
        str_1 = 'W>\t+Wl-'
        str_2 = ';uYrGT\t3l}-&;#'
        dict_1 = {}
        i_o_0 = module_2.IO(**dict_1)
        var_1 = i_o_0.read()
        str_3 = '{method} {path}{query} HTTP/1.1'
        dict_2 = {str_1: dict_0, str_2: var_1, str_3: var_0, str_3: str_3}
        var_2 = module_1.prepare_request_body(multipart_encoder_0, iterable_1, int_0, dict_2, str_3)
    except BaseException:
        pass

def test_case_8():
    try:
        iterable_0 = None
        dict_0 = {iterable_0: iterable_0, iterable_0: iterable_0}
        multipart_encoder_0 = module_3.MultipartEncoder(dict_0)
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, multipart_encoder_0)
        float_0 = 986.205
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        str_0 = 'k'
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        var_0 = module_1.prepare_request_body(multipart_encoder_0, float_0, multipart_encoder_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        chunked_multipart_upload_stream_1 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_1 = chunked_multipart_upload_stream_1.__iter__()
        iterable_2 = chunked_upload_stream_0.__iter__()
        int_0 = 3598
        str_1 = 'W>\t+Wl-'
        str_2 = ';uYrGT\t3l}-&;#'
        dict_1 = {}
        i_o_0 = module_2.IO(**dict_1)
        var_1 = i_o_0.read()
        str_3 = '{method} {path}{query} HTTP/1.1'
        dict_2 = {str_1: dict_0, str_2: var_1, str_3: var_0, str_3: str_3}
        var_2 = module_1.prepare_request_body(multipart_encoder_0, iterable_2, int_0, dict_2)
        prepared_request_0 = module_4.PreparedRequest()
        list_0 = [iterable_1]
        request_data_dict_0 = module_0.RequestDataDict(*list_0, **dict_2)
    except BaseException:
        pass

def test_case_9():
    try:
        multipart_request_data_dict_0 = module_0.MultipartRequestDataDict()
        bytes_0 = b'Y\x96\x8c&(\xef-\x9fSY\xae\x957V'
        multipart_encoder_0 = module_3.MultipartEncoder(multipart_request_data_dict_0, bytes_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        tuple_0 = (chunked_multipart_upload_stream_0,)
        multipart_encoder_1 = module_3.MultipartEncoder(tuple_0)
    except BaseException:
        pass