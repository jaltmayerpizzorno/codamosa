# Automatically generated by Pynguin.
import ansible.module_utils.common.collections as module_0

def test_case_0():
    try:
        int_0 = -8753497827991233192
        var_0 = module_0.count(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        immutable_dict_0 = None
        tuple_0 = (immutable_dict_0,)
        immutable_dict_1 = module_0.ImmutableDict()
        str_0 = '!I'
        list_0 = [tuple_0, tuple_0, str_0]
        var_0 = immutable_dict_1.__repr__()
        immutable_dict_2 = module_0.ImmutableDict()
        var_1 = immutable_dict_2.__getitem__(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        var_0 = module_0.is_iterable(list_0)
        str_0 = 'aHG_i(4s>f'
        var_1 = module_0.is_iterable(str_0)
        list_1 = []
        immutable_dict_0 = module_0.ImmutableDict(*list_1)
        immutable_dict_1 = module_0.ImmutableDict()
        var_2 = module_0.is_string(list_1)
        var_3 = immutable_dict_0.__len__()
        var_4 = immutable_dict_1.__len__()
        str_1 = 'ansible.legacy.ping'
        immutable_dict_2 = module_0.ImmutableDict()
        var_5 = immutable_dict_2.__len__()
        dict_0 = {str_1: var_1, str_0: var_3}
        immutable_dict_3 = module_0.ImmutableDict(*list_1)
        tuple_0 = (dict_0, dict_0)
        var_6 = module_0.count(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -8753497827991233192
        dict_0 = {}
        list_0 = [dict_0]
        immutable_dict_0 = module_0.ImmutableDict(*list_0)
        var_0 = immutable_dict_0.__iter__()
        immutable_dict_1 = module_0.ImmutableDict(**dict_0)
        var_1 = immutable_dict_1.__repr__()
        var_2 = module_0.count(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__hash__()
        bool_0 = False
        var_1 = immutable_dict_0.__hash__()
        immutable_dict_1 = module_0.ImmutableDict()
        var_2 = immutable_dict_1.__hash__()
        var_3 = immutable_dict_1.union(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\x0b*v0'
        set_0 = set()
        bool_0 = False
        immutable_dict_0 = module_0.ImmutableDict()
        var_0 = immutable_dict_0.__eq__(bool_0)
        str_1 = 'FDs\x0b(%Nf|0iWHS+E'
        dict_0 = {str_0: immutable_dict_0, str_0: set_0, str_1: set_0}
        immutable_dict_1 = module_0.ImmutableDict(**dict_0)
        var_1 = immutable_dict_1.__eq__(dict_0)
        var_2 = immutable_dict_0.difference(set_0)
        complex_0 = None
        var_3 = module_0.count(complex_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1395
        var_0 = module_0.is_iterable(int_0)
        set_0 = set()
        bool_0 = False
        immutable_dict_0 = module_0.ImmutableDict()
        str_0 = '+>3jr`?{Af]5G^IvS'
        var_1 = immutable_dict_0.__repr__()
        str_1 = 'FDs\x0b(%Nf|0iWHS+E'
        dict_0 = {str_0: bool_0, str_0: immutable_dict_0, str_0: var_0, str_0: set_0, str_1: set_0, str_1: immutable_dict_0}
        dict_1 = {str_1: var_1}
        immutable_dict_1 = module_0.ImmutableDict(**dict_1)
        var_2 = immutable_dict_1.__eq__(dict_0)
        list_0 = [str_1, str_1, str_1]
        var_3 = module_0.is_sequence(list_0)
        var_4 = immutable_dict_0.difference(set_0)
        var_5 = immutable_dict_1.difference(dict_1)
        dict_2 = {str_1: str_1}
        tuple_0 = ()
        str_2 = 'STA>`N<O +X} !,f'
        var_6 = module_0.is_sequence(str_2, dict_2)
        var_7 = module_0.is_string(tuple_0)
        var_8 = module_0.is_iterable(str_0)
        var_9 = immutable_dict_0.__len__()
        var_10 = immutable_dict_0.__iter__()
        var_11 = immutable_dict_1.__len__()
        var_12 = module_0.is_string(dict_2)
        var_13 = immutable_dict_0.__repr__()
        immutable_dict_2 = module_0.ImmutableDict(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\x0b*v0'
        int_0 = 1395
        var_0 = module_0.is_iterable(int_0)
        set_0 = set()
        bool_0 = False
        immutable_dict_0 = module_0.ImmutableDict()
        var_1 = immutable_dict_0.__eq__(bool_0)
        str_1 = '+>3jr`?{Af]5G^IvS'
        var_2 = immutable_dict_0.__repr__()
        str_2 = 'FDs\x0b(%Nf|0iWHS+E'
        dict_0 = {str_0: bool_0, str_0: immutable_dict_0, str_1: var_1, str_1: set_0, str_2: set_0, str_2: immutable_dict_0}
        dict_1 = {str_0: var_1}
        immutable_dict_1 = module_0.ImmutableDict(**dict_1)
        var_3 = immutable_dict_1.__eq__(dict_0)
        list_0 = [str_0, str_0, str_0]
        var_4 = module_0.is_sequence(list_0)
        var_5 = immutable_dict_0.difference(set_0)
        var_6 = immutable_dict_1.difference(dict_1)
        dict_2 = {str_0: str_0}
        tuple_0 = ()
        str_3 = 'STA>`N<O +X} !,f'
        var_7 = module_0.is_sequence(str_3, dict_2)
        var_8 = module_0.is_string(tuple_0)
        str_4 = 'Th4\x0cb'
        list_1 = [var_2, var_6]
        var_9 = immutable_dict_1.difference(list_1)
        var_10 = module_0.is_iterable(str_4)
        var_11 = immutable_dict_0.__len__()
        var_12 = immutable_dict_0.__iter__()
        var_13 = immutable_dict_1.__len__()
        var_14 = module_0.is_string(dict_2)
        var_15 = immutable_dict_0.__repr__()
        list_2 = []
        var_16 = immutable_dict_0.union(immutable_dict_0)
        immutable_dict_2 = module_0.ImmutableDict(*list_2)
        var_17 = immutable_dict_2.__getitem__(str_2)
    except BaseException:
        pass