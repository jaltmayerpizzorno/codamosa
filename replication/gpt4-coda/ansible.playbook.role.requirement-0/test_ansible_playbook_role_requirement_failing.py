# Automatically generated by Pynguin.
import ansible.playbook.role.requirement as module_0

def test_case_0():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.repo_url_to_role_name(role_requirement_0)
    except BaseException:
        pass

def test_case_1():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        dict_0 = {role_requirement_0: role_requirement_0, role_requirement_0: role_requirement_0}
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        var_1 = role_requirement_0.repo_url_to_role_name(role_requirement_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        dict_0 = None
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.scm_archive_role(set_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        dict_0 = {}
        var_0 = role_requirement_0.repo_url_to_role_name(dict_0)
        str_0 = "\n---\nmodule: slurp\nversion_added: historical\nshort_description: Slurps a file from remote nodes\ndescription:\n     - This module works like M(ansible.builtin.fetch). It is used for fetching a base64-\n       encoded blob containing the data in a remote file.\n     - This module is also supported for Windows targets.\noptions:\n  src:\n    description:\n      - The file on the remote system to fetch. This I(must) be a file, not a directory.\n    type: path\n    required: true\n    aliases: [ path ]\nextends_documentation_fragment:\n    - action_common_attributes\nattributes:\n  check_mode:\n    support: full\n  diff_mode:\n    support: none\n  platform:\n    platforms: posix, windows\nnotes:\n   - This module returns an 'in memory' base64 encoded version of the file, take\n     into account that this will require at least twice the RAM as the original file size.\nseealso:\n- module: ansible.builtin.fetch\nauthor:\n    - Ansible Core Team\n    - Michael DeHaan (@mpdehaan)\n"
        var_1 = role_requirement_0.role_yaml_parse(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        int_0 = 1738
        dict_0 = {}
        float_0 = -38.296579
        tuple_0 = (int_0, dict_0, float_0)
        var_0 = role_requirement_0.repo_url_to_role_name(tuple_0)
        var_1 = role_requirement_0.repo_url_to_role_name(dict_0)
        str_0 = 'o.\ri:Eep!@#'
        var_2 = role_requirement_0.role_yaml_parse(str_0)
        str_1 = ',hc2,'
        var_3 = role_requirement_0.role_yaml_parse(str_1)
        var_4 = role_requirement_0.role_yaml_parse(var_3)
        var_5 = role_requirement_0.role_yaml_parse(str_0)
        str_2 = ' \r@o|QVS[KQ\x0c@Pi+sIdA'
        var_6 = role_requirement_0.role_yaml_parse(str_2)
        set_0 = {role_requirement_0}
        var_7 = role_requirement_0.scm_archive_role(str_0, set_0, role_requirement_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ',Z,gmZ~@olfNAh\n-Esq+'
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.repo_url_to_role_name(str_0)
        str_1 = '9[Rpeq3kh3so &O'
        str_2 = "|iD'\\SsQ\rd"
        set_0 = set()
        tuple_0 = (role_requirement_0, str_1, str_2, set_0)
        int_0 = 1036
        var_1 = role_requirement_0.scm_archive_role(tuple_0, int_0)
    except BaseException:
        pass