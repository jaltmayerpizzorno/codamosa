# Automatically generated by Pynguin.
import ansible.executor.task_result as module_0

def test_case_0():
    try:
        bytes_0 = None
        str_0 = ' Wui#!RU`Ii`x,y>o30'
        task_result_0 = module_0.TaskResult(bytes_0, bytes_0, str_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        str_0 = '9}+c<@:PFs=j}'
        task_result_0 = module_0.TaskResult(bool_0, dict_0, str_0)
        var_0 = task_result_0.is_changed()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x8e"4\xf5B\x99Q\x81(`l\xe4\x0f~\xcb\t'
        str_0 = '^(-?\\d+)(b|k|m|g|t)?$'
        task_result_0 = module_0.TaskResult(bytes_0, str_0, str_0)
        var_0 = task_result_0.is_skipped()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x97\x8e\x85\xd1\x97\xbc\xa1'
        str_0 = 'Choose which plugin type (defaults to "module"). Available plugin types are : {0}'
        task_result_0 = module_0.TaskResult(bytes_0, bytes_0, str_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -850
        bytes_0 = None
        str_0 = ' Wui#!R`Ii`x,y>o30'
        task_result_0 = module_0.TaskResult(bytes_0, bytes_0, str_0)
        var_0 = task_result_0.needs_debugger(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'dummy_task'
        bool_0 = True
        str_1 = 'results'
        bool_1 = {str_1: bool_0}
        task_result_0 = module_0.TaskResult(str_1, str_0, bool_1)
        var_0 = task_result_0.is_skipped()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        str_0 = 'results'
        list_0 = [bool_0]
        bytes_0 = b"'}\xebj\x80"
        task_result_0 = module_0.TaskResult(list_0, bytes_0, str_0)
        var_0 = task_result_0.needs_debugger(str_0)
    except BaseException:
        pass