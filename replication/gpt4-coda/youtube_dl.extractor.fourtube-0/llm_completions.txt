

# Generated at 2024-03-18 09:09:43.096933
```python
    # Test case for the constructor of FourTubeIE
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertIsNotNone(ie._VALID_URL)
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:09:49.309250
```python
    def test_constructor(self):
        ie = FuxIE()
        self.assertEqual(ie.IE_NAME, 'fux')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?fux\.com/(?:video|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.fux.com/video/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.fux.com')
```

# Generated at 2024-03-18 09:09:55.648768
```python
    def test_constructor(self):
        ie = PornTubeIE()
        self.assertEqual(ie.IE_NAME, 'porntube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?porntube\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.porntube.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'tkn.porntube.com')
```

# Generated at 2024-03-18 09:10:00.615405
```python
    # Test case for the constructor of PornerBrosIE
    def test_constructor(self):
        ie = PornerBrosIE()
        self.assertEqual(ie.IE_NAME, 'pornerbros')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?pornerbros\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.pornerbros.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'token.pornerbros.com')
```

# Generated at 2024-03-18 09:10:07.581868
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the object has the attribute _VALID_URL
        self.assertTrue(hasattr(extractor, '_VALID_URL'))

        # Assert that the object has the attribute _URL_TEMPLATE
        self.assertTrue(hasattr(extractor, '_URL_TEMPLATE'))

        # Assert that the object has the attribute _TKN_HOST
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))

        # Assert that the object has the attribute _TESTS
        self.assertTrue(hasattr(extractor, '_TESTS'))
```

# Generated at 2024-03-18 09:10:14.866219
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the _TKN_HOST attribute is set correctly
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))
        self.assertIsNone(extractor._TKN_HOST)

        # Assert that the _URL_TEMPLATE attribute is set correctly
        self.assertTrue(hasattr(extractor, '_URL_TEMPLATE'))
        self.assertIsNone(extractor._URL_TEMPLATE)

        # Assert that the _VALID_URL attribute is set correctly
        self.assertTrue(hasattr(extractor, '_VALID_URL'))
        self.assertIsNone(extractor._VALID_URL)

        # Assert that the IE_NAME attribute is set correctly
        self.assertTrue(hasattr(extractor, 'IE_NAME

# Generated at 2024-03-18 09:10:22.801719
```python
    # Test case for the constructor of PornTubeIE
    def test_constructor(self):
        ie = PornTubeIE()
        self.assertEqual(ie.IE_NAME, 'porntube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?porntube\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.porntube.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'tkn.porntube.com')
```

# Generated at 2024-03-18 09:10:29.547007
```python
    # Test case for the constructor of FourTubeIE
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?4tube\.com/(?:videos|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:10:34.395808
```python
    def test_constructor(self):
        ie = FuxIE()
        self.assertEqual(ie.IE_NAME, 'fux')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?fux\.com/(?:video|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.fux.com/video/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.fux.com')
```

# Generated at 2024-03-18 09:10:42.614841
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the _TKN_HOST attribute is set correctly
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))
        self.assertEqual(extractor._TKN_HOST, 'token.4tube.com')

        # Assert that the _URL_TEMPLATE attribute is set correctly
        self.assertTrue(hasattr(extractor, '_URL_TEMPLATE'))
        self.assertEqual(extractor._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')

        # Assert that the _VALID_URL attribute is set correctly
        self.assertTrue(hasattr(extractor, '_VALID_URL'))
        self.assertIsNotNone(extractor._VALID_URL)
```

# Generated at 2024-03-18 09:11:18.775661
```python
    ie = PornerBrosIE()
    assert ie.IE_NAME == 'pornerbros'
    assert ie._VALID_URL == r'https?://(?:(?P<kind>www|m)\.)?pornerbros\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)'
    assert ie._URL_TEMPLATE == 'https://www.pornerbros.com/videos/video_%s'
    assert ie._TKN_HOST == 'token.pornerbros.com'
    assert 'url' in ie._TESTS[0]
    assert 'md5' in ie._TESTS[0]
    assert 'info_dict' in ie._TESTS[0]
    assert 'id' in ie._TESTS[0]['info_dict']
    assert 'ext' in ie._TESTS[0]['info_dict']
    assert 'title' in ie._TEST

# Generated at 2024-03-18 09:11:23.118574
```python
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?4tube\.com/(?:videos|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:11:28.852846
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the _TKN_HOST attribute is set correctly
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))
        self.assertIsNone(extractor._TKN_HOST)  # Assuming _TKN_HOST should be None by default

        # Assert that the _URL_TEMPLATE attribute is set correctly
        self.assertTrue(hasattr(extractor, '_URL_TEMPLATE'))
        self.assertIsNone(extractor._URL_TEMPLATE)  # Assuming _URL_TEMPLATE should be None by default
```

# Generated at 2024-03-18 09:11:34.893142
```python
    def test_constructor(self):
        ie = FuxIE()
        self.assertEqual(ie.IE_NAME, 'fux')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?fux\.com/(?:video|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.fux.com/video/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.fux.com')
```

# Generated at 2024-03-18 09:11:41.124927
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the _TKN_HOST attribute is set correctly
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))
        self.assertIsNone(extractor._TKN_HOST)

        # Assert that the _URL_TEMPLATE attribute is set correctly
        self.assertTrue(hasattr(extractor, '_URL_TEMPLATE'))
        self.assertIsNone(extractor._URL_TEMPLATE)

        # Assert that the _VALID_URL attribute is set correctly
        self.assertTrue(hasattr(extractor, '_VALID_URL'))
        self.assertIsNone(extractor._VALID_URL)
```

# Generated at 2024-03-18 09:11:48.176424
```python
    # Test case for the constructor of PornerBrosIE
    def test_constructor(self):
        ie = PornerBrosIE()
        self.assertEqual(ie.IE_NAME, 'pornerbros')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?pornerbros\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.pornerbros.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'token.pornerbros.com')
```

# Generated at 2024-03-18 09:11:54.937780
```python
    # Test case for the constructor of PornTubeIE
    def test_constructor(self):
        ie = PornTubeIE()
        self.assertEqual(ie.IE_NAME, 'porntube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?porntube\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.porntube.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'tkn.porntube.com')
```

# Generated at 2024-03-18 09:12:01.635729
```python
    def test_FuxIE_constructor(self):
        # Create an instance of the FuxIE class
        extractor = FuxIE()

        # Assert _VALID_URL pattern matches the expected URL format
        self.assertTrue(re.match(extractor._VALID_URL, 'https://www.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow'))
        self.assertTrue(re.match(extractor._VALID_URL, 'https://www.fux.com/embed/195359'))
        self.assertTrue(re.match(extractor._VALID_URL, 'https://m.fux.com/video/195359/awesome-fucking-kitchen-ends-cum-swallow'))

        # Assert _URL_TEMPLATE is correct
        self.assertEqual(extractor._URL_TEMPLATE, 'https://www.fux.com/video/%s/video')

        # Assert _TKN_HOST is correct
        self.assertEqual(extractor._TKN_HOST, 'token.fux.com')

        # Assert IE_NAME is correct

# Generated at 2024-03-18 09:12:07.386801
```python
    def test_constructor(self):
        ie = FuxIE()
        self.assertEqual(ie.IE_NAME, 'fux')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?fux\.com/(?:video|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.fux.com/video/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.fux.com')
```

# Generated at 2024-03-18 09:12:12.153706
```python
    def test_constructor(self):
        ie = PornTubeIE()
        self.assertEqual(ie.IE_NAME, 'porntube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?porntube\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.porntube.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'tkn.porntube.com')
```

# Generated at 2024-03-18 09:13:14.917150
```python
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?4tube\.com/(?:videos|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:13:24.069466
```python
    ie = PornerBrosIE()
    assert ie.IE_NAME == 'pornerbros'
    assert ie._VALID_URL == r'https?://(?:(?P<kind>www|m)\.)?pornerbros\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)'
    assert ie._URL_TEMPLATE == 'https://www.pornerbros.com/videos/video_%s'
    assert ie._TKN_HOST == 'token.pornerbros.com'
    assert 'url' in ie._TESTS[0]
    assert 'md5' in ie._TESTS[0]
    assert 'info_dict' in ie._TESTS[0]
    assert 'id' in ie._TESTS[0]['info_dict']
    assert 'ext' in ie._TESTS[0]['info_dict']
    assert 'title' in ie._TEST

# Generated at 2024-03-18 09:13:28.221091
```python
    def test_constructor(self):
        ie = FuxIE()
        self.assertEqual(ie.IE_NAME, 'fux')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?fux\.com/(?:video|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.fux.com/video/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.fux.com')
```

# Generated at 2024-03-18 09:13:33.721681
```python
    # Test case for the constructor of PornTubeIE
    def test_constructor(self):
        ie = PornTubeIE()
        self.assertEqual(ie.IE_NAME, 'porntube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?porntube\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.porntube.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'tkn.porntube.com')
```

# Generated at 2024-03-18 09:13:38.098190
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the object has the attribute _TKN_HOST
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))

        # Assert that the _TKN_HOST attribute is not empty
        self.assertTrue(getattr(extractor, '_TKN_HOST'))
```

# Generated at 2024-03-18 09:13:42.175661
```python
    # Test case for the constructor of FourTubeIE
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?4tube\.com/(?:videos|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:13:46.544654
```python
    # Test case for the constructor of PornerBrosIE
    def test_constructor(self):
        ie = PornerBrosIE()
        self.assertEqual(ie.IE_NAME, 'pornerbros')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?pornerbros\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.pornerbros.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'token.pornerbros.com')
```

# Generated at 2024-03-18 09:13:57.442630
```python
    # Unit test for constructor of class PornerBrosIE
    def test_PornerBrosIE_constructor():
        ie = PornerBrosIE()
        assert ie.IE_NAME == 'pornerbros'
        assert ie._VALID_URL == r'https?://(?:(?P<kind>www|m)\.)?pornerbros\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)'
        assert ie._URL_TEMPLATE == 'https://www.pornerbros.com/videos/video_%s'
        assert ie._TKN_HOST == 'token.pornerbros.com'
        assert 'url' in ie._TESTS[0]
        assert 'md5' in ie._TESTS[0]
        assert 'info_dict' in ie._TESTS[0]
        assert 'params' in ie._TESTS[0]
        assert ie

# Generated at 2024-03-18 09:14:02.795873
```python
    # Test case for the constructor of FourTubeIE
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?4tube\.com/(?:videos|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:14:09.110463
```python
    # Test case for the constructor of FourTubeIE
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?4tube\.com/(?:videos|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:16:12.768255
```python
    # Test case for the constructor of FourTubeIE
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?4tube\.com/(?:videos|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:16:20.819660
```python
    def test_constructor(self):
        ie = FuxIE()
        self.assertEqual(ie.IE_NAME, 'fux')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?fux\.com/(?:video|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.fux.com/video/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.fux.com')
```

# Generated at 2024-03-18 09:16:27.338265
```python
    ie = PornTubeIE()

    assert ie.IE_NAME == 'porntube'
    assert ie._VALID_URL == r'https?://(?:(?P<kind>www|m)\.)?porntube\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)'
    assert ie._URL_TEMPLATE == 'https://www.porntube.com/videos/video_%s'
    assert ie._TKN_HOST == 'tkn.porntube.com'
    assert 'url' in ie._TESTS[0]
    assert 'info_dict' in ie._TESTS[0]
    assert 'params' in ie._TESTS[0]
    assert 'only_matching' in ie._TESTS[1]
```

# Generated at 2024-03-18 09:16:33.614562
```python
    # Test case for the constructor of FourTubeIE
    def test_constructor(self):
        ie = FourTubeIE()
        self.assertEqual(ie.IE_NAME, '4tube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?4tube\.com/(?:videos|embed)/(?P<id>\d+)(?:/(?P<display_id>[^/?#&]+))?')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.4tube.com/videos/%s/video')
        self.assertEqual(ie._TKN_HOST, 'token.4tube.com')
```

# Generated at 2024-03-18 09:16:40.824109
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the required attributes are present
        self.assertTrue(hasattr(extractor, '_VALID_URL'))
        self.assertTrue(hasattr(extractor, '_URL_TEMPLATE'))
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))
```

# Generated at 2024-03-18 09:16:47.193808
```python
    # Test case for the constructor of PornTubeIE
    def test_constructor(self):
        ie = PornTubeIE()
        self.assertEqual(ie.IE_NAME, 'porntube')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?porntube\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.porntube.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'tkn.porntube.com')
```

# Generated at 2024-03-18 09:16:55.744141
```python
    # Test case for the constructor of PornerBrosIE
    def test_constructor(self):
        ie = PornerBrosIE()
        self.assertEqual(ie.IE_NAME, 'pornerbros')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?pornerbros\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.pornerbros.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'token.pornerbros.com')
```

# Generated at 2024-03-18 09:17:02.281683
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the _TKN_HOST attribute is set correctly
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))
        self.assertIsNone(extractor._TKN_HOST)

        # Assert that the _URL_TEMPLATE attribute is set correctly
        self.assertTrue(hasattr(extractor, '_URL_TEMPLATE'))
        self.assertIsNone(extractor._URL_TEMPLATE)

        # Assert that the _VALID_URL attribute is set correctly
        self.assertTrue(hasattr(extractor, '_VALID_URL'))
        self.assertIsNone(extractor._VALID_URL)
```

# Generated at 2024-03-18 09:17:08.465714
```python
    # Test case for PornerBrosIE constructor
    def test_constructor(self):
        ie = PornerBrosIE()
        self.assertEqual(ie.IE_NAME, 'pornerbros')
        self.assertEqual(ie._VALID_URL, r'https?://(?:(?P<kind>www|m)\.)?pornerbros\.com/(?:videos/(?P<display_id>[^/]+)_|embed/)(?P<id>\d+)')
        self.assertEqual(ie._URL_TEMPLATE, 'https://www.pornerbros.com/videos/video_%s')
        self.assertEqual(ie._TKN_HOST, 'token.pornerbros.com')
```

# Generated at 2024-03-18 09:17:13.866480
```python
    # Test case for the constructor of FourTubeBaseIE
    def test_constructor(self):
        # Create an instance of the FourTubeBaseIE class
        extractor = FourTubeBaseIE()

        # Assert that the object is an instance of FourTubeBaseIE
        self.assertIsInstance(extractor, FourTubeBaseIE)

        # Assert that the object has the attribute _VALID_URL
        self.assertTrue(hasattr(extractor, '_VALID_URL'))

        # Assert that the object has the attribute _URL_TEMPLATE
        self.assertTrue(hasattr(extractor, '_URL_TEMPLATE'))

        # Assert that the object has the attribute _TKN_HOST
        self.assertTrue(hasattr(extractor, '_TKN_HOST'))

        # Assert that the object has the attribute _TESTS
        self.assertTrue(hasattr(extractor, '_TESTS'))
```