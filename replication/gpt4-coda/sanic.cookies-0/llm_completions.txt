

# Generated at 2024-03-18 07:28:14.489142
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert headers.get('Set-Cookie') == 'test_cookie="test_value"; Path=/'

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

# Generated at 2024-03-18 07:28:21.846875
    headers = MultiHeader()
    cookie_jar = CookieJar(headers)

    # Add a cookie to the jar
    cookie_jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in cookie_jar
    assert headers.get('Set-Cookie') == 'test_cookie="test_value"; Path=/'

    # Delete the cookie
    del cookie_jar['test_cookie']
    assert 'test_cookie' not in cookie_jar
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del cookie_jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

    # Add a cookie with a max-age of 0 to simulate immediate expiry
    cookie_jar['expired_cookie'] = 'expired_value'
    cookie_jar['expired_cookie']['max-age'] = 0


# Generated at 2024-03-18 07:28:31.284034
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:28:40.066666
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age to a non-integer should raise ValueError"
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set correctly

# Generated at 2024-03-18 07:28:47.617514
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set

# Generated at 2024-03-18 07:28:55.346932
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
    except ValueError as e:
        assert str(e) == "Cookie max-age must be an integer", "max-age should be an integer."

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be

# Generated at 2024-03-18 07:29:01.025727
    headers = MultiHeader()
    cookie_jar = CookieJar(headers)

    # Test setting a new cookie
    cookie_jar["test_cookie"] = "test_value"
    assert "test_cookie" in cookie_jar
    assert cookie_jar["test_cookie"].value == "test_value"
    assert headers.get("Set-Cookie") == "test_cookie=test_value; Path=/"

    # Test updating an existing cookie
    cookie_jar["test_cookie"] = "new_value"
    assert cookie_jar["test_cookie"].value == "new_value"
    assert headers.get("Set-Cookie") == "test_cookie=new_value; Path=/"

    # Test setting a cookie with illegal characters in key
    try:
        cookie_jar["illegal;cookie"] = "value"
        assert False, "Expected an exception for illegal cookie name"
    except KeyError:
        pass

    # Test setting a cookie with reserved key
    try:
        cookie_j

# Generated at 2024-03-18 07:29:09.484264
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
    except ValueError as e:
        assert str(e) == "Cookie max-age must be an integer", "max-age should only accept integers."

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The

# Generated at 2024-03-18 07:29:15.488286
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert headers.get_all('Set-Cookie') == ['test_cookie="test_value"; Path=/']

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert headers.get_all('Set-Cookie') == []

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

    print("test_CookieJar___delitem__ passed.")

# Generated at 2024-03-18 07:29:48.359772


# Generated at 2024-03-18 07:30:02.164932
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age to a non-integer should raise ValueError"
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set correctly

# Generated at 2024-03-18 07:30:10.064924
    headers = MultiHeader()
    cookie_jar = CookieJar(headers)

    # Add a cookie to the jar
    cookie_jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in cookie_jar
    assert headers.get('Set-Cookie') == 'test_cookie="test_value"; Path=/'

    # Delete the cookie
    del cookie_jar['test_cookie']
    assert 'test_cookie' not in cookie_jar
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del cookie_jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise a KeyError"

    # Add a cookie with a max-age of 0 (should be treated as a deletion)
    cookie_jar['test_cookie'] = 'test_value'
    cookie_jar['test_cookie']['max-age']

# Generated at 2024-03-18 07:30:15.769720
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert headers.get_all('Set-Cookie') == ['test_cookie="test_value"; Path=/']

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert headers.get_all('Set-Cookie') == []

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise a KeyError"

    print("test_CookieJar___delitem__ passed.")

# Generated at 2024-03-18 07:30:23.303858
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age to a non-integer value should raise ValueError"
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set correctly."

   

# Generated at 2024-03-18 07:30:33.396816
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert 'test_cookie' in jar.cookie_headers
    assert headers.get('Set-Cookie') == 'test_cookie="test_value"; Path=/'

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert 'test_cookie' not in jar.cookie_headers
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

    print("All tests passed for __delitem__ method of CookieJar.")

# Generated at 2024-03-18 07:30:39.469095
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/some/path"
    assert str(cookie) == "test=value; Path=/some/path"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/some/path; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/some/path; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:30:46.614221
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert 'test_cookie' in jar.cookie_headers
    assert headers.get('Set-Cookie') == 'test_cookie="test_value"; Path=/'

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert 'test_cookie' not in jar.cookie_headers
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

    print("test_CookieJar___delitem__ passed.")

# Generated at 2024-03-18 07:30:54.734304
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set

# Generated at 2024-03-18 07:31:02.118225
    # Test with only key and value
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age as integer
    cookie["max-age"] = 3600
    assert "Max-Age=3600" in str(cookie)

    # Test with max-age as string
    cookie["max-age"] = "3600"
    assert "Max-Age=3600" in str(cookie)

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert "expires=Sun, 01-Jan-2023 12:00:00 GMT" in str(cookie)

    # Test with secure flag
   

# Generated at 2024-03-18 07:31:12.802133
    headers = MultiHeader()
    cookie_jar = CookieJar(headers)

    # Add a cookie to the jar
    cookie_jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in cookie_jar
    assert headers.get('Set-Cookie') == 'test_cookie="test_value"; Path=/'

    # Delete the cookie
    del cookie_jar['test_cookie']
    assert 'test_cookie' not in cookie_jar
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del cookie_jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise a KeyError"

    # Add a cookie with a max-age and then delete it
    cookie_jar['max_age_cookie'] = 'value'
    cookie_jar['max_age_cookie']['max-age'] = 3600


# Generated at 2024-03-18 07:31:26.472150
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/some/path"
    assert str(cookie) == "test=value; Path=/some/path"

    # Test with all properties
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    cookie["max-age"] = 3600
    cookie["domain"] = "example.com"
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Strict"
    expected = (
        "test=value; Expires=Sun, 01-Jan-2023 12:00:00 GMT; Max-Age=3600; "
        "Domain=example.com; Path=/some/path; Secure; HttpOnly;

# Generated at 2024-03-18 07:31:35.429449
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/some/path"
    assert str(cookie) == "test=value; Path=/some/path"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/some/path; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/some/path; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:31:43.003870
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:31:50.605155
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
    except ValueError as e:
        assert str(e) == "Cookie max-age must be an integer", "max-age should only accept integers."

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be

# Generated at 2024-03-18 07:31:59.613580
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
    except ValueError as e:
        assert str(e) == "Cookie max-age must be an integer", "max-age should only accept integers."

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be

# Generated at 2024-03-18 07:32:11.407285
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/some/path"
    assert str(cookie) == "test=value; Path=/some/path"

    # Test with all properties
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    cookie["max-age"] = 3600
    cookie["domain"] = "example.com"
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Strict"
    expected_output = (
        "test=value; Expires=Sun, 01-Jan-2023 12:00:00 GMT; Max-Age=3600; "
        "Domain=example.com; Path=/some/path; Secure; HttpOnly

# Generated at 2024-03-18 07:32:20.505687
    # Setup
    headers = MultiHeader()
    jar = CookieJar(headers)
    jar['test_cookie'] = 'test_value'
    jar['another_cookie'] = 'another_value'

    # Test deletion of existing cookie
    assert 'test_cookie' in jar
    assert 'test_cookie' in jar.cookie_headers
    assert jar.headers.get('Set-Cookie') is not None

    del jar['test_cookie']

    assert 'test_cookie' not in jar
    assert 'test_cookie' not in jar.cookie_headers
    assert jar.headers.get('Set-Cookie') is not None

    # Test deletion of non-existing cookie (should not raise an error)
    try:
        del jar['non_existing_cookie']
    except KeyError:
        assert False, "Deleting a non-existing cookie should not raise KeyError"

    # Test that other cookies are not affected
    assert 'another_cookie' in jar
    assert 'another_cookie' in jar.cookie_headers
   

# Generated at 2024-03-18 07:32:30.211691
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set

# Generated at 2024-03-18 07:32:39.978626
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age as an integer
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with max-age as a string that represents an integer
    cookie["max-age"] = "3600"
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with expires as a datetime
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str

# Generated at 2024-03-18 07:32:49.499970
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/some/path"
    assert str(cookie) == "test=value; Path=/some/path"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/some/path; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/some/path; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:33:07.200936
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age to a non-integer should raise ValueError"
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set correctly

# Generated at 2024-03-18 07:33:16.033547
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
    except ValueError as e:
        assert str(e) == "Cookie max-age must be an integer", "max-age should only accept integers."

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be

# Generated at 2024-03-18 07:33:23.416066
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set correctly

# Generated at 2024-03-18 07:33:33.691307
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set

# Generated at 2024-03-18 07:33:41.855129
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age to a non-integer should raise ValueError"
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set correctly

# Generated at 2024-03-18 07:33:49.042938
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:33:56.275829
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert headers.get('Set-Cookie') == 'test_cookie=test_value; Path=/'

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

    print("All tests passed for __delitem__ method of CookieJar.")

# Generated at 2024-03-18 07:34:02.481042
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:34:09.015177
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set

# Generated at 2024-03-18 07:34:16.872727
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Test setting a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert headers.get("Set-Cookie") == "test_cookie=test_value; Path=/"

    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert headers.get("Set-Cookie") == "test_cookie=new_value; Path=/"

    # Test setting a cookie with a reserved key
    try:
        jar["expires"] = "value"
    except KeyError:
        pass
    else:
        assert False, "Should not allow setting a cookie with a reserved key"

    # Test setting a cookie with illegal characters in key
    try:
        jar["illegal;cookie"] = "value"
   

# Generated at 2024-03-18 07:34:41.278614
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/some/path"
    assert str(cookie) == "test=value; Path=/some/path"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/some/path; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/some/path; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:34:47.869564
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert 'test_cookie' in jar.cookie_headers
    assert headers.get('Set-Cookie') == 'test_cookie=test_value; Path=/'

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert 'test_cookie' not in jar.cookie_headers
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise a KeyError"

# Generated at 2024-03-18 07:34:52.698191
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert headers.get_all('Set-Cookie') == ['test_cookie=test_value; Path=/']

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert headers.get_all('Set-Cookie') == []

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

    print("test_CookieJar___delitem__ passed.")

# Generated at 2024-03-18 07:34:58.944789
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
    except ValueError as e:
        assert str(e) == "Cookie max-age must be an integer", "max-age should only accept integers."

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be

# Generated at 2024-03-18 07:35:06.814894
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set

# Generated at 2024-03-18 07:35:12.674237
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:35:21.762772
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:35:30.356620
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set correctly."

   

# Generated at 2024-03-18 07:35:34.708266
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert headers.get_all('Set-Cookie') == ['test_cookie=test_value; Path=/']

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert headers.get_all('Set-Cookie') == []

    # Try deleting a non-existent cookie, should not raise an error
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

    print("All tests passed for __delitem__ method of CookieJar.")

# Generated at 2024-03-18 07:35:42.211773
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Test setting a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert headers.get("Set-Cookie") == "test_cookie=test_value; Path=/"

    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert headers.get("Set-Cookie") == "test_cookie=new_value; Path=/"

    # Test setting a cookie with illegal characters in key
    try:
        jar["bad cookie"] = "value"
    except KeyError:
        pass
    else:
        assert False, "Cookie with illegal characters in key should raise KeyError"

    # Test setting a cookie with reserved key
    try:
        jar["expires"] = "value"
    except KeyError:


# Generated at 2024-03-18 07:36:27.672485
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Test setting a new cookie
    jar["test_cookie"] = "test_value"
    assert "test_cookie" in jar
    assert jar["test_cookie"].value == "test_value"
    assert headers.get("Set-Cookie") == "test_cookie=test_value; Path=/"

    # Test updating an existing cookie
    jar["test_cookie"] = "new_value"
    assert jar["test_cookie"].value == "new_value"
    assert headers.get("Set-Cookie") == "test_cookie=new_value; Path=/"

    # Test setting a cookie with illegal characters in key
    try:
        jar["bad cookie"] = "value"
    except KeyError:
        pass
    else:
        assert False, "Cookie with illegal characters in key should raise KeyError"

    # Test setting a cookie with reserved key
    try:
        jar["expires"] = "value"
    except KeyError:


# Generated at 2024-03-18 07:36:33.619794
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert headers.get('Set-Cookie') == 'test_cookie="test_value"; Path=/'

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert headers.get('Set-Cookie') is None

    # Try deleting a non-existent cookie (should not raise an error)
    try:
        del jar['non_existent_cookie']
    except KeyError:
        assert False, "Deleting a non-existent cookie should not raise KeyError"

# Generated at 2024-03-18 07:36:41.757029
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age to a non-integer should raise ValueError"
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set correctly

# Generated at 2024-03-18 07:36:49.358363
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age
    cookie["max-age"] = 3600
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600"

    # Test with expires
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert str(cookie) == "test=value; Path=/testpath; Max-Age=3600; Expires=Sun, 01-Jan-2023 12:00:00 GMT"

    # Test with secure flag
    cookie["secure"] = True
   

# Generated at 2024-03-18 07:36:57.933195
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with all properties
    cookie["expires"] = datetime(2023, 1, 1, 12, 0, 0)
    cookie["max-age"] = 3600
    cookie["domain"] = "example.com"
    cookie["secure"] = True
    cookie["httponly"] = True
    cookie["samesite"] = "Strict"
    expected = (
        "test=value; Expires=Sun, 01-Jan-2023 12:00:00 GMT; Max-Age=3600; "
        "Domain=example.com; Path=/testpath; Secure; HttpOnly;

# Generated at 2024-03-18 07:37:05.154087
```python
    # Test setting a valid key-value pair
    cookie = Cookie("test_cookie", "test_value")
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set correctly."

    # Test setting a valid max-age
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set correctly."

    # Test setting an invalid max-age
    try:
        cookie["max-age"] = "invalid"
        assert False, "Setting max-age with a non-integer value should raise ValueError."
    except ValueError:
        pass

    # Test setting a valid expires datetime
    expires_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_time
    assert cookie["expires"] == expires_time, "The expires should be set

# Generated at 2024-03-18 07:37:13.013883
    # Create a Cookie instance with a valid key and value
    cookie = Cookie("test_cookie", "test_value")

    # Set a valid path
    cookie["path"] = "/test_path"
    assert cookie["path"] == "/test_path", "The path should be set to /test_path"

    # Set a valid domain
    cookie["domain"] = "example.com"
    assert cookie["domain"] == "example.com", "The domain should be set to example.com"

    # Set a valid max-age as an integer
    cookie["max-age"] = 3600
    assert cookie["max-age"] == 3600, "The max-age should be set to 3600"

    # Set a valid expires date
    expires_date = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expires_date
    assert cookie["expires"] == expires_date, "

# Generated at 2024-03-18 07:37:19.070062
```python
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert 'test_cookie' in jar.cookie_headers
    assert headers.get('Set-Cookie') == 'test_cookie="test_value"; Path=/'

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert 'test_cookie' not in jar.cookie_headers
    assert headers.get('Set-Cookie') is None
```

# Generated at 2024-03-18 07:37:24.978495
```python
    # Test with a simple key-value pair
    cookie = Cookie("test", "value")
    assert str(cookie) == "test=value"

    # Test with a path
    cookie["path"] = "/testpath"
    assert str(cookie) == "test=value; Path=/testpath"

    # Test with max-age as an integer
    cookie["max-age"] = 3600
    assert "Max-Age=3600" in str(cookie)

    # Test with max-age as a string that represents an integer
    cookie["max-age"] = "3600"
    assert "Max-Age=3600" in str(cookie)

    # Test with expires as a datetime
    expire_time = datetime(2023, 1, 1, 12, 0, 0)
    cookie["expires"] = expire_time
    assert "expires=Sun, 01-Jan-2023 12:00:00

# Generated at 2024-03-18 07:37:29.954048
```python
    headers = MultiHeader()
    jar = CookieJar(headers)

    # Add a cookie to the jar
    jar['test_cookie'] = 'test_value'
    assert 'test_cookie' in jar
    assert headers.get('Set-Cookie') == 'test_cookie=test_value; Path=/'

    # Delete the cookie
    del jar['test_cookie']
    assert 'test_cookie' not in jar
    assert headers.get('Set-Cookie') is None
```