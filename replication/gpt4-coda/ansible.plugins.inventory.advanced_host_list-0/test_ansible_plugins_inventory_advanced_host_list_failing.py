# Automatically generated by Pynguin.
import ansible.plugins.inventory.advanced_host_list as module_0

def test_case_0():
    try:
        inventory_module_0 = module_0.InventoryModule()
        tuple_0 = ()
        var_0 = inventory_module_0.parse(tuple_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        str_0 = "\noptions:\n  validate:\n    description:\n    - The validation command to run before copying the updated file into the final destination.\n    - A temporary file path is used to validate, passd in through '%s' which must be present as in the examples below.\n    - Also, the command is passed securely so shell features such as expansion and pipes will not work.\n    - For an example on how to handle more complex validation than what this option provides,\n      see L(Complex configuration validation,https://docs.ansible.com/ansible/devel/reference_appendices/faq.html).\n    type: str\n"
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.parse(inventory_module_0, int_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'e3gEcerM.KY9<^3(1_'
        set_0 = None
        str_1 = 'Plugin configuration TOML file, not TOML inventory'
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.verify_file(str_1)
        inventory_module_1 = module_0.InventoryModule()
        var_1 = inventory_module_1.parse(str_0, set_0, str_1, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        str_0 = 'w['
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.parse(inventory_module_0, int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'e3gEcerM.KY9<^3(1_'
        set_0 = None
        str_1 = '/'
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.verify_file(str_1)
        str_2 = '\nrC1</(6%&zf'
        var_1 = inventory_module_0.parse(str_0, set_0, str_2, str_2)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = None
        str_0 = ',|6^L-.s]{rtr xU'
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.parse(inventory_module_0, int_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'e3gEcerM.KY9<^3(1_'
        set_0 = None
        str_1 = 'trz\x0c1M#,Ze,s5A~7'
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.verify_file(str_1)
        str_2 = ''
        inventory_module_1 = module_0.InventoryModule()
        var_1 = inventory_module_1.parse(str_0, set_0, str_2, str_2)
        inventory_module_2 = module_0.InventoryModule()
        inventory_module_3 = module_0.InventoryModule()
        str_3 = 'Tower'
        bytes_0 = b'\xfb\x84h\x91fn\xcf\x0fE\xc5b\xd3\x06\x84'
        var_2 = inventory_module_3.parse(str_3, set_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = None
        str_0 = '(?s)PLATFORM[\\r\\n]+(.*)FOUND(.*)ENDFOUND'
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.parse(inventory_module_0, int_0, str_0)
    except BaseException:
        pass