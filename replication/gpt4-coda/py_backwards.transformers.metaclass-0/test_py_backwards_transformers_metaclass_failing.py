# Automatically generated by Pynguin.
import py_backwards.transformers.metaclass as module_0
import typed_ast._ast3 as module_1

def test_case_0():
    try:
        metaclass_transformer_0 = module_0.MetaclassTransformer()
    except BaseException:
        pass

def test_case_1():
    try:
        module_x_var_0 = module_1.Module()
        str_0 = 'Prepends module with:\n        from __future__ import absolute_import\n        from __future__ import division\n        from __future__ import print_function\n        from __future__ import unicode_literals\n            \n    '
        str_1 = ''
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
        a_s_t_0 = module_1.AST(**dict_0)
        metaclass_transformer_0 = module_0.MetaclassTransformer(a_s_t_0)
        module_x_var_1 = metaclass_transformer_0.visit_Module(module_x_var_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\tDy'
        dict_0 = {str_0: str_0}
        list_0 = [dict_0, str_0, dict_0]
        class_def_0 = module_1.ClassDef(*list_0)
        a_s_t_0 = module_1.AST()
        metaclass_transformer_0 = module_0.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        class_def_0 = module_1.ClassDef(*list_0)
        a_s_t_0 = module_1.AST()
        metaclass_transformer_0 = module_0.MetaclassTransformer(a_s_t_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        list_1 = [list_0]
        module_x_var_0 = module_1.Module(*list_1)
        str_0 = ';>wex\x0cb!2LsRP`'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        a_s_t_0 = module_1.AST(**dict_0)
        metaclass_transformer_0 = module_0.MetaclassTransformer(a_s_t_0)
        module_x_var_1 = metaclass_transformer_0.visit_Module(module_x_var_0)
        str_1 = '\x0cj=BU\\;`wN^D"=\\'
        dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
        a_s_t_1 = module_1.AST(**dict_1)
        metaclass_transformer_1 = module_0.MetaclassTransformer(a_s_t_1)
        module_x_var_2 = metaclass_transformer_1.visit_Module(module_x_var_1)
        metaclass_transformer_2 = module_0.MetaclassTransformer()
    except BaseException:
        pass