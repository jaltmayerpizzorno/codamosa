# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.json_schema as module_1
import typesystem.fields as module_2

def test_case_0():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'one_of'
        bool_0 = None
        field_0 = module_1.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.from_json_schema(dict_0)
        iterator_0 = schema_definitions_0.__iter__()
        field_1 = module_1.enum_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ongo'
        float_0 = -2256.214
        dict_0 = {str_0: float_0}
        field_0 = module_1.from_json_schema(dict_0)
        tuple_0 = module_1.get_valid_types(dict_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_1 = module_1.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        dict_1 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_1)
        field_0 = module_1.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x19\xfc\xf8\xcc\xf9\xc1\x927\xd9\x96\xa6\xd9g\xba\xcb\xb7+'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'C$'
        float_0 = -2291.7532804160273
        dict_0 = {str_0: float_0}
        field_0 = module_1.from_json_schema(dict_0)
        schema_definitions_0 = None
        field_1 = module_1.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'invalid_key'
        dict_0 = {str_0: str_0, str_0: str_0}
        tuple_0 = module_1.get_valid_types(dict_0)
        float_0 = 2256.27
        tuple_1 = module_1.get_valid_types(dict_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.from_json_schema(dict_0, schema_definitions_0)
        dict_1 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
        tuple_2 = module_1.get_valid_types(dict_1)
        tuple_3 = module_1.get_valid_types(dict_1)
        field_1 = module_1.if_then_else_from_json_schema(dict_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'pyMH\rt>}'
        field_0 = module_2.Field(title=str_0, default=str_0)
        dict_0 = {field_0: str_0}
        var_0 = module_1.to_json_schema(field_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        field_0 = None
        var_0 = module_1.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_9():
    try:
        field_0 = None
        dict_0 = module_1.get_standard_properties(field_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.from_json_schema(dict_0, schema_definitions_0)
        field_1 = module_1.all_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'oneOf'
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.one_of_from_json_schema(dict_0, schema_definitions_0)
        str_1 = 'number'
        schema_definitions_0.__delitem__(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'allOf'
        str_1 = 'type'
        str_2 = 'minLength'
        str_3 = 'string'
        int_0 = 2
        var_0 = {str_1: str_3, str_2: int_0}
        dict_0 = {str_0: var_0}
        field_0 = module_1.from_json_schema(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'not'
        str_1 = 'type'
        str_2 = 'enum'
        str_3 = 'string'
        str_4 = 'forbidden_value'
        str_5 = [str_4]
        str_6 = {str_1: str_3, str_2: str_5}
        str_7 = {str_0: str_6}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.not_from_json_schema(str_7, schema_definitions_0)
        var_0 = field_0.negated
        field_1 = module_1.not_from_json_schema(str_1, schema_definitions_0)
    except BaseException:
        pass