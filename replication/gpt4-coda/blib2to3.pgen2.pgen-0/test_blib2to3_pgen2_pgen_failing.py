# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        n_f_a_state_0 = module_0.NFAState()
        str_0 = '}i@\\(0>O*l\x0cB6y6V'
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_2: n_f_a_state_2, n_f_a_state_2: n_f_a_state_1, n_f_a_state_2: n_f_a_state_2}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_2)
        dict_2 = {n_f_a_state_1: n_f_a_state_1}
        parser_generator_0 = module_0.ParserGenerator(str_0, dict_2)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{h\n5I{\\v=:-I'
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_0)
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_3():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = None
        n_f_a_state_0.addarc(n_f_a_state_1)
    except BaseException:
        pass

def test_case_4():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_2 = module_0.NFAState()
        str_0 = 'JcYC!W/,\tna8-WMel'
        n_f_a_state_3 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1)
        n_f_a_state_4 = None
        n_f_a_state_5 = module_0.NFAState()
        n_f_a_state_2.addarc(n_f_a_state_5, str_0)
        dict_0 = {n_f_a_state_4: str_0, n_f_a_state_4: n_f_a_state_4}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_4)
    except BaseException:
        pass

def test_case_5():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'unknown encoding: '
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        n_f_a_state_2 = module_0.NFAState()
        str_1 = "Prepare for parsing.\n\n        This *must* be called before starting to parse.\n\n        The optional argument is an alternative start symbol; it\n        defaults to the grammar's start symbol.\n\n        You can use a Parser instance to parse any number of programs;\n        each time you call setup() the parser is reset to an initial\n        state determined by the (implicit or explicit) start symbol.\n\n        "
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
        n_f_a_state_2.addarc(n_f_a_state_0, str_1)
        dict_1 = {n_f_a_state_2: n_f_a_state_2, n_f_a_state_2: n_f_a_state_2, n_f_a_state_2: n_f_a_state_2}
        n_f_a_state_1.addarc(n_f_a_state_2)
        n_f_a_state_3 = module_0.NFAState()
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_3)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_0)
        str_2 = ',2LAIh'
        parser_generator_0 = module_0.ParserGenerator(str_1, str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        n_f_a_state_0 = module_0.NFAState()
        str_0 = "gW'6Q%_bi/"
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        parser_generator_0 = module_0.ParserGenerator(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        n_f_a_state_0 = module_0.NFAState()
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
    except BaseException:
        pass

def test_case_9():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_2 = None
        list_0 = [d_f_a_state_1, d_f_a_state_1, d_f_a_state_2, d_f_a_state_1]
        dict_2 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: list_0, n_f_a_state_1: d_f_a_state_2}
        d_f_a_state_3 = module_0.DFAState(dict_2, n_f_a_state_1)
        str_0 = None
        d_f_a_state_3.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'HF}Fp)nd\n'
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        n_f_a_state_2 = module_0.NFAState()
        str_1 = "Prepare for parsing.\n\n        This *must* be called before starting to parse.\n\n        The optional argument is an alternative start symbol; Yt\n        defaults to the grammar's start ymbol.\n\n        You can use a Parser instance to parse any number of programs;\n        each time you call setup() the parser is reset to an initial\n        state determined by the (implicit or eplicit) start symbol.\n\n        "
        n_f_a_state_2.addarc(n_f_a_state_0, str_1)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_1.__eq__(d_f_a_state_0)
        n_f_a_state_2.addarc(n_f_a_state_2, str_1)
        dict_1 = {}
        n_f_a_state_3 = module_0.NFAState()
        d_f_a_state_2 = module_0.DFAState(dict_1, n_f_a_state_3)
    except BaseException:
        pass

def test_case_11():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'unknown encoding: '
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        n_f_a_state_2 = module_0.NFAState()
        str_1 = "Prepare for parsing.\n\n        This *must* be called before starting to parse.\n\n        The optional argument is an alternative start symbol; it\n        defaults to the grammar's start symbol.\n\n        You can use a Parser instance to parse any number of programs;\n        each time you call setup() the parser is reset to an initial\n        state determined by the (implicit or explicit) start symbol.\n\n        "
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
        n_f_a_state_2.addarc(n_f_a_state_0, str_1)
        n_f_a_state_3 = module_0.NFAState()
        d_f_a_state_0.addarc(d_f_a_state_0, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        n_f_a_state_0 = module_0.NFAState()
        int_0 = -2672
        n_f_a_state_0.addarc(n_f_a_state_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_1 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_14():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'T'
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_1)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        str_1 = 'CO'
        n_f_a_state_0.addarc(n_f_a_state_0, str_1)
        n_f_a_state_0.addarc(n_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(d_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_1, d_f_a_state_0)
        str_2 = ' 27+fEbe<\n'
        d_f_a_state_1.addarc(d_f_a_state_0, str_2)
        tuple_0 = None
        parser_generator_0 = module_0.ParserGenerator(str_2, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_1: n_f_a_state_1}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_0 = 'T'
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_1)
        d_f_a_state_2 = None
        d_f_a_state_0.addarc(d_f_a_state_2, str_0)
    except BaseException:
        pass