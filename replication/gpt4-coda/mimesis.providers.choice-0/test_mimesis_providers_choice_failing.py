# Automatically generated by Pynguin.
import mimesis.providers.choice as module_0

def test_case_0():
    try:
        str_0 = 'hellion'
        int_0 = -836
        bool_0 = False
        list_0 = []
        choice_0 = module_0.Choice(*list_0)
        var_0 = choice_0.__call__(str_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        none_type_0 = None
        choice_0 = module_0.Choice()
        var_0 = choice_0.__call__(none_type_0)
    except BaseException:
        pass

def test_case_2():
    try:
        choice_0 = module_0.Choice()
        bool_0 = None
        var_0 = choice_0.__call__(choice_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        choice_0 = module_0.Choice()
        choice_1 = module_0.Choice()
        str_0 = 'p8o_[vnO-J'
        bool_0 = True
        choice_2 = module_0.Choice()
        var_0 = choice_1.__call__(str_0, bool_0)
        list_0 = [choice_0, choice_0]
        var_1 = choice_0.__call__(list_0)
        choice_3 = module_0.Choice()
        choice_4 = module_0.Choice()
        list_1 = []
        var_2 = choice_3.__call__(list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        choice_0 = module_0.Choice()
        str_0 = 'p8o_[vnO-J'
        bool_0 = True
        var_0 = choice_0.__call__(str_0, bool_0)
        list_0 = [var_0, var_0]
        choice_1 = module_0.Choice()
        var_1 = choice_0.__call__(list_0)
        var_2 = choice_0.__call__(list_0, bool_0)
        int_0 = 736
        choice_2 = module_0.Choice()
        bytes_0 = b'K\xdb\xd9\xb5K\xf1HkT\xc2\xd2/\xad?G:\xdb\xaeH'
        tuple_0 = (bytes_0, bytes_0)
        var_3 = choice_1.__call__(tuple_0, int_0)
        choice_3 = module_0.Choice()
        float_0 = 997.0
        var_4 = choice_0.__call__(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        choice_0 = module_0.Choice()
        list_0 = [choice_0]
        int_0 = 507
        bool_0 = True
        var_0 = choice_0.__call__(list_0, int_0, bool_0)
    except BaseException:
        pass