# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0
import datetime as module_1
import ansible.template as module_2

def test_case_0():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        time_0 = module_1.time()
        var_0 = module_0.to_nice_yaml(time_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'nh\\'
        str_1 = 'b\x0c!a4!\\}G'
        var_0 = module_0.to_nice_yaml(str_1)
        list_0 = []
        dict_0 = {str_0: str_0}
        var_1 = module_0.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 60.0
        dict_0 = {float_0: float_0}
        bool_0 = False
        var_0 = module_0.to_nice_json(dict_0, bool_0)
        str_0 = 'X=~k*'
        var_1 = module_0.regex_escape(float_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Collection'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.comment(str_0, **dict_0)
        bool_0 = True
        var_1 = module_0.to_datetime(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = 'posix_extended'
        var_0 = module_0.strftime(str_0)
        var_1 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_undefined_0 = module_2.AnsibleUndefined()
        async_iterator_0 = ansible_undefined_0.__aiter__()
        var_0 = module_0.strftime(ansible_undefined_0, async_iterator_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = module_0.combine()
        set_0 = set()
        int_0 = None
        var_1 = module_0.to_bool(set_0)
        var_2 = module_0.regex_findall(set_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = 'bZ'
        list_0 = [str_0, filter_module_0]
        var_0 = module_0.regex_search(filter_module_0, str_0, *list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        str_0 = ':h7'
        var_0 = module_0.regex_escape(str_0)
        dict_0 = {bool_0: bool_0}
        var_1 = module_0.regex_escape(bool_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '*78MyM[#BSC?'
        bool_0 = False
        dict_0 = {str_0: bool_0}
        var_0 = module_0.from_yaml(dict_0)
        ansible_undefined_0 = module_2.AnsibleUndefined()
        async_iterator_0 = ansible_undefined_0.__aiter__()
        var_1 = module_0.strftime(ansible_undefined_0, async_iterator_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'd1'
        list_0 = []
        dict_0 = {}
        var_0 = module_0.subelements(dict_0, list_0)
        tuple_0 = None
        var_1 = module_0.randomize_list(tuple_0)
        tuple_1 = ()
        list_1 = [tuple_1, str_0, var_1]
        var_2 = module_0.mandatory(list_1)
        var_3 = module_0.from_yaml(str_0)
        set_0 = None
        var_4 = module_0.subelements(set_0, dict_0, tuple_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'd'
        str_1 = '4N:'
        var_0 = module_0.randomize_list(str_1)
        list_0 = []
        dict_0 = {str_0: str_0}
        var_1 = module_0.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ':2G?3@Tl.`<Hl>xf'
        var_0 = module_0.get_hash(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = None
        str_0 = None
        bytes_0 = b'R\xa9\x82'
        var_0 = module_0.get_encrypted_password(list_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = []
        str_0 = 'F$Fcnh(2J\rvBp`Pij/f'
        dict_0 = {str_0: list_0, str_0: list_0, str_0: list_0, str_0: list_0}
        var_0 = module_0.combine(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        str_0 = 'awaiting_prompt'
        dict_0 = {bool_0: bool_0, bool_0: str_0, bool_0: bool_0, str_0: str_0}
        var_0 = module_0.do_groupby(bool_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = None
        str_0 = ''
        var_0 = module_0.regex_search(bool_0, str_0)
        list_0 = [var_0, var_0]
        var_1 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'CS\xdcFyP\x173G\x89\xb8'
        list_0 = []
        var_0 = module_0.subelements(list_0, bytes_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'0\xd1\xae\x8d.j\x9f]\xb4 \xbe\xbb\xba,\xed\xd6'
        list_0 = [bytes_0]
        var_0 = module_0.subelements(list_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'd'
        list_0 = []
        dict_0 = {str_0: str_0}
        var_0 = module_0.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = 463.0
        str_0 = 'z3_r92GwQh< v{ZJ=.'
        var_0 = module_0.rand(float_0, str_0)
        tuple_0 = None
        dict_0 = {}
        var_1 = module_0.dict_to_list_of_dict_key_value_elements(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'Could not parse job output: %s'
        set_0 = {str_0, str_0, str_0, str_0}
        bool_0 = False
        bytes_0 = b'\x15\xdf\x9et\xef#Q\xb3QZc\xa8{='
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(set_0, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\xfc\x14\x82b\x16+\x9f]\x9b\xa8\xc5l\n\xd5\xab\xc5'
        str_0 = 'M40NjuWAuF.Z'
        tuple_0 = ()
        var_0 = module_0.regex_findall(bytes_0, str_0, tuple_0)
        var_1 = module_0.path_join(tuple_0)
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        var_0 = module_0.combine()
        str_0 = 'pythLton'
        filter_module_0 = module_0.FilterModule(**dict_0)
        list_0 = [dict_0, dict_0, str_0, filter_module_0]
        var_1 = module_0.path_join(str_0)
        var_2 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_0 = '//'
        var_1 = module_0.strftime(str_0)
        var_2 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = -184.24
        var_0 = module_0.get_encrypted_password(float_0)
    except BaseException:
        pass

def test_case_27():
    try:
        set_0 = set()
        var_0 = module_0.rand(set_0, set_0)
    except BaseException:
        pass

def test_case_28():
    try:
        filter_module_0 = None
        bytes_0 = b'd\xf7\xf9^?z\x11\xde\xf5\xd1\x82-\x91r\x1f\x1e\xc3\x85n\xfc'
        var_0 = module_0.extract(filter_module_0, bytes_0, filter_module_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 32601
        var_0 = module_0.path_join(int_0)
    except BaseException:
        pass

def test_case_30():
    try:
        dict_0 = {}
        str_0 = "pytL'hL3oa"
        filter_module_0 = module_0.FilterModule(**dict_0)
        list_0 = None
        var_0 = module_0.to_bool(list_0)
        list_1 = [dict_0, dict_0, str_0, filter_module_0]
        var_1 = module_0.subelements(list_1, str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        bytes_0 = b'CS\xdcFyP\x173G\x89\xb8'
        list_0 = []
        list_1 = [list_0, bytes_0]
        dict_0 = {}
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(list_1, dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        bool_0 = None
        str_0 = ''
        var_0 = module_0.regex_search(bool_0, str_0)
        set_0 = {var_0, bool_0, bool_0}
        str_1 = 'x(=SE'
        ansible_undefined_0 = module_2.AnsibleUndefined(str_0, str_1)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        var_1 = module_0.rand(set_0, str_1, str_0, async_iterator_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'o'
        int_0 = 2360
        list_0 = [int_0]
        var_0 = module_0.rand(str_0, list_0, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        list_0 = []
        str_0 = '@#5}'
        ansible_undefined_0 = module_2.AnsibleUndefined(str_0, list_0)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        var_0 = module_0.randomize_list(list_0, async_iterator_0)
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = None
        float_0 = 2211.09651
        var_0 = module_0.rand(int_0, float_0)
    except BaseException:
        pass

def test_case_36():
    try:
        tuple_0 = ()
        tuple_1 = ()
        list_0 = [tuple_0, tuple_1]
        str_0 = 'oIb*'
        str_1 = None
        dict_0 = {str_1: tuple_1}
        list_1 = [tuple_1, str_0, str_0, dict_0]
        var_0 = module_0.regex_findall(list_0, str_0, list_1, tuple_0)
        dict_1 = None
        list_2 = [dict_1, dict_1, dict_1, dict_1]
        bool_0 = None
        dict_2 = {}
        bytes_0 = b'\x05\x1d\xccHD\xbf\xfe\x1a\x00n\xf1\x19\x8d\x93\x99'
        var_1 = module_0.extract(list_2, bool_0, dict_2, bytes_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 22
        str_0 = 'd'
        var_0 = module_0.to_bool(str_0)
        list_0 = [int_0]
        var_1 = module_0.flatten(list_0)
        bytes_0 = b'CS\xdcFyP\x173G\x89\xb8'
        list_1 = []
        dict_0 = {}
        set_0 = set()
        var_2 = module_0.dict_to_list_of_dict_key_value_elements(dict_0, set_0)
        var_3 = module_0.subelements(list_1, bytes_0)
    except BaseException:
        pass

def test_case_38():
    try:
        float_0 = 463.0
        str_0 = 'wU,P?q\x0c[9/+8K@'
        tuple_0 = None
        str_1 = 's'
        dict_0 = {str_1: str_1, str_1: str_0, str_1: tuple_0, str_1: float_0}
        set_0 = set()
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(dict_0, set_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = None
        var_0 = module_0.randomize_list(str_0)
        int_0 = 5220
        str_1 = '# fmt: toml\n# Example 1\n[all.vars]\nhas_java = false\n\n[web]\nchildren = [\n    "apache",\n    "nginx"\n]\nvars = { http_port = 8080, myvar = 23 }\n\n[web.hosts]\nhost1 = {}\nhost2 = { ansible_port = 222 }\n\n[apache.hosts]\ntomcat1 = {}\ntomcat2 = { myvar = 34 }\ntomcat3 = { mysecret = "03#pa33w0rd" }\n\n[nginx.hosts]\njenkins1 = {}\n\n[nginx.vars]\nhas_java = true\n\n# Example 2\n[all.vars]\nhas_java = false\n\n[web]\nchildren = [\n    "apache",\n    "nginx"\n]\n\n[web.vars]\nhttp_port = 8080\nmyvar = 23\n\n[web.hosts.host1]\n[web.hosts.host2]\nansible_port = 222\n\n[apache.hosts.tomcat1]\n\n[apache.hosts.tomcat2]\nmyvar = 34\n\n[apache.hosts.tomcat3]\nmysecret = "03#pa33w0rd"\n\n[nginx.hosts.jenkins1]\n\n[nginx.vars]\nhas_java = true\n\n# Example 3\n[ungrouped.hosts]\nhost1 = {}\nhost2 = { ansible_host = "127.0.0.1", ansible_port = 44 }\nhost3 = { ansible_host = "127.0.0.1", ansible_port = 45 }\n\n[g1.hosts]\nhost4 = {}\n\n[g2.hosts]\nhost4 = {}\n'
        var_1 = module_0.subelements(int_0, str_1)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'wU,P<q\x0c[9/+8K@'
        float_0 = 0.5
        var_0 = module_0.to_uuid(str_0, float_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bytes_0 = b'0\xd1\xae\x8d.j\x9f]\xb4 \xbe\xbb\xba,\xed\xd6'
        list_0 = [bytes_0, bytes_0, bytes_0]
        var_0 = module_0.to_uuid(list_0)
        list_1 = [bytes_0]
        var_1 = module_0.subelements(list_1, list_1, bytes_0)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = -508
        var_0 = module_0.rand(int_0, int_0)
    except BaseException:
        pass

def test_case_43():
    try:
        tuple_0 = None
        str_0 = '*C})o'
        bool_0 = True
        float_0 = 31.13998
        var_0 = module_0.extract(tuple_0, str_0, bool_0, float_0)
    except BaseException:
        pass

def test_case_44():
    try:
        int_0 = 1000
        var_0 = module_0.b64decode(int_0)
        str_0 = ''
        var_1 = module_0.from_yaml_all(str_0)
        list_0 = []
        dict_0 = {}
        bool_0 = True
        var_2 = module_0.b64decode(bool_0)
        var_3 = module_0.subelements(dict_0, list_0)
        bytes_0 = b'3\xe8\xf2\xca\x1a9'
        var_4 = module_0.regex_search(bytes_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_45():
    try:
        filter_module_0 = module_0.FilterModule()
        set_0 = {filter_module_0, filter_module_0, filter_module_0, filter_module_0}
        float_0 = -1459.544
        str_0 = '8b8g-J[bsUO12\t:]<XL'
        tuple_0 = (str_0, filter_module_0)
        var_0 = module_0.from_yaml(tuple_0)
        str_1 = '_IAM~ANG6AK3{/`'
        str_2 = '?github_user=%s&github_repo=%s'
        str_3 = '6dD!g}\rp1Y='
        dict_0 = {str_1: filter_module_0, str_2: str_1, str_3: set_0}
        var_1 = module_0.regex_findall(filter_module_0, set_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_46():
    try:
        dict_0 = {}
        var_0 = module_0.combine(**dict_0)
        filter_module_0 = module_0.FilterModule(**dict_0)
        list_0 = [var_0, var_0]
        var_1 = module_0.combine(*list_0, **dict_0)
        tuple_0 = ()
        var_2 = module_0.rand(tuple_0, filter_module_0)
    except BaseException:
        pass

def test_case_47():
    try:
        bool_0 = None
        var_0 = module_0.quote(bool_0)
        bytes_0 = b'0\xd1\xae\x8d.j\x9f]\xb4 \xbe\xbb\xba,\xed\xd6'
        list_0 = [bytes_0]
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.subelements(list_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_48():
    try:
        dict_0 = {}
        float_0 = -1861.0
        filter_module_0 = module_0.FilterModule(**dict_0)
        list_0 = [float_0, dict_0, float_0, filter_module_0, filter_module_0]
        str_0 = '+f'
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_49():
    try:
        dict_0 = {}
        str_0 = 'pythLton'
        filter_module_0 = module_0.FilterModule(**dict_0)
        list_0 = [dict_0, dict_0, str_0, filter_module_0]
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = 'posix_extend=d'
        str_1 = 'd'
        var_0 = module_0.to_bool(str_1)
        bytes_0 = b'CS\xdcFy\xbe\x173\xf2\x89\xb8\x89'
        list_0 = []
        dict_0 = {str_0: str_1}
        bool_0 = None
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(list_0, dict_0, bool_0)
        int_0 = -2151
        list_1 = None
        dict_1 = {list_1: list_1, list_1: int_0, bytes_0: list_1}
        str_2 = 'jn-<c?exC$'
        var_2 = module_0.subelements(int_0, dict_1, str_2)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = 'ansible_%s_user'
        var_0 = module_0.quote(str_0)
        str_1 = '" \\a<n?`Iu7l.'
        list_0 = [str_1]
        var_1 = module_0.randomize_list(list_0)
        var_2 = module_0.flatten(str_1)
        var_3 = module_0.combine(*list_0)
        var_4 = module_0.regex_escape(list_0)
        bytes_0 = b'\xbb~\x06\xaf\x85\xc3_!+\xab\x01\xf8\xb8T\x9f\x0b\x10\x812\xa0'
        float_0 = 0.5
        str_2 = '_: 0c[\x0cW,rC'
        var_5 = module_0.ternary(bytes_0, float_0, str_2)
        bool_0 = True
        str_3 = 'z'
        var_6 = module_0.rand(str_3, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_52():
    try:
        float_0 = 1289.184815
        filter_module_0 = None
        var_0 = module_0.to_uuid(float_0, filter_module_0)
    except BaseException:
        pass

def test_case_53():
    try:
        int_0 = 4472
        bytes_0 = b'\xa9'
        set_0 = {bytes_0, int_0, int_0}
        var_0 = module_0.b64decode(set_0)
        str_0 = 'y1RSEwd'
        dict_0 = None
        dict_1 = {dict_0: var_0}
        list_0 = [str_0]
        var_1 = module_0.extract(str_0, dict_0, dict_1, list_0)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = 'W?\x0cfZ+jv'
        list_0 = []
        list_1 = [str_0, list_0, str_0, list_0]
        var_0 = module_0.flatten(list_1)
        filter_module_0 = module_0.FilterModule(*list_1)
    except BaseException:
        pass

def test_case_55():
    try:
        bool_0 = None
        tuple_0 = ()
        var_0 = module_0.from_yaml_all(tuple_0)
        float_0 = 2932.8382
        list_0 = [bool_0]
        dict_0 = {}
        var_1 = module_0.mandatory(dict_0)
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_2 = module_0.ternary(float_0, tuple_0, list_0, filter_module_0)
        str_0 = ''
        var_3 = module_0.regex_search(bool_0, str_0)
        dict_1 = {}
        filter_module_1 = module_0.FilterModule(**dict_1)
        int_0 = 69
        str_1 = 'MQ1_`-NALI8go'
        var_4 = module_0.rand(filter_module_0, int_0, dict_0, str_1)
    except BaseException:
        pass

def test_case_56():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '\\nToRr'
        list_0 = [str_0, filter_module_0]
        var_0 = module_0.regex_search(filter_module_0, str_0, *list_0)
    except BaseException:
        pass

def test_case_57():
    try:
        bool_0 = None
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        filter_module_1 = module_0.FilterModule()
        list_0 = [filter_module_0, bool_0, filter_module_0, filter_module_1]
        tuple_0 = (filter_module_0, dict_0, list_0)
        filter_module_2 = module_0.FilterModule()
        list_1 = [tuple_0, filter_module_1, filter_module_2]
        var_0 = module_0.combine(*list_1)
    except BaseException:
        pass

def test_case_58():
    try:
        bytes_0 = b'\x14\xc9\xe8\x83q\x13g\xda\xc3c\\\n'
        str_0 = 'run operations as this user (default=%s)'
        str_1 = 'oweA0+zG\tK7U$3D{vSM'
        str_2 = '0-l{Z$5|e&Z!!Z~O,'
        list_0 = [bytes_0, str_2, str_0]
        dict_0 = {}
        var_0 = module_0.rand(bytes_0, str_0, str_1, list_0, dict_0)
    except BaseException:
        pass

def test_case_59():
    try:
        tuple_0 = ()
        int_0 = -3510
        int_1 = None
        str_0 = 'wE`|I{4/{\\h*V'
        var_0 = module_0.regex_replace(tuple_0, int_0, int_1, str_0)
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = 'a.b*c?d[e]f{g}h(i)j|k^l$m'
        var_0 = module_0.regex_escape(str_0)
        str_1 = 'a+b(c)d|e.f[g]h{i}j?k*l^m$'
        str_2 = 'posix_basic'
        var_1 = module_0.regex_escape(str_1, str_2)
        str_3 = 'a(b)c'
        str_4 = 'posix_extended'
        var_2 = module_0.regex_escape(str_3, str_4)
    except BaseException:
        pass

def test_case_61():
    try:
        ansible_undefined_0 = module_2.AnsibleUndefined()
        var_0 = module_0.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_62():
    try:
        bytes_0 = b''
        bool_0 = True
        str_0 = "J<=aW\ndy7'.Q5%y\x0b>"
        int_0 = 6
        var_0 = module_0.mandatory(int_0)
        int_1 = -3418
        ansible_undefined_0 = module_2.AnsibleUndefined(bool_0, str_0, int_1)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        float_0 = None
        bytes_1 = b''
        set_0 = {bytes_0, bool_0, int_1}
        var_1 = module_0.ternary(float_0, async_iterator_0, bytes_1, set_0)
        var_2 = module_0.to_bool(async_iterator_0)
        var_3 = module_0.fileglob(bytes_0)
        ansible_undefined_1 = module_2.AnsibleUndefined()
        str_1 = "WPk;l=Ug'5|$gC$K"
        dict_0 = {str_1: ansible_undefined_1, str_1: ansible_undefined_1}
        var_4 = module_0.regex_search(dict_0, str_1)
        list_0 = None
        var_5 = module_0.subelements(bytes_0, list_0)
    except BaseException:
        pass

def test_case_63():
    try:
        str_0 = '[\x0b4&Oy'
        bool_0 = False
        bytes_0 = b''
        ansible_undefined_0 = module_2.AnsibleUndefined(str_0, str_0)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        bool_1 = False
        tuple_0 = (bool_1,)
        var_0 = module_0.regex_replace(bool_0, bytes_0, async_iterator_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_64():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '=>f@~:H'
        ansible_undefined_0 = module_2.AnsibleUndefined(str_0, str_0)
        int_0 = -3540
        var_0 = module_0.mandatory(ansible_undefined_0, int_0)
    except BaseException:
        pass

def test_case_65():
    try:
        str_0 = 'Lk'
        var_0 = module_0.randomize_list(str_0)
        filter_module_0 = module_0.FilterModule()
        str_1 = '=>f@~:H'
        str_2 = '=>f@{~:H'
        ansible_undefined_0 = module_2.AnsibleUndefined(str_2, str_1, str_1)
        int_0 = -3540
        var_1 = module_0.mandatory(ansible_undefined_0, int_0)
    except BaseException:
        pass

def test_case_66():
    try:
        str_0 = 'Sample123Text'
        str_1 = '\\d+'
        var_0 = module_0.regex_search(str_0, str_1)
        str_2 = '(\\d+)'
        str_3 = '\\1'
        str_4 = '\\g<1>'
        str_5 = '\\2'
        int_0 = -332
        tuple_0 = (int_0,)
        list_0 = [str_2, str_5, str_4]
        bytes_0 = b'\x0c\x12\xc5\x9dM\x96S\xd9\x9a$'
        list_1 = [str_3, bytes_0]
        var_1 = module_0.regex_search(tuple_0, list_0, *list_1)
    except BaseException:
        pass