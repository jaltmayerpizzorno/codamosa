# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    blueprint_group_0 = module_0.BlueprintGroup()

def test_case_1():
    blueprint_group_0 = module_0.BlueprintGroup()
    int_0 = blueprint_group_0.__len__()
    var_0 = blueprint_group_0.middleware()
    str_0 = '<`[HH3Y'
    blueprint_0 = module_1.Blueprint(str_0)
    blueprint_group_0.append(blueprint_0)

def test_case_2():
    bool_0 = True
    dict_0 = {}
    blueprint_group_0 = module_0.BlueprintGroup(bool_0, dict_0)
    var_0 = blueprint_group_0.__iter__()

def test_case_3():
    blueprint_group_0 = module_0.BlueprintGroup()
    int_0 = blueprint_group_0.__len__()

def test_case_4():
    blueprint_group_0 = module_0.BlueprintGroup()
    list_0 = [blueprint_group_0]
    var_0 = blueprint_group_0.middleware(*list_0)

def test_case_5():
    float_0 = 1356.1062
    str_0 = '-t|\\BDcAq[5\tD,~w:.N'
    int_0 = -590
    blueprint_0 = module_1.Blueprint(str_0, str_0, str_0, int_0)
    str_1 = '\n        Read some bytes of request body.\n        '
    blueprint_1 = module_1.Blueprint(str_1)
    blueprint_group_0 = module_0.BlueprintGroup(blueprint_1)
    bytes_0 = b'\x02\x19R\xa6\x9e\xe3`\xf7\xfe}I\xe7R\xe5S\x99f\xda"'
    blueprint_group_1 = module_0.BlueprintGroup(blueprint_group_0, bytes_0)
    blueprint_group_1.append(blueprint_0)
    blueprint_group_2 = module_0.BlueprintGroup(float_0)

def test_case_6():
    bool_0 = False
    float_0 = 0.001
    blueprint_group_0 = module_0.BlueprintGroup(bool_0, float_0)
    var_0 = blueprint_group_0.middleware()

def test_case_7():
    blueprint_group_0 = module_0.BlueprintGroup()
    int_0 = blueprint_group_0.__len__()
    var_0 = blueprint_group_0.middleware()
    str_0 = '<`[HH3Y'
    str_1 = '\n        Add an API URL under the **GET** *HTTP* method\n\n        :param uri: URL to be tagged to **GET** method of *HTTP*\n        :param host: Host IP or FQDN for the service to use\n        :param strict_slashes: Instruct :class:`Sanic` to check if the request\n            URLs need to terminate with a */*\n        :param version: API Version\n        :param name: Unique name that can be used to identify the Route\n        :return: Object decorated with :func:`route` method\n        '
    str_2 = 'jZ&\x0cFd\n#VLJ\x0b{M\x0cIRJ'
    blueprint_group_1 = module_0.BlueprintGroup(str_2)
    bool_0 = False
    blueprint_0 = module_1.Blueprint(str_0, str_1, bool_0)
    str_3 = '</code>'
    blueprint_1 = module_1.Blueprint(str_3, bool_0)
    blueprint_group_1.append(blueprint_1)

def test_case_8():
    str_0 = 'mock_blueprint'
    blueprint_0 = module_1.Blueprint(str_0)
    blueprint_group_0 = module_0.BlueprintGroup()
    list_0 = [blueprint_group_0]
    var_0 = blueprint_0.group(*list_0)
    var_1 = blueprint_group_0.middleware(*list_0)

def test_case_9():
    str_0 = 'mock_blueprint'
    blueprint_0 = module_1.Blueprint(str_0)
    var_0 = None
    var_1 = lambda request: var_0
    blueprint_group_0 = module_0.BlueprintGroup()
    blueprint_group_0.append(blueprint_0)
    list_0 = [var_1, blueprint_0]
    var_2 = blueprint_group_0.middleware(*list_0)