# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        str_0 = 'B_g\x0bQf#e7 '
        str_1 = module_0.compress(str_0)
        int_0 = 1904
        str_2 = module_0.roman_encode(int_0)
        str_3 = module_0.snake_case_to_camel(str_1)
        var_0 = module_0.camel_case_to_snake(str_3)
        str_4 = module_0.shuffle(str_2)
        set_0 = {int_0, str_2, str_1, str_0}
        string_formatter_0 = module_0.__StringFormatter(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -2644
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ',Z9!~ 29y5^\x0c:t%ru'
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "hJDl]'hA7&J! "
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'B_gfQ,#e7 '
        str_1 = module_0.compress(str_0)
        int_0 = 1904
        str_2 = module_0.roman_encode(int_0)
        str_3 = 'B9s\x0c3DfEc'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = module_0.shuffle(str_2)
        int_1 = module_0.roman_decode(str_5)
        str_6 = 'h\x0b'
        str_7 = 'M\r`W*Wr_kxR'
        str_8 = '}xxbq`6!]_y.yG7p'
        dict_0 = {str_7: int_1, str_8: str_6}
        var_0 = module_0.camel_case_to_snake(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1859
        str_0 = module_0.roman_encode(int_0)
        str_1 = module_0.shuffle(str_0)
        str_2 = None
        int_1 = module_0.roman_decode(str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1904
        str_0 = module_0.roman_encode(int_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_1 = ':QTdN;=a{z\x0b'
        str_2 = module_0.compress(str_1, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'B_g\x0bQf#e7 '
        str_1 = module_0.compress(str_0)
        int_0 = 1904
        str_2 = module_0.roman_encode(int_0)
        str_3 = 'mq(w'
        str_4 = module_0.strip_margin(str_3)
        str_5 = module_0.snake_case_to_camel(str_1)
        str_6 = module_0.shuffle(str_2)
        int_1 = module_0.roman_decode(str_6)
        str_7 = 'h\x0b'
        bool_0 = False
        str_8 = module_0.strip_html(str_6, bool_0)
        str_9 = module_0.prettify(str_1)
        str_10 = module_0.prettify(str_7)
        str_11 = module_0.decompress(str_10, str_6)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'B_gfQ,#e7 '
        str_1 = module_0.compress(str_0)
        int_0 = 1904
        str_2 = module_0.roman_encode(int_0)
        str_3 = 'B9s\x0c3DfEc'
        str_4 = module_0.snake_case_to_camel(str_3)
        str_5 = module_0.shuffle(str_2)
        int_1 = module_0.roman_decode(str_5)
        str_6 = ':r\r!BnM5l\r?Y~%'
        str_7 = module_0.slugify(str_6)
        str_8 = 'h\x0b'
        bool_0 = False
        str_9 = module_0.strip_html(str_5, bool_0)
        str_10 = 'Rks$'
        str_11 = module_0.prettify(str_8)
        str_12 = module_0.slugify(str_8, str_10)
        str_13 = 'atL\ng'
        str_14 = module_0.decompress(str_13, str_5)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b''
        str_0 = '\tQ|G'
        str_1 = module_0.prettify(str_0)
        string_formatter_0 = module_0.__StringFormatter(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Rks$'
        str_1 = module_0.slugify(str_0)
        str_2 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
        str_3 = module_0.prettify(str_2)
        str_4 = module_0.slugify(str_2)
        str_5 = None
        str_6 = module_0.prettify(str_5)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "hJDl]'hA7&J!m "
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.compress(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "hJDl]'hA7&J!m "
        str_1 = module_0.reverse(str_0)
        str_2 = module_0.prettify(str_0)
        str_3 = module_0.compress(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        var_0 = module_0.camel_case_to_snake(roman_numbers_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = None
        str_1 = module_0.snake_case_to_camel(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '=J`7 '
        str_1 = module_0.shuffle(str_0)
        str_2 = None
        str_3 = 'Gjuv<pjxrA}><;\\x^P\n'
        str_4 = module_0.strip_margin(str_3)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_5 = module_0.shuffle(str_2)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = False
        str_0 = 'z@[B'
        str_1 = module_0.slugify(str_0)
        var_0 = module_0.camel_case_to_snake(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'thnod'
        str_1 = module_0.prettify(str_0)
        str_2 = None
        str_3 = 'K^1\x0b\n'
        str_4 = module_0.slugify(str_2, str_3)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = None
        bool_0 = module_0.booleanize(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'SrI`#R\\e{-[a'
        str_1 = module_0.asciify(str_0)
        str_2 = None
        str_3 = module_0.strip_margin(str_2)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = "hJDl]'hA7&J!m "
        str_1 = module_0.prettify(str_0)
        str_2 = "pPm|j)QE'bL/SYXFu-w"
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = string_formatter_0.format()
        str_4 = module_0.prettify(str_2)
        str_5 = 'sAN%uh:r'
        str_6 = 'KW,ko`]%7\t^'
        str_7 = string_formatter_0.format()
        str_8 = module_0.slugify(str_2)
        str_9 = string_formatter_0.format()
        bool_0 = True
        str_10 = module_0.strip_html(str_5, bool_0)
        str_11 = "JT%-'"
        str_12 = module_0.reverse(str_11)
        str_13 = string_formatter_0.format()
        list_0 = [str_13, str_6, str_0]
        list_1 = [str_7, str_6, str_0, list_0]
        roman_numbers_0 = module_0.__RomanNumbers(*list_1)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 1859
        str_0 = module_0.roman_encode(int_0)
        str_1 = module_0.shuffle(str_0)
        str_2 = '9j+\x0cqdi5S\nMWj'
        int_1 = module_0.roman_decode(str_2)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = "\n    Checks if a string is a valid ip (either v4 or v6).\n\n    *Examples:*\n\n    >>> is_ip('255.200.100.75') # returns true\n    >>> is_ip('2001:db8:85a3:0000:0000:8a2e:370:7334') # returns true\n    >>> is_ip('1.2.3') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if an ip, false otherwise.\n    "
        bool_0 = False
        str_1 = module_0.snake_case_to_camel(str_0, bool_0)
        str_2 = module_0.prettify(str_1)
        str_3 = None
        str_4 = module_0.strip_html(str_3)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 1904
        str_0 = module_0.roman_encode(int_0)
        str_1 = 'B9Xs\x0c3DfEEc'
        str_2 = module_0.snake_case_to_camel(str_1)
        str_3 = module_0.shuffle(str_0)
        int_1 = module_0.roman_decode(str_3)
        bool_0 = False
        str_4 = module_0.strip_html(str_3, bool_0)
        int_2 = 4318
        str_5 = module_0.roman_encode(int_2)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'dK}Z~;T'
        int_0 = None
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1904
        str_0 = module_0.roman_encode(int_0)
        str_1 = 'B9s\x0c3DfEc'
        str_2 = module_0.snake_case_to_camel(str_1)
        str_3 = module_0.shuffle(str_0)
        int_1 = module_0.roman_decode(str_3)
        str_4 = module_0.compress(str_0, str_3, int_1)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = None
        str_1 = module_0.compress(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = None
        str_1 = 'M?%i{?vl3$'
        str_2 = module_0.strip_margin(str_1)
        str_3 = module_0.reverse(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'B_g\x0bQf#e7 '
        str_1 = module_0.compress(str_0)
        int_0 = 1904
        str_2 = module_0.roman_encode(int_0)
        str_3 = module_0.snake_case_to_camel(str_1)
        str_4 = module_0.shuffle(str_2)
        int_1 = module_0.roman_decode(str_4)
        str_5 = ''
        bool_0 = False
        str_6 = module_0.strip_html(str_4, bool_0)
        str_7 = 'Rks$'
        str_8 = module_0.prettify(str_5)
        str_9 = module_0.slugify(str_5, str_7)
        str_10 = module_0.decompress(str_8, str_4)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'eJ}$Uij\x0bR'
        bool_0 = module_0.booleanize(str_0)
        str_1 = ';\tp+X%w9C'
        str_2 = module_0.snake_case_to_camel(str_1, bool_0)
        str_3 = '^{}$'
        str_4 = 'i_5Q9o5t^U(**2rPx'
        str_5 = module_0.strip_margin(str_4)
        str_6 = module_0.snake_case_to_camel(str_3)
        str_7 = '<?\\FYA1]N4CPPT/P'
        str_8 = module_0.shuffle(str_5)
        str_9 = 'asciify'
        str_10 = module_0.shuffle(str_7)
        str_11 = module_0.strip_margin(str_9)
        dict_0 = {}
        str_12 = module_0.strip_margin(str_8)
        string_compressor_0 = module_0.__StringCompressor(**dict_0)
        str_13 = 'Z{ 9fcwraQJ9|f3'
        str_14 = module_0.reverse(str_13)
        str_15 = module_0.shuffle(str_10)
        str_16 = module_0.asciify(str_7)
        str_17 = '#]m\r,c\r.Mao~n%qy'
        str_18 = 'UPPERCASE_AFTER_SIGN'
        int_0 = -597
        str_19 = module_0.compress(str_17, str_18, int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'B_g\x0bQf#eL '
        str_1 = module_0.compress(str_0)
        int_0 = 1904
        str_2 = module_0.roman_encode(int_0)
        str_3 = module_0.snake_case_to_camel(str_1)
        str_4 = module_0.shuffle(str_2)
        int_1 = module_0.roman_decode(str_4)
        str_5 = 'h\x0b'
        bool_0 = False
        str_6 = module_0.strip_html(str_4, bool_0)
        str_7 = 'Rks$'
        str_8 = module_0.prettify(str_5)
        str_9 = module_0.slugify(str_5, str_7)
        str_10 = module_0.decompress(str_8, str_4)
    except BaseException:
        pass