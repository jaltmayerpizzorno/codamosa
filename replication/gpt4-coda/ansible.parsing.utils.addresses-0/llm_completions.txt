

# Generated at 2024-03-18 02:39:38.309621
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:39:44.772621
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:39:50.819344
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:39:58.666822
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:40:04.553785
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:22") == ("example.com", 22)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:40:13.990335
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    # Test with valid IPv4 address without port
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)
    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    # Test with valid IPv6 address without port
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)
    # Test with valid hostname
    assert parse_address("example.com:22") == ("example.com", 22)
    # Test with valid hostname without port
    assert parse_address("example.com") == ("example.com", None)
    #

# Generated at 2024-03-18 02:40:19.882069
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:8080") == ("example.com", 8080)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:


# Generated at 2024-03-18 02:40:30.604781
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:22") == ("example.com", 22)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:40:37.990206
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == (None, None)  # No port, not bracketed

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else

# Generated at 2024-03-18 02:40:44.710042
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1", allow_ranges=True) == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
   

# Generated at 2024-03-18 02:40:59.986529
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:41:07.329254
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:41:18.196984
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:41:24.727713
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:41:31.337359
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:41:42.146297
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:41:48.609326
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:41:58.258185
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:42:05.617426
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == (None, None)  # No port, not bracketed

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else

# Generated at 2024-03-18 02:42:11.644089
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:42:26.830232
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:42:34.783070
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == (None, None)  # No port, not bracketed

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else

# Generated at 2024-03-18 02:42:40.995078
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == (None, None)  # No port, not bracketed

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else

# Generated at 2024-03-18 02:42:54.248874
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:42:59.952876
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == (None, None)  # No port, not bracketed

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else

# Generated at 2024-03-18 02:43:06.775698
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1", allow_ranges=True) == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
   

# Generated at 2024-03-18 02:43:13.119191
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:43:18.987713
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:43:25.484541
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:43:32.048810
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:8080") == ("example.com", 8080)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:


# Generated at 2024-03-18 02:43:52.877820
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:43:59.104931
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:44:06.003417
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    # Test with valid IPv4 address without port
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)
    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    # Test with valid hostname and port
    assert parse_address("example.com:8080") == ("example.com", 8080)
    # Test with valid hostname without port
    assert parse_address("example.com") == ("example.com", None)
    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert False

# Generated at 2024-03-18 02:44:12.188032
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:44:18.361651
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:44:24.824142
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1", allow_ranges=True) == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
   

# Generated at 2024-03-18 02:44:34.270439
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:44:39.864369
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == (None, None)  # No port, not bracketed

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else

# Generated at 2024-03-18 02:44:46.961120
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:44:53.957146
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:45:23.048189
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:45:30.494310
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:45:36.379015
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:45:42.720019
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:45:48.653238
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("[2001:db8::1]") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:45:56.445071
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:46:03.083911
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:22") == ("example.com", 22)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:46:08.928245
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:80") == ("example.com", 80)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert

# Generated at 2024-03-18 02:46:15.936277
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1", allow_ranges=True) == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not a valid address")
    except AnsibleError:
        pass
   

# Generated at 2024-03-18 02:46:21.538400
```python
    # Test with valid IPv4 address
    assert parse_address("192.168.1.1:80") == ("192.168.1.1", 80)
    assert parse_address("192.168.1.1") == ("192.168.1.1", None)

    # Test with valid IPv6 address
    assert parse_address("[2001:db8::1]:80") == ("2001:db8::1", 80)
    assert parse_address("2001:db8::1") == ("2001:db8::1", None)

    # Test with valid hostname
    assert parse_address("example.com:443") == ("example.com", 443)
    assert parse_address("example.com") == ("example.com", None)

    # Test with invalid address
    try:
        parse_address("not_a_valid_address")
    except AnsibleError:
        pass
    else:
        assert