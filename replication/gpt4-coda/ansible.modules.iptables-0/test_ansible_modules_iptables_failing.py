# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        bytes_0 = b'\xca\xa9\xce.[\x87)p\x1d\xcbeK\x05\x0fQ\x17$'
        int_0 = 308
        set_0 = {bytes_0, int_0}
        dict_0 = {int_0: bytes_0, int_0: set_0}
        str_0 = '\n# NOTE: Before 2.3, option \'dest\', \'destfile\' or \'name\' was used instead of \'path\'\n- name: Ensure SELinux is set to enforcing mode\n  ansible.builtin.lineinfile:\n    path: /etc/selinux/config\n    regexp: \'^SELINUX=\'\n    line: SELINUX=enforcing\n\n- name: Make sure group wheel is not in the sudoers configuration\n  ansible.builtin.lineinfile:\n    path: /etc/sudoers\n    state: absent\n    regexp: \'^%wheel\'\n\n- name: Replace a localhost entry with our own\n  ansible.builtin.lineinfile:\n    path: /etc/hosts\n    regexp: \'^127\\.0\\.0\\.1\'\n    line: 127.0.0.1 localhost\n    owner: root\n    group: root\n    mode: \'0644\'\n\n- name: Replace a localhost entry searching for a literal string to avoid escaping\n  lineinfile:\n    path: /etc/hosts\n    search_string: \'127.0.0.1\'\n    line: 127.0.0.1 localhost\n    owner: root\n    group: root\n    mode: \'0644\'\n\n- name: Ensure the default Apache port is 8080\n  ansible.builtin.lineinfile:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: \'^Listen \'\n    insertafter: \'^#Listen \'\n    line: Listen 8080\n\n- name: Ensure php extension matches new pattern\n  lineinfile:\n    path: /etc/httpd/conf/httpd.conf\n    search_string: \'<FilesMatch ".php[45]?$">\'\n    insertafter: \'^\\t<Location \\/>\\n\'\n    line: \'        <FilesMatch ".php[34]?$">\'\n\n- name: Ensure we have our own comment added to /etc/services\n  ansible.builtin.lineinfile:\n    path: /etc/services\n    regexp: \'^# port for http\'\n    insertbefore: \'^www.*80/tcp\'\n    line: \'# port for http by default\'\n\n- name: Add a line to a file if the file does not exist, without passing regexp\n  ansible.builtin.lineinfile:\n    path: /tmp/testfile\n    line: 192.168.1.99 foo.lab.net foo\n    create: yes\n\n# NOTE: Yaml requires escaping backslashes in double quotes but not in single quotes\n- name: Ensure the JBoss memory settings are exactly as needed\n  ansible.builtin.lineinfile:\n    path: /opt/jboss-as/bin/standalone.conf\n    regexp: \'^(.*)Xms(\\d+)m(.*)$\'\n    line: \'\\1Xms${xms}m\\3\'\n    backrefs: yes\n\n# NOTE: Fully quoted because of the \': \' on the line. See the Gotchas in the YAML docs.\n- name: Validate the sudoers file before saving\n  ansible.builtin.lineinfile:\n    path: /etc/sudoers\n    state: present\n    regexp: \'^%ADMIN ALL=\'\n    line: \'%ADMIN ALL=(ALL) NOPASSWD: ALL\'\n    validate: /usr/sbin/visudo -cf %s\n\n# See https://docs.python.org/3/library/re.html for further details on syntax\n- name: Use backrefs with alternative group syntax to avoid conflicts with variable values\n  ansible.builtin.lineinfile:\n    path: /tmp/config\n    regexp: ^(host=).*\n    line: \\g<1>{{ hostname }}\n    backrefs: yes\n'
        var_0 = module_0.append_csv(set_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 4094.3
        list_0 = [float_0, float_0, float_0]
        tuple_0 = (float_0, list_0)
        bytes_0 = b'<K\xd3\x89~'
        float_1 = -1909.0
        bytes_1 = b'\xd2,\x1ae\x16\x13m\x08\x05L\xe6\xe7'
        tuple_1 = (tuple_0, bytes_0, float_1, bytes_1)
        int_0 = -1535
        bool_0 = None
        var_0 = module_0.append_match(tuple_1, int_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'j\x0b46;_VOsu*",fx'
        bool_0 = False
        dict_0 = {str_0: str_0, bool_0: bool_0, bool_0: str_0, str_0: str_0}
        var_0 = module_0.append_jump(str_0, bool_0, dict_0)
        float_0 = 1442.744355
        list_0 = [float_0, float_0]
        bool_1 = False
        var_1 = module_0.append_param(list_0, bool_1, float_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xdb\x83\xf4X\xda\xd1\xd7\nEri~\xaa\xad'
        int_0 = -1703
        str_0 = '__main__'
        var_0 = module_0.append_jump(bytes_0, int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'WU\xf4\x91\xac*t\x19lg\xb4\xea\x95I\x91G'
        list_0 = [bytes_0, bytes_0]
        set_0 = set()
        var_0 = module_0.append_wait(bytes_0, list_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n)'
        var_0 = module_0.construct_rule(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1420.5
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        var_0 = module_0.get_chain_policy(float_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xe2\x08\x9cH"\x8d\xd41|)\x1b\xbdk\x05'
        int_0 = 520
        var_0 = module_0.check_present(bytes_0, int_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 's_NKh(!+:\x0c3TY"\x0b\n7'
        bool_0 = False
        set_0 = {str_0}
        int_0 = 511
        var_0 = module_0.append_rule(bool_0, set_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 2577.44
        int_0 = None
        bool_0 = None
        str_0 = 'v<P$!Yd_hv>M3Fn#P!H\r'
        dict_0 = {str_0: int_0, float_0: int_0, str_0: float_0, str_0: int_0}
        list_0 = [dict_0, dict_0, dict_0]
        list_1 = [list_0, list_0, dict_0]
        bytes_0 = b'\x9d\xf6\xd1Yf\xd4);)\xdc\xfb\x83\r\xd2\x7f'
        tuple_0 = (list_0, list_1, bytes_0, list_1)
        var_0 = module_0.insert_rule(tuple_0, bool_0, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        bytes_0 = b'\xd2'
        str_0 = '_HS_nX9jK^E\tP'
        var_0 = module_0.remove_rule(bool_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = None
        bytes_0 = b'\xf1\xe3'
        float_0 = None
        var_0 = module_0.flush_table(bool_0, bytes_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '7<'
        list_0 = [str_0, str_0, str_0]
        bool_0 = True
        set_0 = {str_0}
        var_0 = module_0.set_chain_policy(list_0, bool_0, set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Xmfzh1(_'
        list_0 = []
        list_1 = [str_0, list_0, list_0]
        str_1 = 'q]Hj]'
        var_0 = module_0.get_iptables_version(list_1, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'CNh:GYS]*'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        int_0 = None
        float_0 = 986.216
        tuple_0 = (dict_0, int_0, float_0)
        var_0 = module_0.append_param(str_0, dict_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = None
        set_0 = {float_0, float_0}
        bytes_0 = None
        int_0 = None
        list_0 = [int_0, set_0, set_0]
        var_0 = module_0.append_wait(set_0, bytes_0, list_0)
        var_1 = module_0.construct_rule(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        set_0 = None
        int_0 = 1626
        bytes_0 = b'LjD\x0eC2\x97\xad(B)\xadC+\xb4'
        var_0 = module_0.append_csv(set_0, bool_0, int_0)
        tuple_0 = None
        list_0 = [bytes_0, int_0]
        var_1 = module_0.append_param(bytes_0, tuple_0, bytes_0, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = None
        int_0 = -2788
        bytes_0 = b'\xa5a'
        str_1 = '%Q$wk'
        str_2 = None
        dict_0 = {int_0: str_2, str_0: str_2, int_0: int_0}
        float_0 = -2897.07
        str_3 = 'security'
        set_0 = set()
        var_0 = module_0.append_match_flag(dict_0, float_0, str_3, set_0)
        var_1 = module_0.append_param(bytes_0, str_1, bytes_0, str_2)
    except BaseException:
        pass