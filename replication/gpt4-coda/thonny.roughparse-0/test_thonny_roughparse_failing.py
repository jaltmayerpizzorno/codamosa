# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        string_translate_pseudo_mapping_0 = None
        dict_0 = {string_translate_pseudo_mapping_0: string_translate_pseudo_mapping_0, string_translate_pseudo_mapping_0: string_translate_pseudo_mapping_0}
        float_0 = 1.0
        string_translate_pseudo_mapping_1 = module_0.StringTranslatePseudoMapping(dict_0, float_0)
        var_0 = string_translate_pseudo_mapping_1.__iter__()
        bytes_0 = b'\xb2\x8c\xbe\xf2\xfb\x026\x0b\xc6#\xff\xa7\xf1\xbc\xfbDF\xf2\xb3'
        str_0 = ']lp(\t&D0WBlCebRQ'
        string_translate_pseudo_mapping_2 = module_0.StringTranslatePseudoMapping(bytes_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        rough_parser_0 = module_0.RoughParser(bool_0, list_0)
        var_0 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = 'z}?\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.get_num_lines_in_stmt()
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = '2\\dk\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '<Rzr#4-\\_):U'
        rough_parser_0 = module_0.RoughParser(str_0, str_0)
        var_0 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        float_0 = 1892.0105
        hyper_parser_0 = module_0.HyperParser(bool_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 323
        list_0 = []
        rough_parser_0 = module_0.RoughParser(int_0, list_0)
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '>Jn^iIhCb-'
        bytes_0 = b''
        str_1 = ':"VV$1~:UCcLBm;K26sN'
        rough_parser_0 = module_0.RoughParser(bytes_0, str_1)
        var_0 = rough_parser_0.set_lo(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        str_0 = '3!R#pj0b2L7-'
        rough_parser_0 = module_0.RoughParser(tuple_0, str_0)
        var_0 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        rough_parser_0 = module_0.RoughParser(bool_0, list_0)
        var_0 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = ''
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.find_good_parse_start(rough_parser_0)
        var_2 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = '2\\d\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        dict_0 = {str_0: int_0, int_0: rough_parser_0, rough_parser_0: var_0}
        set_0 = set()
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, set_0)
        var_2 = rough_parser_0.find_good_parse_start(string_translate_pseudo_mapping_0)
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 4
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = "\n    def sample_function():\n        if some_condition:\n            return 'A result'\n        else:\n            return 'Another result'\n    "
        var_0 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 4
        str_0 = '>\rM'
        dict_0 = {int_0: str_0, str_0: str_0, int_0: int_0, str_0: int_0}
        tuple_0 = ()
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, tuple_0)
        var_0 = string_translate_pseudo_mapping_0.get(int_0)
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_1 = "\n    def sample_function():\n        if some_condition:\n            return 'A result'\n        else:\n            return 'Another result'\n    "
        var_1 = rough_parser_0.set_str(str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = '2\\dk\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = '2\\d\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_last_stmt_bracketing()
        var_2 = rough_parser_0.get_base_indent_string()
        var_3 = rough_parser_0.find_good_parse_start(str_0)
        var_4 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = '"+3.]\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = '"+3.]\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.is_block_closer()
        float_0 = 713.3
        var_2 = rough_parser_0.find_good_parse_start(float_0)
        var_3 = rough_parser_0.get_base_indent_string()
        var_4 = rough_parser_0.find_good_parse_start()
        var_5 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -1156
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = 'z}?\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -1193
        rough_parser_0 = module_0.RoughParser(int_0, int_0)
        str_0 = '"\\3.]u\n'
        var_0 = rough_parser_0.set_str(str_0)
        var_1 = rough_parser_0.get_base_indent_string()
        var_2 = rough_parser_0.find_good_parse_start()
        var_3 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass