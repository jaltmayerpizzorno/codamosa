# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        bool_0 = False
        str_0 = None
        str_1 = None
        dict_0 = {str_1: str_1}
        tuple_0 = (str_0, dict_0)
        optional_0 = module_0.parse_forwarded(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '}Ru.&Tm].DiHTbhz'
        tuple_0 = module_0.parse_host(str_0)
        float_0 = 1557.94354
        dict_0 = {str_0: str_0, str_0: str_0}
        optional_0 = module_0.parse_xforwarded(float_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '")'
        tuple_0 = module_0.parse_content_header(str_0)
        dict_0 = module_0.fwd_normalize(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'for'
        str_1 = '192.0.2.60'
        str_2 = (str_0, str_1)
        str_3 = 'https'
        str_4 = [str_2, str_2, str_2]
        dict_0 = module_0.fwd_normalize(str_4)
        str_5 = 'http'
        str_6 = '_secret'
        str_7 = (str_0, str_6)
        str_8 = (str_5, str_3)
        str_9 = '_hidden'
        str_10 = (str_4, str_9)
        str_11 = [str_7, str_8, str_10]
        dict_1 = module_0.fwd_normalize(str_11)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '_e'
        int_0 = -41
        list_0 = [str_0]
        bytes_0 = module_0.format_http1_response(int_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -2718
        str_0 = 'gt:FJD:E4=nx\nYGCU-'
        bytes_0 = module_0.format_http1_response(int_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'tSrET"9+ko'
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = '*RAR'
        tuple_0 = module_0.parse_host(str_2)
        int_0 = -15
        tuple_1 = ()
        bytes_0 = module_0.format_http1_response(int_0, tuple_1)
        str_3 = 'Bk.]'
        tuple_2 = module_0.parse_host(str_3)
        int_1 = -3254
        set_0 = {int_1, tuple_0, int_1, int_1}
        dict_0 = module_0.fwd_normalize(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '*RAR'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = 'Bk.]'
        tuple_1 = module_0.parse_host(str_1)
        int_0 = -3254
        set_0 = {int_0, tuple_0, int_0, int_0}
        dict_0 = module_0.fwd_normalize(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '192.0.2.60'
        str_1 = (str_0, str_0)
        str_2 = 'pro'
        str_3 = (str_2, str_1)
        str_4 = [str_1, str_3, str_3]
        dict_0 = module_0.fwd_normalize(str_4)
        str_5 = '[2001:db8:cafe::17]'
        str_6 = (str_4, str_5)
        str_7 = 'http'
        str_8 = (str_2, str_7)
        str_9 = [str_6, str_8, str_6]
        dict_1 = module_0.fwd_normalize(str_9)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'for'
        str_1 = '192.0.2.60'
        str_2 = (str_0, str_1)
        str_3 = 'proto'
        str_4 = 'https'
        str_5 = (str_3, str_4)
        str_6 = 'by'
        str_7 = '203.0.113.43'
        str_8 = (str_6, str_7)
        str_9 = [str_2, str_5, str_8]
        dict_0 = module_0.fwd_normalize(str_9)
        str_10 = '2001:db8:cafe::17'
        str_11 = (str_0, str_10)
        str_12 = [str_11]
        dict_1 = module_0.fwd_normalize(str_12)
        dict_2 = module_0.fwd_normalize(str_0)
    except BaseException:
        pass