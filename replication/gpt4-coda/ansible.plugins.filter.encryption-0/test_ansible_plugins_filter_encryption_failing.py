# Automatically generated by Pynguin.
import ansible.plugins.filter.encryption as module_0
import ansible.parsing.yaml.objects as module_1
import ansible.module_utils.common.text.converters as module_2
import ansible.parsing.vault as module_3

def test_case_0():
    try:
        list_0 = None
        bytes_0 = b'\x9e\x10\xcb\x84+~\x0c\xcbS\xb6P#\x97\xf8'
        var_0 = module_0.do_vault(list_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        list_0 = []
        str_0 = 'C^YD\\'
        var_0 = module_0.do_vault(dict_0, list_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.do_unvault(set_0, filter_module_0)
    except BaseException:
        pass

def test_case_3():
    try:
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'\xc0?\xb1\x8c"w\xb2\xaf\xf8'
        filter_module_1 = module_0.FilterModule()
        var_0 = module_0.do_unvault(bytes_0, bytes_0)
        float_0 = -1810.2
        filter_module_2 = module_0.FilterModule()
        var_1 = filter_module_1.filters()
        var_2 = module_0.do_unvault(float_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'.m,'
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.do_unvault(bytes_0, bytes_0)
        var_1 = filter_module_0.filters()
        str_0 = 'found fuzzy extension match for {0} in {1}'
        var_2 = module_0.do_vault(str_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'siv'
        bytes_0 = b''
        var_0 = module_0.do_vault(str_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'my_secret_key'
        str_1 = 'vault_value'
        var_0 = module_0.do_unvault(str_1, str_0)
        bytes_0 = b'my_secret_key'
        bytes_1 = b'vault_value'
        var_1 = module_0.do_unvault(bytes_1, bytes_0)
        str_2 = 'my_secret_key'
        str_3 = 'vault_value'
        ansible_vault_encrypted_unicode_0 = module_1.AnsibleVaultEncryptedUnicode(str_3)
        var_2 = module_2.to_bytes(str_2)
        vault_secret_0 = module_3.VaultSecret(var_2)
        var_3 = module_0.do_unvault(ansible_vault_encrypted_unicode_0, str_2)
    except BaseException:
        pass