# Automatically generated by Pynguin.
import ansible.utils._junit_xml as module_0
import decimal as module_1

def test_case_0():
    try:
        str_0 = 'l~4\\L!w\r\n@F#(t'
        test_failure_0 = module_0.TestFailure(str_0, str_0)
        list_0 = [test_failure_0, test_failure_0, test_failure_0]
        test_case_0 = module_0.TestCase(str_0, str_0, str_0, list_0, str_0, str_0)
        element_0 = test_case_0.get_xml_element()
    except BaseException:
        pass

def test_case_1():
    try:
        test_suites_0 = module_0.TestSuites()
        str_0 = '\n6'
        test_suite_0 = module_0.TestSuite(str_0, str_0)
        list_0 = [test_suite_0, test_suite_0, test_suite_0]
        test_suites_1 = module_0.TestSuites(str_0, list_0)
        str_1 = test_suites_1.to_pretty_xml()
        var_0 = test_suite_0.__repr__()
        test_error_0 = module_0.TestError(str_0)
        test_result_0 = module_0.TestResult(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Some output'
        str_1 = 'Some type'
        str_2 = '\x0bZ[Ot'
        str_3 = 'd#eJ!t'
        dict_0 = {}
        list_0 = []
        test_suite_0 = module_0.TestSuite(str_2, str_3, str_1, dict_0, list_0, str_0, str_2)
        dict_1 = test_suite_0.get_attributes()
    except BaseException:
        pass

def test_case_3():
    try:
        test_error_0 = module_0.TestError()
        str_0 = 'aU}:('
        str_1 = ' P\\lTMpb%0"Kfh.t%\n1'
        str_2 = 'wsman_reconnections'
        optional_0 = None
        list_0 = None
        bool_0 = False
        test_case_0 = module_0.TestCase(str_2, str_0, optional_0, list_0, str_2, str_0, str_0, bool_0)
        int_0 = -1059
        list_1 = []
        test_case_1 = module_0.TestCase(str_2, int_0, str_1, test_error_0, list_0, list_1)
        list_2 = [test_case_0, test_case_1]
        test_suite_0 = module_0.TestSuite(str_0, str_1, str_1, list_2, str_1)
        str_3 = 'K4$:U^am3po\r'
        str_4 = '\n- name: Extract foo.tgz into /var/lib/foo\n  ansible.builtin.unarchive:\n    src: foo.tgz\n    dest: /var/lib/foo\n\n- name: Unarchive a file that is already on the remote machine\n  ansible.builtin.unarchive:\n    src: /tmp/foo.zip\n    dest: /usr/local/bin\n    remote_src: yes\n\n- name: Unarchive a file that needs to be downloaded (added in 2.0)\n  ansible.builtin.unarchive:\n    src: https://example.com/example.zip\n    dest: /usr/local/bin\n    remote_src: yes\n\n- name: Unarchive a file with extra options\n  ansible.builtin.unarchive:\n    src: /tmp/foo.zip\n    dest: /usr/local/bin\n    extra_opts:\n    - --transform\n    - s/^xxx/yyy/\n'
        dict_0 = {str_4: str_2}
        test_suite_1 = module_0.TestSuite(str_3, str_0, dict_0, str_3)
        list_3 = [test_suite_0, test_suite_1, test_suite_0]
        test_suites_0 = module_0.TestSuites(str_0, list_3)
        element_0 = test_suites_0.get_xml_element()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '3I'
        test_failure_0 = module_0.TestFailure(str_0, str_0)
        test_suites_0 = module_0.TestSuites(str_0)
        var_0 = test_failure_0.__repr__()
        element_0 = test_suites_0.get_xml_element()
        str_1 = 'Y /wNTDuK;q( X'
        str_2 = '~+'
        test_case_0 = module_0.TestCase(str_1, str_2, test_failure_0, str_1)
        list_0 = [test_case_0, test_case_0, test_case_0]
        test_suite_0 = module_0.TestSuite(str_0, str_0, str_0, list_0)
        str_3 = 'u:C'
        str_4 = ''
        test_failure_1 = module_0.TestFailure(str_3)
        list_1 = [test_failure_0, test_failure_1, test_failure_0]
        bool_0 = True
        test_case_1 = module_0.TestCase(str_4, element_0, list_1, str_3, bool_0)
        element_1 = test_case_1.get_xml_element()
        dict_0 = {str_3: str_3, str_0: str_3}
        str_5 = '=%S%Nyz'
        test_suite_1 = module_0.TestSuite(str_3, str_3, str_5, str_3, str_5)
        list_2 = []
        test_suite_2 = module_0.TestSuite(str_0, str_0, str_0, dict_0, list_2, str_0)
        var_1 = test_failure_0.__repr__()
        element_2 = test_suite_2.get_xml_element()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\tkw9UrJr[NQdfb"Aaytw'
        test_suite_0 = module_0.TestSuite(str_0)
        str_1 = 'Y>M\rb@A\\7]uaTf '
        str_2 = 'V?}'
        int_0 = -1380
        list_0 = []
        decimal_0 = module_1.Decimal(*list_0)
        test_failure_0 = module_0.TestFailure(str_1, str_0)
        list_1 = [test_failure_0, test_failure_0]
        bool_0 = True
        test_case_0 = module_0.TestCase(str_2, int_0, str_2, str_2, decimal_0, list_1, str_1, bool_0)
        element_0 = test_case_0.get_xml_element()
    except BaseException:
        pass