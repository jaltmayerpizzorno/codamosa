# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = ''
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        import_processor_0 = module_0.ImportProcessor()
        bool_0 = True
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(import_processor_0, bool_0, bool_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        bool_0 = None
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, bool_0, bool_0)
        var_0 = scope_replacer_0.__call__()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -564.109507
        bytes_0 = b'h\xc7q\x06\xc0&P\xc6\x7f'
        bool_0 = True
        int_0 = -1246
        import_replacer_0 = module_0.ImportReplacer(float_0, bytes_0, bool_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ':_~_N'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.disallow_proxying()
        str_0 = '\n    Create a random hex string of a specific length performanty.\n\n    :param int length length of hex string to generate\n    :return: random hex string\n    '
        import_processor_0 = module_0.ImportProcessor()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, import_processor_0)
        int_0 = None
        tuple_0 = (str_0,)
        import_replacer_0 = module_0.ImportReplacer(int_0, import_processor_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "Return a member fom the proxid regex object.\n\n        rf the regex hasn't been compiled yet, compile it\n        "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 2121.195
        str_0 = ''
        var_0 = module_0.lazy_import(float_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -2105.5
        list_0 = [float_0, float_0]
        str_0 = ',Ph]9x]B#/,aS#'
        tuple_0 = (list_0,)
        dict_0 = {str_0: float_0, str_0: float_0, float_0: tuple_0, str_0: str_0}
        tuple_1 = (list_0, str_0, list_0, dict_0)
        list_1 = [tuple_1, tuple_1, str_0, dict_0]
        list_2 = [tuple_0, float_0]
        int_0 = 587
        set_0 = set()
        str_1 = 'KE%=\r=8um7u'
        import_replacer_0 = module_0.ImportReplacer(int_0, set_0, str_1, list_2, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -91.72
        str_0 = "_fxr'aA(%~I"
        var_0 = module_0.lazy_import(float_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\\A([A-Za-z_0-9]+)=(.*)\\Z'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'LkBz?#U\x0bb49LMcX\r'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        import_processor_0 = module_0.ImportProcessor()
        str_0 = 'Q+Yi'
        str_1 = 'r\x0b<fx2aO`'
        str_2 = '`5(GLGm\\PXDUhu)^oks'
        dict_0 = {str_0: str_0, str_2: import_processor_0, str_1: str_0, str_2: str_2}
        list_0 = [str_2, dict_0, import_processor_0, str_0, str_0]
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(dict_0, list_0)
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(illegal_use_of_scope_replacer_0)
        var_1 = illegal_use_of_scope_replacer_1.__unicode__()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "Return a member fom the proxid reg$x object.\n\n        rf the regex hasn't bee compiled yet, compile it\n        "
        set_0 = {str_0, str_0, str_0}
        dict_0 = {str_0: set_0, str_0: set_0, str_0: set_0, str_0: str_0, str_0: set_0, str_0: set_0, str_0: set_0, str_0: str_0, str_0: set_0}
        float_0 = -2326.1679259009634
        import_processor_0 = module_0.ImportProcessor()
        import_replacer_0 = module_0.ImportReplacer(dict_0, float_0, str_0, import_processor_0)
        var_0 = module_0.lazy_import(import_processor_0, import_replacer_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "Return a member fom the proxid regex object.\n\n        rf the regex hasn't been compiled yet, compile it\n        "
        set_0 = {str_0}
        str_1 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
        var_0 = module_0.lazy_import(set_0, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        tuple_0 = ()
        str_0 = 'R\x0c\rD%Bw{'
        str_1 = 'kE\x0c'
        str_2 = 'XMbP>qxb]k'
        dict_0 = {str_0: tuple_0, str_0: str_0, str_1: str_0, str_2: str_1}
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, str_1)
        var_0 = module_0.lazy_import(import_replacer_0, import_replacer_0)
    except BaseException:
        pass