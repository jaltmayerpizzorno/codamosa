# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    pass

def test_case_1():
    dict_0 = {}
    lazy_list_0 = module_0.LazyList(dict_0)

def test_case_2():
    float_0 = -1631.761
    list_0 = [float_0]
    range_0 = module_0.Range(*list_0)
    var_0 = range_0.__getitem__(float_0)

def test_case_3():
    int_0 = -1158
    list_0 = [int_0, int_0]
    range_0 = module_0.Range(*list_0)
    int_1 = range_0.__len__()
    int_2 = 0
    str_0 = "JZ.{EW:2\r,:'_Q"
    str_1 = 'df0\r^&'
    complex_0 = None
    dict_0 = {str_0: str_0, str_1: str_0, str_0: complex_0, str_0: complex_0}
    tuple_0 = (dict_0,)
    iterator_0 = module_0.take(int_2, tuple_0)

def test_case_4():
    float_0 = 1.0
    sequence_0 = None
    map_list_0 = module_0.MapList(float_0, sequence_0)

def test_case_5():
    int_0 = 5
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    var_1 = list(lazy_list_0)

def test_case_6():
    bool_0 = False
    str_0 = '`*x\n.DhD'
    float_0 = 1169.227
    iterator_0 = module_0.drop_until(str_0, float_0)
    set_0 = {float_0, bool_0, str_0}
    bool_1 = True
    list_0 = [bool_1]
    var_0 = module_0.scanr(set_0, list_0)

def test_case_7():
    int_0 = -17
    list_0 = [int_0]
    range_0 = module_0.Range(*list_0)
    var_0 = range_0.__getitem__(int_0)
    int_1 = range_0.__len__()
    int_2 = range_0.__len__()

def test_case_8():
    int_0 = 10
    var_0 = range(int_0)
    iterator_0 = module_0.chunk(int_0, var_0)
    var_1 = list(iterator_0)
    var_2 = range(int_0)
    var_3 = list(iterator_0)
    var_4 = range(int_0)
    iterator_1 = module_0.chunk(int_0, var_4)
    var_5 = list(iterator_1)

def test_case_9():
    int_0 = 3
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.chunk(int_0, var_0)
    var_1 = list(iterator_0)
    int_2 = 15
    var_2 = range(int_1)
    iterator_1 = module_0.chunk(int_2, var_2)
    var_3 = list(iterator_1)
    var_4 = range(int_1)
    iterator_2 = module_0.chunk(int_1, var_4)
    var_5 = list(iterator_2)

def test_case_10():
    int_0 = 10
    int_1 = 5
    var_0 = range(int_1)
    iterator_0 = module_0.take(int_0, var_0)
    var_1 = list(iterator_0)
    iterator_1 = module_0.take(int_1, var_1)
    var_2 = list(iterator_1)
    var_3 = range(int_1)
    iterator_2 = module_0.take(int_0, var_3)
    var_4 = list(iterator_2)
    var_5 = range(int_1)
    var_6 = list(iterator_2)
    int_2 = 3
    var_7 = []
    iterator_3 = module_0.take(int_2, var_7)
    var_8 = list(iterator_3)
    var_9 = range(int_0)
    var_10 = iter(var_9)

def test_case_11():
    int_0 = 5
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    var_1 = list(lazy_list_0)
    var_2 = lazy_list_0.__iter__()

def test_case_12():
    int_0 = 5
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    var_1 = list(lazy_list_0)
    var_2 = list(lazy_list_0)
    lazy_list_1 = module_0.LazyList(var_0)

def test_case_13():
    int_0 = 0
    var_0 = range(int_0)
    str_0 = 'a.y[y-.'
    iterator_0 = module_0.split_by(str_0, separator=str_0)
    var_1 = list(iterator_0)

def test_case_14():
    int_0 = 0
    var_0 = lambda x: x % int_0 == int_0
    int_1 = 5
    var_1 = range(int_1)
    int_2 = 2
    var_2 = lambda x: x % int_2 == int_0
    str_0 = 'a.b.c'
    str_1 = '.'
    iterator_0 = module_0.split_by(str_0, separator=str_1)
    var_3 = list(iterator_0)
    var_4 = list(iterator_0)

def test_case_15():
    int_0 = 0
    var_0 = lambda x: x % int_0 == int_0
    int_1 = 5
    var_1 = range(int_1)
    int_2 = 2
    var_2 = lambda x: x % int_2 == int_0
    iterator_0 = module_0.split_by(var_1, criterion=var_2)
    str_0 = 'a.b.c'
    str_1 = '.'
    iterator_1 = module_0.split_by(str_0, separator=str_1)
    var_3 = list(iterator_1)
    str_2 = '...a...b...c...'
    bool_0 = True
    iterator_2 = module_0.split_by(str_2, bool_0, separator=str_1)
    var_4 = list(iterator_2)

def test_case_16():
    bytes_0 = b''
    lazy_list_0 = module_0.LazyList(bytes_0)
    iterator_0 = module_0.drop_until(lazy_list_0, lazy_list_0)
    var_0 = list(iterator_0)

def test_case_17():
    int_0 = -31
    var_0 = range(int_0)
    iterator_0 = module_0.drop_until(var_0, var_0)
    var_1 = list(iterator_0)