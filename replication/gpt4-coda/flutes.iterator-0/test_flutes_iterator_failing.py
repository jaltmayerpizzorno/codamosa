# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        bool_0 = True
        float_0 = None
        var_0 = module_0.scanr(bool_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x0fP2\x81#}X\x8a\x7f\xbb\xd7h\xca\xd2\xfa\xaa\x00A\xb1'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__iter__()
        var_1 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_2():
    try:
        iterable_0 = None
        lazy_list_0 = module_0.LazyList(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xbc\xf7\xc9;r\xe5\xa7\x9f\xcd\xd9\xdb\xbc\x12'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x0fP2\x81#}X\x8a\x7f\xbb\xd7h\xca\xd2\xfa\xaa\x00A\xb1'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_5():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'kV,\xba\xe2\x1el\xbb\xae!\x0f\xfc\x82\x15\x96j\xb4\xa9'
        int_0 = -685
        bytes_1 = b'\xe0\xed'
        iterator_0 = module_0.chunk(int_0, bytes_1)
        bool_0 = False
        map_list_0 = module_0.MapList(iterator_0, bool_0)
        var_0 = map_list_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 5
        var_0 = range(int_0)
        lazy_list_0 = module_0.LazyList(var_0)
        var_1 = list(lazy_list_0)
        str_0 = ''
        dict_0 = {}
        map_list_0 = module_0.MapList(str_0, dict_0)
        iterator_0 = map_list_0.__iter__()
        list_0 = [int_0, lazy_list_0]
        var_2 = lazy_list_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -300.2327
        str_0 = 'DN*hDFCjS.]'
        map_list_0 = module_0.MapList(float_0, str_0)
        int_0 = map_list_0.__len__()
        int_1 = 1270
        set_0 = set()
        iterator_0 = module_0.drop(int_1, set_0)
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -2588
        list_0 = [int_0, int_0, int_0, int_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 10
        var_0 = range(int_0)
        var_1 = range(int_0)
        var_2 = list(var_1)
        int_1 = 5
        var_3 = range(int_1)
        var_4 = list(var_2)
        var_5 = []
        lazy_list_0 = module_0.LazyList(var_5)
        var_6 = list(lazy_list_0)
        list_0 = [var_3, var_4, var_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        list_0 = [bool_0]
        range_0 = module_0.Range(*list_0)
        iterator_0 = range_0.__iter__()
        lazy_list_0 = module_0.LazyList(list_0)
        str_0 = 'The return code of the executed Bommand.'
        lazy_list_1 = module_0.LazyList(str_0)
        int_0 = range_0.__next__()
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = True
        list_0 = [bool_0]
        range_0 = module_0.Range(*list_0)
        iterator_0 = range_0.__iter__()
        lazy_list_0 = module_0.LazyList(list_0)
        str_0 = 'The return code of the executed Bommand.'
        int_0 = range_0.__next__()
        lazy_list_1 = module_0.LazyList(str_0)
        var_0 = lazy_list_1.__len__()
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -17
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(int_0)
        iterator_0 = range_0.__iter__()
        bytes_0 = b''
        iterator_1 = module_0.chunk(int_0, bytes_0)
        range_1 = module_0.Range()
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -825
        set_0 = {int_0, int_0}
        lazy_list_0 = module_0.LazyList(set_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 927
        int_1 = -825
        set_0 = {int_1, int_1}
        lazy_list_0 = module_0.LazyList(set_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 984
        float_0 = 704.741731
        str_0 = 'g)4i"0=xj ^SOaWIB'
        lazy_list_0 = module_0.LazyList(str_0)
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        map_list_0 = module_0.MapList(lazy_list_0, range_0)
        var_0 = map_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        tuple_0 = ()
        int_0 = 984
        list_0 = [int_0, int_0, tuple_0]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = lazy_list_0.__iter__()
        bytes_0 = b't\xb1\xb0\xb3\xb6\x122\x18U\x91\x0c\xa1'
        map_list_0 = module_0.MapList(bytes_0, tuple_0)
        int_1 = map_list_0.__len__()
        iterable_0 = None
        bool_0 = False
        str_0 = None
        iterator_0 = module_0.split_by(iterable_0, bool_0, criterion=str_0)
        var_1 = module_0.scanr(iterator_0, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        set_0 = None
        str_0 = 'uH\x0c_SG:8iZFb[gq2\r'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 4431
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0, int_0: int_0}
        iterator_0 = module_0.chunk(int_0, dict_0)
        int_1 = 3
        int_2 = 1
        int_3 = 2
        int_4 = 4
        int_5 = 5
        int_6 = 6
        int_7 = 7
        int_8 = 8
        int_9 = 9
        int_10 = [int_2, int_3, int_1, int_4, int_5, int_6, int_7, int_8, int_9]
        iterator_1 = module_0.chunk(int_1, int_10)
        var_0 = list(iterator_1)
        var_1 = range(int_5)
        int_11 = 1339
        int_12 = 59
        str_0 = 'O%,m08\r'
        map_list_0 = module_0.MapList(int_12, str_0)
        var_2 = map_list_0.__getitem__(int_11)
    except BaseException:
        pass

def test_case_20():
    try:
        iterable_0 = None
        bool_0 = False
        iterator_0 = module_0.split_by(iterable_0, bool_0)
        list_0 = [iterator_0, iterator_0]
        bool_1 = True
        iterator_1 = module_0.split_by(list_0, bool_1)
        sequence_0 = None
        map_list_0 = module_0.MapList(iterator_1, sequence_0)
        dict_0 = {}
        list_1 = [bool_0, iterable_0]
        var_0 = module_0.scanr(map_list_0, dict_0, *list_1)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        str_0 = "d)4d%B'%>,>BW'p"
        list_0 = [bool_0]
        var_0 = module_0.scanr(bool_0, str_0, *list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 0
        var_0 = range(int_0)
        iterator_0 = module_0.chunk(int_0, int_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        str_0 = 'a.yby.'
        str_1 = 'l'
        iterator_1 = module_0.split_by(str_0, separator=str_1)
        var_1 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 10
        var_0 = range(int_0)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        iterator_1 = module_0.take(int_0, var_1)
        int_1 = 0
        var_2 = range(int_0)
        iterator_2 = module_0.take(int_1, var_2)
        var_3 = list(iterator_2)
        var_4 = range(int_1)
        var_5 = list(iterator_2)
        int_2 = 3
        iterator_3 = module_0.take(int_2, int_2)
        var_6 = list(iterator_3)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 10
        int_1 = 5
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        iterator_1 = module_0.take(int_1, var_1)
        var_2 = list(iterator_1)
        int_2 = -22
        var_3 = range(int_1)
        iterator_2 = module_0.take(int_2, var_3)
        var_4 = list(iterator_2)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 10
        int_1 = 1
        int_2 = 2
        int_3 = [int_1, int_2, int_2]
        iterator_0 = module_0.drop(int_0, int_3)
        var_0 = list(iterator_0)
        int_4 = [int_1, int_2, int_3]
        iterator_1 = module_0.drop(int_0, int_4)
        var_1 = list(iterator_1)
        int_5 = 0
        int_6 = [int_1, int_2, int_1]
        iterator_2 = module_0.drop(int_5, int_6)
        var_2 = list(iterator_2)
        int_7 = 1
        int_8 = 2
        int_9 = 3
        int_10 = [int_7, int_8, int_9]
        iterator_3 = module_0.drop(int_0, int_10)
        var_3 = list(iterator_3)
        int_11 = 5
        var_4 = range(int_11)
        iterator_4 = module_0.drop(var_3, var_4)
        var_5 = list(iterator_4)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 3
        var_0 = []
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = list(iterator_0)
        int_1 = 10
        int_2 = 1
        int_3 = 2
        int_4 = [int_2, int_3, int_0]
        iterator_1 = module_0.drop(int_1, int_4)
        var_2 = list(iterator_1)
        int_5 = [int_2, int_3, int_0]
        iterator_2 = module_0.drop(int_0, int_5)
        var_3 = list(iterator_2)
        int_6 = 0
        int_7 = [int_2, int_3, int_0]
        iterator_3 = module_0.drop(int_6, int_7)
        var_4 = list(iterator_3)
        int_8 = -1
        iterator_4 = module_0.drop(int_8, int_1)
        var_5 = list(iterator_4)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 3
        iterator_0 = module_0.drop(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 0
        var_0 = lambda x: x % int_0 == int_0
        int_1 = 5
        var_1 = range(int_1)
        int_2 = 2
        var_2 = lambda x: x % int_2 == int_0
        iterator_0 = module_0.split_by(var_1, criterion=var_2)
        var_3 = list(iterator_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 15
        int_1 = 24
        var_0 = range(int_1)
        int_2 = -3292
        iterator_0 = module_0.chunk(int_0, int_2)
        lazy_list_0 = module_0.LazyList(iterator_0)
        str_0 = 'l'
        iterator_1 = module_0.split_by(str_0, separator=str_0)
        var_1 = list(iterator_1)
        var_2 = lazy_list_0.__getitem__(int_1)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = -3229
        str_0 = '>\x0b0'
        iterator_0 = module_0.chunk(int_0, str_0)
        dict_0 = {iterator_0: int_0, iterator_0: iterator_0}
        map_list_0 = module_0.MapList(dict_0, iterator_0)
        iterator_1 = map_list_0.__iter__()
        var_0 = range(int_0)
        var_1 = list(var_0)
        list_0 = [int_0, int_0, var_1]
        iterator_2 = module_0.take(int_0, list_0)
        int_1 = 5
        lazy_list_0 = module_0.LazyList(map_list_0)
        iterator_3 = module_0.split_by(int_1)
        var_2 = list(lazy_list_0)
    except BaseException:
        pass

def test_case_31():
    try:
        bytes_0 = b'm\xbd\xb2\xae\xb1\t\xc5\x1d\x07\xf9=\x0f/\xe9P'
        lazy_list_0 = module_0.LazyList(bytes_0)
        iterator_0 = module_0.drop_until(lazy_list_0, lazy_list_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 10
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 5
        var_0 = lambda x: x > int_0
        iterator_0 = module_0.drop_until(var_0, int_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 1
        int_1 = 0
        var_0 = range(int_1)
        int_2 = -3292
        iterator_0 = module_0.chunk(int_0, int_2)
        lazy_list_0 = module_0.LazyList(iterator_0)
        str_0 = 'a.yby.'
        str_1 = None
        iterator_1 = module_0.split_by(str_0, separator=str_1)
        var_1 = list(iterator_1)
    except BaseException:
        pass

def test_case_35():
    try:
        bytes_0 = b'm\xbd\xb2\xae\xb1\t\xc5\x1d\x07\xf9=\x0f/\xe9P'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__iter__()
        iterator_0 = module_0.drop_until(lazy_list_0, lazy_list_0)
        bool_0 = True
        int_0 = -551
        var_1 = lazy_list_0.__getitem__(bool_0)
        iterator_1 = module_0.chunk(int_0, bytes_0)
        var_2 = list(iterator_0)
    except BaseException:
        pass