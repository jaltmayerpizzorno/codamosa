# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    try:
        var_0 = module_0.fn()
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        var_0 = None
        var_1 = module_0.identity(var_0)
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_0, callable_0, callable_0, callable_1, callable_1, callable_1]
        var_2 = module_0.compose(callable_0, *list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 351
        int_1 = module_0.increase(int_0)
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_0, callable_0, callable_1, callable_1, callable_1]
        var_0 = module_0.compose(callable_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1]
        var_0 = module_0.compose(list_0, *list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        float_0 = None
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        var_0 = module_0.cond(list_0)
        list_1 = [float_0, float_0, var_0]
        var_1 = module_0.compose(callable_0, *list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = True
        str_0 = 'S&v0G)zSeBR,D,tcpw'
        dict_0 = {str_0: int_0}
        list_0 = [dict_0, int_0]
        var_0 = module_0.pipe(dict_0, *list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callable_0 = None
        callable_1 = None
        tuple_0 = (callable_1, callable_0)
        list_0 = [tuple_0, tuple_0, tuple_0]
        var_0 = module_0.cond(list_0)
        dict_0 = {callable_0: callable_0, callable_0: callable_0}
        list_1 = [dict_0, callable_0, callable_0, callable_0, callable_0, var_0]
        list_2 = [list_1]
        var_1 = module_0.compose(list_2, *list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        var_0 = module_0.cond(list_0)
        bytes_0 = b'\xc8\xe6\xd8\xb1F\xcb'
        list_1 = [bytes_0, var_0]
        var_1 = module_0.compose(list_1, *list_1)
    except BaseException:
        pass