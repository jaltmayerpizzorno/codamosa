# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    host_0 = module_0.Host()

def test_case_1():
    host_0 = module_0.Host()
    var_0 = host_0.__getstate__()

def test_case_2():
    bytes_0 = b''
    set_0 = {bytes_0, bytes_0}
    host_0 = module_0.Host(set_0)
    var_0 = host_0.populate_ancestors()
    var_1 = host_0.get_name()
    int_0 = -4436
    host_1 = module_0.Host(bytes_0, int_0)
    host_2 = module_0.Host(host_1)
    str_0 = 'fork #1 failed: %d (%s)\n'
    host_3 = module_0.Host(str_0)
    var_2 = host_3.get_magic_vars()
    var_3 = host_2.__ne__(str_0)
    tuple_0 = ()
    host_4 = module_0.Host()
    var_4 = host_4.remove_group(tuple_0)

def test_case_3():
    bytes_0 = b'['
    host_0 = module_0.Host(bytes_0)
    host_1 = module_0.Host(host_0)
    var_0 = host_1.__hash__()

def test_case_4():
    host_0 = module_0.Host()
    var_0 = host_0.__str__()

def test_case_5():
    host_0 = module_0.Host()
    var_0 = host_0.__repr__()

def test_case_6():
    bytes_0 = b''
    set_0 = {bytes_0, bytes_0}
    host_0 = module_0.Host(set_0)
    var_0 = host_0.populate_ancestors()
    var_1 = host_0.populate_ancestors()
    var_2 = host_0.get_name()
    int_0 = -4436
    host_1 = module_0.Host(bytes_0, int_0)

def test_case_7():
    bytes_0 = b''
    set_0 = {bytes_0, bytes_0}
    host_0 = module_0.Host(set_0)
    var_0 = host_0.get_name()
    bytes_1 = b'\x8d0$\xf9\x19\x8e\xebh\x8e,\xd2\xa4k\xa8\x93\xf6\xa5\x1bx'
    var_1 = host_0.populate_ancestors(bytes_1)
    var_2 = host_0.get_name()
    str_0 = '4aX(8l<%Y_'
    host_1 = module_0.Host(str_0)
    str_1 = '"v*^('
    host_2 = module_0.Host(str_1)
    var_3 = host_1.get_magic_vars()
    float_0 = -4708.0
    var_4 = host_0.remove_group(float_0)
    var_5 = host_2.get_groups()
    var_6 = host_0.__str__()

def test_case_8():
    str_0 = 'tes"server.example.com'
    host_0 = module_0.Host(str_0)
    group_0 = module_1.Group(str_0)
    var_0 = host_0.add_group(group_0)

def test_case_9():
    bytes_0 = b'u\t'
    set_0 = {bytes_0, bytes_0}
    host_0 = module_0.Host()
    host_1 = module_0.Host(set_0)
    var_0 = host_1.remove_group(set_0)

def test_case_10():
    bytes_0 = b'u\t'
    set_0 = {bytes_0, bytes_0}
    int_0 = -4436
    host_0 = module_0.Host(bytes_0, int_0)
    host_1 = module_0.Host()
    host_2 = module_0.Host(set_0)
    var_0 = host_2.remove_group(set_0)

def test_case_11():
    host_0 = module_0.Host()
    var_0 = host_0.get_groups()

def test_case_12():
    str_0 = 'fork #1 failed: %d (%s)\n'
    host_0 = module_0.Host(str_0)
    var_0 = host_0.get_magic_vars()

def test_case_13():
    dict_0 = {}
    bool_0 = True
    host_0 = module_0.Host(bool_0)
    var_0 = host_0.populate_ancestors()
    str_0 = 'UKt^6n\notRxF\\,P-L:U'
    var_1 = host_0.__getstate__()
    tuple_0 = None
    list_0 = [dict_0, str_0, var_0, bool_0]
    var_2 = host_0.set_variable(tuple_0, list_0)
    var_3 = host_0.__str__()
    set_0 = None
    var_4 = host_0.set_variable(set_0, list_0)
    host_1 = module_0.Host()
    str_1 = '\x0b<7Y<Cq'
    host_2 = module_0.Host(str_1)
    var_5 = host_2.remove_group(list_0)

def test_case_14():
    str_0 = 'testhost'
    host_0 = module_0.Host(str_0)
    str_1 = 'ansible_connection'
    var_0 = host_0.set_variable(str_1, str_0)
    str_2 = 'ansible_ssh_settings'
    int_0 = 22
    var_1 = {str_0: str_0, str_0: int_0}
    var_2 = host_0.set_variable(str_2, var_1)
    int_1 = {str_2: int_0}
    var_3 = host_0.set_variable(str_2, int_1)

def test_case_15():
    str_0 = 'test_group'
    group_0 = module_1.Group(str_0)
    var_0 = group_0.serialize()
    str_1 = 'name'
    str_2 = 'vars'
    str_3 = 'address'
    str_4 = 'uuid'
    str_5 = 'groups'
    str_6 = 'implicit'
    str_7 = 'test_host'
    str_8 = 'ansible_connection'
    str_9 = 'ssh'
    str_10 = {str_8: str_9}
    str_11 = '192.168.1.100'
    str_12 = '123e4567-e89b-12d3-a456-426614174000'
    var_1 = [var_0]
    bool_0 = False
    var_2 = {str_1: str_7, str_2: str_10, str_3: str_11, str_4: str_12, str_5: var_1, str_6: bool_0}
    host_0 = module_0.Host()
    var_3 = host_0.deserialize(var_2)

def test_case_16():
    str_0 = 'tt0ost'
    host_0 = module_0.Host(str_0)
    str_1 = 'gro\x0bI1'
    group_0 = module_1.Group(str_1)
    var_0 = host_0.add_group(group_0)
    var_1 = host_0.get_groups()
    var_2 = host_0.remove_group(group_0)

def test_case_17():
    str_0 = 'testhost'
    host_0 = module_0.Host(str_0)
    str_1 = 'group1'
    group_0 = module_1.Group(str_1)
    str_2 = 'group2'
    group_1 = module_1.Group(str_2)
    str_3 = 'group3'
    group_2 = module_1.Group(str_3)
    var_0 = host_0.add_group(group_0)
    var_1 = host_0.add_group(group_1)
    var_2 = host_0.get_groups()
    var_3 = host_0.get_groups()
    var_4 = host_0.add_group(group_0)

def test_case_18():
    group_0 = module_1.Group()
    str_0 = '[\x0cG\\z"'
    dict_0 = {str_0: str_0}
    host_0 = module_0.Host(dict_0)
    var_0 = host_0.__eq__(group_0)
    str_1 = 'testhost'
    host_1 = module_0.Host(str_1)
    str_2 = 'group1'
    group_1 = module_1.Group(str_2)
    str_3 = 'group2'
    group_2 = module_1.Group(str_3)
    str_4 = 'group3'
    group_3 = module_1.Group(str_4)
    var_1 = host_1.add_group(group_1)
    var_2 = host_1.add_group(group_2)
    var_3 = host_1.add_group(group_3)
    var_4 = host_1.get_groups()
    var_5 = host_1.get_groups()
    var_6 = host_1.get_groups()
    var_7 = host_1.remove_group(group_2)
    var_8 = host_1.populate_ancestors()
    var_9 = host_1.get_groups()
    str_5 = 'group4'
    group_4 = module_1.Group(str_5)
    var_10 = host_1.remove_group(group_4)

def test_case_19():
    str_0 = 'tes"server.example.com'
    host_0 = module_0.Host(str_0)
    group_0 = module_1.Group(str_0)
    var_0 = host_0.add_group(group_0)
    var_1 = host_0.get_magic_vars()

def test_case_20():
    str_0 = 'testhost'
    host_0 = module_0.Host(str_0)
    group_0 = module_1.Group(str_0)
    str_1 = 'group2'
    group_1 = module_1.Group(str_1)
    group_2 = module_1.Group(str_0)
    var_0 = host_0.add_group(group_1)
    var_1 = group_0.add_child_group(group_2)
    var_2 = host_0.add_group(group_2)

def test_case_21():
    str_0 = 'testhost'
    host_0 = module_0.Host(str_0)
    group_0 = module_1.Group(str_0)
    str_1 = 'group2'
    group_1 = module_1.Group(str_1)
    group_2 = module_1.Group(str_0)
    var_0 = host_0.add_group(group_0)
    var_1 = host_0.add_group(group_1)
    var_2 = host_0.get_groups()
    var_3 = group_0.add_child_group(group_2)
    var_4 = host_0.add_group(group_2)