

# Generated at 2024-03-18 06:04:10.294989
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:04:11.426819
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:04:12.379304
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:04:13.766726
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:04:20.609574
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test with specific birth date and male gender
    birth_date = datetime(1990, 1, 30)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(pesel) == 11
    assert pesel[:2] == '90'
    assert pesel[2:4] == '01'
    assert pesel[4:6] == '30'
    assert int(pesel[-2]) % 2 != 0  # Male gender digit should be odd

    # Test with specific birth date and female gender
    birth_date = datetime(1985, 12, 15)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(pesel) == 

# Generated at 2024-03-18 06:04:21.716771
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:04:28.089971
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test with specific birth date and male gender
    birth_date = datetime(1990, 1, 30)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(pesel) == 11
    assert int(pesel[2:4]) == 1  # Month of January
    assert int(pesel[4:6]) == 30  # Day of birth
    assert int(pesel[9]) % 2 != 0  # Male gender digit

    # Test with specific birth date and female gender
    birth_date = datetime(1990, 1, 30)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(pesel) == 

# Generated at 2024-03-18 06:04:34.529636
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test with specific birth date and male gender
    birth_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[2:4]) == birth_date.month
    assert int(male_pesel[4:6]) == birth_date.day
    assert int(male_pesel[9]) % 2 != 0  # Male gender digit should be odd

    # Test with specific birth date and female gender
    birth_date = datetime(1985, 12, 15)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(female_pesel)

# Generated at 2024-03-18 06:04:35.901305
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:04:47.340096
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation without specifying birth date or gender
    pesel = provider.pesel()
    assert len(pesel) == 11
    assert pesel.isdigit()

    # Test PESEL generation with specified birth date
    birth_date = datetime(1990, 1, 1)
    pesel = provider.pesel(birth_date=birth_date)
    assert len(pesel) == 11
    assert pesel.isdigit()
    assert pesel[:2] == '90'
    assert pesel[2:4] == '01'

    # Test PEEL generation with specified gender
    pesel_male = provider.pesel(gender=Gender.MALE)
    pesel_female = provider.pesel(gender=Gender.FEMALE)
    assert int(pesel_male[-2]) % 

# Generated at 2024-03-18 06:04:59.311879
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:05:05.655248
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test with specific birth date and male gender
    birth_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[2:4]) == birth_date.month
    assert int(male_pesel[4:6]) == birth_date.day
    assert int(male_pesel[9]) % 2 != 0  # Male gender digit should be odd

    # Test with specific birth date and female gender
    birth_date = datetime(1990, 1, 30)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(female_pesel)

# Generated at 2024-03-18 06:05:06.911213
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:05:45.495327
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation without specifying birth date or gender
    pesel = provider.pesel()
    assert len(pesel) == 11

    # Test PESEL generation with a specific birth date
    birth_date = datetime(1990, 1, 1)
    pesel = provider.pesel(birth_date=birth_date)
    assert len(pesel) == 11
    assert pesel[:2] == '90'
    assert pesel[2:4] == '01'

    # Test PESEL generation with a specific gender
    pesel_male = provider.pesel(gender=Gender.MALE)
    pesel_female = provider.pesel(gender=Gender.FEMALE)
    assert int(pesel_male[-2]) % 2 == 1  # Male PESEL should

# Generated at 2024-03-18 06:05:48.173765
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:05:58.834235
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation without specifying birth date or gender
    pesel = provider.pesel()
    assert len(pesel) == 11

    # Test PESEL generation with a specific birth date
    birth_date = datetime(1990, 1, 1)
    pesel = provider.pesel(birth_date=birth_date)
    assert len(pesel) == 11
    assert pesel[:2] == '90'
    assert pesel[2:4] == '01'

    # Test PESEL generation for a male
    male_pesel = provider.pesel(gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[-2]) % 2 != 0  # Male PESEL should have an odd penultimate

# Generated at 2024-03-18 06:05:59.915217
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:06:17.423816
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test with specific birth date and male gender
    birth_date = datetime(1990, 1, 30)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(pesel) == 11
    assert int(pesel[2:4]) == 1  # Month of January
    assert int(pesel[4:6]) == 30  # Day
    assert int(pesel[9]) % 2 != 0  # Male gender digit

    # Test with specific birth date and female gender
    birth_date = datetime(1990, 1, 30)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(pesel) == 11


# Generated at 2024-03-18 06:06:26.950766
```python
    provider = PolandSpecProvider()
    # Test with no birth_date and no gender
    pesel = provider.pesel()
    assert len(pesel) == 11
    assert pesel.isdigit()

    # Test with specific birth_date and male gender
    birth_date = Datetime().datetime(1990, 1, 1)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert male_pesel.isdigit()
    assert int(male_pesel[9]) % 2 == 1  # Male PESEL numbers have an odd 10th digit

    # Test with specific birth_date and female gender
    birth_date = Datetime().datetime(1990, 1, 1)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert

# Generated at 2024-03-18 06:06:35.673817
```python
    provider = PolandSpecProvider()
    # Test with no birth_date and no gender specified
    pesel_any = provider.pesel()
    assert len(pesel_any) == 11 and pesel_any.isdigit()

    # Test with specific birth_date and male gender
    birth_date_male = Datetime().datetime(1990, 1, 1)
    pesel_male = provider.pesel(birth_date=birth_date_male, gender=Gender.MALE)
    assert len(pesel_male) == 11 and pesel_male.isdigit() and int(pesel_male[9]) % 2 == 1

    # Test with specific birth_date and female gender
    birth_date_female = Datetime().datetime(1990, 1, 1)
    pesel_female = provider.pesel(birth_date=birth_date_female, gender=Gender.FEMALE)
    assert len(pesel_female) == 11 and

# Generated at 2024-03-18 06:07:07.182945
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with known birth date and male gender
    birth_date = datetime(1990, 1, 1)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[9]) % 2 == 1  # Male PESEL should have an odd 10th digit
    assert male_pesel[:2] == '90'  # Year 1990 should be represented as '90'
    assert male_pesel[2:4] == '01'  # January should be '01'

    # Test PESEL generation with known birth date and female gender
    birth_date = datetime(2000, 12, 31)
    female_pesel = provider

# Generated at 2024-03-18 06:07:08.006290
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:07:08.975276
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:07:11.172189
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:07:19.351868
```python
    provider = PolandSpecProvider()
    # Test with no birth_date and no gender
    pesel = provider.pesel()
    assert len(pesel) == 11 and pesel.isdigit()

    # Test with specific birth_date and male gender
    birth_date = Datetime().datetime(1990, 1, 1)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11 and male_pesel.isdigit()
    assert int(male_pesel[9]) % 2 == 1  # Male PESEL numbers have an odd 10th digit

    # Test with specific birth_date and female gender
    birth_date = Datetime().datetime(1990, 1, 1)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(female_pes

# Generated at 2024-03-18 06:07:20.187087
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:07:21.280976
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:07:22.370381
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:07:30.909466
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with known birth date and male gender
    birth_date = datetime(1990, 1, 1)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[9]) % 2 == 1  # Male PESEL numbers have an odd 10th digit

    # Test PESEL generation with known birth date and female gender
    birth_date = datetime(1990, 1, 1)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(female_pesel) == 11
    assert int(female_pesel[9]) % 2 == 0  # Female

# Generated at 2024-03-18 06:07:39.424222
```python
    provider = PolandSpecProvider()
    # Test with no birth_date and no gender
    pesel = provider.pesel()
    assert len(pesel) == 11
    assert pesel.isdigit()

    # Test with specific birth_date and male gender
    birth_date = Datetime().datetime(1990, 1, 1)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(pesel) == 11
    assert pesel.isdigit()
    assert int(pesel[9]) % 2 == 1  # Male PESEL numbers have an odd 10th digit

    # Test with specific birth_date and female gender
    birth_date = Datetime().datetime(1990, 1, 1)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(pesel)

# Generated at 2024-03-18 06:07:59.985430
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:08:00.880255
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:08:08.895149
```python
    provider = PolandSpecProvider()
    # Test with no birth_date and no gender
    pesel = provider.pesel()
    assert len(pesel) == 11
    assert pesel.isdigit()

    # Test with specific birth_date and male gender
    birth_date = Datetime().datetime(1990, 1, 1)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert male_pesel.isdigit()
    assert int(male_pesel[9]) % 2 == 1  # Male gender digit should be odd

    # Test with specific birth_date and female gender
    birth_date = Datetime().datetime(1990, 1, 1)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(female_pesel

# Generated at 2024-03-18 06:08:09.730692
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:08:18.347684
```python
    provider = PolandSpecProvider()
    # Test with no birth_date and no gender
    pesel = provider.pesel()
    assert len(pesel) == 11
    assert pesel.isdigit()

    # Test with specific birth_date and male gender
    birth_date = Datetime().datetime(1990, 1, 1)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert male_pesel.isdigit()
    assert int(male_pesel[9]) % 2 == 1  # Male PESEL numbers have an odd 10th digit

    # Test with specific birth_date and female gender
    birth_date = Datetime().datetime(1990, 1, 1)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert

# Generated at 2024-03-18 06:08:19.199546
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:08:26.830938
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test with specific birth date and male gender
    birth_date = datetime(1990, 1, 30)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(pesel) == 11
    assert int(pesel[0:2]) == 90
    assert int(pesel[2:4]) == 1
    assert int(pesel[4:6]) == 30
    assert int(pesel[9]) % 2 != 0  # Male gender digit should be odd

    # Test with specific birth date and female gender
    birth_date = datetime(1990, 1, 30)
    pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
   

# Generated at 2024-03-18 06:08:28.005800
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:08:29.348273
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:08:36.555575
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with known birth date and male gender
    birth_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[9]) % 2 != 0  # Male PESEL should have an odd 10th digit

    # Test PESEL generation with known birth date and female gender
    birth_date = datetime(1990, 1, 30)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)
    assert len(female_pesel) == 11
    assert int(female_pesel[9]) % 2 == 0  # Female

# Generated at 2024-03-18 06:09:28.367370
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with a known date and gender
    known_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=known_date, gender=Gender.MALE)
    female_pesel = provider.pesel(birth_date=known_date, gender=Gender.FEMALE)

    assert len(male_pesel) == 11, "PESEL should have 11 digits"
    assert len(female_pesel) == 11, "PESEL should have 11 digits"
    assert male_pesel[-2] in '13579', "PESEL for males should have an odd penultimate digit"
    assert female_pesel[-2] in '02468', "PESEL for females should have an even penultimate digit"
    assert male_pesel[:2] ==

# Generated at 2024-03-18 06:09:29.748349
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:09:36.293762
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation without specifying birth date or gender
    pesel = provider.pesel()
    assert len(pesel) == 11

    # Test PESEL generation with a specific birth date
    birth_date = datetime(1990, 1, 1)
    pesel = provider.pesel(birth_date=birth_date)
    assert len(pesel) == 11
    assert pesel[:2] == '90'
    assert pesel[2:4] == '01'

    # Test PESEL generation with a specific gender
    pesel_male = provider.pesel(gender=Gender.MALE)
    assert len(pesel_male) == 11
    assert int(pesel_male[-2]) % 2 != 0  # Male PESEL should have an odd pen

# Generated at 2024-03-18 06:09:37.593538
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:09:38.744800
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:09:51.126354
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with known birth date and gender
    birth_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)

    assert len(male_pesel) == 11, "PESEL should have 11 digits"
    assert len(female_pesel) == 11, "PESEL should have 11 digits"
    assert male_pesel[:6] == '900130', "PESEL should start with '900130' for males born on 1990-01-30"
    assert female_pesel[:6] == '900130', "PESEL should start with '900130' for females born

# Generated at 2024-03-18 06:10:04.422382
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with a known birth date and gender
    birth_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)

    assert len(male_pesel) == 11, "PESEL should have 11 digits"
    assert len(female_pesel) == 11, "PESEL should have 11 digits"
    assert male_pesel[:6] == '900130', "PESEL should start with '900130' for the given birth date"
    assert female_pesel[:6] == '900130', "PESEL should start with '900130' for the given birth date"
    assert

# Generated at 2024-03-18 06:10:05.827241
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:10:07.310835
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:10:08.202082
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:11:25.419189
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with a known date and gender
    known_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=known_date, gender=Gender.MALE)
    female_pesel = provider.pesel(birth_date=known_date, gender=Gender.FEMALE)

    assert len(male_pesel) == 11, "PESEL should have 11 digits"
    assert len(female_pesel) == 11, "PESEL should have 11 digits"
    assert male_pesel[:6] == '900130', "PESEL should start with '900130' for the given date"
    assert female_pesel[:6] == '900130', "PESEL should start with '900130' for the given date"
    assert int(male

# Generated at 2024-03-18 06:11:35.371360
```python
    provider = PolandSpecProvider()
    # Test with no birth_date and no gender specified
    pesel_any = provider.pesel()
    assert len(pesel_any) == 11 and pesel_any.isdigit()

    # Test with specific birth_date and male gender
    birth_date_male = Datetime().datetime(year=1990, month=1, day=1)
    pesel_male = provider.pesel(birth_date=birth_date_male, gender=Gender.MALE)
    assert len(pesel_male) == 11 and pesel_male.isdigit() and int(pesel_male[9]) % 2 == 1

    # Test with specific birth_date and female gender
    birth_date_female = Datetime().datetime(year=1990, month=1, day=1)
    pesel_female = provider.pesel(birth_date=birth_date_female, gender=Gender.FEMALE)
    assert len(pesel

# Generated at 2024-03-18 06:11:41.399006
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with known date and male gender
    birth_date = datetime(1990, 1, 1)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[2:4]) == 1  # Month for 1990 should be 01
    assert int(male_pesel[4:6]) == 1  # Day should be 01
    assert int(male_pesel[9]) % 2 != 0  # Gender digit for male should be odd

    # Test PESEL generation with known date and female gender
    birth_date = datetime(1990, 1, 1)
    female_pesel = provider.pesel

# Generated at 2024-03-18 06:11:48.436808
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with known birth date and gender
    birth_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    female_pesel = provider.pesel(birth_date=birth_date, gender=Gender.FEMALE)

    assert len(male_pesel) == 11, "PESEL should have 11 digits"
    assert len(female_pesel) == 11, "PESEL should have 11 digits"
    assert male_pesel[:6] == '900130', "PESEL should start with '900130' for males born on 1990-01-30"
    assert female_pesel[:6] == '900130', "PESEL should start with '900130' for females born

# Generated at 2024-03-18 06:11:49.454388
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:11:56.517352
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation with known birth date and male gender
    birth_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[2:4]) == 1  # Month for 1990 should be 01
    assert int(male_pesel[4:6]) == 30  # Day should be 30
    assert int(male_pesel[9]) % 2 != 0  # Gender digit for males should be odd

    # Test PESEL generation with known birth date and female gender
    birth_date = datetime(1990, 1, 30)
    female_pesel = provider.p

# Generated at 2024-03-18 06:11:57.297224
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:12:04.589244
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test PESEL generation without specifying birth date or gender
    pesel = provider.pesel()
    assert len(pesel) == 11

    # Test PESEL generation with a specific birth date
    birth_date = datetime(1990, 1, 1)
    pesel = provider.pesel(birth_date=birth_date)
    assert len(pesel) == 11
    assert pesel[:2] == '90'
    assert pesel[2:4] == '01'

    # Test PESEL generation with a specific gender
    pesel_male = provider.pesel(gender=Gender.MALE)
    assert len(pesel_male) == 11
    assert int(pesel_male[-2]) % 2 != 0  # Male PESEL should have an odd pen

# Generated at 2024-03-18 06:12:06.627549
```python
import datetime
from mimesis.enums import Gender


# Generated at 2024-03-18 06:12:13.089306
```python
    from datetime import datetime
    from mimesis.enums import Gender

    provider = PolandSpecProvider()

    # Test with specific birth date and male gender
    birth_date = datetime(1990, 1, 30)
    male_pesel = provider.pesel(birth_date=birth_date, gender=Gender.MALE)
    assert len(male_pesel) == 11
    assert int(male_pesel[9]) % 2 == 1  # Male gender digit should be odd
    assert int(male_pesel[0:2]) == 90  # Year should match birth_date
    assert int(male_pesel[2:4]) == 1   # Month should match birth_date
    assert int(male_pesel[4:6]) == 30  # Day should match birth_date

    # Test with specific birth date and female gender
    female_pesel = provider.pesel(b