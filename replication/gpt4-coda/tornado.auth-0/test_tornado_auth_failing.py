# Automatically generated by Pynguin.
import tornado.auth as module_0
import tornado.httputil as module_1

def test_case_0():
    try:
        open_id_mixin_0 = module_0.OpenIdMixin()
        async_h_t_t_p_client_0 = open_id_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_1():
    try:
        o_auth_mixin_0 = module_0.OAuthMixin()
        async_h_t_t_p_client_0 = o_auth_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_2():
    try:
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        o_auth2_mixin_0.authorize_redirect()
    except BaseException:
        pass

def test_case_3():
    try:
        o_auth_mixin_0 = module_0.OAuthMixin()
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        list_0 = []
        twitter_mixin_0 = module_0.TwitterMixin(*list_0)
        twitter_mixin_0.authenticate_redirect()
        async_h_t_t_p_client_0 = o_auth2_mixin_0.get_auth_http_client()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'N_j3^\nd'
        open_id_mixin_0 = module_0.OpenIdMixin()
        open_id_mixin_0.authenticate_redirect(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        open_id_mixin_0 = module_0.OpenIdMixin(**dict_0)
        open_id_mixin_0.authenticate_redirect()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "XB\r^A']<!"
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        o_auth2_mixin_0.authorize_redirect(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        o_auth2_mixin_0 = module_0.OAuth2Mixin()
        str_0 = 'X;B\\P\x0c;"{n\x0c)gZl_\x0b00'
        tuple_0 = (str_0,)
        o_auth2_mixin_0.authorize_redirect(str_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        optional_0 = None
        str_0 = 'UT8,q~jy|uH}~'
        str_1 = 'Script exited normally'
        dict_0 = {str_1: optional_0}
        dict_1 = {}
        o_auth2_mixin_0 = module_0.OAuth2Mixin(**dict_1)
        any_0 = o_auth2_mixin_0.oauth2_request(str_0, **dict_0)
        o_auth_mixin_0 = module_0.OAuthMixin()
        dict_2 = o_auth_mixin_0.get_authenticated_user(optional_0)
        str_2 = '^yqv%+dh`3<*L^,"d Nx'
        str_3 = 'The IOLoop catches and logs exceptions, so it\'s\n        important that log output be visible.  However, python\'s\n        default behavior for non-root loggers (prior to python\n        3.2) is to print an unhelpful "no handlers could be\n        found" message rather than the actual log entry, so we\n        must explicitly configure logging if we\'ve made it this\n        far without anything.\n\n        This method should be called from start() in subclasses.\n        '
        facebook_graph_mixin_0 = module_0.FacebookGraphMixin()
        optional_1 = facebook_graph_mixin_0.get_authenticated_user(str_1, str_2, str_3, str_3)
        o_auth2_mixin_1 = module_0.OAuth2Mixin()
        o_auth_mixin_1 = module_0.OAuthMixin(**dict_1)
        none_type_0 = None
        str_4 = 'hJf\nz1LikAEfqamr'
        o_auth2_mixin_0.authorize_redirect(str_1, str_2, none_type_0, str_4)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'ON3^\ndO'
        h_t_t_p_headers_0 = module_1.HTTPHeaders()
        str_1 = 'yH3nOZYNVndB~u\\Z'
        list_0 = []
        o_auth2_mixin_0 = module_0.OAuth2Mixin(*list_0)
        o_auth2_mixin_0.authorize_redirect(str_0, str_0, str_0, h_t_t_p_headers_0, str_1)
    except BaseException:
        pass