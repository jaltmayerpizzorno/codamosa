# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 55
    str_0 = '[l[rN[Pc'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__str__()

def test_case_2():
    int_0 = 954
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_3():
    int_0 = 1704
    var_0 = []
    node_0 = module_0.Node(int_0, var_0)
    list_0 = [node_0]
    node_1 = module_0.Node(int_0, list_0, int_0)
    optional_0 = node_0.remove()

def test_case_4():
    int_0 = 19
    str_0 = '#WwD,tG'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_5():
    int_0 = 26
    negated_pattern_0 = module_0.NegatedPattern()
    str_0 = ',x6vy-Ki`*?t\x0cZI_UFz'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_6():
    int_0 = 238
    str_0 = 'Cn+&FXId|_JJ==&i|`{~'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_7():
    str_0 = 'v=BbB:'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_8():
    str_0 = 'v2=BxB:'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_9():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_10():
    int_0 = 217
    leaf_pattern_0 = module_0.LeafPattern(int_0)

def test_case_11():
    grammar_0 = module_1.Grammar()
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_12():
    int_0 = 256
    int_1 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_1, str_0)
    int_2 = 2
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_2, str_1)
    leaf_2 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_0, leaf_2)
    int_3 = 3
    str_2 = 'c'
    leaf_3 = module_0.Leaf(int_3, str_2)
    node_0.set_child(int_1, leaf_3)

def test_case_13():
    str_0 = '\\\\n'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    list_0 = []
    any_0 = wildcard_pattern_0.optimize()
    negated_pattern_0 = module_0.NegatedPattern(any_0)
    bool_0 = wildcard_pattern_0.match_seq(list_0)

def test_case_14():
    str_0 = 'k'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_15():
    str_0 = 'n|F\\n'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    list_0 = []
    bool_0 = wildcard_pattern_0.match_seq(list_0)

def test_case_16():
    int_0 = 34
    str_0 = 'L@Q._+\n4'
    int_1 = (int_0, int_0)
    var_0 = (str_0, int_1)
    leaf_0 = module_0.Leaf(int_0, str_0, var_0)
    int_2 = 256
    leaf_1 = [leaf_0]
    node_0 = module_0.Node(int_2, leaf_1)
    node_1 = node_0.clone()
    int_3 = node_1.depth()

def test_case_17():
    int_0 = 1748
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    list_1 = [node_0]
    str_0 = ''
    node_1 = module_0.Node(int_0, list_1, str_0)
    node_0.replace(node_1)
    optional_0 = node_1.remove()

def test_case_18():
    int_0 = 1
    str_0 = '(v.):'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    any_0 = wildcard_pattern_0.optimize()
    any_1 = wildcard_pattern_0.optimize()

def test_case_19():
    int_0 = 1
    str_0 = 'L@Q._+\n4'
    int_1 = (int_0, int_0)
    var_0 = (str_0, int_1)
    leaf_0 = module_0.Leaf(int_0, str_0, var_0)
    int_2 = 256
    leaf_1 = [leaf_0]
    node_0 = module_0.Node(int_2, leaf_1)
    optional_0 = node_0.get_lineno()

def test_case_20():
    pass

def test_case_21():
    int_0 = 256
    var_0 = []
    node_0 = module_0.Node(int_0, var_0)
    optional_0 = node_0.remove()
    optional_1 = node_0.get_lineno()

def test_case_22():
    int_0 = 256
    var_0 = []
    node_0 = module_0.Node(int_0, var_0)
    node_1 = node_0.clone()
    list_0 = [node_0]
    node_2 = module_0.Node(int_0, list_0)
    optional_0 = node_2.get_lineno()

def test_case_23():
    int_0 = 256
    var_0 = []
    node_0 = module_0.Node(int_0, var_0)
    optional_0 = node_0.remove()

def test_case_24():
    int_0 = 256
    var_0 = []
    node_0 = module_0.Node(int_0, var_0)
    int_1 = node_0.depth()

def test_case_25():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    int_2 = 3
    str_2 = 'c'
    leaf_2 = module_0.Leaf(int_2, str_2)
    int_3 = 256
    leaf_3 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_3, leaf_3)
    iterator_0 = node_0.post_order()
    var_0 = list(iterator_0)

def test_case_26():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    int_2 = 3
    str_2 = 'c'
    leaf_2 = module_0.Leaf(int_2, str_2)
    int_3 = 256
    leaf_3 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_3, leaf_3)
    int_4 = 257
    var_0 = [node_0, leaf_2]
    node_1 = module_0.Node(int_4, var_0)
    iterator_0 = node_1.pre_order()
    var_1 = list(iterator_0)

def test_case_27():
    int_0 = 68
    str_0 = 'bare_name'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    iterator_0 = leaf_1.post_order()
    str_1 = '](v"):R'
    optional_0 = leaf_0.get_lineno()
    wildcard_pattern_0 = module_0.WildcardPattern(str_1)
    any_0 = wildcard_pattern_0.optimize()
    str_2 = 'F'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_2)
    int_1 = 1009
    var_0 = leaf_pattern_0.match(leaf_0)
    list_0 = [leaf_1]
    node_0 = module_0.Node(int_1, list_0, any_0, str_2)
    optional_1 = node_0.remove()

def test_case_28():
    var_0 = []
    iterator_0 = module_0.generate_matches(var_0, var_0)
    var_1 = list(iterator_0)

def test_case_29():
    int_0 = 1704
    var_0 = []
    node_0 = module_0.Node(int_0, var_0)
    list_0 = [node_0]
    node_1 = module_0.Node(int_0, list_0, int_0)
    node_0.replace(node_1)

def test_case_30():
    int_0 = 1722
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    list_1 = [node_0]
    str_0 = 'oLjFHP{_TN&Fp'
    node_1 = module_0.Node(int_0, list_1, str_0)
    node_0.replace(list_1)