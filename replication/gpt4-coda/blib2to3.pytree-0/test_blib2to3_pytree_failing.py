# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 2905
        none_type_0 = None
        bool_0 = True
        tuple_0 = (int_0, none_type_0, grammar_0, bool_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_3():
    try:
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -2049
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        optional_0 = None
        list_0 = [optional_0, optional_0, optional_0, optional_0]
        node_pattern_0 = module_0.NodePattern(optional_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'mF$=0.A'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        negated_pattern_0 = module_0.NegatedPattern()
        bool_1 = negated_pattern_0.match_seq(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -98
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        str_0 = '>j0v[u'
        int_0 = 1285
        grammar_0 = module_1.Grammar()
        tuple_0 = (int_0, str_0, int_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -3257
        str_0 = 'A#=lP97 \'i\x0c&U"_]:h'
        str_1 = ''
        int_1 = -2771
        int_2 = None
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 1695
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        list_1 = [node_0]
        str_0 = ''
        node_1 = module_0.Node(int_0, list_1, str_0)
        optional_0 = node_0.remove()
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -1133
        wildcard_pattern_0 = module_0.WildcardPattern(int_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1
        str_0 = '2wJ*yP'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -229
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '=8F$=0.A'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 45
        int_1 = 647
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = [tuple_0, tuple_1, wildcard_pattern_0, int_1]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
        leaf_1 = leaf_0.clone()
        int_2 = 36
        leaf_pattern_0 = module_0.LeafPattern(int_2, str_0)
        var_0 = leaf_pattern_0.match(leaf_1)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 1882
        str_0 = '(vR):'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match(str_0, wildcard_pattern_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 19
        str_0 = '#WwD,tG'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        node_pattern_0 = module_0.NodePattern(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 1
        str_0 = '>Ne*6iMl}[yl~O5/'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 29
        dict_0 = {int_0: any_0, int_1: wildcard_pattern_0, int_1: int_0}
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(int_1, dict_0)
        grammar_0 = module_1.Grammar()
        leaf_pattern_0 = module_0.LeafPattern()
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        iterator_0 = leaf_1.post_order()
        var_0 = grammar_0.copy()
        bool_1 = wildcard_pattern_0.match(var_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 1704
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        list_1 = [node_0]
        str_0 = 'B <y^\t@>E?`'
        node_1 = module_0.Node(int_0, list_1, str_0)
        int_1 = node_1.depth()
        node_2 = node_0.clone()
        node_0.replace(node_1)
        node_pattern_0 = module_0.NodePattern(int_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 1707
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        list_1 = [node_0]
        str_0 = 'bare_name'
        node_1 = module_0.Node(int_0, list_1, str_0)
        node_0.replace(list_1)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 954
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_1.insert_child(int_0, node_1)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 256
        var_0 = []
        node_0 = module_0.Node(int_0, var_0)
        node_0.replace(node_0)
    except BaseException:
        pass

def test_case_25():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        negated_pattern_1 = module_0.NegatedPattern(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1533
        list_0 = []
        str_0 = ' 9u\t#w\tBkm'
        node_0 = module_0.Node(int_0, list_0, str_0)
        node_1 = node_0.clone()
        node_1.update_sibling_maps()
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '@~\x0b?=yBvQE@Ya%EH'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 846
        list_0 = []
        int_1 = 2053
        node_0 = module_0.Node(int_1, list_0)
        node_1 = module_0.Node(int_0, list_0, node_0, str_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        list_0 = []
        str_0 = '/'
        int_0 = 36
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 1274
        node_0 = module_0.Node(int_1, list_0)
        node_1 = node_0.clone()
        node_0.insert_child(int_1, node_1)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        grammar_0 = module_1.Grammar()
        negated_pattern_0 = module_0.NegatedPattern()
        iterator_0 = negated_pattern_0.generate_matches(grammar_0)
        list_0 = [iterator_0, negated_pattern_0]
        wildcard_pattern_0 = module_0.WildcardPattern(list_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 718
        negated_pattern_0 = module_0.NegatedPattern()
        node_pattern_0 = module_0.NodePattern(int_0, negated_pattern_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 256
        var_0 = []
        node_0 = module_0.Node(int_0, var_0)
        str_0 = node_0.__repr__()
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 1704
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        list_1 = [node_0, node_0]
        str_0 = ''
        node_1 = module_0.Node(int_0, list_1, str_0)
    except BaseException:
        pass

def test_case_33():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = None
        tuple_0 = ()
        str_0 = 'bare_name'
        tuple_1 = (int_0, tuple_0, int_0, str_0)
        var_0 = module_0.convert(grammar_0, tuple_1)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 1
        str_0 = 'L@Q._+\n4'
        int_1 = (int_0, int_0)
        var_0 = (str_0, int_1)
        leaf_0 = module_0.Leaf(int_0, str_0, var_0)
        int_2 = 256
        str_1 = leaf_0.__str__()
        leaf_1 = [leaf_0]
        node_0 = module_0.Node(int_2, leaf_1)
        optional_0 = node_0.remove()
        str_2 = leaf_1.__str__()
        optional_1 = node_0.get_lineno()
        node_0.append_child(node_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '6*R'
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 1172
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, str_0)
        var_0 = leaf_pattern_0.match(node_0)
        str_1 = node_0.__repr__()
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '=8F$=0.A'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 45
        int_1 = 647
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = [tuple_0, tuple_1, wildcard_pattern_0, int_1]
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
        leaf_1 = leaf_0.clone()
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0)
        negated_pattern_0 = module_0.NegatedPattern()
        iterator_0 = negated_pattern_0.generate_matches(wildcard_pattern_0)
        bool_0 = wildcard_pattern_0.match(iterator_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 57
        str_0 = '](vIN"):^R'
        str_1 = None
        leaf_0 = module_0.Leaf(int_0, str_1)
        list_0 = [int_0, leaf_0, str_1, leaf_0]
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        var_0 = leaf_pattern_0.match(leaf_0, list_0)
        grammar_0 = module_1.Grammar()
        leaf_pattern_1 = module_0.LeafPattern(str_0)
    except BaseException:
        pass

def test_case_38():
    try:
        list_0 = []
        int_0 = 69
        str_0 = 'bare_name'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        iterator_0 = leaf_1.post_order()
        int_1 = 10
        str_1 = leaf_1.__repr__()
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_1)
        any_0 = wildcard_pattern_0.optimize()
        str_2 = leaf_0.__str__()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        int_2 = 1274
        node_0 = module_0.Node(int_2, list_0)
        node_1 = node_0.clone()
        grammar_0 = module_1.Grammar()
        tuple_0 = None
        node_0.append_child(leaf_1)
        tuple_1 = (int_1, str_0, tuple_0, list_0)
        leaf_2 = leaf_1.clone()
        var_0 = module_0.convert(grammar_0, tuple_1)
        none_type_0 = None
        node_pattern_0 = module_0.NodePattern(none_type_0, str_2)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 1
        str_0 = 'leaf'
        str_1 = 'L@Q._+\n4'
        int_1 = 4
        int_2 = (int_0, int_1)
        var_0 = (str_1, int_2)
        leaf_0 = module_0.Leaf(int_0, str_0, var_0)
        leaf_1 = module_0.Leaf(int_0, str_0)
        int_3 = 256
        leaf_2 = [leaf_0]
        node_0 = module_0.Node(int_3, leaf_2)
        var_1 = []
        node_1 = node_0.clone()
        wildcard_pattern_0 = module_0.WildcardPattern(str_1)
        bool_0 = wildcard_pattern_0.match_seq(var_1, leaf_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 1704
        grammar_0 = module_1.Grammar()
        int_1 = 81
        none_type_0 = None
        list_0 = None
        str_0 = 'b'
        tuple_0 = (int_1, none_type_0, list_0, str_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
        var_1 = []
        node_0 = module_0.Node(int_0, var_1)
        str_1 = node_0.__repr__()
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 45
        str_0 = '](v"):R'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        grammar_0 = module_1.Grammar()
        str_1 = 'le:ugD2e<["s naV'
        leaf_pattern_0 = module_0.LeafPattern()
        int_1 = 1274
        list_0 = []
        var_0 = grammar_0.copy()
        node_0 = module_0.Node(int_1, list_0, any_0, str_1, var_0)
    except BaseException:
        pass

def test_case_42():
    try:
        grammar_0 = module_1.Grammar()
        str_0 = '==<'
        int_0 = True
        int_1 = -653
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1)
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = 1
        str_0 = 'v):'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0)
        str_1 = '}sxnH49-(G}'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
        leaf_1 = leaf_0.clone()
        var_0 = leaf_pattern_0.match(leaf_1, int_0)
        any_1 = wildcard_pattern_1.optimize()
        leaf_pattern_1 = module_0.LeafPattern(int_0, str_0)
        grammar_0 = module_1.Grammar()
        str_2 = '%_N)'
        node_pattern_0 = module_0.NodePattern(str_2)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = '\\\\'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0)
        any_0 = wildcard_pattern_0.optimize()
        str_1 = 'bare_name'
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        iterator_0 = negated_pattern_0.generate_matches(str_1)
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 1940
        node_pattern_0 = module_0.NodePattern(int_0, list_0)
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_45():
    try:
        int_0 = 1
        str_0 = '>Ne*6iMl}[yl~O5/'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        grammar_0 = module_1.Grammar()
        leaf_pattern_0 = module_0.LeafPattern()
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        iterator_0 = leaf_1.post_order()
        optional_0 = leaf_0.get_lineno()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_46():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = None
        optional_0 = None
        str_0 = 'bare_name'
        optional_1 = None
        tuple_0 = (int_0, optional_0, str_0, optional_1)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_47():
    try:
        int_0 = 1
        str_0 = 'v+):'
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        leaf_pattern_1 = module_0.LeafPattern(int_0, str_0)
        grammar_0 = module_1.Grammar()
        bytes_0 = None
        bool_0 = wildcard_pattern_0.match(grammar_0, bytes_0)
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = 55
        str_0 = 'bare_name'
        leaf_0 = module_0.Leaf(int_0, str_0)
        iterator_0 = leaf_0.post_order()
        str_1 = '](v"):R'
        wildcard_pattern_0 = module_0.WildcardPattern(str_1)
        any_0 = wildcard_pattern_0.optimize()
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        var_0 = leaf_pattern_0.match(leaf_0)
        list_0 = [leaf_0]
        node_0 = module_0.Node(int_0, list_0, any_0, str_1)
    except BaseException:
        pass

def test_case_49():
    try:
        int_0 = 256
        int_1 = 1
        str_0 = 'a'
        leaf_0 = module_0.Leaf(int_1, str_0)
        int_2 = 2
        str_1 = 'b'
        leaf_1 = module_0.Leaf(int_2, str_1)
        int_3 = 3
        str_2 = 'c'
        leaf_2 = module_0.Leaf(int_3, str_2)
        leaf_3 = [leaf_0, leaf_1, leaf_2]
        node_0 = module_0.Node(int_0, leaf_3)
        node_0.update_sibling_maps()
        int_4 = 0
        var_0 = node_0.children[int_4]
        var_1 = id(var_0)
        var_2 = node_0.prev_sibling_map[var_1]
        var_3 = node_0.children[int_1]
        var_4 = id(var_3)
        var_5 = node_0.prev_sibling_map[var_4]
        var_6 = node_0.children[int_2]
        var_7 = id(var_6)
        var_8 = node_0.prev_sibling_map[var_7]
        var_9 = node_0.children[int_4]
        var_10 = id(var_9)
        var_11 = node_0.next_sibling_map[var_10]
        var_12 = node_0.children[int_1]
        var_13 = id(var_12)
        var_14 = node_0.next_sibling_map[var_13]
        var_15 = node_0.children[int_2]
        var_16 = id(int_2)
        var_17 = node_0.next_sibling_map[var_16]
    except BaseException:
        pass

def test_case_50():
    try:
        int_0 = 1710
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        list_1 = [node_0]
        str_0 = ''
        node_1 = module_0.Node(int_0, list_1, str_0)
        int_1 = node_0.depth()
        node_2 = node_0.clone()
        node_0.replace(node_1)
        node_pattern_0 = module_0.NodePattern(str_0)
    except BaseException:
        pass