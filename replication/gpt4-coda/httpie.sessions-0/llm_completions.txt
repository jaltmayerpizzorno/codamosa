

# Generated at 2024-03-18 05:57:49.296457
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': 'abc123'},
        'csrftoken': {'value': 'def456'}
    }
    assert 'Cookie' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 05:57:57.832309
    # Setup: Create a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie1' and 'cookie3'
    session.remove_cookies(['cookie1', 'cookie3'])

    # Assert: 'cookie1' and 'cookie3' should be removed, 'cookie2' should remain
    assert 'cookie1' not in session.cookies
    assert 'cookie2' in session.cookies
    assert 'cookie3' not in session.cookies
    assert session.cookies['cookie2'] == 'value2'

# Generated at 2024-03-18 05:58:05.903303
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '

# Generated at 2024-03-18 05:58:14.140415
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies['sessionid']['value'] == 'abc123'
    assert session.cookies['csrftoken']['value'] == 'def456'
    assert 'Cookie' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers

# Generated at 2024-03-18 05:58:20.204912
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies['sessionid']['value'] == 'abc123'
    assert session.cookies['csrftoken']['value'] == 'def456'
    assert 'Cookie' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers

# Generated at 2024-03-18 05:58:26.457495
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'Cookie' not in request_headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 05:58:31.450882
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 05:58:35.569452
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 05:58:42.367381
    # Setup: Create a Session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: Only 'cookie1' should remain
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies
    assert len(session.cookies) == 1
    assert session.cookies['cookie1'].value == 'value1'

# Generated at 2024-03-18 05:58:55.742669
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'Authorization': 'Bearer some-token',
        'If-None-Match': 'some-etag',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': 'abc123'},
        'csrftoken': {'value': 'def456'}
    }
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session

# Generated at 2024-03-18 05:59:12.365438
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'X-Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg

# Generated at 2024-03-18 05:59:24.873437
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
        'Authorization': 'Bearer some-token',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'Authorization': 'Bearer some-token'}
    assert session.cookies == {'sessionid': 'abc123', 'csrftoken': 'def456'}
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'Cookie' not in request_headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 05:59:29.891636
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 05:59:37.246352
    # Setup a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Check that 'cookie1' is still there and 'cookie2' and 'cookie3' are gone
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup the session file if it was created
    if os.path.exists('test_session.json'):
        os.remove('test_session.json')

# Generated at 2024-03-18 05:59:44.694669
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'X-Custom-Header': 'Custom Value'}
    assert session.cookies == {'sessionid': {'value': '38afes7a8'}, 'csrftoken': {'value': 'u32t4o3tb3gg43'}, '_gat': {'value

# Generated at 2024-03-18 05:59:48.593713
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 05:59:56.593121
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'If-None-Match': 'some-etag',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '1'}
    }
   

# Generated at 2024-03-18 06:00:03.628393
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'X-Custom-Header': 'Custom Value'}
    assert session.cookies == {'sessionid': {'value': '38afes7a8'}, 'csrftoken': {'value': 'u32t4o3tb3gg43'}, '_gat': {'value

# Generated at 2024-03-18 06:00:12.500363
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'X-Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg

# Generated at 2024-03-18 06:00:21.741908
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'If-None-Match': 'some-etag'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '1'}
    }
    assert '

# Generated at 2024-03-18 06:00:35.962960
    # Setup: Create a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: Only 'cookie1' should remain
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies
    assert session.cookies['cookie1'] == 'value1'

# Generated at 2024-03-18 06:00:41.329201
    # Setup: Create a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: Only 'cookie1' should remain
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies
    assert len(session.cookies) == 1

# Generated at 2024-03-18 06:00:48.187804
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'X-Custom-Header': 'Custom Value'}
    assert session.cookies == {'sessionid': {'value': '38afes7a8'}, 'csrftoken': {'value': 'u32t4o3tb3gg43'}, '_gat': {'value

# Generated at 2024-03-18 06:00:59.731231
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gads=ID=234523432;',
        'Authorization': 'Bearer some-token',
        'If-None-Match': 'some-etag',
        'Custom-Header': 'Custom-Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom-Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u

# Generated at 2024-03-18 06:01:09.613394
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'X-Custom-Header': 'Custom Value'}
    assert session.cookies == {'sessionid': {'value': '38afes7a8'}, 'csrftoken': {'value': 'u32t4o3tb3gg43'}, '_gat': {'value

# Generated at 2024-03-18 06:01:21.519786
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'If-None-Match': 'some-etag',
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '1'},
    }
    assert '

# Generated at 2024-03-18 06:01:28.943303
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'If-None-Match': 'some-etag',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '1'}


# Generated at 2024-03-18 06:01:37.662186
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'If-None-Match': 'some-etag',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert 'User-Agent' not in session.headers
    assert session.headers['Accept'] == 'application/json'
    assert 'Content-Type' not in session.headers
    assert 'Cookie' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert session.headers['Custom-Header'] == 'Custom Value'

    assert 'sessionid' in session

# Generated at 2024-03-18 06:01:44.114563
    # Setup: Create a Session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: 'cookie1' should remain, 'cookie2' and 'cookie3' should be removed
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup: Delete the test session file if it was created
    if os.path.exists('test_session.json'):
        os.remove('test_session.json')

# Generated at 2024-03-18 06:01:51.700687
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'If-None-Match': 'some-etag',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '1'}
    }
   

# Generated at 2024-03-18 06:02:07.762772
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies['sessionid']['value'] == '38afes7a8'
    assert session.cookies['csrftoken']['value'] == 'u32t4o3tb3gg43'
    assert session.cookies['_gat']['value'] == '1'
    assert 'Cookie' not in session.headers
    assert

# Generated at 2024-03-18 06:02:14.910892
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
        'Authorization': 'Bearer some-token',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'Authorization': 'Bearer some-token'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Cookie' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 06:02:23.346355
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
        'Authorization': 'Bearer some-token',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'Authorization': 'Bearer some-token'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'Cookie' not in request_headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 06:02:32.857665
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken

# Generated at 2024-03-18 06:02:40.185101
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'Authorization': 'Bearer some-token',
        'If-None-Match': 'some-etag'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Cookie' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'Authorization' not in session.headers

# Generated at 2024-03-18 06:02:48.033215
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '

# Generated at 2024-03-18 06:02:54.307395
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '

# Generated at 2024-03-18 06:03:00.647412
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'Cookie' not in request_headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 06:03:06.665115
    # Setup: Create a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie1' and 'cookie3'
    session.remove_cookies(['cookie1', 'cookie3'])

    # Assert: Only 'cookie2' should remain
    assert 'cookie1' not in session.cookies
    assert 'cookie2' in session.cookies
    assert 'cookie3' not in session.cookies
    assert session.cookies['cookie2'] == 'value2'

# Generated at 2024-03-18 06:03:13.953723
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'If-None-Match': 'some-etag',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '1'}
    }
   

# Generated at 2024-03-18 06:03:24.481134
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'Cookie' not in request_headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 06:03:29.702724
    # Setup a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Remove some cookies
    session.remove_cookies(['cookie1', 'cookie3'])

    # Check that the specified cookies have been removed
    assert 'cookie1' not in session.cookies
    assert 'cookie2' in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup (optional, depending on the test environment)
    if os.path.exists('test_session.json'):
        os.remove('test_session.json')

# Generated at 2024-03-18 06:03:33.068393
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 06:03:39.838502
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
    })
    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies['sessionid']['value'] == '38afes7a8'
    assert session.cookies['csrftoken']['value'] == 'u32t4o3tb3gg43'
    assert session.cookies['_gat']['value'] == '1'
    assert 'Cookie' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 06:03:44.972291
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'Cookie' not in request_headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 06:03:52.581573
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': 'abc123'},
        'csrftoken': {'value': 'def456'}
    }
    assert 'Cookie' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 06:04:06.320621
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken

# Generated at 2024-03-18 06:04:13.309028
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'User-Agent' not in session.headers
    assert 'Cookie' not in request_headers

# Generated at 2024-03-18 06:04:23.498948
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gads=ID=234523432',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'X-Custom-Header': 'Custom Value'}
    assert session.cookies == {'sessionid': {'value': '38afes7a8'}, 'csrftoken': {'value': 'u32t4o3tb3gg43'}, '_g

# Generated at 2024-03-18 06:04:31.705838
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies['sessionid']['value'] == '38afes7a8'
    assert session.cookies['csrftoken']['value'] == 'u32t4o3tb3gg43'
    assert session.cookies['_gat']['value'] == '1'
    assert 'Cookie' not in session.headers
    assert

# Generated at 2024-03-18 06:04:43.830801
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'X-Custom-Header': 'Custom Value'}
    assert session.cookies == {'sessionid': {'value': '38afes7a8'}, 'csrftoken': {'value': 'u32t4o3tb3gg43'}, '_gat': {'value

# Generated at 2024-03-18 06:04:51.494037
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '

# Generated at 2024-03-18 06:05:00.751900
    # Setup: Create a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: 'cookie1' should remain, 'cookie2' and 'cookie3' should be removed
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup: Remove the test session file if it was created
    if os.path.exists('test_session.json'):
        os.remove('test_session.json')

# Generated at 2024-03-18 06:05:07.690295
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': 'abc123'},
        'csrftoken': {'value': 'def456'}
    }
    assert 'Cookie' not in session.headers
    assert 'Content-Type' not in session.headers
    assert 'User-Agent' not in session.headers

# Generated at 2024-03-18 06:05:16.086527
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '

# Generated at 2024-03-18 06:05:25.219289
    # Setup
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'value'
    })

    # Execute
    session.update_headers(request_headers)

    # Assert
    assert session.headers == {'Accept': 'application/json', 'X-Custom-Header': 'value'}
    assert session.cookies == {'sessionid': {'value': '38afes7a8'}, 'csrftoken': {'value': 'u32t4o3tb3gg43'}, '_gat': {'value': '1'}}
    assert 'Cookie' not in session.headers
   

# Generated at 2024-03-18 06:05:31.122353
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Cookie': 'sessionid=abc123; csrftoken=def456',
        'If-None-Match': 'W/"xyz123"',
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json'}
    assert session.cookies == {'sessionid': {'value': 'abc123'}, 'csrftoken': {'value': 'def456'}}
    assert 'Content-Type' not in session.headers
    assert 'If-None-Match' not in session.headers
    assert 'Cookie' not in request_headers

# Generated at 2024-03-18 06:05:39.634510
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'X-Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg

# Generated at 2024-03-18 06:05:46.590087
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    })

    session.update_headers(request_headers)

    assert session.headers == {
        'Accept': 'application/json',
        'Authorization': 'Bearer some-token',
        'Custom-Header': 'Custom Value'
    }
    assert session.cookies == {
        'sessionid': {'value': '38afes7a8'},
        'csrftoken': {'value': 'u32t4o3tb3gg43'},
        '_gat': {'value': '

# Generated at 2024-03-18 06:05:53.289960
    session = Session(path='test_session.json')
    request_headers = RequestHeadersDict({
        'User-Agent': 'HTTPie/1.0.3',
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Cookie': 'sessionid=38afes7a8; csrftoken=u32t4o3tb3gg43; _gat=1;',
        'X-Custom-Header': 'Custom Value',
        'If-Modified-Since': 'Sat, 29 Oct 1994 19:43:31 GMT'
    })

    session.update_headers(request_headers)

    assert session.headers == {'Accept': 'application/json', 'X-Custom-Header': 'Custom Value'}
    assert session.cookies == {'sessionid': {'value': '38afes7a8'}, 'csrftoken': {'value': 'u32t4o3tb3gg43'}, '_gat': {'value

# Generated at 2024-03-18 06:06:03.599656
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 06:06:07.188455
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 06:06:13.975235
    # Setup: Create a Session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: 'cookie1' should remain, 'cookie2' and 'cookie3' should be removed
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup: Remove the test session file if it was created
    os.remove('test_session.json')

# Generated at 2024-03-18 06:06:21.492912
    # Setup a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Remove 'cookie1' and 'cookie3'
    session.remove_cookies(['cookie1', 'cookie3'])

    # Check that 'cookie1' and 'cookie3' have been removed
    assert 'cookie1' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Check that 'cookie2' is still present
    assert 'cookie2' in session.cookies
    assert session.cookies['cookie2'] == 'value2'

# Generated at 2024-03-18 06:06:29.676928
    # Setup: Create a Session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: 'cookie1' should remain, 'cookie2' and 'cookie3' should be removed
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup: Remove the test session file if it was created
    os.remove('test_session.json')

# Generated at 2024-03-18 06:06:35.346415
    # Setup: Create a Session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: 'cookie1' should remain, 'cookie2' and 'cookie3' should be removed
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup: Remove the test session file if it was created
    if os.path.exists('test_session.json'):
        os.remove('test_session.json')

# Generated at 2024-03-18 06:06:40.979077
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    assert 'cookie1' in session.cookies
    assert 'cookie2' in session.cookies
    assert 'cookie3' in session.cookies

    session.remove_cookies(['cookie1', 'cookie3'])

    assert 'cookie1' not in session.cookies
    assert 'cookie2' in session.cookies
    assert 'cookie3' not in session.cookies

    # Clean up the test session file if it was created
    if os.path.exists('test_session.json'):
        os.remove('test_session.json')

# Generated at 2024-03-18 06:06:44.650541
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 06:06:48.033059
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 06:06:51.626628
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 06:07:03.148313
    # Setup: Create a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: Only 'cookie1' should remain
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies
    assert len(session.cookies) == 1

# Generated at 2024-03-18 06:07:09.554829
    # Setup a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Check that 'cookie1' is still there and 'cookie2' and 'cookie3' are gone
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup (remove the test session file if it was created)
    if os.path.exists('test_session.json'):
        os.remove('test_session.json')

# Generated at 2024-03-18 06:07:12.896450
    session = Session(path='test_session.json')
    session['cookies'] = {
        'cookie1': {'value': 'value1'},
        'cookie2': {'value': 'value2'},
        'cookie3': {'value': 'value3'},
    }
    session.remove_cookies(['cookie1', 'cookie3'])
    assert 'cookie1' not in session['cookies']
    assert 'cookie2' in session['cookies']
    assert 'cookie3' not in session['cookies']

# Generated at 2024-03-18 06:07:20.608246
    # Setup: Create a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: 'cookie1' should remain, 'cookie2' and 'cookie3' should be removed
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup: Remove the test session file if it was created
    os.remove('test_session.json')

# Generated at 2024-03-18 06:07:27.064724
    # Setup: Create a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Act: Remove 'cookie2' and 'cookie3'
    session.remove_cookies(['cookie2', 'cookie3'])

    # Assert: Only 'cookie1' should remain
    assert 'cookie1' in session.cookies
    assert 'cookie2' not in session.cookies
    assert 'cookie3' not in session.cookies
    assert session.cookies['cookie1'] == 'value1'

# Generated at 2024-03-18 06:07:33.485185
    # Setup a session with some cookies
    session = Session(path='test_session.json')
    session.cookies = RequestsCookieJar()
    session.cookies.set('cookie1', 'value1')
    session.cookies.set('cookie2', 'value2')
    session.cookies.set('cookie3', 'value3')

    # Remove some cookies
    session.remove_cookies(['cookie1', 'cookie3'])

    # Check that the specified cookies have been removed
    assert 'cookie1' not in session.cookies
    assert 'cookie2' in session.cookies
    assert 'cookie3' not in session.cookies

    # Cleanup (optional, depending on the test environment)
    if os.path.exists('test_session.json'):
        os.remove('test_session.json')