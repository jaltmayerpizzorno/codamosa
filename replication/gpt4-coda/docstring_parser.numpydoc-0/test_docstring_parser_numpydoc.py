# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '5^erAK'
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = "\n    Short description.\n\n    Long description spanning\n    multiple lines.\n\n    Parameters\n    ----------\n    x : int\n        Description of parameter `x`.\n    y : str, optional\n        Description of parameter `y`.\n\n    Returns\n    -------\n    bool\n        Description of the returned value.\n\n    See Also\n    --------\n    OtherFunction : Some related other function.\n\n    Examples\n    --------\n    >>> test_function(10, 'example')\n    True\n    "
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = "\n    Short description.\n\n    Long description spannins\n    multiple lines.\n\n    Parameters\n    ----------\n    param1  int\n        Description of param1.\n    param2 : str, o8tional\n        Description of param2. Default is 'Nxample'.\n\n    Returns\n    -------\n    bool\n        Description of return value.\n\n    Examples\n    --------\n    >>> print>test_function(10, 'test'))\n    True\n    "
    str_1 = 'Build docstring element.\n\n        :param text: docstring element text\n        :param title: title of section containing element\n        :return:\n        '
    str_2 = '( Q'
    section_0 = module_0.Section(str_1, str_2)
    numpydoc_parser_0 = module_0.NumpydocParser()
    var_0 = numpydoc_parser_0.add_section(section_0)
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = '.*defaults to (.+)'
    k_v_section_0 = module_0._KVSection(str_0, str_0)
    str_1 = 'key'
    deprecation_section_0 = module_0.DeprecationSection(str_1, str_1)
    str_2 = 'yPJ@3'
    returns_section_0 = module_0.ReturnsSection(str_2, str_2)
    str_3 = None
    str_4 = "e\n|Z\\X'*:+X,lT"
    iterable_0 = deprecation_section_0.parse(str_4)
    str_5 = 'other_param'
    iterable_1 = deprecation_section_0.parse(str_5)
    docstring_0 = module_0.parse(str_3)
    section_0 = module_0.Section(str_3, str_3)
    str_6 = 'ER\\)>AUy3k"'
    str_7 = '\x0b\nQVV>B4?'
    iterable_2 = deprecation_section_0.parse(str_7)
    str_8 = 'O&YpBXsM.\\|itcs@YK9t'
    section_1 = module_0.Section(str_6, str_8)
    str_9 = '{ki:!O-])bz{nI1N'
    k_v_section_1 = module_0._KVSection(str_6, str_6)
    iterable_3 = k_v_section_1.parse(str_9)

def test_case_5():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = 'X,uDM&nYtiNlv1%=|'
    docstring_0 = numpydoc_parser_0.parse(str_0)
    str_1 = 'Docstring meta information.\n\n    Symbolizes lines in form of\n\n        :param arg: description\n        :raises ValueError: if something happens\n    '
    str_2 = '(?P<type>.*?)(?:, optional|\\(optional\\))$'
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_2)
    iterable_0 = deprecation_section_0.parse(str_1)
    str_3 = 'For sections like returns or yields.'
    str_4 = 'Av85No!>A'
    k_v_section_0 = module_0._KVSection(str_4, str_4)
    str_5 = '\t'
    docstring_1 = numpydoc_parser_0.parse(str_5)
    str_6 = ')]*'
    deprecation_section_1 = module_0.DeprecationSection(str_6, str_0)
    iterable_1 = k_v_section_0.parse(str_3)
    str_7 = 'EB8VcxHA/Q-Jfb1'
    str_8 = "L8\\MBJ*X;c~-'"
    str_9 = 'hV5EX\tt{LcZQwG'
    deprecation_section_2 = module_0.DeprecationSection(str_7, str_9)
    docstring_2 = numpydoc_parser_0.parse(str_8)
    returns_section_0 = module_0.ReturnsSection(str_7, str_7)

def test_case_6():
    str_0 = '.. deprecated:: 1.2.3\n   This feature was deprecated in version 1.2.3 due to some reason.'
    str_1 = 'deprecatd'
    str_2 = 'de6Oprecation'
    deprecation_section_0 = module_0.DeprecationSection(str_1, str_2)
    iterable_0 = deprecation_section_0.parse(str_0)
    var_0 = list(iterable_0)
    var_1 = len(var_0)
    int_0 = 0
    var_2 = var_0[int_0]

def test_case_7():
    str_0 = "\n    Short description.\n\n    Long description spanning\n    multiple lines.\n\n    Parameters\n    ----------\n    param1 : int\n        Description of param1.\n    param2 : str, optional\n        Description of param2. Default is 'example'.\n\n    Returns\n    -------\n    bool\n        Description of return value.\n\n    Examples\n    --------\n    >>> print(test_function(10, 'test'))\n    True\n    "
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = "\n    Short description.\n\n    Long description spanning\n    multiple lines.\n\n    Parameters\n    ----------\n    x : int\n        Desciption of parameter `x`.\n    y : str, optional\n    d   Description of parameter `y`.\n\n    Returns\n    -------\n    bool\n        Description of the returned value.\n\n    See Also\n    --------\n    OtherFunction : Some related other function.\n\n    Examples\n    --------\n    >>> test_function(10, 'example')\n    True\n    "
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    str_0 = 'RnNAH>eD5X\n\t'
    docstring_0 = module_0.parse(str_0)