# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        set_0 = set()
        var_0 = module_0.jdump(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1.0
        bool_0 = True
        doc_c_l_i_0 = module_0.DocCLI(bool_0)
        var_0 = doc_c_l_i_0.post_process_args(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        int_0 = -738
        doc_c_l_i_0 = module_0.DocCLI(int_0)
        var_0 = doc_c_l_i_0.display_plugin_list(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        plugin_not_found_0 = None
        role_mixin_0 = None
        set_0 = {role_mixin_0, role_mixin_0, role_mixin_0, role_mixin_0}
        str_0 = ''
        str_1 = '^'
        dict_0 = {str_0: plugin_not_found_0, str_0: plugin_not_found_0, str_0: set_0, str_1: set_0}
        doc_c_l_i_0 = module_0.DocCLI(dict_0)
        bool_0 = False
        var_0 = doc_c_l_i_0.get_all_plugins_of_type(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '*o'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
        dict_0 = None
        str_1 = 'w?*[3z2a2Lf;6yDwQ'
        var_1 = doc_c_l_i_0.get_plugin_metadata(str_1, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'at\\Lma(\\*,\x0b \t^)D'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        set_0 = {doc_c_l_i_0, doc_c_l_i_0, doc_c_l_i_0, doc_c_l_i_0}
        dict_0 = {doc_c_l_i_0: set_0, doc_c_l_i_0: str_0}
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(set_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 257
        list_0 = [int_0]
        str_0 = '*n-p]lhJ}-^sD\r'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.format_snippet(str_0, list_0, str_0)
        var_1 = doc_c_l_i_0.get_role_man_text(str_0, doc_c_l_i_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xda\xae\xb4\xa22\xe1\xe0\xbd@\xbdN\xce\x8c]6'
        float_0 = 792.169078
        str_0 = '\n- name: Find out what the remote machine\'s mounts are\n  ansible.builtin.slurp:\n    src: /proc/mounts\n  register: mounts\n\n- name: Print returned information\n  ansible.builtin.debug:\n    msg: "{{ mounts[\'content\'] | b64decode }}"\n\n# From the commandline, find the pid of the remote machine\'s sshd\n# $ ansible host -m slurp -a \'src=/var/run/sshd.pid\'\n# host | SUCCESS => {\n#     "changed": false,\n#     "content": "MjE3OQo=",\n#     "encoding": "base64",\n#     "source": "/var/run/sshd.pid"\n# }\n# $ echo MjE3OQo= | base64 -d\n# 2179\n'
        dict_0 = {bytes_0: str_0}
        int_0 = -2993
        tuple_0 = (int_0, int_0)
        str_1 = 'Q"K1qMx'
        dict_1 = {str_1: str_1}
        doc_c_l_i_0 = module_0.DocCLI(dict_1)
        float_1 = 1442.93
        str_2 = 't=:\t.)\nwM"O`X'
        var_0 = doc_c_l_i_0.format_snippet(float_1, doc_c_l_i_0, str_2)
        var_1 = doc_c_l_i_0.format_plugin_doc(float_0, str_0, dict_0, float_0, tuple_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'a~+\nC1F5U)zMF'
        plugin_not_found_0 = module_0.PluginNotFound()
        doc_c_l_i_0 = module_0.DocCLI(plugin_not_found_0)
        var_0 = doc_c_l_i_0.print_paths(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'L:z%<_'
        bytes_0 = b'\xe1\x975'
        list_0 = [bytes_0, bytes_0, str_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        tuple_0 = None
        str_1 = "7k\t%M\tH)*zL$h'%M"
        doc_c_l_i_1 = module_0.DocCLI(bytes_0)
        var_0 = doc_c_l_i_1.add_fields(str_0, bytes_0, doc_c_l_i_0, tuple_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = set()
        str_0 = '*WKeW,").p3X'
        float_0 = -1739.9962
        dict_0 = {str_0: str_0, str_0: float_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        var_0 = doc_c_l_i_0.get_man_text(set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '*o'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
        str_1 = "4?[Y7;SWx'"
        dict_0 = {}
        var_1 = doc_c_l_i_0.get_role_man_text(str_1, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        role_mixin_0 = module_0.RoleMixin()
        dict_0 = {}
        float_0 = 156.996
        str_0 = 'j^_-G$F7'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.get_man_text(dict_0, float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'AID i'
        list_0 = [str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        dict_0 = {}
        var_0 = doc_c_l_i_0.run()
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        str_1 = 'tm?q\x0b'
        plugin_not_found_0 = None
        float_0 = -959.4618650123069
        str_2 = '\rWGT'
        dict_1 = {str_2: float_0, str_2: str_2, str_1: str_1, str_1: str_0, str_2: str_1}
        str_3 = 't-}*8"R'
        tuple_0 = (plugin_not_found_0, float_0, dict_1, str_3)
        role_mixin_0 = module_0.RoleMixin()
        set_0 = {doc_c_l_i_1}
        str_4 = '*)\n>n{m'
        var_1 = doc_c_l_i_1.add_fields(str_4, dict_0, doc_c_l_i_1, set_0)
        var_2 = doc_c_l_i_1.add_fields(tuple_0, dict_1, list_0, float_0, plugin_not_found_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'AID Csi'
        list_0 = [str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        tuple_0 = ()
        dict_0 = None
        role_mixin_0 = module_0.RoleMixin()
        var_0 = doc_c_l_i_0.run()
        var_1 = module_0.add_collection_plugins(dict_0, role_mixin_0, list_0)
        var_2 = module_0.add_collection_plugins(tuple_0, dict_0, str_0)
        dict_1 = {}
        bool_0 = True
        var_3 = doc_c_l_i_0.find_plugins(str_0, dict_1, bool_0, list_0)
        var_4 = module_0.add_collection_plugins(doc_c_l_i_0, dict_1)
        var_5 = doc_c_l_i_0.run()
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        var_6 = doc_c_l_i_0.format_snippet(doc_c_l_i_1, str_0, str_0)
        set_0 = set()
        list_1 = [str_0]
        str_1 = 'tm?q\x0b'
        doc_c_l_i_2 = module_0.DocCLI(str_1)
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        var_7 = doc_c_l_i_2.format_snippet(set_0, set_0, list_1)
        var_8 = doc_c_l_i_2.namespace_from_plugin_filepath(str_0, role_mixin_0, str_0)
    except BaseException:
        pass