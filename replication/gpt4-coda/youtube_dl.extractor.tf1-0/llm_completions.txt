

# Generated at 2024-03-18 09:22:22.442655
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:22:26.500714
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:22:30.074690
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:22:35.699228
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:22:43.724435
```python
    ie = TF1IE()

    # Test _VALID_URL pattern
    assert re.match(ie._VALID_URL, 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html')
    assert re.match(ie._VALID_URL, 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html')
    assert not re.match(ie._VALID_URL, 'http://www.invalid.com/path/to/video.html')

    # Test _real_extract method
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie._real_extract(test_url)
    assert info_dict.get('id') ==

# Generated at 2024-03-18 09:22:46.353601
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:22:51.029728
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:22:55.949502
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:23:03.073395
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738

    # Test case for a URL that only matches the pattern
    ie = TF1IE()
    test_url = 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html

# Generated at 2024-03-18 09:23:13.057487
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert info_dict.get('title') is not None
    assert info_dict.get('description') is not None
    assert info_dict.get('upload_date') == '20190611'
    assert info_dict.get('timestamp') == 1560273989
    assert info_dict.get('duration') == 1738
    assert info_dict.get('series') == 'Quotidien avec Yann Barthès'
    assert 'intégrale' in info_dict.get('tags

# Generated at 2024-03-18 09:23:31.627656
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:23:36.029309
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:23:40.541001
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:23:43.821863
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:23:46.758434
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:23:50.942615
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:23:53.605456
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:24:00.219981
```python
    # Test case for a typical TF1 video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738
    assert info_dict.get('timestamp') == 1560273989
    assert info_dict.get('upload_date') == '20190611'

    # Test case for matching URLs
    assert TF1IE.suitable('http://www.tf1

# Generated at 2024-03-18 09:24:06.605549
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738

    # Test case for a URL that only matches the pattern
    ie = TF1IE()
    test_url = 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html

# Generated at 2024-03-18 09:24:11.122224
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:24:53.053054
```python
    # Create an instance of the TF1IE class
    tf1ie = TF1IE()

    # Check if the instance is created and is an instance of InfoExtractor
    assert isinstance(tf1ie, InfoExtractor), "TF1IE should be an instance of InfoExtractor"

    # Check if the _VALID_URL pattern matches the expected URLs
    assert re.match(tf1ie._VALID_URL, 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'), "The URL should match the _VALID_URL pattern"
    assert re.match(tf1ie._VALID_URL, 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html'), "The URL should match the _VALID_URL pattern"
    assert re.match(tf1ie._VALID_URL,

# Generated at 2024-03-18 09:25:04.648439
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738

    # Test case for 'only_matching' scenario
    only_matching_test_url = 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html'
    assert re.match(TF

# Generated at 2024-03-18 09:25:08.966399
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
    assert callable(getattr(ie, '_real_extract', None))
```

# Generated at 2024-03-18 09:25:12.785271
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
    assert callable(getattr(ie, '_real_extract', None))
```

# Generated at 2024-03-18 09:25:20.029045
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738

    # Test case for 'only_matching' scenario
    only_matching_ie = TF1IE()
    only_matching_url = 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015

# Generated at 2024-03-18 09:25:29.167227
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738

    # Test case for 'only_matching' scenario
    only_matching_test_url = 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html'
    assert ie.suitable(

# Generated at 2024-03-18 09:25:35.680821
```python
    ie = TF1IE()

    # Check if the _VALID_URL pattern matches the expected URLs
    assert re.match(ie._VALID_URL, 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html')
    assert re.match(ie._VALID_URL, 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html')
    assert re.match(ie._VALID_URL, 'http://www.tf1.fr/hd1/documentaire/videos/mylene-farmer-d-une-icone.html')

    # Check if the _VALID_URL pattern does not match an invalid URL
    assert not re.match(ie._VALID_URL, 'https://www.example.com/')

    # Check if the constructor properly initializes the InfoExtractor
    assert isinstance(ie

# Generated at 2024-03-18 09:25:41.757267
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
    assert hasattr(ie, '_TESTS')
    for test_case in ie._TESTS:
        assert 'url' in test_case
        if 'info_dict' in test_case:
            assert 'id' in test_case['info_dict']
            assert 'ext' in test_case['info_dict']
            assert 'title' in test_case['info_dict']
        if 'only_matching' in test_case:
            assert test_case['only_matching'] is True
```

# Generated at 2024-03-18 09:25:45.006525
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:25:51.094467
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:26:50.673916
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:26:53.426520
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:27:00.210021
```python
    ie = TF1IE()

    # Test _VALID_URL pattern
    assert re.match(ie._VALID_URL, 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html')
    assert re.match(ie._VALID_URL, 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html')
    assert not re.match(ie._VALID_URL, 'http://www.invalid.com/path/to/video.html')

    # Test _real_extract method
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie._real_extract(test_url)
    assert info_dict.get('id') ==

# Generated at 2024-03-18 09:27:03.147478
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:27:07.721150
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
    assert hasattr(ie, '_TESTS')
    for test_case in ie._TESTS:
        assert 'url' in test_case
        if 'info_dict' in test_case:
            assert 'id' in test_case['info_dict']
            assert 'ext' in test_case['info_dict']
            assert 'title' in test_case['info_dict']
```

# Generated at 2024-03-18 09:27:11.020221
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:27:21.098761
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738

    # Test case for 'only_matching' scenario
    only_matching_ie = TF1IE()
    only_matching_url = 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015

# Generated at 2024-03-18 09:27:30.065620
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738

    # Test case for 'only_matching' scenario
    only_matching_test_url = 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015.html'
    assert ie.suitable(

# Generated at 2024-03-18 09:27:40.859355
```python
    # Test case for a typical video extraction
    ie = TF1IE()
    test_url = 'https://www.tf1.fr/tmc/quotidien-avec-yann-barthes/videos/quotidien-premiere-partie-11-juin-2019.html'
    info_dict = ie.extract(test_url)
    assert info_dict.get('id') == '13641379'
    assert info_dict.get('ext') == 'mp4'
    assert 'Quotidien avec Yann Barthès' in info_dict.get('series')
    assert 'intégrale' in info_dict.get('tags')
    assert info_dict.get('duration') == 1738

    # Test case for 'only_matching' scenario
    only_matching_ie = TF1IE()
    only_matching_url = 'http://www.tf1.fr/tf1/koh-lanta/videos/replay-koh-lanta-22-mai-2015

# Generated at 2024-03-18 09:27:44.244296
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:29:43.325378
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:29:45.948953
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:29:50.934628
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:29:56.129878
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
    assert hasattr(ie, '_TESTS')
    for test_case in ie._TESTS:
        assert 'url' in test_case
        if 'info_dict' in test_case:
            assert 'id' in test_case['info_dict']
            assert 'ext' in test_case['info_dict']
            assert 'title' in test_case['info_dict']
        if 'only_matching' in test_case:
            assert test_case['only_matching'] is True
```

# Generated at 2024-03-18 09:29:59.030560
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:30:03.276192
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:30:06.731877
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:30:09.374414
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:30:12.203350
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```

# Generated at 2024-03-18 09:30:16.728563
```python
    ie = TF1IE()
    assert ie._VALID_URL == r'https?://(?:www\.)?tf1\.fr/[^/]+/(?P<program_slug>[^/]+)/videos/(?P<id>[^/?&#]+)\.html'
    assert isinstance(ie, InfoExtractor)
    assert hasattr(ie, '_real_extract')
```