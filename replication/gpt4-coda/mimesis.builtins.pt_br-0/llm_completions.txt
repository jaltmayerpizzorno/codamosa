

# Generated at 2024-03-18 06:04:12.949299
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:04:17.603278
```python
    provider = BrazilSpecProvider()
    unmasked_cpf = provider.cpf(with_mask=False)
    masked_cpf = provider.cpf(with_mask=True)

    assert len(unmasked_cpf) == 11
    assert unmasked_cpf.isdigit()
    assert len(masked_cpf) == 14
    assert masked_cpf.count('.') == 2
    assert masked_cpf.count('-') == 1
    assert masked_cpf[3] == '.'
    assert masked_cpf[7] == '.'
    assert masked_cpf[11] == '-'
```

# Generated at 2024-03-18 06:04:24.827753
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    cpf_unmasked = provider.cpf(with_mask=False)

    assert len(cpf) == 14, "CPF with mask should have length 14"
    assert cpf.count('.') == 2, "CPF with mask should have two dots"
    assert cpf.count('-') == 1, "CPF with mask should have one dash"

    assert len(cpf_unmasked) == 11, "Unmasked CPF should have length 11"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf_str):
        cpf_numbers = [int(digit) for digit in cpf_str if digit.isdigit()]

        def calculate_digit(cpf_slice, multiplier):
            total_sum = sum([a * b for a, b in zip(cpf_slice, range(multiplier,

# Generated at 2024-03-18 06:04:29.988944
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:04:36.311850
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (basic validation considering the digits)
    def is_valid_cpf(cpf):
        if not cpf.isdigit():
            cpf = ''.join(filter(str.isdigit, cpf))
        if len(cpf) != 11 or len(set(cpf)) == 1:
            return False
        for i in range(9, 11):
            value = sum((int(cpf[num]) * ((i+1) - num) for num in range(0, i)))
            digit = ((value * 10) % 11) % 10
            if str

# Generated at 2024-03-18 06:04:39.935842
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should have a length of 14 with mask"
    assert cpf.count('.') == 2, "CPF should have two dots with mask"
    assert cpf.count('-') == 1, "CPF should have one dash with mask"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should have a length of 11 without mask"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:04:46.912057
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask."
    assert cpf.count('.') == 2, "CPF should have 2 dots with mask."
    assert cpf.count('-') == 1, "CPF should have 1 dash with mask."

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask."
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits."

    # Additional checks can be added to verify the validity of the CPF
```

# Generated at 2024-03-18 06:04:51.926360
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    cpf_unmasked = provider.cpf(with_mask=False)

    assert len(cpf) == 14, "Masked CPF must have 14 characters including dots and dash"
    assert cpf.count('.') == 2, "Masked CPF must have two dots"
    assert cpf.count('-') == 1, "Masked CPF must have one dash"
    assert len(cpf_unmasked) == 11, "Unmasked CPF must have 11 characters"
    assert cpf_unmasked.isdigit(), "Unmasked CPF must contain only digits"
    assert all(char.isdigit() or char in ".-" for char in cpf), "Masked CPF must contain only digits, dots, and dashes"
```

# Generated at 2024-03-18 06:04:56.384342
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be formatted with mask and have length 14"
    assert cpf.count('.') == 2, "CPF should have two dots"
    assert cpf.count('-') == 1, "CPF should have one hyphen"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "Unmasked CPF should have length 11"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:05:02.677717
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask."
    assert cpf.count('.') == 2, "CPF should have two dots with mask."
    assert cpf.count('-') == 1, "CPF should have one dash with mask."

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask."
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits."

    # Additional checks can be added to verify the validity of the CPF
```

# Generated at 2024-03-18 06:05:22.417309
```python
    provider = BrazilSpecProvider()
    generated_cnpj = provider.cnpj(with_mask=False)
    assert len(generated_cnpj) == 14
    assert generated_cnpj.isdigit()

    generated_cnpj_with_mask = provider.cnpj(with_mask=True)
    assert len(generated_cnpj_with_mask) == 18
    assert generated_cnpj_with_mask.count('.') == 2
    assert generated_cnpj_with_mask.count('/') == 1
    assert generated_cnpj_with_mask.count('-') == 1
    assert generated_cnpj_with_mask[2] == '.'
    assert generated_cnpj_with_mask[6] == '.'
    assert generated_cnpj_with_mask[10] == '/'
    assert generated_cnpj_with_mask[15] == '-'
```

# Generated at 2024-03-18 06:05:32.409907
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf):
        def calculate_digit(cpf, position):
            value = sum(int(digit) * (position - index) for index, digit in enumerate(cpf[:position-1]))
            digit = ((value * 10) % 11) % 10
            return str(digit)

        first_digit = calculate_digit(cpf, 10)
        second_digit = calculate_digit(cpf, 11)
        return cpf[-2] == first_digit and cpf[-1] == second_digit

# Generated at 2024-03-18 06:05:40.222894
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:05:45.671380
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask."
    assert cpf.count('.') == 2, "CPF should have 2 dots with mask."
    assert cpf.count('-') == 1, "CPF should have 1 dash with mask."

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask."
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits."

    # Additional checks can be added to verify the validity of the CPF
```

# Generated at 2024-03-18 06:05:51.472815
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:05:58.255246
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf):
        cpf = [int(char) for char in cpf if char.isdigit()]
        if len(cpf) != 11 or len(set(cpf)) == 1:
            return False

        for i in range(9, 11):
            value = sum((cpf[num] * ((i+1) - num) for num in range(0, i)))
            digit = ((value * 10) % 11) % 10
            if digit != cpf[i]:
               

# Generated at 2024-03-18 06:06:04.658212
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask"
    assert cpf.count('.') == 2, "CPF should have 2 dots with mask"
    assert cpf.count('-') == 1, "CPF should have 1 dash with mask"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:06:12.486467
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (basic validation considering the digits)
    def is_valid_cpf(cpf):
        if not cpf.isdigit():
            cpf = cpf.replace(".", "").replace("-", "")
        if len(cpf) != 11:
            return False
        if cpf in [s * 11 for s in "0123456789"]:
            return False
        for i in range(9, 11):
            value = sum((int(cpf[num]) * ((i+1) - num) for num in range(0, i)))
            digit = ((value * 10

# Generated at 2024-03-18 06:06:18.757374
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (basic validation considering the digits)
    def is_valid_cpf(cpf):
        if not cpf.isdigit():
            cpf = cpf.replace(".", "").replace("-", "")
        if len(cpf) != 11:
            return False
        if cpf in [s * 11 for s in "0123456789"]:
            return False
        calc_digit = lambda sum: 11 - sum % 11 if sum % 11 > 1 else 0
        for i in range(9, 11):
            sum = sum(int(digit) * ((

# Generated at 2024-03-18 06:06:27.768540
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (basic validation considering the digits)
    def is_valid_cpf(cpf):
        if not cpf.isdigit():
            cpf = ''.join(filter(str.isdigit, cpf))
        if len(cpf) != 11 or len(set(cpf)) == 1:
            return False

        for i in range(9, 11):
            value = sum((int(cpf[num]) * ((i+1) - num) for num in range(0, i)))
            digit = ((value * 10) % 11) % 10
            if str

# Generated at 2024-03-18 06:06:49.659751
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:06:56.299170
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask"
    assert cpf.count('.') == 2, "CPF should have 2 dots with mask"
    assert cpf.count('-') == 1, "CPF should have 1 dash with mask"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:07:03.906423
```python
    provider = BrazilSpecProvider()
    unmasked_cpf = provider.cpf(with_mask=False)
    masked_cpf = provider.cpf(with_mask=True)

    # Check if the unmasked CPF has 11 digits
    assert len(unmasked_cpf) == 11
    # Check if the masked CPF follows the pattern ###.###.###-##
    assert len(masked_cpf) == 14
    assert masked_cpf[3] == '.'
    assert masked_cpf[7] == '.'
    assert masked_cpf[11] == '-'
    # Check if only digits, dots and hyphen are present in the masked CPF
    for char in masked_cpf:
        assert char.isdigit() or char in ".-"
    # Check if only digits are present in the unmasked CPF
    assert unmasked_cpf.isdigit()
```

# Generated at 2024-03-18 06:07:08.888176
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:07:14.243042
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask."
    assert cpf.count('.') == 2, "CPF should have two dots with mask."
    assert cpf.count('-') == 1, "CPF should have one hyphen with mask."

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask."
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits."

    # Additional checks can be added to verify the correctness of the CPF digits
    # according to the Brazilian CPF algorithm, but this is a basic unit test.
```

# Generated at 2024-03-18 06:07:24.009236
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    cpf_unmasked = provider.cpf(with_mask=False)

    assert len(cpf) == 14, "CPF with mask should have length 14"
    assert cpf.count('.') == 2, "CPF with mask should have two dots"
    assert cpf.count('-') == 1, "CPF with mask should have one hyphen"

    assert len(cpf_unmasked) == 11, "Unmasked CPF should have length 11"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf):
        cpf = [int(char) for char in cpf if char.isdigit()]
        if len(cpf) != 11 or len(set(cpf)) == 1:
            return False

        for i in range(9, 11):
            value =

# Generated at 2024-03-18 06:07:33.099600
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    # Check if the unmasked CNPJ has 14 digits
    assert len(unmasked_cnpj) == 14 and unmasked_cnpj.isdigit()

    # Check if the masked CNPJ matches the pattern
    assert len(masked_cnpj) == 18  # Including mask characters
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1

    # Extract only the numbers from the masked CNPJ and compare with unmasked
    only_numbers = ''.join(filter(str.isdigit, masked_cnpj))
    assert only_numbers == unmasked_cnpj

    # Validate the verifying digits (last 2 digits) of the CNPJ
    cnpj_numbers = [int(digit) for digit

# Generated at 2024-03-18 06:07:40.599864
```python
    provider = BrazilSpecProvider()
    generated_cnpj = provider.cnpj(with_mask=False)
    assert len(generated_cnpj) == 14
    assert generated_cnpj.isdigit()

    generated_cnpj_with_mask = provider.cnpj(with_mask=True)
    assert len(generated_cnpj_with_mask) == 18
    assert generated_cnpj_with_mask.count('.') == 2
    assert generated_cnpj_with_mask.count('/') == 1
    assert generated_cnpj_with_mask.count('-') == 1
    assert generated_cnpj_with_mask[2] == '.'
    assert generated_cnpj_with_mask[6] == '.'
    assert generated_cnpj_with_mask[10] == '/'
    assert generated_cnpj_with_mask[15] == '-'
```

# Generated at 2024-03-18 06:07:46.942616
```python
    provider = BrazilSpecProvider()
    unmasked_cpf = provider.cpf(with_mask=False)
    masked_cpf = provider.cpf(with_mask=True)

    assert len(unmasked_cpf) == 11
    assert unmasked_cpf.isdigit()
    assert len(masked_cpf) == 14
    assert masked_cpf.count('.') == 2
    assert masked_cpf.count('-') == 1
    assert masked_cpf[3] == masked_cpf[7] == '.'
    assert masked_cpf[11] == '-'
```

# Generated at 2024-03-18 06:07:53.035143
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should have a length of 14 with mask"
    assert cpf.count('.') == 2, "CPF should have two dots with mask"
    assert cpf.count('-') == 1, "CPF should have one dash with mask"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should have a length of 11 without mask"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:08:24.649014
```python
    provider = BrazilSpecProvider()
    unmasked_cpf = provider.cpf(with_mask=False)
    masked_cpf = provider.cpf(with_mask=True)

    assert len(unmasked_cpf) == 11
    assert unmasked_cpf.isdigit()
    assert len(masked_cpf) == 14
    assert masked_cpf.count('.') == 2
    assert masked_cpf.count('-') == 1
    assert masked_cpf[3] == masked_cpf[7] == '.'
    assert masked_cpf[11] == '-'
    assert unmasked_cpf == masked_cpf.replace(".", "").replace("-", "")
```

# Generated at 2024-03-18 06:08:32.850357
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    cpf_unmasked = provider.cpf(with_mask=False)

    assert len(cpf) == 14, "Masked CPF must have 14 characters including dots and dash"
    assert cpf.count('.') == 2, "Masked CPF must have two dots"
    assert cpf.count('-') == 1, "Masked CPF must have one dash"

    assert len(cpf_unmasked) == 11, "Unmasked CPF must have 11 characters"
    assert cpf_unmasked.isdigit(), "Unmasked CPF must contain only digits"

    # Check if the CPF is valid using the module 11 algorithm
    cpf_digits = [int(digit) for digit in cpf_unmasked]
    first_nine_digits = cpf_digits[:-2]
    first_verifier = cpf_digits[-2]
    second_verifier = cpf_digits[-1]

    def calculate_verifier(digits, multiplier):
       

# Generated at 2024-03-18 06:08:37.730204
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:08:45.040713
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf):
        def calculate_digit(cpf, position):
            value = sum(int(digit) * (position - index) for index, digit in enumerate(cpf[:position-1]))
            digit = ((value * 10) % 11) % 10
            return str(digit)

        first_digit = calculate_digit(cpf, 10)
        second_digit = calculate_digit(cpf, 11)
        return cpf[9] == first_digit and cpf[10] == second_digit

# Generated at 2024-03-18 06:08:51.847112
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf):
        def calculate_digit(cpf, position):
            value = sum(int(digit) * (position - index) for index, digit in enumerate(cpf[:position-1]))
            digit = ((value * 10) % 11) % 10
            return str(digit)

        first_digit = calculate_digit(cpf, 10)
        second_digit = calculate_digit(cpf, 11)
        return cpf[-2] == first_digit and cpf[-1] == second_digit

# Generated at 2024-03-18 06:08:55.413324
```python
    provider = BrazilSpecProvider()
    unmasked_cpf = provider.cpf(with_mask=False)
    masked_cpf = provider.cpf(with_mask=True)

    assert len(unmasked_cpf) == 11
    assert unmasked_cpf.isdigit()
    assert len(masked_cpf) == 14
    assert masked_cpf.count('.') == 2
    assert masked_cpf.count('-') == 1
    assert masked_cpf[3] == masked_cpf[7] == '.'
    assert masked_cpf[11] == '-'
```

# Generated at 2024-03-18 06:09:00.670824
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:09:04.463296
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should have a length of 14 with mask"
    assert cpf.count('.') == 2, "CPF should have two dots with mask"
    assert cpf.count('-') == 1, "CPF should have one hyphen with mask"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should have a length of 11 without mask"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:09:09.312125
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:09:14.866121
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask"
    assert cpf.count('.') == 2, "CPF should have 2 dots with mask"
    assert cpf.count('-') == 1, "CPF should have 1 dash with mask"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:09:57.979516
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:10:03.245022
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:10:07.797521
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:10:14.298434
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask."
    assert cpf.count('.') == 2, "CPF should have 2 dots with mask."
    assert cpf.count('-') == 1, "CPF should have 1 dash with mask."

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask."
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits."

    # Additional checks can be added to verify the validity of the CPF
```

# Generated at 2024-03-18 06:10:19.666701
```python
    provider = BrazilSpecProvider()
    unmasked_cpf = provider.cpf(with_mask=False)
    masked_cpf = provider.cpf(with_mask=True)

    assert len(unmasked_cpf) == 11
    assert unmasked_cpf.isdigit()
    assert len(masked_cpf) == 14
    assert masked_cpf.count('.') == 2
    assert masked_cpf.count('-') == 1
    assert masked_cpf[3] == masked_cpf[7] == '.'
    assert masked_cpf[11] == '-'
```

# Generated at 2024-03-18 06:10:24.053016
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should have a length of 14 with mask"
    assert cpf.count('.') == 2, "CPF should have two dots with mask"
    assert cpf.count('-') == 1, "CPF should have one dash with mask"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should have a length of 11 without mask"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:10:33.127684
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14  # CPF with mask should be 14 characters long
    assert cpf.count('.') == 2  # CPF should have two dots
    assert cpf.count('-') == 1  # CPF should have one dash

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11  # Unmasked CPF should be 11 characters long
    assert cpf_unmasked.isdigit()  # Unmasked CPF should be all digits
    assert all(0 <= int(digit) <= 9 for digit in cpf_unmasked)  # Each digit should be in the range 0-9

    # Additional checks can be added to verify the validity of the CPF number
```

# Generated at 2024-03-18 06:10:40.679305
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:10:45.667081
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should have a length of 14 with mask"
    assert cpf.count('.') == 2, "CPF should have two dots with mask"
    assert cpf.count('-') == 1, "CPF should have one dash with mask"

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should have a length of 11 without mask"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"
```

# Generated at 2024-03-18 06:10:50.421457
```python
    provider = BrazilSpecProvider()
    unmasked_cpf = provider.cpf(with_mask=False)
    masked_cpf = provider.cpf(with_mask=True)

    assert len(unmasked_cpf) == 11
    assert unmasked_cpf.isdigit()
    assert len(masked_cpf) == 14
    assert masked_cpf.count('.') == 2
    assert masked_cpf.count('-') == 1
    assert masked_cpf[3] == masked_cpf[7] == '.'
    assert masked_cpf[11] == '-'
```

# Generated at 2024-03-18 06:12:01.672174
```python
    provider = BrazilSpecProvider()
    generated_cnpj = provider.cnpj(with_mask=False)
    assert len(generated_cnpj) == 14
    assert generated_cnpj.isdigit()

    generated_cnpj_with_mask = provider.cnpj()
    assert len(generated_cnpj_with_mask) == 18
    assert generated_cnpj_with_mask.count('.') == 2
    assert generated_cnpj_with_mask.count('/') == 1
    assert generated_cnpj_with_mask.count('-') == 1
```

# Generated at 2024-03-18 06:12:10.537354
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf):
        cpf = [int(char) for char in cpf if char.isdigit()]
        if len(cpf) != 11 or len(set(cpf)) == 1:
            return False

        for i in range(9, 11):
            value = sum((cpf[num] * ((i+1) - num) for num in range(0, i)))
            digit = ((value * 10) % 11) % 10
            if digit != cpf[i]:
               

# Generated at 2024-03-18 06:12:21.120711
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    assert cpf.count('.') == 2
    assert cpf.count('-') == 1

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11
    assert cpf_unmasked.isdigit()

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf):
        def calculate_digit(cpf, position):
            value = sum(int(digit) * (position - index) for index, digit in enumerate(cpf[:position-1]))
            digit = ((value * 10) % 11) % 10
            return str(digit)

        first_digit = calculate_digit(cpf, 10)
        second_digit = calculate_digit(cpf, 11)
        return cpf[-2] == first_digit and cpf[-1] == second_digit

# Generated at 2024-03-18 06:12:27.691316
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:12:35.732117
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14, "CPF should be 14 characters long with mask."
    assert cpf.count('.') == 2, "CPF should have 2 dots with mask."
    assert cpf.count('-') == 1, "CPF should have 1 dash with mask."

    cpf_unmasked = provider.cpf(with_mask=False)
    assert len(cpf_unmasked) == 11, "CPF should be 11 characters long without mask."
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits."

    # Additional checks can be added to verify the correctness of the CPF digits
    # according to the Brazilian CPF algorithm, but this is a basic unit test.
```

# Generated at 2024-03-18 06:12:43.074062
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    cpf_unmasked = provider.cpf(with_mask=False)

    assert len(cpf) == 14, "CPF with mask should have length 14"
    assert cpf.count('.') == 2, "CPF with mask should have two dots"
    assert cpf.count('-') == 1, "CPF with mask should have one dash"

    assert len(cpf_unmasked) == 11, "Unmasked CPF should have length 11"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf_str):
        cpf_numbers = [int(digit) for digit in cpf_str if digit.isdigit()]

        # Calculate first digit
        sum_of_products = sum((10 - i) * v for i, v in enumerate(cpf_numbers[:9]))
        expected_first

# Generated at 2024-03-18 06:12:49.989141
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    cpf_unmasked = provider.cpf(with_mask=False)

    assert len(cpf) == 14, "CPF with mask should have length 14"
    assert cpf.count('.') == 2, "CPF with mask should have two dots"
    assert cpf.count('-') == 1, "CPF with mask should have one dash"

    assert len(cpf_unmasked) == 11, "Unmasked CPF should have length 11"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf_str):
        cpf_numbers = [int(digit) for digit in cpf_str if digit.isdigit()]

        # Calculate first digit
        sum_of_products = sum((10 - i) * v for i, v in enumerate(cpf_numbers[:9]))
        expected_first

# Generated at 2024-03-18 06:13:03.179574
```python
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    cpf_unmasked = provider.cpf(with_mask=False)

    assert len(cpf) == 14, "CPF with mask should have 14 characters including dots and dash"
    assert cpf.count('.') == 2, "CPF with mask should have two dots"
    assert cpf.count('-') == 1, "CPF with mask should have one dash"

    assert len(cpf_unmasked) == 11, "Unmasked CPF should have 11 characters"
    assert cpf_unmasked.isdigit(), "Unmasked CPF should contain only digits"

    # Check if the CPF is valid (Brazilian CPF algorithm)
    def is_valid_cpf(cpf_str):
        cpf_numbers = [int(digit) for digit in cpf_str if digit.isdigit()]

        # Calculate first digit
        sum_of_products = sum(a*b for a, b in zip(cpf_numbers[:9], range(10,

# Generated at 2024-03-18 06:13:09.182284
```python
    provider = BrazilSpecProvider()
    unmasked_cnpj = provider.cnpj(with_mask=False)
    masked_cnpj = provider.cnpj(with_mask=True)

    assert len(unmasked_cnpj) == 14
    assert unmasked_cnpj.isdigit()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
    assert masked_cnpj[2] == '.'
    assert masked_cnpj[6] == '.'
    assert masked_cnpj[10] == '/'
    assert masked_cnpj[15] == '-'
```

# Generated at 2024-03-18 06:13:13.073902
```python
    provider = BrazilSpecProvider()
    generated_cnpj = provider.cnpj(with_mask=False)
    assert len(generated_cnpj) == 14
    assert generated_cnpj.isdigit()

    masked_cnpj = provider.cnpj()
    assert len(masked_cnpj) == 18
    assert masked_cnpj.count('.') == 2
    assert masked_cnpj.count('/') == 1
    assert masked_cnpj.count('-') == 1
```