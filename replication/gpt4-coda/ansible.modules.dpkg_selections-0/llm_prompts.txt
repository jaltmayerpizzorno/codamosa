

---- 2024-03-18 02:19:17.347170
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:19:23.988064
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:19:25.749878
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:19:33.004957
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:19:40.674104
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:19:47.392571
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:19:48.741824
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:19:59.184126
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:05.195287
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:06.613812
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:25.256820
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:31.069717
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:38.067787
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:39.219391
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:46.445402
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:51.701103
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:20:57.632814
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:21:04.762164
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:21:11.335141
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:21:18.494952
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:21:43.512907
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:21:49.188411
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:21:51.042224
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:22:02.773386
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:22:09.434310
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:22:10.989466
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:22:12.700928
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:22:13.795126
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:22:22.500786
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:22:23.535622
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:22:59.707191
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:05.173572
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:06.230043
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:16.825655
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:23.841515
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:29.532695
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:36.835898
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:42.773142
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:44.385302
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:23:45.416359
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:24:56.905781
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:02.822045
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:04.359804
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:12.120673
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:13.485391
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:23.337109
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:24.517452
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:32.468115
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:39.153729
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:25:45.690632
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:11.145475
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:12.471496
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:18.700447
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:32.525998
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:34.111097
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:39.592300
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:46.608997
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:54.339847
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:55.341238
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 02:28:56.431704
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nDOCUMENTATION = '''\n---\nmodule: dpkg_selections\nshort_description: Dpkg package selection selections\ndescription:\n    - Change dpkg package selection state via --get-selections and --set-selections.\nversion_added: \"2.0\"\nauthor:\n- Brian Brazil (@brian-brazil)  <brian.brazil@boxever.com>\noptions:\n    name:\n        description:\n            - Name of the package.\n        required: true\n        type: str\n    selection:\n        description:\n            - The selection state to set the package to.\n        choices: [ 'install', 'hold', 'deinstall', 'purge' ]\n        required: true\n        type: str\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module won't cause any packages to be installed/removed/purged, use the C(apt) module for that.\n'''\nEXAMPLES = '''\n- name: Prevent python from being upgraded\n  dpkg_selections:\n    name: python\n    selection: hold\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            selection=dict(choices=['install', 'hold', 'deinstall', 'purge'], required=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    dpkg = module.get_bin_path('dpkg', True)\n\n    name = module.params['name']\n    selection = module.params['selection']\n\n    # Get current settings.\n    rc, out, err = module.run_command([dpkg, '--get-selections', name], check_rc=True)\n    if not out:\n        current = 'not present'\n    else:\n        current = out.split()[1]\n\n    changed = current != selection\n\n    if module.check_mode or not changed:\n        module.exit_json(changed=changed, before=current, after=selection)\n\n    module.run_command([dpkg, '--set-selections'], data=\"%s %s\" % (name, selection), check_rc=True)\n    module.exit_json(changed=changed, before=current, after=selection)\n\n\nif __name__ == '__main__':\n    main()\n\n# Unit test for function main\ndef test_main():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}