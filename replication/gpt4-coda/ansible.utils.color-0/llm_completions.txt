

# Generated at 2024-03-18 04:36:47.540612
    assert colorize("GREEN", 1, "green") == stringc("GREEN=1   ", "green")
    assert colorize("YELLOW", 2, "yellow") == stringc("YELLOW=2  ", "yellow")
    assert colorize("RED", 0, "red") == "RED=0   "
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

# Generated at 2024-03-18 04:36:53.383305
    # Test that stringc returns the text unchanged when ANSIBLE_COLOR is False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("test text", "green") == "test text"

    # Test that stringc returns the colored text when ANSIBLE_COLOR is True
    ANSIBLE_COLOR = True
    assert stringc("test text", "green") == "\033[32mtest text\033[0m"

    # Test that stringc handles newlines in the text
    assert stringc("test\ntext", "green") == "\033[32mtest\033[0m\n\033[32mtext\033[0m"

    # Test that stringc wraps non-visible characters when requested
    assert stringc("test text", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002test text\001\033[0m

# Generated at 2024-03-18 04:36:59.048433
    # Test standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test extended colors by number
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color1') == '38;5;1'
    assert parsecolor('color255') == '38;5;255'

    # Test rgb colors
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test grayscale colors
    assert parsecolor

# Generated at 2024-03-18 04:37:04.957709
    # Test cases for stringc function
    assert stringc("test", "green") == "\033[32mtest\033[0m"
    assert stringc("test", "color1") == "\033[38;5;1mtest\033[0m"
    assert stringc("test", "rgb500") == "\033[38;5;196mtest\033[0m"
    assert stringc("test", "gray10") == "\033[38;5;242mtest\033[0m"
    assert stringc("test", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002test\001\033[0m\002"

    # Test cases with ANSIBLE_COLOR set to False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("test", "green") == "test"
    assert stringc("

# Generated at 2024-03-18 04:37:10.049852
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, test_stats, color=False) == u"%-26s" % test_host
    assert hostcolor(test_host, test_stats) == u"%-37s" % test_host

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    test_stats['changed'] = 0
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)

    # Test with unreachable
   

# Generated at 2024-03-18 04:37:17.643007
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with colorXXX (0-255)
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color255') == '38;5;255'

    # Test with rgbXXX (0-5 for each color component)
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test with grayXX (0-23)
    assert

# Generated at 2024-03-18 04:37:23.585345
    test_host = "test.example.com"
    stats_no_change = {'failures': 0, 'unreachable': 0, 'changed': 0}
    stats_with_change = {'failures': 0, 'unreachable': 0, 'changed': 1}
    stats_with_failure = {'failures': 1, 'unreachable': 0, 'changed': 0}
    stats_unreachable = {'failures': 0, 'unreachable': 1, 'changed': 0}

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, stats_no_change) == u"%-26s" % test_host

    # Test with changes
    assert hostcolor(test_host, stats_with_change) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    assert hostcolor(test_host, stats_with_failure) == u"%-37s

# Generated at 2024-03-18 04:37:30.293875
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable hosts
    assert hostcolor(test_host, test_stats, color=False) == u"%-26s" % test_host
    assert hostcolor(test_host, test_stats) == u"%-37s" % test_host

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    test_stats['changed'] = 0
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)

    # Test with unreachable hosts

# Generated at 2024-03-18 04:37:42.899946
    # Test cases for stringc function
    assert stringc("Hello, World!", "green") == "\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == "\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == "\033[33mWarning\033[0m"
    assert stringc("No color", "nocolor") == "No color"
    assert stringc("Wrapped chars", "blue", wrap_nonvisible_chars=True) == "\001\033[34m\002Wrapped chars\001\033[0m\002"

    # Test with ANSIBLE_COLOR set to False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("No color due to ANSIBLE_COLOR", "green") == "No color due to ANSIBLE_COLOR"

    # Reset ANS

# Generated at 2024-03-18 04:37:49.946056
    # Define a dictionary to simulate stats
    stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test cases where there are no failures, unreachable, or changes
    assert hostcolor('host1', stats, color=False) == u"%-26s" % 'host1'
    assert hostcolor('host1', stats) == u"%-37s" % 'host1'

    # Test cases with changes
    stats['changed'] = 1
    assert hostcolor('host2', stats) == u"%-37s" % stringc('host2', C.COLOR_CHANGED)

    # Test cases with failures
    stats['changed'] = 0
    stats['failures'] = 1
    assert hostcolor('host3', stats) == u"%-37s" % stringc('host3', C.COLOR_ERROR)

    #

# Generated at 2024-03-18 04:38:01.426852
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable hosts
    assert hostcolor(test_host, test_stats, color=False) == u"%-26s" % test_host
    assert hostcolor(test_host, test_stats) == u"%-37s" % test_host

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    test_stats['changed'] = 0
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)

    # Test with unreachable hosts

# Generated at 2024-03-18 04:38:08.061559
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with colorXXX (0-255)
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color255') == '38;5;255'

    # Test with rgbXXX (0-5 for each color component)
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test with grayXX (0-23)
    assert

# Generated at 2024-03-18 04:38:14.060585
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("Hello, World!", "green") == "Hello, World!"
    assert stringc("Error message", "red") == "Error message"
    assert stringc("Warning", "yellow") == "Warning"

    # Test with non-visible character wrapping
    ANSIBLE_COLOR = True
    assert stringc("Prompt", "blue", wrap_nonvisible_chars=True) == u"\001\033[34m\002

# Generated at 2024-03-18 04:38:20.904342
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("Hello, World!", "green") == "Hello, World!"
    assert stringc("Error message", "red") == "Error message"
    assert stringc("Warning", "yellow") == "Warning"

    # Test with non-visible character wrapping
    ANSIBLE_COLOR = True
    assert stringc("Prompt", "blue", wrap_nonvisible_chars=True) == u"\001\033[34m\002

# Generated at 2024-03-18 04:38:26.977953
    # Test that stringc returns the text unchanged when ANSIBLE_COLOR is False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("test text", "green") == "test text"

    # Test that stringc returns the colored text when ANSIBLE_COLOR is True
    ANSIBLE_COLOR = True
    assert stringc("test text", "green") == "\033[32mtest text\033[0m"

    # Test that stringc handles newlines in the text
    assert stringc("test\ntext", "green") == "\033[32mtest\033[0m\n\033[32mtext\033[0m"

    # Test that stringc wraps non-visible characters when requested
    assert stringc("test text", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002test text\001\033[0m

# Generated at 2024-03-18 04:38:31.559809
    assert colorize("GREEN", 0, "green") == "GREEN=0   "
    assert colorize("YELLOW", 1, "yellow") == stringc("YELLOW=1   ", "yellow")
    assert colorize("RED", 2, "red") == stringc("RED=2    ", "red")
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

    print("All tests passed!")

# Generated at 2024-03-18 04:38:36.565320
    assert colorize("GREEN", 1, "green") == stringc("GREEN=1   ", "green")
    assert colorize("YELLOW", 2, "yellow") == stringc("YELLOW=2  ", "yellow")
    assert colorize("RED", 0, "red") == "RED=0   "
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

# Run the unit test
test_colorize()

# Generated at 2024-03-18 04:38:41.539435
    # Test that stringc returns the text unchanged when ANSIBLE_COLOR is False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("test text", "green") == "test text"

    # Test that stringc returns the colored text when ANSIBLE_COLOR is True
    ANSIBLE_COLOR = True
    assert stringc("test text", "green") == "\033[32mtest text\033[0m"

    # Test that stringc handles newlines in the text
    assert stringc("test\ntext", "green") == "\033[32mtest\033[0m\n\033[32mtext\033[0m"

    # Test that stringc wraps non-visible characters when requested
    assert stringc("test text", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002test text\001\033[0m

# Generated at 2024-03-18 04:38:46.675244
    # Test that stringc returns the text unchanged when ANSIBLE_COLOR is False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("test text", "green") == "test text"

    # Test that stringc returns the colored text when ANSIBLE_COLOR is True
    ANSIBLE_COLOR = True
    assert stringc("test text", "green") == "\033[32mtest text\033[0m"

    # Test that stringc handles newlines in the text
    assert stringc("test\ntext", "green") == "\033[32mtest\033[0m\n\033[32mtext\033[0m"

    # Test that stringc wraps non-visible characters when requested
    assert stringc("test text", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002test text\001\033[0m

# Generated at 2024-03-18 04:38:51.948830
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with colorXXX values
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color1') == '38;5;1'
    assert parsecolor('color2') == '38;5;2'
    assert parsecolor('color3') == '38;5;3'
    assert parsecolor('color4') == '38;5;4'
    assert parsecolor('color5') == '38;5;5

# Generated at 2024-03-18 04:39:02.690255
    # Test cases for stringc function
    assert stringc("Hello, World!", "green") == "\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == "\033[31mError message\033[0m"
    assert stringc("Warning message", "yellow") == "\033[33mWarning message\033[0m"
    assert stringc("Info message", "blue") == "\033[34mInfo message\033[0m"
    assert stringc("No color", "nocolor") == "No color"
    assert stringc("Special chars \n new line", "cyan") == "\033[36mSpecial chars \n new line\033[0m"
    assert stringc("Wrapped chars", "magenta", wrap_nonvisible_chars=True) == "\001\033[35m\002Wrapped chars\001\033[0m\002

# Generated at 2024-03-18 04:39:08.177507
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_OK)

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)
    test_stats['changed'] = 0

    # Test with failures
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)
    test_stats['failures'] = 0

    # Test with unreachable

# Generated at 2024-03-18 04:39:11.658087
    assert colorize("GREEN", 0, "green") == "GREEN=0   "
    assert colorize("YELLOW", 1, "yellow") == stringc("YELLOW=1   ", "yellow")
    assert colorize("RED", 2, "red") == stringc("RED=2    ", "red")
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

# Generated at 2024-03-18 04:39:16.400286
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with color numbers
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color1') == '38;5;1'
    assert parsecolor('color255') == '38;5;255'

    # Test with rgb
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test with grayscale
    assert parsecolor

# Generated at 2024-03-18 04:39:22.511616
    test_host = "test.example.com"
    stats_no_change = {'failures': 0, 'unreachable': 0, 'changed': 0}
    stats_with_change = {'failures': 0, 'unreachable': 0, 'changed': 1}
    stats_with_failure = {'failures': 1, 'unreachable': 0, 'changed': 0}
    stats_unreachable = {'failures': 0, 'unreachable': 1, 'changed': 0}

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, stats_no_change) == u"%-26s" % test_host

    # Test with changes
    assert hostcolor(test_host, stats_with_change, color=True) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    assert hostcolor(test_host, stats_with_failure, color=True)

# Generated at 2024-03-18 04:39:27.281047
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_OK)

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)
    test_stats['changed'] = 0

    # Test with failures
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)
    test_stats['failures'] = 0

    # Test with unreachable

# Generated at 2024-03-18 04:39:32.788134
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with colorXXX values
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color1') == '38;5;1'
    assert parsecolor('color255') == '38;5;255'

    # Test with rgbXXX values
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test with grayXX values

# Generated at 2024-03-18 04:39:38.348031
    assert colorize("OK", 0, None) == "OK  =0   "
    assert colorize("CHANGED", 2, C.COLOR_CHANGED) == stringc("CHANGED=2   ", C.COLOR_CHANGED)
    assert colorize("FAILED", 1, C.COLOR_ERROR) == stringc("FAILED=1   ", C.COLOR_ERROR)
    assert colorize("SKIPPED", 3, C.COLOR_SKIP) == stringc("SKIPPED=3   ", C.COLOR_SKIP)
    assert colorize("UNREACHABLE", 0, C.COLOR_WARN) == "UNREACHABLE=0   "
    assert colorize("RESCUED", 1, C.COLOR_DEBUG) == stringc("RESCUED=1   ", C.COLOR_DEBUG)
    print("All tests passed!")

# Generated at 2024-03-18 04:39:44.573471
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % test_host

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    test_stats['changed'] = 0
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)

    # Test with unreachable
    test_stats['failures'] = 0
    test_stats['un

# Generated at 2024-03-18 04:39:49.050300
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("Hello, World!", "green") == "Hello, World!"
    assert stringc("Error message", "red") == "Error message"
    assert stringc("Warning", "yellow") == "Warning"

    # Test with non-visible character wrapping
    ANSIBLE_COLOR = True
    assert stringc("Prompt: ", "blue", wrap_nonvisible_chars=True) == u"\001\033[34m\

# Generated at 2024-03-18 04:39:59.695504
```python
    # Test cases for stringc function
    assert stringc("test", "green") == "\033[32mtest\033[0m"
    assert stringc("test", "yellow", True) == "\001\033[33m\002test\001\033[0m\002"
    assert stringc("multi\nline", "blue") == "\033[34mmulti\033[0m\n\033[34mline\033[0m"
    assert stringc("no color", "nocolor") == "no color"

    # Test cases when ANSIBLE_COLOR is False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("test", "green") == "test"
    assert stringc("test", "yellow", True) == "test"
    assert stringc("multi\nline", "blue") == "multi\nline"
    assert string

# Generated at 2024-03-18 04:40:04.439972
    test_host = "test.example.com"
    stats_no_change = {'failures': 0, 'unreachable': 0, 'changed': 0}
    stats_with_change = {'failures': 0, 'unreachable': 0, 'changed': 1}
    stats_with_failure = {'failures': 1, 'unreachable': 0, 'changed': 0}
    stats_unreachable = {'failures': 0, 'unreachable': 1, 'changed': 0}

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, stats_no_change) == u"%-26s" % test_host

    # Test with changes
    assert hostcolor(test_host, stats_with_change) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    assert hostcolor(test_host, stats_with_failure) == u"%-37s

# Generated at 2024-03-18 04:40:11.625269
```python
    # Test cases for stringc function
    assert stringc("test", "red") == "\033[31mtest\033[0m" if ANSIBLE_COLOR else "test"
    assert stringc("test", "green") == "\033[32mtest\033[0m" if ANSIBLE_COLOR else "test"
    assert stringc("test", "blue") == "\033[34mtest\033[0m" if ANSIBLE_COLOR else "test"
    assert stringc("test", "color123") == "\033[38;5;123mtest\033[0m" if ANSIBLE_COLOR else "test"
    assert stringc("test", "rgb555") == "\033[38;5;255mtest\033[0m" if ANSIBLE_COLOR else "test"
    assert stringc("test", "gray10") == "\033[38;5

# Generated at 2024-03-18 04:40:15.393917
    assert colorize("GREEN", 0, "green") == "GREEN=0   "
    assert colorize("YELLOW", 1, "yellow") == stringc("YELLOW=1   ", "yellow")
    assert colorize("RED", 2, "red") == stringc("RED=2   ", "red")
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

    print("All tests passed!")

# Generated at 2024-03-18 04:40:22.045555
```python
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with color256
    assert parsecolor('color1') == '38;5;1'
    assert parsecolor('color9') == '38;5;9'
    assert parsecolor('color16') == '38;5;16'
    assert parsecolor('color231') == '38;5;231'

    # Test with rgb
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555

# Generated at 2024-03-18 04:40:27.034147
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("Hello, World!", "green") == "Hello, World!"
    assert stringc("Error message", "red") == "Error message"
    assert stringc("Warning", "yellow") == "Warning"

    # Test with non-visible character wrapping
    ANSIBLE_COLOR = True
    assert stringc("Prompt: ", "blue", wrap_nonvisible_chars=True) == u"\001\033[34m\

# Generated at 2024-03-18 04:40:31.037189
    assert colorize("GREEN", 1, "green") == stringc("GREEN=1   ", "green")
    assert colorize("YELLOW", 2, "yellow") == stringc("YELLOW=2  ", "yellow")
    assert colorize("RED", 0, "red") == "RED=0   "
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

# Generated at 2024-03-18 04:40:38.243780
    # Test cases for stringc function
    assert stringc("Hello, World!", "green") == "\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == "\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == "\033[33mWarning\033[0m"
    assert stringc("Info", "blue") == "\033[34mInfo\033[0m"
    assert stringc("No color", "nocolor") == "No color"
    assert stringc("Colored\nNew Line", "green") == "\033[32mColored\n\033[32mNew Line\033[0m"
    assert stringc("Non-visible chars", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002Non-visible chars\001\033[0m\002

# Generated at 2024-03-18 04:40:45.226090
    # Define a stats dictionary with different scenarios
    stats = {
        'ok': {'failures': 0, 'unreachable': 0, 'changed': 0},
        'changed': {'failures': 0, 'unreachable': 0, 'changed': 1},
        'failure': {'failures': 1, 'unreachable': 0, 'changed': 0},
        'unreachable': {'failures': 0, 'unreachable': 1, 'changed': 0},
    }

    # Test hostcolor with different stats
    assert hostcolor('host_ok', stats['ok']) == u"%-26s" % 'host_ok'
    assert hostcolor('host_changed', stats['changed'], color=True) == u"%-37s" % stringc('host_changed', C.COLOR_CHANGED)
    assert hostcolor('host_failure', stats['failure'], color=True) == u"%-37s

# Generated at 2024-03-18 04:40:49.303655
    assert colorize("GREEN", 1, "green") == stringc("GREEN=1   ", "green")
    assert colorize("YELLOW", 2, "yellow") == stringc("YELLOW=2   ", "yellow")
    assert colorize("RED", 0, "red") == "RED=0   "
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

# Run the unit test
test_colorize()

# Generated at 2024-03-18 04:41:01.982393
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with color256
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color255') == '38;5;255'

    # Test with rgb
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test with gray scale
    assert parsecolor('gray0') == '38;5;232'
    assert parse

# Generated at 2024-03-18 04:41:08.518931
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with color256
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color255') == '38;5;255'

    # Test with rgb
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test with gray scale
    assert parsecolor('gray0') == '38;5;232'
    assert parse

# Generated at 2024-03-18 04:41:16.060560
    # Define a dictionary to simulate stats
    stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no failures, unreachable, or changes
    assert hostcolor('testhost1', stats, color=True) == u"%-37s" % 'testhost1'

    # Test with changes
    stats['changed'] = 1
    assert hostcolor('testhost2', stats, color=True) == u"%-37s" % stringc('testhost2', C.COLOR_CHANGED)

    # Test with failures
    stats['changed'] = 0
    stats['failures'] = 1
    assert hostcolor('testhost3', stats, color=True) == u"%-37s" % stringc('testhost3', C.COLOR_ERROR)

    # Test with unreachable
    stats['failures'] = 0
   

# Generated at 2024-03-18 04:41:23.529254
    # Define a stats dictionary with different scenarios
    stats = {
        'ok': {'failures': 0, 'unreachable': 0, 'changed': 0},
        'changed': {'failures': 0, 'unreachable': 0, 'changed': 1},
        'failure': {'failures': 1, 'unreachable': 0, 'changed': 0},
        'unreachable': {'failures': 0, 'unreachable': 1, 'changed': 0},
    }

    # Test hostcolor with different stats
    assert hostcolor('host_ok', stats['ok']) == u"%-26s" % 'host_ok'
    assert hostcolor('host_changed', stats['changed']) == u"%-37s" % stringc('host_changed', C.COLOR_CHANGED)
    assert hostcolor('host_failure', stats['failure']) == u"%-37s" % stringc('host

# Generated at 2024-03-18 04:41:31.021630
    # Test cases for stringc function
    assert stringc("Hello, World!", "green") == "\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == "\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == "\033[33mWarning\033[0m"
    assert stringc("No color", "nocolor") == "No color"
    assert stringc("Colored\nNewline", "blue") == "\033[34mColored\nNewline\033[0m"
    assert stringc("Non-visible chars", "cyan", wrap_nonvisible_chars=True) == "\001\033[36m\002Non-visible chars\001\033[0m\002"

    # Test with ANSIBLE_COLOR set to False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False


# Generated at 2024-03-18 04:41:36.089447
    test_host = "test.example.com"
    stats_no_change = {'failures': 0, 'unreachable': 0, 'changed': 0}
    stats_failure = {'failures': 1, 'unreachable': 0, 'changed': 0}
    stats_unreachable = {'failures': 0, 'unreachable': 1, 'changed': 0}
    stats_changed = {'failures': 0, 'unreachable': 0, 'changed': 1}

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, stats_no_change) == u"%-26s" % test_host

    # Test with failures
    assert hostcolor(test_host, stats_failure, color=False) == u"%-26s" % test_host
    assert hostcolor(test_host, stats_failure) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)

    #

# Generated at 2024-03-18 04:41:40.594397
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("Hello, World!", "green") == "Hello, World!"
    assert stringc("Error message", "red") == "Error message"
    assert stringc("Warning", "yellow") == "Warning"

    # Test with non-standard colors
    ANSIBLE_COLOR = True
    assert stringc("Custom color", "color42") == u"\033[38;5;42mCustom color\033[

# Generated at 2024-03-18 04:41:45.867568
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with color numbers
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color1') == '38;5;1'
    assert parsecolor('color255') == '38;5;255'

    # Test with rgb values
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test with gray values
    assert

# Generated at 2024-03-18 04:41:52.792590
    # Test cases for stringc function
    assert stringc("test", "green") == "\033[32mtest\033[0m"
    assert stringc("test", "yellow", True) == "\001\033[33m\002test\001\033[0m\002"
    assert stringc("multi\nline", "blue") == "\033[34mmulti\033[0m\n\033[34mline\033[0m"
    assert stringc("no color", "nocolor") == "no color"
    assert stringc("test", "color42") == "\033[38;5;42mtest\033[0m"
    assert stringc("test", "rgb123") == "\033[38;5;38mtest\033[0m"
    assert stringc("test", "gray10") == "\033[38;5;242mtest\033[

# Generated at 2024-03-18 04:42:01.350667
```python
    # Test with standard color names
    assert parsecolor('black') == '30'
    assert parsecolor('red') == '31'
    assert parsecolor('green') == '32'
    assert parsecolor('yellow') == '33'
    assert parsecolor('blue') == '34'
    assert parsecolor('magenta') == '35'
    assert parsecolor('cyan') == '36'
    assert parsecolor('white') == '37'

    # Test with color numbers
    assert parsecolor('color0') == '38;5;0'
    assert parsecolor('color1') == '38;5;1'
    assert parsecolor('color255') == '38;5;255'

    # Test with rgb values
    assert parsecolor('rgb000') == '38;5;16'
    assert parsecolor('rgb555') == '38;5;231'

    # Test with gray scale

# Generated at 2024-03-18 04:42:11.172707
    assert colorize("GREEN", 0, "green") == "GREEN=0   "
    assert colorize("YELLOW", 1, "yellow") == stringc("YELLOW=1   ", "yellow")
    assert colorize("RED", 2, "red") == stringc("RED=2   ", "red")
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

# Run the unit test
test_colorize()

# Generated at 2024-03-18 04:42:17.211111
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable hosts
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_OK)

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)
    test_stats['changed'] = 0

    # Test with failures
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)
    test_stats['failures'] = 0

    # Test with

# Generated at 2024-03-18 04:42:20.933288
    assert colorize("GREEN", 1, "green") == stringc("GREEN=1   ", "green")
    assert colorize("YELLOW", 2, "yellow") == stringc("YELLOW=2  ", "yellow")
    assert colorize("RED", 0, "red") == "RED=0   "
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("CYAN", -1, "cyan") == stringc("CYAN=-1  ", "cyan")
    print("All tests passed!")

# Generated at 2024-03-18 04:42:27.536754
    test_host = "test.example.com"
    stats_no_change = {'failures': 0, 'unreachable': 0, 'changed': 0}
    stats_failure = {'failures': 1, 'unreachable': 0, 'changed': 0}
    stats_unreachable = {'failures': 0, 'unreachable': 1, 'changed': 0}
    stats_changed = {'failures': 0, 'unreachable': 0, 'changed': 1}

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, stats_no_change) == u"%-26s" % test_host

    # Test with changes
    assert hostcolor(test_host, stats_changed) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    assert hostcolor(test_host, stats_failure) == u"%-37s" % stringc

# Generated at 2024-03-18 04:42:33.758649
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("Hello, World!", "green") == "Hello, World!"
    assert stringc("Error message", "red") == "Error message"
    assert stringc("Warning", "yellow") == "Warning"

    # Test with non-visible character wrapping
    ANSIBLE_COLOR = True
    assert stringc("Prompt", "blue", wrap_nonvisible_chars=True) == u"\001\033[34m\002

# Generated at 2024-03-18 04:42:41.130151
    # Define a dictionary to simulate stats
    stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test cases where there are no failures, unreachable, or changes
    assert hostcolor('host1', stats, color=False) == u"%-26s" % 'host1'
    assert hostcolor('host1', stats) == u"%-37s" % 'host1'

    # Test cases with changes
    stats['changed'] = 1
    assert hostcolor('host2', stats) == u"%-37s" % stringc('host2', C.COLOR_CHANGED)

    # Test cases with failures
    stats['changed'] = 0
    stats['failures'] = 1
    assert hostcolor('host3', stats) == u"%-37s" % stringc('host3', C.COLOR_ERROR)

    #

# Generated at 2024-03-18 04:42:52.267230
    # Test that stringc returns the text unchanged when ANSIBLE_COLOR is False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("test text", "green") == "test text"

    # Test that stringc returns the colored text when ANSIBLE_COLOR is True
    ANSIBLE_COLOR = True
    assert stringc("test text", "green") == "\033[32mtest text\033[0m"

    # Test that stringc handles newlines in the text
    assert stringc("test\ntext", "green") == "\033[32mtest\033[0m\n\033[32mtext\033[0m"

    # Test that stringc wraps non-visible characters when requested
    assert stringc("test text", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002test text\001\033[0m

# Generated at 2024-03-18 04:42:59.090133
    # Test cases for stringc function
    assert stringc("Hello, World!", "green") == "\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == "\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == "\033[33mWarning\033[0m"
    assert stringc("No color", "nocolor") == "No color"
    assert stringc("Colored\nNew Line", "blue") == "\033[34mColored\nNew Line\033[0m"
    assert stringc("Non-visible chars", "cyan", wrap_nonvisible_chars=True) == "\001\033[36m\002Non-visible chars\001\033[0m\002"

    print("All tests for stringc function passed.")

# Run the test
test_stringc()

# Generated at 2024-03-18 04:43:06.883343
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("Hello, World!", "green") == "Hello, World!"
    assert stringc("Error message", "red") == "Error message"
    assert stringc("Warning", "yellow") == "Warning"

    # Test with non-visible character wrapping
    ANSIBLE_COLOR = True
    assert stringc("Prompt", "blue", wrap_nonvisible_chars=True) == u"\001\033[34m\002

# Generated at 2024-03-18 04:43:12.779925
```python
    assert colorize("GREEN", 0, None) == "GREEN=0   "
    assert colorize("YELLOW", 1, "yellow") == "\033[33mYELLOW=1   \033[0m"
    assert colorize("RED", 2, "red") == "\033[31mRED=2   \033[0m"
    assert colorize("BLUE", 3, "blue") == "\033[34mBLUE=3   \033[0m"
    assert colorize("NO_COLOR", 4, None) == "NO_COLOR=4   "
    assert colorize("INVALID_COLOR", 5, "no_such_color") == "INVALID_COLOR=5   "
```

# Generated at 2024-03-18 04:43:33.535411
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % test_host

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    test_stats['changed'] = 0
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)

    # Test with unreachable
    test_stats['failures'] = 0
    test_stats['un

# Generated at 2024-03-18 04:43:41.376180
```python
    # Define a dictionary with sample stats
    stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable hosts
    assert hostcolor('host1', stats, color=True) == u"%-37s" % 'host1'
    assert hostcolor('host1', stats, color=False) == u"%-26s" % 'host1'

    # Test with changes
    stats['changed'] = 1
    assert hostcolor('host2', stats, color=True) == u"%-37s" % stringc('host2', C.COLOR_CHANGED)
    stats['changed'] = 0

    # Test with failures
    stats['failures'] = 1
    assert hostcolor('host3', stats, color=True) == u"%-37s" % stringc('host

# Generated at 2024-03-18 04:43:47.507678
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable hosts
    assert hostcolor(test_host, test_stats, color=False) == u"%-26s" % test_host
    assert hostcolor(test_host, test_stats) == u"%-37s" % test_host

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats, color=False) == u"%-26s" % test_host
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats, color=False) == u"%-26s

# Generated at 2024-03-18 04:43:54.632371
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("No color", "blue") == "No color"

    # Test with non-visible character wrapping
    ANSIBLE_COLOR = True
    assert stringc("Prompt", "cyan", wrap_nonvisible_chars=True) == u"\001\033[36m\002Prompt\001\033[0m\002"

    print("All tests passed.")

# Run the test
test_stringc()

# Generated at 2024-03-18 04:43:59.205461
    assert colorize("GREEN", 1, "green") == stringc("GREEN=1   ", "green")
    assert colorize("YELLOW", 2, "yellow") == stringc("YELLOW=2  ", "yellow")
    assert colorize("RED", 0, "red") == "RED=0   "
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

# Run the unit test
test_colorize()

# Generated at 2024-03-18 04:44:05.689463
    # Define a dictionary to simulate stats
    stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable hosts
    assert hostcolor('host1', stats, color=True) == u"%-37s" % 'host1'

    # Test with changes
    stats['changed'] = 1
    assert hostcolor('host2', stats, color=True) == u"%-37s" % stringc('host2', C.COLOR_CHANGED)

    # Test with failures
    stats['changed'] = 0
    stats['failures'] = 1
    assert hostcolor('host3', stats, color=True) == u"%-37s" % stringc('host3', C.COLOR_ERROR)

    # Test with unreachable hosts
    stats['failures'] = 0
    stats['unreachable

# Generated at 2024-03-18 04:44:13.938166
    # Test cases for stringc function
    assert stringc("hello", "green") == "\033[32mhello\033[0m"
    assert stringc("world", "blue") == "\033[34mworld\033[0m"
    assert stringc("error", "red") == "\033[31merror\033[0m"
    assert stringc("warning", "yellow") == "\033[33mwarning\033[0m"
    assert stringc("notice", "color14") == "\033[38;5;14mnotice\033[0m"
    assert stringc("info", "rgb555") == "\033[38;5;225minfo\033[0m"
    assert stringc("debug", "gray10") == "\033[38;5;242mdebug\033[0m"
    assert stringc("no color", "nocolor", wrap_nonvisible

# Generated at 2024-03-18 04:44:17.499100
    assert colorize("GREEN", 1, "green") == stringc("GREEN=1   ", "green")
    assert colorize("YELLOW", 2, "yellow") == stringc("YELLOW=2  ", "yellow")
    assert colorize("RED", 0, "red") == "RED=0   "
    assert colorize("BLUE", 3, None) == "BLUE=3   "
    assert colorize("NO_COLOR", 4, "blue") == "NO_COLOR=4   " if not ANSIBLE_COLOR else stringc("NO_COLOR=4   ", "blue")

# Generated at 2024-03-18 04:44:22.893310
    # Test cases for stringc function
    assert stringc("test", "green") == "\033[32mtest\033[0m"
    assert stringc("test", "color1") == "\033[38;5;1mtest\033[0m"
    assert stringc("test", "rgb500") == "\033[38;5;196mtest\033[0m"
    assert stringc("test", "gray10") == "\033[38;5;242mtest\033[0m"
    assert stringc("test", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002test\001\033[0m\002"
    assert stringc("multi\nline", "blue") == "\033[34mmulti\033[0m\n\033[34mline\033[0m"
    assert stringc("", "red") == ""


# Generated at 2024-03-18 04:44:28.052599
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_OK)

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)
    test_stats['changed'] = 0

    # Test with failures
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats, color=True) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)
    test_stats['failures'] = 0

    # Test with unreachable

# Generated at 2024-03-18 04:44:52.350548
    test_host = "test.example.com"
    stats_no_change = {'failures': 0, 'unreachable': 0, 'changed': 0}
    stats_with_change = {'failures': 0, 'unreachable': 0, 'changed': 1}
    stats_with_failure = {'failures': 1, 'unreachable': 0, 'changed': 0}
    stats_unreachable = {'failures': 0, 'unreachable': 1, 'changed': 0}

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, stats_no_change) == u"%-26s" % test_host

    # Test with changes
    assert hostcolor(test_host, stats_with_change, color=True) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    assert hostcolor(test_host, stats_with_failure, color=True)

# Generated at 2024-03-18 04:45:00.038497
    test_host = "test.example.com"
    stats_no_change = {'failures': 0, 'unreachable': 0, 'changed': 0}
    stats_with_change = {'failures': 0, 'unreachable': 0, 'changed': 1}
    stats_with_failure = {'failures': 1, 'unreachable': 0, 'changed': 0}
    stats_unreachable = {'failures': 0, 'unreachable': 1, 'changed': 0}

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, stats_no_change) == u"%-26s" % test_host

    # Test with changes
    assert hostcolor(test_host, stats_with_change) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    assert hostcolor(test_host, stats_with_failure) == u"%-37s

# Generated at 2024-03-18 04:45:08.032892
    # Test cases for stringc function
    assert stringc("Hello, World!", "green") == "\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == "\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == "\033[33mWarning\033[0m"
    assert stringc("Info", "blue") == "\033[34mInfo\033[0m"
    assert stringc("No color", "nocolor") == "No color"
    assert stringc("Wrapped chars", "cyan", wrap_nonvisible_chars=True) == "\001\033[36m\002Wrapped chars\001\033[0m\002"

    # Test with ANSIBLE_COLOR set to False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("No color because ANS

# Generated at 2024-03-18 04:45:13.685354
    # Test cases for stringc function
    assert stringc("test", "red") == "\033[31mtest\033[0m"
    assert stringc("test", "green") == "\033[32mtest\033[0m"
    assert stringc("test", "yellow") == "\033[33mtest\033[0m"
    assert stringc("test", "blue", True) == "\001\033[34m\002test\001\033[0m\002"
    assert stringc("multi\nline", "blue") == "\033[34mmulti\033[0m\n\033[34mline\033[0m"
    assert stringc("", "red") == ""
    assert stringc("no color", "") == "no color"
    assert stringc("test", "color256") == "\033[38;5;256mtest\033[0m"


# Generated at 2024-03-18 04:45:19.437567
    # Test that stringc returns the text unchanged when ANSIBLE_COLOR is False
    global ANSIBLE_COLOR
    ANSIBLE_COLOR = False
    assert stringc("test text", "green") == "test text"

    # Test that stringc returns the colored text when ANSIBLE_COLOR is True
    ANSIBLE_COLOR = True
    assert stringc("test text", "green") == "\033[32mtest text\033[0m"

    # Test that stringc handles newlines in the text
    assert stringc("test\ntext", "green") == "\033[32mtest\033[0m\n\033[32mtext\033[0m"

    # Test that stringc wraps non-visible characters when requested
    assert stringc("test text", "green", wrap_nonvisible_chars=True) == "\001\033[32m\002test text\001\033[0m

# Generated at 2024-03-18 04:45:26.312057
    # Test cases for stringc function
    assert stringc("Hello, World!", "green") == "\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == "\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == "\033[33mWarning\033[0m"
    assert stringc("Info", "blue") == "\033[34mInfo\033[0m"
    assert stringc("No color", "nocolor") == "No color"
    assert stringc("Special chars \n new line", "cyan") == "\033[36mSpecial chars \n new line\033[0m"
    assert stringc("Non-visible chars", "magenta", wrap_nonvisible_chars=True) == "\001\033[35m\002Non-visible chars\001\033[0m\002"

   

# Generated at 2024-03-18 04:45:31.751915
    test_host = "test.example.com"
    test_stats = {
        'failures': 0,
        'unreachable': 0,
        'changed': 0
    }

    # Test with no changes, failures, or unreachable hosts
    assert hostcolor(test_host, test_stats, color=False) == u"%-26s" % test_host
    assert hostcolor(test_host, test_stats) == u"%-37s" % test_host

    # Test with changes
    test_stats['changed'] = 1
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    test_stats['changed'] = 0
    test_stats['failures'] = 1
    assert hostcolor(test_host, test_stats) == u"%-37s" % stringc(test_host, C.COLOR_ERROR)

    # Test with unreachable hosts

# Generated at 2024-03-18 04:45:37.052177
    # Test with color enabled
    ANSIBLE_COLOR = True
    assert stringc("Hello, World!", "green") == u"\033[32mHello, World!\033[0m"
    assert stringc("Error message", "red") == u"\033[31mError message\033[0m"
    assert stringc("Warning", "yellow") == u"\033[33mWarning\033[0m"

    # Test with color disabled
    ANSIBLE_COLOR = False
    assert stringc("No color", "blue") == "No color"

    # Test with non-standard colors
    ANSIBLE_COLOR = True
    assert stringc("RGB", "rgb500") == u"\033[38;5;197mRGB\033[0m"
    assert stringc("Gray", "gray10") == u"\033[38;5;242mGray\033[0m"

    #

# Generated at 2024-03-18 04:45:42.339509
    # Define a stats dictionary with various scenarios
    stats = {
        'ok': {'failures': 0, 'unreachable': 0, 'changed': 0},
        'changed': {'failures': 0, 'unreachable': 0, 'changed': 1},
        'failure': {'failures': 1, 'unreachable': 0, 'changed': 0},
        'unreachable': {'failures': 0, 'unreachable': 1, 'changed': 0},
    }

    # Test hostcolor with 'ok' stats
    assert hostcolor('host_ok', stats['ok']) == u"%-26s" % 'host_ok'

    # Test hostcolor with 'changed' stats
    assert hostcolor('host_changed', stats['changed']) == u"%-37s" % stringc('host_changed', C.COLOR_CHANGED)

    # Test hostcolor with 'failure' stats


# Generated at 2024-03-18 04:45:49.265640
    # Test cases for stringc function
    assert stringc("test", "green") == "\033[0;32mtest\033[0m"
    assert stringc("test", "red") == "\033[0;31mtest\033[0m"
    assert stringc("test", "color14") == "\033[38;5;14mtest\033[0m"
    assert stringc("test", "rgb555") == "\033[38;5;231mtest\033[0m"
    assert stringc("test", "gray10") == "\033[38;5;242mtest\033[0m"
    assert stringc("test\ntest", "green") == "\033[0;32mtest\033[0m\n\033[0;32mtest\033[0m"
    assert stringc("test", "green", wrap_nonvisible_chars=True

# Generated at 2024-03-18 04:46:42.926542
    test_host = "test.example.com"
    stats_no_change = {'failures': 0, 'unreachable': 0, 'changed': 0}
    stats_with_change = {'failures': 0, 'unreachable': 0, 'changed': 1}
    stats_with_failure = {'failures': 1, 'unreachable': 0, 'changed': 0}
    stats_unreachable = {'failures': 0, 'unreachable': 1, 'changed': 0}

    # Test with no changes, failures, or unreachable
    assert hostcolor(test_host, stats_no_change) == u"%-26s" % test_host

    # Test with changes
    assert hostcolor(test_host, stats_with_change) == u"%-37s" % stringc(test_host, C.COLOR_CHANGED)

    # Test with failures
    assert hostcolor(test_host, stats_with_failure) == u"%-37s