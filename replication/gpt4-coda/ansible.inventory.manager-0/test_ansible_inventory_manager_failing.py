# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        dict_0 = {}
        float_0 = -4302.116
        inventory_manager_0 = module_0.InventoryManager(dict_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -1038.7
        str_0 = '[\tM|] 9'
        bytes_0 = b'.\x01H\x93\x1d"\xaf\xbe\x16\xb5Y\xfa\xda'
        inventory_manager_0 = module_0.InventoryManager(bytes_0)
        var_0 = inventory_manager_0.add_host(float_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = None
        str_0 = '73<#4<8]J*@RjL;\x0c5'
        tuple_1 = (tuple_0, str_0)
        int_0 = 650
        dict_0 = {str_0: str_0, tuple_1: int_0}
        inventory_manager_0 = module_0.InventoryManager(int_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -381.0
        display_0 = module_1.Display()
        dict_0 = {display_0: display_0, display_0: display_0}
        str_0 = 'LQ|T!e,c'
        inventory_manager_0 = module_0.InventoryManager(dict_0, str_0)
        var_0 = inventory_manager_0.restrict_to_hosts(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'U\xba\xcd\t.\xa2\xdc]@U\xde\x98\xaaN\x84'
        display_0 = module_1.Display()
        inventory_manager_0 = module_0.InventoryManager(display_0)
        var_0 = inventory_manager_0.clear_pattern_cache()
        var_1 = inventory_manager_0.subset(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        set_0 = set()
        float_0 = 2.0
        int_0 = 303
        inventory_manager_0 = module_0.InventoryManager(float_0)
        var_0 = inventory_manager_0.get_hosts()
        inventory_manager_1 = module_0.InventoryManager(int_0)
        var_1 = inventory_manager_1.get_hosts(set_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -2451.6346
        str_0 = 'The %s is an empty string, which will match every line in the file. This may have unintended consequences, such as replacing the last line in the file rather than appending.'
        int_0 = 1407
        str_1 = '^qEL/niMj|2\t'
        inventory_manager_0 = module_0.InventoryManager(str_1)
        var_0 = inventory_manager_0.list_hosts(int_0)
        list_0 = [float_0, float_0, float_0, float_0]
        inventory_manager_1 = module_0.InventoryManager(list_0)
        var_1 = inventory_manager_1.subset(str_0)
        var_2 = inventory_manager_1.refresh_inventory()
        dict_0 = {var_1: str_1}
        var_3 = module_0.order_patterns(dict_0)
        var_4 = inventory_manager_0.list_hosts()
        bool_0 = False
        var_5 = inventory_manager_1.subset(bool_0)
        var_6 = inventory_manager_1.clear_caches()
        var_7 = inventory_manager_1.subset(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'returndocs'
        float_0 = -2.0449643998075864
        tuple_0 = None
        dict_0 = {str_0: float_0, tuple_0: float_0}
        inventory_manager_0 = module_0.InventoryManager(float_0, dict_0)
        var_0 = inventory_manager_0.list_hosts()
        str_1 = '73<#4<8]J*@RjL;\x0c5'
        list_0 = []
        var_1 = inventory_manager_0.get_hosts(list_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'a\tNJ:c`\r/'
        bytes_0 = b'*9\x1dv8\x89\x0f\x15'
        inventory_manager_0 = module_0.InventoryManager(bytes_0)
        var_0 = inventory_manager_0.remove_restriction()
        set_0 = {str_0, str_0, str_0}
        bool_0 = False
        inventory_manager_1 = module_0.InventoryManager(bool_0, set_0)
        var_1 = inventory_manager_1.refresh_inventory()
        var_2 = inventory_manager_1.list_hosts()
        tuple_0 = ()
        var_3 = inventory_manager_1.list_hosts()
        list_0 = [var_1]
        inventory_manager_2 = module_0.InventoryManager(tuple_0, list_0)
        var_4 = inventory_manager_1.add_group(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = None
        str_0 = '73<#4<8]J*@RjL;\x0c5'
        tuple_1 = (tuple_0, str_0)
        inventory_manager_0 = module_0.InventoryManager(tuple_1)
        bytes_0 = b'_N\x91\xfe\xfc\xbc3~\x85\x86=Rm'
        bytes_1 = b"\x1e#\x9c\x80p\xf8 \xe2O\xea\x05]'\x99="
        inventory_manager_1 = module_0.InventoryManager(bytes_1)
        var_0 = inventory_manager_1.refresh_inventory()
        var_1 = inventory_manager_0.refresh_inventory()
        var_2 = inventory_manager_0.clear_caches()
        list_0 = [var_2, bytes_0, tuple_1]
        var_3 = inventory_manager_1.restrict_to_hosts(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 411.155123
        str_0 = ':PrF-v|Ye'
        inventory_manager_0 = module_0.InventoryManager(float_0, str_0)
        bool_0 = None
        var_0 = inventory_manager_0.get_hosts(bool_0)
        var_1 = inventory_manager_0.reconcile_inventory()
        var_2 = inventory_manager_0.clear_pattern_cache()
        str_1 = 'a\tNJ:c`\r/'
        bytes_0 = b'*9\x1dv8\x89\x0f\x15'
        var_3 = inventory_manager_0.subset(bool_0)
        inventory_manager_1 = module_0.InventoryManager(bytes_0)
        var_4 = inventory_manager_1.remove_restriction()
        set_0 = {str_1, str_1, str_1}
        bool_1 = False
        inventory_manager_2 = module_0.InventoryManager(bool_1, set_0)
        var_5 = inventory_manager_2.refresh_inventory()
        var_6 = inventory_manager_2.list_hosts()
        str_2 = None
        tuple_0 = ()
        var_7 = inventory_manager_1.parse_source(str_2, tuple_0)
        var_8 = inventory_manager_2.refresh_inventory()
        var_9 = inventory_manager_1.refresh_inventory()
        var_10 = inventory_manager_1.clear_caches()
        int_0 = -2792
        var_11 = inventory_manager_2.restrict_to_hosts(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'a\tNJ:c`\r/'
        str_1 = 'o'
        float_0 = -993.98
        inventory_manager_0 = module_0.InventoryManager(float_0, str_1)
        var_0 = inventory_manager_0.parse_source(str_1)
        str_2 = 'c'
        var_1 = module_0.split_host_pattern(str_2)
        set_0 = set()
        var_2 = inventory_manager_0.subset(set_0)
        var_3 = inventory_manager_0.remove_restriction()
        var_4 = inventory_manager_0.reconcile_inventory()
        var_5 = inventory_manager_0.refresh_inventory()
        var_6 = inventory_manager_0.reconcile_inventory()
        var_7 = inventory_manager_0.list_hosts()
        str_3 = None
        tuple_0 = ()
        var_8 = inventory_manager_0.parse_source(str_3, tuple_0)
        list_0 = []
        var_9 = inventory_manager_0.restrict_to_hosts(list_0)
        list_1 = [str_0, str_0, str_3]
        inventory_manager_1 = module_0.InventoryManager(var_6, tuple_0)
        var_10 = inventory_manager_1.list_hosts(list_1)
        var_11 = inventory_manager_1.refresh_inventory()
        var_12 = inventory_manager_0.refresh_inventory()
        var_13 = inventory_manager_1.clear_caches()
        int_0 = -1046
        var_14 = module_0.split_host_pattern(int_0)
        int_1 = -2792
        var_15 = inventory_manager_1.restrict_to_hosts(int_1)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = None
        str_0 = 'localhost,'
        inventory_manager_0 = module_0.InventoryManager(var_0, str_0)
        var_1 = inventory_manager_0.get_hosts()
        str_1 = 'all'
        var_2 = inventory_manager_0.list_hosts(str_1)
        str_2 = 'localhost'
        var_3 = inventory_manager_0.get_hosts(str_2)
        str_3 = 'otherhost'
        str_4 = [str_2, str_3]
        var_4 = inventory_manager_0.get_hosts(str_4)
        var_5 = inventory_manager_0.subset(str_2)
        bool_0 = True
        var_6 = inventory_manager_0.get_hosts(bool_0)
        var_7 = inventory_manager_0.list_hosts(str_1)
        var_8 = inventory_manager_0.restrict_to_hosts(str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'U\xba\xcd\t.\xa2\xdc]@U\xde\x98\xaaN\x84'
        display_0 = module_1.Display()
        inventory_manager_0 = module_0.InventoryManager(display_0)
        var_0 = inventory_manager_0.subset(bytes_0)
    except BaseException:
        pass