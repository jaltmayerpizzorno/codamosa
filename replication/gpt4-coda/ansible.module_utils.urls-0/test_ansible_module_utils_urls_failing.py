# Automatically generated by Pynguin.
import ansible.module_utils.urls as module_0

def test_case_0():
    try:
        list_0 = []
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(list_0)
        bool_0 = True
        missing_module_error_0 = module_0.MissingModuleError(unix_h_t_t_p_s_connection_0, bool_0)
        str_0 = '>\\0V7HN]^'
        list_1 = [bool_0, missing_module_error_0, missing_module_error_0]
        var_0 = module_0.maybe_add_ssl_handler(str_0, list_1)
        list_2 = [missing_module_error_0]
        unix_h_t_t_p_s_connection_1 = module_0.UnixHTTPSConnection(list_2)
        var_1 = unix_h_t_t_p_s_connection_1.connect()
    except BaseException:
        pass

def test_case_1():
    try:
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 36
        bytes_0 = b'\x1e\xc0N\x17\xad\xd2yO\xfd;\xcd)\xe9'
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(bytes_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        var_0 = module_0.build_ssl_validation_error(int_0, h_t_t_p_s_client_auth_handler_0, custom_h_t_t_p_s_handler_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'P\x8e(\xfdG\x81aX\x13\x8b'
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(bytes_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'https://example.com'
        bool_0 = True
        var_0 = module_0.maybe_add_ssl_handler(str_0, bool_0)
        list_0 = []
        float_0 = 465.0
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(float_0)
        var_1 = unix_h_t_t_p_connection_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        str_0 = '}f!\ns*\x0b"\t@x?'
        dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        list_0 = [bool_0, str_0, dict_0]
        request_0 = module_0.Request(bool_0, dict_0, parse_result_dotted_dict_0, list_0)
        var_0 = request_0.get(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '!E5H}B\tL-3A!<'
        str_1 = '5"3S'
        int_0 = None
        var_0 = module_0.build_ssl_validation_error(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        bytes_0 = b'&'
        str_0 = 'DZG-\\o'
        list_0 = [str_0, str_0]
        dict_0 = {}
        s_s_l_validation_error_0 = module_0.SSLValidationError(**dict_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(list_0, s_s_l_validation_error_0)
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(s_s_l_validation_handler_0)
        tuple_0 = (str_0, unix_h_t_t_p_connection_0, dict_0)
        dict_1 = {}
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(dict_1)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(unix_h_t_t_p_handler_0)
        s_s_l_validation_handler_1 = module_0.SSLValidationHandler(tuple_0, unix_h_t_t_p_handler_0, custom_h_t_t_p_s_handler_0)
        var_0 = s_s_l_validation_handler_1.make_context(h_t_t_p_s_client_auth_handler_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        s_s_l_validation_error_0 = None
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(s_s_l_validation_error_0)
        tuple_0 = (unix_h_t_t_p_s_connection_0,)
        var_0 = module_0.get_channel_binding_cert_hash(tuple_0)
        var_1 = module_0.prepare_multipart(parse_result_dotted_dict_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        str_0 = '%ux6*k\\S'
        str_1 = 'en7q1`hxfoZsPrLND`Av'
        str_2 = 'ik8\x0c~#C&FL2i,k\x0b{e'
        str_3 = 'Argument spec validation class\n\n    Creates a validator based on the ``argument_spec`` that can be used to\n    validate a number of parameters using the :meth:`validate` method.\n    '
        dict_0 = {str_1: s_s_l_validation_error_0, str_2: str_0, str_3: var_0}
        parse_result_dotted_dict_1 = module_0.ParseResultDottedDict(**dict_0)
        var_2 = module_0.rfc2822_date_string(parse_result_dotted_dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        connection_error_0 = module_0.ConnectionError()
        float_0 = 877.0
        list_0 = []
        no_s_s_l_error_0 = module_0.NoSSLError(*list_0)
        list_1 = []
        int_0 = 40
        list_2 = [float_0, no_s_s_l_error_0, connection_error_0, int_0]
        request_0 = module_0.Request(connection_error_0, float_0, no_s_s_l_error_0, list_1, list_2)
    except BaseException:
        pass

def test_case_10():
    try:
        request_0 = module_0.Request()
        proxy_error_0 = module_0.ProxyError()
        var_0 = request_0.get(proxy_error_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 92
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(int_0)
        var_0 = unix_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'https://example2.com'
        bool_0 = True
        var_0 = module_0.maybe_add_ssl_handler(str_0, bool_0)
        set_0 = None
        bool_1 = False
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(bool_1)
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_0)
        list_0 = [str_0, bool_1, set_0, bool_0]
        unix_h_t_t_p_connection_1 = module_0.UnixHTTPConnection(list_0)
        str_1 = '\njlV0n:Oa{_`f'
        request_with_method_0 = module_0.RequestWithMethod(list_0, unix_h_t_t_p_connection_1, unix_h_t_t_p_handler_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        h_t_t_p_s_client_auth_handler_0 = None
        set_0 = {h_t_t_p_s_client_auth_handler_0, h_t_t_p_s_client_auth_handler_0, h_t_t_p_s_client_auth_handler_0, h_t_t_p_s_client_auth_handler_0}
        list_0 = [set_0, h_t_t_p_s_client_auth_handler_0]
        dict_0 = {}
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(list_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(dict_0, unix_h_t_t_p_handler_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(list_0)
        var_0 = unix_h_t_t_p_s_connection_0.__call__(**dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        var_0 = module_0.getpeercert(custom_h_t_t_p_s_handler_0)
    except BaseException:
        pass

def test_case_15():
    try:
        request_0 = module_0.Request()
        bytes_0 = b'}z\xe8i'
        float_0 = 3094.61
        list_0 = [request_0, bytes_0, request_0]
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(list_0)
        var_0 = h_t_t_p_s_client_auth_handler_0.https_open(float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        tuple_0 = None
        str_0 = 'yzJ8~R>*p\r'
        list_0 = []
        str_1 = '&NhKj^-)\rZ'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(list_0, str_1)
        var_0 = s_s_l_validation_handler_0.detect_no_proxy(str_0)
        var_1 = s_s_l_validation_handler_0.http_request(tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        connection_error_0 = module_0.ConnectionError()
        set_0 = {connection_error_0, connection_error_0, connection_error_0}
        dict_0 = {}
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(connection_error_0, set_0, **dict_0)
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(h_t_t_p_s_client_auth_handler_0, parse_result_dotted_dict_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(h_t_t_p_s_client_auth_handler_0)
        list_0 = [connection_error_0, unix_h_t_t_p_connection_0, dict_0]
        s_s_l_validation_error_0 = module_0.SSLValidationError(*list_0, **dict_0)
        bool_0 = True
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(bool_0)
        proxy_error_0 = module_0.ProxyError()
        float_0 = 1039.3515
        var_1 = module_0.prepare_multipart(float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        no_s_s_l_error_0 = module_0.NoSSLError()
        str_0 = 'n/D=j'
        var_0 = module_0.build_ssl_validation_error(str_0, parse_result_dotted_dict_0, no_s_s_l_error_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        request_with_method_0 = None
        bool_0 = None
        list_0 = []
        list_1 = [list_0, list_0]
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(list_0, list_1)
        var_0 = s_s_l_validation_handler_0.validate_proxy_response(request_with_method_0, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        float_0 = 1000.0
        var_0 = module_0.unix_socket_patch_httpconnection_connect()
        str_0 = 'BY{IW%R!\nzim"g'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_0)
        list_0 = [float_0, bool_0]
        unix_h_t_t_p_handler_1 = module_0.UnixHTTPHandler(list_0)
        int_0 = None
        list_1 = [list_0]
        request_0 = module_0.Request(parse_result_dotted_dict_0, bool_0, int_0, list_1)
        float_1 = 810.0905
        dict_0 = {}
        var_1 = request_0.options(float_1, **dict_0)
    except BaseException:
        pass

def test_case_21():
    try:
        request_0 = module_0.Request()
        bytes_0 = b'}z\xe8i'
        list_0 = [request_0, bytes_0, request_0]
        var_0 = request_0.put(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        int_0 = -3808
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        var_0 = custom_h_t_t_p_s_handler_0.https_open(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        proxy_error_0 = module_0.ProxyError()
        var_0 = module_0.generic_urlparse(proxy_error_0)
    except BaseException:
        pass

def test_case_24():
    try:
        request_0 = module_0.Request()
        set_0 = set()
        var_0 = request_0.delete(set_0)
    except BaseException:
        pass

def test_case_25():
    try:
        bytes_0 = b'\xce\x93\xeeO'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler()
        str_0 = 'r\\Pgh\\[(elMY"S'
        dict_1 = {str_0: h_t_t_p_s_client_auth_handler_0, str_0: str_0, str_0: h_t_t_p_s_client_auth_handler_0}
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(h_t_t_p_s_client_auth_handler_0, dict_1)
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        var_0 = s_s_l_validation_handler_0.make_context(bytes_0, dict_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = b'v.\x05 \xe3'
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        int_0 = -323
        custom_h_t_t_p_s_handler_0 = None
        bool_0 = False
        custom_h_t_t_p_s_handler_1 = module_0.CustomHTTPSHandler(custom_h_t_t_p_s_handler_0, bool_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(custom_h_t_t_p_s_handler_1, s_s_l_validation_error_0)
        var_0 = module_0.fetch_file(s_s_l_validation_error_0, int_0, s_s_l_validation_handler_0, bytes_0)
    except BaseException:
        pass

def test_case_27():
    try:
        request_0 = module_0.Request()
        bytes_0 = b'}z\xe8i'
        set_0 = {bytes_0}
        var_0 = request_0.patch(set_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '<0%*;]'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_0)
        dict_0 = {unix_h_t_t_p_handler_0: unix_h_t_t_p_handler_0, str_0: unix_h_t_t_p_handler_0}
        list_0 = [unix_h_t_t_p_handler_0, unix_h_t_t_p_handler_0, dict_0, str_0]
        var_0 = unix_h_t_t_p_handler_0.http_open(list_0)
    except BaseException:
        pass

def test_case_29():
    try:
        request_0 = module_0.Request()
        str_0 = ''
        s_s_l_validation_error_0 = None
        bool_0 = False
        dict_0 = {str_0: str_0, str_0: request_0, str_0: request_0, str_0: s_s_l_validation_error_0, str_0: request_0, str_0: request_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict(**dict_0)
        tuple_0 = ()
        float_0 = -823.05
        var_0 = module_0.open_url(bool_0, parse_result_dotted_dict_0, dict_0, tuple_0, float_0)
    except BaseException:
        pass

def test_case_30():
    try:
        no_s_s_l_error_0 = module_0.NoSSLError()
        float_0 = 2926.0
        int_0 = 4294967295
        list_0 = []
        dict_0 = {}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict(*list_0, **dict_0)
        missing_module_error_0 = module_0.MissingModuleError(int_0, parse_result_dotted_dict_0)
        var_0 = module_0.open_url(no_s_s_l_error_0, float_0, missing_module_error_0)
    except BaseException:
        pass

def test_case_31():
    try:
        tuple_0 = None
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(parse_result_dotted_dict_0)
        list_0 = None
        missing_module_error_0 = module_0.MissingModuleError(unix_h_t_t_p_s_connection_0, list_0)
        list_1 = [unix_h_t_t_p_s_connection_0, unix_h_t_t_p_s_connection_0]
        float_0 = 27.02
        proxy_error_0 = None
        str_0 = 'i\n@`$_J)0>I'
        no_s_s_l_error_0 = module_0.NoSSLError()
        var_0 = module_0.open_url(tuple_0, missing_module_error_0, list_1, float_0, proxy_error_0, str_0, no_s_s_l_error_0)
    except BaseException:
        pass

def test_case_32():
    try:
        request_0 = module_0.Request()
        str_0 = 'j??Pa'
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(str_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(unix_h_t_t_p_handler_0)
        float_0 = -3907.306
        unix_h_t_t_p_connection_0 = module_0.UnixHTTPConnection(float_0)
        tuple_0 = ()
        list_0 = None
        list_1 = [unix_h_t_t_p_connection_0, tuple_0]
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler(list_0, list_1)
        var_0 = module_0.fetch_url(unix_h_t_t_p_s_connection_0, unix_h_t_t_p_handler_0, unix_h_t_t_p_connection_0, tuple_0, custom_h_t_t_p_s_handler_0, float_0)
    except BaseException:
        pass

def test_case_33():
    try:
        tuple_0 = None
        list_0 = None
        str_0 = 'yzJ8~R>*p\r'
        float_0 = -1838.1
        var_0 = module_0.get_channel_binding_cert_hash(float_0)
        list_1 = []
        str_1 = '&NhKj^-)\rZ'
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(list_1, str_1)
        var_1 = s_s_l_validation_handler_0.detect_no_proxy(str_0)
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(list_0)
        dict_0 = None
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(dict_0)
        missing_module_error_0 = None
        str_2 = 'NC%'
        str_3 = 'Gym\n\rAAtz Tx'
        unix_h_t_t_p_handler_1 = module_0.UnixHTTPHandler(tuple_0)
        dict_1 = {str_2: list_1, str_3: dict_0, str_1: unix_h_t_t_p_handler_1, str_2: str_1}
        bool_0 = False
        int_0 = 82
        request_0 = module_0.Request(tuple_0, bool_0, int_0, h_t_t_p_s_client_auth_handler_0, s_s_l_validation_handler_0)
        var_2 = request_0.post(missing_module_error_0, **dict_1)
    except BaseException:
        pass

def test_case_34():
    try:
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        request_0 = module_0.Request(parse_result_dotted_dict_0)
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(request_0)
        bool_0 = True
        str_0 = 'O<QV'
        str_1 = '\n        Given a task in one of the supported forms, parses and returns\n        returns the action, arguments, and delegate_to values for the\n        task, dealing with all sorts of levels of fuzziness.\n        '
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: custom_h_t_t_p_s_handler_0}
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(bool_0, dict_0)
        var_0 = s_s_l_validation_handler_0.make_context(parse_result_dotted_dict_0, unix_h_t_t_p_s_connection_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bytes_0 = b'<\xc7\xfel\x92s\x06\x93\xf1\x95\xb1\x83\x0e'
        list_0 = [bytes_0, bytes_0]
        connection_error_0 = module_0.ConnectionError(*list_0)
        request_0 = module_0.Request()
        s_s_l_validation_error_0 = module_0.SSLValidationError()
        str_0 = 'vIn[.}k](U+e,'
        h_t_t_p_s_client_auth_handler_0 = module_0.HTTPSClientAuthHandler(list_0)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(s_s_l_validation_error_0, str_0, h_t_t_p_s_client_auth_handler_0)
        var_0 = s_s_l_validation_handler_0.get_ca_certs()
    except BaseException:
        pass

def test_case_36():
    try:
        proxy_error_0 = module_0.ProxyError()
        unix_h_t_t_p_s_connection_0 = module_0.UnixHTTPSConnection(proxy_error_0)
        custom_h_t_t_p_s_handler_0 = module_0.CustomHTTPSHandler()
        str_0 = '!>V>\x0cF*TA5Z4F=+Z#ra'
        dict_0 = {str_0: unix_h_t_t_p_s_connection_0, str_0: custom_h_t_t_p_s_handler_0}
        var_0 = module_0.prepare_multipart(dict_0)
    except BaseException:
        pass

def test_case_37():
    try:
        list_0 = None
        unix_h_t_t_p_handler_0 = module_0.UnixHTTPHandler(list_0)
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        dict_0 = {}
        s_s_l_validation_error_0 = None
        int_0 = -1
        float_0 = -3103.79947
        request_0 = module_0.Request(dict_0, s_s_l_validation_error_0, int_0, list_0, float_0, unix_h_t_t_p_handler_0)
        var_0 = request_0.get(dict_0)
    except BaseException:
        pass

def test_case_38():
    try:
        bool_0 = True
        str_0 = ')azj*~\rEvhSNr9GJx4'
        dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: bool_0, str_0: str_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        list_0 = [bool_0]
        request_0 = module_0.Request(parse_result_dotted_dict_0, dict_0, list_0, dict_0, parse_result_dotted_dict_0, list_0)
        var_0 = request_0.get(str_0)
    except BaseException:
        pass

def test_case_39():
    try:
        bool_0 = False
        str_0 = 'Un1be to remove temp fie (s): s'
        dict_0 = {str_0: bool_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        list_0 = [bool_0]
        request_0 = module_0.Request(parse_result_dotted_dict_0, dict_0, parse_result_dotted_dict_0, dict_0, parse_result_dotted_dict_0, list_0)
        var_0 = request_0.head(bool_0)
    except BaseException:
        pass

def test_case_40():
    try:
        bool_0 = False
        str_0 = ')azj*~\rEvhSNGJx4'
        dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        list_0 = []
        request_0 = module_0.Request(parse_result_dotted_dict_0, dict_0, dict_0, parse_result_dotted_dict_0, list_0)
        var_0 = request_0.get(str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bool_0 = True
        str_0 = 'Unable to remove temp file (%s): %s'
        dict_0 = {str_0: bool_0, str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: bool_0, str_0: str_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        list_0 = []
        request_0 = module_0.Request(parse_result_dotted_dict_0, dict_0, dict_0, parse_result_dotted_dict_0, list_0)
        var_0 = request_0.get(str_0)
    except BaseException:
        pass

def test_case_42():
    try:
        set_0 = set()
        list_0 = [set_0]
        var_0 = module_0.url_argument_spec()
        dict_0 = {}
        int_0 = 2729
        dict_1 = {}
        connection_error_0 = module_0.ConnectionError(*list_0, **dict_1)
        s_s_l_validation_handler_0 = module_0.SSLValidationHandler(int_0, connection_error_0)
        var_1 = s_s_l_validation_handler_0.get_ca_certs()
        var_2 = s_s_l_validation_handler_0.validate_proxy_response(list_0, dict_0)
    except BaseException:
        pass

def test_case_43():
    try:
        request_0 = module_0.Request()
        str_0 = "5V>V\n'C"
        str_1 = '/goS`'
        str_2 = ''
        list_0 = [str_1, str_0, str_2]
        custom_h_t_t_p_s_connection_0 = module_0.CustomHTTPSConnection(*list_0)
        var_0 = custom_h_t_t_p_s_connection_0.connect()
    except BaseException:
        pass

def test_case_44():
    try:
        bool_0 = True
        str_0 = 'Un1ble to remove temp file (%s): %s'
        dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, str_0: str_0, str_0: bool_0}
        parse_result_dotted_dict_0 = module_0.ParseResultDottedDict()
        list_0 = [bool_0]
        request_0 = module_0.Request(parse_result_dotted_dict_0, dict_0, parse_result_dotted_dict_0, dict_0, parse_result_dotted_dict_0, list_0)
        var_0 = request_0.get(str_0)
    except BaseException:
        pass