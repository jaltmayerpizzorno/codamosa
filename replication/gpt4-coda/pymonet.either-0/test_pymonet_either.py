# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'r#-a$'
    either_0 = module_0.Either(str_0)

def test_case_2():
    int_0 = 15
    either_0 = module_0.Either(int_0)
    object_0 = module_1.object()
    bool_0 = either_0.__eq__(object_0)

def test_case_3():
    list_0 = []
    str_0 = None
    dict_0 = {str_0: list_0, str_0: str_0}
    either_0 = module_0.Either(dict_0)
    list_1 = [dict_0]
    left_0 = module_0.Left(list_1)
    bool_0 = left_0.is_left()
    var_0 = either_0.to_try()
    left_1 = module_0.Left(list_0)
    bool_1 = left_1.is_left()

def test_case_4():
    var_0 = None
    right_0 = module_0.Right(var_0)
    var_1 = right_0.to_validation()
    left_0 = module_0.Left(var_0)
    right_1 = module_0.Right(var_0)
    bool_0 = False
    either_0 = module_0.Either(var_0)
    str_0 = '\n        Transform Box into successfull Try.\n\n        :returns: successfull Try monad with previous value\n        :rtype: Try[A]\n        '
    bool_1 = left_0.is_right()
    int_0 = True
    var_2 = left_0.ap(int_0)
    var_3 = left_0.ap(str_0)
    var_4 = either_0.is_right()
    either_1 = module_0.Either(bool_0)
    var_5 = either_1.to_try()
    var_6 = left_0.bind(bool_0)

def test_case_5():
    object_0 = module_1.object()
    int_0 = None
    list_0 = [int_0]
    list_1 = [int_0, int_0, int_0, list_0]
    bytes_0 = b'v\xc27\x9f\xd7;\xadjQLZ'
    left_0 = module_0.Left(bytes_0)
    var_0 = left_0.ap(int_0)
    either_0 = module_0.Either(list_1)
    bool_0 = either_0.__eq__(object_0)

def test_case_6():
    float_0 = 1188.307
    object_0 = module_1.object()
    set_0 = {float_0, float_0, float_0}
    either_0 = module_0.Either(set_0)
    bool_0 = either_0.__eq__(object_0)
    var_0 = either_0.to_lazy()
    float_1 = 1931.32
    left_0 = module_0.Left(float_1)
    var_1 = None
    left_1 = module_0.Left(var_1)
    var_2 = left_1.to_maybe()

def test_case_7():
    dict_0 = {}
    right_0 = module_0.Right(dict_0)
    right_1 = module_0.Right(right_0)
    left_0 = module_0.Left(right_1)
    var_0 = left_0.to_validation()
    var_1 = None
    object_0 = None
    either_0 = module_0.Either(var_1)
    bool_0 = either_0.__eq__(object_0)
    left_1 = module_0.Left(var_1)

def test_case_8():
    bytes_0 = b'\x9fG'
    dict_0 = None
    list_0 = [dict_0, dict_0]
    left_0 = module_0.Left(list_0)
    var_0 = left_0.map(bytes_0)
    right_0 = module_0.Right(var_0)
    left_1 = module_0.Left(right_0)
    bool_0 = left_1.is_left()
    str_0 = 'wGgd"G//xxy}C0R3'
    int_0 = 1671
    set_0 = {str_0, int_0, int_0}
    float_0 = -2971.798
    right_1 = module_0.Right(float_0)
    bool_1 = right_1.is_left()
    left_2 = module_0.Left(set_0)
    bool_2 = right_1.is_left()
    bool_3 = right_1.is_right()
    var_1 = left_2.to_validation()

def test_case_9():
    float_0 = -2629.9439
    right_0 = module_0.Right(float_0)
    var_0 = right_0.to_maybe()