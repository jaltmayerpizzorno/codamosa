# Automatically generated by Pynguin.
import pymonet.either as module_0

def test_case_0():
    try:
        callable_0 = None
        int_0 = False
        either_0 = module_0.Either(int_0)
        var_0 = either_0.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        complex_0 = None
        str_0 = '8yZQ'
        either_0 = module_0.Either(str_0)
        var_0 = either_0.to_box()
        var_1 = either_0.ap(complex_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 10
        right_0 = module_0.Right(int_0)
        var_0 = right_0.to_lazy()
        list_0 = [right_0, int_0, var_0]
        callable_0 = None
        either_0 = module_0.Either(right_0)
        var_1 = either_0.case(list_0, callable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        str_0 = '1p5OfPYiM!RsMDL'
        left_0 = module_0.Left(str_0)
        var_0 = left_0.map(bool_0)
        var_1 = None
        either_0 = module_0.Either(var_1)
        str_1 = '\n        Evaluate function and memoize her output or return memoized value when function was evaluated.\n\n        :returns: result of function in Lazy\n        :rtype: A\n        '
        right_0 = module_0.Right(str_1)
        var_2 = right_0.to_validation()
        either_1 = module_0.Either(right_0)
        var_3 = either_1.case(either_0, either_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '~zpLoeM76.{??e6/'
        complex_0 = None
        bytes_0 = b'G\x93a\x98e\xf4X\x97C}J#N|o5'
        left_0 = module_0.Left(bytes_0)
        right_0 = module_0.Right(left_0)
        var_0 = right_0.to_maybe()
        list_0 = [complex_0, complex_0, complex_0]
        list_1 = []
        left_1 = module_0.Left(list_1)
        bool_0 = left_1.is_right()
        right_1 = module_0.Right(list_0)
        var_1 = right_1.map(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '!-}1 2d@,9dl\r'
        left_0 = module_0.Left(str_0)
        callable_0 = None
        int_0 = -578
        right_0 = module_0.Right(int_0)
        var_0 = right_0.bind(callable_0)
    except BaseException:
        pass