# Automatically generated by Pynguin.
import semantic_release.hvcs as module_0

def test_case_0():
    try:
        list_0 = []
        base_0 = module_0.Base(*list_0)
        str_0 = base_0.domain()
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        base_0 = module_0.Base(**dict_0)
        str_0 = 'lHEl'
        bool_0 = base_0.check_build_status(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'rO~zb\x0bH%!p{\r#_RSndg$'
        str_1 = "\n    GitHub release notes automagically link to the PR, but changelog markdown\n    doesn't. Replace (#123) at the end of a message with a markdown link.\n    "
        str_2 = '\\q>\\Y;Cy'
        str_3 = ''
        dict_0 = {str_1: str_1, str_2: str_1, str_3: str_2}
        token_auth_0 = module_0.TokenAuth(dict_0)
        var_0 = token_auth_0.__ne__(str_0)
        base_0 = module_0.Base()
        str_4 = "G\\n;gUuRU':FR"
        dict_1 = {str_4: str_4, str_4: str_4}
        gitlab_0 = module_0.Gitlab(**dict_1)
    except BaseException:
        pass

def test_case_3():
    try:
        github_0 = module_0.Github()
        base_0 = module_0.Base()
        tuple_0 = None
        dict_0 = {base_0: base_0, base_0: tuple_0}
        github_1 = module_0.Github()
        session_0 = github_1.session()
        token_auth_0 = module_0.TokenAuth(base_0)
        token_auth_1 = module_0.TokenAuth(token_auth_0)
        token_auth_2 = module_0.TokenAuth(token_auth_1)
        var_0 = token_auth_2.__call__(session_0)
        list_0 = [dict_0, github_0, github_0, tuple_0]
        base_1 = module_0.Base(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        base_0 = module_0.Base()
        str_0 = ' |\n'
        str_1 = 'r$o*fUQ6%_'
        gitlab_0 = module_0.Gitlab()
        bool_0 = gitlab_0.check_build_status(str_0, str_1, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '?#'
        bool_0 = module_0.check_build_status(str_0, str_0, str_0)
        bool_1 = module_0.check_build_status(str_0, str_0, str_0)
        optional_0 = module_0.get_domain()
        str_1 = 'R"'
        str_2 = None
        dict_0 = {str_1: bool_1, str_1: optional_0, str_2: str_1}
        base_0 = module_0.Base(**dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        base_0 = module_0.Base()
        list_0 = []
        github_0 = module_0.Github(*list_0)
        optional_0 = base_0.token()
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        base_0 = module_0.Base(**dict_0)
        str_0 = base_0.api_url()
    except BaseException:
        pass