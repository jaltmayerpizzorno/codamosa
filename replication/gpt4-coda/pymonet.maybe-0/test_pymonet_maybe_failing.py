# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = '!o-~\x0c`;d4@r[mX|~~'
        list_0 = [str_0, str_0, str_0]
        int_0 = False
        dict_0 = {int_0: int_0, int_0: int_0}
        bool_0 = False
        object_0 = None
        list_1 = [int_0]
        maybe_0 = module_0.Maybe(list_1, bool_0)
        bool_1 = maybe_0.__eq__(object_0)
        maybe_1 = module_0.Maybe(dict_0, bool_0)
        var_0 = maybe_1.map(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        list_0 = []
        bool_0 = False
        maybe_0 = module_0.Maybe(list_0, bool_0)
        var_0 = maybe_0.bind(callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 1656.6397
        list_0 = [float_0, float_0]
        bool_0 = False
        maybe_0 = module_0.Maybe(bool_0, bool_0)
        var_0 = maybe_0.ap(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = None
        set_0 = {var_0, var_0}
        tuple_0 = (set_0,)
        list_0 = [var_0, var_0, var_0, tuple_0]
        bool_0 = True
        maybe_0 = module_0.Maybe(list_0, bool_0)
        var_1 = maybe_0.to_lazy()
        str_0 = 'n\x0b-8y]ZKMN'
        bool_1 = False
        maybe_1 = module_0.Maybe(str_0, bool_1)
        var_2 = maybe_1.get_or_else(var_0)
        var_3 = maybe_1.get_or_else(var_0)
        object_0 = module_1.object()
        bool_2 = maybe_1.__eq__(object_0)
        object_1 = module_1.object()
        bool_3 = True
        maybe_2 = module_0.Maybe(object_1, bool_3)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns result of mapper.\n\n        :param mapper: function to call with Maybe.value\n        :type mapper: Function(A) -> Maybe[B]\n        :returns: Maybe[B | None]\n        '
        set_0 = {str_0, str_0, str_0}
        bytes_0 = None
        dict_0 = {}
        bool_0 = True
        maybe_0 = module_0.Maybe(dict_0, bool_0)
        var_0 = maybe_0.filter(bytes_0)
        bytes_1 = b'\xd2\x02\xd5\xa9\xbeQ\x96\xfdu\xc0\x10C\x9e&\x14'
        bool_1 = False
        maybe_1 = module_0.Maybe(bytes_1, bool_1)
        var_1 = maybe_1.to_try()
        bool_2 = False
        maybe_2 = module_0.Maybe(set_0, bool_2)
        var_2 = maybe_2.filter(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "K~Q ;/XPA=&9UI0'"
        set_0 = {str_0, str_0, str_0}
        bytes_0 = None
        dict_0 = {}
        bool_0 = True
        maybe_0 = module_0.Maybe(dict_0, bool_0)
        var_0 = maybe_0.filter(bytes_0)
        var_1 = maybe_0.to_try()
        bool_1 = False
        maybe_1 = module_0.Maybe(set_0, bool_1)
        var_2 = maybe_1.filter(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Z-LI3\x0b$AgD^>HpsS'
        bytes_0 = b'\xc2\x9c\xda\x1c\x8f"\xd0\x88\xc2\xccQ\x1a\x8b\x10'
        bool_0 = False
        float_0 = -2183.7094
        object_0 = module_1.object()
        maybe_0 = module_0.Maybe(object_0, bool_0)
        var_0 = maybe_0.to_validation()
        maybe_1 = module_0.Maybe(float_0, bool_0)
        var_1 = maybe_1.to_box()
        maybe_2 = module_0.Maybe(bytes_0, bool_0)
        var_2 = maybe_2.to_validation()
        bool_1 = True
        maybe_3 = module_0.Maybe(str_0, bool_1)
        var_3 = maybe_3.to_validation()
        int_0 = 1381
        dict_0 = {str_0: var_3, str_0: bytes_0, str_0: int_0}
        object_1 = module_1.object(**dict_0)
    except BaseException:
        pass