# Automatically generated by Pynguin.
import sanic.utils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = 'websocket_routes'
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'$'
        var_0 = module_0.load_module_from_file_location(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b''
        var_0 = module_0.load_module_from_file_location(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        path_0 = None
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_4():
    try:
        path_0 = module_1.Path()
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/tmp/non_existent_module.py'
        var_0 = module_0.load_module_from_file_location(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'A helper method to register class instance or\n        functions as a handler to the application url\n        routes.\n\n        :param handler: function or class instance\n        :param uri: path of the URL\n        :param methods: list or tuple of methods allowed, these are overridden\n                        if using a HTTPMethodView\n        :param host:\n        :param strict_slashes:\n        :param version:\n        :param name: user defined route name for url_for\n        :param stream: boolean specifying if the handler is a stream handler\n        :return: function or class instance\n        '
        str_1 = 'IpZ'
        var_0 = module_0.load_module_from_file_location(str_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'application/json'
        str_1 = 'yes'
        bool_0 = module_0.str_to_bool(str_1)
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '_remote_addr'
        str_1 = 'test_variable'
        var_0 = hasattr(str_0, str_1)
        str_2 = '/tmp/${TEST_ENV_VAR}/test_module.py'
        var_1 = module_0.load_module_from_file_location(str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '>tmp/non.existent_modul.py'
        str_1 = '0'
        bool_0 = module_0.str_to_bool(str_1)
        dict_0 = {str_0: str_0}
        var_0 = module_0.load_module_from_file_location(str_0, **dict_0)
    except BaseException:
        pass