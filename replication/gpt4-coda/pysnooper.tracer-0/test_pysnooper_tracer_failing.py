# Automatically generated by Pynguin.
import pysnooper.tracer as module_0

def test_case_0():
    try:
        bytes_0 = b'kU\xadQ'
        float_0 = -312.07
        str_0 = '\'C<)|\ri"q\x0cC3TzM!'
        file_writer_0 = module_0.FileWriter(str_0, bytes_0)
        int_0 = -1141
        bool_0 = None
        float_1 = -2203.26318
        tuple_0 = (float_0, float_1)
        tracer_0 = module_0.Tracer(file_writer_0, file_writer_0, int_0, bool_0, str_0, float_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'K OM;+gj\n5^ '
        bool_0 = True
        tracer_0 = module_0.Tracer(str_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        tracer_0 = module_0.Tracer(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        unavailable_source_0 = module_0.UnavailableSource()
        float_0 = 362.16479
        file_writer_0 = module_0.FileWriter(unavailable_source_0, float_0)
        var_0 = file_writer_0.write(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "wh?e'XG;[1<6"
        set_0 = set()
        bytes_0 = b'kU\xadQ'
        tracer_0 = module_0.Tracer(str_0, set_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'ABC'
        bytes_0 = b'\xc6\xde\x96O\x81#\xb6d\xd8C\xdbzN'
        var_0 = module_0.get_write_function(str_0, bytes_0)
        tuple_0 = ()
        int_0 = 2269
        tuple_1 = ()
        var_1 = module_0.get_local_reprs(tuple_0, int_0, tuple_1)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        str_0 = ':Q}Xlbbpllue\r'
        float_0 = 3846.89294
        file_writer_0 = module_0.FileWriter(tuple_0, str_0)
        tracer_0 = module_0.Tracer(file_writer_0)
        var_0 = tracer_0.__enter__()
        bytes_0 = b'\xdd\xad\x1dq0\xdd\xed&\xd3\xcd\xa4Q\xcd\x05\x8a'
        var_1 = tracer_0.__exit__(bytes_0, float_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tracer_0 = module_0.Tracer()
        float_0 = -1518.237875
        var_0 = tracer_0.__call__(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'c{\x0c <F(||dV'
        tracer_0 = module_0.Tracer(str_0)
        dict_0 = None
        var_0 = tracer_0.__enter__()
        unavailable_source_0 = module_0.UnavailableSource()
        unavailable_source_1 = module_0.UnavailableSource(**dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        str_0 = 'r$ykKTzf'
        var_1 = tracer_0.__enter__()
        dict_0 = {str_0: var_0, str_0: str_0}
        var_2 = tracer_0.__call__(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        complex_0 = None
        dict_0 = {}
        list_0 = [complex_0, dict_0, dict_0]
        str_0 = 'ascii'
        tracer_0 = module_0.Tracer(str_0)
        tracer_1 = module_0.Tracer(tracer_0)
        var_0 = tracer_1.__call__(list_0)
    except BaseException:
        pass