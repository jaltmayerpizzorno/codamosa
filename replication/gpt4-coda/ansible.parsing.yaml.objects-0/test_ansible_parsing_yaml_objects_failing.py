# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        str_0 = 'sNJvse^'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        str_1 = 'l \nj-[$ExPf2albV'
        var_1 = ansible_vault_encrypted_unicode_1.lower()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        int_0 = -1739
        var_2 = ansible_vault_encrypted_unicode_2.rjust(int_0)
        list_0 = []
        var_3 = ansible_vault_encrypted_unicode_2.encode(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1391
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        bool_0 = True
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x18\xcd\x99\n\xabw\xe2\xfdw\x94\xc1\x1bv[\xbf'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'n=r:CN)'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.format()
        ansible_mapping_0 = module_0.AnsibleMapping()
        float_0 = 1738.33
        var_1 = ansible_vault_encrypted_unicode_0.__ge__(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = None
        ansible_sequence_0 = module_0.AnsibleSequence()
        bytes_0 = b'\x8e#\x91\xd0u\xcb\xf4\x04'
        set_0 = {bytes_0, bytes_0, bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'cypte_dat'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        int_0 = 2393
        ansible_sequence_0 = None
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(int_0, ansible_sequence_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        bytes_0 = b'?\xf6\x88\x04\x04Q/\x04\x94\x86e\xe0\xef\xd4 \xbdV\xd3\xe3\xba'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.__radd__(bytes_0)
        tuple_0 = ()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
        int_0 = 303
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(int_0)
        bytes_0 = b'\xbfO\xc8\x98\x99\n\x0e\xef5\xef\x17\x9d\x15\x1bE'
        float_0 = -3525.61366
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_1.__getslice__(ansible_base_y_a_m_l_object_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -2143.5
        bytes_0 = b'\x00\x94\x90\x8c\x1dM\xdc\x19\xd2\x9f\x0f\x9c\x13QI'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.center(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        str_1 = 'mTzP}]HP|P7rcAX!.g'
        dict_0 = None
        int_0 = -1297
        tuple_0 = ()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.format_map(int_0)
        str_2 = '\t*>({32$p'
        dict_1 = {str_0: str_0, str_0: str_0, str_1: dict_0, str_2: str_1}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_1.__hash__()
        var_2 = ansible_vault_encrypted_unicode_1.__repr__()
        int_1 = None
        bytes_0 = b'\x95'
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_3 = ansible_vault_encrypted_unicode_2.__contains__(int_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = None
        ansible_unicode_0 = None
        dict_0 = {ansible_unicode_0: ansible_unicode_0, ansible_unicode_0: ansible_unicode_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.strip(int_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_1 = ansible_vault_encrypted_unicode_0.index(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'Z[q\xef\xfcH}\xc2t'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__str__()
        str_0 = 'nw]U}{;59F9t-'
        dict_0 = {str_0: str_0}
        var_1 = ansible_vault_encrypted_unicode_0.__repr__()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        str_1 = '"RnZ.l~NlGjxjboE~'
        var_2 = ansible_vault_encrypted_unicode_0.ljust(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        int_0 = -1528
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '&a=%bFkuH>zD_#'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = []
        str_0 = '\r23}6\r>f%7;XG5>\\]9'
        dict_0 = {str_0: list_0, str_0: list_0}
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0, **dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.count(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.endswith(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Vo3eE:e%'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bytes_0 = b'\xa3y\x05o(g\xa0\xb5\n\xa2\xb8'
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = "[['\\\\W+', '\\\\W+', '\\\\W+', '\\\\W+'], {}, {}]"
        int_0 = -1109
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mod__(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__unicode__()
        str_0 = '("en@_A+JY2G8tNGL+\x0c'
        str_1 = '[f\x0cF2Q$XZb|ixw'
        str_2 = '()'
        list_0 = [str_1, str_2, str_0, ansible_vault_encrypted_unicode_0]
        var_1 = ansible_vault_encrypted_unicode_0.rfind(list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        str_0 = '!$M:'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_1.rpartition(ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = None
        tuple_0 = (bool_0,)
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_mapping_1 = module_0.AnsibleMapping()
        list_0 = [ansible_mapping_1, ansible_mapping_1]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.count(tuple_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = 2709.75865
        bytes_0 = b"\xaee\xd2P'\x17/\x97`\xe9\xa2\x89\xee+^\xbd)g"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(float_0)
        bool_0 = False
        var_1 = ansible_vault_encrypted_unicode_0.find(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b"\xaee\xd2P'\x17/\x97`\xe9\xa2\x89\xee+^\xbd)g"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        bool_0 = False
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(ansible_vault_encrypted_unicode_0)
        var_2 = ansible_vault_encrypted_unicode_0.isnumeric()
        var_3 = ansible_vault_encrypted_unicode_1.find(bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = -644
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.__rmod__(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_2 = ansible_vault_encrypted_unicode_2.__complex__()
        int_1 = 1391
        var_3 = ansible_vault_encrypted_unicode_2.replace(int_1, ansible_vault_encrypted_unicode_2)
    except BaseException:
        pass

def test_case_23():
    try:
        dict_0 = {}
        int_0 = 1446
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(int_0)
        list_0 = [dict_0]
        dict_1 = {}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_1 = ansible_vault_encrypted_unicode_1.casefold()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        var_2 = ansible_vault_encrypted_unicode_1.__unicode__()
        tuple_0 = (list_0, ansible_base_y_a_m_l_object_0, ansible_sequence_0, list_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_3 = ansible_vault_encrypted_unicode_2.__unicode__()
        int_1 = -2536
        var_4 = ansible_vault_encrypted_unicode_1.rindex(int_1, ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = -3434.2
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_25():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '"\rjs+jB=LRz#Ln=IV'
        bytes_0 = b'E\xef\x99\xb6\x88'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        list_0 = [bytes_0, ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_0, str_0]
        var_0 = ansible_vault_encrypted_unicode_0.partition(list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b"\xaee\xd2P'\x17/\x97`\xe9\xa2\x89\xee+^\xbd)g"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        bytes_1 = b'E\xef\x99\xb6\x88'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_1)
        bool_0 = False
        var_0 = ansible_vault_encrypted_unicode_1.find(bool_0)
    except BaseException:
        pass

def test_case_28():
    try:
        dict_0 = {}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
        bool_0 = False
        bool_1 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_1)
        var_0 = ansible_vault_encrypted_unicode_0.startswith(bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        dict_0 = {}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.isidentifier()
        ansible_sequence_0 = module_0.AnsibleSequence()
        dict_1 = None
        dict_2 = {}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_2)
        var_1 = ansible_vault_encrypted_unicode_1.__rmod__(dict_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_2 = ansible_vault_encrypted_unicode_2.replace(ansible_base_y_a_m_l_object_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = -3319
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        bytes_0 = b'U"\x12zS\xf8\x10'
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_1.is_encrypted()
        var_1 = ansible_vault_encrypted_unicode_1.replace(ansible_vault_encrypted_unicode_0, bytes_0)
    except BaseException:
        pass

def test_case_31():
    try:
        list_0 = None
        ansible_sequence_0 = module_0.AnsibleSequence()
        int_0 = 1157
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.rsplit(list_0, ansible_sequence_0)
    except BaseException:
        pass

def test_case_32():
    try:
        float_0 = 2709.75865
        bytes_0 = b"\xaee\xd2P'\x17/\x97`\xe9\xa2\x89\xee+^\xbd)g"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        dict_0 = {}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(ansible_vault_encrypted_unicode_1)
        var_1 = ansible_vault_encrypted_unicode_0.__add__(float_0)
        var_2 = ansible_vault_encrypted_unicode_0.isdigit()
        bytes_1 = b'E\xef\x99\xb6\x88'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_1)
        str_0 = 'R>b;'
        var_3 = ansible_vault_encrypted_unicode_2.__ne__(str_0)
        bool_0 = False
        var_4 = ansible_vault_encrypted_unicode_2.isidentifier()
        var_5 = ansible_vault_encrypted_unicode_2.find(bool_0)
    except BaseException:
        pass

def test_case_33():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = '$ tuyF;[7]qMdyN#'
        bytes_0 = b'\x8f'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(str_0)
        ansible_base_y_a_m_l_object_1 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_0.__str__()
        var_2 = ansible_vault_encrypted_unicode_0.__add__(str_0)
        dict_0 = None
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_0)
    except BaseException:
        pass

def test_case_34():
    try:
        float_0 = 636.655
        str_0 = '/\x0cY&'
        list_0 = [str_0, str_0, str_0, str_0]
        float_1 = -1864.746
        str_1 = 'E8(9W_\\4lm\x0c'
        tuple_0 = (str_0, list_0, float_1, str_1)
        tuple_1 = (tuple_0,)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_0 = ansible_vault_encrypted_unicode_2.__radd__(float_0)
        bytes_0 = b"\xaee\xd2P'\x17/\xdc\x90\x97`\xe9\xa2\x89\xee+^\xbd)g"
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_3.isascii()
        var_2 = ansible_vault_encrypted_unicode_3.__add__(float_1)
        var_3 = ansible_vault_encrypted_unicode_3.isdigit()
        str_2 = 'RPb;'
        var_4 = ansible_vault_encrypted_unicode_3.__ne__(str_2)
        dict_0 = {}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_5 = ansible_vault_encrypted_unicode_2.__contains__(ansible_vault_encrypted_unicode_4)
        var_6 = ansible_vault_encrypted_unicode_2.isidentifier()
        var_7 = ansible_vault_encrypted_unicode_0.__le__(float_1)
    except BaseException:
        pass

def test_case_35():
    try:
        float_0 = 636.7
        str_0 = '/\x0cY&'
        list_0 = [str_0, str_0, str_0, str_0]
        str_1 = "E8(9W_\\4'lm\x0c"
        tuple_0 = (str_0, list_0, float_0, str_1)
        tuple_1 = (tuple_0,)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__radd__(float_0)
        bytes_0 = b"\xaee\xd2P'\x17/\xdc\x90\x97`\xe9\xa2\x89\xee+^\xbd)g"
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_2.isascii()
        var_2 = ansible_vault_encrypted_unicode_2.__add__(float_0)
        var_3 = ansible_vault_encrypted_unicode_2.isdigit()
        list_1 = [float_0, float_0, bytes_0]
        var_4 = ansible_vault_encrypted_unicode_2.__eq__(list_1)
        var_5 = ansible_vault_encrypted_unicode_1.is_encrypted()
        var_6 = ansible_vault_encrypted_unicode_2.__ne__(list_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_7 = ansible_vault_encrypted_unicode_1.__contains__(ansible_unicode_0)
        var_8 = ansible_vault_encrypted_unicode_2.isidentifier()
        var_9 = ansible_vault_encrypted_unicode_2.__lt__(ansible_vault_encrypted_unicode_1)
        dict_0 = {}
        var_10 = ansible_vault_encrypted_unicode_1.__le__(dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        float_0 = -1818.021
        str_0 = 'cU#uifd%(}_]j$'
        list_0 = [str_0, str_0, str_0, str_0]
        str_1 = "E8(9W_\\4'lm\x0c"
        tuple_0 = (str_0, list_0, float_0, str_1)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__radd__(float_0)
        bytes_0 = b"\x1eL4\xfe+/\xd0\x03t\xbaC\x15$-\x97\x0b\xe0'\xaa\xa5"
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_2.__add__(float_0)
        var_2 = ansible_vault_encrypted_unicode_2.isdigit()
        var_3 = ansible_vault_encrypted_unicode_0.__gt__(ansible_vault_encrypted_unicode_2)
        list_1 = [float_0, float_0, bytes_0]
        var_4 = ansible_vault_encrypted_unicode_2.__eq__(list_1)
        var_5 = ansible_vault_encrypted_unicode_1.isnumeric()
        var_6 = ansible_vault_encrypted_unicode_1.is_encrypted()
        int_0 = 2619
        var_7 = ansible_vault_encrypted_unicode_0.__ne__(int_0)
        var_8 = ansible_vault_encrypted_unicode_1.isidentifier()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_9 = ansible_vault_encrypted_unicode_3.__gt__(tuple_0)
    except BaseException:
        pass