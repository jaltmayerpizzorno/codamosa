

---- 2024-03-18 09:20:16.924539
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n# Unit test for constructor of class NRKTVDirekteIE\ndef test_NRKTVDirekteIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:24.688028
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n# Unit test for constructor of class NRKRadioPodkastIE\ndef test_NRKRadioPodkastIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:25.711821
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    }, {\n        'url': 'nrk:clip/7707d5a3-ebe7-434a-87d5-a3ebe7a34a70',\n        'only_matching': True,\n    }, {\n        'url': 'https://v8-psapi.nrk.no/mediaelement/ecc1b952-96dc-4a98-81b9-5296dc7a98d9',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.nrk.no/video/dompap-og-andre-fugler-i-piip-show_150533',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.nrk.no/video/humor/kommentatorboksen-reiser-til-sjos_d1fda11f-a4ad-437a-a374-0398bc84e999',\n        'only_matching': True,\n    }, {\n        # podcast\n        'url': 'nrk:l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:podcast/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        # clip\n        'url': 'nrk:150533',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:clip/150533',\n        'only_matching': True,\n    }, {\n        # program\n        'url': 'nrk:MDDP12000117',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:program/ENRK10100318',\n        'only_matching': True,\n    }, {\n        # direkte\n        'url': 'nrk:nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:channel/nrk1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url).split('/')[-1]\n\n        path_templ = 'playback/%s/' + video_id\n\n        def call_playback_api(item, query=None):\n            return self._call_api(path_templ % item, video_id, item, query=query)\n        # known values for preferredCdn: akamai, iponly, minicdn and telenor\n        manifest = call_playback_api('manifest', {'preferredCdn': 'akamai'})\n\n        video_id = try_get(manifest, lambda x: x['id'], compat_str) or video_id\n\n        if manifest.get('playability') == 'nonPlayable':\n            self._raise_error(manifest['nonPlayable'])\n\n        playable = manifest['playable']\n\n        formats = []\n        for asset in playable['assets']:\n            if not isinstance(asset, dict):\n                continue\n            if asset.get('encrypted'):\n                continue\n            format_url = url_or_none(asset.get('url'))\n            if not format_url:\n                continue\n            asset_format = (asset.get('format') or '').lower()\n            if asset_format == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_nrk_formats(format_url, video_id))\n            elif asset_format == 'mp3':\n                formats.append({\n                    'url': format_url,\n                    'format_id': asset_format,\n                    'vcodec': 'none',\n                })\n        self._sort_formats(formats)\n\n        data = call_playback_api('metadata')\n\n        preplay = data['preplay']\n        titles = preplay['titles']\n        title = titles['title']\n        alt_title = titles.get('subtitle')\n\n        description = preplay.get('description')\n        duration = parse_duration(playable.get('duration')) or parse_duration(data.get('duration'))\n\n        thumbnails = []\n        for image in try_get(\n                preplay, lambda x: x['poster']['images'], list) or []:\n            if not isinstance(image, dict):\n                continue\n            image_url = url_or_none(image.get('url'))\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': image_url,\n                'width': int_or_none(image.get('pixelWidth')),\n                'height': int_or_none(image.get('pixelHeight')),\n            })\n\n        subtitles = {}\n        for sub in try_get(playable, lambda x: x['subtitles'], list) or []:\n            if not isinstance(sub, dict):\n                continue\n            sub_url = url_or_none(sub.get('webVtt'))\n            if not sub_url:\n                continue\n            sub_key = str_or_none(sub.get('language')) or 'nb'\n            sub_type = str_or_none(sub.get('type'))\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n# Unit test for constructor of class NRKTVIE\ndef test_NRKTVIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:30.038036
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n\n        playable = manifest['playable']\n\n        formats = []\n        for asset in playable['assets']:\n            if not isinstance(asset, dict):\n                continue\n            if asset.get('encrypted'):\n                continue\n            format_url = url_or_none(asset.get('url'))\n            if not format_url:\n                continue\n            asset_format = (asset.get('format') or '').lower()\n            if asset_format == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_nrk_formats(format_url, video_id))\n            elif asset_format == 'mp3':\n                formats.append({\n                    'url': format_url,\n                    'format_id': asset_format,\n                    'vcodec': 'none',\n                })\n        self._sort_formats(formats)\n\n        data = call_playback_api('metadata')\n\n        preplay = data['preplay']\n        titles = preplay['titles']\n        title = titles['title']\n        alt_title = titles.get('subtitle')\n\n        description = preplay.get('description')\n        duration = parse_duration(playable.get('duration')) or parse_duration(data.get('duration'))\n\n        thumbnails = []\n        for image in try_get(\n                preplay, lambda x: x['poster']['images'], list) or []:\n            if not isinstance(image, dict):\n                continue\n            image_url = url_or_none(image.get('url'))\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': image_url,\n                'width': int_or_none(image.get('pixelWidth')),\n                'height': int_or_none(image.get('pixelHeight')),\n            })\n\n        subtitles = {}\n        for sub in try_get(playable, lambda x: x['subtitles'], list) or []:\n            if not isinstance(sub, dict):\n                continue\n            sub_url = url_or_none(sub.get('webVtt'))\n            if not sub_url:\n                continue\n            sub_key = str_or_none(sub.get('language')) or 'nb'\n            sub_type = str_or_none(sub.get('type'))\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n# Unit test for constructor of class NRKTVEpisodeIE\ndef test_NRKTVEpisodeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:31.859468
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n# Unit test for constructor of class NRKPlaylistIE\ndef test_NRKPlaylistIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:33.680398
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n# Unit test for constructor of class NRKTVSerieBaseIE\ndef test_NRKTVSerieBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:35.071046
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    }, {\n        'url': 'nrk:clip/7707d5a3-ebe7-434a-87d5-a3ebe7a34a70',\n        'only_matching': True,\n    }, {\n        'url': 'https://v8-psapi.nrk.no/mediaelement/ecc1b952-96dc-4a98-81b9-5296dc7a98d9',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.nrk.no/video/dompap-og-andre-fugler-i-piip-show_150533',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.nrk.no/video/humor/kommentatorboksen-reiser-til-sjos_d1fda11f-a4ad-437a-a374-0398bc84e999',\n        'only_matching': True,\n    }, {\n        # podcast\n        'url': 'nrk:l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:podcast/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        # clip\n        'url': 'nrk:150533',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:clip/150533',\n        'only_matching': True,\n    }, {\n        # program\n        'url': 'nrk:MDDP12000117',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:program/ENRK10100318',\n        'only_matching': True,\n    }, {\n        # direkte\n        'url': 'nrk:nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:channel/nrk1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url).split('/')[-1]\n\n        path_templ = 'playback/%s/' + video_id\n\n        def call_playback_api(item, query=None):\n            return self._call_api(path_templ % item, video_id, item, query=query)\n        # known values for preferredCdn: akamai, iponly, minicdn and telenor\n        manifest = call_playback_api('manifest', {'preferredCdn': 'akamai'})\n\n        video_id = try_get(manifest, lambda x: x['id'], compat_str) or video_id\n\n        if manifest.get('playability') == 'nonPlayable':\n            self._raise_error(manifest['nonPlayable'])\n\n        playable = manifest['playable']\n\n        formats = []\n        for asset in playable['assets']:\n            if not isinstance(asset, dict):\n                continue\n            if asset.get('encrypted'):\n                continue\n            format_url = url_or_none(asset.get('url'))\n            if not format_url:\n                continue\n            asset_format = (asset.get('format') or '').lower()\n            if asset_format == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_nrk_formats(format_url, video_id))\n            elif asset_format == 'mp3':\n                formats.append({\n                    'url': format_url,\n                    'format_id': asset_format,\n                    'vcodec': 'none',\n                })\n        self._sort_formats(formats)\n\n        data = call_playback_api('metadata')\n\n        preplay = data['preplay']\n        titles = preplay['titles']\n        title = titles['title']\n        alt_title = titles.get('subtitle')\n\n        description = preplay.get('description')\n        duration = parse_duration(playable.get('duration')) or parse_duration(data.get('duration'))\n\n        thumbnails = []\n        for image in try_get(\n                preplay, lambda x: x['poster']['images'], list) or []:\n            if not isinstance(image, dict):\n                continue\n            image_url = url_or_none(image.get('url'))\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': image_url,\n                'width': int_or_none(image.get('pixelWidth')),\n                'height': int_or_none(image.get('pixelHeight')),\n            })\n\n        subtitles = {}\n        for sub in try_get(playable, lambda x: x['subtitles'], list) or []:\n            if not isinstance(sub, dict):\n                continue\n            sub_url = url_or_none(sub.get('webVtt'))\n            if not sub_url:\n                continue\n            sub_key = str_or_none(sub.get('language')) or 'nb'\n            sub_type = str_or_none(sub.get('type'))\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n# Unit test for constructor of class NRKTVIE\ndef test_NRKTVIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:39.783770
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n\nclass NRKTVEpisodesIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/program/[Ee]pisodes/[^/]+/(?P<id>\\d+)'\n    _ITEM_RE = r'data-episode=[\"\\']%s' % NRKTVIE._EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/episodes/nytt-paa-nytt/69031',\n        'info_dict': {\n            'id': '69031',\n            'title': 'Nytt p\u00e5 nytt, sesong: 201210',\n        },\n        'playlist_count': 4,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'title', fatal=False)\n\n# Unit test for constructor of class NRKTVEpisodesIE\ndef test_NRKTVEpisodesIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:41.027168
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\nimport random\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    str_or_none,\n    try_get,\n    urljoin,\n    url_or_none,\n)\n\n\nclass NRKBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['NO']\n    _CDN_REPL_REGEX = r'''(?x)://\n        (?:\n            nrkod\\d{1,2}-httpcache0-47115-cacheod0\\.dna\\.ip-only\\.net/47115-cacheod0|\n            nrk-od-no\\.telenorcdn\\.net|\n            minicdn-od\\.nrk\\.no/od/nrkhd-osl-rr\\.netwerk\\.no/no\n        )/'''\n\n    def _extract_nrk_formats(self, asset_url, video_id):\n        if re.match(r'https?://[^/]+\\.akamaihd\\.net/i/', asset_url):\n            return self._extract_akamai_formats(asset_url, video_id)\n        asset_url = re.sub(r'(?:bw_(?:low|high)=\\d+|no_audio_only)&?', '', asset_url)\n        formats = self._extract_m3u8_formats(\n            asset_url, video_id, 'mp4', 'm3u8_native', fatal=False)\n        if not formats and re.search(self._CDN_REPL_REGEX, asset_url):\n            formats = self._extract_m3u8_formats(\n                re.sub(self._CDN_REPL_REGEX, '://nrk-od-%02d.akamaized.net/no/' % random.randint(0, 99), asset_url),\n                video_id, 'mp4', 'm3u8_native', fatal=False)\n        return formats\n\n    def _raise_error(self, data):\n        MESSAGES = {\n            'ProgramRightsAreNotReady': 'Du kan dessverre ikke se eller h\u00f8re programmet',\n            'ProgramRightsHasExpired': 'Programmet har g\u00e5tt ut',\n            'NoProgramRights': 'Ikke tilgjengelig',\n            'ProgramIsGeoBlocked': 'NRK har ikke rettigheter til \u00e5 vise dette programmet utenfor Norge',\n        }\n        message_type = data.get('messageType', '')\n        # Can be ProgramIsGeoBlocked or ChannelIsGeoBlocked*\n        if 'IsGeoBlocked' in message_type or try_get(data, lambda x: x['usageRights']['isGeoBlocked']) is True:\n            self.raise_geo_restricted(\n                msg=MESSAGES.get('ProgramIsGeoBlocked'),\n                countries=self._GEO_COUNTRIES)\n        message = data.get('endUserMessage') or MESSAGES.get(message_type, message_type)\n        raise ExtractorError('%s said: %s' % (self.IE_NAME, message), expected=True)\n\n    def _call_api(self, path, video_id, item=None, note=None, fatal=True, query=None):\n        return self._download_json(\n            urljoin('http://psapi.nrk.no/', path),\n            video_id, note or 'Downloading %s JSON' % item,\n            fatal=fatal, query=query,\n            headers={'Accept-Encoding': 'gzip, deflate, br'})\n\n# Unit test for constructor of class NRKBaseIE\ndef test_NRKBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:20:49.480785
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n# Unit test for constructor of class NRKTVSeasonIE\ndef test_NRKTVSeasonIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:38.955728
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n# Unit test for constructor of class NRKPlaylistIE\ndef test_NRKPlaylistIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:39.892921
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n\nclass NRKTVEpisodesIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/program/[Ee]pisodes/[^/]+/(?P<id>\\d+)'\n    _ITEM_RE = r'data-episode=[\"\\']%s' % NRKTVIE._EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/episodes/nytt-paa-nytt/69031',\n        'info_dict': {\n            'id': '69031',\n            'title': 'Nytt p\u00e5 nytt, sesong: 201210',\n        },\n        'playlist_count': 4,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'title', fatal=False)\n\n# Unit test for constructor of class NRKTVEpisodesIE\ndef test_NRKTVEpisodesIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:41.064076
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n# Unit test for constructor of class NRKTVSeasonIE\ndef test_NRKTVSeasonIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:42.911885
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n# Unit test for constructor of class NRKPlaylistBaseIE\ndef test_NRKPlaylistBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:44.325490
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n# Unit test for constructor of class NRKPlaylistIE\ndef test_NRKPlaylistIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:45.795285
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\nimport random\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    str_or_none,\n    try_get,\n    urljoin,\n    url_or_none,\n)\n\n\nclass NRKBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['NO']\n    _CDN_REPL_REGEX = r'''(?x)://\n        (?:\n            nrkod\\d{1,2}-httpcache0-47115-cacheod0\\.dna\\.ip-only\\.net/47115-cacheod0|\n            nrk-od-no\\.telenorcdn\\.net|\n            minicdn-od\\.nrk\\.no/od/nrkhd-osl-rr\\.netwerk\\.no/no\n        )/'''\n\n    def _extract_nrk_formats(self, asset_url, video_id):\n        if re.match(r'https?://[^/]+\\.akamaihd\\.net/i/', asset_url):\n            return self._extract_akamai_formats(asset_url, video_id)\n        asset_url = re.sub(r'(?:bw_(?:low|high)=\\d+|no_audio_only)&?', '', asset_url)\n        formats = self._extract_m3u8_formats(\n            asset_url, video_id, 'mp4', 'm3u8_native', fatal=False)\n        if not formats and re.search(self._CDN_REPL_REGEX, asset_url):\n            formats = self._extract_m3u8_formats(\n                re.sub(self._CDN_REPL_REGEX, '://nrk-od-%02d.akamaized.net/no/' % random.randint(0, 99), asset_url),\n                video_id, 'mp4', 'm3u8_native', fatal=False)\n        return formats\n\n    def _raise_error(self, data):\n        MESSAGES = {\n            'ProgramRightsAreNotReady': 'Du kan dessverre ikke se eller h\u00f8re programmet',\n            'ProgramRightsHasExpired': 'Programmet har g\u00e5tt ut',\n            'NoProgramRights': 'Ikke tilgjengelig',\n            'ProgramIsGeoBlocked': 'NRK har ikke rettigheter til \u00e5 vise dette programmet utenfor Norge',\n        }\n        message_type = data.get('messageType', '')\n        # Can be ProgramIsGeoBlocked or ChannelIsGeoBlocked*\n        if 'IsGeoBlocked' in message_type or try_get(data, lambda x: x['usageRights']['isGeoBlocked']) is True:\n            self.raise_geo_restricted(\n                msg=MESSAGES.get('ProgramIsGeoBlocked'),\n                countries=self._GEO_COUNTRIES)\n        message = data.get('endUserMessage') or MESSAGES.get(message_type, message_type)\n        raise ExtractorError('%s said: %s' % (self.IE_NAME, message), expected=True)\n\n    def _call_api(self, path, video_id, item=None, note=None, fatal=True, query=None):\n        return self._download_json(\n            urljoin('http://psapi.nrk.no/', path),\n            video_id, note or 'Downloading %s JSON' % item,\n            fatal=fatal, query=query,\n            headers={'Accept-Encoding': 'gzip, deflate, br'})\n\n# Unit test for constructor of class NRKBaseIE\ndef test_NRKBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:52.638589
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n# Unit test for constructor of class NRKTVSeriesIE\ndef test_NRKTVSeriesIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:56.155179
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n\nclass NRKTVEpisodesIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/program/[Ee]pisodes/[^/]+/(?P<id>\\d+)'\n    _ITEM_RE = r'data-episode=[\"\\']%s' % NRKTVIE._EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/episodes/nytt-paa-nytt/69031',\n        'info_dict': {\n            'id': '69031',\n            'title': 'Nytt p\u00e5 nytt, sesong: 201210',\n        },\n        'playlist_count': 4,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'title', fatal=False)\n\n\nclass NRKSkoleIE(InfoExtractor):\n    IE_DESC = 'NRK Skole'\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/skole/?\\?.*\\bmediaId=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://www.nrk.no/skole/?page=search&q=&mediaId=14099',\n        'md5': '18c12c3d071953c3bf8d54ef6b2587b7',\n        'info_dict': {\n            'id': '6021',\n            'ext': 'mp4',\n            'title': 'Genetikk og eneggede tvillinger',\n            'description': 'md5:3aca25dcf38ec30f0363428d2b265f8d',\n            'duration': 399,\n        },\n    }, {\n        'url': 'https://www.nrk.no/skole/?page=objectives&subject=naturfag&objective=K15114&mediaId=19355',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        nrk_id = self._download_json(\n            'https://nrkno-skole-prod.kube.nrk.no/skole/api/media/%s' % video_id,\n            video_id)['psId']\n\n        return self.url_result('nrk:%s' % nrk_id)\n\n# Unit test for constructor of class NRKSkoleIE\ndef test_NRKSkoleIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:57.918816
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n\nclass NRKTVEpisodesIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/program/[Ee]pisodes/[^/]+/(?P<id>\\d+)'\n    _ITEM_RE = r'data-episode=[\"\\']%s' % NRKTVIE._EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/episodes/nytt-paa-nytt/69031',\n        'info_dict': {\n            'id': '69031',\n            'title': 'Nytt p\u00e5 nytt, sesong: 201210',\n        },\n        'playlist_count': 4,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'title', fatal=False)\n\n\nclass NRKSkoleIE(InfoExtractor):\n    IE_DESC = 'NRK Skole'\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/skole/?\\?.*\\bmediaId=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://www.nrk.no/skole/?page=search&q=&mediaId=14099',\n        'md5': '18c12c3d071953c3bf8d54ef6b2587b7',\n        'info_dict': {\n            'id': '6021',\n            'ext': 'mp4',\n            'title': 'Genetikk og eneggede tvillinger',\n            'description': 'md5:3aca25dcf38ec30f0363428d2b265f8d',\n            'duration': 399,\n        },\n    }, {\n        'url': 'https://www.nrk.no/skole/?page=objectives&subject=naturfag&objective=K15114&mediaId=19355',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        nrk_id = self._download_json(\n            'https://nrkno-skole-prod.kube.nrk.no/skole/api/media/%s' % video_id,\n            video_id)['psId']\n\n        return self.url_result('nrk:%s' % nrk_id)\n\n# Unit test for constructor of class NRKSkoleIE\ndef test_NRKSkoleIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:21:59.173593
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n# Unit test for constructor of class NRKRadioPodkastIE\ndef test_NRKRadioPodkastIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:32.679476
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\nimport random\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    str_or_none,\n    try_get,\n    urljoin,\n    url_or_none,\n)\n\n\nclass NRKBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['NO']\n    _CDN_REPL_REGEX = r'''(?x)://\n        (?:\n            nrkod\\d{1,2}-httpcache0-47115-cacheod0\\.dna\\.ip-only\\.net/47115-cacheod0|\n            nrk-od-no\\.telenorcdn\\.net|\n            minicdn-od\\.nrk\\.no/od/nrkhd-osl-rr\\.netwerk\\.no/no\n        )/'''\n\n    def _extract_nrk_formats(self, asset_url, video_id):\n        if re.match(r'https?://[^/]+\\.akamaihd\\.net/i/', asset_url):\n            return self._extract_akamai_formats(asset_url, video_id)\n        asset_url = re.sub(r'(?:bw_(?:low|high)=\\d+|no_audio_only)&?', '', asset_url)\n        formats = self._extract_m3u8_formats(\n            asset_url, video_id, 'mp4', 'm3u8_native', fatal=False)\n        if not formats and re.search(self._CDN_REPL_REGEX, asset_url):\n            formats = self._extract_m3u8_formats(\n                re.sub(self._CDN_REPL_REGEX, '://nrk-od-%02d.akamaized.net/no/' % random.randint(0, 99), asset_url),\n                video_id, 'mp4', 'm3u8_native', fatal=False)\n        return formats\n\n    def _raise_error(self, data):\n        MESSAGES = {\n            'ProgramRightsAreNotReady': 'Du kan dessverre ikke se eller h\u00f8re programmet',\n            'ProgramRightsHasExpired': 'Programmet har g\u00e5tt ut',\n            'NoProgramRights': 'Ikke tilgjengelig',\n            'ProgramIsGeoBlocked': 'NRK har ikke rettigheter til \u00e5 vise dette programmet utenfor Norge',\n        }\n        message_type = data.get('messageType', '')\n        # Can be ProgramIsGeoBlocked or ChannelIsGeoBlocked*\n        if 'IsGeoBlocked' in message_type or try_get(data, lambda x: x['usageRights']['isGeoBlocked']) is True:\n            self.raise_geo_restricted(\n                msg=MESSAGES.get('ProgramIsGeoBlocked'),\n                countries=self._GEO_COUNTRIES)\n        message = data.get('endUserMessage') or MESSAGES.get(message_type, message_type)\n        raise ExtractorError('%s said: %s' % (self.IE_NAME, message), expected=True)\n\n    def _call_api(self, path, video_id, item=None, note=None, fatal=True, query=None):\n        return self._download_json(\n            urljoin('http://psapi.nrk.no/', path),\n            video_id, note or 'Downloading %s JSON' % item,\n            fatal=fatal, query=query,\n            headers={'Accept-Encoding': 'gzip, deflate, br'})\n\n\nclass NRKIE(NRKBaseIE):\n    _VALID_URL = r'''(?x)\n                        (?:\n                            nrk:|\n                            https?://\n                                (?:\n                                    (?:www\\.)?nrk\\.no/video/(?:PS\\*|[^_]+_)|\n                                    v8[-.]psapi\\.nrk\\.no/mediaelement/\n                                )\n                            )\n                            (?P<id>[^?\\#&]+)\n                        '''\n\n    _TESTS = [{\n        # video\n        'url': 'http://www.nrk.no/video/PS*150533',\n        'md5': 'f46be075326e23ad0e524edfcb06aeb6',\n        'info_dict': {\n            'id': '150533',\n            'ext': 'mp4',\n            'title': 'Dompap og andre fugler i Piip-Show',\n            'description': 'md5:d9261ba34c43b61c812cb6b0269a5c8f',\n            'duration': 262,\n        }\n    }, {\n        # audio\n        'url': 'http://www.nrk.no/video/PS*154915',\n        # MD5 is unstable\n        'info_dict': {\n            'id': '154915',\n            'ext': 'mp4',\n            'title': 'Slik h\u00f8res internett ut n\u00e5r du er blind',\n            'description': 'md5:a621f5cc1bd75c8d5104cb048c6b8568',\n            'duration': 20,\n        }\n    }, {\n        'url': 'nrk:ecc1b952-96dc-4a98-81b9-5296dc7a98d9',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:clip/7707d5a3-ebe7-434a-87d5-a3ebe7a34a70',\n        'only_matching': True,\n    }, {\n        'url': 'https://v8-psapi.nrk.no/mediaelement/ecc1b952-96dc-4a98-81b9-5296dc7a98d9',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.nrk.no/video/dompap-og-andre-fugler-i-piip-show_150533',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.nrk.no/video/humor/kommentatorboksen-reiser-til-sjos_d1fda11f-a4ad-437a-a374-0398bc84e999',\n        'only_matching': True,\n    }, {\n        # podcast\n        'url': 'nrk:l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:podcast/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        # clip\n        'url': 'nrk:150533',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:clip/150533',\n        'only_matching': True,\n    }, {\n        # program\n        'url': 'nrk:MDDP12000117',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:program/ENRK10100318',\n        'only_matching': True,\n    }, {\n        # direkte\n        'url': 'nrk:nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:channel/nrk1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url).split('/')[-1]\n\n        path_templ = 'playback/%s/' + video_id\n\n        def call_playback_api(item, query=None):\n            return self._call_api(path_templ % item, video_id, item, query=query)\n        # known values for preferredCdn: akamai, iponly, minicdn and telenor\n        manifest = call_playback_api('manifest', {'preferredCdn': 'akamai'})\n\n        video_id = try_get(manifest, lambda x: x['id'], compat_str) or video_id\n\n        if manifest.get('playability') == 'nonPlayable':\n            self._raise_error(manifest['nonPlayable'])\n\n        playable = manifest['playable']\n\n        formats = []\n        for asset in playable['assets']:\n            if not isinstance(asset, dict):\n                continue\n            if asset.get('encrypted'):\n                continue\n            format_url = url_or_none(asset.get('url'))\n            if not format_url:\n                continue\n            asset_format = (asset.get('format') or '').lower()\n            if asset_format == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_nrk_formats(format_url, video_id))\n            elif asset_format == 'mp3':\n                formats.append({\n                    'url': format_url,\n                    'format_id': asset_format,\n                    'vcodec': 'none',\n                })\n        self._sort_formats(formats)\n\n        data = call_playback_api('metadata')\n\n        preplay = data['preplay']\n        titles = preplay['titles']\n        title = titles['title']\n        alt_title = titles.get('subtitle')\n\n        description = preplay.get('description')\n        duration = parse_duration(playable.get('duration')) or parse_duration(data.get('duration'))\n\n        thumbnails = []\n        for image in try_get(\n                preplay, lambda x: x['poster']['images'], list) or []:\n            if not isinstance(image, dict):\n                continue\n            image_url = url_or_none(image.get('url'))\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': image_url,\n                'width': int_or_none(image.get('pixelWidth')),\n                'height': int_or_none(image.get('pixelHeight')),\n            })\n\n        subtitles = {}\n        for sub in try_get(playable, lambda x: x['subtitles'], list) or []:\n            if not isinstance(sub, dict):\n                continue\n            sub_url = url_or_none(sub.get('webVtt'))\n            if not sub_url:\n                continue\n            sub_key = str_or_none(sub.get('language')) or 'nb'\n            sub_type = str_or_none(sub.get('type'))\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n# Unit test for constructor of class NRKIE\ndef test_NRKIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:44.635718
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n# Unit test for constructor of class NRKTVSerieBaseIE\ndef test_NRKTVSerieBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:45.865236
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n# Unit test for constructor of class NRKPlaylistIE\ndef test_NRKPlaylistIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:47.301277
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n# Unit test for constructor of class NRKTVSerieBaseIE\ndef test_NRKTVSerieBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:48.808344
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n# Unit test for constructor of class NRKTVSeriesIE\ndef test_NRKTVSeriesIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:50.383344
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n# Unit test for constructor of class NRKPlaylistIE\ndef test_NRKPlaylistIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:51.917355
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n# Unit test for constructor of class NRKRadioPodkastIE\ndef test_NRKRadioPodkastIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:53.352932
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n# Unit test for constructor of class NRKTVSerieBaseIE\ndef test_NRKTVSerieBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:54.963494
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n# Unit test for constructor of class NRKTVSeasonIE\ndef test_NRKTVSeasonIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:23:56.858498
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n\n        playable = manifest['playable']\n\n        formats = []\n        for asset in playable['assets']:\n            if not isinstance(asset, dict):\n                continue\n            if asset.get('encrypted'):\n                continue\n            format_url = url_or_none(asset.get('url'))\n            if not format_url:\n                continue\n            asset_format = (asset.get('format') or '').lower()\n            if asset_format == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_nrk_formats(format_url, video_id))\n            elif asset_format == 'mp3':\n                formats.append({\n                    'url': format_url,\n                    'format_id': asset_format,\n                    'vcodec': 'none',\n                })\n        self._sort_formats(formats)\n\n        data = call_playback_api('metadata')\n\n        preplay = data['preplay']\n        titles = preplay['titles']\n        title = titles['title']\n        alt_title = titles.get('subtitle')\n\n        description = preplay.get('description')\n        duration = parse_duration(playable.get('duration')) or parse_duration(data.get('duration'))\n\n        thumbnails = []\n        for image in try_get(\n                preplay, lambda x: x['poster']['images'], list) or []:\n            if not isinstance(image, dict):\n                continue\n            image_url = url_or_none(image.get('url'))\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': image_url,\n                'width': int_or_none(image.get('pixelWidth')),\n                'height': int_or_none(image.get('pixelHeight')),\n            })\n\n        subtitles = {}\n        for sub in try_get(playable, lambda x: x['subtitles'], list) or []:\n            if not isinstance(sub, dict):\n                continue\n            sub_url = url_or_none(sub.get('webVtt'))\n            if not sub_url:\n                continue\n            sub_key = str_or_none(sub.get('language')) or 'nb'\n            sub_type = str_or_none(sub.get('type'))\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n# Unit test for constructor of class NRKTVEpisodeIE\ndef test_NRKTVEpisodeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:26:58.366036
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n\nclass NRKTVEpisodesIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/program/[Ee]pisodes/[^/]+/(?P<id>\\d+)'\n    _ITEM_RE = r'data-episode=[\"\\']%s' % NRKTVIE._EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/episodes/nytt-paa-nytt/69031',\n        'info_dict': {\n            'id': '69031',\n            'title': 'Nytt p\u00e5 nytt, sesong: 201210',\n        },\n        'playlist_count': 4,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'title', fatal=False)\n\n\nclass NRKSkoleIE(InfoExtractor):\n    IE_DESC = 'NRK Skole'\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/skole/?\\?.*\\bmediaId=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://www.nrk.no/skole/?page=search&q=&mediaId=14099',\n        'md5': '18c12c3d071953c3bf8d54ef6b2587b7',\n        'info_dict': {\n            'id': '6021',\n            'ext': 'mp4',\n            'title': 'Genetikk og eneggede tvillinger',\n            'description': 'md5:3aca25dcf38ec30f0363428d2b265f8d',\n            'duration': 399,\n        },\n    }, {\n        'url': 'https://www.nrk.no/skole/?page=objectives&subject=naturfag&objective=K15114&mediaId=19355',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        nrk_id = self._download_json(\n            'https://nrkno-skole-prod.kube.nrk.no/skole/api/media/%s' % video_id,\n            video_id)['psId']\n\n        return self.url_result('nrk:%s' % nrk_id)\n\n# Unit test for constructor of class NRKSkoleIE\ndef test_NRKSkoleIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:00.179473
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n# Unit test for constructor of class NRKRadioPodkastIE\ndef test_NRKRadioPodkastIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:01.750993
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n\n        playable = manifest['playable']\n\n        formats = []\n        for asset in playable['assets']:\n            if not isinstance(asset, dict):\n                continue\n            if asset.get('encrypted'):\n                continue\n            format_url = url_or_none(asset.get('url'))\n            if not format_url:\n                continue\n            asset_format = (asset.get('format') or '').lower()\n            if asset_format == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_nrk_formats(format_url, video_id))\n            elif asset_format == 'mp3':\n                formats.append({\n                    'url': format_url,\n                    'format_id': asset_format,\n                    'vcodec': 'none',\n                })\n        self._sort_formats(formats)\n\n        data = call_playback_api('metadata')\n\n        preplay = data['preplay']\n        titles = preplay['titles']\n        title = titles['title']\n        alt_title = titles.get('subtitle')\n\n        description = preplay.get('description')\n        duration = parse_duration(playable.get('duration')) or parse_duration(data.get('duration'))\n\n        thumbnails = []\n        for image in try_get(\n                preplay, lambda x: x['poster']['images'], list) or []:\n            if not isinstance(image, dict):\n                continue\n            image_url = url_or_none(image.get('url'))\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': image_url,\n                'width': int_or_none(image.get('pixelWidth')),\n                'height': int_or_none(image.get('pixelHeight')),\n            })\n\n        subtitles = {}\n        for sub in try_get(playable, lambda x: x['subtitles'], list) or []:\n            if not isinstance(sub, dict):\n                continue\n            sub_url = url_or_none(sub.get('webVtt'))\n            if not sub_url:\n                continue\n            sub_key = str_or_none(sub.get('language')) or 'nb'\n            sub_type = str_or_none(sub.get('type'))\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n# Unit test for constructor of class NRKTVEpisodeIE\ndef test_NRKTVEpisodeIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:02.717676
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 2,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n# Unit test for constructor of class NRKPlaylistIE\ndef test_NRKPlaylistIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:03.814995
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n# Unit test for constructor of class NRKTVSerieBaseIE\ndef test_NRKTVSerieBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:05.576049
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n# Unit test for constructor of class NRKPlaylistBaseIE\ndef test_NRKPlaylistBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:06.910402
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n            if sub_type:\n                sub_key += '-%s' % sub_type\n            subtitles.setdefault(sub_key, []).append({\n                'url': sub_url,\n            })\n\n        legal_age = try_get(\n            data, lambda x: x['legalAge']['body']['rating']['code'], compat_str)\n        # https://en.wikipedia.org/wiki/Norwegian_Media_Authority\n        age_limit = None\n        if legal_age:\n            if legal_age == 'A':\n                age_limit = 0\n            elif legal_age.isdigit():\n                age_limit = int_or_none(legal_age)\n\n        is_series = try_get(data, lambda x: x['_links']['series']['name']) == 'series'\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'alt_title': alt_title,\n            'description': description,\n            'duration': duration,\n            'thumbnails': thumbnails,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n        if is_series:\n            series = season_id = season_number = episode = episode_number = None\n            programs = self._call_api(\n                'programs/%s' % video_id, video_id, 'programs', fatal=False)\n            if programs and isinstance(programs, dict):\n                series = str_or_none(programs.get('seriesTitle'))\n                season_id = str_or_none(programs.get('seasonId'))\n                season_number = int_or_none(programs.get('seasonNumber'))\n                episode = str_or_none(programs.get('episodeTitle'))\n                episode_number = int_or_none(programs.get('episodeNumber'))\n            if not series:\n                series = title\n            if alt_title:\n                title += ' - %s' % alt_title\n            if not season_number:\n                season_number = int_or_none(self._search_regex(\n                    r'Sesong\\s+(\\d+)', description or '', 'season number',\n                    default=None))\n            if not episode:\n                episode = alt_title if is_series else None\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'^(\\d+)\\.', episode or '', 'episode number',\n                    default=None))\n            if not episode_number:\n                episode_number = int_or_none(self._search_regex(\n                    r'\\((\\d+)\\s*:\\s*\\d+\\)', description or '',\n                    'episode number', default=None))\n            info.update({\n                'title': title,\n                'series': series,\n                'season_id': season_id,\n                'season_number': season_number,\n                'episode': episode,\n                'episode_number': episode_number,\n            })\n\n        return info\n\n\nclass NRKTVIE(InfoExtractor):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/(?:[^/]+/)*%s' % _EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/MDDP12000117',\n        'md5': 'c4a5960f1b00b40d47db65c1064e0ab1',\n        'info_dict': {\n            'id': 'MDDP12000117',\n            'ext': 'mp4',\n            'title': 'Alarm Trolltunga',\n            'description': 'md5:46923a6e6510eefcce23d5ef2a58f2ce',\n            'duration': 2223.44,\n            'age_limit': 6,\n            'subtitles': {\n                'nb-nor': [{\n                    'ext': 'vtt',\n                }],\n                'nb-ttv': [{\n                    'ext': 'vtt',\n                }]\n            },\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l - 23. mai 2014',\n            'alt_title': '23. mai 2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23. mai 2014',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514',\n            'ext': 'mp4',\n            'title': 'Kunnskapskanalen - Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605.08,\n            'series': 'Kunnskapskanalen',\n            'episode': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'ext': 'mp4',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n            'age_limit': 0,\n        },\n        'expected_warnings': ['Failed to download m3u8 information'],\n        'skip': 'Ikke tilgjengelig utenfor Norge',\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317',\n            'ext': 'mp4',\n            'title': 'Anno - 13. episode',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13. episode',\n            'season_number': 3,\n            'episode_number': 13,\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/lindmo/2018/MUHU11006318/avspiller',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201507/NPUB21019315',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKTVEpisodeIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/serie/(?P<id>[^/]+/sesong/(?P<season_number>\\d+)/episode/(?P<episode_number>\\d+))'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n# Unit test for constructor of class NRKTVSerieBaseIE\ndef test_NRKTVSerieBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:08.413135
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n# Unit test for constructor of class NRKPlaylistBaseIE\ndef test_NRKPlaylistBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:09.460530
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKRadioPodkastIE(InfoExtractor):\n    _VALID_URL = r'https?://radio\\.nrk\\.no/pod[ck]ast/(?:[^/]+/)+(?P<id>l_[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'md5': '8d40dab61cea8ab0114e090b029a0565',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://radio.nrk.no/podcast/ulrikkes_univers/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/sesong/1/l_96f4f1b0-de54-4e6a-b4f1-b0de54fe6af8',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/bortfoert-i-bergen/l_774d1a2c-7aa7-4965-8d1a-2c7aa7d9652c',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self.url_result(\n            'nrk:%s' % video_id, ie=NRKIE.ie_key(), video_id=video_id)\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n# Unit test for constructor of class NRKPlaylistBaseIE\ndef test_NRKPlaylistBaseIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}

---- 2024-03-18 09:27:10.394486
{"model": "gpt-4-1106-preview", "messages": [{"role": "user", "content": "Complete the following unit test function. Only write the completion; do NOT rewrite the function. Do NOT include any comments or description.\n        'url': 'https://tv.nrk.no/serie/hellums-kro/sesong/1/episode/2',\n        'info_dict': {\n            'id': 'MUHH36005220',\n            'ext': 'mp4',\n            'title': 'Hellums kro - 2. Kro, krig og kj\u00e6rlighet',\n            'description': 'md5:ad92ddffc04cea8ce14b415deef81787',\n            'duration': 1563.92,\n            'series': 'Hellums kro',\n            'season_number': 1,\n            'episode_number': 2,\n            'episode': '2. Kro, krig og kj\u00e6rlighet',\n            'age_limit': 6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1/episode/8',\n        'info_dict': {\n            'id': 'MSUI14000816',\n            'ext': 'mp4',\n            'title': 'Backstage - 8. episode',\n            'description': 'md5:de6ca5d5a2d56849e4021f2bf2850df4',\n            'duration': 1320,\n            'series': 'Backstage',\n            'season_number': 1,\n            'episode_number': 8,\n            'episode': '8. episode',\n            'age_limit': 0,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'ProgramRightsHasExpired',\n    }]\n\n    def _real_extract(self, url):\n        display_id, season_number, episode_number = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(url, display_id)\n\n        info = self._search_json_ld(webpage, display_id, default={})\n        nrk_id = info.get('@id') or self._html_search_meta(\n            'nrk:program-id', webpage, default=None) or self._search_regex(\n            r'data-program-id=[\"\\'](%s)' % NRKTVIE._EPISODE_RE, webpage,\n            'nrk id')\n        assert re.match(NRKTVIE._EPISODE_RE, nrk_id)\n\n        info.update({\n            '_type': 'url',\n            'id': nrk_id,\n            'url': 'nrk:%s' % nrk_id,\n            'ie_key': NRKIE.ie_key(),\n            'season_number': int(season_number),\n            'episode_number': int(episode_number),\n        })\n        return info\n\n\nclass NRKTVSerieBaseIE(NRKBaseIE):\n    def _extract_entries(self, entry_list):\n        if not isinstance(entry_list, list):\n            return []\n        entries = []\n        for episode in entry_list:\n            nrk_id = episode.get('prfId') or episode.get('episodeId')\n            if not nrk_id or not isinstance(nrk_id, compat_str):\n                continue\n            entries.append(self.url_result(\n                'nrk:%s' % nrk_id, ie=NRKIE.ie_key(), video_id=nrk_id))\n        return entries\n\n    _ASSETS_KEYS = ('episodes', 'instalments',)\n\n    def _extract_assets_key(self, embedded):\n        for asset_key in self._ASSETS_KEYS:\n            if embedded.get(asset_key):\n                return asset_key\n\n    @staticmethod\n    def _catalog_name(serie_kind):\n        return 'podcast' if serie_kind in ('podcast', 'podkast') else 'series'\n\n    def _entries(self, data, display_id):\n        for page_num in itertools.count(1):\n            embedded = data.get('_embedded') or data\n            if not isinstance(embedded, dict):\n                break\n            assets_key = self._extract_assets_key(embedded)\n            if not assets_key:\n                break\n            # Extract entries\n            entries = try_get(\n                embedded,\n                (lambda x: x[assets_key]['_embedded'][assets_key],\n                 lambda x: x[assets_key]),\n                list)\n            for e in self._extract_entries(entries):\n                yield e\n            # Find next URL\n            next_url_path = try_get(\n                data,\n                (lambda x: x['_links']['next']['href'],\n                 lambda x: x['_embedded'][assets_key]['_links']['next']['href']),\n                compat_str)\n            if not next_url_path:\n                break\n            data = self._call_api(\n                next_url_path, display_id,\n                note='Downloading %s JSON page %d' % (assets_key, page_num),\n                fatal=False)\n            if not data:\n                break\n\n\nclass NRKTVSeasonIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?P<domain>tv|radio)\\.nrk\\.no/\n                        (?P<serie_kind>serie|pod[ck]ast)/\n                        (?P<serie>[^/]+)/\n                        (?:\n                            (?:sesong/)?(?P<id>\\d+)|\n                            sesong/(?P<id_2>[^/?#&]+)\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/backstage/sesong/1',\n        'info_dict': {\n            'id': 'backstage/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # no /sesong/ in path\n        'url': 'https://tv.nrk.no/serie/lindmo/2016',\n        'info_dict': {\n            'id': 'lindmo/2016',\n            'title': '2016',\n        },\n        'playlist_mincount': 29,\n    }, {\n        # weird nested _embedded in catalog JSON response\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens/sesong/1',\n        'info_dict': {\n            'id': 'dickie-dick-dickens/1',\n            'title': 'Sesong 1',\n        },\n        'playlist_mincount': 11,\n    }, {\n        # 841 entries, multi page\n        'url': 'https://radio.nrk.no/serie/dagsnytt/sesong/201509',\n        'info_dict': {\n            'id': 'dagsnytt/201509',\n            'title': 'September 2015',\n        },\n        'playlist_mincount': 841,\n    }, {\n        # 180 entries, single page\n        'url': 'https://tv.nrk.no/serie/spangas/sesong/1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/hele_historien/sesong/diagnose-kverulant',\n        'info_dict': {\n            'id': 'hele_historien/diagnose-kverulant',\n            'title': 'Diagnose kverulant',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/loerdagsraadet/sesong/202101',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if NRKTVIE.suitable(url) or NRKTVEpisodeIE.suitable(url) or NRKRadioPodkastIE.suitable(url)\n                else super(NRKTVSeasonIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        domain = mobj.group('domain')\n        serie_kind = mobj.group('serie_kind')\n        serie = mobj.group('serie')\n        season_id = mobj.group('id') or mobj.group('id_2')\n        display_id = '%s/%s' % (serie, season_id)\n\n        data = self._call_api(\n            '%s/catalog/%s/%s/seasons/%s'\n            % (domain, self._catalog_name(serie_kind), serie, season_id),\n            display_id, 'season', query={'pageSize': 50})\n\n        title = try_get(data, lambda x: x['titles']['title'], compat_str) or display_id\n        return self.playlist_result(\n            self._entries(data, display_id),\n            display_id, title)\n\n\nclass NRKTVSeriesIE(NRKTVSerieBaseIE):\n    _VALID_URL = r'https?://(?P<domain>(?:tv|radio)\\.nrk|(?:tv\\.)?nrksuper)\\.no/(?P<serie_kind>serie|pod[ck]ast)/(?P<id>[^/]+)'\n    _TESTS = [{\n        # new layout, instalments\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 90,\n    }, {\n        # new layout, instalments, more entries\n        'url': 'https://tv.nrk.no/serie/lindmo',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/blank',\n        'info_dict': {\n            'id': 'blank',\n            'title': 'Blank',\n            'description': 'md5:7664b4e7e77dc6810cd3bca367c25b6e',\n        },\n        'playlist_mincount': 30,\n    }, {\n        # new layout, seasons\n        'url': 'https://tv.nrk.no/serie/backstage',\n        'info_dict': {\n            'id': 'backstage',\n            'title': 'Backstage',\n            'description': 'md5:63692ceb96813d9a207e9910483d948b',\n        },\n        'playlist_mincount': 60,\n    }, {\n        # old layout\n        'url': 'https://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'I Daidalos sin undersj\u00f8iske Labyrint venter spennende oppgaver, skumle robotskapninger og slim.',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/serie/dickie-dick-dickens',\n        'info_dict': {\n            'id': 'dickie-dick-dickens',\n            'title': 'Dickie Dick Dickens',\n            'description': 'md5:19e67411ffe57f7dce08a943d7a0b91f',\n        },\n        'playlist_mincount': 8,\n    }, {\n        'url': 'https://nrksuper.no/serie/labyrint',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers',\n        'info_dict': {\n            'id': 'ulrikkes_univers',\n        },\n        'playlist_mincount': 10,\n    }, {\n        'url': 'https://radio.nrk.no/podkast/ulrikkes_univers/nrkno-poddkast-26588-134079-05042018030000',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (\n            False if any(ie.suitable(url)\n                         for ie in (NRKTVIE, NRKTVEpisodeIE, NRKRadioPodkastIE, NRKTVSeasonIE))\n            else super(NRKTVSeriesIE, cls).suitable(url))\n\n    def _real_extract(self, url):\n        site, serie_kind, series_id = re.match(self._VALID_URL, url).groups()\n        is_radio = site == 'radio.nrk'\n        domain = 'radio' if is_radio else 'tv'\n\n        size_prefix = 'p' if is_radio else 'embeddedInstalmentsP'\n        series = self._call_api(\n            '%s/catalog/%s/%s'\n            % (domain, self._catalog_name(serie_kind), series_id),\n            series_id, 'serie', query={size_prefix + 'ageSize': 50})\n        titles = try_get(series, [\n            lambda x: x['titles'],\n            lambda x: x[x['type']]['titles'],\n            lambda x: x[x['seriesType']]['titles'],\n        ]) or {}\n\n        entries = []\n        entries.extend(self._entries(series, series_id))\n        embedded = series.get('_embedded') or {}\n        linked_seasons = try_get(series, lambda x: x['_links']['seasons']) or []\n        embedded_seasons = embedded.get('seasons') or []\n        if len(linked_seasons) > len(embedded_seasons):\n            for season in linked_seasons:\n                season_url = urljoin(url, season.get('href'))\n                if not season_url:\n                    season_name = season.get('name')\n                    if season_name and isinstance(season_name, compat_str):\n                        season_url = 'https://%s.nrk.no/serie/%s/sesong/%s' % (domain, series_id, season_name)\n                if season_url:\n                    entries.append(self.url_result(\n                        season_url, ie=NRKTVSeasonIE.ie_key(),\n                        video_title=season.get('title')))\n        else:\n            for season in embedded_seasons:\n                entries.extend(self._entries(season, series_id))\n        entries.extend(self._entries(\n            embedded.get('extraMaterial') or {}, series_id))\n\n        return self.playlist_result(\n            entries, series_id, titles.get('title'), titles.get('subtitle'))\n\n# Unit test for constructor of class NRKTVSeriesIE\ndef test_NRKTVSeriesIE():"}], "max_tokens": 200, "temperature": 0.0, "stop": ["\n# Unit test for", "\ndef ", "\nclass "]}