

# Generated at 2024-03-18 07:01:30.192435
```python
    # Unit test for function dcfc_30_e_plus_360
    def test_dcfc_30_e_plus_360():
        assert round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
        assert round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
        assert round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
        assert round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof),

# Generated at 2024-03-18 07:01:37.017084
```python
    assert dcfc_30_360_isda(datetime.date(2007, 12, 28), datetime.date(2008, 2, 28), datetime.date(2008, 2, 28)) == Decimal('0.16666666666667')
    assert dcfc_30_360_isda(datetime.date(2007, 12, 28), datetime.date(2008, 2, 29), datetime.date(2008, 2, 29)) == Decimal('0.16944444444444')
    assert dcfc_30_360_isda(datetime.date(2007, 10, 31), datetime.date(2008, 11, 30), datetime.date(2008, 11, 30)) == Decimal('1.08333333333333')
    assert dcfc_30_360_isda(datetime.date(2008, 2, 1), datetime.date(200

# Generated at 2024-03-18 07:01:38.072552
```python

# Generated at 2024-03-18 07:01:46.964047
    # Create a DCC instance with a dummy calculation method
    dummy_calc_method = lambda start, asof, end, freq: Decimal((asof - start).days) / Decimal((end - start).days)
    dcc = DCC(name="30/360", altnames=set(), currencies=set(), calculate_fraction_method=dummy_calc_method)

    # Test cases
    test_cases = [
        (datetime.date(2020, 1, 1), datetime.date(2020, 1, 31), datetime.date(2020, 12, 31), None, Decimal('0.0833333333333333333333333333')),
        (datetime.date(2020, 1, 1), datetime.date(2020, 2, 1), datetime.date(2020, 12, 31), None, Decimal('0.0849315068493150684931506849')),
        (datetime.date(2020

# Generated at 2024-03-18 07:01:52.529110
    assert round(dcfc_act_act(start=datetime.date(2007, 12, 28), asof=datetime.date(2008, 2, 28), end=datetime.date(2008, 2, 28)), 14) == Decimal('0.16942884946478')
    assert round(dcfc_act_act(start=datetime.date(2007, 12, 28), asof=datetime.date(2008, 2, 29), end=datetime.date(2008, 2, 29)), 14) == Decimal('0.17216108990194')
    assert round(dcfc_act_act(start=datetime.date(2007, 10, 31), asof=datetime.date(2008, 11, 30), end=datetime.date(2008, 11, 30)), 14) == Decimal('1.08243131970956')
    assert round(dcfc_act_act(start=datetime.date(2008, 2,

# Generated at 2024-03-18 07:01:58.829199
```python
    # Create a DCC instance with a simple day count fraction calculation method
    dcc = DCC(
        name="30/360",
        altnames={"30U/360", "Bond Basis"},
        currencies=_as_ccys({"USD", "EUR"}),
        calculate_fraction_method=lambda start, asof, end, freq: Decimal((asof - start).days) / Decimal(360)
    )

    # Define a principal amount of money
    principal = Money(amount=Decimal(1000), currency=Currencies.USD)

    # Define an interest rate
    rate = Decimal('0.05')  # 5%

    # Define start, asof, and end dates
    start = datetime.date(2021, 1, 1)
    asof = datetime.date(2021, 6, 30)
    end = datetime.date(2021, 12, 31)

    # Calculate the interest
   

# Generated at 2024-03-18 07:02:07.629443
```python
    # Test cases for dcfc_30_360_german
    assert round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
    assert round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
    assert round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
    assert round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('1.

# Generated at 2024-03-18 07:02:14.876725
    # Create a DCC instance with a simple day count fraction calculation method
    dcc = DCC(
        name="30/360",
        altnames={"30U/360", "Bond Basis"},
        currencies=_as_ccys({"USD", "EUR"}),
        calculate_fraction_method=lambda start, asof, end, freq: Decimal((end - start).days) / Decimal(360)
    )

    # Define a principal amount of money
    principal = Money(amount=Decimal(1000), currency=Currencies.USD)

    # Define an interest rate
    rate = Decimal('0.05')  # 5%

    # Define start, asof, and end dates
    start = datetime.date(2021, 1, 1)
    asof = datetime.date(2021, 6, 30)
    end = datetime.date(2021, 12, 31)

    # Calculate the expected interest
    expected_interest =

# Generated at 2024-03-18 07:02:21.447125
```python
    # Unit test for function dcfc_30_e_plus_360
    def test_dcfc_30_e_plus_360():
        assert round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
        assert round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
        assert round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
        assert round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof),

# Generated at 2024-03-18 07:02:31.221865
```python
    assert round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
    assert round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
    assert round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
    assert round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('1.33055555555556')
```

# Generated at 2024-03-18 07:03:15.933812
```python
    # Test cases for the dcfc_act_365_a function
    def test_dcfc_act_365_a():
        assert dcfc_act_365_a(datetime.date(2007, 12, 28), datetime.date(2008, 2, 28), datetime.date(2008, 2, 28)) == Decimal('0.16986301369863')
        assert dcfc_act_365_a(datetime.date(2007, 12, 28), datetime.date(2008, 2, 29), datetime.date(2008, 2, 29)) == Decimal('0.17213114754098')
        assert dcfc_act_365_a(datetime.date(2007, 10, 31), datetime.date(2008, 11, 30), datetime.date(2008, 11, 30)) == Decimal('1.08196721311475')
        assert dcfc_act_365_a

# Generated at 2024-03-18 07:03:26.661045
```python
    assert round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
    assert round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
    assert round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
    assert round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('1.33055555555556')
```

# Generated at 2024-03-18 07:03:40.915548
```python
    assert dcfc_30_360_isda(datetime.date(2007, 12, 28), datetime.date(2008, 2, 28), datetime.date(2008, 2, 28)) == Decimal('0.16666666666667')
    assert dcfc_30_360_isda(datetime.date(2007, 12, 28), datetime.date(2008, 2, 29), datetime.date(2008, 2, 29)) == Decimal('0.16944444444444')
    assert dcfc_30_360_isda(datetime.date(2007, 10, 31), datetime.date(2008, 11, 30), datetime.date(2008, 11, 30)) == Decimal('1.08333333333333')
    assert dcfc_30_360_isda(datetime.date(2008, 2, 1), datetime.date(200

# Generated at 2024-03-18 07:03:49.459490
```python
    # Unit test for function dcfc_nl_365
    def test_dcfc_nl_365():
        assert round(dcfc_nl_365(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16986301369863')
        assert round(dcfc_nl_365(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16986301369863')
        assert round(dcfc_nl_365(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08219178082192')
        assert round(dcfc_nl_365(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('1.32602739726027')
```

# Generated at 2024-03-18 07:03:55.393624
```python
    # Unit test for function dcfc_30_e_plus_360
    def test_dcfc_30_e_plus_360():
        assert round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
        assert round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
        assert round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
        assert round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof),

# Generated at 2024-03-18 07:04:04.015130
```python
    assert round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
    assert round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
    assert round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
    assert round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('1.33055555555556')
```

# Generated at 2024-03-18 07:04:05.036446
```python
import unittest


# Generated at 2024-03-18 07:04:10.960802
```python
    # Unit test for function dcfc_30_360_us
    def test_dcfc_30_360_us():
        assert round(dcfc_30_360_us(start=datetime.date(2007, 12, 28), asof=datetime.date(2008, 2, 28), end=datetime.date(2008, 2, 28)), 14) == Decimal('0.16666666666667')
        assert round(dcfc_30_360_us(start=datetime.date(2007, 12, 28), asof=datetime.date(2008, 2, 29), end=datetime.date(2008, 2, 29)), 14) == Decimal('0.16944444444444')
        assert round(dcfc_30_360_us(start=datetime.date(2007, 10, 31), asof=datetime.date(2008, 11, 30), end=datetime.date(2008,

# Generated at 2024-03-18 07:04:25.012330
```python
    assert round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
    assert round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
    assert round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
    assert round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('1.33055555555556')
```

# Generated at 2024-03-18 07:04:31.384561
    assert round(dcfc_act_act(start=datetime.date(2007, 12, 28), asof=datetime.date(2008, 2, 28), end=datetime.date(2008, 2, 28)), 14) == Decimal('0.16942884946478')
    assert round(dcfc_act_act(start=datetime.date(2007, 12, 28), asof=datetime.date(2008, 2, 29), end=datetime.date(2008, 2, 29)), 14) == Decimal('0.17216108990194')
    assert round(dcfc_act_act(start=datetime.date(2007, 10, 31), asof=datetime.date(2008, 11, 30), end=datetime.date(2008, 11, 30)), 14) == Decimal('1.08243131970956')
    assert round(dcfc_act_act(start=datetime.date(2008, 2,

# Generated at 2024-03-18 07:05:33.480404
```python
    assert round(dcfc_30_360_german(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
    assert round(dcfc_30_360_german(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
    assert round(dcfc_30_360_german(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
    assert round(dcfc_30_360_german(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('1.33055555555556')
```

# Generated at 2024-03-18 07:05:42.890624
```python
    # Unit test for function dcfc_30_360_us
    def test_dcfc_30_360_us():
        assert round(dcfc_30_360_us(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
        assert round(dcfc_30_360_us(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
        assert round(dcfc_30_360_us(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
        assert round(dcfc_30_360_us(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('

# Generated at 2024-03-18 07:05:43.553381
```python

# Generated at 2024-03-18 07:05:51.715331
```python
    # Test cases for the dcfc_act_365_a function
    def test_dcfc_act_365_a():
        assert dcfc_act_365_a(datetime.date(2007, 12, 28), datetime.date(2008, 2, 28), datetime.date(2008, 2, 28)) == Decimal('0.16986301369863')
        assert dcfc_act_365_a(datetime.date(2007, 12, 28), datetime.date(2008, 2, 29), datetime.date(2008, 2, 29)) == Decimal('0.17213114754098')
        assert dcfc_act_365_a(datetime.date(2007, 10, 31), datetime.date(2008, 11, 30), datetime.date(2008, 11, 30)) == Decimal('1.08196721311475')
        assert dcfc_act_365_a

# Generated at 2024-03-18 07:05:58.068846
```python
    assert round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
    assert round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
    assert round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
    assert round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14) == Decimal('1.33055555555556')
```

# Generated at 2024-03-18 07:06:04.627443
    # Create a DCC instance with a dummy calculation method
    dcc = DCC(
        name="30/360",
        altnames={"30U/360", "Bond Basis"},
        currencies=_as_ccys({"USD", "EUR"}),
        calculate_fraction_method=lambda start, asof, end, freq: Decimal((asof - start).days) / Decimal(360)
    )

    # Define test cases
    test_cases = [
        (datetime.date(2021, 1, 1), datetime.date(2021, 1, 2), datetime.date(2021, 1, 31), Decimal('0.002777777777777778')),
        (datetime.date(2021, 1, 1), datetime.date(2021, 1, 1), datetime.date(2021, 1, 31), Decimal('0.0')),
        (datetime.date(2021, 1, 1),

# Generated at 2024-03-18 07:06:13.189778
```python
    # Test cases for the dcfc_act_365_a function
    def test_dcfc_act_365_a():
        assert dcfc_act_365_a(Date(2007, 12, 28), Date(2008, 2, 28), Date(2008, 2, 28)) == Decimal('0.16986301369863')
        assert dcfc_act_365_a(Date(2007, 12, 28), Date(2008, 2, 29), Date(2008, 2, 29)) == Decimal('0.17213114754098')
        assert dcfc_act_365_a(Date(2007, 10, 31), Date(2008, 11, 30), Date(2008, 11, 30)) == Decimal('1.08196721311475')
        assert dcfc_act_365_a(Date(2008, 2, 

# Generated at 2024-03-18 07:06:22.201501
```python
    # Unit test for function dcfc_30_e_plus_360
    def test_dcfc_30_e_plus_360():
        assert round(dcfc_30_e_plus_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14) == Decimal('0.16666666666667')
        assert round(dcfc_30_e_plus_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14) == Decimal('0.16944444444444')
        assert round(dcfc_30_e_plus_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14) == Decimal('1.08333333333333')
        assert round(dcfc_30_e_plus_360(start=ex4_start, asof=ex4_asof, end=ex4_asof),

# Generated at 2024-03-18 07:06:28.357146
    assert round(dcfc_act_act(start=datetime.date(2007, 12, 28), asof=datetime.date(2008, 2, 28), end=datetime.date(2008, 2, 28)), 14) == Decimal('0.16942884946478')
    assert round(dcfc_act_act(start=datetime.date(2007, 12, 28), asof=datetime.date(2008, 2, 29), end=datetime.date(2008, 2, 29)), 14) == Decimal('0.17216108990194')
    assert round(dcfc_act_act(start=datetime.date(2007, 10, 31), asof=datetime.date(2008, 11, 30), end=datetime.date(2008, 11, 30)), 14) == Decimal('1.08243131970956')
    assert round(dcfc_act_act(start=datetime.date(2008, 2,

# Generated at 2024-03-18 07:06:41.298767
```python
    assert dcfc_30_360_isda(datetime.date(2007, 12, 28), datetime.date(2008, 2, 28), datetime.date(2008, 2, 28)) == Decimal('0.16666666666667')
    assert dcfc_30_360_isda(datetime.date(2007, 12, 28), datetime.date(2008, 2, 29), datetime.date(2008, 2, 29)) == Decimal('0.16944444444444')
    assert dcfc_30_360_isda(datetime.date(2007, 10, 31), datetime.date(2008, 11, 30), datetime.date(2008, 11, 30)) == Decimal('1.08333333333333')
    assert dcfc_30_360_isda(datetime.date(2008, 2, 1), datetime.date(200