# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        dict_0 = None
        list_0 = module_0.reverse_map(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\t@\x9f\xac\x9f\x1do}\xb0\x9e\xda2Y(\x1d\xed\xe7\x98'
        list_0 = [bytes_0]
        var_0 = module_0.map_structure(bytes_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Lgd@V2T\t?frJ}OE'
        var_0 = module_0.map_structure(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 2
        list_0 = None
        list_1 = [list_0, int_0]
        tuple_0 = ()
        float_0 = -4437.979
        list_2 = [list_1, tuple_0, float_0]
        var_0 = None
        list_3 = [list_2, var_0, var_0, var_0]
        var_1 = module_0.map_structure_zip(int_0, list_3)
    except BaseException:
        pass

def test_case_4():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0, set_0]
        var_0 = module_0.map_structure_zip(set_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '8O{i7uC?^~WR'
        var_0 = module_0.map_structure_zip(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        bytes_0 = b'\x03\xfb\x9c7;?"P?\xc4\xca\xe8B'
        tuple_0 = (bytes_0,)
        var_0 = module_0.map_structure(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = None
        set_1 = {set_0, set_0}
        str_0 = 'reverse_open'
        str_1 = 'LmeV]Up'
        dict_0 = {str_0: str_1, set_0: set_1, set_0: set_0, set_0: str_1}
        var_0 = module_0.map_structure(set_1, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -2066
        set_0 = {int_0, int_0, int_0}
        var_0 = module_0.map_structure(int_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 342
        var_0 = module_0.no_map_instance(int_0)
        set_0 = {var_0}
        var_1 = module_0.map_structure(int_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = None
        int_0 = None
        str_0 = 'get_folder_size'
        tuple_0 = (int_0, str_0)
        float_0 = 1647.0
        var_0 = module_0.no_map_instance(float_0)
        set_0 = {tuple_0, list_0, list_0, str_0}
        list_1 = [tuple_0, set_0, tuple_0]
        var_1 = module_0.map_structure_zip(list_0, list_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'dQv#U[z'
        bytes_0 = b'VU\xb7\xfee\x97\xc2>'
        str_1 = 'Q):NeA7bb6-qp&E1NDUi'
        list_0 = []
        list_1 = [list_0]
        tuple_0 = ()
        dict_0 = {str_0: list_1, bytes_0: tuple_0}
        var_0 = module_0.map_structure(str_1, tuple_0)
        float_0 = 0.1
        var_1 = module_0.no_map_instance(float_0)
        list_2 = []
        list_3 = [dict_0, var_0]
        var_2 = module_0.map_structure_zip(list_2, list_3)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "|v#v['"
        bytes_0 = b'VU\xb7\xfee\x97\xc2>'
        type_0 = None
        str_1 = 'pp)gd|S0rm^]'
        list_0 = []
        list_1 = [list_0]
        tuple_0 = ()
        dict_0 = {str_0: list_1, bytes_0: tuple_0}
        tuple_1 = (list_1, tuple_0, dict_0, tuple_0)
        var_0 = module_0.map_structure(str_1, tuple_1)
        float_0 = 0.1
        var_1 = module_0.no_map_instance(float_0)
        module_0.register_no_map_class(type_0)
        list_2 = []
        set_0 = set()
        var_2 = module_0.map_structure(set_0, tuple_1)
        list_3 = [var_1, dict_0, var_0]
        var_3 = module_0.map_structure_zip(list_2, list_3)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'VU\xb7\xfee\x97\x1a\xc2>'
        type_0 = None
        dict_0 = {}
        str_0 = '\x0c'
        var_0 = module_0.no_map_instance(str_0)
        list_0 = module_0.reverse_map(dict_0)
        module_0.register_no_map_class(type_0)
        var_1 = module_0.no_map_instance(var_0)
        set_0 = set()
        var_2 = module_0.map_structure_zip(bytes_0, set_0)
    except BaseException:
        pass