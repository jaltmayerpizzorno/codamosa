# Automatically generated by Pynguin.
import tornado.options as module_0
import builtins as module_1
import typing as module_2

def test_case_0():
    try:
        str_0 = '\\11z`U'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Runs a callback with error handling.\n\n        .. versionchanged:: 6.0\n\n           CancelledErrors are no longer logged.\n        '
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        str_0 = ''
        bool_0 = False
        module_0.parse_config_file(str_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'ZDn\x0b#f"'
        str_1 = '/jfH?/\x0coWV{nqqk\r3xc'
        set_0 = {str_1, str_0, str_0}
        list_0 = [set_0]
        type_0 = module_1.type(*list_0)
        option_0 = module_0._Option(str_1, str_1, type_0, str_1)
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        any_0 = option_0.parse(str_1)
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_1.as_dict()
        option_0.set(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = None
        dict_0 = option_parser_0.group_dict(str_0)
        set_0 = option_parser_0.groups()
        str_1 = '/input/tornado/options.py'
        option_0 = module_0._Option(str_1, str_1, str_1, str_1)
        dict_1 = option_parser_0.as_dict()
        any_0 = option_parser_0.__getitem__(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Runs a callback with error handling.\n\n        .. versionchanged:: 6.0\n\n           CancelledErrors are no longer logged.\n        '
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'i^!'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_1 = module_0.OptionParser()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_7():
    try:
        module_0.print_help()
        option_parser_0 = module_0.OptionParser()
        str_0 = None
        dict_0 = option_parser_0.group_dict(str_0)
        option_0 = module_0._Option(str_0, str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_9():
    try:
        error_0 = module_0.Error()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '/input/tornado/log.py'
        bool_0 = True
        module_0.parse_config_file(str_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'YN2&nTC\x0bc.sKj'
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        mockable_0 = module_0._Mockable(option_parser_0)
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Sd'
        callable_0 = None
        module_0.add_parse_callback(callable_0)
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        option_parser_1 = module_0.OptionParser()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        str_0 = '&jP~\x0b7qZm mAO%'
        option_0 = module_0._Option(str_0, str_0, str_0, str_0)
        option_0.set(dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        module_0.print_help()
        str_0 = '/input/tornado/options.py'
        option_0 = module_0._Option(str_0, str_0, str_0, str_0)
        bool_0 = True
        list_0 = module_0.parse_command_line(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '/input/tornado/options.py'
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        bool_0 = False
        option_parser_0.parse_config_file(str_0, bool_0)
        str_1 = '\'*\rBgxU\t%"=j\nuTo]^b'
        any_0 = option_parser_0.__getattr__(str_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'Dn\x0b#f"'
        option_parser_0 = module_0.OptionParser()
        set_0 = {str_0, str_0}
        list_0 = [str_0]
        type_0 = module_1.type(*list_0)
        option_0 = module_0._Option(str_0, str_0, type_0, str_0)
        optional_0 = None
        option_parser_0.define(str_0, optional_0)
        str_1 = 'mE81'
        dict_0 = option_parser_0.group_dict(str_1)
        text_i_o_0 = None
        option_parser_0.__setattr__(str_0, text_i_o_0)
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'Sd'
        callable_0 = None
        module_0.add_parse_callback(callable_0)
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        option_parser_1 = module_0.OptionParser()
        text_i_o_0 = module_2.TextIO()
        option_parser_1.print_help(text_i_o_0)
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help()
        set_0 = option_parser_0.groups()
        str_0 = 'b'
        dict_0 = option_parser_0.group_dict(str_0)
        dict_1 = option_parser_0.as_dict()
        str_1 = ']\t7<+'
        module_0.define(str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'E1z:?wg]Hy$o4[!sg%'
        str_1 = '--assertion-generation'
        error_0 = module_0.Error()
        option_0 = module_0._Option(str_0, str_1, str_1)
        any_0 = option_0.value()
        any_1 = option_0.value()
        option_parser_0 = module_0.OptionParser()
        str_2 = '/input/tornado/log.py'
        list_0 = [str_2]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        module_0.print_help()
        option_parser_0 = module_0.OptionParser()
        list_0 = []
        bool_0 = False
        list_1 = module_0.parse_command_line(list_0, bool_0)
        str_0 = None
        dict_0 = option_parser_0.group_dict(str_0)
        option_0 = module_0._Option(str_0, str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'E1z:?wg]Hy$o4[!sg%'
        str_1 = '--assertion-generation'
        bool_0 = False
        error_0 = module_0.Error()
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_1)
        option_0 = module_0._Option(str_1, str_1, bool_0, str_0, error_0)
        any_0 = option_0.value()
        option_parser_1 = module_0.OptionParser()
        str_2 = '4 >\x0c&UChOU{$h|b<ts3'
        str_3 = 'rvogwZN2\x0bo'
        str_4 = 'ISK0QSP\x0cOsV\x0bnZjRJJ'
        str_5 = 'H,?/\rp,'
        list_0 = [str_2, str_3, str_4, str_5]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = ''
        str_1 = 'nk:E&D?n`zFPz8n'
        bool_0 = option_parser_0.__contains__(str_0)
        optional_0 = None
        type_0 = None
        bool_1 = True
        bytes_0 = b'\x80\x84\xbbzbQ\x85\xe5\xed0\x84\xfbf\x99\xd4\xa7'
        option_parser_0.define(str_1, optional_0, type_0, bool_1, str_0, bytes_0)
        option_parser_0.parse_config_file(str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '38t$S`SU\r[-,3'
        set_0 = {str_0, str_0}
        list_0 = [set_0]
        bool_0 = True
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, list_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        set_1 = {str_0, str_0}
        option_0.set(set_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'Z`n\x0b#f\n'
        set_0 = {str_0, str_0, str_0, str_0}
        list_0 = [set_0]
        bool_0 = False
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, list_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        option_0.set(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'Z`n\x0b#f\n'
        set_0 = {str_0, str_0}
        list_0 = [set_0]
        type_0 = module_1.type(*list_0)
        bool_0 = False
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, list_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = None
        str_1 = '#input/tornado/opt{ons.py'
        option_0 = module_0._Option(str_1, str_1, str_1, str_1)
        option_0.set(str_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_1.as_dict()
        any_0 = option_0.parse(str_1)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'ZDn\x0b#f"'
        str_1 = '/jfH?/\x0coWV{nqqk\r3xc'
        list_0 = [str_0]
        type_0 = module_1.type(*list_0)
        option_0 = module_0._Option(str_1, str_1, type_0, str_1)
        any_0 = option_0.parse(str_0)
        option_parser_0 = module_0.OptionParser()
        str_2 = ''
        option_parser_0.__setattr__(str_2, str_2)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '/jfH?/\x0coWV{nqqk\r3xc'
        list_0 = [str_0]
        type_0 = module_1.type(*list_0)
        option_0 = module_0._Option(str_0, str_0, type_0, str_0)
        any_0 = option_0.parse(str_0)
        str_1 = '=g#\x0bd">bU;,#Xr;\nwBBZ'
        option_parser_0 = module_0.OptionParser()
        str_2 = ''
        str_3 = '*+'
        bool_0 = False
        iterator_0 = option_parser_0.__iter__()
        option_parser_0.define(str_3, any_0, type_0, str_1, bool_0, str_1, iterator_0)
        dict_0 = option_parser_0.group_dict(str_2)
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_2, list_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '/fH?/\x0coWV{nqqk\r3xc'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_0 = [str_0]
        type_0 = module_1.type(*list_0)
        option_0 = module_0._Option(str_0, str_0, type_0, str_0)
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = ''
        str_2 = '0'
        option_parser_0.print_help()
        set_0 = option_parser_0.groups()
        dict_1 = option_parser_0.group_dict(str_2)
        str_3 = 'midnighKt'
        float_0 = 3938.64148
        option_1 = module_0._Option(str_3, option_parser_0, type_0, str_1, str_3, str_2, float_0)
        option_0.set(str_3)
        option_1.set(iterable_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '/fH?/\x0coWV{nqqk\r3xc'
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_0 = [str_0]
        type_0 = module_1.type(*list_0)
        dict_0 = option_parser_0.as_dict()
        option_0 = module_0._Option(str_0, str_0, type_0, str_0)
        option_parser_1 = module_0.OptionParser()
        dict_1 = option_parser_1.group_dict(str_0)
        str_1 = ''
        option_parser_1.define(str_1, str_1)
        str_2 = '0'
        option_parser_1.print_help()
        set_0 = option_parser_1.groups()
        dict_2 = option_parser_0.group_dict(str_2)
        str_3 = 'midnighKt'
        float_0 = 3938.64148
        option_1 = module_0._Option(str_3, option_parser_1, type_0, str_1, str_3, str_2, float_0)
        option_0.set(str_3)
        option_parser_2 = module_0.OptionParser()
        any_0 = option_1.parse(str_0)
        mockable_0 = option_parser_2.mockable()
        set_1 = option_parser_0.groups()
        option_parser_3 = module_0.OptionParser()
        option_parser_4 = module_0.OptionParser()
        mockable_1 = option_parser_4.mockable()
        iterator_0 = option_parser_4.__iter__()
        option_parser_5 = module_0.OptionParser()
        str_4 = None
        option_parser_1.parse_config_file(str_4)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '/fH?/\x0coWV{nqqk\r3xc'
        list_0 = [str_0]
        type_0 = module_1.type(*list_0)
        option_0 = module_0._Option(str_0, str_0, type_0, str_0)
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = ''
        str_2 = '0'
        option_parser_0.print_help()
        set_0 = option_parser_0.groups()
        dict_1 = option_parser_0.group_dict(str_2)
        str_3 = 'midnighKt'
        dict_2 = option_parser_0.as_dict()
        float_0 = 3939.0
        option_1 = module_0._Option(str_3, option_parser_0, type_0, str_1, str_3, str_2, float_0)
        option_0.set(str_3)
        option_1.set(list_0)
        option_parser_1 = module_0.OptionParser()
        any_0 = option_1.parse(str_1)
        mockable_0 = option_parser_1.mockable()
        set_1 = option_parser_0.groups()
        mockable_1 = option_parser_0.mockable()
        mockable_2 = option_parser_1.mockable()
        option_parser_2 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        option_parser_3 = module_0.OptionParser()
        list_1 = module_0.parse_command_line()
    except BaseException:
        pass