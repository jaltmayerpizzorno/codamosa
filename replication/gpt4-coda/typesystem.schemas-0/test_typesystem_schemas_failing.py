# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        schema_0 = module_0.Schema()
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_0.__len__()
        any_0 = schema_definitions_0.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        list_0 = [schema_0]
        str_0 = "f=J,'8(p\n-?[~3zOck"
        dict_0 = {str_0: schema_0}
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0, **dict_0)
        schema_definitions_0.__delitem__(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        list_0 = [schema_definitions_0, dict_0, dict_0, dict_0]
        schema_0 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_1 = module_0.Schema()
        bool_0 = schema_1.__eq__(schema_definitions_0)
        int_0 = schema_definitions_0.__len__()
        iterator_0 = schema_definitions_0.__iter__()
        str_1 = ''
        reference_0 = module_0.Reference(str_1, str_1)
        schema_definitions_1 = module_0.SchemaDefinitions()
        schema_2 = module_0.Schema()
        any_0 = reference_0.serialize(str_1)
        str_2 = "\x0bl=*Z!\x0cv@k};w.Q}'w"
        dict_0 = {str_1: str_1, str_1: str_2}
        schema_3 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        schema_0 = module_0.Schema()
        str_0 = schema_0.__repr__()
        any_0 = schema_0.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        schema_0 = module_0.Schema(**dict_0)
        str_0 = schema_0.__repr__()
        schema_1 = module_0.Schema()
        int_0 = -678
        bool_0 = schema_1.__eq__(int_0)
        field_0 = module_1.Field(allow_null=bool_0)
        schema_2 = module_0.Schema(**dict_0)
        int_1 = schema_0.__len__()
        str_1 = schema_2.__repr__()
        any_0 = schema_2.__getitem__(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.Field()
        str_0 = 'Person'
        reference_0 = module_0.Reference(str_0)
        module_0.set_definitions(reference_0, schema_definitions_0)
        str_1 = None
        reference_1 = module_0.Reference(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        str_0 = '_]'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(bool_0, strict=bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        schema_0 = module_0.Schema(**dict_0)
        str_0 = schema_0.__repr__()
        str_1 = 'Must be null.'
        reference_0 = module_0.Reference(str_1)
        any_0 = reference_0.serialize(schema_0)
        reference_1 = module_0.Reference(str_0)
        any_1 = reference_1.validate(schema_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        schema_0 = module_0.Schema(**dict_0)
        int_0 = schema_0.__len__()
        str_0 = 'I4uZR~c3e5v'
        reference_0 = module_0.Reference(str_0, str_0)
        any_0 = reference_0.validate(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = None
        str_0 = '=s]t5 j!\rk8eC'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Must have no more than {max_length} characters.'
        list_0 = [str_0]
        str_1 = '-\n6<u5&=MU'
        str_2 = '*\nF#(9P9xYV["Si.O[h'
        dict_0 = {str_1: list_0, str_2: str_0}
        schema_0 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        list_0 = []
        schema_0 = module_0.Schema(*list_0, **dict_0)
        str_0 = schema_0.__repr__()
        int_0 = schema_0.__len__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(str_0, int_0)
        reference_0 = module_0.Reference(str_0)
        schema_definitions_0.__setitem__(str_0, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        schema_0 = module_0.Schema(*list_0, **dict_0)
        str_0 = schema_0.__repr__()
        int_0 = schema_0.__len__()
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(str_0, int_0)
        reference_0 = module_0.Reference(str_0, schema_definitions_0)
        schema_definitions_1 = module_0.SchemaDefinitions()
        schema_1 = module_0.Schema()
        iterator_0 = schema_1.__iter__()
        iterator_1 = schema_1.__iter__()
        iterator_2 = schema_definitions_1.__iter__()
        schema_definitions_2 = module_0.SchemaDefinitions()
        iterator_3 = schema_definitions_0.__iter__()
        reference_1 = module_0.Reference(str_0, **dict_0)
        any_0 = reference_1.serialize(schema_definitions_1)
        field_0 = module_1.Field()
        schema_definitions_3 = module_0.SchemaDefinitions()
        schema_definitions_4 = module_0.SchemaDefinitions()
        module_0.set_definitions(field_0, schema_definitions_4)
        schema_2 = module_0.Schema()
        bool_0 = schema_0.__eq__(iterator_0)
        set_0 = set()
        any_1 = reference_0.validate(set_0)
    except BaseException:
        pass