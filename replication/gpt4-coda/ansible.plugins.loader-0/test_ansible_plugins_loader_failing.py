# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '~NL8\t 4'
        dict_0 = {str_0: str_0, str_0: str_0}
        get_with_context_result_0 = None
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, get_with_context_result_0)
        var_0 = module_0.get_shell_plugin(str_0, plugin_path_context_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '_eQvz?hlI*(tF]\tJw$C'
        set_0 = {str_0, str_0}
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(str_0, set_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = '__init__'
        bytes_0 = None
        var_0 = module_0.get_shell_plugin(bytes_0, str_0)
        str_1 = 'aj+u\n'
        bool_0 = False
        list_0 = [bool_0, bool_0, str_1, str_1]
        var_1 = module_0.get_shell_plugin(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 't)-.M'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'T9$\x01LO\x82\xeev\xb8*(\xb9'
        list_0 = [bytes_0]
        bytes_1 = b"o\xf3u\xc5\xf3'8+B\x06\x7f\xa6\xb3"
        str_0 = '|iH> &o'
        list_1 = []
        str_1 = ''
        dict_0 = {str_0: bytes_1, str_0: list_1, str_0: str_0, str_1: bytes_1}
        plugin_loader_0 = module_0.PluginLoader(bytes_1, str_0, list_1, dict_0, list_1)
        var_0 = plugin_loader_0.has_plugin(list_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_2 = 'GUx\x0c'
        plugin_path_context_0 = module_0.PluginPathContext(bytes_1, str_2)
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_1 = plugin_load_context_0.record_deprecation(plugin_path_context_0, plugin_load_context_1, list_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xd9\xa4\x7f4N\x85\xf1'
        str_0 = 'J\t %D6e:h]]Ph9g'
        dict_0 = {str_0: str_0}
        bytes_1 = b'\x16\x11\x101j\x87\x11g\xd0@\xb3\xf5'
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_1 = '^NkwG:WORB_T|[K_'
        plugin_loader_0 = module_0.PluginLoader(bytes_1, plugin_load_context_0, bytes_0, str_1)
        var_0 = plugin_loader_0.format_paths(dict_0)
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_0 = None
        var_1 = plugin_loader_0.get_with_context(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -2179.689
        str_0 = ''
        int_0 = 1158
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'|\xad:4~\xeb=.^\xfa\xbf'
        list_0 = [str_0, str_0, str_0, bytes_0]
        str_1 = "'@;c"
        dict_0 = {str_1: bytes_0}
        set_0 = set()
        tuple_0 = (plugin_load_context_0, list_0, dict_0, set_0)
        str_2 = None
        str_3 = 'O=g6~<'
        str_4 = "S\\\nwB)\rT0'[?u"
        dict_1 = {str_2: bytes_0, str_3: str_1, str_0: float_0, str_4: float_0}
        plugin_loader_0 = module_0.PluginLoader(float_0, str_0, int_0, tuple_0, dict_1)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        list_1 = [list_0, list_0]
        list_2 = [list_1, tuple_0, list_0]
        jinja2_loader_0 = module_0.Jinja2Loader(tuple_0, tuple_0, list_1, list_2, tuple_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_9():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'\xc7\xa8\xf8\x89c'
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_0, bytes_0)
        str_0 = 'X\x0ce7e0>'
        str_1 = 'bI^'
        plugin_loader_0 = module_0.PluginLoader(plugin_path_context_0, str_0, str_1, plugin_path_context_0)
        var_0 = plugin_loader_0.__repr__()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b';\xa9x\x0e\xb6\xe0W7\xae\x83\xb7'
        tuple_0 = (bytes_0,)
        str_0 = 'uR'
        dict_0 = {}
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [tuple_0, bytes_0]
        plugin_loader_0 = module_0.PluginLoader(tuple_0, dict_0, plugin_load_context_0, str_0, list_0)
        var_0 = plugin_loader_0.__setstate__(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\x0b'
        get_with_context_result_0 = None
        bytes_0 = b'\xbfW\xa2\xcfQo\x15\x9f\xb9'
        bool_0 = False
        jinja2_loader_0 = module_0.Jinja2Loader(get_with_context_result_0, str_0, bytes_0, bool_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '~NL8\t 4'
        str_1 = '+]S1U4^e'
        dict_0 = {str_0: str_0, str_1: str_0}
        get_with_context_result_0 = None
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, get_with_context_result_0)
        var_0 = module_0.get_shell_plugin(str_0, plugin_path_context_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'VALUE_SPECIFIED_IN_NO_LOG_PARAMETER'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'V*LUE_SPECIFIED_IN_NO_LOG_PARAMETER'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'a'
        dict_0 = {}
        bool_0 = True
        list_0 = [dict_0]
        str_1 = 'kvJC}\\kJBUfJ9,58'
        plugin_path_context_0 = module_0.PluginPathContext(str_1, str_0)
        bytes_0 = None
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, list_0, plugin_path_context_0, bytes_0)
        tuple_0 = (list_0,)
        jinja2_loader_1 = module_0.Jinja2Loader(jinja2_loader_0, list_0, tuple_0, plugin_path_context_0)
        bytes_1 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(dict_0, jinja2_loader_1, bytes_1)
    except BaseException:
        pass

def test_case_16():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.add_all_plugin_dirs(plugin_load_context_0)
        str_0 = 'bash'
        dict_0 = None
        str_1 = 'S[+J^\\\rV'
        int_0 = None
        bool_0 = True
        str_2 = 'kZ1Nxi%wGTXsrkH~]LO'
        set_0 = {plugin_load_context_0, str_0, var_0, bool_0}
        plugin_path_context_0 = module_0.PluginPathContext(str_2, set_0)
        list_0 = [bool_0, str_0, var_0, var_0]
        dict_1 = {str_2: list_0}
        plugin_loader_0 = module_0.PluginLoader(bool_0, plugin_path_context_0, list_0, dict_1)
        var_1 = plugin_loader_0.find_plugin_with_context(dict_0, str_1, int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.add_all_plugin_dirs(plugin_load_context_0)
        plugin_loader_0 = None
        get_with_context_result_0 = None
        int_0 = -336
        var_1 = plugin_load_context_0.record_deprecation(plugin_loader_0, get_with_context_result_0, int_0)
        str_0 = 'a'
        var_2 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        complex_0 = None
        str_0 = '/input/ansible/plugins/shell/__pycache__/windows'
        dict_0 = {str_0: complex_0, str_0: complex_0, str_0: str_0}
        str_1 = "VSG)+aH~~BS'"
        bool_0 = False
        str_2 = 'YNMH1`N2;E5[z4\rWu\r'
        set_0 = {bool_0}
        plugin_loader_0 = module_0.PluginLoader(str_1, bool_0, str_2, set_0)
        var_0 = plugin_loader_0.get(complex_0, **dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        dict_0 = {}
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_1, dict_0)
        str_0 = 'eval'
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, plugin_path_context_0, dict_0, plugin_path_context_0, str_0)
        var_0 = jinja2_loader_0.find_plugin(plugin_load_context_1)
    except BaseException:
        pass

def test_case_20():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.add_all_plugin_dirs(plugin_load_context_0)
        float_0 = 4020.9
        list_0 = None
        list_1 = [float_0, list_0, var_0]
        str_0 = '\x0cTnPVso/Xr7G6oa'
        list_2 = None
        dict_0 = {list_0: list_0, float_0: list_2, str_0: list_1}
        bytes_0 = b'\xe2]\x1b\xdc\x7fd\xd3\x8d\xda+\x1bn\xda\xfcG\xd0\xe9\xa7'
        plugin_loader_0 = module_0.PluginLoader(float_0, list_1, str_0, dict_0, bytes_0)
        var_1 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 34
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        dict_0 = {}
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_1, dict_0)
        str_0 = 'tsIR;9~Ko>Aru):'
        str_1 = 'l-&w,fQkC\'D"h"7Ue'
        str_2 = '?G4,F'
        dict_1 = {str_0: plugin_load_context_0, str_1: str_1, str_2: int_0}
        var_0 = module_0.add_all_plugin_dirs(dict_1)
        bytes_0 = b'\xc4\xcdj@\x87\xef\xc2G\x84\x1e<{\xb3[\x9b\xbe\xd3\xfb\x07'
        float_0 = None
        bytes_1 = b'\xfb\xec\xbe[-\xa3X\xd3\x12p\xa1\xd5j\x07^\x03'
        bool_0 = True
        list_0 = [bool_0, str_2]
        str_3 = '/input/ansible/plugins/shell/windows'
        str_4 = 'GbQ|8t\\'
        str_5 = 'I7'
        str_6 = '/pynguin/YNMH1`N2;E5[z4\rWu\r/windows'
        plugin_loader_0 = module_0.PluginLoader(str_4, str_5, dict_0, str_6)
        var_1 = plugin_loader_0.format_paths(str_3)
        plugin_loader_1 = module_0.PluginLoader(bytes_1, dict_1, list_0, float_0)
        var_2 = plugin_load_context_1.resolve(plugin_path_context_0, bytes_0, float_0, plugin_loader_1)
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, plugin_path_context_0, dict_0, plugin_path_context_0, str_2)
        var_3 = plugin_loader_0.has_plugin(plugin_path_context_0, int_0)
        get_with_context_result_0 = module_0.get_with_context_result()
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 50
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_1 = 3399
        plugin_load_context_1 = module_0.PluginLoadContext()
        dict_0 = {}
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_0, dict_0)
        str_0 = 'eval'
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_1, plugin_path_context_0, dict_0, plugin_path_context_0, str_0)
        bytes_0 = b'\xe7sS\x92A\x00\x05\xb7\x19\x871\x01'
        dict_1 = {int_0: plugin_load_context_1}
        bool_0 = False
        float_0 = -808.0
        plugin_loader_0 = module_0.PluginLoader(int_1, jinja2_loader_0, dict_1, bool_0, float_0)
        var_0 = plugin_loader_0.has_plugin(plugin_load_context_0)
        tuple_0 = ()
        set_0 = {str_0}
        str_1 = 'EbN\x0c0rBA4uP@fk#Pe-'
        list_0 = [jinja2_loader_0, tuple_0, plugin_load_context_0]
        jinja2_loader_1 = module_0.Jinja2Loader(str_1, list_0, bytes_0, list_0)
        var_1 = jinja2_loader_1.find_plugin(set_0)
    except BaseException:
        pass

def test_case_23():
    try:
        plugin_loader_0 = None
        bool_0 = True
        var_0 = module_0.get_shell_plugin(plugin_loader_0, bool_0)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_24():
    try:
        list_0 = []
        str_0 = 'NF"yqgEHx'
        tuple_0 = ()
        bytes_0 = b'\xde\xe6\xf0q\xe1:$\xbd\x1bw\xcc\x95%*\xb7\xaf\xb9F'
        set_0 = {str_0, str_0, tuple_0}
        list_1 = [set_0]
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, tuple_0, bytes_0, set_0, list_1)
        var_0 = jinja2_loader_0.all(*list_0)
        str_1 = '/#/0Y)9'
        list_2 = [str_1, str_1, str_1, str_1]
        int_0 = -5297
        bool_0 = False
        tuple_1 = (list_2,)
        list_3 = []
        plugin_path_context_0 = module_0.PluginPathContext(list_3, int_0)
        list_4 = [plugin_path_context_0]
        jinja2_loader_1 = module_0.Jinja2Loader(list_2, int_0, bool_0, tuple_1, list_4)
    except BaseException:
        pass

def test_case_25():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.add_all_plugin_dirs(plugin_load_context_0)
        str_0 = 'a'
        bytes_0 = None
        var_1 = module_0.get_shell_plugin(bytes_0, str_0)
        var_2 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_26():
    try:
        complex_0 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = -2140
        tuple_0 = (int_0,)
        set_0 = {plugin_load_context_0, tuple_0, complex_0}
        str_0 = 'ER^L'
        str_1 = '%?B'
        str_2 = 'Secret'
        dict_0 = {str_0: tuple_0, str_1: str_0, str_2: set_0, str_1: str_2}
        int_1 = 645
        bytes_0 = b'&\xeaU=\x9a\x8aD\xa8g\x9e3\xe0\x13\xe3\xedb'
        set_1 = {bytes_0, int_1, plugin_load_context_0, bytes_0}
        dict_1 = {}
        plugin_loader_0 = module_0.PluginLoader(int_1, bytes_0, set_1, dict_1)
        var_0 = plugin_loader_0.find_plugin(tuple_0, set_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_27():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        jinja2_loader_0 = None
        float_0 = 617.1419
        get_with_context_result_0 = None
        var_0 = plugin_load_context_0.resolve(jinja2_loader_0, float_0, get_with_context_result_0, float_0)
        var_1 = module_0.add_all_plugin_dirs(plugin_load_context_0)
        get_with_context_result_1 = None
        int_0 = -330
        str_0 = '__init__'
        bytes_0 = None
        var_2 = module_0.get_shell_plugin(bytes_0, str_0)
        dict_0 = {str_0: get_with_context_result_1, str_0: var_2}
        str_1 = '+<P?Gq$hh'
        str_2 = 'auf\n;'
        plugin_loader_0 = module_0.PluginLoader(str_1, int_0, str_2, str_2)
        var_3 = plugin_loader_0.has_plugin(dict_0)
        var_4 = plugin_loader_0.add_directory(str_2, dict_0)
        set_0 = {var_2, var_2, get_with_context_result_1}
        float_1 = -980.6
        plugin_load_context_1 = None
        int_1 = -649
        str_3 = '/pynguin/\udcfbW\udcbe[-\udca3X\udcd3\x12W\udca1\udcd5\x07^\x03/windows'
        str_4 = 'Alp[l]Z|Q,pFR\x0bsd/~T'
        dict_1 = {str_0: bytes_0, str_3: plugin_load_context_0, str_4: set_0}
        jinja2_loader_1 = module_0.Jinja2Loader(float_1, get_with_context_result_1, plugin_load_context_1, int_1, dict_1)
        var_5 = plugin_loader_0.has_plugin(plugin_load_context_1, int_1)
        var_6 = plugin_loader_0.get(str_2)
    except BaseException:
        pass