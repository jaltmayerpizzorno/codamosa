# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    set_0 = set()
    int_0 = module_0.len_without_ansi(set_0)

def test_case_1():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_2():
    int_0 = 386
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0)

def test_case_3():
    str_0 = 'b\\5,;W:X3'
    int_0 = 384
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_4():
    str_0 = '\tz56qD+DC03Z{r'
    bool_0 = None
    bool_1 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_1)
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, bool_1, bool_0)
    int_0 = -625
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(max_lines=int_0)
    list_0 = ansi_text_wrapper_2.wrap(str_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)
    list_1 = ansi_text_wrapper_0.wrap(str_0)

def test_case_5():
    str_0 = '\tz56qD+DC03Z{r'
    bool_0 = None
    bool_1 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_1)
    str_1 = ansi_text_wrapper_0.fill(str_0)
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0, bool_1, bool_0)
    int_0 = -625
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(max_lines=int_0)
    list_0 = ansi_text_wrapper_2.wrap(str_1)
    str_2 = ansi_text_wrapper_0.fill(str_1)
    list_1 = ansi_text_wrapper_0.wrap(str_0)

def test_case_6():
    str_0 = '__attr_map__ must be defined as a tuple of strings in %r.'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)
    int_0 = -1380
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(max_lines=int_0)
    list_0 = ansi_text_wrapper_1.wrap(str_1)
    str_2 = 'Cnvert a :obj:`str`, that may contain escaped utf8 hexadecimal, to    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes: The given ``text`` conzerted into escaped utf8 bytes.\n        int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that referencem invalid utf8 bytes.\n    '
    str_3 = ansi_text_wrapper_1.fill(str_2)
    int_1 = module_0.len_without_ansi(list_0)