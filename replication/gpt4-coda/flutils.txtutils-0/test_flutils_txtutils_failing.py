# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    try:
        sequence_0 = None
        int_0 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '#\\R%VJK'
        int_0 = 1557
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, bool_0, max_lines=int_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "%v',eu-~7G'8\\O+&pU "
        bool_0 = True
        float_0 = 791.9
        str_1 = 'E\'uZ\'=-x"@#]'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=float_0, placeholder=str_1)
        str_2 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
        bool_0 = True
        str_1 = 'OSCTJ&*;Zg]@C}49:'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_1)
        str_2 = ansi_text_wrapper_0.fill(str_0)
        int_0 = module_0.len_without_ansi(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
        int_0 = module_0.len_without_ansi(str_0)
        int_1 = -786
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_1, str_0, bool_0, bool_0, int_0, placeholder=str_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'c.I<u.[<b5'
        bool_0 = True
        bool_1 = False
        bool_2 = True
        int_0 = -3632
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_1, bool_2, int_0, max_lines=int_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "yG@}@+^F'g?,5u "
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
        str_2 = '\\T&AOB@'
        bool_1 = False
        str_3 = ')Fm4?[fIzpkG>+!{fv'
        str_4 = ansi_text_wrapper_0.fill(str_3)
        set_0 = {str_2, str_3}
        int_0 = module_0.len_without_ansi(set_0)
        int_1 = module_0.len_without_ansi(str_0)
        int_2 = module_0.len_without_ansi(bool_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '__attr_map__ must e defined as a tuple of strings in %r.'
        bool_0 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
        int_0 = -1380
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(max_lines=int_0)
        str_2 = ansi_text_wrapper_1.fill(str_0)
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(int_0, str_0, str_0)
        str_3 = '8v'
        str_4 = ansi_text_wrapper_1.fill(str_1)
        str_5 = 'Convert a :obj:`str`, that may contain escaped utf8 hexadecimal, to\n    bytes of escaped utf8 hexadecimal.\n\n    Args:\n        text (str or :obj:`~UserString`): The string input.\n        errors (str or :obj:`~UserString`): The error checking level.\n\n    Returns:\n        bytes:The given ``text`` converted into escaped utf8 byts.\n        int: The number of given ``text`` characters consumed\n\n    Raises:\n         UnicodeEncodeError: if the given ``text`` contains escaped\n            utf8 hexadecimal that references invalid utf8 bytes.\n    '
        str_6 = ansi_text_wrapper_0.fill(str_5)
        str_7 = ''
        list_0 = ansi_text_wrapper_1.wrap(str_7)
        str_8 = ansi_text_wrapper_1.fill(str_6)
        str_9 = ansi_text_wrapper_2.fill(str_3)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\x1b[38;5;29fooba\x1b[0m'
        bool_0 = True
        str_1 = 'OSCTJ&*;Zg]@C}49:'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_1)
        str_2 = ansi_text_wrapper_0.fill(str_0)
        int_0 = module_0.len_without_ansi(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\x0cuXq<WbrpNw'
        bool_0 = None
        str_1 = '-Thm['
        int_0 = 24
        bool_1 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, bool_1)
        str_2 = ansi_text_wrapper_0.fill(str_1)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        bool_2 = False
        bool_3 = True
        str_3 = '~"O#(|a=x'
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_3)
        str_4 = ansi_text_wrapper_1.fill(str_3)
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(bool_0, bool_3, bool_0)
        str_5 = ';"OE8"2RHPee|Bm~'
        ansi_text_wrapper_3 = module_0.AnsiTextWrapper(max_lines=int_0)
        list_1 = ansi_text_wrapper_3.wrap(str_5)
        ansi_text_wrapper_4 = module_0.AnsiTextWrapper(str_0, bool_2, bool_3, int_0, max_lines=int_0)
        str_6 = None
        str_7 = ansi_text_wrapper_4.fill(str_6)
    except BaseException:
        pass