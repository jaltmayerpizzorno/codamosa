# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0, str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        str_0 = register_0.__call__()
        str_1 = '^p":\''
        str_2 = 'Av:'
        dict_0 = {str_1: str_1, str_1: str_1, str_2: str_1, str_1: str_1}
        register_1 = module_0.Register()
        register_2 = register_1.copy()
        register_3 = register_2.copy()
        register_3.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_1.mute()
        register_2 = module_0.Register()
        register_3 = register_2.copy()
        register_3.set_rgb_call(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "'`p en~4#"
        str_1 = '6h#eeXEj:Ul9Q}QC;)!'
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_0.unmute()
        register_2 = register_1.copy()
        var_0 = register_2.__setattr__(str_0, style_0)
        str_2 = 'c'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
        dict_1 = register_1.as_dict()
        str_3 = register_2.__call__(**dict_0)
        type_0 = None
        dict_2 = register_2.as_dict()
        register_3 = module_0.Register()
        register_4 = module_0.Register()
        register_5 = register_4.copy()
        register_4.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_3 = module_0.Register()
        register_4 = module_0.Register()
        register_4.unmute()
        register_5 = module_0.Register()
        register_4.mute()
        dict_0 = register_3.as_dict()
        str_0 = '8y5X#p2\r'
        list_0 = [str_0, str_0, str_0]
        str_1 = register_1.__call__(*list_0)
        var_0 = register_0.as_namedtuple()
        str_2 = "\nThe+Register class: Sty's heart.\n"
        dict_1 = {str_2: str_2, str_2: register_5, str_2: register_5}
        str_3 = register_1.__call__(**dict_1)
        str_4 = None
        list_1 = [str_4, str_4, str_4]
        dict_2 = None
        str_5 = register_3.__call__(*list_1, **dict_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        list_0 = [str_0]
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        str_1 = register_2.__call__(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 130
        register_0 = module_0.Register()
        str_0 = register_0.__call__()
        register_0.mute()
        list_0 = [int_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
        dict_0 = register_0.as_dict()
        register_1 = module_0.Register()
        register_2 = register_0.copy()
        register_3 = register_2.copy()
        register_0.unmute()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "'`p en~4#"
        str_1 = '6h#eeXEj:Ul9Q}QC;)!'
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        register_0.unmute()
        register_1 = register_0.copy()
        var_0 = register_1.__setattr__(str_0, style_0)
        dict_0 = register_1.as_dict()
        type_0 = None
        register_1.set_renderfunc(type_0, str_1)
        register_2 = module_0.Register()
        str_2 = None
        var_1 = register_0.__setattr__(str_2, style_0)
    except BaseException:
        pass