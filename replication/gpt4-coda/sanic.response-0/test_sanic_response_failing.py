# Automatically generated by Pynguin.
import sanic.response as module_0
import sanic.compat as module_1
import sanic.models.protocol_types as module_2

def test_case_0():
    try:
        str_0 = 'P'
        int_0 = 4904
        h_t_t_p_response_0 = module_0.text(str_0, int_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        str_0 = 'deprecated'
        h_t_t_p_response_0 = module_0.text(str_0)
        int_0 = -5727
        set_0 = set()
        h_t_t_p_response_1 = module_0.html(bytes_0, int_0, set_0)
        header_0 = module_1.Header()
        str_1 = 'F\nGFpf-Aa'
        h_t_t_p_response_2 = module_0.raw(header_0, str_1)
        str_2 = "'}C@RL"
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(int_0, str_2)
        callable_0 = None
        streaming_h_t_t_p_response_1 = module_0.StreamingHTTPResponse(callable_0)
        h_t_t_p_response_3 = module_0.raw(streaming_h_t_t_p_response_1, int_0)
        range_0 = module_2.Range()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        h_t_t_p_response_0 = module_0.redirect(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        h_t_m_l_protocol_0 = None
        header_0 = module_1.Header()
        str_0 = 'deprecated'
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(h_t_m_l_protocol_0, header_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        int_0 = 307
        str_0 = '9Q/[SS95\x0c\tU'
        str_1 = ''
        streaming_h_t_t_p_response_0 = module_0.file_stream(str_0, str_1)
        h_t_t_p_response_0 = module_0.json(list_0, int_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "OJ<1'"
        dict_0 = None
        h_t_t_p_response_0 = module_0.html(str_0, dict_0)
        h_t_m_l_protocol_0 = module_2.HTMLProtocol()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'i2?\x0bc!K?/'
        list_0 = [str_0, str_0, str_0, str_0]
        int_0 = -61
        str_1 = "c*|'&_gBMR>}{[,"
        int_1 = 305
        h_t_t_p_response_0 = module_0.HTTPResponse(str_1)
        h_t_t_p_response_1 = module_0.HTTPResponse(int_1)
        float_0 = 1649.7217
        base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(float_0)
        none_type_0 = None
        h_t_t_p_response_2 = module_0.raw(none_type_0, int_1)
        var_0 = streaming_h_t_t_p_response_0.send()
        str_2 = 'Orp/aP2/.i2EahgHo\x0c*h'
        base_h_t_t_p_response_1 = module_0.BaseHTTPResponse()
        tuple_0 = (base_h_t_t_p_response_1,)
        list_1 = [str_2, int_1, str_0]
        var_1 = streaming_h_t_t_p_response_0.send(*list_1)
        var_2 = streaming_h_t_t_p_response_0.write(tuple_0)
        tuple_1 = None
        var_3 = module_0.stream(list_0, int_0, str_1, str_2, tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        callable_0 = None
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(callable_0)
        streaming_h_t_t_p_response_1 = module_0.StreamingHTTPResponse(callable_0, streaming_h_t_t_p_response_0)
        str_0 = None
        h_t_t_p_response_0 = module_0.text(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        int_0 = 100000000
        var_0 = None
        bytes_0 = b'\x87wa\xa9\xcf\n\x03:\xfd\x1c\xcdH\t\xb7\x7f\xc8\xf1\x05^\xed'
        streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(str_0, int_0, var_0, str_0, bytes_0)
        var_1 = module_0.stream(streaming_h_t_t_p_response_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -2224
        int_1 = -636
        str_0 = 'q@GHzM.F1O[3IeU'
        str_1 = 'aSyD\nE%S?'
        str_2 = "5Iv&*B`'"
        str_3 = '2`Zgme'
        dict_0 = {str_0: str_1, str_2: str_3}
        str_4 = '\nSv|pdn\x0c/'
        dict_1 = {str_4: str_2}
        h_t_t_p_response_0 = module_0.json(int_0)
        h_t_t_p_response_1 = module_0.json(int_0, int_1, dict_0, str_4, dict_1)
    except BaseException:
        pass