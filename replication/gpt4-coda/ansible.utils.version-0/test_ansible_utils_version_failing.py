# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ne__(semantic_version_0)
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        alpha_0 = module_0._Alpha(numeric_0)
        var_1 = alpha_0.__repr__()
        str_0 = 'l3h(RM:;+P&'
        var_2 = numeric_0.__eq__(str_0)
        var_3 = semantic_version_0.parse(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = set()
        alpha_0 = module_0._Alpha(set_0)
        bool_0 = True
        var_0 = alpha_0.__ge__(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        float_0 = -401.207
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__gt__(semantic_version_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '^\n        (.+)                    # A pattern expression ending with...\n        \\[(?:                   # A [subscript] expression comprising:\n            (-?[0-9]+)|         # A single positive or negative number\n            ([0-9]+)([:-])      # Or an x:y or x: range.\n            ([0-9]*)\n        )\\]\n        $\n    '
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        set_0 = {str_0, str_0, str_0}
        var_0 = numeric_0.__ne__(set_0)
        var_1 = numeric_0.__gt__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '>'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        var_1 = semantic_version_0.__ne__(semantic_version_0)
        loose_version_0 = module_1.LooseVersion()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xd9@0\n\xd1\xeb'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__lt__(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '\\V0iDh9'
        var_0 = semantic_version_0.__le__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = 'xJ<2Xt7{}#F!D8\x0b'
        var_0 = semantic_version_0.__ge__(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        float_0 = 2.0
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__lt__(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
    except BaseException:
        pass

def test_case_11():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ne__(semantic_version_1)
        bytes_0 = b'\x8a\x91\xd1\xab\xaf'
        var_1 = semantic_version_0.__gt__(bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        alpha_0 = module_0._Alpha(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        bytes_0 = b'\xbc'
        var_0 = semantic_version_0.__repr__()
        var_1 = alpha_0.__ne__(bytes_0)
        var_2 = alpha_0.__gt__(semantic_version_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 757.9348028854971
        alpha_0 = module_0._Alpha(float_0)
        semantic_version_0 = module_0.SemanticVersion()
        int_0 = -2432
        alpha_1 = module_0._Alpha(int_0)
        semantic_version_1 = module_0.SemanticVersion()
        int_1 = 823
        numeric_0 = module_0._Numeric(int_1)
        var_0 = numeric_0.__gt__(alpha_0)
        float_1 = 0.001
        var_1 = alpha_0.__lt__(float_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 0
        numeric_0 = module_0._Numeric(int_0)
        var_0 = numeric_0.__ne__(numeric_0)
        bytes_0 = b'\xdb\xc9\x07\xa9\x17\x83\x7f\x0c\x93]\xb5\xc6\x08'
        var_1 = numeric_0.__le__(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ne__(semantic_version_1)
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        alpha_0 = module_0._Alpha(numeric_0)
        str_0 = '&jE5<36]VcA[$ML$va'
        var_1 = numeric_0.__ne__(str_0)
        var_2 = numeric_0.__ge__(semantic_version_0)
    except BaseException:
        pass

def test_case_16():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        str_0 = '&X\\S?#9o]/Hf;z'
        var_0 = semantic_version_1.__ne__(semantic_version_0)
        alpha_0 = module_0._Alpha(str_0)
        float_0 = 2055.42
        numeric_0 = module_0._Numeric(float_0)
        var_1 = alpha_0.__gt__(numeric_0)
        var_2 = alpha_0.__eq__(semantic_version_1)
        var_3 = alpha_0.__ge__(alpha_0)
        var_4 = semantic_version_0.__ne__(semantic_version_1)
        str_1 = ':308_;Z,5\\5r`18EzUR'
        str_2 = 'apped_rp'
        var_5 = alpha_0.__ne__(str_2)
        var_6 = semantic_version_1.from_loose_version(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        int_0 = 530
        numeric_1 = module_0._Numeric(int_0)
        var_0 = numeric_1.__ge__(numeric_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = numeric_1.__le__(numeric_1)
        var_2 = semantic_version_0.__repr__()
        semantic_version_1 = module_0.SemanticVersion(semantic_version_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '1.2.3'
        loose_version_0 = module_1.LooseVersion(str_0)
        semantic_version_0 = module_0.SemanticVersion(str_0)
        loose_version_1 = module_1.LooseVersion()
        int_0 = 3250
        loose_version_2 = module_1.LooseVersion(int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        str_0 = '&X\\S?#9o]/Hf;z'
        var_0 = semantic_version_1.__ne__(semantic_version_0)
        alpha_0 = module_0._Alpha(str_0)
        float_0 = 2054.016980076739
        numeric_0 = module_0._Numeric(float_0)
        var_1 = alpha_0.__gt__(numeric_0)
        var_2 = alpha_0.__eq__(alpha_0)
        var_3 = alpha_0.__ge__(alpha_0)
        var_4 = semantic_version_0.__ne__(semantic_version_1)
        str_1 = '}&3&O\x0b$L^D~\nm'
        var_5 = alpha_0.__le__(str_1)
        str_2 = ':308_;Z,5\\5r`18EzUR'
        str_3 = 'apped_rp'
        var_6 = alpha_0.__ne__(str_3)
        var_7 = semantic_version_1.from_loose_version(str_2)
    except BaseException:
        pass

def test_case_20():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        str_0 = '/F8\x0b\x0cJy17,w+vF5-u\tM'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ne__(semantic_version_0)
        str_0 = "JP?`mxb'N~#S"
        loose_version_0 = module_1.LooseVersion(str_0)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass