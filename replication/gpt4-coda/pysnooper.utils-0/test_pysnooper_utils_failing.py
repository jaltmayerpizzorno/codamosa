# Automatically generated by Pynguin.
import pysnooper.utils as module_0

def test_case_0():
    try:
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -3422.842
        var_0 = module_0.normalize_repr(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xa8\x88y,\xcc\x8exQ\x02\xe3S2\x18l\x17\x91\xe8\x89('
        set_0 = {bytes_0}
        var_0 = module_0.truncate(bytes_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xf4\x17\xc6\xa6\x10\x83\x81\rf\xf9\x01\xef\x13#\xa6\xfd'
        var_0 = module_0.get_shortish_repr(bytes_0)
        list_0 = [var_0, bytes_0, bytes_0]
        str_0 = 'a'
        tuple_0 = (str_0,)
        var_1 = module_0.get_shortish_repr(list_0, tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1330
        bool_0 = False
        int_1 = None
        var_0 = module_0.truncate(bool_0, int_1)
        dict_0 = {int_0: int_0, int_0: int_0}
        var_1 = module_0.ensure_tuple(dict_0)
        list_0 = None
        writable_stream_0 = module_0.WritableStream(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1375.3912
        var_0 = module_0.ensure_tuple(float_0)
        bytes_0 = b'\xdfp\xfa'
        var_1 = module_0.get_shortish_repr(bytes_0)
        writable_stream_0 = module_0.WritableStream()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        str_0 = 'open'
        dict_0 = {}
        list_1 = [list_0, str_0, dict_0]
        bytes_0 = b'kC\x82D'
        var_0 = module_0.get_shortish_repr(list_1, list_1, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n\ni4`= oB&d>k'
        int_0 = -2035
        bytes_0 = b'kV\xe9'
        var_0 = module_0.get_shortish_repr(bytes_0)
        str_1 = 'Helper class that provides a standard way to create an ABC using\n        inheritance.\n        '
        dict_0 = {}
        dict_1 = {}
        int_1 = -7797
        var_1 = module_0.get_shortish_repr(dict_0, dict_1, int_1)
        dict_2 = {str_0: str_0, str_0: int_0, str_0: str_0, str_1: int_0}
        var_2 = module_0.normalize_repr(dict_2)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Q'
        str_1 = 'REPR FAILED'
        bool_0 = False
        var_0 = module_0.shitcode(str_1)
        bytes_0 = None
        dict_0 = None
        tuple_0 = (bytes_0, dict_0)
        set_0 = set()
        var_1 = module_0.get_shortish_repr(tuple_0, set_0)
        str_2 = 'normalize is not supported with thread_info'
        dict_1 = {str_1: str_1, str_1: str_0, str_1: var_0, str_2: str_0}
        var_2 = module_0.ensure_tuple(dict_1)
        var_3 = module_0.get_shortish_repr(bool_0)
        float_0 = 2387.0
        tuple_1 = ()
        float_1 = -2981.6
        dict_2 = {str_2: bool_0, str_1: var_2, var_2: float_0, str_1: var_2}
        var_4 = module_0.get_shortish_repr(float_0, tuple_1, float_1, dict_2)
    except BaseException:
        pass