# Automatically generated by Pynguin.
import youtube_dl.aes as module_0

def test_case_0():
    try:
        str_0 = '20091109'
        set_0 = {str_0}
        float_0 = None
        var_0 = module_0.aes_cbc_decrypt(set_0, str_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 165
        list_0 = [int_0]
        var_0 = module_0.key_expansion(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x9a\x9c\x0f'
        var_0 = module_0.key_expansion(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = None
        var_0 = module_0.key_expansion(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -1614
        var_0 = module_0.sub_bytes(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'c~n8$W^y=ZEp/'
        var_0 = module_0.sub_bytes_inv(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = None
        var_0 = module_0.rotate(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'R/d.(QYo1H-A<s}{\r'
        var_0 = module_0.mix_columns(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'tVnL(bQZ<&&'
        var_0 = module_0.mix_columns_inv(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = None
        var_0 = module_0.shift_rows(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = None
        var_0 = module_0.shift_rows_inv(set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tuple_0 = ()
        var_0 = module_0.inc(tuple_0)
        str_0 = 'R/d.(QYo1H-A<s}{\r'
        var_1 = module_0.mix_columns(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'G&OoX-\n$'
        var_0 = module_0.aes_decrypt(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'password'
        int_0 = 18
        var_0 = module_0.aes_decrypt_text(str_0, str_0, int_0)
        int_1 = None
        list_0 = None
        var_1 = module_0.aes_cbc_encrypt(int_1, list_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n>$dM\\e0tf,k[V4dl?#O'
        var_0 = module_0.shift_rows_inv(str_0)
        bool_0 = True
        var_1 = module_0.key_expansion(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -46
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0, int_0]
        str_0 = 'k"Q<XY'
        var_0 = module_0.aes_cbc_encrypt(str_0, list_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'MGaLy\n3I\\-rF2ki`'
        str_1 = 'z={x-T5}Cn1iolix'
        int_0 = 32
        var_0 = module_0.aes_decrypt_text(str_0, str_1, int_0)
        tuple_0 = ()
        float_0 = -2716.9928379732514
        str_2 = 'P*}xO{y`J&;,Sz)^'
        tuple_1 = (tuple_0, float_0, str_2)
        var_1 = module_0.aes_ctr_decrypt(str_1, tuple_1, float_0)
    except BaseException:
        pass