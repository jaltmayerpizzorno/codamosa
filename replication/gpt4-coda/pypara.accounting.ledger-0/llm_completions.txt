

# Generated at 2024-03-18 06:58:43.891180
```python
    # Given a set of initial balances and journal entries
    initial_balances = {
        Account("Cash"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00"))),
        Account("Revenue"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("0.00"))),
    }
    journal_entries = [
        JournalEntry(
            datetime.date(2023, 1, 2),
            "Service Income",
            [
                Posting(Account("Cash"), Amount(Decimal("500.00")), Direction.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("500.00")), Direction.CREDIT),
            ],
        ),
        JournalEntry(
            datetime.date(2023, 1, 3),
            "Expense Payment",
            [
                Posting(Account("Cash"), Amount(Decimal("200.00")), Direction.CREDIT),
                Posting(Account("Expense"), Amount(Decimal("

# Generated at 2024-03-18 06:58:50.628919
```python
    # Given a set of initial balances and journal entries
    initial_balances = {
        Account("Cash"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00"))),
        Account("Revenue"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("0.00"))),
    }
    journal_entries = [
        JournalEntry(
            date=datetime.date(2023, 1, 2),
            description="Service Income",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("500.00")), Direction.CREDIT),
                Posting(Account("Revenue"), Amount(Decimal("500.00")), Direction.DEBIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2023, 1, 3),
            description="Expense Payment",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("200.00")), Direction.DEBIT),
                Posting(Account

# Generated at 2024-03-18 06:58:58.941962
```python
    # Given a set of initial balances and journal entries
    initial_balances = {
        Account("Cash"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("10000.00"))),
        Account("Revenue"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("0.00"))),
    }
    journal_entries = [
        JournalEntry(
            datetime.date(2023, 1, 2),
            "Service Income",
            [
                Posting(Account("Cash"), Amount(Decimal("500.00")), Posting.Direction.CREDIT),
                Posting(Account("Revenue"), Amount(Decimal("500.00")), Posting.Direction.DEBIT),
            ],
        ),
        JournalEntry(
            datetime.date(2023, 1, 3),
            "Expense Payment",
            [
                Posting(Account("Cash"), Amount(Decimal("200.00")), Posting.Direction.DEBIT),
                Posting(Account("Expense"),

# Generated at 2024-03-18 06:59:06.695565
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00")))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(journal_entry, account, Amount(Decimal("500.00")), True)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting
    assert ledger_entry.balance == Quantity(Decimal("1500.00"))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == Amount(Decimal("500.00"))
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == Amount(Decimal("500.00"))


# Generated at 2024-03-18 06:59:08.029465
```python
from unittest.mock import Mock


# Generated at 2024-03-18 06:59:08.758163
```python
from unittest.mock import Mock
import unittest


# Generated at 2024-03-18 06:59:09.670320
```python
from unittest import TestCase
from unittest.mock import Mock


# Generated at 2024-03-18 06:59:16.367105
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal('1000')))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(journal_entry, account, Amount(Decimal('500')), True)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting
    assert ledger_entry.balance == Quantity(Decimal('1500'))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == Amount(Decimal('500'))
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == Amount(Decimal('500'))
    assert ledger_entry.credit is None
    assert

# Generated at 2024-03-18 06:59:22.991465
    # Mock implementations for the protocol functions
    def mock_read_initial_balances(period: DateRange) -> InitialBalances:
        return {
            Account("Cash"): Balance(period.since, Quantity(Decimal("10000"))),
            Account("Inventory"): Balance(period.since, Quantity(Decimal("5000"))),
        }

    def mock_read_journal_entries(period: DateRange) -> Iterable[JournalEntry]:
        return [
            JournalEntry(
                date=datetime.date(2023, 1, 10),
                description="Sale",
                postings=[
                    Posting(Account("Cash"), Amount(Decimal("1500")), direction=Posting.Direction.DEBIT),
                    Posting(Account("Revenue"), Amount(Decimal("1500")), direction=Posting.Direction.CREDIT),
                ],
            ),
            JournalEntry(
                date=datetime.date(2023, 1, 15),
                description="Purchase",
                postings=[
                    Posting(Account("Inventory"), Amount(Decimal("2500")), direction=Posting

# Generated at 2024-03-18 06:59:34.440134
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00")))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    posting_amount = Amount(Decimal("200.00"))
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(journal_entry, account, posting_amount, True)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger is ledger
    assert ledger_entry.posting is posting
    assert ledger_entry.balance == Quantity(Decimal("1200.00"))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == posting_amount
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == posting_amount
    assert ledger

# Generated at 2024-03-18 06:59:51.030654
    # Mock dependencies
    mock_period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))
    mock_initial_balances = {
        Account("Cash"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("10000"))),
        Account("Revenue"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("5000"))),
    }
    mock_journal_entries = [
        JournalEntry(
            date=datetime.date(2023, 1, 10),
            description="Service Income",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("2000")), Posting.Direction.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("2000")), Posting.Direction.CREDIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2023, 2, 15),
            description="Rent Expense",
            postings=[
                Posting(Account

# Generated at 2024-03-18 06:59:51.793085
```python
from unittest.mock import Mock


# Generated at 2024-03-18 06:59:58.693605
    account = Account(name="Cash", type="Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal('1000')))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    journal_entry = JournalEntry(
        date=posting_date,
        description="Service Revenue",
        postings=[
            Posting(account=Account(name="Service Revenue", type="Revenue"), amount=Amount(Decimal('500')), direction=Posting.Direction.CREDIT),
            Posting(account=account, amount=Amount(Decimal('500')), direction=Posting.Direction.DEBIT),
        ]
    )
    posting = journal_entry.postings[1]  # Select the posting related to the "Cash" account

    # Add the posting to the ledger
    ledger_entry = ledger.add(posting)

    # Assertions
    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting

# Generated at 2024-03-18 07:00:09.951946
```python
    # Mock implementation of ReadInitialBalances
    class MockReadInitialBalances(ReadInitialBalances):
        def __call__(self, period: DateRange) -> InitialBalances:
            return {
                Account("Cash"): Balance(period.since, Quantity(Decimal("10000.00"))),
                Account("Inventory"): Balance(period.since, Quantity(Decimal("5000.00"))),
            }

    # Define a date range for the test
    test_period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))

    # Instantiate the mock implementation
    mock_read_initial_balances = MockReadInitialBalances()

    # Call the __call__ method and get the result
    result = mock_read_initial_balances(test_period)

    # Expected result
    expected = {
        Account("Cash"): Balance(datetime.date(2023, 1, 1), Quantity

# Generated at 2024-03-18 07:00:17.256275
    # Given
    period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))
    initial_balances = {
        Account("Cash"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("10000.00"))),
        Account("Revenue"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("0.00"))),
    }
    journal_entries = [
        JournalEntry(
            date=datetime.date(2023, 1, 10),
            description="Service Income",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("1500.00")), Posting.Direction.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("1500.00")), Posting.Direction.CREDIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2023, 2, 15),
            description="Service Income",
            postings=[


# Generated at 2024-03-18 07:00:18.172255
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:00:25.806195
    account = Account(name="Cash", type="Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal('1000')))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    journal_entry = JournalEntry(
        date=posting_date,
        description="Service Revenue",
        postings=[
            Posting(account=account, amount=Amount(Decimal('500')), direction=Posting.Direction.DEBIT),
            Posting(account=Account(name="Revenue", type="Income"), amount=Amount(Decimal('500')), direction=Posting.Direction.CREDIT),
        ]
    )
    posting = journal_entry.postings[0]

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger is ledger
    assert ledger_entry.posting is posting
    assert ledger_entry.balance == Quantity(Decimal('1500'))
    assert ledger_entry.date == posting_date
    assert ledger_entry

# Generated at 2024-03-18 07:00:26.555786
```python
from unittest.mock import Mock
import pytest


# Generated at 2024-03-18 07:00:35.018801
```python
    # Given a set of initial balances and journal entries
    initial_balances = {
        Account("Cash"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("10000.00"))),
        Account("Revenue"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("0.00"))),
    }
    journal_entries = [
        JournalEntry(
            date=datetime.date(2023, 1, 2),
            description="Service Income",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("500.00")), PostingDirection.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("500.00")), PostingDirection.CREDIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2023, 1, 3),
            description="Rent Expense",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("700.00")), PostingDirection.CREDIT),
               

# Generated at 2024-03-18 07:00:40.785284
    account = Account(name="Cash", type="Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal('1000')))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    journal_entry = JournalEntry(
        date=posting_date,
        description="Service Revenue",
        postings=[
            Posting(account=Account(name="Service Revenue", type="Revenue"), amount=Amount(Decimal('500')), direction=Posting.Direction.CREDIT),
            Posting(account=account, amount=Amount(Decimal('500')), direction=Posting.Direction.DEBIT),
        ]
    )
    posting = journal_entry.postings[1]  # Select the posting related to the "Cash" account

    # Add the posting to the ledger
    ledger_entry = ledger.add(posting)

    # Assertions
    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting

# Generated at 2024-03-18 07:00:52.486125
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:00:53.534623
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:00:59.473252
    # Mock dependencies
    mock_period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))
    mock_initial_balances = {
        Account("Cash"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("10000.00"))),
        Account("Revenue"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("5000.00"))),
    }
    mock_journal_entries = [
        JournalEntry(
            date=datetime.date(2023, 1, 10),
            description="Service Income",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("2000.00")), Posting.Direction.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("2000.00")), Posting.Direction.CREDIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2023, 2, 15),
            description="Rent

# Generated at 2024-03-18 07:01:00.778050
```python
from unittest.mock import Mock
from datetime import date


# Generated at 2024-03-18 07:01:08.223465
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal('1000')))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    posting_amount = Amount(Decimal('200'))
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(account, posting_date, posting_amount, True, journal_entry)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting
    assert ledger_entry.balance == Quantity(Decimal('1200'))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == posting_amount
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == posting_amount
    assert ledger_entry.credit is None

# Generated at 2024-03-18 07:01:16.922607
    # Mock implementations for the protocol functions
    def mock_read_initial_balances(period: DateRange) -> InitialBalances:
        return {
            Account("Cash"): Balance(period.since, Quantity(Decimal(10000))),
            Account("Revenue"): Balance(period.since, Quantity(Decimal(0))),
        }

    def mock_read_journal_entries(period: DateRange) -> Iterable[JournalEntry]:
        return [
            JournalEntry(
                date=period.since,
                description="Opening Balance",
                postings=[
                    Posting(Account("Cash"), Amount(Decimal(10000)), is_debit=True),
                    Posting(Account("Equity"), Amount(Decimal(10000)), is_debit=False),
                ],
            ),
            JournalEntry(
                date=period.since + datetime.timedelta(days=1),
                description="Service Revenue",
                postings=[
                    Posting(Account("Cash"), Amount(Decimal(2000)), is_debit=False),
                    Posting(Account("Revenue"), Amount(Decimal(200

# Generated at 2024-03-18 07:01:18.389922
```python
from unittest.mock import Mock
import pytest


# Generated at 2024-03-18 07:01:26.031497
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00")))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(journal_entry, account, Amount(Decimal("500.00")), True)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting
    assert ledger_entry.balance == Quantity(Decimal("1500.00"))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == Amount(Decimal("500.00"))
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == Amount(Decimal("500.00"))


# Generated at 2024-03-18 07:01:34.252683
    # Mock implementations for the protocol functions
    def mock_read_initial_balances(period: DateRange) -> InitialBalances:
        return {
            Account("Cash"): Balance(period.since, Quantity(Decimal("10000"))),
            Account("Revenue"): Balance(period.since, Quantity(Decimal("5000"))),
        }

    def mock_read_journal_entries(period: DateRange) -> Iterable[JournalEntry]:
        return [
            JournalEntry(
                date=period.since,
                description="Sale",
                postings=[
                    Posting(Account("Cash"), Amount(Decimal("1000")), is_debit=True),
                    Posting(Account("Revenue"), Amount(Decimal("1000")), is_debit=False),
                ],
            ),
            JournalEntry(
                date=period.since + datetime.timedelta(days=1),
                description="Expense",
                postings=[
                    Posting(Account("Expense"), Amount(Decimal("500")), is_debit=True),
                    Posting(Account("Cash"), Amount(Decimal("500")),

# Generated at 2024-03-18 07:01:41.792916
```python
    from datetime import date
    from decimal import Decimal
    from unittest import TestCase

    class TestBuildGeneralLedger(TestCase):
        def test_empty_journal_and_initial_balances(self):
            # Given an empty journal and no initial balances
            period = DateRange(date(2023, 1, 1), date(2023, 12, 31))
            journal = []
            initial_balances = {}

            # When building the general ledger
            ledger = build_general_ledger(period, journal, initial_balances)

            # Then the ledger should be empty
            self.assertEqual(ledger.period, period)
            self.assertEqual(len(ledger.ledgers), 0)

        def test_journal_with_entries_and_initial_balances(self):
            # Given a journal with entries and initial balances
            period = DateRange(date(2023, 1, 1), date(2023, 12, 31))
            account1 = Account('Cash

# Generated at 2024-03-18 07:02:21.146568
```python
from unittest.mock import Mock
import unittest


# Generated at 2024-03-18 07:02:31.498584
```python
    # Mock implementation of ReadInitialBalances
    class MockReadInitialBalances(ReadInitialBalances):
        def __call__(self, period: DateRange) -> InitialBalances:
            return {
                Account("Cash"): Balance(period.since, Quantity(Decimal("10000.00"))),
                Account("Inventory"): Balance(period.since, Quantity(Decimal("5000.00"))),
            }

    # Define a date range for the test
    test_period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))

    # Instantiate the mock and call the __call__ method
    mock_read_initial_balances = MockReadInitialBalances()
    initial_balances = mock_read_initial_balances(test_period)

    # Assertions to check if the returned initial balances are correct
    assert isinstance(initial_balances, dict), "The result should be a dictionary."
    assert len

# Generated at 2024-03-18 07:02:32.275985
```python
from unittest.mock import Mock
import pytest


# Generated at 2024-03-18 07:02:33.278833
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:02:39.906498
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00")))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(journal_entry, account, Amount(Decimal("500.00")), True)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting
    assert ledger_entry.balance == Quantity(Decimal("1500.00"))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == Amount(Decimal("500.00"))
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == Amount(Decimal("500.00"))


# Generated at 2024-03-18 07:02:46.240333
    # Mock dependencies
    mock_period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))
    mock_initial_balances = {
        Account("Cash"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("10000"))),
        Account("Revenue"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("0"))),
    }
    mock_journal_entries = [
        JournalEntry(
            date=datetime.date(2023, 1, 10),
            description="Service Revenue",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("5000")), Posting.Direction.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("5000")), Posting.Direction.CREDIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2023, 2, 15),
            description="Purchase Supplies",
            postings=[
                Posting(Account("

# Generated at 2024-03-18 07:02:53.523553
    # Mock implementations for the protocol functions
    def mock_read_initial_balances(period: DateRange) -> InitialBalances:
        return {
            Account("Cash"): Balance(period.since, Quantity(Decimal("10000"))),
            Account("Inventory"): Balance(period.since, Quantity(Decimal("5000"))),
        }

    def mock_read_journal_entries(period: DateRange) -> Iterable[JournalEntry]:
        return [
            JournalEntry(
                date=datetime.date(2023, 1, 10),
                description="Sale",
                postings=[
                    Posting(Account("Cash"), Amount(Decimal("1500")), "credit"),
                    Posting(Account("Revenue"), Amount(Decimal("1500")), "debit"),
                ],
            ),
            JournalEntry(
                date=datetime.date(2023, 1, 15),
                description="Purchase",
                postings=[
                    Posting(Account("Inventory"), Amount(Decimal("2500")), "debit"),
                    Posting(Account("Cash"), Amount(Decimal

# Generated at 2024-03-18 07:02:54.292734
```python
from unittest.mock import Mock
import pytest


# Generated at 2024-03-18 07:03:02.014558
    # Mock dependencies
    mock_initial_balances = {
        Account("Cash"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("10000"))),
        Account("Revenue"): Balance(datetime.date(2023, 1, 1), Quantity(Decimal("5000"))),
    }
    mock_journal_entries = [
        JournalEntry(
            date=datetime.date(2023, 1, 2),
            description="Service Income",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("2000")), Posting.Direction.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("2000")), Posting.Direction.CREDIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2023, 1, 3),
            description="Rent Expense",
            postings=[
                Posting(Account("Expense"), Amount(Decimal("1000")), Posting.Direction.DEBIT),
                Posting(Account("Cash"), Amount(Decimal("1000")), Posting

# Generated at 2024-03-18 07:03:10.101568
```python
    from unittest.mock import Mock

    # Mock the DateRange, JournalEntry, Posting, and Account
    mock_period = DateRange(datetime.date(2021, 1, 1), datetime.date(2021, 12, 31))
    mock_account = Account("Cash")
    mock_posting = Posting(mock_account, datetime.date(2021, 6, 15), Amount(Decimal(100)), "debit")
    mock_journal_entry = JournalEntry("Sale", datetime.date(2021, 6, 15), [mock_posting])
    mock_initial_balances = {mock_account: Balance(datetime.date(2021, 1, 1), Quantity(Decimal(1000)))}

    # Call the function with the mocks
    general_ledger = build_general_ledger(mock_period, [mock_journal_entry], mock_initial_balances)

    # Assertions to check if the general ledger is built correctly
    assert isinstance(general

# Generated at 2024-03-18 07:03:49.857624
    # Mock implementations for the protocol functions
    def mock_read_initial_balances(period: DateRange) -> InitialBalances:
        return {
            Account("Cash"): Balance(period.since, Quantity(Decimal("10000"))),
            Account("Revenue"): Balance(period.since, Quantity(Decimal("5000"))),
        }

    def mock_read_journal_entries(period: DateRange) -> Iterable[JournalEntry]:
        return [
            JournalEntry(
                date=period.since,
                description="Sale",
                postings=[
                    Posting(Account("Cash"), Amount(Decimal("1000")), is_debit=True),
                    Posting(Account("Revenue"), Amount(Decimal("1000")), is_debit=False),
                ],
            ),
            JournalEntry(
                date=period.since + datetime.timedelta(days=1),
                description="Expense",
                postings=[
                    Posting(Account("Expense"), Amount(Decimal("500")), is_debit=True),
                    Posting(Account("Cash"), Amount(Decimal("500")),

# Generated at 2024-03-18 07:04:00.804187
    account = Account(name="Cash", type="Asset")
    initial_balance = Balance(date=datetime.date(2023, 1, 1), value=Quantity(Decimal('1000.00')))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    posting_amount = Amount(Decimal('200.00'))
    journal_entry = JournalEntry(date=posting_date, description="Deposit", postings=[])
    posting = Posting(account=account, amount=posting_amount, direction=1, journal=journal_entry)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting
    assert ledger_entry.balance == Quantity(Decimal('1200.00'))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == posting_amount
    assert ledger_entry.is_debit
    assert not ledger_entry

# Generated at 2024-03-18 07:04:02.130121
```python
import unittest
from unittest.mock import Mock


# Generated at 2024-03-18 07:04:03.235758
```python
import unittest
from unittest.mock import Mock


# Generated at 2024-03-18 07:04:08.527896
    # Mock dependencies
    mock_period = DateRange(datetime.date(2021, 1, 1), datetime.date(2021, 12, 31))
    mock_initial_balances = {
        Account("Cash"): Balance(datetime.date(2020, 12, 31), Quantity(Decimal("10000"))),
        Account("Revenue"): Balance(datetime.date(2020, 12, 31), Quantity(Decimal("0"))),
    }
    mock_journal_entries = [
        JournalEntry(
            date=datetime.date(2021, 6, 1),
            description="Service Revenue",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("5000")), Posting.Direction.CREDIT),
                Posting(Account("Revenue"), Amount(Decimal("5000")), Posting.Direction.DEBIT),
            ],
        ),
    ]

    # Mock functions
    def mock_read_initial_balances(period: DateRange) -> InitialBalances:
        return mock_initial_balances



# Generated at 2024-03-18 07:04:09.532541
```python
import unittest
from unittest.mock import Mock


# Generated at 2024-03-18 07:04:10.208828
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:04:11.020203
```python
from unittest.mock import Mock
from datetime import date


# Generated at 2024-03-18 07:04:11.878748
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:04:17.709639
```python
    # Mock dependencies
    mock_read_initial_balances = MagicMock()
    mock_read_journal_entries = MagicMock()
    mock_period = DateRange(datetime.date(2021, 1, 1), datetime.date(2021, 12, 31))
    mock_initial_balances = {Account('Cash'): Balance(mock_period.since, Quantity(Decimal(10000)))}
    mock_journal_entries = [
        JournalEntry(
            date=datetime.date(2021, 6, 1),
            description="Service Revenue",
            postings=[
                Posting(Account('Cash'), Amount(Decimal(5000)), Direction.CREDIT),
                Posting(Account('Revenue'), Amount(Decimal(5000)), Direction.DEBIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2021, 7, 1),
            description="Rent Expense",
            postings=[
                Posting(Account('Rent'), Amount(Decimal(2000)), Direction.CREDIT),
                Posting(Account('

# Generated at 2024-03-18 07:05:18.384182
```python
import unittest
from unittest.mock import Mock


# Generated at 2024-03-18 07:05:19.286264
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:05:20.630070
```python
import unittest
from unittest.mock import Mock


# Generated at 2024-03-18 07:05:21.360541
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:05:29.311673
    # Given
    period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))
    initial_balances = {
        Account("Cash"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("10000.00"))),
        Account("Revenue"): Balance(datetime.date(2022, 12, 31), Quantity(Decimal("0.00"))),
    }
    journal_entries = [
        JournalEntry(
            date=datetime.date(2023, 1, 10),
            description="Service Income",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("1500.00")), Posting.Direction.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("1500.00")), Posting.Direction.CREDIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2023, 2, 15),
            description="Service Expense",
            postings=[


# Generated at 2024-03-18 07:05:30.151583
```python
from unittest.mock import Mock
import pytest


# Generated at 2024-03-18 07:05:36.105437
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00")))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    posting_amount = Amount(Decimal("200.00"))
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(journal_entry, account, posting_amount, True)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting
    assert ledger_entry.balance == Quantity(Decimal("1200.00"))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == posting_amount
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == posting_amount
    assert ledger

# Generated at 2024-03-18 07:05:37.585423
```python
import unittest
from unittest.mock import Mock


# Generated at 2024-03-18 07:05:51.961994
    # Mocking the ReadInitialBalances protocol implementation
    class MockReadInitialBalances:
        def __call__(self, period: DateRange) -> InitialBalances:
            return {
                Account("Cash"): Balance(period.since, Quantity(Decimal("10000.00"))),
                Account("Inventory"): Balance(period.since, Quantity(Decimal("5000.00"))),
            }

    # Mocking the DateRange for the test
    mock_period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))

    # Instantiate the mock and call the __call__ method
    mock_read_initial_balances = MockReadInitialBalances()
    initial_balances = mock_read_initial_balances(mock_period)

    # Assertions to check if the returned initial balances are correct
    assert isinstance(initial_balances, dict), "The result should be a dictionary."
    assert len(initial_balances) ==

# Generated at 2024-03-18 07:05:52.708111
```python
from unittest.mock import Mock


# Generated at 2024-03-18 07:07:54.643271
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00")))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    posting_amount = Amount(Decimal("200.00"))
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(journal_entry, account, posting_amount, True)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger == ledger
    assert ledger_entry.posting == posting
    assert ledger_entry.balance == Quantity(Decimal("1200.00"))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == posting_amount
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == posting_amount
    assert ledger

# Generated at 2024-03-18 07:07:56.023128
```python
from unittest.mock import Mock
import pytest


# Generated at 2024-03-18 07:07:57.232059
```python
import unittest
from unittest.mock import Mock


# Generated at 2024-03-18 07:08:05.073842
    account = Account("Cash", "Asset")
    initial_balance = Balance(datetime.date(2023, 1, 1), Quantity(Decimal("1000.00")))
    ledger = Ledger(account, initial_balance)

    posting_date = datetime.date(2023, 1, 2)
    posting_amount = Amount(Decimal("200.00"))
    journal_entry = JournalEntry(posting_date, "Deposit", [])
    posting = Posting(journal_entry, account, posting_amount, True)

    ledger_entry = ledger.add(posting)

    assert ledger_entry.ledger is ledger
    assert ledger_entry.posting is posting
    assert ledger_entry.balance == Quantity(Decimal("1200.00"))
    assert ledger_entry.date == posting_date
    assert ledger_entry.description == "Deposit"
    assert ledger_entry.amount == posting_amount
    assert ledger_entry.is_debit
    assert not ledger_entry.is_credit
    assert ledger_entry.debit == posting_amount
    assert ledger

# Generated at 2024-03-18 07:08:15.707955
    # Mock dependencies
    mock_period = DateRange(datetime.date(2021, 1, 1), datetime.date(2021, 12, 31))
    mock_initial_balances = {
        Account("Cash"): Balance(datetime.date(2020, 12, 31), Quantity(Decimal("10000"))),
        Account("Revenue"): Balance(datetime.date(2020, 12, 31), Quantity(Decimal("5000"))),
    }
    mock_journal_entries = [
        JournalEntry(
            date=datetime.date(2021, 1, 10),
            description="Service Income",
            postings=[
                Posting(Account("Cash"), Amount(Decimal("2000")), Posting.Direction.DEBIT),
                Posting(Account("Revenue"), Amount(Decimal("2000")), Posting.Direction.CREDIT),
            ],
        ),
        JournalEntry(
            date=datetime.date(2021, 2, 15),
            description="Rent Expense",
            postings=[
                Posting(Account

# Generated at 2024-03-18 07:08:23.156350
```python
    from datetime import date
    from decimal import Decimal
    from unittest import TestCase

    class TestBuildGeneralLedger(TestCase):
        def test_empty_journal_and_initial_balances(self):
            period = DateRange(date(2021, 1, 1), date(2021, 12, 31))
            journal = []
            initial = {}
            ledger = build_general_ledger(period, journal, initial)
            self.assertIsInstance(ledger, GeneralLedger)
            self.assertEqual(ledger.period, period)
            self.assertEqual(len(ledger.ledgers), 0)

        def test_journal_with_entries_and_no_initial_balances(self):
            period = DateRange(date(2021, 1, 1), date(2021, 12, 31))
            account = Account('Cash')
            journal_entry = JournalEntry(
                date=date(2021, 6, 1),
                description='Sale',
                postings=[
                    Posting(account,

# Generated at 2024-03-18 07:08:29.100015
```python
    # Mock implementation of ReadInitialBalances
    class MockReadInitialBalances(ReadInitialBalances):
        def __call__(self, period: DateRange) -> InitialBalances:
            return {
                Account("Cash"): Balance(period.since, Quantity(Decimal("10000.00"))),
                Account("Inventory"): Balance(period.since, Quantity(Decimal("5000.00"))),
            }

    # Create a DateRange for testing
    test_period = DateRange(datetime.date(2023, 1, 1), datetime.date(2023, 12, 31))

    # Instantiate the mock implementation
    mock_read_initial_balances = MockReadInitialBalances()

    # Call the __call__ method and get the result
    result = mock_read_initial_balances(test_period)

    # Expected result
    expected = {
        Account("Cash"): Balance(datetime.date(2023, 1, 1), Quantity(

# Generated at 2024-03-18 07:08:36.759335
    # Mock implementations for the protocol functions
    def mock_read_initial_balances(period: DateRange) -> InitialBalances:
        return {
            Account("Cash"): Balance(period.since, Quantity(Decimal(10000))),
            Account("Revenue"): Balance(period.since, Quantity(Decimal(0))),
        }

    def mock_read_journal_entries(period: DateRange) -> Iterable[JournalEntry]:
        return [
            JournalEntry(
                date=period.since,
                description="Opening Balance",
                postings=[
                    Posting(Account("Cash"), Amount(Decimal(10000)), is_debit=True),
                    Posting(Account("Equity"), Amount(Decimal(10000)), is_debit=False),
                ],
            ),
            JournalEntry(
                date=period.since + datetime.timedelta(days=1),
                description="Service Revenue",
                postings=[
                    Posting(Account("Cash"), Amount(Decimal(2000)), is_debit=False),
                    Posting(Account("Revenue"), Amount(Decimal(200