

# Generated at 2024-03-18 06:14:51.548599
```python

# Generated at 2024-03-18 06:14:52.131355
```python

# Generated at 2024-03-18 06:14:53.260871
```python

# Generated at 2024-03-18 06:14:59.056966
```python
    def test_Person_nationality(self):
        # Test without specifying gender
        nationality_any = self.person.nationality()
        self.assertIn(nationality_any, self.person._data['nationality'])

        # Test with specifying gender
        for gender in Gender:
            nationality_gender = self.person.nationality(gender=gender)
            self.assertIn(nationality_gender, self.person._data['nationality'][gender])
```

# Generated at 2024-03-18 06:15:06.095145
```python
    def test_Person_surname(self):
        # Test with no gender specified
        surname_any = self.person.surname()
        self.assertIsInstance(surname_any, str)
        self.assertTrue(surname_any in self.person._data['surnames'])

        # Test with specific gender
        for gender in Gender:
            surname_gender = self.person.surname(gender=gender)
            self.assertIsInstance(surname_gender, str)
            self.assertTrue(surname_gender in self.person._data['surnames'][gender])

        # Test with dict surnames separated by gender
        surnames_dict = {
            Gender.MALE: ['Smith', 'Johnson'],
            Gender.FEMALE: ['Williams', 'Brown']
        }
        self.person._data['surnames'] = surnames_dict

        for gender in Gender:
            surname_gender_dict = self.person.surname(gender=gender)
            self.assertIsInstance(surname_gender_dict, str)
            self.assertTrue(surname_gender_dict

# Generated at 2024-03-18 06:15:06.957507
```python

# Generated at 2024-03-18 06:15:11.894380
```python
    def test_Person_nationality(self):
        # Test without specifying gender
        nationality_any = self.person.nationality()
        self.assertIn(nationality_any, self.person._data['nationality'])

        # Test with specifying gender
        for gender in Gender:
            nationality_gender = self.person.nationality(gender=gender)
            self.assertIn(nationality_gender, self.person._data['nationality'][gender])

        # Test with invalid gender type
        with self.assertRaises(NonEnumerableError):
            self.person.nationality(gender="not_a_gender")
```

# Generated at 2024-03-18 06:15:17.543665
```python
    def test_Person_nationality(self):
        # Test without gender
        nationality_any = self.person.nationality()
        self.assertIn(nationality_any, self.person._data['nationality'])

        # Test with gender
        for gender in Gender:
            nationality_gender = self.person.nationality(gender=gender)
            self.assertIn(nationality_gender, self.person._data['nationality'][gender])
```

# Generated at 2024-03-18 06:15:19.253186
```python

# Generated at 2024-03-18 06:15:23.636688
```python
    def test_Person_nationality(self):
        # Test without specifying gender
        nationality_any = self.person.nationality()
        self.assertIn(nationality_any, self.person._data['nationality'])

        # Test with specifying gender
        for gender in Gender:
            nationality_gender = self.person.nationality(gender=gender)
            self.assertIn(nationality_gender, self.person._data['nationality'][gender])

        # Test with invalid gender type
        with self.assertRaises(NonEnumerableError):
            self.person.nationality(gender="not_a_gender")
```