# Automatically generated by Pynguin.
import requests.models as module_0
import httpie.context as module_1
import httpie.output.writer as module_2
import typing as module_3
import argparse as module_4

def test_case_0():
    try:
        response_0 = module_0.Response()
        environment_0 = module_1.Environment()
        namespace_0 = None
        dict_0 = {namespace_0: namespace_0, response_0: environment_0, response_0: response_0, response_0: namespace_0}
        var_0 = module_2.write_message(response_0, environment_0, namespace_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_stream_0 = None
        i_o_0 = module_3.IO()
        bool_0 = False
        var_0 = module_2.write_stream(base_stream_0, i_o_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_stream_0 = None
        text_i_o_0 = module_3.TextIO()
        bool_0 = False
        var_0 = module_2.write_stream_with_colors_win_py3(base_stream_0, text_i_o_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        environment_0 = module_1.Environment()
        namespace_0 = module_4.Namespace()
        tuple_0 = module_2.get_stream_type_and_kwargs(environment_0, namespace_0)
    except BaseException:
        pass

def test_case_4():
    try:
        response_0 = module_0.Response()
        list_0 = None
        environment_0 = module_1.Environment(list_0)
        namespace_0 = None
        var_0 = module_2.write_message(response_0, environment_0, namespace_0)
        float_0 = -460.12
        var_1 = module_2.write_message(response_0, environment_0, namespace_0, list_0, float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = None
        bool_0 = False
        str_0 = 'default'
        var_1 = {}
        namespace_0 = module_4.Namespace()
        environment_0 = module_1.Environment()
        prepared_request_0 = module_0.PreparedRequest()
        str_1 = 'GET'
        str_2 = 'http://example.com'
        var_2 = prepared_request_0.prepare(str_1, str_2)
        bool_1 = True
        var_3 = module_2.build_output_stream_for_message(namespace_0, environment_0, prepared_request_0, bool_1, bool_1)
        var_4 = next(var_3)
    except BaseException:
        pass