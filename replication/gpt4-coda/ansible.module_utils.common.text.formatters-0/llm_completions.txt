

# Generated at 2024-03-18 01:11:37.910022
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048', default_unit='K') == 2097152

    # Test with units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824
    assert human_to_bytes('1T') == 1099511627776
    assert human_to_bytes('1P') == 1125899906842624
    assert human_to_bytes('1E') == 1152921504606846976
    assert human_to_bytes('1Z') == 1180591620717411303424
    assert human_to_bytes('1Y') == 1208925819614629174706176

    # Test with bits
    assert human_to

# Generated at 2024-03-18 01:11:42.632254
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024

    # Test with different units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824
    assert human_to_bytes('1T') == 1099511627776

    # Test with lowercase units
    assert human_to_bytes('1k') == 1024
    assert human_to_bytes('1m') == 1048576
    assert human_to_bytes('1g') == 1073741824
    assert human_to_bytes('1t') == 1099511627776

    # Test with decimal values
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 262144

# Generated at 2024-03-18 01:11:46.832372
```python
import pytest

@pytest.mark.parametrize("input_str, default_unit, isbits, expected", [
    ("10M", None, False, 10485760),
    ("10", "M", False, 10485760),
    ("1MB", None, False, 1048576),
    ("1Mb", None, True, 1048576),
    ("1024K", None, False, 1048576),
    ("1024", "K", False, 1048576),
    ("1G", None, False, 1073741824),
    ("1T", None, False, 1099511627776),
    ("1P", None, False, 1125899906842624),
    ("1E", None, False, 1152921504606846976),
    ("1Z", None, False, 1180591620717411303424),
    ("1Y", None,

# Generated at 2024-03-18 01:11:51.968957
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'M') == 10485760
    assert human_to_bytes(10, 'G') == 10737418240

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to

# Generated at 2024-03-18 01:11:58.304297
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('1M', isbits=True) == 1048576

    # Test with default unit
    assert human_to_bytes(10, default_unit='K') == 10240
    assert

# Generated at 2024-03-18 01:12:04.344667
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'M') == 10485760
    assert human_to_bytes(10, 'G') == 10737418240

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to

# Generated at 2024-03-18 01:12:08.823591
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with default unit
    assert human_to_bytes('10', 'K') == 10240
    assert human_to_bytes('5', 'M') == 5242880

    # Test with unit in string
    assert human_to_bytes('2K') == 2048
    assert human_to_bytes('3M') == 3145728

    # Test with bits
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human_to_bytes('1Mb', isbits=True) == 1048576

    # Test with floating point
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5G') == 2684354560



# Generated at 2024-03-18 01:12:13.651710
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('5', default_unit='M') == 5242880

    # Test with bits
    assert human_to_bytes('1', isbits=True) == 1
    assert human_to_bytes('1024', isbits=True) == 1024
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human_to_bytes('1Mb', isbits=True) == 1048576

    # Test with bytes
    assert human_to_bytes('1B') == 1
    assert human_to_bytes('1KB') == 1024
    assert human_to_bytes('1

# Generated at 2024-03-18 01:12:18.166910
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['', ' ', '  

# Generated at 2024-03-18 01:12:41.438885
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024

    # Test with different units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with lowercase units
    assert human_to_bytes('1k') == 1024
    assert human_to_bytes('1m') == 1048576
    assert human_to_bytes('1g') == 1073741824

    # Test with float values
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240

    # Test with bits
   

# Generated at 2024-03-18 01:12:52.822665
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:12:58.839746
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:13:07.879686
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['', ' ']) ==

# Generated at 2024-03-18 01:13:14.211298
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['True', True]) ==

# Generated at 2024-03-18 01:13:21.563666
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048', default_unit='K') == 2097152

    # Test with unit
    assert human_to_bytes('2K') == 2048
    assert human_to_bytes('2M') == 2097152
    assert human_to_bytes('1G') == 1073741824

    # Test with bits
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human_to_bytes('1Mb', isbits=True) == 1048576

    # Test with floating point
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with invalid input
    try:
        human_to_bytes('2X')
        assert False

# Generated at 2024-03-18 01:13:26.761856
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:13:34.019475
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:13:41.978346
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048', default_unit='K') == 2097152

    # Test with units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824
    assert human_to_bytes('1T') == 1099511627776
    assert human_to_bytes('1P') == 1125899906842624
    assert human_to_bytes('1E') == 1152921504606846976
    assert human_to_bytes('1Z') == 1180591620717411303424
    assert human_to_bytes('1Y') == 1208925819614629174706176

    # Test with bits
    assert human_to

# Generated at 2024-03-18 01:13:47.696261
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:13:54.704796
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'A', None, 'b']) == [None, 'a', None, 'b']
```

# Generated at 2024-03-18 01:14:04.198511
```python
import pytest

@pytest.mark.parametrize("input_str, default_unit, isbits, expected", [
    ("42", None, False, 42),
    ("42B", None, False, 42),
    ("42b", None, True, 42),
    ("1K", None, False, 1024),
    ("1KB", None, False, 1024),
    ("1Kb", None, True, 1024),
    ("1M", None, False, 1048576),
    ("1MB", None, False, 1048576),
    ("1Mb", None, True, 1048576),
    ("1G", None, False, 1073741824),
    ("1GB", None, False, 1073741824),
    ("1Gb", None, True, 1073741824),
    ("1T", None, False, 1099511627776),


# Generated at 2024-03-18 01:14:16.879762
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'M') == 10485760
    assert human_to_bytes(10, 'G') == 10737418240

    # Test with bits
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human

# Generated at 2024-03-18 01:14:22.854788
```python
    # Test with bytes
    assert bytes_to_human(0) == '0.00 Bytes'
    assert bytes_to_human(1) == '1.00 Bytes'
    assert bytes_to_human(1024) == '1.00 KB'
    assert bytes_to_human(1048576) == '1.00 MB'
    assert bytes_to_human(1073741824) == '1.00 GB'
    assert bytes_to_human(1099511627776) == '1.00 TB'
    assert bytes_to_human(1125899906842624) == '1.00 PB'
    assert bytes_to_human(1152921504606846976) == '1.00 EB'
    assert bytes_to_human(1180591620717411303424) == '1.00 ZB'
    assert bytes_to_human(1208925819614629174706176) == '1.00 YB'

    # Test

# Generated at 2024-03-18 01:14:28.795715
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, True, False]) == [None, True, False]
```

# Generated at 2024-03-18 01:14:36.314274
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['', ' ', '  

# Generated at 2024-03-18 01:14:42.824366
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('1M', isbits=True) == 1048576

    # Test with default unit
    assert human_to_bytes(10, default_unit='K') == 10240
    assert

# Generated at 2024-03-18 01:14:47.741139
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase(['Mixed', 'Case']) == ['mixed', 'case']
    assert lenient_lowercase(['Mixed', 123, 'Case']) == ['mixed', 123, 'case']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase([True, False]) == [True, False]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['']) == ['']
    assert lenient_lowercase([' ', '  ']) == [' ', '  ']
```

# Generated at 2024-03-18 01:14:55.569110
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048', default_unit='K') == 2097152

    # Test with units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824
    assert human_to_bytes('1T') == 1099511627776
    assert human_to_bytes('1P') == 1125899906842624
    assert human_to_bytes('1E') == 1152921504606846976
    assert human_to_bytes('1Z') == 1180591620717411303424
    assert human_to_bytes('1Y') == 1208925819614629174706176

    # Test with bits
    assert human_to

# Generated at 2024-03-18 01:15:02.843826
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048', default_unit='K') == 2097152

    # Test with units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824
    assert human_to_bytes('1T') == 1099511627776
    assert human_to_bytes('1P') == 1125899906842624
    assert human_to_bytes('1E') == 1152921504606846976
    assert human_to_bytes('1Z') == 1180591620717411303424
    assert human_to_bytes('1Y') == 1208925819614629174706176

    # Test with bits
    assert human_to

# Generated at 2024-03-18 01:15:09.108022
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:15:31.486053
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase(['A1', 'b2', 'C3']) == ['a1', 'b2', 'c3

# Generated at 2024-03-18 01:15:36.729432
```python
import pytest

@pytest.mark.parametrize("input_str, default_unit, isbits, expected", [
    ("10M", None, False, 10485760),
    ("10", "M", False, 10485760),
    ("1MB", None, False, 1048576),
    ("1Mb", None, True, 1048576),
    ("1024K", None, False, 1048576),
    ("1024", "K", False, 1048576),
    ("1G", None, False, 1073741824),
    ("1.5K", None, False, 1536),
    ("5.5B", None, False, 5),
    ("5.5", "B", False, 5),
    ("1.5M", None, True, 1572864),
    ("1.5Mb", None, True, 1572864),
    ("

# Generated at 2024-03-18 01:15:43.144097
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:15:47.787449
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:15:53.762394
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:15:59.878925
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048', default_unit='B') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with bits
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human_to_bytes('1Mb', isbits=True) == 1048576

    # Test with float
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5Gb') == 2684354560

    # Test with invalid input
    try:
        human_to_bytes('1X')
        assert False,

# Generated at 2024-03-18 01:16:06.621731
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['', ' ', ' 

# Generated at 2024-03-18 01:16:11.773107
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase(['Mixed', 'Case']) == ['mixed', 'case']
    assert lenient_lowercase(['Mixed', 123, 'Case']) == ['mixed', 123, 'case']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase([True, False]) == [True, False]
    assert lenient_lowercase(['']) == ['']
    assert lenient_lowercase([123]) == [123]
    assert lenient_lowercase([]) == []
```

# Generated at 2024-03-18 01:16:18.558258
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:16:26.070372
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:16:41.721335
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('1M', isbits=True) == 1048576

    # Test with default unit
    assert human_to_bytes(10, default_unit='K') == 10240
    assert

# Generated at 2024-03-18 01:16:50.052463
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:16:54.908284
```python
import pytest

@pytest.mark.parametrize("input_str, default_unit, isbits, expected", [
    ("10M", None, False, 10485760),
    ("10", 'M', False, 10485760),
    ("1MB", None, False, 1048576),
    ("1Mb", None, True, 1048576),
    ("1024", 'K', False, 1048576),
    ("1.5K", None, False, 1536),
    ("5.5B", None, False, 5),
    ("5.5b", None, True, 5),
    ("1G", None, False, 1073741824),
    ("1T", None, False, 1099511627776),
    ("1P", None, False, 1125899906842624),
    ("1E", None, False, 115292150460684697

# Generated at 2024-03-18 01:17:01.284537
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'M') == 10485760
    assert human_to_bytes(10, 'G') == 10737418240

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to

# Generated at 2024-03-18 01:17:09.668874
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048', default_unit='K') == 2097152

    # Test with unit
    assert human_to_bytes('2K') == 2048
    assert human_to_bytes('2M') == 2097152
    assert human_to_bytes('1G') == 1073741824

    # Test with bits
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human_to_bytes('1Mb', isbits=True) == 1048576

    # Test with floating point
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with invalid input
    try:
        human_to_bytes('2X')
        assert False

# Generated at 2024-03-18 01:17:16.519663
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human_to_bytes

# Generated at 2024-03-18 01:17:23.601148
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['', ' ']) ==

# Generated at 2024-03-18 01:17:29.323502
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:17:34.961564
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:17:41.372223
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase(['Mixed', 'Case']) == ['mixed', 'case']
    assert lenient_lowercase(['Mixed', 123, 'Case']) == ['mixed', 123, 'case']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase([True, False]) == [True, False]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['']) == ['']
    assert lenient_lowercase([' ', '  ']) == [' ', '  ']
```

# Generated at 2024-03-18 01:18:09.477270
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024

    # Test with different units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824
    assert human_to_bytes('1T') == 1099511627776

    # Test with float values
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human

# Generated at 2024-03-18 01:18:15.368200
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'A', None, 'b']) == [None, 'a', None, 'b']
```

# Generated at 2024-03-18 01:18:22.641495
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['', ' ', ' 

# Generated at 2024-03-18 01:18:27.207306
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:18:32.212378
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'M') == 10485760
    assert human_to_bytes(10, 'G') == 10737418240

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to

# Generated at 2024-03-18 01:18:37.457446
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase(['Mixed', 'Case']) == ['mixed', 'case']
    assert lenient_lowercase(['Mixed', 123, 'Case']) == ['mixed', 123, 'case']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase([True, 'True']) == [True, 'true']
    assert lenient_lowercase([False, 'False']) == [False, 'false']
    assert lenient_lowercase(['', ' ']) == ['', ' ']
    assert lenient_lowercase([[], 'List']) == [[], 'list']
    assert lenient_lowercase([{}, 'Dict']) == [{}, 'dict']
```

# Generated at 2024-03-18 01:18:42.782215
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024

    # Test with different units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824
    assert human_to_bytes('1T') == 1099511627776

    # Test with lowercase units
    assert human_to_bytes('1k') == 1024
    assert human_to_bytes('1m') == 1048576
    assert human_to_bytes('1g') == 1073741824
    assert human_to_bytes('1t') == 1099511627776

    # Test with float values
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 262144

# Generated at 2024-03-18 01:18:50.259313
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'M') == 10485760
    assert human_to_bytes(10, 'G') == 10737418240

    # Test with bits
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human

# Generated at 2024-03-18 01:18:55.328035
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:19:01.967019
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['', ' ']) ==

# Generated at 2024-03-18 01:19:33.291716
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('1M', isbits=True) == 1048576

    # Test with default unit
    assert human_to_bytes(10, default_unit='K') == 10240
    assert

# Generated at 2024-03-18 01:19:41.031723
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048', default_unit='K') == 2097152

    # Test with unit
    assert human_to_bytes('2K') == 2048
    assert human_to_bytes('2M') == 2097152
    assert human_to_bytes('1G') == 1073741824

    # Test with bits
    assert human_to_bytes('1Kb', isbits=True) == 1024
    assert human_to_bytes('1Mb', isbits=True) == 1048576

    # Test with float
    assert human_to_bytes('1.5K') == 1536

    # Test with invalid input
    try:
        human_to_bytes('2X')
        assert False, "Should raise ValueError for invalid unit"
    except ValueError:
        pass

    try

# Generated at 2024-03-18 01:19:45.308426
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'None']) == [None, 'none']
    assert lenient_lowercase(['', ' ', ' 

# Generated at 2024-03-18 01:19:52.266295
```python
import pytest

@pytest.mark.parametrize("input_str, default_unit, isbits, expected", [
    ("10M", None, False, 10485760),
    ("10", "M", False, 10485760),
    ("1MB", None, False, 1048576),
    ("1Mb", None, True, 1048576),
    ("1024K", None, False, 1048576),
    ("1024", "K", False, 1048576),
    ("1GB", None, False, 1073741824),
    ("1Gb", None, True, 1073741824),
    ("1.5K", None, False, 1536),
    ("1.5Kb", None, True, 1536),
    ("1.5", "K", False, 1536),
    ("1.5", "Kb", True, 1536),


# Generated at 2024-03-18 01:19:57.214963
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:20:03.772201
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'A', None, 'b']) == [None, 'a', None, 'b']
```

# Generated at 2024-03-18 01:20:08.378159
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes('10', default_unit='K') == 10240
    assert human_to_bytes('10', default_unit='M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert

# Generated at 2024-03-18 01:20:13.558366
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024

    # Test with different units
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824
    assert human_to_bytes('1T') == 1099511627776
    assert human_to_bytes('1P') == 1125899906842624
    assert human_to_bytes('1E') == 1152921504606846976
    assert human_to_bytes('1Z') == 1180591620717411303424
    assert human_to_bytes('1Y') == 1208925819614629174706176

    # Test with lowercase units
    assert human_to_bytes('1k') == 1024
    assert human_to_bytes('1m

# Generated at 2024-03-18 01:20:20.986342
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'M') == 10485760
    assert human_to_bytes(10, 'G') == 10737418240

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to

# Generated at 2024-03-18 01:20:27.146965
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with default unit
    assert human_to_bytes(10, 'K') == 10240
    assert human_to_bytes(10, 'M') == 10485760

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('

# Generated at 2024-03-18 01:21:21.303217
```python
    # Test with no unit
    assert human_to_bytes('1024') == 1024
    assert human_to_bytes('2048') == 2048

    # Test with unit
    assert human_to_bytes('1K') == 1024
    assert human_to_bytes('1M') == 1048576
    assert human_to_bytes('1G') == 1073741824

    # Test with unit and decimal
    assert human_to_bytes('1.5K') == 1536
    assert human_to_bytes('2.5M') == 2621440

    # Test with bits
    assert human_to_bytes('1K', isbits=True) == 1024
    assert human_to_bytes('1M', isbits=True) == 1048576

    # Test with default unit
    assert human_to_bytes(10, default_unit='K') == 10240
    assert

# Generated at 2024-03-18 01:21:37.644579
```python
    assert lenient_lowercase(['A', 'B', 'C']) == ['a', 'b', 'c']
    assert lenient_lowercase(['a', 'b', 'c']) == ['a', 'b', 'c']
    assert lenient_lowercase([1, 2, 3]) == [1, 2, 3]
    assert lenient_lowercase(['A', 1, 'B', 2, 'C', 3]) == ['a', 1, 'b', 2, 'c', 3]
    assert lenient_lowercase([]) == []
    assert lenient_lowercase(['MixedCase', 'UPPER', 'lower']) == ['mixedcase', 'upper', 'lower']
    assert lenient_lowercase(['123', '456']) == ['123', '456']
    assert lenient_lowercase([None, 'A', None, 'b']) == [None, 'a', None, 'b']
```