# Automatically generated by Pynguin.
import tornado.netutil as module_0
import socket as module_1
import tornado.ioloop as module_2
import concurrent.futures._base as module_3
import ssl as module_4

def test_case_0():
    pass

def test_case_1():
    int_0 = 15
    list_0 = module_0.bind_sockets(int_0)

def test_case_2():
    str_0 = 'SERVER_NAME'
    socket_0 = module_0.bind_unix_socket(str_0)

def test_case_3():
    str_0 = '~iD8,[Pvq'
    bool_0 = module_0.is_valid_ip(str_0)

def test_case_4():
    resolver_0 = module_0.Resolver()
    resolver_0.close()

def test_case_5():
    dict_0 = {}
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)

def test_case_6():
    str_0 = '>:o`1f\x0b=jBi\n@O'
    int_0 = -1046
    int_1 = None
    address_family_0 = module_1.AddressFamily.AF_IRDA
    resolver_0 = module_0.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_1, address_family_0)
    socket_0 = module_0.bind_unix_socket(str_0, int_0)
    dict_0 = {}
    resolver_1 = module_0.Resolver()
    resolver_1.close()
    int_2 = 104857600
    address_family_1 = module_1.AddressFamily.AF_UNIX
    bool_0 = module_0.is_valid_ip(str_0)
    awaitable_1 = resolver_1.resolve(str_0, int_0, address_family_1)
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
    list_0 = module_0.bind_sockets(int_2)

def test_case_7():
    i_o_loop_0 = module_2.IOLoop()
    i_o_loop_0.make_current()
    executor_resolver_0 = module_0.ExecutorResolver()
    str_0 = 'G}BRIsC|bn&.'
    int_0 = 2465
    list_0 = executor_resolver_0.resolve(str_0, int_0)
    executor_resolver_1 = module_0.ExecutorResolver()
    executor_resolver_0.close()
    str_1 = None
    bool_0 = module_0.is_valid_ip(str_1)
    dict_0 = {}
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
    s_s_l_context_1 = module_0.ssl_options_to_context(dict_0)
    s_s_l_context_2 = module_0.ssl_options_to_context(dict_0)
    int_1 = 1878
    list_1 = module_0.bind_sockets(int_1)

def test_case_8():
    i_o_loop_0 = module_2.IOLoop()
    resolver_0 = module_0.Resolver()
    resolver_0.close()
    i_o_loop_0.make_current()
    str_0 = None
    int_0 = 2597
    list_0 = []
    executor_resolver_0 = module_0.ExecutorResolver(*list_0)
    list_1 = executor_resolver_0.resolve(str_0, int_0)
    executor_0 = module_3.Executor()
    executor_resolver_0.initialize(executor_0)
    str_1 = ':('
    str_2 = ',pz9w'
    int_1 = -3326
    default_executor_resolver_0 = module_0.DefaultExecutorResolver()
    list_2 = default_executor_resolver_0.resolve(str_2, int_1)
    socket_0 = module_0.bind_unix_socket(str_1)
    str_3 = None
    i_o_loop_1 = i_o_loop_0.instance()
    bool_0 = module_0.is_valid_ip(str_3)
    dict_0 = {}
    s_s_l_context_0 = module_4.SSLContext(**dict_0)
    bool_1 = module_0.is_valid_ip(str_1)
    s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
    s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_1)
    dict_1 = {}
    s_s_l_context_2 = module_0.ssl_options_to_context(dict_1)
    executor_resolver_0.close()
    int_2 = 1945
    list_3 = module_0.bind_sockets(int_2)

def test_case_9():
    i_o_loop_0 = module_2.IOLoop()
    resolver_0 = module_0.Resolver()
    resolver_0.close()
    i_o_loop_0.make_current()
    str_0 = None
    int_0 = 2597
    list_0 = []
    executor_resolver_0 = module_0.ExecutorResolver(*list_0)
    list_1 = executor_resolver_0.resolve(str_0, int_0)
    str_1 = ':('
    socket_0 = module_0.bind_unix_socket(str_1)
    int_1 = 60
    str_2 = None
    i_o_loop_1 = i_o_loop_0.instance()
    bool_0 = module_0.is_valid_ip(str_2)
    dict_0 = {}
    s_s_l_context_0 = module_4.SSLContext(**dict_0)
    bool_1 = module_0.is_valid_ip(str_1)
    s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
    s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_1)
    dict_1 = {}
    s_s_l_context_2 = module_0.ssl_options_to_context(dict_1)
    s_s_l_context_3 = module_0.ssl_options_to_context(s_s_l_context_1)
    list_2 = module_0.bind_sockets(int_1, str_0)