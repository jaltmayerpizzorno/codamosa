# Automatically generated by Pynguin.
import ansible.cli.console as module_0

def test_case_0():
    try:
        float_0 = -346.619
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.set_prompt()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_shell(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "Xl\x0b?abh\x0chWisl?F'r"
        tuple_0 = (str_0,)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        var_0 = console_c_l_i_0.do_shell(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'o'
        float_0 = -2501.92635
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.do_cd(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'vdsmd'
        bool_0 = False
        bytes_0 = None
        set_0 = {bool_0, str_0}
        tuple_0 = (set_0,)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        var_0 = console_c_l_i_0.do_cd(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'c'
        bool_0 = True
        console_c_l_i_0 = module_0.ConsoleCLI(bool_0)
        var_0 = console_c_l_i_0.do_list(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        tuple_0 = ()
        int_0 = 640
        list_0 = [int_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_forks(tuple_0)
        set_0 = {bool_0}
        var_1 = console_c_l_i_0.do_become(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'H`'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        str_1 = 'fX'
        var_0 = console_c_l_i_0.do_remote_user(str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '9};vp6\x0bU=yoj^#'
        str_1 = 'groups'
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_0.do_become_user(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        set_0 = set()
        set_1 = None
        list_0 = [str_0, set_1]
        tuple_0 = (list_0, list_0)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        var_0 = console_c_l_i_0.do_check(set_0)
        bytes_0 = b'\x8e\xb5\x17\xe2\xd5Y\x91\xa4'
        bool_0 = True
        console_c_l_i_1 = module_0.ConsoleCLI(bool_0)
        var_1 = console_c_l_i_1.post_process_args(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2989
        float_0 = 1129.38
        list_0 = [int_0, float_0, int_0]
        float_1 = -2442.4181
        int_1 = -8
        console_c_l_i_0 = module_0.ConsoleCLI(int_1)
        var_0 = console_c_l_i_0.do_timeout(float_1)
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        str_0 = 'nr\x0b\rPyX?N'
        str_1 = 'found existing local domain socket, using it!'
        var_1 = console_c_l_i_1.do_verbosity(str_1)
        tuple_0 = (console_c_l_i_1, list_0, str_0)
        console_c_l_i_2 = module_0.ConsoleCLI(tuple_0)
        int_2 = -1023
        int_3 = -1753
        console_c_l_i_3 = module_0.ConsoleCLI(int_3)
        var_2 = console_c_l_i_3.default(int_2)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        bytes_0 = b'e\x1b\x01\n\x15\xe5$Tz\x02\xb5@\x970a/'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.do_timeout(bool_0)
        var_1 = console_c_l_i_0.set_prompt()
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -383.0
        float_1 = -1593.95
        dict_0 = {float_1: float_1}
        console_c_l_i_0 = module_0.ConsoleCLI(dict_0)
        var_0 = console_c_l_i_0.emptyline()
        list_0 = [float_0]
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        var_1 = console_c_l_i_1.get_names()
        list_1 = [float_1, float_1]
        bool_0 = False
        bytes_0 = b'\xa3m!~\xd7\xb0l2x\x13\x0b0'
        set_0 = {bytes_0}
        int_0 = 589
        var_2 = console_c_l_i_1.completedefault(list_1, bool_0, set_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "jU#[p\\Q'9a"
        str_1 = 'xAn\tv<:LQYmiw?%'
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_0.module_args(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xfb@\x1a\x0f\xa9*:\xfa\x81'
        int_0 = 1089
        tuple_0 = (int_0,)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        var_0 = console_c_l_i_0.do_diff(bytes_0)
        bool_0 = True
        console_c_l_i_1 = module_0.ConsoleCLI(bool_0)
        var_1 = console_c_l_i_1.init_parser()
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'S0>j\\\r>'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        set_0 = {str_0, str_0, console_c_l_i_0, console_c_l_i_0}
        var_0 = console_c_l_i_0.do_forks(set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        tuple_0 = ()
        int_0 = 640
        list_0 = [int_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_forks(tuple_0)
        var_1 = console_c_l_i_0.emptyline()
        list_1 = [bool_0, bool_0]
        console_c_l_i_1 = module_0.ConsoleCLI(list_1)
        str_0 = "Xl\x0b?abh\x0chWisl?F'r"
        var_2 = console_c_l_i_1.do_timeout(console_c_l_i_1)
        var_3 = console_c_l_i_0.do_verbosity(bool_0)
        tuple_1 = (str_0,)
        console_c_l_i_2 = module_0.ConsoleCLI(tuple_1)
        var_4 = console_c_l_i_2.do_shell(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = None
        int_0 = -653
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.helpdefault(bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.emptyline()
        str_0 = '34WKPQQ'
        var_1 = console_c_l_i_0.do_verbosity(str_0)
        var_2 = console_c_l_i_0.do_forks(bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        float_0 = 1831.659233016803
        str_0 = 'W"\th9bH|NAW@xLQ8\r.'
        float_1 = -1371.0
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.do_forks(float_1)
        tuple_0 = (str_0,)
        dict_0 = {tuple_0: str_0}
        var_1 = console_c_l_i_0.do_verbosity(dict_0)
        bool_0 = True
        bytes_0 = b'\xd3{\\\xf2\xe0c\xeb\xa4'
        str_1 = '=v\tRwj$M'
        float_2 = 699.49
        var_2 = console_c_l_i_0.do_verbosity(float_2)
        set_0 = {str_1}
        console_c_l_i_1 = module_0.ConsoleCLI(str_0)
        var_3 = console_c_l_i_1.complete_cd(bytes_0, str_1, set_0, str_1)
        str_2 = '\n    name: yaml\n    version_added: "2.4"\n    short_description: Uses a specific YAML file as an inventory source.\n    description:\n        - "YAML-based inventory, should start with the C(all) group and contain hosts/vars/children entries."\n        - Host entries can have sub-entries defined, which will be treated as variables.\n        - Vars entries are normal group vars.\n        - "Children are \'child groups\', which can also have their own vars/hosts/children and so on."\n        - File MUST have a valid extension, defined in configuration.\n    notes:\n        - If you want to set vars for the C(all) group inside the inventory file, the C(all) group must be the first entry in the file.\n        - Whitelisted in configuration by default.\n    options:\n      yaml_extensions:\n        description: list of \'valid\' extensions for files containing YAML\n        type: list\n        default: [\'.yaml\', \'.yml\', \'.json\']\n        env:\n          - name: ANSIBLE_YAML_FILENAME_EXT\n          - name: ANSIBLE_INVENTORY_PLUGIN_EXTS\n        ini:\n          - key: yaml_valid_extensions\n            section: defaults\n          - section: inventory_plugin_yaml\n            key: yaml_valid_extensions\n\n'
        str_3 = '\n---\nmodule: rpm_key\nauthor:\n  - Hector Acosta (@hacosta) <hector.acosta@gazzang.com>\nshort_description: Adds or removes a gpg key from the rpm db\ndescription:\n  - Adds or removes (rpm --import) a gpg key to your rpm database.\nversion_added: "1.3"\noptions:\n    key:\n      description:\n        - Key that will be modified. Can be a url, a file on the managed node, or a keyid if the key\n          already exists in the database.\n      type: str\n      required: true\n    state:\n      description:\n        - If the key will be imported or removed from the rpm db.\n      type: str\n      default: present\n      choices: [ absent, present ]\n    validate_certs:\n      description:\n        - If C(no) and the C(key) is a url starting with https, SSL certificates will not be validated.\n        - This should only be used on personally controlled sites using self-signed certificates.\n      type: bool\n      default: \'yes\'\n    fingerprint:\n      description:\n        - The long-form fingerprint of the key being imported.\n        - This will be used to verify the specified key.\n      type: str\n      version_added: 2.9\nextends_documentation_fragment:\n    - action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: rhel\n'
        bool_1 = False
        dict_1 = {tuple_0: str_3, bool_1: str_2}
        float_3 = -3518.36
        console_c_l_i_2 = module_0.ConsoleCLI(float_3)
        var_4 = console_c_l_i_2.get_names()
        console_c_l_i_3 = module_0.ConsoleCLI(bool_0)
        var_5 = console_c_l_i_2.do_cd(dict_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = -874
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_verbosity(console_c_l_i_0)
        var_1 = console_c_l_i_0.do_timeout(int_0)
        dict_0 = {}
        int_1 = 1885
        console_c_l_i_1 = module_0.ConsoleCLI(int_1)
        var_2 = console_c_l_i_1.do_become_user(dict_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'vdsmd'
        bool_0 = True
        set_0 = None
        console_c_l_i_0 = module_0.ConsoleCLI(bool_0)
        var_0 = console_c_l_i_0.do_become_method(set_0)
        list_0 = [bool_0, bool_0]
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        var_1 = console_c_l_i_1.do_check(str_0)
        str_1 = "Xl\x0b?abh\x0chWisl?F'r"
        var_2 = console_c_l_i_1.do_diff(str_0)
        var_3 = console_c_l_i_1.do_timeout(console_c_l_i_1)
        var_4 = console_c_l_i_1.do_shell(str_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'G'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.run()
        tuple_0 = ()
        list_0 = []
        var_1 = console_c_l_i_0.do_diff(list_0)
        var_2 = console_c_l_i_0.list_modules()
        var_3 = console_c_l_i_0.default(str_0, tuple_0)
        var_4 = console_c_l_i_0.init_parser()
        var_5 = console_c_l_i_0.do_cd(str_0)
        set_0 = set()
        var_6 = console_c_l_i_0.do_timeout(set_0)
        bytes_0 = b'\x06'
        var_7 = console_c_l_i_0.do_timeout(bytes_0)
        int_0 = 1744
        var_8 = console_c_l_i_0.do_exit(int_0)
        str_1 = 'a9"_HCd_\'(Ja@9}X\t'
        var_9 = console_c_l_i_0.default(str_1)
        var_10 = console_c_l_i_0.do_become_user(str_0)
        var_11 = console_c_l_i_0.do_list(set_0)
        var_12 = console_c_l_i_0.do_become_user(bytes_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'G'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.run()
        var_1 = console_c_l_i_0.list_modules()
        var_2 = console_c_l_i_0.do_cd(str_0)
        set_0 = set()
        var_3 = console_c_l_i_0.do_timeout(set_0)
        bytes_0 = b'\x06'
        var_4 = console_c_l_i_0.do_timeout(bytes_0)
        str_1 = 'a9"_HCd_\'(Ja@9}X\t'
        var_5 = console_c_l_i_0.default(str_1)
        var_6 = console_c_l_i_0.do_become_user(str_0)
        var_7 = console_c_l_i_0.do_list(set_0)
        var_8 = console_c_l_i_0.run()
        var_9 = console_c_l_i_0.do_become_user(bytes_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'G'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.run()
        tuple_0 = ()
        var_1 = console_c_l_i_0.list_modules()
        var_2 = console_c_l_i_0.default(str_0, tuple_0)
        var_3 = console_c_l_i_0.init_parser()
        set_0 = set()
        var_4 = console_c_l_i_0.do_timeout(set_0)
        bytes_0 = b'\x06'
        var_5 = console_c_l_i_0.do_timeout(bytes_0)
        str_1 = '%s --list'
        var_6 = console_c_l_i_0.run()
        var_7 = console_c_l_i_0.do_become_user(bytes_0)
        float_0 = -2501.92635
        var_8 = console_c_l_i_0.do_list(float_0)
        bool_0 = False
        var_9 = console_c_l_i_0.do_cd(bool_0)
        tuple_1 = (float_0,)
        console_c_l_i_1 = module_0.ConsoleCLI(tuple_1)
        int_0 = -164
        var_10 = console_c_l_i_0.complete_cd(set_0, str_1, set_0, int_0)
        var_11 = console_c_l_i_1.do_timeout(set_0)
        var_12 = console_c_l_i_0.helpdefault(console_c_l_i_0)
        var_13 = console_c_l_i_0.get_names()
        bool_1 = True
        console_c_l_i_2 = module_0.ConsoleCLI(bool_1)
        var_14 = console_c_l_i_2.do_become_user(tuple_1)
    except BaseException:
        pass