# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        dict_token_0 = module_0.DictToken(*list_0, **dict_0)
        list_1 = [dict_0, dict_token_0, dict_0]
        int_0 = -4672
        str_0 = 'c:.4"k6CbO;nV>aKVr'
        token_0 = module_0.Token(dict_token_0, int_0, int_0, str_0)
        token_1 = token_0.lookup(list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        tuple_0 = (str_0, str_0)
        int_0 = 803
        int_1 = 3711
        scalar_token_0 = module_0.ScalarToken(tuple_0, int_0, int_1, str_0)
        list_0 = [scalar_token_0]
        tuple_1 = None
        int_2 = 1
        int_3 = None
        scalar_token_1 = module_0.ScalarToken(tuple_1, int_2, int_3)
        int_4 = -1065
        int_5 = -1828
        str_1 = '#/'
        list_token_0 = module_0.ListToken(scalar_token_1, int_4, int_5, str_1)
        list_1 = [list_token_0]
        int_6 = -1620
        scalar_token_2 = module_0.ScalarToken(list_1, int_3, int_6)
        str_2 = 't,-[z'
        token_0 = module_0.Token(scalar_token_2, int_6, int_4, str_2)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 5
        token_0 = module_0.Token(int_0, int_0, int_0)
        bool_0 = token_0.__eq__(int_0)
        str_0 = token_0.__repr__()
        bool_1 = token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        int_0 = 5
        token_0 = module_0.Token(int_0, int_0, int_0)
        bool_0 = token_0.__eq__(int_0)
        token_1 = token_0.lookup(list_0)
        bool_1 = token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -1542.05
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        list_0 = [dict_0, dict_0]
        str_0 = '\n(7N'
        int_0 = 115
        int_1 = 5
        token_0 = module_0.Token(str_0, int_0, int_1)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 5
        token_0 = module_0.Token(int_0, int_0, int_0)
        bool_0 = token_0.__eq__(int_0)
        bool_1 = token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 3905
        set_0 = {int_0}
        int_1 = -1276
        scalar_token_0 = module_0.ScalarToken(set_0, int_0, int_1)
        any_0 = scalar_token_0.__hash__()
    except BaseException:
        pass

def test_case_7():
    try:
        dict_token_0 = module_0.DictToken()
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        int_0 = 20
        str_0 = None
        scalar_token_0 = module_0.ScalarToken(str_0, int_0, int_0, str_0)
        dict_0 = {str_0: str_0, str_0: scalar_token_0, str_0: list_0}
        list_1 = [dict_0, list_0, str_0, str_0]
        dict_token_0 = module_0.DictToken(*list_1)
    except BaseException:
        pass