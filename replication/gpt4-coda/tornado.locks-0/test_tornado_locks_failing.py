# Automatically generated by Pynguin.
import tornado.locks as module_0
import datetime as module_1
import builtins as module_2

def test_case_0():
    try:
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_1():
    try:
        event_0 = module_0.Event()
        event_0.set()
        str_0 = event_0.__repr__()
        str_1 = event_0.__repr__()
        event_0.clear()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_2():
    try:
        event_0 = module_0.Event()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_3():
    try:
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        str_0 = 'W@:eK39#'
        str_1 = "/3M'H_y"
        event_0 = module_0.Event()
        str_2 = event_0.__repr__()
        dict_0 = {str_0: str_0, str_1: str_1}
        lock_0 = module_0.Lock()
        lock_0.__aenter__()
        lock_1 = module_0.Lock()
        lock_1.__aenter__()
        releasing_context_manager_0 = module_0._ReleasingContextManager(dict_0)
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -1813
        releasing_context_manager_0 = module_0._ReleasingContextManager(int_0)
        releasing_context_manager_0.__enter__()
        float_0 = 1000.0
        timedelta_0 = module_1.timedelta()
        event_0 = module_0.Event()
        set_0 = {float_0, timedelta_0, event_0}
        bytes_0 = b''
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__exit__(float_0, set_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        event_0 = module_0.Event()
        event_0.set()
        str_0 = event_0.__repr__()
        str_1 = event_0.__repr__()
        event_0.clear()
        bool_0 = event_0.is_set()
        event_0.set()
        semaphore_0 = module_0.Semaphore()
        str_2 = '+4\x0bP'
        base_exception_0 = module_2.BaseException()
        traceback_0 = None
        lock_0 = module_0.Lock()
        str_3 = lock_0.__repr__()
        timedelta_0 = module_1.timedelta()
        releasing_context_manager_0 = module_0._ReleasingContextManager(str_2)
        releasing_context_manager_0.__exit__(timedelta_0, base_exception_0, traceback_0)
    except BaseException:
        pass

def test_case_6():
    try:
        event_0 = module_0.Event()
        event_0.set()
        str_0 = event_0.__repr__()
        str_1 = event_0.__repr__()
        event_0.clear()
        bool_0 = event_0.is_set()
        event_0.set()
        semaphore_0 = module_0.Semaphore()
        str_2 = '+4\x0bP'
        base_exception_0 = module_2.BaseException()
        traceback_0 = None
        semaphore_0.__aexit__(str_2, base_exception_0, traceback_0)
        lock_0 = module_0.Lock()
        int_0 = -519
        semaphore_1 = module_0.Semaphore(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        lock_0 = module_0.Lock()
        awaitable_0 = lock_0.acquire()
    except BaseException:
        pass

def test_case_8():
    try:
        semaphore_0 = module_0.Semaphore()
        lock_0 = module_0.Lock()
        str_0 = lock_0.__repr__()
        semaphore_0.release()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_9():
    try:
        semaphore_0 = module_0.Semaphore()
        event_0 = module_0.Event()
        optional_0 = None
        optional_1 = None
        semaphore_0.__exit__(event_0, optional_0, optional_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        bounded_semaphore_0.release()
    except BaseException:
        pass

def test_case_11():
    try:
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_12():
    try:
        lock_0 = module_0.Lock()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_13():
    try:
        event_0 = module_0.Event()
        str_0 = event_0.__repr__()
        str_1 = event_0.__repr__()
        event_0.clear()
        bool_0 = event_0.is_set()
        event_0.set()
        semaphore_0 = module_0.Semaphore()
        base_exception_0 = module_2.BaseException()
        semaphore_0.__aenter__()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_14():
    try:
        event_0 = module_0.Event()
        event_0.set()
        str_0 = event_0.__repr__()
        str_1 = event_0.__repr__()
        bool_0 = event_0.is_set()
        event_0.set()
        semaphore_0 = module_0.Semaphore()
        base_exception_0 = module_2.BaseException()
        traceback_0 = None
        traceback_1 = None
        list_0 = [str_1, traceback_1]
        semaphore_0.__aexit__(list_0, base_exception_0, traceback_0)
        lock_0 = module_0.Lock()
        str_2 = lock_0.__repr__()
        semaphore_1 = module_0.Semaphore()
        semaphore_1.__aenter__()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_15():
    try:
        event_0 = module_0.Event()
        event_0.set()
        str_0 = event_0.__repr__()
        str_1 = event_0.__repr__()
        event_0.clear()
        bool_0 = event_0.is_set()
        event_0.set()
        semaphore_0 = module_0.Semaphore()
        bytes_0 = b'r\x9f\x8f\xb3n\x0b'
        base_exception_0 = module_2.BaseException()
        timeout_garbage_collector_0 = module_0._TimeoutGarbageCollector()
        lock_0 = module_0.Lock()
        lock_0.__exit__(bytes_0, base_exception_0, timeout_garbage_collector_0)
    except BaseException:
        pass