# Automatically generated by Pynguin.
import ansible.playbook.attribute as module_0

def test_case_0():
    try:
        attribute_0 = module_0.Attribute()
        bool_0 = True
        var_0 = attribute_0.__eq__(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 3615
        bytes_0 = b'f\xa4@f\xd6\xc8\xe2\xc9'
        str_0 = "hy\x0bQ{LVn<x'a< +P6)"
        field_attribute_0 = module_0.FieldAttribute()
        float_0 = 1041.22502
        int_1 = -2965
        list_0 = []
        attribute_0 = module_0.Attribute(bytes_0, str_0, field_attribute_0, float_0, int_1, list_0)
        var_0 = attribute_0.__ne__(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'eZ'
        tuple_0 = ()
        attribute_0 = module_0.Attribute(tuple_0, str_0)
        field_attribute_0 = module_0.FieldAttribute(attribute_0, tuple_0)
        attribute_1 = module_0.Attribute(str_0, str_0, field_attribute_0)
        var_0 = attribute_1.__lt__(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xd8\x18\x0c\xa6\r='
        int_0 = -832
        str_0 = '\n---\nmodule: stat\nversion_added: "1.3"\nshort_description: Retrieve file or file system status\ndescription:\n     - Retrieves facts for a file similar to the Linux/Unix \'stat\' command.\n     - For Windows targets, use the M(ansible.windows.win_stat) module instead.\noptions:\n  path:\n    description:\n      - The full path of the file/object to get the facts of.\n    type: path\n    required: true\n    aliases: [ dest, name ]\n  follow:\n    description:\n      - Whether to follow symlinks.\n    type: bool\n    default: no\n  get_checksum:\n    description:\n      - Whether to return a checksum of the file.\n    type: bool\n    default: yes\n    version_added: "1.8"\n  checksum_algorithm:\n    description:\n      - Algorithm to determine checksum of file.\n      - Will throw an error if the host is unable to use specified algorithm.\n      - The remote host has to support the hashing method specified, C(md5)\n        can be unavailable if the host is FIPS-140 compliant.\n    type: str\n    choices: [ md5, sha1, sha224, sha256, sha384, sha512 ]\n    default: sha1\n    aliases: [ checksum, checksum_algo ]\n    version_added: "2.0"\n  get_mime:\n    description:\n      - Use file magic and return data about the nature of the file. this uses\n        the \'file\' utility found on most Linux/Unix systems.\n      - This will add both `mime_type` and \'charset\' fields to the return, if possible.\n      - In Ansible 2.3 this option changed from \'mime\' to \'get_mime\' and the default changed to \'Yes\'.\n    type: bool\n    default: yes\n    aliases: [ mime, mime_type, mime-type ]\n    version_added: "2.1"\n  get_attributes:\n    description:\n      - Get file attributes using lsattr tool if present.\n    type: bool\n    default: yes\n    aliases: [ attr, attributes ]\n    version_added: "2.3"\nextends_documentation_fragment:\n  -  action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nseealso:\n- module: ansible.builtin.file\n- module: ansible.windows.win_stat\nauthor: Bruce Pennypacker (@bpennypacker)\n'
        bytes_1 = b'A\xb9m<\xc6\xb4\x0b\xc36/u{'
        set_0 = set()
        attribute_0 = module_0.Attribute(int_0, str_0, bytes_1, set_0)
        var_0 = attribute_0.__gt__(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xf6\xd6\xef\r\x93s{\xcb\x08\xa0ks\xb9\xb7\x8b5o\x80J'
        str_0 = '1\tcY0q4'
        int_0 = 1671
        int_1 = 452
        int_2 = 903
        list_0 = []
        field_attribute_0 = module_0.FieldAttribute(str_0, int_0, bytes_0, int_1, int_2, list_0, int_1)
        bytes_1 = b'\x86xjg\xcc\xdb\t'
        int_3 = 0
        float_0 = 2086.0
        attribute_0 = module_0.Attribute(int_3, int_2, float_0, list_0)
        var_0 = attribute_0.__le__(bytes_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'P\n'
        str_1 = '\\%O\x0c~p-d'
        int_0 = 301
        bool_0 = True
        float_0 = 1327.0
        list_0 = []
        list_1 = [int_0, list_0]
        set_0 = {float_0, str_1, str_0, str_1}
        tuple_0 = None
        bytes_0 = b'\xa1\x1b'
        tuple_1 = (list_0, tuple_0, bytes_0)
        bool_1 = False
        attribute_0 = module_0.Attribute(bool_1, tuple_0)
        field_attribute_0 = module_0.FieldAttribute(set_0, tuple_1, attribute_0)
        dict_0 = {}
        attribute_1 = module_0.Attribute(float_0, list_1, field_attribute_0, dict_0)
        var_0 = attribute_1.__ge__(bool_0)
    except BaseException:
        pass