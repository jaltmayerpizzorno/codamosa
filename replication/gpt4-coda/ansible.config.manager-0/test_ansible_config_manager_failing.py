# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        bytes_0 = b'\xa9\xc9\xbc\xca\x89%\xda[\x9e\xf3nr\xda\xa3\xbc'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        setting_0 = module_0.Setting(*list_0)
        float_0 = -1259.35785
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(bytes_0, setting_0, setting_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '{~S"\n@R_29B!\\ORTQNP'
        float_0 = -429.5805433062656
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(str_0, str_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        var_0 = module_0.find_ini_config_file()
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_config_value_and_origin(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'\x98\xb5\x97\x9c\xa3\x9f\x99\xb2S'
        config_manager_1 = module_0.ConfigManager(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/'
        list_0 = [str_0, str_0]
        config_manager_0 = module_0.ConfigManager(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'Fm'
        bytes_1 = b'\x18\xe7\xf7\\'
        config_manager_0 = module_0.ConfigManager(bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_7():
    try:
        config_manager_0 = module_0.ConfigManager()
        bool_0 = True
        plugin_0 = None
        var_0 = config_manager_0.get_plugin_vars(bool_0, plugin_0)
        bytes_0 = b'\x98\xb5\x97\x9c\xa3\x9f\x99\xb2S'
        config_manager_1 = module_0.ConfigManager(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'tmppath'
        bool_0 = False
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(str_0, str_0, bool_0)
        plugin_0 = module_0.Plugin()
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = None
        list_0 = [dict_0]
        config_manager_0 = module_0.ConfigManager()
        str_0 = ''
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.initialize_plugin_configuration_definitions(list_0, config_manager_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'U\xa8'
        str_0 = '/etc/os-release'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value_and_origin(bytes_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xae8\xdd\x9fl\x89'
        list_0 = None
        var_0 = module_0.ensure_type(bytes_0, list_0)
        plugin_0 = module_0.Plugin()
    except BaseException:
        pass

def test_case_12():
    try:
        config_manager_0 = module_0.ConfigManager()
        plugin_0 = None
        dict_0 = None
        var_0 = module_0.get_ini_config_value(plugin_0, dict_0)
        bytes_0 = b'\x98\xb5\x97\x9c\xa3\x9f\x99\xb2S'
        config_manager_1 = module_0.ConfigManager(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = None
        list_0 = [dict_0]
        config_manager_0 = module_0.ConfigManager()
        set_0 = {dict_0}
        var_0 = config_manager_0.update_config_data(set_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager()
        str_0 = 'P6'
        float_0 = -703.1
        var_0 = config_manager_1.get_configuration_definition(str_0, float_0)
        bool_0 = False
        var_1 = config_manager_1.get_config_value(config_manager_0, bool_0, config_manager_0, config_manager_1)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\xa8k\xa4\xc6\xe8'
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager()
        str_0 = 'QoUnAWTzbZ\\'
        bytes_1 = b'b\xc3\xf6'
        int_0 = 1809
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(bytes_1, bytes_0, int_0)
        bool_0 = False
        config_manager_2 = module_0.ConfigManager()
        list_0 = None
        var_1 = module_0.resolve_path(str_0)
        var_2 = config_manager_2.get_plugin_vars(list_0, int_0)
        var_3 = config_manager_2.get_config_value(config_manager_0, bool_0, config_manager_0, config_manager_2)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'p]45<;\x87+9\xf9\xf7\xba2\xd2\xb9\x0c\x17\x1a5'
        bytes_1 = b'2\x87D\x10m'
        tuple_0 = ()
        config_manager_0 = module_0.ConfigManager()
        str_0 = '&m%'
        bytes_2 = b'b\xc3\xf6'
        int_0 = 1809
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(bytes_2, bytes_0, int_0)
        float_0 = -703.1
        var_1 = config_manager_0.get_configuration_definition(str_0, float_0)
        var_2 = config_manager_0.get_plugin_vars(bytes_1, tuple_0)
        dict_0 = {bytes_2: var_2, bytes_0: var_0}
        var_3 = config_manager_0.update_config_data(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'state=drained should only be used for checking a port in the wait_for module'
        var_0 = config_manager_0.get_configuration_definition(str_0, str_0)
        dict_0 = None
        str_1 = 'become_plugins'
        var_1 = config_manager_0.get_plugin_options(dict_0, config_manager_0, str_1, config_manager_0)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = None
        list_0 = [dict_0]
        config_manager_0 = module_0.ConfigManager()
        setting_0 = None
        list_1 = []
        var_0 = config_manager_0.get_plugin_options(setting_0, dict_0, list_0, list_1)
        set_0 = {dict_0}
        var_1 = config_manager_0.update_config_data(set_0, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'test.ini'
        var_0 = module_0.get_config_type(str_0)
        str_1 = 'test.cfg'
        var_1 = module_0.get_config_type(str_1)
        str_2 = 'test.yaml'
        var_2 = module_0.get_config_type(str_2)
        setting_0 = module_0.Setting()
    except BaseException:
        pass