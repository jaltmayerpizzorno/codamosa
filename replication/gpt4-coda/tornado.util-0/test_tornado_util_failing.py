# Automatically generated by Pynguin.
import tornado.util as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = ''
        object_dict_0 = module_0.ObjectDict()
        any_0 = object_dict_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '0ZpN+vPn=wj; '
        object_dict_0 = module_0.ObjectDict()
        object_dict_0.__setattr__(str_0, str_0)
        str_1 = '@'
        list_0 = [str_1, str_1]
        base_exception_0 = module_1.BaseException(*list_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        any_0 = module_0.import_object(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        str_0 = ';'
        object_dict_0 = module_0.ObjectDict()
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        bytes_0 = b''
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_1 = gzip_decompressor_0.decompress(bytes_0)
        dict_0 = {}
        object_dict_0 = module_0.ObjectDict(**dict_0)
        str_0 = ''
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        dict_0 = {}
        object_dict_0 = module_0.ObjectDict(**dict_0)
        str_0 = ''
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '3m'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        configurable_0 = None
        str_0 = "\x0cz]_r'C)I"
        bool_0 = False
        dict_0 = {str_0: bool_0, str_0: str_0, str_0: configurable_0}
        module_0.exec_in(configurable_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "Tb4'JjX(d"
        var_0 = module_0.raise_exc_info(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        optional_0 = None
        list_0 = [optional_0, optional_0, optional_0]
        var_0 = module_0.raise_exc_info(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '@'
        str_1 = module_0.re_unescape(str_0)
        list_0 = [str_1, str_0]
        base_exception_0 = module_1.BaseException(*list_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        configurable_0 = None
        bytes_0 = b'\x1d\x1a\xc1-\xf0\xa7\xf6\x1b\xbf]\x85\xcd\x9a" \xc0\xb9TV'
        list_0 = [configurable_0, configurable_0, bytes_0]
        list_1 = [list_0, configurable_0]
        list_2 = [list_0, list_1, configurable_0]
        configurable_1 = module_0.Configurable(*list_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'X@g-/zW\\7\rTg:\rS'
        arg_replacer_0 = module_0.ArgReplacer(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -538
        var_0 = module_0.timedelta_to_seconds(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '.m'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -1549.0
        str_0 = ''
        list_0 = [str_0, str_0, str_0]
        base_exception_0 = module_1.BaseException(*list_0)
        str_1 = None
        dict_0 = {str_1: float_0, str_1: float_0}
        module_0.exec_in(str_0, dict_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        dict_1 = {str_0: str_0, str_0: str_0, str_0: optional_0}
        object_dict_0 = module_0.ObjectDict(**dict_1)
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '&GQ$e\\MP2BgU5$ p'
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        timeout_error_0 = module_0.TimeoutError()
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '~4Rezu\\~V"['
        str_1 = module_0.re_unescape(str_0)
        list_0 = [str_1, str_1, str_1]
        base_exception_0 = module_1.BaseException(*list_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        str_2 = '[EhYrl=z@<XeS7\rX'
        any_0 = module_0.import_object(str_2)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'tornado.application'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = module_0.doctests()
        str_0 = 'X9cKd+R'
        tuple_0 = None
        dict_0 = {str_0: var_0, str_0: tuple_0, str_0: var_0}
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        dict_1 = {str_0: str_0, str_0: var_0}
        any_0 = arg_replacer_0.get_old_value(dict_1, dict_0)
        tuple_1 = ()
        arg_replacer_1 = module_0.ArgReplacer(tuple_1, str_0)
    except BaseException:
        pass