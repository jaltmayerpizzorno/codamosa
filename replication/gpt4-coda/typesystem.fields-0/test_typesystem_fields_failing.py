# Automatically generated by Pynguin.
import typesystem.fields as module_0
import decimal as module_1

def test_case_0():
    try:
        field_0 = module_0.Field()
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(field_0)
    except BaseException:
        pass

def test_case_1():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        any_0 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_2():
    try:
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(boolean_0)
    except BaseException:
        pass

def test_case_3():
    try:
        array_0 = module_0.Array()
        string_0 = module_0.String()
        any_0 = string_0.validate(string_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 2167.58923
        number_0 = module_0.Number(maximum=float_0, exclusive_maximum=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -3092.06
        number_0 = module_0.Number(exclusive_minimum=float_0, exclusive_maximum=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        none_type_0 = None
        string_0 = module_0.String(trim_whitespace=bool_0, format=none_type_0)
        dict_0 = {string_0: string_0, bool_0: string_0, bool_0: string_0, string_0: string_0}
        decimal_0 = module_0.Decimal()
        any_0 = decimal_0.serialize(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'E..\ny1Q&C4]vv`>i^F+'
        bool_0 = False
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        optional_0 = None
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(optional_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = None
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(choice_0)
    except BaseException:
        pass

def test_case_11():
    try:
        array_0 = module_0.Array()
        list_0 = None
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        choice_0 = module_0.Choice()
        str_0 = '.z"'
        any_0 = module_0.Any(description=str_0)
        any_1 = any_0.validate(choice_0)
        choice_1 = None
        any_2 = choice_0.validate(choice_1)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -560.3598210048709
        const_0 = module_0.Const(float_0)
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(const_0)
    except BaseException:
        pass

def test_case_14():
    try:
        choice_0 = module_0.Choice()
        str_0 = 'RY6%S\rIOy|'
        int_0 = 4
        number_0 = module_0.Number(maximum=int_0)
        string_0 = module_0.String(pattern=str_0)
        str_1 = None
        any_0 = module_0.Any(title=str_0, description=str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        decimal_0 = module_0.Decimal(precision=str_0)
        any_0 = decimal_0.serialize(str_0)
        str_1 = '\n        Given an index, lookup a child token within this structure.\n        '
        bool_0 = False
        any_1 = module_0.Any(title=str_1, allow_null=bool_0)
        optional_0 = None
        integer_0 = module_0.Integer(precision=str_0)
        object_0 = module_0.Object(properties=optional_0, property_names=integer_0)
        str_2 = 'Sxgb:K%f-B,gR]d0g'
        any_2 = module_0.Any(title=str_0, description=str_2, default=object_0)
    except BaseException:
        pass

def test_case_16():
    try:
        number_0 = module_0.Number()
        str_0 = 'CJCfh~;yrg'
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ''
        any_0 = module_0.Any(title=str_0)
        int_0 = -676
        array_0 = module_0.Array(any_0, int_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        array_0 = module_0.Array()
        float_0 = 3894.0373
        number_0 = module_0.Number(multiple_of=float_0)
        any_0 = number_0.validate(float_0)
        bool_0 = False
        array_1 = module_0.Array(bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        array_0 = module_0.Array()
        object_0 = module_0.Object()
        number_0 = module_0.Number(exclusive_minimum=object_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = -2022
        bool_0 = True
        bool_1 = True
        boolean_0 = module_0.Boolean(default=int_0, allow_null=bool_1)
        any_0 = boolean_0.validate(int_0, strict=bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        list_0 = []
        union_0 = module_0.Union(list_0)
        any_0 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 1048
        field_0 = None
        dict_0 = {}
        date_0 = module_0.Date(**dict_0)
        object_0 = module_0.Object(property_names=field_0, max_properties=int_0, required=date_0, **dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        field_0 = module_0.Field()
        str_0 = 'h=D|k'
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, additional_properties=field_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        date_time_0 = module_0.DateTime()
        field_0 = module_0.Field()
        object_0 = module_0.Object(additional_properties=field_0, property_names=field_0)
        any_0 = object_0.validate(date_time_0)
    except BaseException:
        pass

def test_case_25():
    try:
        optional_0 = None
        object_0 = module_0.Object(min_properties=optional_0)
        any_0 = object_0.validate(optional_0)
    except BaseException:
        pass

def test_case_26():
    try:
        field_0 = module_0.Field()
        int_0 = 1043
        array_0 = module_0.Array(field_0, field_0, int_0, int_0)
        any_0 = array_0.validate(field_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = None
        bool_0 = False
        string_0 = module_0.String(allow_blank=bool_0)
        any_0 = string_0.validate(int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'OLwlq^'
        str_1 = None
        field_0 = module_0.Field()
        str_2 = 'v%nDs'
        str_3 = ')2vOq+J8y'
        dict_0 = {str_1: field_0, str_0: field_0, str_2: field_0, str_3: field_0}
        object_0 = module_0.Object(properties=dict_0, additional_properties=field_0)
    except BaseException:
        pass

def test_case_29():
    try:
        date_time_0 = module_0.DateTime()
        field_0 = module_0.Field()
        int_0 = 1036
        object_0 = module_0.Object(additional_properties=field_0, min_properties=int_0, max_properties=int_0)
        float_0 = module_0.Float(maximum=int_0)
        any_0 = object_0.validate(float_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '\n        Given an index, lookup a child token within this structure.\n        '
        bool_0 = False
        any_0 = module_0.Any(title=str_0, allow_null=bool_0)
        bool_1 = False
        int_0 = -1061
        dict_0 = {}
        object_0 = module_0.Object(additional_properties=bool_1, min_properties=any_0, max_properties=int_0, **dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'q(DflJg>Zu\x0b--_}7'
        string_0 = module_0.String(pattern=str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        choice_0 = module_0.Choice()
        bool_0 = True
        bool_1 = True
        integer_0 = None
        bool_2 = True
        string_0 = module_0.String(allow_blank=bool_2, trim_whitespace=bool_2)
        string_1 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_1, pattern=integer_0, format=string_0)
    except BaseException:
        pass

def test_case_33():
    try:
        list_0 = []
        bool_0 = False
        str_0 = "cG0~0~A\rz8i%2O'iW8"
        any_0 = module_0.Any(title=str_0)
        any_1 = any_0.validate(list_0)
        field_0 = module_0.Field()
        int_0 = 996
        array_0 = module_0.Array(field_0, field_0, int_0, bool_0)
        number_0 = module_0.Number(exclusive_maximum=int_0)
        any_2 = number_0.validate(bool_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = None
        array_0 = module_0.Array(int_0)
        const_0 = module_0.Const(int_0)
        any_0 = const_0.validate(int_0)
        any_1 = array_0.validate(int_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bytes_0 = b'|9-\xc6\xcf'
        str_0 = 'HyKq{MEp>\x0bv(cs'
        const_0 = module_0.Const(str_0)
        any_0 = const_0.validate(bytes_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = ''
        number_0 = module_0.Number()
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = ' HV_X\rv${}wMAa;H('
        list_0 = [str_0, str_0, str_0]
        bool_0 = False
        field_0 = module_0.Field(description=str_0, default=str_0)
        field_1 = module_0.Field(description=str_0)
        union_0 = field_1.__or__(field_0)
        boolean_0 = module_0.Boolean(title=str_0, allow_null=bool_0)
        any_0 = boolean_0.validate(bool_0)
        array_0 = module_0.Array(list_0, bool_0)
    except BaseException:
        pass

def test_case_38():
    try:
        time_0 = module_0.Time()
        object_0 = module_0.Object(property_names=time_0)
        decimal_0 = module_1.Decimal()
        integer_0 = module_0.Integer(multiple_of=decimal_0)
        field_0 = module_0.Field()
        field_1 = module_0.Field()
        date_time_0 = module_0.DateTime()
        field_2 = module_0.Field(default=date_time_0)
        union_0 = field_1.__or__(field_2)
        array_0 = module_0.Array(field_0, field_1, union_0, union_0)
    except BaseException:
        pass

def test_case_39():
    try:
        boolean_0 = module_0.Boolean()
        list_0 = [boolean_0, boolean_0]
        array_0 = module_0.Array(list_0)
        bool_0 = False
        any_0 = array_0.validate(boolean_0, strict=bool_0)
    except BaseException:
        pass

def test_case_40():
    try:
        dict_0 = {}
        field_0 = module_0.Field()
        str_0 = ''
        bool_0 = False
        string_0 = module_0.String(trim_whitespace=bool_0, **dict_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        number_0 = module_0.Number()
        float_0 = None
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_42():
    try:
        number_0 = module_0.Number()
        bool_0 = True
        any_0 = number_0.validate(number_0, strict=bool_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'O2w7q^'
        int_0 = -1407
        string_0 = module_0.String(max_length=int_0, min_length=int_0, format=str_0)
        any_0 = module_0.Any()
        any_1 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_44():
    try:
        bool_0 = False
        decimal_0 = module_1.Decimal()
        optional_0 = None
        list_0 = []
        decimal_1 = module_1.Decimal(*list_0)
        number_0 = module_0.Number(maximum=decimal_0, exclusive_minimum=decimal_1, exclusive_maximum=decimal_0)
        decimal_2 = module_0.Decimal(exclusive_minimum=decimal_0, precision=optional_0)
        bytes_0 = b'\xe1xUu'
        str_0 = 'O27q^'
        string_0 = module_0.String(allow_blank=bool_0, max_length=bytes_0, format=str_0)
    except BaseException:
        pass

def test_case_45():
    try:
        integer_0 = module_0.Integer()
        list_0 = [integer_0, integer_0, integer_0, integer_0]
        date_time_0 = None
        int_0 = -2541
        str_0 = ';2'
        string_0 = module_0.String(max_length=int_0, format=str_0)
        any_0 = string_0.serialize(date_time_0)
        float_0 = -2000.42
        integer_1 = module_0.Integer(maximum=list_0, exclusive_minimum=float_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'uY:! iSR'
        int_0 = 552
        string_0 = module_0.String(max_length=int_0, min_length=int_0, format=str_0)
        any_0 = module_0.Any(title=str_0)
        any_1 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'wR-mn6MeW|k'
        decimal_0 = module_1.Decimal()
        integer_0 = module_0.Integer(precision=str_0, multiple_of=decimal_0)
        bool_0 = True
        bool_1 = True
        str_1 = ':?ipv+2O7BQ\x0c.F-U0'
        string_0 = module_0.String(allow_blank=bool_1, pattern=str_1, format=str_1)
        string_1 = module_0.String(allow_blank=bool_0, pattern=string_0)
    except BaseException:
        pass

def test_case_48():
    try:
        optional_0 = None
        bool_0 = None
        array_0 = module_0.Array()
        any_0 = array_0.serialize(optional_0)
        any_1 = array_0.validate(optional_0, strict=bool_0)
    except BaseException:
        pass

def test_case_49():
    try:
        const_0 = None
        dict_0 = {const_0: const_0, const_0: const_0}
        bool_0 = None
        optional_0 = None
        str_0 = '^Y'
        string_0 = module_0.String(allow_blank=bool_0, max_length=optional_0, format=str_0)
        decimal_0 = module_0.Decimal(precision=dict_0, multiple_of=string_0)
    except BaseException:
        pass

def test_case_50():
    try:
        float_0 = -2090.474551
        number_0 = module_0.Number(maximum=float_0, multiple_of=float_0)
        str_0 = 'U\\r9fHEh7b'
        integer_0 = module_0.Integer(minimum=str_0, precision=str_0)
    except BaseException:
        pass

def test_case_51():
    try:
        bool_0 = False
        time_0 = module_0.Time()
        choice_0 = module_0.Choice()
        string_0 = module_0.String(allow_blank=bool_0)
        string_1 = module_0.String(trim_whitespace=bool_0, min_length=choice_0)
    except BaseException:
        pass

def test_case_52():
    try:
        text_0 = module_0.Text()
        date_time_0 = module_0.DateTime()
        float_0 = None
        integer_0 = module_0.Integer(exclusive_maximum=date_time_0, multiple_of=float_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = 'wNtu(#}'
        bool_0 = True
        str_1 = 'y'
        string_0 = module_0.String(trim_whitespace=bool_0, format=str_1)
        any_0 = string_0.validate(str_0)
        int_0 = 430
        bytes_0 = b'7\xd1J\x87{\x1b\x84\xdd\xd6\x07\xcc\xc3'
        object_0 = module_0.Object(min_properties=int_0, required=bytes_0)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = '}-'
        list_0 = [str_0, str_0, str_0]
        int_0 = None
        integer_0 = module_0.Integer(minimum=int_0, exclusive_minimum=int_0)
        array_0 = module_0.Array(integer_0)
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = '5'
        list_0 = [str_0, str_0, str_0]
        bool_0 = False
        decimal_0 = module_1.Decimal()
        decimal_1 = module_0.Decimal(multiple_of=decimal_0)
        array_0 = module_0.Array(decimal_1)
        any_0 = array_0.validate(list_0, strict=bool_0)
    except BaseException:
        pass

def test_case_56():
    try:
        dict_0 = {}
        int_0 = -597
        object_0 = module_0.Object(max_properties=int_0)
        bool_0 = True
        any_0 = object_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = 'templates'
        field_0 = module_0.Field(description=str_0)
        int_0 = 4
        bool_0 = True
        array_0 = module_0.Array(field_0, field_0, int_0, int_0, int_0, bool_0)
        object_0 = module_0.Object(property_names=field_0, max_properties=array_0)
    except BaseException:
        pass

def test_case_58():
    try:
        choice_0 = module_0.Choice()
        str_0 = '=g]'
        string_0 = module_0.String(pattern=str_0)
        field_0 = module_0.Field()
        int_0 = 2961
        object_0 = module_0.Object(properties=string_0, property_names=field_0, min_properties=int_0)
        any_0 = object_0.validate(str_0)
    except BaseException:
        pass

def test_case_59():
    try:
        choice_0 = module_0.Choice()
        str_0 = 'one_of'
        field_0 = None
        bytes_0 = b'\xb6?\x82'
        choice_1 = module_0.Choice(choices=bytes_0)
        str_1 = '\\;K ]0o<V3)4,%^2vY'
        field_1 = None
        dict_0 = {str_0: field_0, str_1: field_1}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, property_names=field_1)
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = '3LMb2#.^gp'
        integer_0 = module_0.Integer()
        str_1 = ''
        field_0 = module_0.Field(description=str_1, default=str_0)
        dict_0 = {str_0: field_0}
        list_0 = [str_1]
        object_0 = module_0.Object(pattern_properties=dict_0, property_names=field_0, required=list_0)
        validation_result_0 = field_0.validate_or_error(object_0)
    except BaseException:
        pass

def test_case_61():
    try:
        decimal_0 = module_1.Decimal()
        str_0 = '+tDaRcp%6x'
        number_0 = module_0.Number(precision=str_0)
        any_0 = number_0.validate(decimal_0)
    except BaseException:
        pass

def test_case_62():
    try:
        dict_0 = {}
        time_0 = module_0.Time(**dict_0)
        str_0 = '\rFD.%h'
        field_0 = None
        dict_1 = {str_0: field_0, str_0: field_0}
        int_0 = None
        number_0 = module_0.Number(minimum=int_0, exclusive_maximum=int_0, multiple_of=int_0)
        object_0 = module_0.Object(pattern_properties=dict_1, required=number_0)
    except BaseException:
        pass

def test_case_63():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        time_0 = None
        any_0 = union_0.validate(time_0)
    except BaseException:
        pass

def test_case_64():
    try:
        str_0 = 'i[a/[I61'
        bool_0 = False
        field_0 = module_0.Field(allow_null=bool_0)
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, property_names=field_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_65():
    try:
        dict_0 = {}
        field_0 = module_0.Field()
        str_0 = 'rg&%Ob iBLLZ'
        dict_1 = {str_0: field_0, str_0: field_0}
        int_0 = 1
        object_0 = module_0.Object(properties=dict_1, min_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_66():
    try:
        date_time_0 = module_0.DateTime()
        dict_0 = {}
        field_0 = module_0.Field()
        int_0 = 1036
        dict_1 = {}
        object_0 = module_0.Object(properties=dict_1, property_names=field_0, min_properties=int_0, max_properties=int_0, **dict_0)
        decimal_0 = module_1.Decimal(**dict_0)
        float_0 = module_0.Float(exclusive_minimum=decimal_0, multiple_of=decimal_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_67():
    try:
        date_time_0 = module_0.DateTime()
        field_0 = module_0.Field(default=date_time_0)
        str_0 = None
        dict_0 = {str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0)
    except BaseException:
        pass

def test_case_68():
    try:
        field_0 = module_0.Field()
        str_0 = 't'
        dict_0 = {str_0: field_0, str_0: field_0}
        sequence_0 = None
        object_0 = module_0.Object(pattern_properties=dict_0, required=sequence_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_69():
    try:
        str_0 = 'i[[XI61'
        time_0 = module_0.Time()
        dict_0 = {str_0: str_0, str_0: time_0}
        int_0 = 1562
        dict_1 = {time_0: str_0, str_0: dict_0}
        dict_2 = {int_0: dict_1}
        object_0 = module_0.Object(additional_properties=dict_2)
    except BaseException:
        pass

def test_case_70():
    try:
        str_0 = '[[IL61'
        time_0 = module_0.Time()
        dict_0 = {str_0: str_0, str_0: time_0}
        int_0 = 1699
        dict_1 = {}
        bool_0 = False
        field_0 = None
        object_0 = module_0.Object(properties=dict_1, pattern_properties=dict_1, additional_properties=bool_0, property_names=field_0, max_properties=int_0)
        bool_1 = True
        any_0 = object_0.validate(dict_0, strict=bool_1)
    except BaseException:
        pass

def test_case_71():
    try:
        str_0 = 'iCJ,=j.Z8'
        str_1 = '*=vj'
        str_2 = 'L@exH>d<%KT3Ak'
        set_0 = {str_1, str_0, str_0, str_1}
        dict_0 = {str_0: str_0, str_1: str_1, str_2: set_0, str_1: str_2}
        str_3 = 'A)(lSLMw2f;tO8'
        str_4 = '$kj\r0@=X'
        field_0 = module_0.Field(description=str_4)
        dict_1 = {str_3: field_0, str_3: field_0, str_3: field_0}
        int_0 = 3
        bool_0 = field_0.has_default()
        object_0 = module_0.Object(properties=dict_1, pattern_properties=dict_1, min_properties=int_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_72():
    try:
        str_0 = '1Qqy\x0cy`VfANUysp\n\n'
        list_0 = [str_0, str_0, str_0]
        string_0 = module_0.String(pattern=str_0)
        array_0 = module_0.Array(string_0)
        any_0 = array_0.serialize(list_0)
        int_0 = None
        integer_0 = module_0.Integer(minimum=int_0, exclusive_minimum=int_0)
        array_1 = module_0.Array(integer_0)
        any_1 = array_1.validate(list_0)
    except BaseException:
        pass

def test_case_73():
    try:
        list_0 = []
        bool_0 = False
        str_0 = '?u{CIlMg?_L'
        any_0 = module_0.Any(title=str_0)
        any_1 = any_0.validate(list_0)
        field_0 = module_0.Field()
        int_0 = -3930
        array_0 = module_0.Array(field_0, field_0, int_0, bool_0)
        any_2 = field_0.get_default_value()
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        dict_0 = {}
        const_0 = module_0.Const(any_2, **dict_0)
        any_3 = const_0.validate(boolean_0)
    except BaseException:
        pass

def test_case_74():
    try:
        str_0 = '1a43&:iuWS-_J#yL/cVQ'
        bool_0 = True
        optional_0 = None
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, min_length=optional_0, format=str_0)
        any_0 = string_0.validate(optional_0, strict=bool_0)
    except BaseException:
        pass

def test_case_75():
    try:
        field_0 = module_0.Field()
        str_0 = 'h=D|k'
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0}
        optional_0 = None
        object_0 = module_0.Object(additional_properties=field_0, min_properties=optional_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_76():
    try:
        str_0 = '@]L8q-'
        string_0 = module_0.String(pattern=str_0)
        any_0 = string_0.validate(str_0)
        any_1 = string_0.validate(string_0)
    except BaseException:
        pass

def test_case_77():
    try:
        str_0 = '"G^9Ec7i'
        string_0 = module_0.String(pattern=str_0)
        bool_0 = False
        any_0 = string_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_78():
    try:
        list_0 = []
        str_0 = "('WGkem^HpD!HO)K\x0b~\n"
        any_0 = module_0.Any(title=str_0)
        list_1 = [list_0, any_0]
        choice_0 = module_0.Choice(choices=list_1)
    except BaseException:
        pass

def test_case_79():
    try:
        list_0 = []
        dict_0 = {}
        array_0 = module_0.Array(list_0, **dict_0)
        any_0 = array_0.serialize(dict_0)
        decimal_0 = None
        any_1 = array_0.validate(decimal_0)
    except BaseException:
        pass

def test_case_80():
    try:
        string_0 = module_0.String()
        str_0 = 'test'
        any_0 = string_0.serialize(str_0)
        str_1 = 'date'
        string_1 = module_0.String(format=str_1)
        str_2 = '2023-01-01'
        any_1 = string_1.serialize(str_2)
    except BaseException:
        pass

def test_case_81():
    try:
        list_0 = []
        str_0 = '?u_{CIlMg?_LZ'
        any_0 = module_0.Any(title=str_0)
        any_1 = any_0.validate(list_0)
        field_0 = module_0.Field()
        int_0 = 1043
        array_0 = module_0.Array(field_0, field_0, int_0)
        any_2 = array_0.validate(any_1)
    except BaseException:
        pass

def test_case_82():
    try:
        dict_0 = {}
        field_0 = module_0.Field()
        float_0 = -259.8
        number_0 = module_0.Number(multiple_of=float_0)
        float_1 = 872.78088
        int_0 = 1566
        number_1 = module_0.Number(minimum=int_0, exclusive_minimum=float_0, **dict_0)
        any_0 = number_1.validate(float_1)
    except BaseException:
        pass

def test_case_83():
    try:
        float_0 = 763.0
        int_0 = 4435
        number_0 = module_0.Number(maximum=float_0, exclusive_minimum=float_0, precision=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_84():
    try:
        str_0 = '\x0bMC)PA`3#P0+'
        bool_0 = False
        field_0 = module_0.Field(description=str_0, allow_null=bool_0)
        str_1 = None
        str_2 = ''
        str_3 = 'JC'
        dict_0 = {str_1: field_0, str_2: str_2, str_3: bool_0, str_0: str_3}
        str_4 = 'b\n3GseDS4NrI|CGJ_'
        bool_1 = False
        boolean_0 = module_0.Boolean(description=str_4, default=str_0, allow_null=bool_1)
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        object_0 = module_0.Object()
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_85():
    try:
        list_0 = []
        int_0 = 4
        decimal_0 = module_0.Decimal(minimum=int_0)
        tuple_0 = (decimal_0,)
        array_0 = module_0.Array(tuple_0)
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_86():
    try:
        float_0 = 3897.052931658195
        number_0 = module_0.Number(multiple_of=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_87():
    try:
        float_0 = -560.353
        int_0 = -3710
        const_0 = module_0.Const(float_0)
        any_0 = const_0.validate(float_0)
        number_0 = module_0.Number(multiple_of=int_0)
        boolean_0 = module_0.Boolean()
        any_1 = number_0.validate(any_0)
    except BaseException:
        pass

def test_case_88():
    try:
        list_0 = []
        any_0 = module_0.Any(default=list_0)
        any_1 = any_0.validate(any_0)
        field_0 = module_0.Field()
        str_0 = 'CJCfh~\\rM^'
        any_2 = module_0.Any(description=str_0)
        any_3 = any_2.validate(any_2)
        int_0 = 996
        array_0 = module_0.Array(field_0, field_0, int_0)
        str_1 = 'unique_items'
        dict_0 = {str_1: list_0}
        array_1 = module_0.Array(field_0, field_0, int_0, int_0, **dict_0)
    except BaseException:
        pass

def test_case_89():
    try:
        str_0 = '1Qqy\x0cm`{fANUysp\n\n'
        list_0 = [str_0, str_0, str_0]
        int_0 = None
        integer_0 = module_0.Integer(exclusive_minimum=int_0)
        field_0 = module_0.Field()
        bool_0 = False
        array_0 = module_0.Array(field_0, field_0, int_0, bool_0)
        bool_1 = field_0.has_default()
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_90():
    try:
        int_0 = 42
        field_0 = module_0.Field(default=int_0)
        any_0 = field_0.get_default_value()
        var_0 = lambda : int_0
        field_1 = module_0.Field(default=var_0)
        any_1 = field_1.get_default_value()
    except BaseException:
        pass