# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        list_0 = []
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.append(list_0)
        str_0 = "mH>i'MqC1ad"
        str_1 = '?UnOE97<$uZ'
        dict_0 = {str_0: str_0, str_1: str_0}
        bool_0 = False
        immutable_list_1 = module_0.ImmutableList(dict_0, bool_0)
        var_1 = immutable_list_1.__add__(var_0)
        var_2 = None
        str_2 = '4'
        immutable_list_2 = module_0.ImmutableList(str_2)
        var_3 = immutable_list_2.__len__()
        var_4 = immutable_list_2.filter(var_2)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '<dF4uKNL\r\r|o{iT'
        list_0 = [str_0, str_0]
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(list_0, bool_0)
        var_0 = immutable_list_0.to_list()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xfe\x88'
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_0 = immutable_list_0.append(bytes_0)
        var_1 = immutable_list_0.filter(var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        object_0 = module_1.object()
        int_0 = 2158
        list_0 = [object_0]
        str_0 = '\n        Take function and applied this function with monad value and returns function result.\n\n        :params binder: function to apply on monad value\n        :type binder: Function(A) -> Try[B]\n        :returns: for successfully result of binder, othercase copy of self\n        :rtype: Try[B]\n        '
        dict_0 = {str_0: list_0}
        str_1 = '\x0c%Nt[\n;2M);G:'
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.append(str_1)
        bool_0 = False
        immutable_list_1 = module_0.ImmutableList(var_0, bool_0)
        var_1 = immutable_list_1.append(dict_0)
        list_1 = []
        immutable_list_2 = module_0.ImmutableList(list_1)
        var_2 = immutable_list_2.__add__(var_1)
        bool_1 = False
        immutable_list_3 = module_0.ImmutableList(list_0, bool_1)
        immutable_list_4 = module_0.ImmutableList()
        float_0 = None
        var_3 = immutable_list_1.append(float_0)
        bool_2 = immutable_list_4.__eq__(object_0)
        var_4 = immutable_list_3.unshift(int_0)
        list_2 = []
        immutable_list_5 = module_0.ImmutableList(list_2)
        var_5 = immutable_list_5.__add__(var_4)
        immutable_list_6 = module_0.ImmutableList(object_0, var_5)
        bool_3 = immutable_list_6.__eq__(object_0)
        int_1 = -1198
        var_6 = immutable_list_3.map(int_1)
    except BaseException:
        pass

def test_case_4():
    try:
        immutable_list_0 = module_0.ImmutableList()
        callable_0 = None
        var_0 = immutable_list_0.map(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "8{+i |p7>Ni#Ex',]}o\r"
        str_1 = '0MnXQ-vl|\\qT'
        bytes_0 = b'H\x86\xf4>N,'
        set_0 = {str_1, str_0}
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(set_0, bool_0)
        var_0 = immutable_list_0.filter(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        object_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.filter(object_0)
    except BaseException:
        pass

def test_case_7():
    try:
        callable_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -2301.0
        var_0 = None
        str_0 = 'jA{\r(T$R$-FK-z(,h6'
        immutable_list_0 = module_0.ImmutableList(str_0)
        var_1 = immutable_list_0.reduce(float_0, var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        list_0 = [bool_0]
        immutable_list_0 = module_0.ImmutableList(bool_0)
        immutable_list_1 = module_0.ImmutableList()
        object_0 = module_1.object()
        bool_1 = False
        immutable_list_2 = module_0.ImmutableList(bool_1)
        immutable_list_3 = module_0.ImmutableList()
        bool_2 = immutable_list_2.__eq__(object_0)
        var_0 = immutable_list_0.unshift(list_0)
        str_0 = 'rY Chc+Tnl%U'
        tuple_0 = (str_0,)
        var_1 = None
        var_2 = immutable_list_3.reduce(tuple_0, var_1)
        var_3 = immutable_list_2.__add__(var_0)
        optional_0 = immutable_list_2.find(var_3)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\n        Transform Either to Maybe.\n\n        :returns: Maybe with previous value\n        :rtype: Maybe[A]\n        '
        str_1 = '\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        '
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(str_1, bool_0)
        optional_0 = immutable_list_0.find(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        immutable_list_0 = module_0.ImmutableList()
        var_0 = None
        var_1 = immutable_list_0.__add__(var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "!V,z{'BPb"
        callable_0 = None
        var_0 = None
        dict_0 = {}
        list_0 = [callable_0, str_0, str_0]
        immutable_list_0 = module_0.ImmutableList(list_0)
        var_1 = immutable_list_0.unshift(dict_0)
        bool_0 = False
        immutable_list_1 = module_0.ImmutableList(var_1, bool_0)
        var_2 = immutable_list_1.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_13():
    try:
        immutable_list_0 = module_0.ImmutableList()
        var_0 = None
        var_1 = immutable_list_0.unshift(var_0)
        var_2 = immutable_list_0.__add__(var_1)
        var_3 = immutable_list_0.unshift(var_0)
        var_4 = immutable_list_0.__len__()
        var_5 = immutable_list_0.__add__(var_2)
        str_0 = immutable_list_0.__str__()
        var_6 = immutable_list_0.to_list()
        bool_0 = True
        str_1 = immutable_list_0.__str__()
        immutable_list_1 = module_0.ImmutableList(bool_0)
        var_7 = immutable_list_1.append(var_0)
        list_0 = []
        object_0 = module_1.object(*list_0)
        bool_1 = immutable_list_0.__eq__(object_0)
        var_8 = immutable_list_1.to_list()
        immutable_list_2 = module_0.ImmutableList(var_3, bool_1)
        var_9 = immutable_list_2.__len__()
    except BaseException:
        pass