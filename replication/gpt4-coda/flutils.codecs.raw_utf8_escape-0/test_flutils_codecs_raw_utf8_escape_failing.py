# Automatically generated by Pynguin.
import collections as module_0
import flutils.codecs.raw_utf8_escape as module_1

def test_case_0():
    try:
        bytes_0 = b' \xf3'
        int_0 = -83
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_0.UserString(tuple_0)
        tuple_1 = module_1.encode(user_string_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xe5>\x1e\xd2MQ,\xce\xf2Tv\xe7,\xb7PQo\xdfQ'
        tuple_0 = module_1.decode(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        byte_string_0 = None
        tuple_0 = module_1.decode(byte_string_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '4!1O.'
        str_1 = '\t:'
        module_1.register()
        str_2 = "Can convert only 'list', 'tuple', 'dict' to a NamedTuple; got: (%r) %s"
        tuple_0 = module_1.encode(str_0, str_0)
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
        user_string_0 = module_0.UserString(dict_0)
        tuple_1 = module_1.encode(str_2, str_2)
        module_1.register()
        tuple_2 = module_1.encode(user_string_0)
        str_3 = 'K?XYc8Z[,&'
        module_1.register()
        tuple_3 = module_1.decode(str_3)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x9f\xe5\x1d\xcdF\x88Ir\xa0z\xa1'
        user_string_0 = module_0.UserString(bytes_0)
        user_string_1 = module_0.UserString(user_string_0)
        tuple_0 = module_1.encode(user_string_1, user_string_0)
    except BaseException:
        pass

def test_case_5():
    try:
        module_1.register()
        bytes_0 = b'\x03k^\xd3\xb2\xae\xce\x91\xa4\xb9\xf8\xb8\x14\x8c}'
        set_0 = {bytes_0, bytes_0}
        user_string_0 = module_0.UserString(set_0)
        tuple_0 = module_1.decode(bytes_0, user_string_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'A loader that creates a module which defers loading until attribute\n    access.\n\n    This class is a "derivative work" of the Python\n    :obj:`importlib.util.LazyLoader`, and is:\n\n    `Copyright Â© 2001-2018 Python Software Foundation; All Rights Reserved\n    <https://bit.ly/2JzG17l>.`_\n\n    This class differs from :obj:`importlib.util.LazyLoader` in that it\n    uses the :obj:`~flutils.moduleutils._LazyModule` class and the\n    ``factory`` class method was removed.\n    '
        tuple_0 = module_1.encode(str_0)
        module_1.register()
        tuple_1 = module_1.encode(str_0)
        str_1 = 'RunCmd'
        tuple_2 = module_1.encode(str_1)
        list_0 = []
        tuple_3 = module_1.decode(list_0)
        module_1.register()
        tuple_4 = None
        user_string_0 = module_0.UserString(tuple_4)
        tuple_5 = module_1.encode(str_0, user_string_0)
        str_2 = 'GNANt3\nc^I<\x0c:b3~}&T'
        tuple_6 = module_1.encode(str_1)
        tuple_7 = module_1.encode(str_2)
        tuple_8 = module_1.encode(user_string_0)
        str_3 = '0Hu4qs%|'
        tuple_9 = module_1.decode(str_3, str_0)
    except BaseException:
        pass