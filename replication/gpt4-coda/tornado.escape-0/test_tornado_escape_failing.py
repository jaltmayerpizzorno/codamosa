# Automatically generated by Pynguin.
import tornado.escape as module_0

def test_case_0():
    try:
        bytes_0 = b'\xc8I\x8e\x82\xa1\x01'
        optional_0 = module_0.utf8(bytes_0)
        any_0 = module_0.json_decode(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        var_0 = module_0.url_unescape(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '`~5\x0cD|-&rzm6y;MAa@'
        str_1 = module_0.xhtml_unescape(str_0)
        var_0 = module_0.url_unescape(str_1)
        bool_0 = None
        var_1 = module_0.url_unescape(str_0, bool_0)
        tuple_0 = (var_0, str_0)
        var_2 = module_0.url_unescape(str_0)
        str_2 = 'A-mX]?fj)T~[6A(R.\t\\A'
        str_3 = ',J/os'
        optional_0 = module_0.to_unicode(str_2)
        str_4 = module_0.linkify(str_3, str_3)
        any_0 = module_0.recursive_unicode(str_3)
        optional_1 = module_0.utf8(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xcas-'
        optional_0 = module_0.utf8(bytes_0)
        any_0 = module_0.recursive_unicode(optional_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Google authentication using OAuth2.\n\n    In order to use, register your application with Google and copy the\n    relevant parameters to your application settings.\n\n    * Go to the Google Dev Console at http://console.developers.google.com\n    * Select a project, or create a new one.\n    * In the sidebar on the left, select APIs & Auth.\n    * In the list of APIs, find the Google+ API service and set it to ON.\n    * In the sidebar on the left, select Credentials.\n    * In the OAuth section of the page, select Create New Client ID.\n    * Set the Redirect URI to point to your auth handler\n    * Copy the "Client secret" and "Client ID" to the application settings as\n      ``{"google_oauth": {"key": CLIENT_ID, "secret": CLIENT_SECRET}}``\n\n    .. versionadded:: 3.2\n    '
        str_1 = module_0.xhtml_escape(str_0)
        bool_0 = True
        str_2 = module_0.linkify(str_1, bool_0, str_1, bool_0)
        var_0 = module_0.url_unescape(str_0)
        optional_0 = module_0.utf8(str_1)
        float_0 = -1787.9
        dict_0 = {str_0: float_0}
        str_3 = module_0.json_encode(str_2)
        bytes_0 = b'\xf9\xb8/\xe1U\x13\xd8\xc0\rg\x03\xe7~\x08\xce\x15z\xd0'
        any_0 = module_0.recursive_unicode(dict_0)
        str_4 = module_0.xhtml_escape(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ',Q'
        bytes_0 = b'\xa8{-\x89\xe2\xb9\x9f\xa7\xc5\xc9'
        bytes_1 = b'\x1e\x9e\xde\x94\xab\x95h\x88\xab\xca'
        bytes_2 = b'vll'
        list_0 = [bytes_0, bytes_1, bytes_2]
        str_1 = 'YQL.CET) 3[V\x0b>y'
        str_2 = 'w'
        list_1 = [bytes_1]
        str_3 = None
        dict_0 = {str_0: list_0, str_1: list_0, str_2: list_1, str_3: list_1}
        any_0 = module_0.recursive_unicode(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\x15\xee\x9e\xfc\t\x0e\x95&k\xce\xa3-\x83\xbf.'
        bool_0 = False
        str_0 = ''
        str_1 = "`8=FU\x0b}3Z ~i3e\x0b'%.T_"
        str_2 = module_0.squeeze(str_1)
        any_0 = module_0.recursive_unicode(str_0)
        str_3 = module_0.url_escape(bytes_0, bool_0)
        any_1 = module_0.json_decode(str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "SH'b&*,\raGf>Hol1"
        bool_0 = False
        var_0 = module_0.url_unescape(str_0, str_0, bool_0)
        bytes_0 = None
        var_1 = module_0.url_unescape(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        bytes_0 = b''
        tuple_0 = (bool_0, bytes_0)
        optional_0 = module_0.to_unicode(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '+X=Bs1O*~macqZV/,b/k'
        tuple_0 = (str_0,)
        tuple_1 = (tuple_0,)
        bool_0 = True
        var_0 = module_0.url_unescape(str_0, bool_0)
        list_0 = [tuple_1, tuple_1, var_0]
        tuple_2 = (tuple_1, str_0, list_0)
        any_0 = module_0.recursive_unicode(tuple_2)
        bytes_0 = b"W\xae']\x02\xa4\x0b"
        optional_0 = module_0.to_unicode(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Google authentication using OAuth2.\n\n    In order to use, register your application with Google and copy the\n    relevant parameters to your application settings.\n\n    * Go to the Google Dev Console at htt://console.develpers.google.com\n    *Select a project, or create a new one.\n    * In the sidebar on the left, select >PIs & Auth.\n    * In the list o APIs, find the Google+ API service and set it to ON.\n    * In the sidebar on the left, select Credentials.\n    * In the OAuth aection of the page, select Create New Client ID.\n    * Set the Redrect URI to point to your auth handler\n    * Copy the "Client +ecrt" and "Client ID" to the application settings as\n      ``{"google_oauth": {"key": CLIENT_ID, "secret": CLIENT_SECRET}}``\n\n    .. versionadded:: 3.2\n    '
        str_1 = module_0.xhtml_escape(str_0)
        str_2 = module_0.xhtml_unescape(str_0)
        bool_0 = True
        dict_0 = module_0.parse_qs_bytes(str_1, bool_0)
        str_3 = module_0.linkify(str_2, bool_0, str_1, bool_0)
        var_0 = module_0.url_unescape(str_2, str_0)
        str_4 = module_0.xhtml_unescape(str_1)
        str_5 = module_0.url_escape(str_4)
        str_6 = module_0.json_encode(str_0)
        dict_1 = module_0.parse_qs_bytes(str_1)
        str_7 = module_0.linkify(str_6, str_2)
        bytes_0 = b'\x18~\x85\x83\x98\xc9\x14q\xf0\xdc\x8e\xc4\x83'
        str_8 = module_0.linkify(str_6)
        var_1 = module_0.url_unescape(str_4)
        str_9 = 'debug'
        str_10 = module_0.xhtml_escape(str_9)
        optional_0 = module_0.utf8(str_9)
        any_0 = module_0.recursive_unicode(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "http:/\x0c6_ol.~evel'rs.og.om\\\\\\"
        str_1 = module_0.xhtml_unescape(str_0)
        bool_0 = True
        str_2 = module_0.linkify(str_1, bool_0, str_1, bool_0)
        any_0 = module_0.recursive_unicode(str_1)
        str_3 = module_0.url_escape(str_1, bool_0)
        str_4 = module_0.json_encode(str_1)
        str_5 = module_0.json_encode(str_2)
        str_6 = module_0.json_encode(str_5)
        list_0 = []
        str_7 = module_0.linkify(str_6, bool_0, list_0)
        var_0 = module_0.url_unescape(str_1, bool_0)
        bytes_0 = b'\xa6\xfe\xb9"\xb3v*\x94\xcc\xa0\x80\x1a\xa1F'
        any_1 = module_0.json_decode(bytes_0)
    except BaseException:
        pass