# Automatically generated by Pynguin.
import tornado.locale as module_0
import gettext as module_1

def test_case_0():
    try:
        str_0 = 'C\r(f'
        str_1 = 'Ol\x0bn^8\r/t>jCr \t-(5q['
        locale_0 = module_0.get()
        module_0.set_default_locale(str_1)
        int_0 = -585
        str_2 = locale_0.friendly_number(int_0)
        locale_1 = module_0.get()
        str_3 = locale_0.pgettext(str_0, str_0, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'V$@7ojL'
        module_0.load_translations(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        module_0.load_gettext_translations(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'pP ~'
        str_1 = '\n        :arg bool color: Enables color support.\n        :arg str fmt: Log message format.\n          It will be applied to the attributes dict of log records. The\n          text between ``%(color)s`` and ``%(end_color)s`` will be colored\n          depending on the level if color support is on.\n        :arg dict colors: color mappings from logging level to terminal color\n          code\n        :arg str datefmt: Datetime format.\n          Used for formatting ``(asctime)`` placeholder in ``prefix_fmt``.\n\n        .. versionchanged:: 3.2\n\n           Added ``fmt`` and ``datefmt`` arguments.\n        '
        str_2 = ''
        list_0 = [str_1, str_1, str_1, str_2]
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_2, null_translations_0)
        locale_0 = module_0.get(*list_0)
        str_3 = locale_0.pgettext(str_0, str_0)
        iterable_0 = module_0.get_supported_locales()
        str_4 = '\rG] CgIaOT'
        module_0.set_default_locale(str_4)
        str_5 = 'Tzt+'
        locale_1 = module_0.Locale(str_5)
    except BaseException:
        pass

def test_case_4():
    try:
        locale_0 = module_0.get()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '1 minute ago'
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '(DMAF'
        str_1 = "0'yC04s\x0cpDl\\"
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_1, null_translations_0)
        str_2 = gettext_locale_0.translate(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'HV|+n<Ly@\t9#'
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_0, null_translations_0)
        str_1 = 'qt;'
        module_0.set_default_locale(str_1)
        int_0 = -275
        datetime_0 = None
        locale_0 = module_0.get()
        bool_0 = locale_0.format_day(datetime_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'en'
        locale_0 = module_0.get()
        str_1 = locale_0.list(str_0)
        int_0 = 711
        str_2 = "`H'v_45\x0b\n\rp<1Di\x0c^"
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_2, null_translations_0)
        str_3 = gettext_locale_0.pgettext(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ';h'
        str_1 = '2\x0b7m}C3[o@%<'
        int_0 = 2912
        locale_0 = module_0.get()
        str_2 = locale_0.friendly_number(int_0)
        dict_0 = {}
        str_3 = 'e[1Vv'
        dict_1 = {str_1: dict_0, str_1: dict_0, str_3: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_1)
        str_4 = 'client_secret'
        locale_1 = module_0.Locale(str_4)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'C\r(f'
        str_1 = 'Ol\x0bn^8\r/t>jCr \t-(5q['
        locale_0 = module_0.get()
        int_0 = -585
        str_2 = locale_0.friendly_number(int_0)
        str_3 = locale_0.pgettext(str_0, str_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'HEV*q'
        dict_0 = None
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = 'Invalid cookie %r: %r'
        int_0 = 65536
        str_2 = '[mLrZs1X7\\\tYf}NR'
        list_0 = [str_2, str_1]
        locale_0 = module_0.get(*list_0)
        str_3 = locale_0.friendly_number(int_0)
        module_0.load_gettext_translations(str_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'pP ~'
        str_1 = '\n        :arg bool color: Enables color support.\n        :arg str fmt: Log message format.\n          It will be applied to the attributes dict of log records. The\n          text between ``%(color)s`` and ``%(end_color)s`` will be colored\n          depending on the level if color support is on.\n        :arg dict colors: color mappings from logging level to terminal color\n          code\n        :arg str datefmt: Datetime format.\n          Used for formatting ``(asctime)`` placeholder in ``prefix_fmt``.\n\n        .. versionchanged:: 3.2\n\n           Added ``fmt`` and ``datefmt`` arguments.\n        '
        str_2 = ''
        list_0 = [str_1, str_1, str_1, str_2]
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_2, null_translations_0)
        locale_0 = module_0.get(*list_0)
        str_3 = locale_0.pgettext(str_0, str_0)
        iterable_0 = module_0.get_supported_locales()
        int_0 = 127
        str_4 = 'gU'
        str_5 = '4P7=trlBc?yw5'
        str_6 = gettext_locale_0.pgettext(str_4, str_5)
        str_7 = ''
        str_8 = gettext_locale_0.translate(str_3, str_7, int_0)
        str_9 = 'm%o'
        str_10 = gettext_locale_0.pgettext(str_9, str_5)
        str_11 = locale_0.list(str_9)
        str_12 = gettext_locale_0.translate(str_1)
        str_13 = 'all_tasks'
        str_14 = 'TN n\x0cW53GC(@{x}|R+'
        module_0.load_gettext_translations(str_13, str_14)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = ',"8S'
        module_0.set_default_locale(str_0)
        str_1 = "k\r'?op"
        null_translations_0 = module_1.NullTranslations()
        locale_0 = module_0.get()
        str_2 = 'L6'
        int_0 = 1165
        str_3 = locale_0.friendly_number(int_0)
        dict_0 = {str_1: str_0, str_2: str_2}
        var_0 = null_translations_0.gettext(dict_0)
        null_translations_1 = module_1.NullTranslations(null_translations_0)
        gettext_locale_0 = module_0.GettextLocale(str_0, null_translations_1)
        bool_0 = False
        int_1 = 3136
        str_4 = 'gGI%$n7xRO'
        list_0 = [str_2, str_4]
        locale_1 = module_0.get(*list_0)
        str_5 = locale_1.format_date(int_0, int_1)
        gettext_locale_1 = module_0.GettextLocale(str_2, null_translations_0)
        int_2 = None
        str_6 = locale_1.format_date(int_2, bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'fa'
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass