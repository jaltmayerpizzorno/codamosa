

# Generated at 2024-03-18 08:20:22.219323
```python
    import tempfile
    import shutil
    import os

    def test_load_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a sample CSV file with translations
            es_csv = os.path.join(temp_dir, "es.csv")
            with open(es_csv, "w", encoding="utf-8") as f:
                f.write('"Hello, world!","¡Hola, mundo!"\n')
                f.write('"Goodbye","Adiós"\n')
                f.write('"%(name)s liked this","A %(name)s le gustó esto","singular"\n')
                f.write('"%(name)s liked this","A %(name)s les gustó esto","plural"\n')

            # Load the translations
            load_translations(temp_dir)

            # Check if the translations were loaded correctly
            assert "es" in _translations, "Spanish translations should be loaded."
            assert

# Generated at 2024-03-18 08:20:31.802762
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test cases for format_date
    test_cases = [
        # (input_date, gmt_offset, relative, shorter, full_format, expected_output)
        (datetime.datetime(2023, 4, 1, 12, 0), 0, True, False, False, "April 1 at 12:00 pm"),
        (datetime.datetime(2023, 4, 1, 12, 0), 0, False, False, False, "April 1 at 12:00 pm"),
        (datetime.datetime(2023, 4, 1, 12, 0), 0, False, False, True, "April 1, 2023 at 12:00 pm"),
        (datetime.datetime.utcnow() - datetime.timedelta(seconds=10), 0, True, False, False, "1 second ago

# Generated at 2024-03-18 08:20:44.098143
```python
    import tempfile
    import shutil
    import os

    def test_load_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a sample CSV file with translations
            es_csv = os.path.join(temp_dir, "es.csv")
            with open(es_csv, "w", encoding="utf-8") as f:
                f.write('"Hello, world!","¡Hola, mundo!"\n')
                f.write('"Goodbye","Adiós"\n')

            # Load translations from the temporary directory
            load_translations(temp_dir)

            # Check if the translations were loaded correctly
            assert "es" in _translations, "Spanish translations should be loaded"
            assert _translations["es"]["unknown"]["Hello, world!"] == "¡Hola, mundo!", \
                "The translation for 'Hello, world!' should be '¡Hola, mundo!'"
            assert _translations

# Generated at 2024-03-18 08:20:53.180454
    # Test with day of week included
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 1), dow=True) == "Saturday, April 1"
    assert Locale('en_US').format_day(datetime.datetime(2023, 12, 25), dow=True) == "Monday, December 25"

    # Test with day of week excluded
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 1), dow=False) == "April 1"
    assert Locale('en_US').format_day(datetime.datetime(2023, 12, 25), dow=False) == "December 25"

    # Test with non-English locale
    assert Locale('fr_FR').format_day(datetime.datetime(2023, 4, 1), dow=True) == "samedi, avril 1"
    assert Locale('fr_FR').format_day(datetime.datetime(2023, 

# Generated at 2024-03-18 08:21:00.707878
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime and GMT offset
    test_date = datetime.datetime(2023, 4, 15, 12, 30)  # April 15, 2023, 12:30 PM
    gmt_offset = 0  # GMT offset in minutes

    # Test with day of week included
    formatted_date_with_dow = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_date_with_dow == "Saturday, April 15"

    # Test without day of week included
    formatted_date_without_dow = locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_date_without_dow == "April 15"

    # Test with a different GMT offset
    gmt_offset = -300  # GMT offset for Eastern Time (ET)
    formatted_date_with_offset = locale.format

# Generated at 2024-03-18 08:21:02.430884
```python
import os
import tempfile
import unittest
from tornado.locale import load_gettext_translations, _translations, _supported_locales, _use_gettext


# Generated at 2024-03-18 08:21:09.452110
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime, GMT offset, and relative set to False
    specific_date = datetime.datetime(2023, 3, 14, 15, 9)  # March 14, 2023, 15:09
    formatted_date = locale.format_date(specific_date, gmt_offset=0, relative=False)
    assert formatted_date == "March 14, 2023 at 3:09 pm", f"Expected 'March 14, 2023 at 3:09 pm', got '{formatted_date}'"

    # Test with a specific datetime, GMT offset, and relative set to True
    now = datetime.datetime.utcnow()
    seconds_ago = (now - specific_date).total_seconds()
    if seconds_ago < 60:
        expected = "1 second ago"
    elif seconds_ago < 3600:


# Generated at 2024-03-18 08:21:18.520806
```python
    def test_Locale_constructor():
        # Test with a known locale
        known_locale = Locale.get('en_US')
        assert known_locale.code == 'en_US'
        assert known_locale.name == 'English (United States)'
        assert not known_locale.rtl

        # Test with a right-to-left locale
        rtl_locale = Locale.get('ar')
        assert rtl_locale.code == 'ar'
        assert rtl_locale.rtl

        # Test with an unknown locale
        unknown_locale = Locale.get('xx_XX')
        assert unknown_locale.code == 'xx_XX'
        assert unknown_locale.name == 'Unknown'
        assert not unknown_locale.rtl

        # Test with a locale that should default to the default locale
        default_locale = Locale.get(_default_locale)
        assert default_locale.code == _default_locale
        assert default_locale.name == LOCALE_NAMES.get(_default_locale, {}).get("name", u"Unknown")
        assert not

# Generated at 2024-03-18 08:21:28.423993
```python
    import tempfile
    import shutil
    import os

    def test_load_gettext_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a fake locale directory structure and .mo file
            locale_dir = os.path.join(temp_dir, 'en_US', 'LC_MESSAGES')
            os.makedirs(locale_dir)
            with open(os.path.join(locale_dir, 'messages.mo'), 'w') as f:
                f.write('')

            # Load the gettext translations
            load_gettext_translations(temp_dir, 'messages')

            # Check if the locale is now supported
            assert 'en_US' in _supported_locales
            assert _use_gettext is True
            assert isinstance(_translations['en_US'], gettext.NullTranslations)
        finally:
            # Remove the temporary directory
            shutil.rmtree(temp_dir)
```

# Generated at 2024-03-18 08:21:35.243403
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Define a fixed date for testing
    test_date = datetime.datetime(2023, 4, 15, 12, 30)  # April 15, 2023, 12:30 PM
    gmt_offset = 0  # GMT offset in minutes

    # Test with day of week (dow=True)
    formatted_with_dow = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_with_dow == "Saturday, April 15"

    # Test without day of week (dow=False)
    formatted_without_dow = locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_without_dow == "April 15"

    # Test with a different GMT offset
    gmt_offset = -300  # GMT offset for Eastern Time (ET)
    formatted_with_offset = locale.format_day

# Generated at 2024-03-18 08:22:02.517817
    # Test initialization of Locale with different codes
    locale_en = Locale('en')
    assert locale_en.code == 'en'
    assert locale_en.name == 'English'
    assert not locale_en.rtl

    locale_fa = Locale('fa')
    assert locale_fa.code == 'fa'
    assert locale_fa.name == 'Farsi'
    assert locale_fa.rtl

    locale_he = Locale('he')
    assert locale_he.code == 'he'
    assert locale_he.name == 'Hebrew'
    assert locale_he.rtl

    # Test initialization with a non-existent locale code
    locale_xx = Locale('xx')
    assert locale_xx.code == 'xx'
    assert locale_xx.name == 'Unknown'
    assert not locale_xx.rtl

    # Test initialization with a locale code with country code
    locale_en_US = Locale('en_US')
    assert locale_en_US.code == 'en_US'
    assert locale_en_US.name == 'English (

# Generated at 2024-03-18 08:22:09.916032
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime, GMT offset, and relative set to False
    specific_date = datetime.datetime(2023, 3, 14, 15, 9)  # Pi Day 2023, 3:14 PM
    formatted_date = locale.format_date(specific_date, gmt_offset=0, relative=False)
    assert formatted_date == "March 14, 2023 at 3:09 pm", f"Expected 'March 14, 2023 at 3:09 pm', got '{formatted_date}'"

    # Test with a specific datetime, GMT offset, and relative set to True
    now = datetime.datetime.utcnow()
    seconds_ago = (now - datetime.timedelta(seconds=45)).replace(microsecond=0)
    formatted_date = locale.format_date(seconds_ago, gmt_offset=0, relative=True)
   

# Generated at 2024-03-18 08:22:16.954831
```python
    import tempfile
    import shutil
    import os

    def test_load_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a sample CSV file with translations
            sample_csv_content = '''"Hello, world!","¡Hola, mundo!"
"%(username)s liked this","A %(username)s le gustó esto","singular"
"%(username)s liked this","A %(username)s les gustó esto","plural"'''
            sample_locale = 'es_LA'
            sample_csv_filename = sample_locale + '.csv'
            sample_csv_path = os.path.join(temp_dir, sample_csv_filename)
            with open(sample_csv_path, 'w', encoding='utf-8') as f:
                f.write(sample_csv_content)

            # Load translations from the temporary directory
            load_translations(temp_dir)

            # Check if the translations were loaded correctly
            assert sample_locale in _translations, "Locale not

# Generated at 2024-03-18 08:22:22.872926
```python
    import tempfile
    import shutil
    import unittest

    class TestLoadGettextTranslations(unittest.TestCase):
        def setUp(self):
            self.test_dir = tempfile.mkdtemp()

        def tearDown(self):
            shutil.rmtree(self.test_dir)

        def test_loading_valid_translations(self):
            # Create a dummy .mo file to simulate a translation
            lang = 'es'
            domain = 'test_domain'
            locale_dir = os.path.join(self.test_dir, lang, 'LC_MESSAGES')
            os.makedirs(locale_dir)
            with open(os.path.join(locale_dir, domain + '.mo'), 'wb') as f:
                f.write(b'\xde\x12\x04\x95\x00\x00\x00\x00')

            # Load the translation and check if it's in the supported locales
            load_gettext_translations(self.test_dir, domain)
            self.assertIn(lang, _supported_locales)

        def test_loading_invalid_translations(self):
            # Attempt

# Generated at 2024-03-18 08:22:23.774480
```python
import os
import tempfile
import unittest


# Generated at 2024-03-18 08:22:33.342156
```python
    import tempfile
    import shutil
    import os

    # Create a temporary directory to simulate the locale directory structure
    temp_dir = tempfile.mkdtemp()
    try:
        # Create a fake locale directory and .mo file
        locale_dir = os.path.join(temp_dir, 'en_US', 'LC_MESSAGES')
        os.makedirs(locale_dir)
        with open(os.path.join(locale_dir, 'messages.mo'), 'w') as f:
            f.write('')

        # Load the gettext translations
        load_gettext_translations(temp_dir, 'messages')

        # Check if the 'en_US' locale is now supported
        assert 'en_US' in _supported_locales, "en_US should be in supported locales"
        assert _use_gettext, "_use_gettext should be True"
        assert 'en_US' in _translations, "en_US should be in translations"
    finally:
        # Clean up the temporary directory
        shutil

# Generated at 2024-03-18 08:22:39.333671
```python
    import tempfile
    import shutil
    import os

    def test_load_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a sample CSV file with translations
            es_csv = os.path.join(temp_dir, "es.csv")
            with open(es_csv, "w", encoding="utf-8") as f:
                f.write('"Hello, world!","¡Hola, mundo!"\n')
                f.write('"Goodbye","Adiós"\n')

            # Load translations from the temporary directory
            load_translations(temp_dir)

            # Check if the translations were loaded correctly
            assert "es" in _translations, "Spanish translations should be loaded."
            assert _translations["es"]["unknown"]["Hello, world!"] == "¡Hola, mundo!", \
                "The translation for 'Hello, world!' should be '¡Hola, mundo!'."
            assert _

# Generated at 2024-03-18 08:22:44.920659
```python
    import tempfile
    import shutil
    import os

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Create a sample CSV file with translations
    es_csv = os.path.join(temp_dir, "es.csv")
    with open(es_csv, "w", encoding="utf-8") as f:
        f.write('"Hello, world!","¡Hola, mundo!"\n')
        f.write('"Goodbye","Adiós"\n')
        f.write('"%(name)s liked this","A %(name)s le gustó esto","singular"\n')
        f.write('"%(name)s liked this","A %(name)s les gustó esto","plural"\n')

    # Load the translations
    load_translations(temp_dir)

    # Check if the translations were loaded correctly
    assert "es" in _translations, "Spanish translations should be loaded."
    assert _translations["es"]["unknown"]["Hello, world

# Generated at 2024-03-18 08:22:52.728745
    # Test with day of week included
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 1), dow=True) == "Saturday, April 1"
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 2), dow=True) == "Sunday, April 2"
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 3), dow=True) == "Monday, April 3"

    # Test without day of week
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 1), dow=False) == "April 1"
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 2), dow=False) == "April 2"
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 3), dow=False) == "April

# Generated at 2024-03-18 08:22:54.210179
```python
import gettext

# Assuming CONTEXT_SEPARATOR is defined somewhere in the code
CONTEXT_SEPARATOR = "\x04"


# Generated at 2024-03-18 08:23:23.249524
```python
    import tempfile
    import shutil
    import os

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Create a sample CSV file with translations
    es_csv_content = '''"I love you","Te amo"
"%(name)s liked this","A %(name)s le gustó esto","singular"
"%(name)s liked this","A %(name)s les gustó esto","plural"'''

    es_csv_path = os.path.join(temp_dir, 'es_LA.csv')
    with open(es_csv_path, 'w', encoding='utf-8') as f:
        f.write(es_csv_content)

    # Load translations from the temporary directory
    load_translations(temp_dir)

    # Check if the translations were loaded correctly
    assert 'es_LA' in _translations, "Spanish translations should be loaded"
    assert _translations['es_LA']['singular']["%(name)s liked this"] == "A %(name)s le gust

# Generated at 2024-03-18 08:23:31.822892
    # Test with day of week included
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 1), dow=True) == "Saturday, April 1"
    assert Locale('en_US').format_day(datetime.datetime(2023, 12, 25), dow=True) == "Monday, December 25"

    # Test without day of week
    assert Locale('en_US').format_day(datetime.datetime(2023, 4, 1), dow=False) == "April 1"
    assert Locale('en_US').format_day(datetime.datetime(2023, 12, 25), dow=False) == "December 25"

    # Test with different locale
    assert Locale('fr_FR').format_day(datetime.datetime(2023, 4, 1), dow=True) == "samedi, avril 1"
    assert Locale('fr_FR').format_day(datetime.datetime(2023, 12, 

# Generated at 2024-03-18 08:23:40.181243
```python
    # Assume the following setup for the test
    locale = Locale.get('en_US')
    context = "menu"
    message = "file"
    plural_message = "files"
    count = 1

    # Test for singular translation with context
    assert locale.pgettext(context, message) == "file"

    # Test for plural translation with context
    assert locale.pgettext(context, message, plural_message, 2) == "files"

    # Test for singular translation with context and count
    assert locale.pgettext(context, message, plural_message, count) == "file"

    # Test for missing translation with context (should return the original message)
    missing_message = "nonexistent"
    assert locale.pgettext(context, missing_message) == missing_message

    # Test for missing plural translation with context (should return the original plural message)
    assert locale.pgettext(context, missing_message, plural_message, 2) == plural_message



# Generated at 2024-03-18 08:23:48.745303
    import tempfile
    import shutil
    import unittest

    class TestLoadGettextTranslations(unittest.TestCase):
        def setUp(self):
            self.test_dir = tempfile.mkdtemp()
            os.makedirs(os.path.join(self.test_dir, 'en_US', 'LC_MESSAGES'))
            with open(os.path.join(self.test_dir, 'en_US', 'LC_MESSAGES', 'test_domain.mo'), 'wb') as f:
                f.write(b'')  # empty file, just to exist

        def tearDown(self):
            shutil.rmtree(self.test_dir)

        def test_loading_valid_translations(self):
            load_gettext_translations(self.test_dir, 'test_domain')
            self.assertIn('en_US', _translations)
            self.assertTrue(_use_gettext)

        def test_loading_invalid_translations(self):
            with self.assertRaises(FileNotFoundError):
                load_gettext_translations(self.test_dir, 'nonexistent_domain')

    unittest.main()

# Note: The actual unit test code would typically be in a

# Generated at 2024-03-18 08:23:55.612035
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime and GMT offset
    test_date = datetime.datetime(2023, 3, 14, 15, 9)  # March 14, 2023, 3:09 PM
    gmt_offset = 0  # GMT offset in minutes

    # Test with day of week included
    formatted_date_with_dow = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_date_with_dow == "Tuesday, March 14"

    # Test without day of week included
    formatted_date_without_dow = locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_date_without_dow == "March 14"

    # Test with a non-zero GMT offset (e.g., GMT+2 hours)
    gmt_offset = 120  # GMT offset in minutes
    formatted

# Generated at 2024-03-18 08:24:01.609614
```python
    def test_GettextLocale_pgettext():
        locale = GettextLocale('en', gettext.NullTranslations())
        # Test with no plural message and no context
        assert locale.pgettext('context', 'message') == 'message'
        # Test with plural message, count, and context
        assert locale.pgettext('context', 'message', 'messages', 1) == 'message'
        assert locale.pgettext('context', 'message', 'messages', 2) == 'messages'
        # Test with context that has no translation
        assert locale.pgettext('unknown_context', 'message') == 'message'
        # Test with plural message, count, and context that has no translation
        assert locale.pgettext('unknown_context', 'message', 'messages', 1) == 'message'
        assert locale.pgettext('unknown_context', 'message', 'messages', 2) == 'messages'
```

# Generated at 2024-03-18 08:24:08.274051
```python
    import tempfile
    import shutil
    import os

    def test_load_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a sample CSV file with translations
            es_csv = os.path.join(temp_dir, "es.csv")
            with open(es_csv, "w", encoding="utf-8") as f:
                f.write('"Hello, world!","¡Hola, mundo!"\n')
                f.write('"Goodbye","Adiós"\n')
                f.write('"%(name)s liked this","A %(name)s le gustó esto","singular"\n')
                f.write('"%(name)s liked this","A %(name)s les gustó esto","plural"\n')

            # Load translations from the temporary directory
            load_translations(temp_dir)

            # Check if the translations were loaded correctly
            assert "es" in _translations, "Spanish translations should be loaded

# Generated at 2024-03-18 08:24:17.475479
```python
    import tempfile
    import shutil
    import os

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Create a sample CSV file with translations
    es_csv_content = '''"I love you","Te amo"
"%(name)s liked this","A %(name)s le gustó esto","singular"
"%(name)s liked this","A %(name)s les gustó esto","plural"'''

    es_csv_path = os.path.join(temp_dir, 'es_LA.csv')
    with open(es_csv_path, 'w', encoding='utf-8') as f:
        f.write(es_csv_content)

    # Load translations from the temporary directory
    load_translations(temp_dir)

    # Check if the translations were loaded correctly
    assert 'es_LA' in _translations, "Spanish translations should be loaded."
    assert _translations['es_LA']['singular']["%(name)s liked this"] == "A %(name)s le gust

# Generated at 2024-03-18 08:24:18.377726
```python
import unittest


# Generated at 2024-03-18 08:24:26.461204
```python
    import tempfile
    import shutil
    import unittest

    class TestLoadGettextTranslations(unittest.TestCase):
        def setUp(self):
            self.test_dir = tempfile.mkdtemp()
            os.makedirs(os.path.join(self.test_dir, 'es', 'LC_MESSAGES'))
            with open(os.path.join(self.test_dir, 'es', 'LC_MESSAGES', 'test.mo'), 'wb') as f:
                f.write(b'')  # Empty file for test purposes

        def tearDown(self):
            shutil.rmtree(self.test_dir)

        def test_loading_valid_translations(self):
            load_gettext_translations(self.test_dir, 'test')
            self.assertIn('es', _translations)
            self.assertTrue(isinstance(_translations['es'], gettext.NullTranslations))

        def test_loading_invalid_translations(self):
            with self.assertRaises(FileNotFoundError):
                load_gettext_translations(self.test_dir, 'nonexistent')

    if __name__ == '__main__':
        unittest.main()
```

# Generated at 2024-03-18 08:24:57.216012
```python
    import tempfile
    import shutil
    import os

    def test_load_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a sample CSV file for a fake locale
            sample_locale = 'xx_XX'
            sample_csv_content = (
                '"Hello, world!","Hallo, Welt!"\n'
                '"Goodbye","Auf Wiedersehen"\n'
            )
            with open(os.path.join(temp_dir, f'{sample_locale}.csv'), 'w') as f:
                f.write(sample_csv_content)

            # Load translations from the temporary directory
            load_translations(temp_dir)

            # Check if the sample locale is now supported
            assert sample_locale in _supported_locales

            # Check if translations are loaded correctly
            assert _translations[sample_locale]['unknown']['Hello, world!'] == 'Hallo, Welt!'
            assert _translations[sample_locale]['

# Generated at 2024-03-18 08:25:04.730888
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime and GMT offset
    test_date = datetime.datetime(2023, 4, 15, 12, 30)  # April 15, 2023, 12:30 PM
    gmt_offset = 0  # GMT offset in minutes

    # Test with day of week included
    formatted_date_with_dow = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_date_with_dow == "Saturday, April 15"

    # Test without day of week included
    formatted_date_without_dow = locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_date_without_dow == "April 15"

    # Test with a non-zero GMT offset (e.g., GMT+2)
    gmt_offset = 120  # GMT offset in minutes for GMT+2

# Generated at 2024-03-18 08:25:11.046469
```python
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Create a sample CSV file for Spanish translations
    es_csv_content = '''"I love you","Te amo"
"%(name)s liked this","A %(name)s le gustó esto","singular"
"%(name)s liked this","A %(name)s les gustó esto","plural"'''

    es_csv_path = os.path.join(temp_dir, 'es_LA.csv')
    with open(es_csv_path, 'w', encoding='utf-8') as f:
        f.write(es_csv_content)

    # Load translations from the temporary directory
    load_translations(temp_dir)

    # Check if the translations were loaded correctly
    assert 'es_LA' in _translations, "Spanish translations not loaded"
    assert _translations['es_LA']['singular']["%(name)s liked this"] == "A %(name)s le gustó esto", "

# Generated at 2024-03-18 08:25:17.349676
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime, GMT offset, and relative set to False
    specific_date = datetime.datetime(2023, 4, 1, 15, 30)
    formatted_date = locale.format_date(specific_date, gmt_offset=0, relative=False)
    assert formatted_date == "April 1, 2023 at 3:30 pm", f"Expected 'April 1, 2023 at 3:30 pm', got '{formatted_date}'"

    # Test with a specific datetime, GMT offset, and relative set to True
    now = datetime.datetime.utcnow()
    seconds_ago = (now - datetime.timedelta(seconds=45)).replace(microsecond=0)
    formatted_date = locale.format_date(seconds_ago, gmt_offset=0, relative=True)
    assert formatted_date == "1 minute ago", f"Expected '1

# Generated at 2024-03-18 08:25:19.106608
```python
import unittest
import tempfile
import shutil
import os


# Generated at 2024-03-18 08:25:26.659167
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test cases with different dates and gmt_offset values
    test_cases = [
        (datetime.datetime(2023, 4, 1, 12, 0), 0, True, "Saturday, April 1"),
        (datetime.datetime(2023, 4, 1, 12, 0), 0, False, "April 1"),
        (datetime.datetime(2023, 12, 25, 12, 0), -300, True, "Monday, December 25"),
        (datetime.datetime(2023, 12, 25, 12, 0), -300, False, "December 25"),
    ]

    # Run the test cases
    for date, gmt_offset, dow, expected in test_cases:
        assert locale.format_day(date, gmt_offset, dow) == expected

#

# Generated at 2024-03-18 08:25:35.812320
```python
    import tempfile
    import shutil
    import os

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Create a sample CSV file with translations
    sample_csv_content = '''"I love you","Te amo"
"%(name)s liked this","A %(name)s les gustó esto","plural"
"%(name)s liked this","A %(name)s le gustó esto","singular"'''

    sample_csv_path = os.path.join(temp_dir, 'es_LA.csv')
    with open(sample_csv_path, 'w', encoding='utf-8') as f:
        f.write(sample_csv_content)

    # Load translations from the temporary directory
    load_translations(temp_dir)

    # Check if the translations were loaded correctly
    assert 'es_LA' in _translations, "Locale 'es_LA' not loaded"
    assert _translations['es_LA']['singular']["%(name)s liked this"] == "A %(name)s

# Generated at 2024-03-18 08:25:44.540293
    # Setup
    locale_en = Locale.get('en_US')
    locale_fr = Locale.get('fr_FR')

    # Test with relative dates in English
    now = datetime.datetime.utcnow()
    one_hour_ago = now - datetime.timedelta(hours=1)
    assert locale_en.format_date(one_hour_ago.timestamp()) == "1 hour ago"

    # Test with absolute dates in English
    assert locale_en.format_date(one_hour_ago.timestamp(), relative=False).endswith(one_hour_ago.strftime('%I:%M %p'))

    # Test with relative dates in French
    assert locale_fr.format_date(one_hour_ago.timestamp()) == "il y a 1 heure"

    # Test with full format in English
    assert locale_en.format_date(one_hour_ago.timestamp(), full_format=True) == one_hour_ago.strftime('%B %d, %Y at %I:%M %p')

    # Test with future dates in English
    one_hour_future =

# Generated at 2024-03-18 08:25:51.172224
    # Setup a Locale instance
    locale = Locale('en_US')

    # Mock datetime with fixed now
    fixed_now = datetime.datetime(2023, 4, 1, 12, 0, 0)
    with unittest.mock.patch('datetime.datetime') as mock_datetime:
        mock_datetime.utcnow.return_value = fixed_now

        # Test cases
        test_cases = [
            # (input_date, gmt_offset, relative, shorter, full_format, expected_output)
            (fixed_now - datetime.timedelta(seconds=10), 0, True, False, False, "1 minute ago"),
            (fixed_now - datetime.timedelta(minutes=1), 0, True, False, False, "1 minute ago"),
            (fixed_now - datetime.timedelta(hours=1), 0, True, False, False, "1 hour ago"),
            (fixed_now - datetime.timedelta(days=1), 0, True, False, False, "yesterday at

# Generated at 2024-03-18 08:25:57.543529
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime and GMT offset
    test_date = datetime.datetime(2023, 4, 15, 12, 30)  # April 15, 2023, 12:30 PM
    gmt_offset = 0  # GMT offset in minutes

    # Test with day of week included
    formatted_date_with_dow = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_date_with_dow == "Saturday, April 15"

    # Test without day of week included
    formatted_date_without_dow = locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_date_without_dow == "April 15"

    # Test with a different GMT offset
    gmt_offset = -300  # GMT offset in minutes (e.g., Eastern Time UTC-5)
    formatted

# Generated at 2024-03-18 08:26:24.653272
```python
    import tempfile
    import shutil
    import os

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Create a sample CSV file for a fake locale
    sample_csv_content = '''"Hello, world!","Hola, mundo!"
"%(username)s logged in","%(username)s inició sesión","singular"
"%(username)s logged in","%(username)s iniciaron sesión","plural"
'''
    sample_locale = 'es_FAKE'
    sample_csv_filename = sample_locale + '.csv'
    sample_csv_path = os.path.join(temp_dir, sample_csv_filename)

    with open(sample_csv_path, 'w', encoding='utf-8') as f:
        f.write(sample_csv_content)

    # Load the translations using the function to be tested
    load_translations(temp_dir)

    # Check if the sample locale is now supported
    assert sample_locale in _supported_locales, "Locale not added to supported locales"

   

# Generated at 2024-03-18 08:26:31.845565
    # Setup a Locale instance with a mock translation function
    locale = Locale('en_US')
    locale.translate = MagicMock(side_effect=lambda *args, **kwargs: args[0])

    # Test cases for pgettext
    test_cases = [
        (("context", "message"), "message"),
        (("context", "message", "plural_message", 2), "plural_message"),
        (("context", "message", "plural_message", 1), "message"),
    ]

    for args, expected in test_cases:
        assert locale.pgettext(*args) == expected, f"pgettext({args}) == {expected}"

    # Verify that the mocked translate function was called with the correct arguments
    locale.translate.assert_has_calls([
        call("context\u0004message"),
        call("context\u0004plural_message", "context\u0004plural_message", 2),
        call("context\u0004message", "context\u0004plural_message", 1

# Generated at 2024-03-18 08:26:41.012275
    # Test with empty list
    assert Locale('en').list([]) == ""

    # Test with one item
    assert Locale('en').list(['Apple']) == "Apple"

    # Test with two items
    assert Locale('en').list(['Apple', 'Banana']) == "Apple and Banana"

    # Test with three items
    assert Locale('en').list(['Apple', 'Banana', 'Cherry']) == "Apple, Banana and Cherry"

    # Test with four items
    assert Locale('en').list(['Apple', 'Banana', 'Cherry', 'Date']) == "Apple, Banana, Cherry and Date"

    # Test with Persian locale and two items
    assert Locale('fa').list(['سیب', 'موز']) == "سیب \u0648 موز"

    # Test with Persian locale and three items
    assert Locale('fa').list(['سیب', '

# Generated at 2024-03-18 08:26:47.638509
    # Setup a Locale instance
    locale = Locale('en_US')

    # Mock datetime and timedelta
    with unittest.mock.patch('datetime.datetime') as mock_datetime:
        # Mock now
        mock_datetime.utcnow.return_value = datetime.datetime(2023, 4, 1, 12, 0, 0)
        # Mock timedelta
        mock_datetime.timedelta = datetime.timedelta

        # Test cases
        test_cases = [
            # (input_date, gmt_offset, relative, shorter, full_format, expected_output)
            (datetime.datetime(2023, 4, 1, 11, 59, 0), 0, True, False, False, "1 minute ago"),
            (datetime.datetime(2023, 3, 31, 12, 0, 0), 0, True, False, False, "yesterday"),
            (datetime.datetime(2023, 3, 25, 12

# Generated at 2024-03-18 08:26:57.691441
```python
    import tempfile
    import shutil
    import os

    def test_load_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a sample CSV file for a fake locale
            sample_locale = 'xx_XX'
            sample_csv_content = (
                '"Hello, world!","Hallo, Welt!"\n'
                '"Goodbye","Auf Wiedersehen"\n'
            )
            with open(os.path.join(temp_dir, f'{sample_locale}.csv'), 'w') as f:
                f.write(sample_csv_content)

            # Load translations from the temporary directory
            load_translations(temp_dir)

            # Check if the sample locale is now supported
            assert sample_locale in _supported_locales

            # Check if translations were loaded correctly
            assert _translations[sample_locale]['unknown']['Hello, world!'] == 'Hallo, Welt!'
            assert _translations[sample_locale]['

# Generated at 2024-03-18 08:27:10.026535
    # Setup a Locale instance
    locale = Locale('en_US')

    # Define a date for testing
    test_date = datetime.datetime(2023, 3, 15, 12, 30)  # March 15, 2023, at 12:30 PM

    # Test with day of week included
    formatted_with_dow = locale.format_day(test_date, gmt_offset=0, dow=True)
    assert formatted_with_dow == "Wednesday, March 15"

    # Test without day of week
    formatted_without_dow = locale.format_day(test_date, gmt_offset=0, dow=False)
    assert formatted_without_dow == "March 15"

    # Test with GMT offset (e.g., GMT+2)
    formatted_with_offset = locale.format_day(test_date, gmt_offset=120, dow=True)
    assert formatted_with_offset == "Wednesday, March 15"

    # Test with a different

# Generated at 2024-03-18 08:27:17.770434
    # Setup a Locale instance
    locale = Locale('en_US')

    # Test cases with different dates and GMT offsets
    test_cases = [
        (datetime.datetime(2023, 4, 1, 12, 0), 0, True, "Saturday, April 1"),
        (datetime.datetime(2023, 4, 1, 12, 0), 0, False, "April 1"),
        (datetime.datetime(2023, 12, 25, 12, 0), -300, True, "Monday, December 25"),
        (datetime.datetime(2023, 12, 25, 12, 0), -300, False, "December 25"),
        (datetime.datetime(2023, 7, 4, 12, 0), 240, True, "Tuesday, July 4"),
        (datetime.datetime(2023, 7, 4

# Generated at 2024-03-18 08:27:24.082324
    # Test with English locale
    en_locale = Locale('en_US')
    assert en_locale.friendly_number(123) == '123'
    assert en_locale.friendly_number(1234) == '1,234'
    assert en_locale.friendly_number(1234567) == '1,234,567'

    # Test with a non-English locale (e.g., French)
    fr_locale = Locale('fr')
    assert fr_locale.friendly_number(123) == '123'
    assert fr_locale.friendly_number(1234) == '1234'  # No comma for French
    assert fr_locale.friendly_number(1234567) == '1234567'  # No comma for French

    print("All tests passed for method friendly_number.")

# Generated at 2024-03-18 08:27:31.314977
    # Setup a Locale instance
    locale = Locale("en_US")

    # Test with a specific datetime and GMT offset
    test_date = datetime.datetime(2023, 4, 15, 12, 30)
    gmt_offset = 0  # GMT

    # Test with day of week (dow=True)
    formatted_day_with_dow = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_day_with_dow == "Saturday, April 15"

    # Test without day of week (dow=False)
    formatted_day_without_dow = locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_day_without_dow == "April 15"

    # Test with a different GMT offset
    gmt_offset = -300  # GMT-5
    formatted_day_with_offset = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_day_with_offset == "

# Generated at 2024-03-18 08:27:41.733463
    # Setup a date for testing
    test_date = datetime.datetime(2023, 3, 15, 12, 30)  # March 15, 2023, at 12:30 PM
    gmt_offset = 0  # GMT offset in minutes

    # Create a Locale instance for English
    en_locale = Locale.get('en_US')

    # Test format_day with day of week (dow=True)
    formatted_with_dow = en_locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_with_dow == "Wednesday, March 15", (
        f"Expected 'Wednesday, March 15', got '{formatted_with_dow}'"
    )

    # Test format_day without day of week (dow=False)
    formatted_without_dow = en_locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_without_dow == "March 15", (
        f"

# Generated at 2024-03-18 08:28:28.362656
```python
    import tempfile
    import shutil
    import unittest
    from tornado.locale import load_gettext_translations, _translations, _supported_locales, _use_gettext

    class TestLoadGettextTranslations(unittest.TestCase):
        def setUp(self):
            self.test_dir = tempfile.mkdtemp()
            self.domain = 'test_domain'

        def tearDown(self):
            shutil.rmtree(self.test_dir)

        def test_loading_valid_translations(self):
            # Create a dummy .mo file to simulate a translation
            lang = 'es_ES'
            lang_dir = os.path.join(self.test_dir, lang, 'LC_MESSAGES')
            os.makedirs(lang_dir)
            with open(os.path.join(lang_dir, self.domain + '.mo'), 'w') as f:
                f.write('')

            load_gettext_translations(self.test_dir, self.domain)

            self.assertIn(lang, _translations)
            self.assertIn(lang, _supported_locales)
            self.assertTrue(_use_gettext

# Generated at 2024-03-18 08:28:35.823213
    # Setup
    locale_en = Locale.get('en_US')
    locale_fr = Locale.get('fr_FR')

    # Test with English locale, relative formatting
    now = datetime.datetime.utcnow()
    one_hour_ago = now - datetime.timedelta(hours=1)
    assert locale_en.format_date(one_hour_ago.timestamp()) == "1 hour ago"

    # Test with French locale, relative formatting
    assert locale_fr.format_date(one_hour_ago.timestamp()) == "il y a 1 heure"

    # Test with English locale, full formatting
    assert locale_en.format_date(one_hour_ago.timestamp(), relative=False, full_format=True) == one_hour_ago.strftime("%B %d, %Y at %I:%M %p")

    # Test with French locale, full formatting
    assert locale_fr.format_date(one_hour_ago.timestamp(), relative=False, full_format=True) == one_hour_ago.strftime("%d %B %Y à %H:%M

# Generated at 2024-03-18 08:28:36.981501
```python
import unittest
import tempfile
import shutil
import os


# Generated at 2024-03-18 08:28:45.775705
    import tempfile
    import shutil
    from unittest import mock

    # Create a temporary directory to simulate the locale directory structure
    temp_dir = tempfile.mkdtemp()
    try:
        # Create a fake .mo file for a test locale
        test_locale = 'es_ES'
        test_domain = 'testdomain'
        locale_dir = os.path.join(temp_dir, test_locale, 'LC_MESSAGES')
        os.makedirs(locale_dir)
        with open(os.path.join(locale_dir, test_domain + '.mo'), 'wb') as f:
            f.write(b'\xde\x12\x04\x95\x00\x00\x00\x00')

        # Mock the os.listdir to only return our test locale
        with mock.patch('os.listdir', return_value=[test_locale]):
            # Call the function we're testing
            load_gettext_translations(temp_dir, test_domain)

            # Check if the test locale is now in the supported locales
            assert test_locale in

# Generated at 2024-03-18 08:28:52.858419
```python
    import tempfile
    import shutil
    import os

    def test_load_translations():
        # Create a temporary directory
        temp_dir = tempfile.mkdtemp()
        try:
            # Create a sample CSV file for Spanish translations
            es_csv = os.path.join(temp_dir, "es.csv")
            with open(es_csv, "w", encoding="utf-8") as f:
                f.write('"Hello, world!","¡Hola, mundo!"\n')
                f.write('"Goodbye","Adiós"\n')
                f.write('"%(name)s liked this","A %(name)s le gustó esto","singular"\n')
                f.write('"%(name)s liked this","A %(name)s les gustó esto","plural"\n')

            # Load the translations from the temporary directory
            load_translations(temp_dir)

            # Check if the translations were loaded correctly
            assert "es" in _translations, "Spanish translations not

# Generated at 2024-03-18 08:29:00.882079
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime, GMT offset, and relative=False
    specific_date = datetime.datetime(2023, 4, 1, 15, 30)
    formatted_date = locale.format_date(specific_date, gmt_offset=0, relative=False)
    assert formatted_date == "April 1, 2023 at 3:30 pm", f"Expected 'April 1, 2023 at 3:30 pm', got '{formatted_date}'"

    # Test with a specific datetime, GMT offset, and relative=True
    now = datetime.datetime.utcnow()
    seconds_ago = (now - specific_date).total_seconds()
    if seconds_ago < 60:
        expected = "1 second ago"
    elif seconds_ago < 3600:
        expected = f"{int(seconds_ago // 60)} minutes ago"
    else:


# Generated at 2024-03-18 08:29:02.479518
```python
import os
import tempfile
import unittest


# Generated at 2024-03-18 08:29:03.830451
```python
import unittest


# Generated at 2024-03-18 08:29:11.133897
    # Setup a Locale instance for testing
    locale = Locale('en_US')

    # Test with a specific datetime and GMT offset
    test_date = datetime.datetime(2023, 4, 15, 12, 30)  # April 15, 2023, 12:30 PM
    gmt_offset = 0  # GMT offset in minutes

    # Test with day of week included
    formatted_date_with_dow = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_date_with_dow == "Saturday, April 15"

    # Test without day of week included
    formatted_date_without_dow = locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_date_without_dow == "April 15"

    # Test with a different GMT offset
    gmt_offset = -300  # GMT offset in minutes (e.g., Eastern Time UTC-5)
    formatted

# Generated at 2024-03-18 08:29:22.110716
    # Setup a Locale instance
    locale = Locale('en_US')

    # Test with a specific datetime and GMT offset
    test_date = datetime.datetime(2023, 4, 15, 12, 30)  # April 15, 2023, 12:30 PM
    gmt_offset = 0  # GMT

    # Test with day of week included
    formatted_date_with_dow = locale.format_day(test_date, gmt_offset, dow=True)
    assert formatted_date_with_dow == "Saturday, April 15"

    # Test without day of week included
    formatted_date_without_dow = locale.format_day(test_date, gmt_offset, dow=False)
    assert formatted_date_without_dow == "April 15"

    # Test with a different GMT offset
    gmt_offset = -300  # GMT -5 hours
    formatted_date_with_offset = locale.format_day(test_date, gmt_offset,