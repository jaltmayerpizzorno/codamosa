# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_1():
    str_0 = None
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    try_0 = module_0.Try(dict_0, bool_0)
    try_1 = module_0.Try(try_0, bool_0)
    bool_1 = True
    try_2 = module_0.Try(try_1, bool_1)
    bool_2 = True
    try_3 = module_0.Try(try_2, bool_2)
    bool_3 = try_3.__eq__(str_0)

def test_case_2():
    bytes_0 = b'\xfc\xf2\x9exk\xf3\xdb\xa3q\x02=b'
    bool_0 = True
    try_0 = module_0.Try(bytes_0, bool_0)
    str_0 = try_0.__str__()

def test_case_3():
    int_0 = -1146
    bool_0 = False
    try_0 = module_0.Try(int_0, bool_0)
    float_0 = 1058.982
    bool_1 = False
    try_1 = module_0.Try(float_0, bool_1)
    var_0 = try_1.map(bool_0)
    var_1 = try_0.get()

def test_case_4():
    complex_0 = None
    bool_0 = False
    try_0 = module_0.Try(complex_0, bool_0)
    int_0 = -438
    bool_1 = False
    try_1 = module_0.Try(int_0, bool_1)
    str_0 = try_1.__str__()
    var_0 = try_1.get()
    bytes_0 = b'\xab\x9e\x15\xa3'
    var_1 = try_1.filter(bytes_0)
    float_0 = 696.57478
    try_2 = module_0.Try(float_0, bool_0)
    var_2 = try_1.bind(str_0)

def test_case_5():
    str_0 = ' 7h6'
    int_0 = -106
    bool_0 = False
    try_0 = module_0.Try(int_0, bool_0)
    var_0 = try_0.filter(str_0)
    var_1 = try_0.on_success(int_0)

def test_case_6():
    int_0 = 220
    int_1 = -1365
    bool_0 = True
    try_0 = module_0.Try(int_1, bool_0)
    var_0 = try_0.on_fail(int_0)

def test_case_7():
    bytes_0 = b'}9\xb03'
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)
    var_0 = try_0.filter(bytes_0)

def test_case_8():
    float_0 = -2260.905
    bool_0 = False
    set_0 = {bool_0, float_0, bool_0, float_0}
    dict_0 = {float_0: bool_0, bool_0: float_0, bool_0: bool_0, float_0: set_0}
    float_1 = 979.488676
    bool_1 = False
    try_0 = module_0.Try(float_1, bool_1)
    var_0 = try_0.bind(dict_0)
    int_0 = False
    var_1 = try_0.get()
    tuple_0 = (float_0, set_0, int_0)
    try_1 = module_0.Try(set_0, bool_0)
    var_2 = try_1.get()
    list_0 = [tuple_0]
    try_2 = module_0.Try(list_0, bool_0)
    var_3 = try_1.get_or_else(bool_0)
    var_4 = try_0.filter(tuple_0)
    try_3 = module_0.Try(float_0, bool_0)
    var_5 = try_3.bind(bool_1)

def test_case_9():
    bytes_0 = b'}9\xb03'
    bool_0 = False
    float_0 = 975.3103
    complex_0 = None
    str_0 = "\n        Call argument function with args in try-catch.\n        when function don't raise exception, not successfully when raise.\n\n        :params fn: function to call and store in monad\n        :type fn: Function(*args) -> A\n        :params *args:\n        :type fn: List\n        :retruns: Successfully monad Try when function don't raise exception, not successfully when raise\n        :rtype: Try[A]\n        "
    try_0 = module_0.Try(str_0, bool_0)
    bool_1 = try_0.__eq__(complex_0)
    bytes_1 = b'q\x08\x82wN[\x18\xfd\x9d\x93\x94'
    bool_2 = True
    try_1 = module_0.Try(bytes_1, bool_2)
    var_0 = try_1.get_or_else(float_0)
    try_2 = module_0.Try(bool_0, bool_0)
    var_1 = try_2.filter(bytes_0)

def test_case_10():
    str_0 = '\\(4@'
    float_0 = -1584.605
    int_0 = 187
    bool_0 = False
    try_0 = module_0.Try(int_0, bool_0)
    var_0 = try_0.on_success(float_0)
    bool_1 = True
    try_1 = module_0.Try(str_0, bool_1)
    bool_2 = try_1.__eq__(try_1)
    str_1 = try_1.__str__()

def test_case_11():
    int_0 = 588
    int_1 = 7996
    list_0 = [int_1, int_1]
    bool_0 = False
    try_0 = module_0.Try(list_0, bool_0)
    var_0 = try_0.filter(int_0)
    int_2 = True
    bool_1 = False
    try_1 = module_0.Try(int_2, bool_1)
    str_0 = 'C\rc'
    bool_2 = True
    try_2 = module_0.Try(str_0, bool_2)
    str_1 = try_1.__str__()
    bool_3 = try_2.__eq__(try_1)