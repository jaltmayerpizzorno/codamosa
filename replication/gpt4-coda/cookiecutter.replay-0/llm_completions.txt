

# Generated at 2024-03-18 05:07:43.343670
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test with a missing 'cookiecutter' key in the context
       

# Generated at 2024-03-18 05:07:48.415189
    assert get_file_name('replay', 'template') == 'replay/template.json'
    assert get_file_name('replay', 'template.json') == 'replay/template.json'
    assert get_file_name('replay/subdir', 'template') == 'replay/subdir/template.json'
    assert get_file_name('replay/subdir', 'another-template.json') == 'replay/subdir/another-template.json'
    assert get_file_name('/absolute/path/replay', 'template') == '/absolute/path/replay/template.json'
    assert get_file_name('', 'template') == './template.json'

# Generated at 2024-03-18 05:07:49.598515
```python
import pytest
import tempfile


# Generated at 2024-03-18 05:07:50.637610
```python
import tempfile
import pytest


# Generated at 2024-03-18 05:07:55.827470
    import tempfile
    import pytest

    # Setup a temporary directory and file
    with tempfile.TemporaryDirectory() as tmpdir:
        replay_dir = tmpdir
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to the replay file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the replay file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a corrupted json file

# Generated at 2024-03-18 05:08:03.508603
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            replay_dir = tmpdir
            template_name = 'test_template'
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:08:11.562830
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the original context
            assert loaded_context == context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

            # Test loading with a template name of incorrect type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:08:17.577556
    import tempfile
    import pytest

    # Setup a temporary directory and file
    with tempfile.TemporaryDirectory() as tmpdir:
        template_name = 'test_template'
        replay_dir = tmpdir
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to the replay file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the replay file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a corrupted json file

# Generated at 2024-03-18 05:08:23.069730
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test with a missing 'cookiecutter' key in the context
       

# Generated at 2024-03-18 05:08:25.480105
    assert get_file_name('replays', 'my_template') == 'replays/my_template.json'
    assert get_file_name('replays', 'my_template.json') == 'replays/my_template.json'
    assert get_file_name('replays/subdir', 'template') == 'replays/subdir/template.json'
    assert get_file_name('/absolute/path/to/replays', 'template_name') == '/absolute/path/to/replays/template_name.json'

# Generated at 2024-03-18 05:08:35.056870
    import tempfile
    import pytest

    # Create a temporary directory
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with an invalid template name type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the JSON file
        invalid_context = {'project

# Generated at 2024-03-18 05:08:41.355499
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with an invalid template name type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the json file
        invalid_context = {'project_slug

# Generated at 2024-03-18 05:08:48.604732
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to a file
            dump(replay_dir, template_name, context)

            # Load the context from the file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the original context
            assert loaded_context == context

            # Test loading with a non-existent template name
            with pytest.raises(FileNotFoundError):
                load(replay_dir, 'non_existent_template')

            # Test loading with a template name of incorrect type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:08:53.258390
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a file
        dump(replay_dir, template_name, context)

        # Verify that the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:08:58.440128
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()

    # Define the template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Call the dump function to write the context to a file
    dump(replay_dir, template_name, context)

    # Check if the file was created
    replay_file = get_file_name(replay_dir, template_name)
    assert os.path.exists(replay_file)

    # Read the file and compare the content
    with open(replay_file, 'r') as f:
        data = json.load(f)
    assert data == context

    # Clean up the temporary directory
    shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:09:03.347218
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the json file
        bad_context = {'project_slug': '

# Generated at 2024-03-18 05:09:08.929784
    import tempfile
    import pytest

    # Setup a temporary directory and file
    with tempfile.TemporaryDirectory() as tmpdir:
        template_name = 'test_template'
        replay_dir = tmpdir
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to the replay file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the replay file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test loading with a non-existent template name
        with pytest.raises(IOError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)  # Passing an int instead of a str

# Generated at 2024-03-18 05:09:14.416607
    import tempfile
    import pytest

    # Setup a temporary directory and file
    with tempfile.TemporaryDirectory() as tmpdir:
        template_name = 'test_template'
        replay_data = {'cookiecutter': {'project_slug': 'test_project'}}
        expected_context = replay_data

        # Dump the context to the replay file
        dump(tmpdir, template_name, replay_data)

        # Load the context from the replay file
        loaded_context = load(tmpdir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(tmpdir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(tmpdir, 123)  # Passing an int instead of a str

        # Test loading with a missing 'cookiecutter' key

# Generated at 2024-03-18 05:09:21.758096
    import tempfile
    import pytest

    # Create a temporary directory using the tempfile module
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the JSON file
       

# Generated at 2024-03-18 05:09:22.425253
```python
import pytest
import tempfile
import shutil


# Generated at 2024-03-18 05:09:33.034288
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(FileNotFoundError):
                load(replay_dir, 'non_existent_template')

            # Test loading with an invalid template name type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:09:36.780166
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to json file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context
    finally:
        # Remove the temporary directory after the test
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:09:41.319175
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a file
        dump(replay_dir, template_name, context)

        # Verify that the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:09:45.544210
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}
            dump(tmpdir, template_name, expected_context)

            # Now load the context from the file and check if it matches
            loaded_context = load(tmpdir, template_name)
            assert loaded_context == expected_context

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:09:46.751140
```python
import pytest
import tempfile


# Generated at 2024-03-18 05:09:55.383537
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:10:02.557910
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            replay_dir = tmpdir
            template_name = 'test_template'
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

            # Test loading with a template name of incorrect type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()


# Generated at 2024-03-18 05:10:09.680083
    import tempfile
    import pytest

    # Setup a temporary directory and file
    with tempfile.TemporaryDirectory() as tmpdir:
        template_name = 'test_template'
        replay_data = {'cookiecutter': {'project_slug': 'test_project'}}
        expected_file_path = os.path.join(tmpdir, template_name + '.json')

        # Dump the replay data to the file
        dump(tmpdir, template_name, replay_data)

        # Ensure the file was created
        assert os.path.exists(expected_file_path)

        # Load the replay data and assert it matches what was dumped
        loaded_data = load(tmpdir, template_name)
        assert loaded_data == replay_data

        # Test with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(tmpdir, 'non_existent_template')

        # Test with a template name of incorrect type
        with pytest.raises(TypeError):
            load(tmpdir, 123)

        # Test with a corrupted

# Generated at 2024-03-18 05:10:15.863207
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:10:21.111509
    import tempfile
    import shutil

    # Setup a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Define the template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_name': 'Test Project'}}

    # Call the dump function to write the context to a file
    dump(temp_dir, template_name, context)

    # Verify the file exists
    replay_file = get_file_name(temp_dir, template_name)
    assert os.path.exists(replay_file)

    # Verify the contents of the file
    with open(replay_file, 'r') as f:
        data = json.load(f)
        assert data == context

    # Cleanup the temporary directory
    shutil.rmtree(temp_dir)

# Generated at 2024-03-18 05:10:29.160561
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the json file
        bad_context = {'project_slug': '

# Generated at 2024-03-18 05:10:33.192430
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to json file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context
    finally:
        # Remove the temporary directory after the test
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:10:37.890985
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to json file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created"

        # Read the file and compare the content
        with open(replay_file, 'r') as f:
            data = json.load(f)
        assert data == context, "Context data was not written correctly to the file"
    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:10:43.833396
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as tmp_replay_dir:
        # Define a template name and a context dictionary
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file in the temporary replay directory
        dump(tmp_replay_dir, template_name, context)

        # Load the context back from the JSON file
        loaded_context = load(tmp_replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context, "Loaded context does not match the original context"

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(tmp_replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load

# Generated at 2024-03-18 05:10:49.797744
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test with a missing 'cookiecutter' key in the loaded context
        bad_context = {'project_slug': 'test_project'}


# Generated at 2024-03-18 05:10:55.746735
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to json file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context
    finally:
        # Remove the temporary directory after the test
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:11:01.574018
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Define the template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Dump the context to the replay file
    dump(temp_dir, template_name, context)

    # Load the context from the replay file
    loaded_context = load(temp_dir, template_name)

    # Check if the loaded context matches the original context
    assert loaded_context == context, "Loaded context does not match the original context"

    # Clean up the temporary directory
    shutil.rmtree(temp_dir)

# Generated at 2024-03-18 05:11:09.802222
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the original context
            assert loaded_context == context

            # Test loading with a non-existent template name
            with pytest.raises(FileNotFoundError):
                load(replay_dir, 'non_existent_template')

            # Test loading with an invalid template name type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:11:12.027138
```python
import pytest
import tempfile
from unittest.mock import patch

@patch('cookiecutter.utils.make_sure_path_exists', return_value=True)

# Generated at 2024-03-18 05:11:17.575212
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Define the template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Dump the context to a JSON file
    dump(temp_dir, template_name, context)

    # Load the context from the JSON file
    loaded_context = load(temp_dir, template_name)

    # Check if the loaded context matches the original context
    assert loaded_context == context, "Loaded context does not match the original context."

    # Clean up the temporary directory
    shutil.rmtree(temp_dir)

# Generated at 2024-03-18 05:11:27.547413
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the json file
        bad_context = {'project_slug': '

# Generated at 2024-03-18 05:11:33.126446
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test with an invalid template name type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test with a missing 'cookiecutter' key in the json file
       

# Generated at 2024-03-18 05:11:33.785128
```python
import pytest
import tempfile


# Generated at 2024-03-18 05:11:34.979450
```python
import pytest
import tempfile
import shutil


# Generated at 2024-03-18 05:11:39.182042
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a JSON file
        dump(replay_dir, template_name, context)

        # Verify that the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context
    finally:
        # Clean up the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:11:45.808006
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to a file
            dump(replay_dir, template_name, context)

            # Load the context from the file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the original context
            assert loaded_context == context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

            # Test loading with a template name of incorrect type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:11:50.768988
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to the replay file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created"

        # Check if the content of the file is correct
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context, "Context data was not written correctly to the replay file"
    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:11:58.221879
    import tempfile
    import pytest

    # Create a temporary directory using the tempfile module
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the JSON file
       

# Generated at 2024-03-18 05:12:03.422960
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Call the dump function to write the context to a JSON file
    dump(replay_dir, template_name, context)

    # Verify that the file was created
    replay_file = get_file_name(replay_dir, template_name)
    assert os.path.exists(replay_file)

    # Verify the content of the file
    with open(replay_file, 'r') as f:
        data = json.load(f)
        assert data == context

    # Clean up the temporary directory
    shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:12:10.095323
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:12:19.375169
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to json file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.isfile(replay_file), "Replay file was not created"

        # Read the file and compare the content
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context, "Context data does not match the data dumped into the file"
    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:12:24.125962
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Call the dump function to write the context to a JSON file
    dump(replay_dir, template_name, context)

    # Verify that the file was created
    replay_file = get_file_name(replay_dir, template_name)
    assert os.path.exists(replay_file)

    # Verify the contents of the file
    with open(replay_file, 'r') as f:
        data = json.load(f)
        assert data == context

    # Clean up the temporary directory
    shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:12:29.285356
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:12:35.725120
    import tempfile
    import pytest

    # Create a temporary directory using the tempfile module
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a corrupted JSON file
        corrupted_file_name = get_file_name(re

# Generated at 2024-03-18 05:12:41.174399
    import tempfile
    import pytest

    # Create a temporary directory using the tempfile module
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to the replay file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the replay file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing

# Generated at 2024-03-18 05:12:47.175505
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            replay_dir = tmpdir
            template_name = 'test_template'
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:12:53.156547
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:12:59.098266
    import tempfile
    import shutil

    # Setup a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Define a template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Dump the context to a file
    dump(temp_dir, template_name, context)

    # Load the context from the file
    loaded_context = load(temp_dir, template_name)

    # Check if the loaded context matches the original context
    assert loaded_context == context, "Loaded context does not match the original context"

    # Clean up the temporary directory
    shutil.rmtree(temp_dir)

# Generated at 2024-03-18 05:13:06.056652
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to a file
            dump(replay_dir, template_name, context)

            # Load the context from the file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the original context
            assert loaded_context == context

            # Test loading with a non-existent template name
            with pytest.raises(FileNotFoundError):
                load(replay_dir, 'non_existent_template')

            # Test loading with an invalid template name type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:13:11.420469
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(FileNotFoundError):
                load(replay_dir, 'non_existent_template')

            # Test loading with a template name of incorrect type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()


# Generated at 2024-03-18 05:13:23.433765
    import tempfile
    import pytest

    # Create a temporary directory using the tempfile module
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a corrupted JSON file
        corrupted_file = get_file_name(replay

# Generated at 2024-03-18 05:13:29.164206
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Define the template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_name': 'Test Project'}}

    # Call the dump function to write the context to a file
    dump(temp_dir, template_name, context)

    # Check if the file was created
    replay_file = get_file_name(temp_dir, template_name)
    assert os.path.exists(replay_file)

    # Read the file and compare the content with the original context
    with open(replay_file, 'r') as f:
        data = json.load(f)
    assert data == context

    # Clean up the temporary directory
    shutil.rmtree(temp_dir)

# Generated at 2024-03-18 05:13:34.452872
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a file
        dump(replay_dir, template_name, context)

        # Verify that the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:13:40.427260
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a file
        dump(replay_dir, template_name, context)

        # Verify that the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context
    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:13:46.990933
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to json file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Read the file and compare the content
        with open(replay_file, 'r') as f:
            data = json.load(f)
        assert data == context
    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:13:54.370347
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to a file
            dump(replay_dir, template_name, context)

            # Load the context from the file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the original context
            assert loaded_context == context

            # Test loading with a non-existent template name
            with pytest.raises(FileNotFoundError):
                load(replay_dir, 'non_existent_template')

            # Test loading with a template name of incorrect type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:13:58.161109
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Call the dump function to write the context to a file
    dump(replay_dir, template_name, context)

    # Check if the file was created
    replay_file = get_file_name(replay_dir, template_name)
    assert os.path.exists(replay_file)

    # Check if the content of the file is correct
    with open(replay_file, 'r') as f:
        data = json.load(f)
    assert data == context

    # Clean up the temporary directory
    shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:14:01.632544
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Define the template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Dump the context to a JSON file in the temporary directory
    dump(temp_dir, template_name, context)

    # Load the context from the JSON file
    loaded_context = load(temp_dir, template_name)

    # Check if the loaded context matches the original context
    assert loaded_context == context, "Loaded context does not match the original context"

    # Clean up the temporary directory
    shutil.rmtree(temp_dir)

# Generated at 2024-03-18 05:14:06.153494
```python
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to replay file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created"

        # Read the content of the replay file and compare with the context
        with open(replay_file, 'r') as f:
            content = json.load(f)
        assert content == context, "Replay file content does not match the context"

    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)
```

# Generated at 2024-03-18 05:14:11.006626
    import tempfile
    import pytest

    # Setup a temporary directory and file
    with tempfile.TemporaryDirectory() as tmpdir:
        template_name = 'test_template'
        replay_dir = tmpdir
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to the replay file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the replay file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test loading with a non-existent template name
        with pytest.raises(IOError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookie

# Generated at 2024-03-18 05:14:25.796066
    import tempfile
    import pytest

    # Create a temporary directory
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with an invalid template name type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the JSON file
        invalid_context = {'project

# Generated at 2024-03-18 05:14:31.191226
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(FileNotFoundError):
                load(replay_dir, 'non_existent_template')

            # Test loading with a template name of incorrect type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()


# Generated at 2024-03-18 05:14:37.058485
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the json file
        bad_context = {'project_slug': '

# Generated at 2024-03-18 05:14:41.936880
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Call the dump function to write the context to a JSON file
    dump(replay_dir, template_name, context)

    # Verify that the file was created
    replay_file = get_file_name(replay_dir, template_name)
    assert os.path.exists(replay_file)

    # Verify the contents of the file
    with open(replay_file, 'r') as f:
        data = json.load(f)
        assert data == context

    # Clean up the temporary directory
    shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:14:48.237572
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as tmp_replay_dir:
        # Define a template name and a context to be saved and loaded
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file in the temporary directory
        dump(tmp_replay_dir, template_name, context)

        # Load the context back from the JSON file
        loaded_context = load(tmp_replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context, "Loaded context does not match the original context"

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(tmp_replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError

# Generated at 2024-03-18 05:14:49.050400
```python
import tempfile
import pytest


# Generated at 2024-03-18 05:14:54.165478
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to json file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context
    finally:
        # Remove the temporary directory after the test
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:14:58.112749
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Define the template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Dump the context to a JSON file in the temporary directory
    dump(temp_dir, template_name, context)

    # Load the context from the JSON file
    loaded_context = load(temp_dir, template_name)

    # Check if the loaded context matches the original context
    assert loaded_context == context, "Loaded context does not match the original context"

    # Clean up the temporary directory
    shutil.rmtree(temp_dir)

# Generated at 2024-03-18 05:15:05.059166
    import tempfile
    import pytest

    # Create a temporary directory using the tempfile module
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the JSON file
       

# Generated at 2024-03-18 05:15:12.041624
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the original context
            assert loaded_context == context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

            # Test loading with a template name of incorrect type
            with pytest.raises(TypeError):
                load(replay_dir, 123)

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:15:31.023902
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a file
        dump(replay_dir, template_name, context)

        # Verify that the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context
    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:15:35.853221
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Call the dump function to write the context to a JSON file
    dump(replay_dir, template_name, context)

    # Check if the file was created
    replay_file = get_file_name(replay_dir, template_name)
    assert os.path.exists(replay_file)

    # Check if the content of the file is correct
    with open(replay_file, 'r') as f:
        data = json.load(f)
    assert data == context

    # Clean up the temporary directory
    shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:15:42.518496
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:15:46.899208
    import tempfile
    import shutil

    # Create a temporary directory
    temp_dir = tempfile.mkdtemp()

    # Define the template name and context
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Dump the context to a JSON file in the temporary directory
    dump(temp_dir, template_name, context)

    # Load the context from the JSON file
    loaded_context = load(temp_dir, template_name)

    # Assert that the loaded context matches the original context
    assert loaded_context == context, "Loaded context does not match the original context"

    # Clean up the temporary directory
    shutil.rmtree(temp_dir)

# Generated at 2024-03-18 05:15:53.236384
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            loaded_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert loaded_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:15:54.021045
```python
import pytest
import tempfile


# Generated at 2024-03-18 05:15:57.847744
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to json file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context
    finally:
        # Remove the temporary directory after the test
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:16:02.337477
    import tempfile
    import pytest

    # Create a temporary directory using the tempfile module
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to the replay file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the replay file
        actual_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert actual_context == expected_context, "Loaded context does not match expected context"

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing

# Generated at 2024-03-18 05:16:07.047511
```python
    import tempfile
    import pytest

    def test_load():
        # Setup a temporary directory and file
        with tempfile.TemporaryDirectory() as tmpdir:
            template_name = 'test_template'
            replay_dir = tmpdir
            expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

            # Dump the context to the replay file
            dump(replay_dir, template_name, expected_context)

            # Load the context from the replay file
            actual_context = load(replay_dir, template_name)

            # Assert that the loaded context matches the expected context
            assert actual_context == expected_context

            # Test loading with a non-existent template name
            with pytest.raises(IOError):
                load(replay_dir, 'non_existent_template')

    # Run the test
    test_load()
```

# Generated at 2024-03-18 05:16:12.830953
```python
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    # Test dumping context to the replay file
    try:
        dump(replay_dir, template_name, context)
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file), "Replay file was not created"

        # Read the file and compare the context
        with open(replay_file, 'r') as f:
            loaded_context = json.load(f)
        assert loaded_context == context, "Context in the file does not match the original context"
    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)
```

# Generated at 2024-03-18 05:16:48.367423
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the file
        actual_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert actual_context == expected_context, "Loaded context does not match expected context"

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with an invalid template name type
        with pytest.raises(TypeError):
            load(replay_dir, 123)  # Passing a non-string template name

        # Test loading with a missing

# Generated at 2024-03-18 05:16:53.465824
    import tempfile
    import pytest

    # Create a temporary directory to simulate the replay directory
    with tempfile.TemporaryDirectory() as replay_dir:
        template_name = 'test_template'
        expected_context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, expected_context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the expected context
        assert loaded_context == expected_context, "Loaded context does not match expected context"

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a missing 'cookiecutter' key in the

# Generated at 2024-03-18 05:16:57.681061
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a file
        dump(replay_dir, template_name, context)

        # Verify that the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:16:58.803077
```python
import pytest
import tempfile
import shutil


# Generated at 2024-03-18 05:17:03.702340
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a file
        dump(replay_dir, template_name, context)

        # Verify that the file was created
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.exists(replay_file)

        # Verify the content of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context

    finally:
        # Clean up the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:17:07.568102
    import tempfile
    import shutil

    # Create a temporary directory
    replay_dir = tempfile.mkdtemp()
    template_name = 'test_template'
    context = {'cookiecutter': {'project_slug': 'test_project'}}

    try:
        # Call the dump function to write the context to a file
        dump(replay_dir, template_name, context)

        # Verify the file exists
        replay_file = get_file_name(replay_dir, template_name)
        assert os.path.isfile(replay_file)

        # Verify the contents of the file
        with open(replay_file, 'r') as f:
            data = json.load(f)
            assert data == context

    finally:
        # Remove the temporary directory
        shutil.rmtree(replay_dir)

# Generated at 2024-03-18 05:17:12.488030
    import tempfile
    import pytest

    # Create a temporary directory
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test with a template name of wrong type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test with a missing 'cookiecutter' key in the JSON file
        bad_context = {'project_slug':

# Generated at 2024-03-18 05:17:18.943225
    import tempfile
    import pytest

    # Create a temporary directory
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test loading with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test loading with a template name of incorrect type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test loading with a malformed JSON file
        bad_template_name = 'bad_template'
        bad_replay

# Generated at 2024-03-18 05:17:23.964849
    import tempfile
    import pytest

    # Setup a temporary directory and file
    with tempfile.TemporaryDirectory() as tmpdir:
        template_name = 'test_template'
        replay_dir = tmpdir
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a file
        dump(replay_dir, template_name, context)

        # Load the context from the file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test with a non-existent file
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test with a file that does not contain 'cookiecutter' key
        bad_context = {'project_slug': 'test_project'}
        dump(replay_dir, 'bad_template', bad_context)
        with pytest.raises(ValueError):
            load(replay

# Generated at 2024-03-18 05:17:28.586033
    import tempfile
    import pytest

    # Create a temporary directory
    with tempfile.TemporaryDirectory() as tmpdirname:
        replay_dir = tmpdirname
        template_name = 'test_template'
        context = {'cookiecutter': {'project_slug': 'test_project'}}

        # Dump the context to a JSON file
        dump(replay_dir, template_name, context)

        # Load the context from the JSON file
        loaded_context = load(replay_dir, template_name)

        # Assert that the loaded context matches the original context
        assert loaded_context == context

        # Test with a non-existent template name
        with pytest.raises(FileNotFoundError):
            load(replay_dir, 'non_existent_template')

        # Test with a template name of wrong type
        with pytest.raises(TypeError):
            load(replay_dir, 123)

        # Test with a missing 'cookiecutter' key in the JSON file
        bad_context = {'project_slug':