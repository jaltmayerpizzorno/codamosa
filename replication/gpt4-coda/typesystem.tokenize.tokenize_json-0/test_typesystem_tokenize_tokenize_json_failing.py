# Automatically generated by Pynguin.
import typesystem.tokenize.tokenize_json as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = '4A\ts'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'q\x94Jku\xed'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tokenizing_decoder_0 = module_0._TokenizingDecoder()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'5\x81\x06\xd9\xb8$\x833\x9a\xe4\x95\x00\x01C\x9e'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b''
        bool_0 = False
        field_0 = module_1.Field(default=bytes_0, allow_null=bool_0)
        bool_1 = field_0.has_default()
        any_0 = module_0.validate_json(bytes_0, field_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'5\x81\xf9\xd9\xb8$\x833\x9a\xe4\x95\x00`\xf5\x01C\x9e'
        any_0 = module_0.validate_json(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'fMxx,EZj-b=PX>'
        field_0 = module_1.Field()
        any_0 = module_0.validate_json(str_0, field_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'{\xdb\xa3Y\xa8\xa9\x1f.\x95\x8d\xfc\xb5\xb3u\xf2\x96V\x07#\x8f'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b"\xa6\x8b\xb3n'\x0e\n\xea\xc5{U\xaaS f0\xaf\xda!"
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x87t\xf5\xc6\xcbSm[<2\xee\x95\xb7.\xb0\x84f\x93\x80\x11'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xd7{'
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xba['
        token_0 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '{"key": "value"'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'false'
        type_0 = None
        any_0 = module_0.validate_json(str_0, type_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '{"key": \\"value"}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '{"key: "value"}'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '{"ky":"value"}'
        token_0 = module_0.tokenize_json(str_0)
        bytes_0 = b'%C\xb5>j\xe40\x02\xa4\x0f\x04^!\x18'
        token_1 = module_0.tokenize_json(bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '{"key": "vaue'
        token_0 = module_0.tokenize_json(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '{"ke|y": "value"}'
        token_0 = module_0.tokenize_json(str_0)
        str_1 = '{"key":0 "value"'
        token_1 = module_0.tokenize_json(str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '{"ke|y": "value"}'
        token_0 = module_0.tokenize_json(str_0)
        str_1 = '{"key": \nt"value"'
        token_1 = module_0.tokenize_json(str_1)
    except BaseException:
        pass