# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        int_0 = -1240
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_0 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'e\nv>|)esLUJk'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x96<\xd3'
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\r>j9-#'
        dict_0 = {str_0: str_0}
        invalid_pattern_0 = module_0.InvalidPattern(dict_0)
        var_0 = invalid_pattern_0.__eq__(invalid_pattern_0)
        var_1 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '[ \n:4|)}u'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        bool_0 = True
        var_0 = invalid_pattern_0.__eq__(bool_0)
        var_1 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Could not import `pygments`. Disabling syntax highlighting I guess.'
        dict_0 = {str_0: str_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(lazy_regex_0)
    except BaseException:
        pass

def test_case_7():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getstate__()
        var_1 = lazy_regex_0.__getattr__(lazy_regex_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0}
        list_0 = None
        invalid_pattern_0 = module_0.InvalidPattern(list_0)
        list_1 = [invalid_pattern_0]
        int_0 = 193
        list_2 = [list_1, int_0, invalid_pattern_0]
        lazy_regex_0 = module_0.LazyRegex(list_2)
        var_0 = lazy_regex_0.__setstate__(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x96<\xd3'
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = None
        str_0 = 'Create a new proxy object, passing in the args to pass to re.compile\n\n        :param args: The `*args` to pass to re.compile\n        :param kwargs: The `**kwargs` to pass to re.compile\n        '
        str_1 = None
        bool_1 = True
        str_2 = '__name__'
        dict_0 = {str_0: bool_0, str_1: bool_1, str_2: bool_0}
        bytes_0 = b'!\x85\xaa\xee\xb6\xe50\xb3\x9b'
        var_0 = module_0.finditer_public(bool_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        str_0 = '%Cf'
        var_0 = module_0.finditer_public(lazy_regex_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x10\x19C(E\x13\xa4\xd1\xa2e'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_0.__getstate__()
        bytes_1 = b"\n\x010C\x86\xee\xc9\x9a'c\xe3\x91\x01\x07\xc6\xbf\x91\x90\xf1"
        var_1 = lazy_regex_0.__getattr__(bytes_1)
    except BaseException:
        pass