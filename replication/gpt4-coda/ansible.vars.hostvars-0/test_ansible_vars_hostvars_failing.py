# Automatically generated by Pynguin.
import ansible.vars.hostvars as module_0

def test_case_0():
    try:
        bool_0 = True
        dict_0 = {}
        host_vars_0 = module_0.HostVars(bool_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        bool_0 = True
        dict_0 = {}
        float_0 = 1946.67
        set_0 = {float_0}
        tuple_0 = (dict_0, float_0, set_0)
        host_vars_vars_0 = module_0.HostVarsVars(bool_0, tuple_0)
        var_0 = host_vars_vars_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '-C no'
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        str_1 = 'README'
        host_vars_vars_0 = module_0.HostVarsVars(dict_0, str_1)
        var_0 = host_vars_vars_0.__contains__(str_0)
        set_0 = set()
        int_0 = 892
        bool_1 = True
        host_vars_vars_1 = module_0.HostVarsVars(int_0, bool_1)
        host_vars_0 = module_0.HostVars(set_0, host_vars_vars_1, host_vars_vars_1)
        var_1 = host_vars_vars_1.__iter__()
        var_2 = host_vars_0.__setstate__(set_0)
        str_2 = ':Om?n\x0bE&Qe<\rj[S;R5'
        var_3 = host_vars_0.__setstate__(str_2)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0c'
        set_0 = set()
        int_0 = 892
        bool_0 = True
        host_vars_vars_0 = module_0.HostVarsVars(int_0, bool_0)
        host_vars_0 = module_0.HostVars(set_0, host_vars_vars_0, host_vars_vars_0)
        var_0 = host_vars_vars_0.__iter__()
        host_vars_vars_1 = module_0.HostVarsVars(host_vars_vars_0, str_0)
        host_vars_vars_2 = module_0.HostVarsVars(host_vars_0, host_vars_0)
        var_1 = host_vars_vars_2.__len__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "Ao\tI'@E:OLN+j"
        bool_0 = False
        int_0 = -840
        host_vars_vars_0 = module_0.HostVarsVars(bool_0, int_0)
        host_vars_vars_1 = module_0.HostVarsVars(str_0, host_vars_vars_0)
        int_1 = -263
        host_vars_vars_2 = module_0.HostVarsVars(host_vars_vars_1, int_1)
        host_vars_vars_3 = module_0.HostVarsVars(str_0, host_vars_vars_2)
        str_1 = '!Z/"(3]/LLaR]~X&\x0beS'
        host_vars_vars_4 = module_0.HostVarsVars(host_vars_vars_3, str_1)
        var_0 = host_vars_vars_4.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -959.36
        int_0 = 3287
        dict_0 = None
        host_vars_vars_0 = module_0.HostVarsVars(dict_0, int_0)
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_0, float_0)
        bool_0 = True
        var_0 = host_vars_0.raw_get(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -959.36
        int_0 = 3287
        dict_0 = None
        host_vars_vars_0 = module_0.HostVarsVars(dict_0, int_0)
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_0, float_0)
        var_0 = host_vars_0.__repr__()
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -959.36
        int_0 = 3287
        dict_0 = None
        host_vars_vars_0 = module_0.HostVarsVars(dict_0, int_0)
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_0, float_0)
        var_0 = host_vars_0.__contains__(host_vars_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\nCompat selectors library.  Python-3.5 has this builtin.  The selectors2\npackage exists on pypi to backport the functionality as far as python-2.6.\n'
        bool_0 = False
        host_vars_vars_0 = module_0.HostVarsVars(str_0, bool_0)
        var_0 = host_vars_vars_0.__repr__()
        bool_1 = True
        float_0 = 1585.82015
        bytes_0 = b'O\x97+&\xcc@\x84\xbc'
        int_0 = -2399
        tuple_0 = (float_0, int_0)
        host_vars_vars_1 = module_0.HostVarsVars(bytes_0, tuple_0)
        dict_0 = {}
        str_1 = 'L}NH@ZY#bjnlsr[[.:h'
        str_2 = '!\n\x0b@uft[{G<G> '
        bool_2 = False
        str_3 = 'si'
        host_vars_vars_2 = module_0.HostVarsVars(bool_2, str_3)
        host_vars_vars_3 = module_0.HostVarsVars(host_vars_vars_2, host_vars_vars_2)
        bytes_1 = b''
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_3, bytes_1)
        tuple_1 = (bool_1, str_2, host_vars_0, bytes_1)
        host_vars_1 = module_0.HostVars(dict_0, str_1, tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -1686.07
        dict_0 = {}
        host_vars_vars_0 = module_0.HostVarsVars(float_0, dict_0)
        tuple_0 = (host_vars_vars_0,)
        bool_0 = None
        complex_0 = None
        int_0 = 9
        tuple_1 = (bool_0, complex_0, int_0)
        host_vars_vars_1 = module_0.HostVarsVars(tuple_1, bool_0)
        var_0 = host_vars_vars_1.__getitem__(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -959.36
        int_0 = 3287
        dict_0 = None
        host_vars_vars_0 = module_0.HostVarsVars(dict_0, int_0)
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_0, float_0)
        var_0 = host_vars_0.set_variable_manager(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = -959.36
        str_0 = '\x0c'
        list_0 = [float_0, str_0, str_0, str_0]
        set_0 = set()
        int_0 = 892
        bool_0 = True
        host_vars_vars_0 = module_0.HostVarsVars(int_0, bool_0)
        host_vars_0 = module_0.HostVars(set_0, host_vars_vars_0, host_vars_vars_0)
        var_0 = host_vars_vars_0.__iter__()
        dict_0 = {}
        var_1 = host_vars_0.set_host_variable(dict_0, list_0, host_vars_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -959.36
        int_0 = 3287
        dict_0 = None
        host_vars_vars_0 = module_0.HostVarsVars(dict_0, int_0)
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_0, float_0)
        str_0 = 'H\\@/0p"9=]vu'
        var_0 = host_vars_0.__deepcopy__(str_0)
        bool_0 = True
        var_1 = host_vars_0.raw_get(bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        int_0 = 892
        bool_0 = True
        host_vars_vars_0 = module_0.HostVarsVars(int_0, bool_0)
        host_vars_0 = module_0.HostVars(set_0, host_vars_vars_0, host_vars_vars_0)
        var_0 = host_vars_vars_0.__iter__()
        var_1 = host_vars_0.__setstate__(set_0)
        tuple_0 = (set_0,)
        var_2 = host_vars_0.set_nonpersistent_facts(host_vars_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\nCompat selectors library.  Python-3.5 has this builtin.  The selectors2\npackage exists on pypi to backport the functionality as far as python-2.6.\n'
        bool_0 = False
        host_vars_vars_0 = module_0.HostVarsVars(str_0, bool_0)
        var_0 = host_vars_vars_0.__repr__()
        float_0 = 1585.82015
        bytes_0 = b'O\x97+&\xcc@\x84\xbc'
        int_0 = -2399
        tuple_0 = (float_0, int_0)
        host_vars_vars_1 = module_0.HostVarsVars(bytes_0, tuple_0)
        dict_0 = {}
        bool_1 = False
        str_1 = 'si'
        host_vars_vars_2 = module_0.HostVarsVars(bool_1, str_1)
        host_vars_vars_3 = module_0.HostVarsVars(host_vars_vars_2, host_vars_vars_2)
        bytes_1 = b''
        host_vars_0 = module_0.HostVars(dict_0, host_vars_vars_3, bytes_1)
        str_2 = 'KD%"n_?)k!R<}bFzdr)'
        var_1 = host_vars_0.__getitem__(str_2)
    except BaseException:
        pass

def test_case_15():
    try:
        set_0 = set()
        int_0 = 892
        bool_0 = True
        host_vars_vars_0 = module_0.HostVarsVars(int_0, bool_0)
        host_vars_0 = module_0.HostVars(set_0, host_vars_vars_0, host_vars_vars_0)
        var_0 = host_vars_vars_0.__iter__()
        var_1 = host_vars_0.__setstate__(set_0)
        tuple_0 = (set_0,)
        str_0 = '>O-B\n@&$\x0b`:5Qg<n'
        var_2 = host_vars_0.set_host_facts(str_0, tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        set_0 = set()
        int_0 = 890
        bool_0 = True
        host_vars_vars_0 = module_0.HostVarsVars(int_0, bool_0)
        host_vars_0 = module_0.HostVars(set_0, host_vars_vars_0, host_vars_vars_0)
        var_0 = host_vars_vars_0.__iter__()
        var_1 = host_vars_0.__setstate__(host_vars_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '-C no'
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        str_1 = 'README'
        host_vars_vars_0 = module_0.HostVarsVars(dict_0, str_1)
        var_0 = host_vars_vars_0.__contains__(str_0)
        set_0 = set()
        int_0 = 892
        bool_1 = None
        host_vars_vars_1 = module_0.HostVarsVars(int_0, bool_1)
        host_vars_0 = module_0.HostVars(set_0, host_vars_vars_1, host_vars_vars_1)
        var_1 = host_vars_vars_1.__iter__()
        var_2 = host_vars_0.__setstate__(set_0)
        tuple_0 = (set_0,)
        var_3 = host_vars_0.set_nonpersistent_facts(host_vars_0, tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '-C no'
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        str_1 = 'README'
        str_2 = '8MM731P;a,2-7\x0bA'
        set_0 = set()
        host_vars_vars_0 = module_0.HostVarsVars(str_2, set_0)
        var_0 = host_vars_vars_0.__getitem__(bool_0)
        host_vars_vars_1 = module_0.HostVarsVars(dict_0, str_1)
        var_1 = host_vars_vars_1.__contains__(str_0)
        float_0 = 458.54289655687825
        str_3 = '\x0c'
        list_0 = [float_0, str_3, str_3, str_3]
        set_1 = set()
        int_0 = 892
        bool_1 = None
        host_vars_vars_2 = module_0.HostVarsVars(int_0, bool_1)
        host_vars_0 = module_0.HostVars(set_1, host_vars_vars_2, host_vars_vars_2)
        var_2 = host_vars_vars_2.__iter__()
        var_3 = host_vars_0.__setstate__(set_1)
        float_1 = -3943.2229
        var_4 = host_vars_0.set_nonpersistent_facts(list_0, float_1)
    except BaseException:
        pass