# Automatically generated by Pynguin.
import ansible.utils.collection_loader._collection_finder as module_0

def test_case_0():
    try:
        str_0 = '/test/path'
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder(str_0)
        var_0 = ansible_collection_finder_0.find_module(str_0)
        str_1 = 'ansi!le_collectioTs.namespace'
        var_1 = ansible_collection_finder_0.find_module(str_1)
        str_2 = 'ansible_collections.namespace.collection'
        var_2 = ansible_collection_finder_0.find_module(str_2)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'X`P '
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existing_module'
        ansible_collection_root_pkg_loader_0 = module_0._AnsibleCollectionRootPkgLoader(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existing_module'
        ansible_collection_n_s_pkg_loader_0 = module_0._AnsibleCollectionNSPkgLoader(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'M&v'
        ansible_collection_loader_0 = module_0._AnsibleCollectionLoader(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'python3-apt'
        set_0 = {str_0}
        ansible_internal_redirect_loader_0 = module_0._AnsibleInternalRedirectLoader(str_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = '/test/path/ansible_collections'
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(ansible_collection_finder_0, str_0)
        var_0 = ansible_path_hook_finder_0.find_module(str_0)
        list_0 = [ansible_collection_finder_0, var_0]
        ansible_collection_finder_1 = module_0._AnsibleCollectionFinder(list_0)
        str_1 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existing_module'
        var_1 = ansible_path_hook_finder_0.find_module(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(ansible_collection_finder_0, ansible_collection_finder_0)
        str_0 = 'ansible_collections.some_namesPace.some_cozection.pluginmmodules.non_existing_modle'
        var_0 = ansible_path_hook_finder_0.find_module(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(ansible_collection_finder_0, ansible_collection_finder_0)
        ansible_collection_pkg_loader_base_0 = None
        var_0 = ansible_path_hook_finder_0.iter_modules(ansible_collection_pkg_loader_base_0)
        str_0 = 'ansible_collections.some_names]ace.some_coection.pluginmmodules.non_existGng_modle'
        var_1 = ansible_path_hook_finder_0.find_module(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        complex_0 = None
        int_0 = 139
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(int_0, int_0, complex_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'K<j=mm0VYjRifTNf{d'
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(ansible_collection_finder_0, str_0)
        var_0 = ansible_path_hook_finder_0.__repr__()
        str_1 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existing_module'
        var_1 = ansible_path_hook_finder_0.find_module(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'my_namespace.my_collection'
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = ':vABXiWL+7?mS"IT#'
        complex_0 = None
        ansible_collection_loader_0 = None
        float_0 = 3525.7
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(str_0, complex_0, ansible_collection_loader_0, float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ansible'
        var_0 = ansible_collection_finder_0.find_module(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existing_module'
        bytes_0 = b'9\xab\xa1\x92\xb5\xec\xff\x92;;\x98'
        var_0 = ansible_collection_finder_0.find_module(str_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.no|_existi[g_module'
        ansible_collection_pkg_loader_0 = module_0._AnsibleCollectionPkgLoader(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ask'
        str_1 = '/test/path/ansible_collections'
        ansible_path_hook_finder_0 = module_0._AnsiblePathHookFinder(ansible_collection_finder_0, str_1)
        list_0 = [str_1, str_0]
        var_0 = ansible_collection_finder_0.set_playbook_paths(list_0)
        float_0 = -839.6
        var_1 = ansible_path_hook_finder_0.__repr__()
        dict_0 = {str_1: str_0, float_0: ansible_path_hook_finder_0, ansible_path_hook_finder_0: str_1}
        ansible_collection_finder_1 = module_0._AnsibleCollectionFinder(list_0)
        var_2 = ansible_path_hook_finder_0.find_module(str_1)
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(float_0, str_0, dict_0, ansible_path_hook_finder_0)
    except BaseException:
        pass

def test_case_17():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = "ansible_collections.sme_n'mespace.ome_coflection.plugins.modules.non_exysting_module"
        bytes_0 = b'9\xa1\x92\xec\xff\x92;;\x98'
        list_0 = [str_0, ansible_collection_finder_0, bytes_0, str_0]
        set_0 = set()
        tuple_0 = (bytes_0, list_0, str_0, set_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_0, tuple_0)
        var_0 = ansible_collection_pkg_loader_base_0.load_module(set_0)
    except BaseException:
        pass

def test_case_18():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        ansible_path_hook_finder_0 = None
        ansible_path_hook_finder_1 = module_0._AnsiblePathHookFinder(ansible_path_hook_finder_0, ansible_path_hook_finder_0)
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existin_module'
        bytes_0 = b'9\xab\xa1\x92s\xff\xf3;\x99'
        list_0 = [str_0, ansible_collection_finder_0, bytes_0, str_0]
        set_0 = set()
        tuple_0 = (bytes_0, list_0, str_0, set_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_0, tuple_0)
        var_0 = ansible_collection_pkg_loader_base_0.get_code(ansible_path_hook_finder_1)
    except BaseException:
        pass

def test_case_19():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        ansible_path_hook_finder_0 = None
        tuple_0 = (ansible_path_hook_finder_0,)
        ansible_collection_loader_0 = None
        ansible_collection_finder_1 = module_0._AnsibleCollectionFinder(tuple_0, ansible_collection_loader_0)
        str_0 = 's2W(/\nG~%'
        ansible_collection_pkg_loader_0 = module_0._AnsibleCollectionPkgLoader(ansible_collection_finder_1, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existin_module'
        bytes_0 = b'9\xab\xa1\x92\xec\xff\x92;\x98'
        list_0 = [str_0, ansible_collection_finder_0, bytes_0, str_0]
        set_0 = set()
        tuple_0 = (bytes_0, list_0, str_0, set_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_0, tuple_0)
        var_0 = ansible_collection_pkg_loader_base_0.get_source(tuple_0)
    except BaseException:
        pass

def test_case_21():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existin_module'
        bytes_0 = b'\xa1X>\xb49\x84\x06\xac&\x7f%\xa5'
        list_0 = [ansible_collection_finder_0, bytes_0, ansible_collection_finder_0, bytes_0, str_0]
        set_0 = {bytes_0, bytes_0}
        tuple_0 = (bytes_0, list_0, str_0, set_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_0, tuple_0)
        ansible_collection_ref_0 = module_0.AnsibleCollectionRef(list_0, ansible_collection_finder_0, ansible_collection_pkg_loader_base_0, ansible_collection_finder_0)
    except BaseException:
        pass

def test_case_22():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existin_module'
        bytes_0 = b'?\xa1X>\xb49\x84\x06\xac&\x7f%\xa5'
        list_0 = [str_0, ansible_collection_finder_0, bytes_0, str_0]
        set_0 = {bytes_0, bytes_0}
        tuple_0 = (bytes_0, list_0, str_0, set_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_0, tuple_0)
        var_0 = ansible_collection_pkg_loader_base_0.get_data(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        str_0 = 'ask'
        bytes_0 = b'N\x8b\xf1v\xbd&\x02\xb2\xc4\x93\xf5c\xab'
        ansible_path_hook_finder_0 = None
        ansible_path_hook_finder_1 = module_0._AnsiblePathHookFinder(ansible_path_hook_finder_0, ansible_path_hook_finder_0)
        var_0 = ansible_collection_finder_0.set_playbook_paths(bytes_0)
        var_1 = ansible_collection_finder_0.find_module(str_0)
        ansible_path_hook_finder_2 = module_0._AnsiblePathHookFinder(ansible_collection_finder_0, str_0)
        var_2 = ansible_path_hook_finder_2.iter_modules(ansible_path_hook_finder_2)
        var_3 = ansible_path_hook_finder_2.__repr__()
        str_1 = 'included task files mush cont,in a lisg oG tasks'
        var_4 = ansible_path_hook_finder_2.__repr__()
        var_5 = ansible_path_hook_finder_2.find_module(str_1)
        str_2 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existing_module'
        bytes_1 = b'R'
        list_0 = [str_2, ansible_collection_finder_0, bytes_1, str_2]
        set_0 = set()
        tuple_0 = (bytes_1, list_0, str_2, set_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_2, tuple_0)
        var_6 = ansible_collection_pkg_loader_base_0.__repr__()
        var_7 = ansible_collection_pkg_loader_base_0.__repr__()
        int_0 = None
        var_8 = ansible_collection_pkg_loader_base_0.get_data(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        ansible_path_hook_finder_0 = None
        ansible_path_hook_finder_1 = module_0._AnsiblePathHookFinder(ansible_path_hook_finder_0, ansible_path_hook_finder_0)
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existing_module'
        bytes_0 = b'\xbf\xed\xdb\xa6\xd7/@\x81\x8a\xb2;'
        bytes_1 = b'LQ\xe4@'
        list_0 = [str_0, ansible_collection_finder_0, bytes_0, str_0]
        set_0 = set()
        tuple_0 = (bytes_1, list_0, str_0, set_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_0, tuple_0)
        var_0 = ansible_collection_pkg_loader_base_0.iter_modules(ansible_collection_finder_0)
        var_1 = ansible_collection_pkg_loader_base_0.load_module(ansible_collection_pkg_loader_base_0)
    except BaseException:
        pass

def test_case_25():
    try:
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder()
        ansible_path_hook_finder_0 = None
        ansible_path_hook_finder_1 = module_0._AnsiblePathHookFinder(ansible_path_hook_finder_0, ansible_path_hook_finder_0)
        str_0 = 'ansible_collections.some_namespace.some_collection.plugins.modules.non_existing_module'
        bytes_0 = b'R'
        bytes_1 = b'9\xa1\x92\xec\xff\x92;;\x98'
        list_0 = [str_0, ansible_collection_finder_0, bytes_0, str_0]
        set_0 = set()
        tuple_0 = (bytes_1, list_0, str_0, set_0)
        ansible_collection_pkg_loader_base_0 = module_0._AnsibleCollectionPkgLoaderBase(str_0, tuple_0)
        float_0 = -1980.1
        var_0 = ansible_collection_pkg_loader_base_0.is_package(float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '/test/collections'
        ansible_collection_finder_0 = module_0._AnsibleCollectionFinder(str_0)
        str_1 = 'ansible_collections'
        var_0 = ansible_collection_finder_0.find_module(str_1)
        str_2 = 'ansible_collections.namespace'
        var_1 = ansible_collection_finder_0.find_module(str_2)
    except BaseException:
        pass