# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    str_0 = 'U'
    dict_0 = {str_0: bool_0}
    list_0 = [bool_0, dict_0, dict_0, bool_0]
    corrected_command_0 = module_0.CorrectedCommand(bool_0, dict_0, list_0)
    int_0 = 1409
    dict_1 = {}
    command_0 = module_0.Command(int_0, dict_1)
    var_0 = command_0.__eq__(corrected_command_0)

def test_case_2():
    str_0 = ''
    str_1 = 'Permission denied'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    list_0 = [str_1]
    corrected_command_0 = module_0.CorrectedCommand(dict_0, dict_0, list_0)
    var_0 = corrected_command_0.__eq__(str_0)
    float_0 = -2207.4414
    dict_1 = {str_0: str_0}
    str_2 = '\x0bI"C?2IBa\x0b1\n'
    str_3 = "4+0Au8lD\r,^SwI'e7Nfi"
    corrected_command_1 = module_0.CorrectedCommand(dict_0, str_2, str_3)
    var_1 = corrected_command_1.__eq__(dict_1)
    command_0 = module_0.Command(float_0, str_3)
    var_2 = command_0.__eq__(float_0)
    var_3 = command_0.update()
    var_4 = command_0.__repr__()

def test_case_3():
    bool_0 = True
    float_0 = 2738.5
    int_0 = -4274
    set_0 = {int_0}
    tuple_0 = ()
    str_0 = '^WUx\x0bbx2SU*C'
    rule_0 = module_0.Rule(float_0, int_0, set_0, tuple_0, set_0, str_0, str_0)
    var_0 = rule_0.__eq__(bool_0)

def test_case_4():
    int_0 = False
    dict_0 = {int_0: int_0}
    str_0 = 'popd'
    set_0 = None
    dict_1 = None
    list_0 = [dict_0, str_0]
    bytes_0 = b'\xa9'
    corrected_command_0 = module_0.CorrectedCommand(dict_1, list_0, bytes_0)
    str_1 = 'B}_f~pD\t'
    tuple_0 = (set_0, corrected_command_0, str_1)
    corrected_command_1 = module_0.CorrectedCommand(tuple_0, set_0, dict_1)
    rule_0 = module_0.Rule(int_0, dict_0, dict_0, dict_0, str_0, dict_0, corrected_command_1)
    var_0 = rule_0.__repr__()

def test_case_5():
    tuple_0 = ()
    dict_0 = {tuple_0: tuple_0}
    command_0 = module_0.Command(dict_0, dict_0)
    str_0 = 'x'
    str_1 = 'Îµ'
    float_0 = 0.5
    list_0 = [str_1, str_1, float_0]
    dict_1 = {str_0: str_1}
    tuple_1 = (dict_1, list_0)
    bytes_0 = b'\xc2\xccE\xe4\x1d\x83\x05\xf8<\xc3]\xa5v\xbdz\x956\xcb:\xd4'
    str_2 = ''
    rule_0 = module_0.Rule(command_0, str_1, tuple_1, float_0, bytes_0, str_2, list_0)
    var_0 = rule_0.is_match(command_0)

def test_case_6():
    bool_0 = True
    list_0 = [bool_0]
    corrected_command_0 = module_0.CorrectedCommand(bool_0, list_0, list_0)
    var_0 = corrected_command_0.__repr__()

def test_case_7():
    int_0 = None
    str_0 = "+9X\n=}W='XT2RJ+"
    list_0 = [str_0, str_0, str_0]
    str_1 = "'conda ([^']*)'"
    corrected_command_0 = module_0.CorrectedCommand(str_0, list_0, str_1)
    var_0 = corrected_command_0.__eq__(int_0)

def test_case_8():
    bool_0 = True
    float_0 = 2738.5
    int_0 = -4274
    set_0 = {int_0}
    tuple_0 = ()
    str_0 = '^WUx\x0bbx2SU*C'
    str_1 = 'HG~TH{{Sbo9,s?'
    rule_0 = module_0.Rule(float_0, int_0, set_0, tuple_0, set_0, str_0, str_1)
    var_0 = rule_0.__eq__(bool_0)
    list_0 = None
    command_0 = module_0.Command(list_0, set_0)
    float_1 = -400.0
    corrected_command_0 = module_0.CorrectedCommand(float_1, tuple_0, set_0)
    command_1 = module_0.Command(float_0, corrected_command_0)
    var_1 = command_1.__eq__(command_0)

def test_case_9():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = None
    corrected_command_0 = module_0.CorrectedCommand(list_0, list_1, list_0)
    var_0 = corrected_command_0.__eq__(corrected_command_0)
    var_1 = corrected_command_0.__repr__()

def test_case_10():
    bytes_0 = b'\xac'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    bool_0 = False
    float_0 = 0.4548979803822608
    corrected_command_0 = module_0.CorrectedCommand(dict_0, bool_0, float_0)
    str_0 = 'mOp\r*w4'
    tuple_0 = (dict_0, str_0)
    tuple_1 = None
    command_0 = module_0.Command(tuple_0, tuple_1)
    bool_1 = True
    bool_2 = False
    list_0 = [str_0, command_0]
    rule_0 = module_0.Rule(bool_2, bool_1, bytes_0, bool_1, list_0, corrected_command_0, tuple_0)
    var_0 = command_0.__repr__()
    var_1 = rule_0.is_match(command_0)
    var_2 = command_0.update()
    var_3 = rule_0.__repr__()
    var_4 = rule_0.__eq__(bool_0)