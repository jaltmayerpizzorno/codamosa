# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        rule_0 = None
        bool_0 = False
        command_0 = module_0.Command(rule_0, bool_0)
        var_0 = command_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        float_0 = 1245.9
        str_0 = 'apt-cache'
        list_0 = []
        str_1 = '/*i g^Ubz~D}'
        bool_1 = False
        command_0 = module_0.Command(bool_0, bool_1)
        command_1 = module_0.Command(str_1, command_0)
        str_2 = ''
        corrected_command_0 = module_0.CorrectedCommand(str_0, list_0, str_2)
        var_0 = corrected_command_0.run(float_0)
        var_1 = corrected_command_0.__hash__()
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        bool_0 = False
        set_0 = {dict_0}
        corrected_command_0 = module_0.CorrectedCommand(bool_0, dict_0, set_0)
        var_0 = corrected_command_0.run(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        str_1 = 'Permission denied'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        list_0 = [str_1]
        corrected_command_0 = module_0.CorrectedCommand(dict_0, dict_0, list_0)
        var_0 = corrected_command_0.__eq__(str_0)
        float_0 = -2207.4414
        dict_1 = {str_0: str_0}
        str_2 = '\x0bI"C?2IBa\x0b1\n'
        str_3 = "4+0Au8lD\r,^SwI'e7Nfi"
        corrected_command_1 = module_0.CorrectedCommand(dict_0, str_2, str_3)
        var_1 = corrected_command_1.__eq__(dict_1)
        command_0 = module_0.Command(float_0, str_3)
        var_2 = command_0.__eq__(float_0)
        var_3 = corrected_command_1.run(str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ls -l'
        str_1 = 'total 0'
        command_0 = module_0.Command(str_0, str_1)
        str_2 = 'mock_rule'
        str_3 = 'ls'
        var_0 = lambda x: str_3 in x.script
        str_4 = 'ls -la'
        var_1 = lambda x: str_4
        bool_0 = True
        int_0 = 100
        rule_0 = module_0.Rule(str_2, var_0, var_1, bool_0, command_0, int_0, bool_0)
        var_2 = rule_0.get_corrected_commands(command_0)
        var_3 = list(var_2)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\xd02\xa20\xdd\xf9p\xef\xf3\xfe\x0bZ\xb33'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        bool_0 = False
        float_0 = 0.6
        corrected_command_0 = module_0.CorrectedCommand(dict_0, bool_0, float_0)
        list_0 = []
        str_0 = 'Available lifecycle phases are: (.+) -> \\[Help 1\\]'
        tuple_0 = (dict_0, str_0)
        command_0 = module_0.Command(list_0, tuple_0)
        var_0 = corrected_command_0.__eq__(command_0)
        bool_1 = True
        bool_2 = False
        list_1 = [str_0, command_0]
        rule_0 = module_0.Rule(bool_2, bool_1, bytes_0, bool_1, list_1, corrected_command_0, tuple_0)
        var_1 = command_0.__repr__()
        var_2 = rule_0.is_match(command_0)
        tuple_1 = (bytes_0, dict_0, bool_0, float_0)
        var_3 = command_0.update()
        command_1 = module_0.Command(tuple_1, var_0)
        var_4 = rule_0.__repr__()
        var_5 = rule_0.__eq__(bool_0)
        command_2 = module_0.Command(str_0, command_1)
        var_6 = rule_0.__eq__(rule_0)
        str_1 = 'e<.3lH:'
        var_7 = command_2.__eq__(str_1)
        var_8 = corrected_command_0.run(dict_0)
    except BaseException:
        pass