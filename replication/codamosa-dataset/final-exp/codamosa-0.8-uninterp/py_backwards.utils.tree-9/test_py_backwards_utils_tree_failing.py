# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.tree as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        a_s_t_0 = module_0.AST()
        var_0 = module_1.get_closest_parent_of(a_s_t_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_1():
    try:
        a_s_t_0 = module_0.AST()
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 7
        a_s_t_0 = module_0.AST()
        module_1.insert_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'def a(b):\n    return b + 2\na(2)'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.body[int_0]
        tuple_0 = module_1.get_non_exp_parent_and_index(var_0, var_2)
        int_1 = 1849
        var_3 = var_0.body[int_0]
        tuple_1 = module_1.get_non_exp_parent_and_index(var_0, var_3)
        dict_0 = {str_0: int_1, str_0: var_3, str_0: int_0}
        a_s_t_0 = module_0.AST(**dict_0)
        module_1.replace_at(int_1, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'f = a.b(c.d, e.f(g.h, i.j), k.l)'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.value
        int_1 = 0
        var_3 = var_0.body[int_1]
        var_4 = var_3.value
        var_5 = module_1.get_closest_parent_of(var_0, var_4, var_2)
    except BaseException:
        pass