# Automatically generated by Pynguin.
import ansible.module_utils.compat.version as module_0
import ansible.utils.version as module_1

def test_case_0():
    try:
        loose_version_0 = module_0.LooseVersion()
        alpha_0 = module_1._Alpha(loose_version_0)
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(alpha_0)
    except BaseException:
        pass

def test_case_1():
    try:
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        str_0 = '/H8h'
        alpha_0 = module_1._Alpha(semantic_version_0)
        var_1 = alpha_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        complex_0 = None
        list_0 = []
        alpha_0 = module_1._Alpha(list_0)
        var_0 = alpha_0.__le__(complex_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        alpha_0 = module_1._Alpha(bool_0)
        var_0 = alpha_0.__ge__(alpha_0)
        str_0 = 'pC#n[d#['
        float_0 = -85.48546582665912
        numeric_0 = module_1._Numeric(float_0)
        var_1 = numeric_0.__eq__(str_0)
        semantic_version_0 = module_1.SemanticVersion()
        var_2 = semantic_version_0.__repr__()
        semantic_version_1 = module_1.SemanticVersion()
        var_3 = semantic_version_1.__le__(semantic_version_1)
        loose_version_0 = module_0.LooseVersion()
        var_4 = semantic_version_1.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x88y\x0e\x037~%3?\xed\xae'
        semantic_version_0 = module_1.SemanticVersion()
        bool_0 = True
        numeric_0 = module_1._Numeric(bool_0)
        var_0 = numeric_0.__ne__(semantic_version_0)
        var_1 = numeric_0.__gt__(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'P6`3DEG`_8hg|m2RQbBg'
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.__gt__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ' E1p['
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = set()
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.__ne__(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'G]8TrVpRN2XA+X7@$'
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.__lt__(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -2472
        alpha_0 = module_1._Alpha(int_0)
        bool_0 = False
        numeric_0 = module_1._Numeric(bool_0)
        semantic_version_0 = module_1.SemanticVersion()
        var_0 = semantic_version_0.__ge__(numeric_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -2472
        alpha_0 = module_1._Alpha(int_0)
        bool_0 = True
        numeric_0 = module_1._Numeric(bool_0)
        alpha_1 = module_1._Alpha(int_0)
        str_0 = None
        var_0 = numeric_0.__lt__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        float_0 = -131.8
        numeric_0 = module_1._Numeric(float_0)
        float_1 = 2762.053
        alpha_0 = module_1._Alpha(float_1)
        var_0 = alpha_0.__ge__(numeric_0)
        bool_0 = True
        numeric_1 = module_1._Numeric(bool_0)
        var_1 = numeric_1.__le__(set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        semantic_version_0 = module_1.SemanticVersion()
        int_0 = 302
        float_0 = -1890.312489
        numeric_0 = module_1._Numeric(float_0)
        var_0 = numeric_0.__eq__(int_0)
        str_0 = '^)6,'
        var_1 = semantic_version_0.parse(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_1.SemanticVersion()
        semantic_version_1 = module_1.SemanticVersion()
        semantic_version_2 = module_1.SemanticVersion()
        var_0 = semantic_version_1.__le__(semantic_version_1)
        loose_version_0 = module_0.LooseVersion()
        var_1 = semantic_version_1.from_loose_version(loose_version_0)
    except BaseException:
        pass