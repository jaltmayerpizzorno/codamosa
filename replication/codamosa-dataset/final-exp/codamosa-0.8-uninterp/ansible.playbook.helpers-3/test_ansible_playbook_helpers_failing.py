# Automatically generated by Pynguin.
import ansible.playbook.helpers as module_0
import ansible.parsing.mod_args as module_1

def test_case_0():
    try:
        bool_0 = False
        str_0 = "qC f{\x0cku#''!\r@d\r=$"
        var_0 = module_0.load_list_of_blocks(bool_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        list_0 = [set_0, set_0, set_0]
        str_0 = '$Iq'
        bytes_0 = b'\x7fQ'
        var_0 = module_0.load_list_of_blocks(list_0, list_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -3718.1
        float_1 = 451.36862
        list_0 = []
        int_0 = 32601
        tuple_0 = (float_1, list_0, int_0)
        str_0 = '3B\\*>c\nke\x0creb?w/'
        bytes_0 = b'\xd7\x0f%\x82\xfa >\x7f\xe8\xf9\xb7\x8a\x7f~vD'
        var_0 = module_0.load_list_of_tasks(float_0, tuple_0, str_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 4810.9
        list_0 = [float_0, float_0, float_0, float_0]
        str_0 = 'H{RXX5X]{l7f'
        var_0 = module_0.load_list_of_roles(list_0, float_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\r'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = '\n    NetBSD-specific subclass of Hardware.  Defines memory and CPU facts:\n    - memfree_mb\n    - memtotal_mb\n    - swapfree_mb\n    - swaptotal_mb\n    - processor (a list)\n    - processor_cores\n    - processor_count\n    - devices\n    '
        bytes_0 = b''
        tuple_0 = (str_1, bytes_0)
        var_0 = module_0.load_list_of_roles(str_0, dict_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        set_0 = None
        str_0 = 'uc'
        bool_0 = False
        dict_0 = None
        var_0 = module_0.load_list_of_blocks(set_0, str_0, bool_0, dict_0)
        list_0 = []
        dict_1 = {}
        str_1 = '%(4-KYcH2'
        list_1 = [dict_0, dict_1, list_0, dict_1]
        int_0 = -2847
        tuple_0 = (str_1, int_0, str_1)
        float_0 = 0.2
        var_1 = module_0.load_list_of_roles(list_0, dict_1, float_0)
        var_2 = module_0.load_list_of_blocks(list_1, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        dict_0 = {}
        str_0 = '%(4-KYcH2'
        list_1 = [dict_0, list_0, dict_0]
        int_0 = -2847
        tuple_0 = (str_0, int_0, str_0)
        var_0 = module_0.load_list_of_blocks(list_1, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        bytes_0 = b'\\\xcd\xbf\x95i\xb1\x14\x8c\x17\xe5\xd1\x83\x06\x97\x00\x08'
        list_0 = [dict_0, bytes_0]
        float_0 = 463.3256
        str_0 = 'l/0\x0cCgW.'
        var_0 = module_0.load_list_of_tasks(list_0, float_0, str_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        list_0 = []
        dict_1 = {}
        str_0 = '%(4-KYcH2'
        list_1 = [dict_0, dict_1, list_0, dict_1]
        int_0 = -2847
        tuple_0 = (str_0, int_0, str_0)
        var_0 = module_0.load_list_of_blocks(list_1, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'foo'
        str_1 = {str_0: str_0}
        str_2 = {str_0: str_1}
        str_3 = [str_2]
        str_4 = 'Jd<?\n83q6'
        var_0 = None
        bool_0 = False
        var_1 = module_0.load_list_of_tasks(str_3, str_2, var_0, str_4, bool_0, bool_0, str_2, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'oo\tb'
        str_1 = {str_0: str_0}
        str_2 = [str_1]
        var_0 = None
        bool_0 = False
        var_1 = None
        var_2 = module_0.load_list_of_tasks(str_2, str_1, str_0, str_0, var_0, bool_0, str_1, var_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'block'
        str_1 = 'include_tasks'
        str_2 = {str_1: str_1}
        str_3 = [str_2, str_2]
        str_4 = {str_0: str_3}
        str_5 = [str_4]
        var_0 = None
        bool_0 = True
        var_1 = module_0.load_list_of_tasks(str_5, var_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'foo'
        str_1 = {str_0: str_0}
        str_2 = {str_0: str_1}
        str_3 = [str_2]
        str_4 = 'Jd<?\n83q6'
        var_0 = None
        bool_0 = True
        var_1 = module_0.load_list_of_tasks(str_3, str_2, var_0, str_4, bool_0, bool_0, str_2, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = None
        module_args_parser_0 = None
        str_0 = ''
        var_0 = module_0.load_list_of_blocks(module_args_parser_0, str_0)
        list_0 = [set_0, set_0]
        module_args_parser_1 = module_1.ModuleArgsParser()
        int_0 = -415
        float_0 = 2846.31963
        var_1 = module_0.load_list_of_blocks(list_0, module_args_parser_1, int_0, float_0)
        str_1 = 'fx$P\x0c'
        module_args_parser_2 = module_1.ModuleArgsParser(str_1)
    except BaseException:
        pass