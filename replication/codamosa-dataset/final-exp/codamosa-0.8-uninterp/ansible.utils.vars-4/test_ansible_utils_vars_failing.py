# Automatically generated by Pynguin.
import ansible.utils.vars as module_0

def test_case_0():
    try:
        str_0 = 'RAq[Xh9S|w\x0b'
        set_0 = {str_0, str_0, str_0}
        var_0 = module_0.combine_vars(str_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        str_0 = '#_'
        int_0 = 2448
        bytes_0 = b'\x08\xc7\xc7\x0e_\xbb\x8b'
        dict_0 = {tuple_0: int_0, tuple_0: bytes_0, str_0: int_0}
        var_0 = module_0._isidentifier_PY3(dict_0)
        bool_0 = False
        var_1 = module_0.load_options_vars(bool_0)
        str_1 = 'usage: %prog [options] [host|group]'
        var_2 = module_0.combine_vars(int_0, str_1, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        list_0 = [set_0, set_0]
        var_0 = module_0.merge_hash(set_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '?LyS=,b3'
        var_0 = module_0._isidentifier_PY3(str_0)
        int_0 = 86
        var_1 = module_0.load_options_vars(int_0)
        var_2 = module_0.get_unique_id()
        var_3 = module_0.get_unique_id()
        bytes_0 = b'\xf6\x8f\xf4\xea\xba\x94K\x83SGt]\x85\xf7\x80\x1a'
        dict_0 = {var_0: bytes_0}
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        float_0 = -185.7
        var_4 = module_0.merge_hash(dict_0, tuple_1, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = module_0.get_unique_id()
        str_0 = 'hour'
        complex_0 = None
        dict_0 = {str_0: str_0, str_0: complex_0}
        str_1 = 'x'
        var_1 = module_0._isidentifier_PY3(str_1)
        int_0 = 95
        var_2 = module_0.load_options_vars(int_0)
        dict_1 = {str_0: str_0}
        float_0 = 1.0
        var_3 = module_0._isidentifier_PY3(float_0)
        int_1 = None
        set_0 = set()
        tuple_0 = (int_1, dict_0, set_0)
        var_4 = module_0.load_extra_vars(tuple_0)
        bytes_0 = b'\xe6X{\xcf\xbahd\xe9\xa0\x9d\xe2\xa2\xf3'
        var_5 = module_0.load_options_vars(bytes_0)
        var_6 = module_0.load_extra_vars(tuple_0)
        var_7 = module_0.get_unique_id()
        var_8 = module_0.load_extra_vars(set_0)
        tuple_1 = (dict_1,)
        list_0 = []
        var_9 = module_0.combine_vars(tuple_1, list_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -2148
        bytes_0 = b'\xf3'
        str_0 = 'A"'
        var_0 = module_0.merge_hash(int_0, bytes_0, int_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = {}
        var_1 = module_0.merge_hash(var_0, var_0)
        int_0 = 1
        str_0 = 'b'
        str_1 = 'c'
        int_1 = {str_1: int_0}
        int_2 = {str_0: int_0, str_0: int_1}
        int_3 = {str_1: int_0}
        int_4 = {str_1: int_0, str_0: int_3}
        var_2 = module_0.merge_hash(int_2, int_4)
        int_5 = {str_1: int_0}
        int_6 = {str_1: int_0, str_0: int_5}
        tuple_0 = ()
        var_3 = module_0.combine_vars(tuple_0, int_6)
    except BaseException:
        pass