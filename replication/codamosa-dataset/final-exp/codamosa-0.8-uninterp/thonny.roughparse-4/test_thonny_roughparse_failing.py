# Automatically generated by Pynguin.
import thonny.roughparse as module_0

def test_case_0():
    try:
        float_0 = 1630.86991952929
        bytes_0 = None
        str_0 = 'trmOPGmYR]x-%(ssvmX.'
        dict_0 = {bytes_0: float_0, str_0: float_0, bytes_0: str_0, str_0: str_0}
        bool_0 = False
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, bool_0)
        var_0 = string_translate_pseudo_mapping_0.__len__()
        rough_parser_0 = module_0.RoughParser(str_0, bool_0)
        bool_1 = True
        var_1 = rough_parser_0.set_lo(bool_1)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = '~ckEQ#>'
        rough_parser_0 = module_0.RoughParser(str_0, bool_0)
        var_0 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b''
        rough_parser_0 = module_0.RoughParser(bytes_0, bytes_0)
        var_0 = rough_parser_0.set_str(bytes_0)
        var_1 = rough_parser_0.get_continuation_type()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b''
        rough_parser_0 = module_0.RoughParser(bytes_0, bytes_0)
        var_0 = rough_parser_0.set_str(bytes_0)
        var_1 = rough_parser_0.get_last_open_bracket_pos()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'trmOGmYR]x-%(ssX.'
        bytes_0 = b''
        bool_0 = False
        dict_0 = {bytes_0: bytes_0, str_0: bytes_0, bytes_0: bytes_0, str_0: str_0}
        bool_1 = False
        rough_parser_0 = module_0.RoughParser(dict_0, bool_1)
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.compute_bracket_indent()
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 1230.329948
        str_0 = 'jb[[uS{~'
        bytes_0 = b'@\x84\x8f\x0b\x9f\x12u\x914\x9d\xfe'
        bytes_1 = b'\x81vQE\x81\xff\xdd\xdfz\xf7\xd9\x130\xd4\xff-\x8e'
        set_0 = {bytes_0, float_0, bytes_1, bytes_0}
        set_1 = {str_0}
        tuple_0 = (bytes_0, bytes_1, set_0, set_1)
        rough_parser_0 = module_0.RoughParser(str_0, tuple_0)
        var_0 = rough_parser_0.get_num_lines_in_stmt()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'D 4'
        dict_0 = {str_0: str_0, str_0: str_0}
        bool_0 = False
        rough_parser_0 = module_0.RoughParser(dict_0, bool_0)
        var_0 = rough_parser_0.compute_backslash_indent()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'G\x9e2e(\xc8>\x0f\xc7gQ\xfc\x8b\x8d'
        str_0 = 'nCT*F*63_\tr#Y`\\#'
        rough_parser_0 = module_0.RoughParser(bytes_0, str_0)
        var_0 = rough_parser_0.get_last_stmt_bracketing()
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        rough_parser_0 = module_0.RoughParser(dict_0, dict_0)
        dict_1 = {rough_parser_0: dict_0, rough_parser_0: rough_parser_0}
        str_0 = 'Some Python commands in the PATH of this session:'
        hyper_parser_0 = module_0.HyperParser(dict_1, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b''
        rough_parser_0 = module_0.RoughParser(bytes_0, bytes_0)
        var_0 = rough_parser_0.set_str(bytes_0)
        var_1 = rough_parser_0.is_block_opener()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b''
        list_0 = [bytes_0]
        rough_parser_0 = module_0.RoughParser(list_0, bytes_0)
        var_0 = rough_parser_0.set_str(bytes_0)
        str_0 = '{\\63:'
        tuple_0 = (str_0,)
        var_1 = rough_parser_0.find_good_parse_start(rough_parser_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b''
        list_0 = [bytes_0]
        rough_parser_0 = module_0.RoughParser(list_0, bytes_0)
        var_0 = rough_parser_0.set_str(bytes_0)
        var_1 = rough_parser_0.is_block_closer()
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'8\xe18\xf0\x9f \x98\xc7\x02mBT5\r\x08\xb5\xb0\xcf\xfb'
        tuple_0 = ()
        rough_parser_0 = module_0.RoughParser(tuple_0, bytes_0)
        float_0 = 124.138
        hyper_parser_0 = module_0.HyperParser(rough_parser_0, float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b''
        list_0 = [bytes_0]
        rough_parser_0 = module_0.RoughParser(list_0, bytes_0)
        var_0 = rough_parser_0.set_str(bytes_0)
        var_1 = rough_parser_0.get_base_indent_string()
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        str_0 = '~ckEQ#>'
        rough_parser_0 = module_0.RoughParser(str_0, bool_0)
        var_0 = rough_parser_0.set_lo(bool_0)
        var_1 = rough_parser_0.set_lo(rough_parser_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 1630.86991952929
        bytes_0 = None
        str_0 = 'trmOPGmYR]x-%(ssvmX.'
        dict_0 = {bytes_0: float_0, str_0: float_0, bytes_0: str_0, str_0: str_0}
        bool_0 = False
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, bool_0)
        var_0 = string_translate_pseudo_mapping_0.get(float_0)
        var_1 = string_translate_pseudo_mapping_0.__len__()
        set_0 = set()
        hyper_parser_0 = module_0.HyperParser(set_0, set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        set_0 = {bool_0, bool_0}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, set_0)
        var_0 = string_translate_pseudo_mapping_0.__iter__()
        str_0 = ']ckEQ#>'
        rough_parser_0 = module_0.RoughParser(str_0, bool_0)
        var_1 = rough_parser_0.set_lo(bool_0)
        var_2 = rough_parser_0.set_str(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -116.975
        str_0 = 'trmOPGmYR]x-%(ssvmX.'
        bool_0 = False
        dict_0 = {str_0: str_0}
        set_0 = {bool_0}
        string_translate_pseudo_mapping_0 = module_0.StringTranslatePseudoMapping(dict_0, set_0)
        var_0 = string_translate_pseudo_mapping_0.__getitem__(float_0)
        str_1 = '~ckE>Q#>'
        rough_parser_0 = module_0.RoughParser(str_1, bool_0)
        tuple_0 = ()
        bytes_0 = b'\xe9\xfa\xde\xc4\xf79\xad\xd7\xff'
        rough_parser_1 = module_0.RoughParser(tuple_0, bytes_0)
        rough_parser_2 = module_0.RoughParser(bytes_0, tuple_0)
        list_0 = [rough_parser_2]
        rough_parser_3 = module_0.RoughParser(rough_parser_1, list_0)
        var_1 = rough_parser_0.set_lo(rough_parser_3)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b''
        list_0 = [bytes_0]
        rough_parser_0 = module_0.RoughParser(list_0, bytes_0)
        var_0 = rough_parser_0.set_str(bytes_0)
        var_1 = rough_parser_0.find_good_parse_start()
        var_2 = rough_parser_0.is_block_opener()
    except BaseException:
        pass