# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        dict_0 = None
        distribution_fact_collector_0 = module_0.DistributionFactCollector(dict_0)
        bool_0 = True
        distribution_files_0 = None
        str_0 = 'f11[Z\x0cLu_d(!P%'
        bytes_0 = b'`x\xea~\xc5O\x07'
        tuple_0 = (distribution_files_0, str_0, bytes_0)
        var_0 = module_0.get_uname(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -1688.3
        var_0 = module_0.get_uname(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'DDfU$+8Z'
        float_0 = -2306.91
        int_0 = 2003
        dict_0 = {}
        tuple_0 = (str_0, float_0, int_0, dict_0)
        bytes_0 = None
        float_1 = 1739.09
        set_0 = {float_1, float_1}
        distribution_fact_collector_0 = module_0.DistributionFactCollector(set_0)
        str_1 = '7yyl44M_\n2'
        bool_0 = False
        distribution_files_0 = module_0.DistributionFiles(bool_0)
        var_0 = distribution_files_0.parse_distribution_file_Mandriva(set_0, str_1, dict_0, distribution_fact_collector_0)
        list_0 = [dict_0, dict_0, bytes_0]
        distribution_files_1 = module_0.DistributionFiles(list_0)
        var_1 = distribution_files_1.parse_distribution_file_Alpine(int_0, set_0, distribution_fact_collector_0, distribution_fact_collector_0)
        distribution_files_2 = module_0.DistributionFiles(set_0)
        var_2 = distribution_files_2.parse_distribution_file_Amazon(tuple_0, bytes_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 628.26
        str_0 = 'V\x0cvC9$$Z1~'
        list_0 = [str_0, str_0, str_0]
        distribution_0 = None
        distribution_1 = module_0.Distribution(distribution_0)
        str_1 = 'autoremove'
        distribution_files_0 = module_0.DistributionFiles(str_1)
        var_0 = distribution_files_0.parse_distribution_file_CentOS(float_0, str_0, list_0, distribution_1)
        dict_0 = {}
        distribution_2 = module_0.Distribution(dict_0)
        var_1 = distribution_2.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        distribution_0 = module_0.Distribution(dict_0)
        var_0 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = None
        distribution_0 = module_0.Distribution(var_0)
        str_0 = 'distribution_major_version'
        str_1 = ')^\n-.k;4}A7G:w'
        str_2 = 'S8K\n[o~6I\tU.Fx$>\x0b'
        set_0 = {str_0, str_0, str_0, var_0}
        float_0 = -3225.5532
        distribution_files_0 = module_0.DistributionFiles(float_0)
        var_1 = distribution_files_0.parse_distribution_file_NA(str_1, str_2, distribution_0, set_0)
        var_2 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "O\x0c:QD%>Y'~\rz5D"
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = ' Return a mapping of file objects to selector keys '
        distribution_0 = module_0.Distribution(str_0)
        distribution_1 = module_0.Distribution(distribution_0)
        bool_0 = True
        str_1 = '@['
        list_0 = [bool_0, str_1]
        bool_1 = False
        distribution_files_0 = module_0.DistributionFiles(bool_1)
        var_0 = distribution_files_0.parse_distribution_file_Debian(bool_0, str_1, list_0, dict_0)
        var_1 = distribution_1.get_distribution_FreeBSD()
        list_1 = [dict_0]
        bytes_0 = b'n\xa4\xf3\x99t\x154\x0eL\x9b9'
        bool_2 = True
        str_2 = 's?mI(TP8{Wn18qTx$-"'
        distribution_2 = module_0.Distribution(str_2)
        tuple_0 = (list_1, bytes_0, bool_2)
        distribution_3 = module_0.Distribution(tuple_0)
        var_2 = distribution_3.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'Y\xa1K\xca[\xfb\xdc\x93\x05v\x8aV\x1aw'
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'ncJvl'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        var_1 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        distribution_0 = module_0.Distribution(bool_0)
        var_0 = distribution_0.get_distribution_SMGL()
        list_0 = [var_0, var_0, distribution_0, bool_0]
        distribution_files_0 = module_0.DistributionFiles(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '(Vbx+,oay63,vWo3'
        list_0 = []
        bool_0 = False
        str_1 = 'problem_mark'
        distribution_0 = module_0.Distribution(str_1)
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        str_2 = "eGkz'RTHZVz+qZzj"
        distribution_files_0 = module_0.DistributionFiles(str_2)
        var_0 = distribution_files_0.parse_distribution_file_Flatcar(list_0, bool_0, distribution_0, distribution_fact_collector_0)
        distribution_files_1 = module_0.DistributionFiles(str_0)
        var_1 = distribution_files_1.process_dist_files()
        int_0 = -2044
        distribution_1 = module_0.Distribution(int_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_1)
        distribution_2 = module_0.Distribution(distribution_fact_collector_1)
        var_2 = distribution_2.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 100.0
        str_0 = '(Vbx+,oay63,vWo3'
        set_0 = {str_0, str_0, float_0, str_0}
        distribution_files_0 = module_0.DistributionFiles(set_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        var_0 = distribution_0.get_distribution_SMGL()
        distribution_files_1 = module_0.DistributionFiles(str_0)
        var_1 = distribution_files_1.process_dist_files()
        tuple_0 = (str_0,)
        str_1 = 'NeDnR/U:\x0ck6IGO-'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        dict_0 = {str_0: distribution_fact_collector_0}
        var_2 = distribution_files_1.parse_distribution_file_CentOS(str_0, str_1, distribution_fact_collector_0, dict_0)
        distribution_fact_collector_1 = module_0.DistributionFactCollector(tuple_0)
        int_0 = -1883
        distribution_1 = module_0.Distribution(int_0)
        var_3 = distribution_1.get_distribution_FreeBSD()
        bytes_0 = b'\x91\x9e\xa6\x0cG\xad'
        var_4 = distribution_fact_collector_0.collect(bytes_0, distribution_0)
        var_5 = distribution_fact_collector_1.collect()
        var_6 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass