# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        bool_0 = False
        semigroup_0 = module_0.Semigroup(bool_0)
        str_0 = "Byr'Wv/g"
        map_0 = module_0.Map(str_0)
        map_1 = module_0.Map(map_0)
        str_1 = map_0.__str__()
        str_2 = '}4Bf:EJ(J='
        bool_1 = semigroup_0.__eq__(str_2)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 159
        semigroup_0 = module_0.Semigroup(int_0)
        bool_0 = False
        var_0 = semigroup_0.fold(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n        If Maybe is empty return default_value, in other case.\n\n        :param default_value: value to return if Maybe is empty\n        :type default_value: Any\n        :returns: value of Maybe or default_value\n        :rtype: A\n        '
        list_0 = [str_0]
        sum_0 = module_0.Sum(list_0)
        int_0 = -2318
        sum_1 = module_0.Sum(int_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = True
        all_0 = module_0.All(int_0)
        all_1 = all_0.concat(all_0)
        max_0 = None
        first_0 = module_0.First(all_1)
        bool_0 = False
        all_2 = module_0.All(bool_0)
        all_3 = all_0.concat(all_2)
        all_4 = module_0.All(first_0)
        last_0 = module_0.Last(all_4)
        str_0 = last_0.__str__()
        str_1 = all_4.__str__()
        var_0 = last_0.concat(max_0)
    except BaseException:
        pass

def test_case_4():
    try:
        all_0 = None
        str_0 = "\x0b\x0cJ9b+;#E\\0.'"
        all_1 = module_0.All(str_0)
        all_2 = all_1.concat(all_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '3fJQ0AjuQHTHXY`k'
        one_0 = module_0.One(str_0)
        str_1 = one_0.__str__()
        var_0 = one_0.concat(one_0)
        bytes_0 = b'\xe1B_\xea<[\xe0\xd3\xd8K\xb1~\xb1\x04'
        var_1 = one_0.concat(bytes_0)
        str_2 = one_0.__str__()
        str_3 = one_0.__str__()
        int_0 = None
        sum_0 = module_0.Sum(int_0)
        bool_0 = True
        sum_1 = module_0.Sum(bool_0)
        sum_2 = sum_1.concat(sum_0)
    except BaseException:
        pass

def test_case_6():
    try:
        complex_0 = None
        str_0 = ' * S1p<vFdIT~0='
        max_0 = module_0.Max(str_0)
        last_0 = module_0.Last(max_0)
        var_0 = last_0.concat(complex_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        min_0 = module_0.Min(bool_0)
        float_0 = -1232.936
        last_0 = module_0.Last(float_0)
        var_0 = min_0.concat(last_0)
    except BaseException:
        pass

def test_case_8():
    try:
        min_0 = None
        bytes_0 = b'gQ\x80\xe1EAK\x9fP\xd8\x0b\xaf~\x82w\x86\x89'
        min_1 = module_0.Min(bytes_0)
        list_0 = [min_1]
        int_0 = -457
        one_0 = module_0.One(int_0)
        first_0 = module_0.First(one_0)
        bool_0 = False
        one_1 = module_0.One(bool_0)
        var_0 = one_1.concat(first_0)
        min_2 = module_0.Min(list_0)
        var_1 = min_2.concat(min_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = True
        all_0 = module_0.All(int_0)
        all_1 = all_0.concat(all_0)
        bool_0 = False
        min_0 = module_0.Min(bool_0)
        max_0 = None
        bool_1 = False
        first_0 = module_0.First(bool_1)
        bool_2 = False
        all_2 = module_0.All(bool_2)
        all_3 = all_0.concat(all_2)
        all_4 = all_3.concat(all_2)
        str_0 = first_0.__str__()
        last_0 = module_0.Last(all_4)
        str_1 = last_0.__str__()
        str_2 = all_4.__str__()
        list_0 = [str_1, max_0, bool_1, int_0]
        dict_0 = None
        one_0 = module_0.One(dict_0)
        one_1 = module_0.One(list_0)
        str_3 = one_1.__str__()
        bytes_0 = b'\xec$6\xe6\x8c\t\xd9T\x1e\t?\x1e\x01\x96\xc4\xb2\xa0>'
        var_0 = last_0.concat(bytes_0)
    except BaseException:
        pass