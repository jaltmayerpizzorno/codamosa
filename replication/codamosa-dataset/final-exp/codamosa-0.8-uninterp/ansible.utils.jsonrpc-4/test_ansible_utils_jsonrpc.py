# Automatically generated by Pynguin.
import ansible.utils.jsonrpc as module_0
import json as module_1
import ansible.module_utils.common.text.converters as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = 'foo'
    str_1 = 'bar'
    str_2 = {str_0: str_1}
    json_rpc_server_0 = module_0.JsonRpcServer()
    str_3 = '_identifier'
    str_4 = '1'
    var_0 = setattr(json_rpc_server_0, str_3, str_4)
    var_1 = json_rpc_server_0.response(str_2)
    int_0 = 0
    var_2 = module_1.dumps(str_2)
    bytes_0 = b'test'
    var_3 = json_rpc_server_0.response(bytes_0)
    var_4 = module_2.to_text(bytes_0)

def test_case_2():
    json_rpc_server_0 = module_0.JsonRpcServer()
    str_0 = '{"id": "None", "jsonrpc": "2.0", "params": [[1,2,3], {"quux": "quux"}], "method": "test_method"}'
    var_0 = json_rpc_server_0.handle_request(str_0)

def test_case_3():
    json_rpc_server_0 = module_0.JsonRpcServer()
    str_0 = 'test'
    var_0 = json_rpc_server_0.register(str_0)
    str_1 = '_identifier'
    str_2 = 'identifier'
    var_1 = setattr(json_rpc_server_0, str_1, str_2)
    str_3 = 'Parse error'
    int_0 = -32700
    var_2 = json_rpc_server_0.error(int_0, str_3)
    str_4 = 'data'
    str_5 = 'Method not found'
    int_1 = -32601
    var_3 = json_rpc_server_0.error(int_1, str_5, str_4)