# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    str_0 = '\n        If Maybe is empty return new empty Maybe, in other case\n        takes mapper function and returns new instance of Maybe\n        with result of mapper.\n\n        :param mapper: function to call with Maybe value\n        :type mapper: Function(A) -> B\n        :returns: Maybe[B | None]\n        '
    min_0 = module_0.Min(str_0)

def test_case_1():
    int_0 = -2524
    max_0 = module_0.Max(int_0)
    list_0 = [int_0]
    all_0 = module_0.All(list_0)
    all_1 = module_0.All(max_0)
    str_0 = all_0.__str__()
    str_1 = '+AF kz*-"\'J3%W&iQ'
    all_2 = module_0.All(str_1)
    all_3 = module_0.All(all_2)
    all_4 = all_3.concat(all_2)
    all_5 = all_4.concat(all_0)
    str_2 = all_0.__str__()

def test_case_2():
    int_0 = -1219
    one_0 = module_0.One(int_0)
    map_0 = module_0.Map(one_0)
    first_0 = module_0.First(map_0)
    min_0 = module_0.Min(first_0)
    str_0 = min_0.__str__()

def test_case_3():
    complex_0 = None
    int_0 = 733
    first_0 = module_0.First(int_0)
    var_0 = first_0.concat(complex_0)

def test_case_4():
    bytes_0 = b'\xec\xd8n\xac_\xa5\xcc\xa4\xce \x93'
    list_0 = []
    last_0 = module_0.Last(list_0)
    str_0 = last_0.__str__()
    str_1 = ''
    last_1 = module_0.Last(str_1)
    first_0 = module_0.First(last_1)
    str_2 = first_0.__str__()
    min_0 = module_0.Min(bytes_0)
    min_1 = module_0.Min(min_0)

def test_case_5():
    bytes_0 = b'|\xa8o:\xd8d\x04\x89K\xc0\x04\r\x8f'
    str_0 = 'KBhaIpig.F<(6An'
    max_0 = module_0.Max(str_0)
    min_0 = module_0.Min(max_0)
    str_1 = min_0.__str__()
    sum_0 = module_0.Sum(bytes_0)

def test_case_6():
    int_0 = 5
    min_0 = module_0.Min(int_0)
    int_1 = 2
    min_1 = module_0.Min(int_1)
    var_0 = min_1.concat(min_0)
    var_1 = var_0.value

def test_case_7():
    tuple_0 = ()
    one_0 = module_0.One(tuple_0)
    str_0 = one_0.__str__()
    list_0 = [str_0, str_0]
    list_1 = []
    first_0 = module_0.First(list_1)
    var_0 = first_0.concat(list_0)
    bool_0 = False
    one_1 = None
    float_0 = -357.59
    semigroup_0 = module_0.Semigroup(float_0)
    tuple_1 = ()
    all_0 = module_0.All(tuple_1)
    max_0 = module_0.Max(all_0)
    dict_0 = {one_1: bool_0, bool_0: one_1, bool_0: one_1, one_1: one_1}
    min_0 = module_0.Min(dict_0)
    last_0 = None
    semigroup_1 = module_0.Semigroup(last_0)
    str_1 = 'az{Kjjm'
    max_1 = module_0.Max(str_1)
    first_1 = module_0.First(min_0)
    max_2 = module_0.Max(semigroup_1)
    list_2 = [one_1, one_1]
    str_2 = all_0.__str__()
    map_0 = None
    complex_0 = None
    semigroup_2 = module_0.Semigroup(complex_0)
    tuple_2 = (first_1, list_2, list_2, map_0)
    min_1 = module_0.Min(tuple_2)
    str_3 = max_2.__str__()
    tuple_3 = (bool_0, one_1, min_1)
    one_2 = module_0.One(tuple_3)
    var_1 = one_0.concat(min_1)
    all_1 = module_0.All(map_0)
    str_4 = max_0.__str__()
    min_2 = module_0.Min(list_2)
    str_5 = all_0.__str__()

def test_case_8():
    list_0 = []
    max_0 = module_0.Max(list_0)
    int_0 = -1366
    min_0 = module_0.Min(int_0)
    one_0 = module_0.One(min_0)
    bytes_0 = b'\x0c\x93\\@T!\xeb\xe8D\x12Wa\x0c%\xdd+\xa5:\xe6'
    first_0 = module_0.First(bytes_0)
    str_0 = first_0.__str__()
    all_0 = module_0.All(list_0)
    all_1 = all_0.concat(all_0)

def test_case_9():
    int_0 = 2595
    max_0 = module_0.Max(int_0)
    list_0 = [int_0]
    all_0 = module_0.All(list_0)
    all_1 = module_0.All(max_0)
    all_2 = all_1.concat(all_0)
    str_0 = all_2.__str__()
    str_1 = '+AF kz*-"\'J3%W&iQ'
    all_3 = module_0.All(str_1)
    all_4 = module_0.All(all_3)
    all_5 = all_4.concat(all_2)
    all_6 = all_5.concat(all_0)
    str_2 = 'EqE?px/'
    one_0 = module_0.One(str_2)
    int_1 = 1978
    map_0 = module_0.Map(int_1)
    var_0 = max_0.concat(map_0)
    str_3 = all_5.__str__()

def test_case_10():
    int_0 = 2595
    max_0 = module_0.Max(int_0)
    list_0 = [int_0]
    all_0 = module_0.All(list_0)
    all_1 = module_0.All(max_0)
    all_2 = all_1.concat(all_0)
    str_0 = all_2.__str__()
    str_1 = '+AF kz*-"\'J3%W&iQ'
    all_3 = module_0.All(str_1)
    all_4 = module_0.All(all_3)
    all_5 = all_4.concat(all_2)
    all_6 = all_5.concat(all_0)
    str_2 = 'EqE?px/'
    one_0 = module_0.One(str_2)
    int_1 = 1978
    map_0 = module_0.Map(int_1)
    var_0 = max_0.concat(max_0)
    str_3 = all_2.__str__()

def test_case_11():
    int_0 = 1
    int_1 = 2
    sum_0 = module_0.Sum(int_1)
    sum_1 = {int_0: sum_0}
    map_0 = module_0.Map(sum_1)
    int_2 = 3
    sum_2 = module_0.Sum(int_2)
    sum_3 = {int_0: sum_2}
    map_1 = module_0.Map(sum_3)
    var_0 = map_0.concat(map_1)
    int_3 = 5
    sum_4 = module_0.Sum(int_3)
    sum_5 = {int_0: sum_4}
    map_2 = module_0.Map(sum_5)

def test_case_12():
    int_0 = 2
    min_0 = module_0.Min(int_0)
    int_1 = 1
    min_1 = module_0.Min(int_1)
    var_0 = min_0.concat(min_1)
    var_1 = var_0.value