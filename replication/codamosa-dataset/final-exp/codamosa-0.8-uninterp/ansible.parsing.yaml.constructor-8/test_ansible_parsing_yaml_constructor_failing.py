# Automatically generated by Pynguin.
import ansible.parsing.yaml.constructor as module_0
import ansible.parsing.yaml.objects as module_1
import ansible.utils.display as module_2
import yaml.nodes as module_3

def test_case_0():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_0.construct_mapping(ansible_constructor_0)
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        bytes_0 = b'\x8e\x8b\x8fg\xe4\x9f\xa7\x1f\xbc\x86h\x94A\xfa\xe4\x03'
        var_0 = ansible_constructor_0.construct_yaml_str(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        tuple_0 = (ansible_constructor_0,)
        ansible_constructor_1 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_1.construct_vault_encrypted_unicode(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        ansible_constructor_0 = module_0.AnsibleConstructor()
        var_0 = ansible_constructor_0.construct_yaml_unsafe(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_constructor_0 = module_0.AnsibleConstructor()
        tuple_0 = ()
        ansible_vault_encrypted_unicode_0 = module_1.AnsibleVaultEncryptedUnicode(tuple_0)
        display_0 = module_2.Display()
        ansible_constructor_1 = module_0.AnsibleConstructor(ansible_vault_encrypted_unicode_0, display_0)
        ansible_mapping_0 = module_1.AnsibleMapping()
        var_0 = ansible_constructor_0.construct_mapping(ansible_mapping_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'tag:yaml.org,2002:map'
        var_0 = []
        var_1 = None
        mapping_node_0 = module_3.MappingNode(str_0, var_0, var_1, var_1)
        ansible_constructor_0 = module_0.AnsibleConstructor(var_1)
        var_2 = ansible_constructor_0.construct_mapping(mapping_node_0)
    except BaseException:
        pass