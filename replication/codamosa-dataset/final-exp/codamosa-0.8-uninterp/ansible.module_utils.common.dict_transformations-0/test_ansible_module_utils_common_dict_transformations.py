# Automatically generated by Pynguin.
import ansible.module_utils.common.dict_transformations as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '%hV|\x0cEP8qVG[tq1EOo;W'
    str_1 = {str_0: str_0}
    str_2 = {str_0: str_1}
    var_0 = module_0.camel_dict_to_snake_dict(str_2)

def test_case_2():
    bytes_0 = b'\xa0K\xae\x1a\xe4\xd4^\xb8\x13\xd6q@+>\x8f\xe2H\xff'
    var_0 = module_0.snake_dict_to_camel_dict(bytes_0)

def test_case_3():
    int_0 = 1
    var_0 = dict(b=int_0, c=int_0)
    var_1 = dict(a=int_0, c=var_0)
    int_1 = 2
    var_2 = dict(b=int_1)
    var_3 = dict(a=int_1, c=var_2)
    var_4 = module_0.dict_merge(var_1, var_3)
    var_5 = dict(b=int_1, c=int_0)
    var_6 = dict(a=int_1, c=var_5)

def test_case_4():
    bytes_0 = b'\x980\xad\x10v'
    str_0 = 'Kb1s;_k8%~Kk2[U\x0b\x0c(o'
    var_0 = module_0.dict_merge(bytes_0, str_0)

def test_case_5():
    bool_0 = False
    bytes_0 = None
    var_0 = module_0.snake_dict_to_camel_dict(bytes_0)
    str_0 = '_'
    dict_0 = {str_0: bool_0, str_0: str_0}
    var_1 = module_0.camel_dict_to_snake_dict(dict_0)
    int_0 = -4661
    var_2 = module_0.snake_dict_to_camel_dict(dict_0)
    var_3 = module_0.snake_dict_to_camel_dict(int_0)
    var_4 = module_0.dict_merge(dict_0, dict_0)
    var_5 = module_0.recursive_diff(dict_0, dict_0)

def test_case_6():
    str_0 = 'foo'
    var_0 = dict(KeyName=str_0)
    bool_0 = True
    var_1 = module_0.camel_dict_to_snake_dict(var_0, bool_0)
    var_2 = []
    var_3 = dict(KeyName=str_0, DBSubnetGroups=var_2)
    var_4 = module_0.camel_dict_to_snake_dict(var_3, bool_0)
    str_1 = 'bar'
    var_5 = dict(DBSubnetGroupName=str_1)
    var_6 = dict(KeyName=str_0, DBSubnetGroups=var_4)

def test_case_7():
    str_0 = 'string'
    int_0 = -18
    int_1 = [int_0, int_0, int_0, str_0, int_0]
    int_2 = {str_0: int_1}
    var_0 = module_0.camel_dict_to_snake_dict(int_2)

def test_case_8():
    bool_0 = False
    str_0 = '_'
    dict_0 = {str_0: bool_0, str_0: str_0}
    bool_1 = None
    var_0 = module_0.camel_dict_to_snake_dict(dict_0)
    var_1 = module_0.dict_merge(dict_0, dict_0)
    float_0 = -1415.0886
    var_2 = module_0.dict_merge(float_0, bool_1)

def test_case_9():
    str_0 = 'Region'
    str_1 = 'us-east-1'
    str_2 = {str_0: str_1}
    str_3 = {str_0: str_1}
    var_0 = module_0.recursive_diff(str_2, str_3)
    str_4 = {str_0: str_1}
    str_5 = {str_0: str_4}
    var_1 = module_0.recursive_diff(str_4, str_5)

def test_case_10():
    bool_0 = False
    list_0 = None
    int_0 = -42
    var_0 = module_0.dict_merge(list_0, int_0)
    str_0 = '_'
    dict_0 = {str_0: bool_0, str_0: str_0}
    var_1 = module_0.camel_dict_to_snake_dict(dict_0)
    int_1 = -4661
    var_2 = module_0.snake_dict_to_camel_dict(dict_0)
    var_3 = module_0.snake_dict_to_camel_dict(int_1)
    var_4 = module_0.dict_merge(dict_0, dict_0)
    var_5 = module_0.snake_dict_to_camel_dict(dict_0, int_0)
    bool_1 = True
    var_6 = module_0.dict_merge(str_0, bool_1)

def test_case_11():
    str_0 = 'this is a test'
    str_1 = 'dictionary'
    int_0 = 2
    var_0 = None
    str_2 = 'and'
    str_3 = 'should work'
    str_4 = {str_2: str_3}
    dict_0 = {str_2: str_4}
    list_0 = [str_1, str_2, str_3]
    var_1 = module_0.camel_dict_to_snake_dict(dict_0, list_0)
    str_5 = 'is'
    str_6 = 'nested'
    str_7 = 'o'
    int_1 = 5
    int_2 = {str_6: int_1}
    dict_1 = {}
    var_2 = module_0.camel_dict_to_snake_dict(dict_1)
    int_3 = {str_5: int_2}
    var_3 = {str_0: str_3, str_1: int_3, int_0: str_7, var_0: var_0}
    var_4 = var_3
    var_5 = module_0.recursive_diff(var_2, var_4)

def test_case_12():
    bool_0 = True
    set_0 = {bool_0}
    var_0 = module_0.snake_dict_to_camel_dict(set_0)
    list_0 = None
    int_0 = -42
    var_1 = module_0.dict_merge(list_0, int_0)
    str_0 = '_q'
    dict_0 = {str_0: bool_0, str_0: str_0}
    bool_1 = None
    var_2 = module_0.camel_dict_to_snake_dict(dict_0)
    int_1 = -4661
    var_3 = module_0.snake_dict_to_camel_dict(dict_0)
    var_4 = module_0.snake_dict_to_camel_dict(int_1)
    bytes_0 = b"\xf6\xe3\\b\xfe'\x8f\x8b(\xff\x92q"
    var_5 = module_0.dict_merge(bytes_0, str_0)
    var_6 = module_0.dict_merge(dict_0, dict_0)
    float_0 = -1415.0886
    var_7 = module_0.dict_merge(float_0, bool_1)
    bytes_1 = b'((\xf4\xf5\xcf\xb0x'
    bool_2 = False
    var_8 = module_0.dict_merge(bytes_1, bool_2)
    var_9 = module_0.recursive_diff(dict_0, dict_0)

def test_case_13():
    str_0 = 'Return the diff of two dictionaries.'
    str_1 = 'dictionary'
    int_0 = 2
    var_0 = None
    str_2 = 'and'
    str_3 = 'should work'
    str_4 = {str_2: str_3}
    str_5 = 'is'
    str_6 = 'nested'
    int_1 = 3
    int_2 = {str_6: int_1}
    int_3 = {str_5: int_2}
    str_7 = 'two'
    var_1 = {str_0: str_4, str_1: int_3, int_0: str_7, var_0: var_0}
    str_8 = {str_2: str_3}
    int_4 = 5
    int_5 = {str_6: int_4}
    int_6 = {str_5: int_5}
    var_2 = {str_1: str_8, str_1: int_6, int_0: str_7, var_0: var_0}
    var_3 = var_1
    var_4 = var_2
    var_5 = module_0.recursive_diff(var_3, var_4)

def test_case_14():
    int_0 = 1
    str_0 = 'b'
    int_1 = {str_0: int_0}
    int_2 = {str_0: int_1}
    str_1 = "Unable to find required '{missing}' binary in the path."
    list_0 = []
    var_0 = module_0.dict_merge(str_1, list_0)
    int_3 = {str_0: int_0}
    int_4 = {str_0: int_3}
    var_1 = module_0.recursive_diff(int_2, int_4)

def test_case_15():
    int_0 = 1
    str_0 = 'b'
    int_1 = {str_0: int_0}
    int_2 = {str_0: int_1}
    int_3 = {str_0: int_0}
    var_0 = module_0.recursive_diff(int_2, int_3)

def test_case_16():
    str_0 = 'Return the diff of two dictionaries.'
    str_1 = 'this is\na test'
    str_2 = 'dictionary'
    int_0 = 2
    var_0 = None
    str_3 = 'and'
    str_4 = 'should work'
    str_5 = {str_3: str_4}
    dict_0 = {str_3: str_5}
    var_1 = module_0.snake_dict_to_camel_dict(dict_0, str_0)
    list_0 = [str_2, str_3, str_4]
    var_2 = module_0.camel_dict_to_snake_dict(dict_0, list_0)
    str_6 = 'is'
    str_7 = 'nested'
    int_1 = 3
    int_2 = {str_7: int_1}
    int_3 = {str_6: int_2}
    str_8 = 'o'
    var_3 = {str_1: str_5, str_2: int_3, int_0: str_8, var_0: var_0}
    str_9 = {str_3: str_4}
    int_4 = 5
    int_5 = {str_7: int_4}
    dict_1 = {}
    var_4 = module_0.camel_dict_to_snake_dict(dict_1)
    int_6 = {str_6: int_5}
    var_5 = {str_1: str_9, str_2: int_6, int_0: str_8, var_0: var_0}
    var_6 = var_3
    var_7 = var_5
    var_8 = module_0.recursive_diff(var_6, var_7)

def test_case_17():
    str_0 = 'protocol'
    str_1 = 'HTTP'
    str_2 = {str_0: str_1}
    str_3 = {str_1: str_2}
    bool_0 = True
    dict_0 = {}
    var_0 = module_0.dict_merge(bool_0, dict_0)
    var_1 = module_0.camel_dict_to_snake_dict(str_3)
    str_4 = 'MyString'
    str_5 = 'string'
    str_6 = {str_4: str_5}
    var_2 = module_0.camel_dict_to_snake_dict(str_6)
    str_7 = 'MyBoolean'
    bool_1 = False
    bool_2 = {str_7: bool_1}
    var_3 = module_0.camel_dict_to_snake_dict(bool_2)
    str_8 = 'MyStringList'
    str_9 = [str_5, str_3]
    str_10 = {str_8: str_9}
    var_4 = module_0.camel_dict_to_snake_dict(str_10)
    str_11 = 'MyIntegers'
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = 4
    int_4 = [int_0, int_1, int_2, int_3]
    int_5 = {str_11: int_4}
    var_5 = module_0.camel_dict_to_snake_dict(int_5)

def test_case_18():
    str_0 = 'network'
    str_1 = 'network1'
    str_2 = 'network2'
    str_3 = 'ipv6T'
    str_4 = 'spaghetti'
    str_5 = {str_3: str_4}
    str_6 = 'ipv4T'
    str_7 = {str_6: str_4}
    str_8 = 'ipv6S'
    str_9 = 'ipv6'
    str_10 = {str_9: str_4}
    str_11 = [str_4, str_10]
    str_12 = [str_11]
    str_13 = {str_8: str_12}
    str_14 = {str_0: str_5, str_1: str_7, str_2: str_13}
    var_0 = module_0.camel_dict_to_snake_dict(str_14)