# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    try:
        str_0 = '-2QoPo^?}xd.KL'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        inventory_manager_0 = module_0.InventoryManager(dict_0)
        list_0 = []
        var_0 = module_0.order_patterns(list_0)
        var_1 = inventory_manager_0.restrict_to_hosts(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'f'
        str_1 = 'icmp_type'
        inventory_manager_0 = module_0.InventoryManager(str_1)
        var_0 = inventory_manager_0.add_group(str_0)
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0}
        var_1 = inventory_manager_0.restrict_to_hosts(set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 0
        inventory_manager_0 = module_0.InventoryManager(int_0)
        var_0 = inventory_manager_0.get_groups_dict()
        list_0 = []
        str_0 = 'No<:/gMv&A72 ,In\\>h'
        set_0 = set()
        inventory_manager_1 = module_0.InventoryManager(str_0, set_0, list_0)
        var_1 = inventory_manager_1.clear_caches()
        int_1 = -1837
        bytes_0 = b''
        var_2 = inventory_manager_1.subset(bytes_0)
        var_3 = inventory_manager_1.add_host(int_1)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        float_0 = 2123.0
        inventory_manager_0 = module_0.InventoryManager(float_0)
        str_0 = ''
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0, str_0)
        var_0 = inventory_manager_1.get_host(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x0b\xe6\xfd\xaamp2\x87'
        float_0 = 2138.47
        inventory_manager_0 = module_0.InventoryManager(float_0)
        var_0 = inventory_manager_0.restrict_to_hosts(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 2652.34298
        inventory_manager_0 = module_0.InventoryManager(float_0)
        str_0 = None
        var_0 = inventory_manager_0.subset(str_0)
        var_1 = inventory_manager_0.add_group(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 60.0
        tuple_0 = None
        set_0 = {tuple_0, tuple_0}
        str_0 = '9YT"*y'
        inventory_manager_0 = module_0.InventoryManager(set_0, str_0)
        var_0 = inventory_manager_0.parse_source(float_0)
        tuple_1 = None
        list_0 = []
        inventory_manager_1 = module_0.InventoryManager(list_0)
        inventory_manager_2 = module_0.InventoryManager(inventory_manager_1)
        bool_0 = True
        tuple_2 = (tuple_1, bool_0)
        var_1 = module_0.order_patterns(tuple_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\\s+'
        int_0 = -159
        list_0 = []
        inventory_manager_0 = module_0.InventoryManager(list_0)
        var_0 = inventory_manager_0.list_groups()
        str_1 = '<]'
        inventory_manager_1 = module_0.InventoryManager(int_0, str_1)
        var_1 = inventory_manager_1.parse_sources(str_0)
        bool_0 = False
        var_2 = inventory_manager_1.parse_source(bool_0)
        dict_0 = None
        str_2 = '/bin/dnsdomainname'
        inventory_manager_2 = module_0.InventoryManager(list_0, str_2)
        var_3 = module_0.split_host_pattern(dict_0)
        str_3 = '_variable_params'
        inventory_manager_3 = module_0.InventoryManager(str_3)
        var_4 = inventory_manager_3.get_groups_dict()
        var_5 = module_0.split_host_pattern(inventory_manager_3)
        var_6 = inventory_manager_3.reconcile_inventory()
        var_7 = inventory_manager_0.subset(inventory_manager_3)
        var_8 = inventory_manager_3.clear_pattern_cache()
        var_9 = inventory_manager_3.remove_restriction()
        var_10 = inventory_manager_3.get_groups_dict()
        bool_1 = False
        tuple_0 = ()
        inventory_manager_4 = module_0.InventoryManager(bool_1, tuple_0)
        float_0 = 573.991652
        var_11 = inventory_manager_4.clear_pattern_cache()
        var_12 = inventory_manager_4.restrict_to_hosts(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '5OMHY=vg,[!C|RJBrP'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_0 = inventory_manager_0.parse_sources()
        int_0 = 502
        inventory_manager_1 = module_0.InventoryManager(int_0, str_0)
        var_1 = inventory_manager_0.list_hosts()
        inventory_manager_2 = module_0.InventoryManager(var_1, str_0)
        var_2 = inventory_manager_2.list_hosts()
        var_3 = len(var_1)
        var_4 = inventory_manager_0.remove_restriction()
        var_5 = inventory_manager_2.subset(str_0)
        var_6 = inventory_manager_2.get_hosts(var_2)
        tuple_0 = ()
        bool_0 = True
        inventory_manager_3 = module_0.InventoryManager(bool_0)
        var_7 = inventory_manager_0.restrict_to_hosts(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'VjS\rK:6?7D58gws2Gy '
        bytes_0 = b''
        bool_0 = False
        bytes_1 = None
        inventory_manager_0 = module_0.InventoryManager(bytes_0, bool_0, bytes_1)
        list_0 = [inventory_manager_0, str_0, bool_0]
        bool_1 = False
        tuple_0 = (list_0,)
        tuple_1 = (list_0, tuple_0)
        inventory_manager_1 = module_0.InventoryManager(bool_1, tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xa3\xbfNw\x86\x8b\xaf\xa1\x91\xfd\x17\xbc\xeb\x9a,\x0fa\xab'
        var_0 = module_0.split_host_pattern(bytes_0)
        str_0 = 'R1-^KsQ_'
        bytes_1 = b'e\x19\xb7@nfOsFX\xaa'
        int_0 = -2216
        float_0 = 5545.6
        list_0 = []
        set_0 = set()
        inventory_manager_0 = module_0.InventoryManager(set_0)
        var_1 = inventory_manager_0.list_hosts()
        tuple_0 = (float_0, list_0)
        var_2 = inventory_manager_0.get_host(float_0)
        var_3 = inventory_manager_0.get_hosts(str_0)
        int_1 = 1499
        list_1 = [bytes_1, bytes_1]
        str_1 = 'fA"d$$\rhYKWAg{%6>SU:'
        inventory_manager_1 = module_0.InventoryManager(list_1, str_1)
        var_4 = inventory_manager_1.get_hosts(int_0, tuple_0, int_1)
        int_2 = -958
        var_5 = inventory_manager_1.remove_restriction()
        inventory_manager_2 = module_0.InventoryManager(bytes_1, int_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '-'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        bool_0 = True
        list_0 = None
        var_0 = inventory_manager_0.restrict_to_hosts(list_0)
        set_0 = {bool_0, bool_0, bool_0}
        var_1 = module_0.order_patterns(set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '~e5B#|BSR'
        float_0 = -4130.109
        list_0 = [str_0, float_0, float_0]
        str_1 = '`%nb_'
        bool_0 = None
        dict_0 = None
        inventory_manager_0 = module_0.InventoryManager(bool_0, str_1, dict_0)
        set_0 = {str_1, float_0}
        inventory_manager_1 = module_0.InventoryManager(set_0)
        var_0 = inventory_manager_1.list_hosts()
        inventory_manager_2 = module_0.InventoryManager(float_0)
        var_1 = inventory_manager_2.clear_caches()
        var_2 = inventory_manager_2.subset(list_0)
        var_3 = inventory_manager_2.get_hosts(str_0)
        bytes_0 = b'\xe1\x9d\x1f\xfft'
        var_4 = module_0.order_patterns(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = []
        int_0 = 0
        inventory_manager_0 = module_0.InventoryManager(int_0)
        var_0 = inventory_manager_0.get_hosts(list_0)
        var_1 = inventory_manager_0.clear_pattern_cache()
        bool_0 = False
        var_2 = inventory_manager_0.add_host(list_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x16\x7f?\xaa^\xe1\x13^\xc6\xf6\xc1\x7f#N'
        str_0 = '-1472'
        float_0 = None
        tuple_0 = (str_0, float_0)
        inventory_manager_0 = module_0.InventoryManager(bytes_0, tuple_0)
        var_0 = inventory_manager_0.clear_pattern_cache()
        str_1 = 'localhot,'
        inventory_manager_1 = module_0.InventoryManager(str_1, str_1)
        var_1 = inventory_manager_1.parse_sources()
        var_2 = inventory_manager_1.list_hosts()
        var_3 = inventory_manager_0.parse_source(float_0)
        var_4 = inventory_manager_1.list_hosts()
        inventory_manager_2 = module_0.InventoryManager(var_2, str_1)
        var_5 = inventory_manager_2.parse_sources()
        var_6 = inventory_manager_2.list_hosts()
        var_7 = len(var_6)
        var_8 = inventory_manager_1.remove_restriction()
        str_2 = '%%\tC'
        var_9 = inventory_manager_2.subset(str_2)
        float_1 = 60.0
        var_10 = inventory_manager_2.get_hosts(float_1)
        dict_0 = None
        var_11 = inventory_manager_0.get_hosts(dict_0, var_5, var_10, var_3)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '5OMHY=vg,[!C|RJBrP'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_0 = inventory_manager_0.parse_sources()
        int_0 = 502
        inventory_manager_1 = module_0.InventoryManager(int_0, str_0)
        var_1 = inventory_manager_0.list_hosts()
        inventory_manager_2 = module_0.InventoryManager(var_1, str_0)
        var_2 = inventory_manager_2.list_hosts()
        var_3 = len(var_1)
        var_4 = inventory_manager_0.remove_restriction()
        str_1 = '%%c\tC'
        var_5 = inventory_manager_2.subset(str_1)
        float_0 = 60.0
        var_6 = inventory_manager_2.get_hosts(float_0)
        var_7 = inventory_manager_2.get_hosts(var_2)
        tuple_0 = ()
        bool_0 = True
        inventory_manager_3 = module_0.InventoryManager(bool_0)
        var_8 = inventory_manager_0.restrict_to_hosts(tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'\x16\x7f?\xaa^\xe1\x13^\xc6\xf6\xc1\x7f#N'
        str_0 = '-1472'
        float_0 = None
        tuple_0 = (str_0, float_0)
        inventory_manager_0 = module_0.InventoryManager(bytes_0, tuple_0)
        var_0 = inventory_manager_0.clear_pattern_cache()
        var_1 = inventory_manager_0.reconcile_inventory()
        str_1 = 'localhost,~k'
        inventory_manager_1 = module_0.InventoryManager(str_1, str_1)
        var_2 = inventory_manager_1.parse_sources()
        var_3 = inventory_manager_1.list_hosts()
        var_4 = inventory_manager_0.parse_source(float_0)
        var_5 = inventory_manager_1.list_hosts()
        inventory_manager_2 = module_0.InventoryManager(var_3, str_1)
        var_6 = inventory_manager_2.list_hosts()
        var_7 = len(var_6)
        var_8 = inventory_manager_2.reconcile_inventory()
        var_9 = inventory_manager_1.remove_restriction()
        str_2 = '%%c\tC'
        var_10 = inventory_manager_2.subset(str_2)
        var_11 = inventory_manager_2.list_hosts(float_0)
        float_1 = 60.0
        var_12 = inventory_manager_2.get_hosts(float_1)
        var_13 = inventory_manager_1.get_hosts(var_6)
        var_14 = inventory_manager_0.list_groups()
        int_0 = None
        var_15 = inventory_manager_2.subset(int_0)
        float_2 = None
        inventory_manager_3 = module_0.InventoryManager(float_2)
        var_16 = inventory_manager_1.refresh_inventory()
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\x16\x7f?\xaa^\xe1\x13^\xc6\xf6\xc1\x7f#N'
        str_0 = '-1472'
        float_0 = None
        tuple_0 = (str_0, float_0)
        inventory_manager_0 = module_0.InventoryManager(bytes_0, tuple_0)
        var_0 = inventory_manager_0.clear_pattern_cache()
        var_1 = inventory_manager_0.reconcile_inventory()
        str_1 = 'localhost,'
        var_2 = inventory_manager_0.clear_caches()
        inventory_manager_1 = module_0.InventoryManager(str_1, str_1)
        var_3 = inventory_manager_1.parse_sources()
        var_4 = inventory_manager_1.list_hosts()
        var_5 = inventory_manager_0.parse_source(float_0)
        var_6 = inventory_manager_0.get_host(inventory_manager_1)
        var_7 = inventory_manager_1.list_hosts()
        inventory_manager_2 = module_0.InventoryManager(var_4, str_1)
        var_8 = inventory_manager_2.list_hosts()
        var_9 = len(var_8)
        var_10 = inventory_manager_2.subset(str_1)
        var_11 = inventory_manager_2.clear_pattern_cache()
        var_12 = inventory_manager_2.list_hosts(float_0)
        float_1 = 83.12825095385611
        var_13 = inventory_manager_2.get_hosts(float_1)
        var_14 = inventory_manager_1.get_hosts(var_8)
        float_2 = None
        inventory_manager_3 = module_0.InventoryManager(float_2)
        list_0 = [inventory_manager_1, var_0]
        var_15 = inventory_manager_3.get_hosts(list_0)
        var_16 = inventory_manager_1.refresh_inventory()
    except BaseException:
        pass