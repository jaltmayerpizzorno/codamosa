# Automatically generated by Pynguin.
import httpie.uploads as module_0
import requests_toolbelt.multipart.encoder as module_1
import typing as module_2
import httpie.cli.dicts as module_3

def test_case_0():
    pass

def test_case_1():
    list_0 = []
    chunked_upload_stream_0 = module_0.ChunkedUploadStream(list_0, list_0)
    iterable_0 = chunked_upload_stream_0.__iter__()

def test_case_2():
    multipart_encoder_0 = None
    chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)

def test_case_3():
    multipart_request_data_dict_0 = None
    dict_0 = {multipart_request_data_dict_0: multipart_request_data_dict_0}
    multipart_encoder_0 = module_1.MultipartEncoder(dict_0)
    callable_0 = None
    var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_0)

def test_case_4():
    bytes_0 = b'\xc7P\x92>M\x8f\xc6\xc0b\xb9\xe7\xe8'
    multipart_encoder_0 = None
    chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
    i_o_0 = module_2.IO()
    var_0 = i_o_0.__enter__()
    var_1 = module_0.prepare_request_body(bytes_0, chunked_multipart_upload_stream_0, var_0, var_0)

def test_case_5():
    str_0 = '{"a":1,"b":2}'
    multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
    tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)

def test_case_6():
    str_0 = None
    dict_0 = {str_0: str_0}
    multipart_request_data_dict_0 = module_3.MultipartRequestDataDict(**dict_0)
    tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0)

def test_case_7():
    multipart_request_data_dict_0 = None
    dict_0 = {multipart_request_data_dict_0: multipart_request_data_dict_0}
    multipart_encoder_0 = module_1.MultipartEncoder(dict_0)
    callable_0 = None
    list_0 = [callable_0, multipart_encoder_0, multipart_request_data_dict_0, dict_0]
    list_1 = [multipart_encoder_0]
    var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_0, list_0, list_1)