# Automatically generated by Pynguin.
import httpie.uploads as module_0
import typing as module_1
import requests.models as module_2
import httpie.cli.dicts as module_3
import requests_toolbelt.multipart.encoder as module_4

def test_case_0():
    try:
        bytes_0 = b'aaaa'
        var_0 = None
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(bytes_0, var_0)
        var_1 = [chunk for chunk in chunked_upload_stream_0]
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xa8\xcc\xd4'
        i_o_0 = module_1.IO()
        int_0 = 1369
        dict_0 = {i_o_0: i_o_0, int_0: i_o_0}
        var_0 = module_0.prepare_request_body(bytes_0, i_o_0, int_0, dict_0)
        var_1 = [chunk for chunk in var_0]
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xa2\x86&\xf8\x1b\x15\x19\xcd'
        prepared_request_0 = module_2.PreparedRequest()
        request_data_dict_0 = module_3.RequestDataDict()
        callable_0 = None
        var_0 = module_0.prepare_request_body(request_data_dict_0, callable_0, bytes_0)
        list_0 = None
        i_o_0 = module_1.IO(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        prepared_request_0 = module_2.PreparedRequest()
        bool_0 = True
        var_0 = module_0.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        list_1 = [list_0]
        dict_0 = {}
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict(*list_1, **dict_0)
        str_0 = 'Invalid file fields (perhaps Wou meant --form?): %s'
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0)
        multipart_request_data_dict_1 = None
        dict_1 = {multipart_request_data_dict_1: multipart_request_data_dict_1}
        multipart_encoder_0 = module_4.MultipartEncoder(dict_1)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_0 = multipart_encoder_0.__repr__()
        callable_0 = None
        int_0 = 4003
        bool_0 = True
        var_1 = module_0.prepare_request_body(multipart_encoder_0, callable_0, int_0, bool_0, chunked_multipart_upload_stream_0)
        prepared_request_0 = module_2.PreparedRequest()
        bool_1 = True
        prepared_request_1 = module_2.PreparedRequest()
        var_2 = module_0.compress_request(prepared_request_1, bool_1)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        list_1 = [list_0]
        dict_0 = {}
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict(*list_1, **dict_0)
        str_0 = 'Invalid fle fields (perhaps you meant --form?): %s'
        multipart_request_data_dict_1 = None
        dict_1 = {multipart_request_data_dict_1: multipart_request_data_dict_1}
        multipart_encoder_0 = module_4.MultipartEncoder(dict_1)
        callable_0 = None
        callable_1 = None
        iterable_0 = None
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        callable_2 = None
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(iterable_0, callable_2)
        chunked_multipart_upload_stream_1 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_2 = chunked_multipart_upload_stream_1.__iter__()
        int_0 = 637
        var_0 = module_0.prepare_request_body(multipart_encoder_0, callable_1, int_0, int_0)
        prepared_request_0 = module_2.PreparedRequest()
        i_o_0 = module_1.IO(**dict_0)
        var_1 = i_o_0.__enter__()
        var_2 = module_0.prepare_request_body(str_0, callable_0, int_0, var_1, dict_1)
        bool_0 = True
        var_3 = module_0.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        multipart_encoder_0 = module_4.MultipartEncoder(dict_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        bytes_0 = b'\xfa\xbb\x1axld\xc5\x8cF\xad\\&[q\xf1|\xa1'
        multipart_encoder_1 = module_4.MultipartEncoder(iterable_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'field1'
        str_1 = 'value'
        var_0 = None
        str_2 = 'filename'
        var_1 = (var_0, str_2)
        var_2 = {str_0: str_1, str_0: var_1}
        multipart_encoder_0 = module_4.MultipartEncoder(var_2)
        i_o_0 = module_1.IO()
        var_3 = i_o_0.readline()
        bool_0 = True
        list_0 = [str_0, str_1]
        var_4 = module_0.prepare_request_body(multipart_encoder_0, var_3, bool_0, list_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_5 = iter(chunked_multipart_upload_stream_0)
        var_6 = next(var_5)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'field0'
        str_1 = 'field1'
        str_2 = 'IeL6y]2_+\rNc>#O'
        var_0 = None
        str_3 = 'filename'
        var_1 = (var_0, str_3)
        var_2 = {str_0: str_2, str_1: var_1}
        multipart_encoder_0 = module_4.MultipartEncoder(var_2)
        var_3 = multipart_encoder_0.read()
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_4 = iter(chunked_multipart_upload_stream_0)
        var_5 = next(var_4)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'aaaa'
        multipart_request_data_dict_0 = module_3.MultipartRequestDataDict()
        chunked_multipart_upload_stream_0 = None
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, chunked_multipart_upload_stream_0)
        var_0 = None
        i_o_0 = module_1.IO()
        int_0 = 1369
        bool_0 = i_o_0.readable()
        set_0 = set()
        float_0 = -532.357612
        chunked_upload_stream_0 = module_0.ChunkedUploadStream(set_0, float_0)
        float_1 = -690.4046
        multipart_encoder_0 = module_4.MultipartEncoder(chunked_upload_stream_0, float_1)
        chunked_multipart_upload_stream_1 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_1.__iter__()
        dict_0 = {i_o_0: i_o_0, int_0: var_0}
        var_1 = module_0.prepare_request_body(bytes_0, i_o_0, int_0, dict_0)
        chunked_upload_stream_1 = module_0.ChunkedUploadStream(bytes_0, var_0)
        var_2 = [chunk for chunk in var_1]
    except BaseException:
        pass