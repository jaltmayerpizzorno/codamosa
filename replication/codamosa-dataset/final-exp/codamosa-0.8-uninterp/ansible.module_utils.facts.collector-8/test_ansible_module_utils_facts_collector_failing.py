# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0
import collections as module_1

def test_case_0():
    try:
        str_0 = "=vUJx*UfZx6n<s'K"
        list_0 = [str_0]
        list_1 = [list_0, list_0]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_0 = module_0.collector_classes_from_gather_subset(list_1, cycle_found_in_fact_deps_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        var_0 = module_0.get_collector_names()
        dict_0 = {str_0: var_0}
        var_1 = module_0.build_fact_id_to_collector_map(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'u\x9f\x073\x11n\x1f\r\x1d\xd2se\x8a\xbc\xba\x00'
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_0 = module_0.select_collector_classes(bytes_0, unresolved_fact_dep_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xe5\\\r\xb6w\xbf\x0bl'
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_0 = module_0.find_unresolved_requires(bytes_0, unresolved_fact_dep_0)
    except BaseException:
        pass

def test_case_4():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        base_fact_collector_0 = module_0.BaseFactCollector(collector_not_found_error_0)
        set_0 = set()
        list_0 = None
        var_0 = module_0.resolve_requires(set_0, list_0)
        dict_0 = {base_fact_collector_0: list_0, list_0: collector_not_found_error_0}
        tuple_0 = ()
        var_1 = module_0.collector_classes_from_gather_subset(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '$'
        set_0 = {str_0, str_0}
        list_0 = []
        base_fact_collector_0 = module_0.BaseFactCollector(list_0)
        var_0 = base_fact_collector_0.collect_with_namespace()
        var_1 = module_0.build_fact_id_to_collector_map(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        str_0 = '&*AG&od6uW#[.P:'
        var_1 = module_0.get_collector_names(cycle_found_in_fact_deps_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'e>'
        str_1 = 'T'
        var_0 = module_0.resolve_requires(str_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 42
        set_0 = {int_0}
        bytes_0 = b'X\xaa\xe7\x0b\xe1u\xf9\xbaB;r0'
        dict_0 = {int_0: set_0, int_0: set_0, int_0: set_0, bytes_0: set_0}
        var_0 = module_0.resolve_requires(set_0, dict_0)
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_1 = module_0.find_unresolved_requires(int_0, cycle_found_in_fact_deps_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'pci'
        str_1 = '!all'
        var_0 = module_0.get_collector_names(str_0, str_1, str_1, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        dict_0 = {base_fact_collector_0: base_fact_collector_0}
        str_0 = '-{OP_g YD'
        var_0 = module_0.collector_classes_from_gather_subset(dict_0, str_0)
        bool_0 = True
        var_1 = base_fact_collector_0.collect(bool_0)
        defaultdict_0 = module_1.defaultdict()
        var_2 = module_0.select_collector_classes(base_fact_collector_0, defaultdict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = []
        bool_0 = True
        dict_0 = {bool_0: list_0}
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_0 = "'=nw%t'dXIp"
        base_fact_collector_1 = module_0.BaseFactCollector()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        dict_1 = {str_0: dict_0}
        var_0 = module_0.find_unresolved_requires(dict_1, dict_1)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        int_0 = None
        str_0 = "'=nw%t'dXIp"
        base_fact_collector_0 = module_0.BaseFactCollector(str_0)
        var_1 = base_fact_collector_0.collect_with_namespace(int_0)
        str_1 = 'B9;QP6\\d<2@3`m@D]<Vk'
        str_2 = '"dy#\x0c.=0m'
        str_3 = 'disable batch mode for sshpass'
        dict_0 = {str_0: str_1, str_2: var_0, str_0: str_0, str_3: str_3}
        var_2 = module_0.find_unresolved_requires(str_1, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        base_fact_collector_0 = module_0.BaseFactCollector(collector_not_found_error_0)
        list_0 = None
        dict_0 = {base_fact_collector_0: list_0, list_0: collector_not_found_error_0}
        tuple_0 = ()
        var_0 = module_0.collector_classes_from_gather_subset(dict_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'network'
        str_1 = 'pci'
        str_2 = [str_1, str_1]
        var_0 = frozenset(str_2)
        str_3 = 'g9>,EL\rda,"9A&'
        str_4 = [str_3]
        var_1 = None
        str_5 = [str_0, str_1]
        var_2 = frozenset(str_5)
        var_3 = frozenset(str_3)
        str_6 = [str_3, str_1]
        var_4 = module_0.get_collector_names(str_4, var_3, str_6, var_1)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -2275.86
        list_0 = [float_0, float_0]
        dict_0 = {}
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(*list_0, **dict_0)
        list_1 = [unresolved_fact_dep_0, dict_0]
        list_2 = [list_1]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_2)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = '>\x0cQ.m'
        dict_1 = {}
        list_3 = [dict_1]
        var_0 = module_0.collector_classes_from_gather_subset(list_2, cycle_found_in_fact_deps_0, collector_not_found_error_0, str_0, list_3)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'y'
        dict_0 = {str_0: str_0}
        var_0 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 7
        int_1 = 5
        int_2 = 11
        int_3 = 8
        int_4 = 9
        int_5 = 10
        int_6 = [int_2, int_3]
        int_7 = [int_2, int_6]
        int_8 = [int_3, int_5]
        int_9 = [int_7, int_4, int_5]
        int_10 = [int_4]
        var_0 = []
        var_1 = []
        var_2 = []
        var_3 = {int_0: int_6, int_1: int_7, int_5: int_8, int_2: int_9, int_3: int_10, int_2: var_0, int_4: var_1, int_5: var_2}
        var_4 = module_0.tsort(var_3)
    except BaseException:
        pass