# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = ''
    list_0 = [str_0]
    base_fact_collector_0 = module_0.BaseFactCollector(list_0)
    var_0 = base_fact_collector_0.collect_with_namespace()

def test_case_2():
    var_0 = module_0.collector_classes_from_gather_subset()

def test_case_3():
    list_0 = []
    var_0 = module_0.collector_classes_from_gather_subset()
    bytes_0 = b'\xe5s\xb5\xb6\x0bl\xf8'
    list_1 = []
    cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
    var_1 = module_0.collector_classes_from_gather_subset(list_1, cycle_found_in_fact_deps_0, bytes_0)

def test_case_4():
    str_0 = 'MiQEkcH'
    dict_0 = {str_0: str_0}
    var_0 = module_0.tsort(dict_0)

def test_case_5():
    var_0 = module_0.collector_classes_from_gather_subset()
    dict_0 = {}
    str_0 = "di'=nw%tcdXIp"
    dict_1 = {str_0: dict_0, str_0: dict_0}
    var_1 = module_0.find_unresolved_requires(dict_1, dict_1)

def test_case_6():
    float_0 = 1925.0
    bool_0 = True
    base_fact_collector_0 = module_0.BaseFactCollector(float_0, bool_0)
    var_0 = base_fact_collector_0.collect_with_namespace()

def test_case_7():
    str_0 = 'network'
    str_1 = 'pci'
    str_2 = [str_0, str_1]
    var_0 = frozenset(str_2)
    str_3 = [str_0, str_1]
    var_1 = frozenset(str_3)
    str_4 = '!all'
    str_5 = [str_4]
    var_2 = module_0.get_collector_names(var_0, var_1, str_5, str_4)
    str_6 = [str_0, str_1]
    var_3 = frozenset(str_6)
    str_7 = [str_0, str_1]
    var_4 = frozenset(str_7)

def test_case_8():
    str_0 = 'network'
    int_0 = 1
    int_1 = [int_0]
    int_2 = {str_0: int_1}
    var_0 = module_0.select_collector_classes(str_0, int_2)
    str_1 = [str_0, str_0]
    int_3 = 2
    int_4 = [int_0, int_3]
    int_5 = {str_0: int_4}
    var_1 = module_0.select_collector_classes(str_1, int_5)