# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -1125
        str_0 = '@\\][J'
        bytes_0 = b'\xb5\xc3\xf2\x12'
        str_1 = 'w$!/;q5)R6Zf'
        tuple_0 = (int_0, str_0, bytes_0, str_1)
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_0.Grammar()
        tuple_0 = None
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 3992
        str_0 = 's\\~vxZ@EA'
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_4():
    try:
        grammar_0 = module_0.Grammar()
        float_0 = -1367.2695
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1754
        str_0 = 'DRE2EZyr>0'
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        str_1 = '4_\r<P'
        parser_0 = module_1.Parser(grammar_0, str_1)
        int_1 = 27
        parser_0.shift(int_1, str_0, int_0, tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = None
        int_1 = 278
        tuple_0 = (int_0, int_1)
        list_0 = [tuple_0, tuple_0]
        list_1 = [list_0, list_0]
        dict_0 = {int_0: int_1, int_0: int_0}
        tuple_1 = (list_1, dict_0)
        str_0 = "'&;'`"
        tuple_2 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_1, int_1, tuple_2)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -2543
        str_0 = 'eW(N"vG>'
        str_1 = 'uy^|A'
        list_0 = [int_0, grammar_0, str_0, str_1]
        none_type_0 = None
        tuple_0 = (int_0, str_0, list_0, none_type_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1
        str_0 = ''
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        str_0 = '1'
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        grammar_1 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_1)
        str_1 = None
        bool_0 = parser_0.addtoken(int_0, str_1, tuple_1)
    except BaseException:
        pass