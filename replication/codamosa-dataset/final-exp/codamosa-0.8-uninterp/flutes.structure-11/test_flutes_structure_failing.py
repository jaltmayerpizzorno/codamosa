# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        dict_0 = None
        list_0 = module_0.reverse_map(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'"\x0b\x17'
        var_0 = module_0.no_map_instance(bytes_0)
        type_0 = None
        module_0.register_no_map_class(type_0)
        int_0 = 441
        module_0.register_no_map_class(int_0)
        str_0 = 'Range'
        module_0.register_no_map_class(str_0)
        str_1 = 'W?DGCK'
        module_0.register_no_map_class(type_0)
        set_0 = None
        bool_0 = False
        dict_0 = {str_1: var_0, bool_0: set_0, bool_0: str_0, str_0: str_0}
        var_1 = module_0.map_structure(bool_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        tuple_0 = (list_0, list_0)
        var_0 = module_0.map_structure(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'"\x0b\x17'
        var_0 = module_0.no_map_instance(bytes_0)
        type_0 = None
        module_0.register_no_map_class(type_0)
        str_0 = 'Range'
        set_0 = None
        bool_0 = False
        dict_0 = {str_0: var_0, bool_0: set_0, bool_0: str_0, str_0: str_0}
        var_1 = module_0.map_structure(bool_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'?\xc6\xb3j\xe0\x04\x18'
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        var_0 = module_0.map_structure(bytes_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        dict_0 = None
        var_0 = module_0.map_structure(list_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 411
        float_0 = 0.1
        set_0 = {int_0, int_0, int_0, float_0}
        dict_0 = None
        tuple_0 = (set_0, dict_0)
        list_0 = [tuple_0]
        var_0 = module_0.map_structure_zip(int_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b')\x08b['
        var_0 = module_0.map_structure_zip(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        list_1 = [dict_0, list_0]
        bool_0 = True
        var_0 = module_0.map_structure(list_1, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        tuple_0 = (list_0,)
        list_1 = [tuple_0, list_0, tuple_0]
        var_0 = module_0.map_structure_zip(tuple_0, list_1)
        bool_0 = True
        list_2 = []
        str_0 = 'SuJkqt#C@\t.g*T'
        int_0 = 465
        dict_1 = {bool_0: list_2, int_0: str_0, bool_0: int_0}
        var_1 = module_0.no_map_instance(tuple_0)
        var_2 = module_0.map_structure(str_0, tuple_0)
        str_1 = '\tBrL'
        var_3 = module_0.map_structure(str_1, dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = [int_0, int_1, int_2]
        str_3 = [str_0, str_1, str_2]
        var_0 = {str_0: int_0, str_1: int_3, str_2: str_3}
        int_4 = 4
        int_5 = 5
        int_6 = 6
        int_7 = [int_4, int_5, int_6]
        str_4 = 'x'
        str_5 = 'y'
        str_6 = 'z'
        str_7 = [str_4, str_5, str_6]
        var_1 = {str_0: int_1, str_1: int_7, str_2: str_7}
        var_2 = lambda x, y: x - y
        var_3 = [var_0, var_1]
        var_4 = module_0.map_structure_zip(var_2, var_3)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xdeB\xbb\xb9\xa1\xdd\xd9jr\x16\xe2'
        bool_0 = False
        dict_0 = {bytes_0: bytes_0, bool_0: bytes_0, bytes_0: bool_0}
        set_0 = set()
        var_0 = module_0.map_structure(dict_0, set_0)
        str_0 = '`]@X7-o'
        var_1 = module_0.map_structure_zip(bytes_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -1559.04
        list_0 = [float_0]
        str_0 = 'set_log_file'
        tuple_0 = (list_0, str_0)
        var_0 = module_0.map_structure_zip(list_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 4056
        dict_0 = {}
        list_0 = module_0.reverse_map(dict_0)
        var_0 = module_0.no_map_instance(int_0)
        str_0 = 'apply'
        list_1 = [var_0, list_0]
        var_1 = module_0.map_structure_zip(str_0, list_1)
    except BaseException:
        pass