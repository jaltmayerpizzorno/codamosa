# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        str_0 = 'r1'
        var_0 = None
        rule_0 = module_0.Rule(str_0, var_0, var_0, var_0, var_0, var_0, var_0)
        var_1 = rule_0.get_corrected_commands(var_0)
        var_2 = list(var_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'vCh&oln)s9W%3}'
        str_1 = ''
        str_2 = 'must run as root'
        str_3 = 'Q7f\n0gf/O3'
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_3: str_2}
        list_0 = [dict_0, str_0, str_0, str_0]
        float_0 = 0.85
        str_4 = 'PxcsQ'
        corrected_command_0 = module_0.CorrectedCommand(list_0, float_0, str_4)
        var_0 = corrected_command_0.__hash__()
    except BaseException:
        pass

def test_case_2():
    try:
        rule_0 = None
        str_0 = '!OhyvF\x0cI6VJ/$PbO1D'
        list_0 = [str_0, str_0, str_0, str_0]
        bytes_0 = b'\x05\xb8\xfe\x88*\x86\xea'
        corrected_command_0 = module_0.CorrectedCommand(str_0, list_0, bytes_0)
        var_0 = corrected_command_0.run(rule_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        tuple_0 = (bool_0,)
        bool_1 = False
        list_0 = [bool_0, bool_1, tuple_0]
        command_0 = module_0.Command(tuple_0, list_0)
        list_1 = [command_0, tuple_0, tuple_0]
        dict_0 = {}
        set_0 = set()
        list_2 = [tuple_0]
        str_0 = 'g\r5+o$'
        corrected_command_0 = module_0.CorrectedCommand(dict_0, dict_0, dict_0)
        float_0 = 1116.5
        corrected_command_1 = module_0.CorrectedCommand(corrected_command_0, dict_0, float_0)
        var_0 = corrected_command_1.__repr__()
        str_1 = '` (with two dashes ?)'
        bytes_0 = b'\xe4G\x19\x14\xcc\xfb\xb5\xe4=J\xecQ\x0c&\x1ce'
        corrected_command_2 = module_0.CorrectedCommand(dict_0, str_1, bytes_0)
        int_0 = -1131
        rule_0 = module_0.Rule(str_0, command_0, corrected_command_2, tuple_0, int_0, dict_0, corrected_command_2)
        var_1 = rule_0.__eq__(list_2)
        str_2 = ''
        var_2 = rule_0.__eq__(rule_0)
        corrected_command_3 = module_0.CorrectedCommand(dict_0, set_0, str_2)
        var_3 = rule_0.__repr__()
        list_3 = None
        corrected_command_4 = module_0.CorrectedCommand(list_0, list_1, list_3)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        list_1 = None
        command_0 = module_0.Command(bool_0, list_1)
        str_0 = '4s$=|'
        float_0 = -1577.38
        bool_1 = False
        var_0 = command_0.__repr__()
        bytes_0 = b'\r'
        set_0 = {float_0}
        corrected_command_0 = module_0.CorrectedCommand(bytes_0, set_0, command_0)
        corrected_command_1 = module_0.CorrectedCommand(float_0, bool_1, corrected_command_0)
        list_2 = [bytes_0]
        rule_0 = module_0.Rule(bool_0, list_2, bytes_0, command_0, corrected_command_0, str_0, set_0)
        var_1 = corrected_command_0.__eq__(corrected_command_0)
        var_2 = corrected_command_1.__repr__()
        bool_2 = True
        bool_3 = True
        complex_0 = None
        bytes_1 = b'cYE\x14\xac\xac'
        rule_1 = module_0.Rule(str_0, bool_2, bool_3, complex_0, list_0, bytes_1, corrected_command_1)
        var_3 = corrected_command_1.__hash__()
        var_4 = corrected_command_0.__repr__()
        var_5 = corrected_command_1.__eq__(str_0)
        float_1 = 0.6
        tuple_0 = (bool_1,)
        var_6 = rule_1.is_match(command_0)
        var_7 = corrected_command_1.__eq__(tuple_0)
        var_8 = corrected_command_1.run(float_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'K=)yP@=z*iP0* '
        str_1 = '(3\x0c2cYc8D4 \rG ps>wV'
        bytes_0 = b'\x18%\x92#T\xe6\xe6\xa6;\x9dD\x90\x12\x89\xa4\xc9W\x84\xcb'
        str_2 = 'p.T\nl<UYWfi'
        list_0 = [bytes_0]
        dict_0 = {str_0: str_0, str_1: bytes_0, str_2: list_0}
        bytes_1 = b'\x8f\x0cHP\xee'
        list_1 = [list_0, list_0, str_1]
        tuple_0 = (list_1,)
        str_3 = 'K\tz:E\\\tXSdxWGO#iZ?'
        corrected_command_0 = module_0.CorrectedCommand(dict_0, tuple_0, str_3)
        corrected_command_1 = module_0.CorrectedCommand(corrected_command_0, tuple_0, tuple_0)
        corrected_command_2 = module_0.CorrectedCommand(corrected_command_1, tuple_0, dict_0)
        bool_0 = None
        command_0 = module_0.Command(corrected_command_2, bool_0)
        list_2 = [bytes_1, str_0, str_1]
        command_1 = module_0.Command(list_2, list_0)
        var_0 = command_1.__eq__(command_0)
    except BaseException:
        pass