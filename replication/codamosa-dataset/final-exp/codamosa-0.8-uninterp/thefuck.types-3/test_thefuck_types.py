# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    list_0 = None
    bool_0 = False
    set_0 = {bool_0, bool_0}
    str_0 = '*q,y-"o'
    command_0 = module_0.Command(set_0, str_0)
    var_0 = command_0.__eq__(list_0)

def test_case_2():
    str_0 = 'uJ0OHHa`KUT/iQk%0yX`'
    str_1 = 'DV>'
    float_0 = 0.85
    float_1 = -2223.5592
    command_0 = module_0.Command(float_0, float_1)
    var_0 = command_0.__eq__(str_1)
    bytes_0 = b'\x806A@,\t\x05?\xa9n'
    command_1 = module_0.Command(str_0, bytes_0)
    var_1 = command_1.__repr__()

def test_case_3():
    str_0 = 'ZOmITiF;`1<gN2*ps'
    dict_0 = {str_0: str_0}
    int_0 = 1708
    corrected_command_0 = module_0.CorrectedCommand(str_0, dict_0, int_0)
    bool_0 = True
    command_0 = module_0.Command(corrected_command_0, bool_0)
    var_0 = command_0.update()

def test_case_4():
    str_0 = 'test'
    bool_0 = True
    int_0 = 100
    list_0 = [str_0, int_0]
    float_0 = 0.5
    corrected_command_0 = module_0.CorrectedCommand(list_0, str_0, float_0)
    list_1 = [str_0, int_0, bool_0, str_0]
    list_2 = [bool_0, list_1, int_0, str_0]
    bytes_0 = b'\xa4\x99\x07\tR'
    corrected_command_1 = module_0.CorrectedCommand(int_0, str_0, bytes_0)
    command_0 = module_0.Command(bytes_0, corrected_command_1)
    str_1 = 'Î›'
    var_0 = corrected_command_1.__hash__()
    bool_1 = True
    rule_0 = module_0.Rule(list_1, list_2, command_0, str_1, corrected_command_1, bool_1, list_1)
    var_1 = rule_0.__eq__(corrected_command_0)

def test_case_5():
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = (bool_0, set_0, set_0)
    list_0 = [bool_0, bool_0]
    bytes_0 = b'\x14>\xa9\xc93{^\x07F\xf45t'
    dict_0 = {}
    str_0 = 'MsC\x0cbF/X\\-^Cdt0HIu'
    rule_0 = module_0.Rule(bool_0, tuple_0, list_0, bytes_0, dict_0, str_0, bool_0)
    var_0 = rule_0.__repr__()
    str_1 = ']!ey99OWPW/`Z\r}'
    float_0 = -2340.0
    set_1 = {float_0, float_0, float_0}
    corrected_command_0 = module_0.CorrectedCommand(str_1, float_0, set_1)
    bool_1 = True
    dict_1 = {corrected_command_0: bool_1}
    corrected_command_1 = module_0.CorrectedCommand(corrected_command_0, bool_1, dict_1)
    corrected_command_2 = module_0.CorrectedCommand(corrected_command_1, str_1, str_1)
    var_1 = corrected_command_2.__hash__()

def test_case_6():
    int_0 = -460
    bool_0 = True
    command_0 = module_0.Command(int_0, bool_0)
    bytes_0 = b'\xd1\xef,#d\r\x9d\x03MH\xab\xd1\x06j'
    bytes_1 = b'\xd6\xcf~'
    dict_0 = {}
    str_0 = 'export'
    dict_1 = {}
    rule_0 = module_0.Rule(bytes_0, bytes_1, dict_0, str_0, int_0, dict_0, dict_1)
    var_0 = rule_0.is_match(command_0)

def test_case_7():
    str_0 = 'h`27=\x0cAD\r["[m9T)XN2'
    list_0 = [str_0, str_0]
    dict_0 = {str_0: str_0, str_0: list_0}
    corrected_command_0 = module_0.CorrectedCommand(list_0, dict_0, str_0)

def test_case_8():
    int_0 = 468
    float_0 = 410.956282
    set_0 = {int_0}
    command_0 = module_0.Command(set_0, set_0)
    bytes_0 = b'S\xe7\x84\xe4J\xe1\xe9\xadyl\x9a'
    corrected_command_0 = module_0.CorrectedCommand(float_0, command_0, bytes_0)
    corrected_command_1 = module_0.CorrectedCommand(int_0, corrected_command_0, bytes_0)
    var_0 = corrected_command_1.__eq__(float_0)

def test_case_9():
    str_0 = 'pgpti\n=&N_'
    rule_0 = None
    dict_0 = {str_0: str_0, str_0: rule_0, rule_0: str_0, rule_0: str_0}
    int_0 = -1483
    corrected_command_0 = module_0.CorrectedCommand(str_0, dict_0, int_0)
    var_0 = corrected_command_0.__repr__()

def test_case_10():
    str_0 = 'git lol'
    command_0 = module_0.Command(str_0, str_0)
    var_0 = None
    int_0 = 0
    corrected_command_0 = module_0.CorrectedCommand(str_0, var_0, int_0)
    var_1 = corrected_command_0.run(command_0)

def test_case_11():
    str_0 = '3\rQY'
    float_0 = None
    command_0 = module_0.Command(str_0, float_0)
    str_1 = 'HR-L[?sYxx"FU|i#eDr'
    float_1 = 1528.32235
    set_0 = {str_1, str_1, str_1}
    bytes_0 = b'\xb3F8&\xf99\xc38b\xbe\xcd;\x16'
    int_0 = 28
    str_2 = '?x0Gs0fME9&'
    str_3 = 'c1\r~}|D!t.:Gg[XPOtLu'
    dict_0 = {str_2: int_0, str_1: str_1, str_3: set_0, str_1: set_0}
    rule_0 = module_0.Rule(str_1, float_1, set_0, bytes_0, int_0, str_1, dict_0)
    var_0 = rule_0.is_match(command_0)