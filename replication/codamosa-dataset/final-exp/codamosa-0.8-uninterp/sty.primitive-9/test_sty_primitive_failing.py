# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        var_0 = register_2.as_namedtuple()
        str_0 = 'po}*'
        list_0 = [str_0]
        str_1 = register_2.__call__(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0]
        str_1 = 'l'
        dict_0 = {str_0: str_0, str_1: str_0}
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        str_2 = register_2.__call__(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        type_0 = None
        register_0 = module_0.Register()
        register_0.set_eightbit_call(type_0)
    except BaseException:
        pass

def test_case_3():
    try:
        style_0 = module_0.Style()
        bytes_0 = b'\xedb\xddo\x8c\xc9\x8c'
        register_0 = module_0.Register()
        register_0.set_rgb_call(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '8'
        register_0 = module_0.Register()
        dict_0 = None
        register_0.set_renderfunc(dict_0, dict_0)
        type_0 = None
        register_0.set_eightbit_call(type_0)
        dict_1 = register_0.as_dict()
        register_0.set_rgb_call(type_0)
        register_1 = register_0.copy()
        list_0 = [str_0]
        str_1 = register_1.__call__(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Cr\rQM=U'
        list_0 = [str_0, str_0, str_0]
        register_0 = module_0.Register()
        str_1 = register_0.__call__(*list_0)
        register_1 = module_0.Register()
        str_2 = register_1.__call__()
        register_0.mute()
        register_1.set_renderfunc(str_1, list_0)
        str_3 = '\n        Export color register as namedtuple.\n        '
        style_0 = module_0.Style()
        list_1 = [str_3, style_0]
        style_1 = module_0.Style(*list_1)
        var_0 = register_1.__setattr__(str_3, style_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "J&=?[&o;T>m]{'vc)"
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        register_2 = module_0.Register()
        str_0 = register_0.__call__()
        style_0 = module_0.Style()
        str_1 = 'wm&eJ?1r8]=fDxd@ei'
        var_0 = register_0.__setattr__(str_1, style_0)
        dict_0 = register_1.as_dict()
        list_0 = [style_0, style_0, style_0, style_0]
        register_0.unmute()
        str_2 = '\nThis module contains the default render types.\n'
        style_1 = style_0.__new__(list_0, *list_0, value=str_2)
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        register_2 = module_0.Register()
        str_0 = register_0.__call__()
        style_0 = module_0.Style()
        str_1 = 'wm&eJ?1r8]=fDxd@ei'
        var_0 = register_0.__setattr__(str_1, style_0)
        dict_0 = register_0.as_dict()
        dict_1 = register_1.as_dict()
        list_0 = [style_0, style_0, style_0, style_0]
        register_0.unmute()
        str_2 = '\nThis module contains the default render types.\n'
        style_1 = style_0.__new__(list_0, *list_0, value=str_2)
    except BaseException:
        pass