# Automatically generated by Pynguin.
import argparse as module_0
import httpie.client as module_1
import pathlib as module_2
import httpie.cli.dicts as module_3

def test_case_0():
    try:
        namespace_0 = module_0.Namespace()
        request_headers_dict_0 = module_1.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '1'
        str_1 = module_1.ensure_path_as_is(str_0, str_0)
        namespace_0 = module_0.Namespace()
        dict_0 = module_1.make_send_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_2():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_1.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'bW.},k/GCkH]'
        dict_0 = {str_0: str_0, str_0: str_0}
        namespace_0 = module_0.Namespace(**dict_0)
        path_0 = module_2.Path(**dict_0)
        iterable_0 = module_1.collect_messages(namespace_0, path_0)
        namespace_1 = module_0.Namespace()
        dict_1 = module_1.make_request_kwargs(namespace_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'identity'
        bool_0 = False
        session_0 = module_1.build_requests_session(bool_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'verify'
        str_1 = 'cert'
        str_2 = '127.0.0.1'
        namespace_0 = module_0.Namespace()
        var_0 = setattr(namespace_0, str_0, str_2)
        str_3 = 'proxy'
        namespace_1 = module_0.Namespace()
        namespace_2 = module_0.Namespace()
        namespace_3 = [namespace_1, namespace_2]
        var_1 = setattr(namespace_0, str_3, namespace_3)
        var_2 = setattr(namespace_0, str_1, str_0)
        str_4 = 'cert_key'
        var_3 = setattr(namespace_0, str_4, namespace_0)
        dict_0 = module_1.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'verify'
        str_1 = 'cert'
        str_2 = 'https'
        str_3 = '127.0.0.1'
        var_0 = None
        namespace_0 = module_0.Namespace()
        var_1 = setattr(namespace_0, str_0, str_3)
        str_4 = 'proxy'
        namespace_1 = module_0.Namespace()
        namespace_2 = module_0.Namespace()
        namespace_3 = [namespace_1, namespace_2]
        var_2 = setattr(namespace_0, str_4, namespace_3)
        var_3 = setattr(namespace_0, str_1, var_0)
        str_5 = 'cert_key'
        var_4 = setattr(namespace_0, str_5, var_0)
        dict_0 = module_1.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = None
        int_0 = -1817
        str_0 = 'KuzDs'
        dict_1 = {str_0: int_0, str_0: dict_0}
        request_headers_dict_0 = module_3.RequestHeadersDict(dict_0, **dict_1)
        request_headers_dict_1 = module_1.finalize_headers(request_headers_dict_0)
        request_headers_dict_2 = module_3.RequestHeadersDict(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'verify'
        str_1 = 'DI5DHV='
        str_2 = '>\x0cVG-)\x0b)vB6'
        dict_0 = {str_1: str_1, str_0: str_2, str_2: str_1}
        request_headers_dict_0 = module_3.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_1.finalize_headers(request_headers_dict_0)
        str_3 = 'cert'
        str_4 = '6htt?s'
        namespace_0 = module_0.Namespace()
        var_0 = setattr(namespace_0, str_0, str_4)
        namespace_1 = module_0.Namespace()
        bool_0 = False
        session_0 = module_1.build_requests_session(bool_0)
        var_1 = setattr(namespace_0, str_3, str_0)
        bool_1 = False
        session_1 = module_1.build_requests_session(bool_1)
        str_5 = 'cert_key'
        list_0 = [str_5]
        var_2 = module_1.max_headers(list_0)
        request_headers_dict_2 = module_1.finalize_headers(request_headers_dict_0)
        request_headers_dict_3 = module_1.finalize_headers(request_headers_dict_2)
        var_3 = setattr(namespace_0, str_5, var_0)
        dict_1 = module_1.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'poxies'
        str_1 = 'DI5DHV='
        request_headers_dict_0 = module_3.RequestHeadersDict()
        dict_0 = {}
        namespace_0 = module_0.Namespace(**dict_0)
        bool_0 = False
        bytes_0 = b'\xae\x96{\xc2*\xad~\xb6\x91\xa7\xb8\xdf\x80\xa9c\xd0\x06M'
        dict_1 = {str_1: str_1}
        path_0 = module_2.Path()
        iterable_0 = module_1.collect_messages(namespace_0, path_0)
        argument_parser_0 = module_0.ArgumentParser(bool_0, str_0, bytes_0, dict_1, iterable_0)
    except BaseException:
        pass