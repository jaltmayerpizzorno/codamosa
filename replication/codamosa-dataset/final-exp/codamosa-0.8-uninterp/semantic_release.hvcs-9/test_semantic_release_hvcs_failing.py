# Automatically generated by Pynguin.
import semantic_release.hvcs as module_0
import requests.sessions as module_1
import urllib3.util.retry as module_2

def test_case_0():
    try:
        base_0 = module_0.Base()
        str_0 = 'A\t+{kJeX9Sg\r'
        str_1 = 'Upload wheels to PyPI with Twine.\n\n    Wheels must already be created and stored at the given path.\n\n    Credentials are taken from either the environment variable\n    ``PYPI_TOKEN``, or from ``PYPI_USERNAME`` and ``PYPI_PASSWORD``.\n\n    :param path: Path to dist folder containing the files to upload.\n    :param skip_existing: Continue uploading files if one already exists.\n        (Only valid when uploading to PyPI. Other implementations may not support this.)\n    :param glob_patterns: List of glob patterns to include in the upload (["*"] by default).\n    '
        bool_0 = module_0.upload_to_release(str_0, str_1, str_1, str_1)
        optional_0 = module_0.get_token()
        str_2 = base_0.domain()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '6n]")K\tu#'
        str_1 = 'I\n'
        str_2 = '+MX.FK\x0bV0^&3$K'
        str_3 = ''
        int_0 = -1850
        dict_0 = {}
        github_0 = module_0.Github(**dict_0)
        session_0 = github_0.session(str_3, int_0)
        token_auth_0 = module_0.TokenAuth(session_0)
        bool_0 = module_0.check_build_status(str_0, str_1, str_2)
        base_0 = module_0.Base()
        str_4 = base_0.api_url()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'tBc'
        str_1 = ''
        base_0 = module_0.Base()
        bool_0 = base_0.check_build_status(str_0, str_1, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        github_0 = module_0.Github(**dict_0)
        base_0 = module_0.get_hvcs()
        str_0 = 'd@'
        dict_1 = {base_0: str_0}
        token_auth_0 = module_0.TokenAuth(dict_1)
        var_0 = token_auth_0.__ne__(github_0)
        str_1 = '$+'
        dict_2 = {str_1: str_1, str_1: str_1}
        gitlab_0 = module_0.Gitlab(**dict_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        base_0 = module_0.get_hvcs()
        bool_0 = base_0.check_build_status(str_0, str_0, str_0)
        base_1 = module_0.get_hvcs()
        base_2 = module_0.Base()
        optional_0 = base_1.token()
        int_0 = 4329
        token_auth_0 = module_0.TokenAuth(str_0)
        var_0 = token_auth_0.__call__(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'o0/ImT8D{0%J]Wry'
        str_1 = ''
        str_2 = "Placeholder '"
        gitlab_0 = module_0.Gitlab()
        bool_0 = gitlab_0.check_build_status(str_0, str_1, str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        base_0 = module_0.Base()
        optional_0 = base_0.token()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'D*!o_N%JdQ9#3E'
        str_1 = 'z66N\tpFB\\8"3'
        token_auth_0 = module_0.TokenAuth(str_1)
        session_0 = module_1.Session()
        list_0 = [str_0]
        token_auth_1 = module_0.TokenAuth(list_0)
        var_0 = token_auth_1.__call__(session_0)
        int_0 = 1313
        github_0 = module_0.Github()
        dict_0 = None
        bytes_0 = b''
        tuple_0 = None
        list_1 = [bytes_0, int_0]
        session_1 = github_0.session(list_1, int_0)
        retry_0 = module_2.Retry(tuple_0, session_1)
        bool_0 = False
        token_auth_2 = module_0.TokenAuth(dict_0)
        retry_1 = module_2.Retry(bytes_0, github_0, retry_0, bool_0, token_auth_2, tuple_0)
        base_0 = module_0.Base(**dict_0)
    except BaseException:
        pass