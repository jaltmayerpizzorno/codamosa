# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        float_0 = 1999.0
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        bytes_0 = b'\xec\xf9\x8a\xc0L\xacv'
        list_0 = []
        var_0 = module_0.scanr(dict_0, bytes_0, *list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '=*YWCT'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_2():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b':\xbcZX\xb6Qt?QM\x04\xa2"\x8d>c)'
        list_0 = [bytes_0, bytes_0, bytes_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1
        bool_0 = False
        iterator_0 = module_0.drop(int_0, bool_0)
        bool_1 = True
        list_0 = [bool_1, bool_1, bool_1]
        map_list_0 = None
        iterator_1 = module_0.chunk(int_0, map_list_0)
        int_1 = -1568
        float_0 = 1494.41
        iterator_2 = module_0.chunk(int_1, float_0)
        range_0 = module_0.Range(*list_0)
        int_2 = range_0.__next__()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'q'
        list_0 = None
        iterator_0 = module_0.split_by(str_0, separator=list_0)
        str_1 = ''
        int_0 = -38
        map_list_0 = module_0.MapList(str_1, int_0)
        int_1 = None
        iterator_1 = module_0.take(int_1, str_0)
        var_0 = map_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callable_0 = None
        str_0 = None
        str_1 = 'ODO^b"\x0c'
        dict_0 = {str_0: callable_0, str_1: str_0, str_0: str_0}
        map_list_0 = module_0.MapList(callable_0, dict_0)
        dict_1 = {map_list_0: dict_0}
        var_0 = module_0.scanr(dict_1, map_list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -3077
        float_0 = 62.58556
        str_0 = ''
        dict_0 = {str_0: str_0}
        iterator_0 = module_0.split_by(float_0, criterion=float_0, separator=dict_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        range_0 = None
        lazy_list_0 = None
        int_0 = 1535
        int_1 = 8192
        dict_0 = {range_0: range_0, int_1: range_0, range_0: range_0, range_0: int_0}
        iterator_0 = module_0.drop(int_0, dict_0)
        lazy_list_1 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_1.__getitem__(lazy_list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        iterable_0 = None
        iterator_0 = module_0.split_by(iterable_0)
        float_0 = 70.834
        list_0 = [iterator_0, iterator_0, float_0, iterable_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = None
        list_0 = [int_0, int_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -24
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        float_0 = 0.1
        iterator_0 = module_0.chunk(int_0, float_0)
        var_0 = range_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -2166
        str_0 = 'jRS/+VRt}&-^.\rf_\t'
        iterator_0 = module_0.chunk(int_0, str_0)
        str_1 = 'yZnf\tqPq$\tJ9&|k'
        list_0 = [str_1, str_1, str_1]
        lazy_list_0 = module_0.LazyList(list_0)
        var_0 = lazy_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_13():
    try:
        iterator_0 = None
        int_0 = 2
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        iterator_1 = module_0.take(int_0, dict_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        var_0 = lazy_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = None
        iterator_0 = None
        int_1 = 2
        dict_0 = {int_0: int_1, int_1: int_1, int_0: int_0}
        iterator_1 = module_0.take(int_1, dict_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_0 = lazy_list_1.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = None
        iterator_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        iterator_1 = module_0.take(int_0, dict_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_0 = lazy_list_1.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 3021.271071
        list_0 = None
        map_list_0 = None
        map_list_1 = module_0.MapList(list_0, map_list_0)
        list_1 = [list_0, list_0, map_list_0]
        var_0 = module_0.scanr(float_0, map_list_1, *list_1)
    except BaseException:
        pass

def test_case_17():
    try:
        iterator_0 = None
        int_0 = 2
        dict_0 = None
        iterator_1 = module_0.take(int_0, dict_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_0 = lazy_list_1.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_18():
    try:
        iterator_0 = None
        int_0 = -27
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        iterator_1 = module_0.take(int_0, dict_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_0 = lazy_list_1.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 10
        var_0 = []
        iterator_0 = module_0.drop_until(var_0, var_0)
        var_1 = list(iterator_0)
        var_2 = range(int_0)
        iterator_1 = module_0.drop_until(int_0, var_2)
        var_3 = list(iterator_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 10
        var_0 = range(int_0)
        int_1 = 3
        int_2 = 0
        var_1 = lambda x: x % int_1 == int_2
        iterator_0 = module_0.split_by(var_0, criterion=var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 1
        int_1 = -3931
        int_2 = [int_0, int_0, int_0, int_1, int_0, int_0]
        iterator_0 = module_0.chunk(int_1, int_2)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 17
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0}
        lazy_list_0 = module_0.LazyList(dict_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 3
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = list(iterator_0)
        var_2 = range(int_0, int_1)
        var_3 = list(var_2)
        int_2 = 0
        var_4 = range(int_1)
        iterator_1 = module_0.drop(int_2, var_4)
        var_5 = range(int_1)
        var_6 = list(var_5)
        var_7 = range(int_1)
        iterator_2 = module_0.drop(int_1, var_7)
        var_8 = list(iterator_2)
        int_3 = -1
        var_9 = range(int_1)
        iterator_3 = module_0.drop(int_3, var_9)
        var_10 = list(iterator_3)
    except BaseException:
        pass

def test_case_24():
    try:
        var_0 = lambda s, x: x + s
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = 'd'
        str_4 = [str_0, str_1, str_2, str_3]
        var_1 = module_0.scanl(var_0, str_4)
        var_2 = list(var_1)
        var_3 = lambda s, x: var_21.format(x, s)
        str_5 = [str_0, str_1, str_2]
        var_4 = module_0.scanl(var_3, str_5)
        var_5 = list(var_4)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = 287.8682
        list_0 = [float_0]
        bytes_0 = b'\x7fW\x84D\x07\x16\xfd\xe2m\x1f=\xaf\xab\xf1O\xcb`'
        list_1 = None
        list_2 = [list_1]
        var_0 = module_0.scanr(list_0, bytes_0, *list_2)
    except BaseException:
        pass