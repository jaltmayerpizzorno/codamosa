# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    parser_0 = module_0.Parser()

def test_case_1():
    str_0 = '3hw][}s)aw}4'
    bool_0 = module_0.is_public_family(str_0)

def test_case_2():
    str_0 = 'l'
    parser_0 = module_0.Parser()
    parser_0.parse(str_0, str_0)

def test_case_3():
    str_0 = '_z'
    str_1 = module_0.code(str_0)

def test_case_4():
    str_0 = 'O\n\x0b55zyb.,'
    str_1 = module_0.esc_underscore(str_0)

def test_case_5():
    expr_0 = module_1.expr()
    str_0 = module_0.const_type(expr_0)

def test_case_6():
    str_0 = 'P2'
    str_1 = 'D=m0f$L4~N'
    str_2 = '$H'
    dict_0 = {str_0: str_1, str_2: str_1}
    resolver_0 = module_0.Resolver(str_0, dict_0)

def test_case_7():
    bool_0 = False
    dict_0 = {}
    str_0 = 'collections.abc.Awaitable'
    str_1 = 'kbH'
    str_2 = "vq'z&M|9)vZ"
    dict_1 = {str_0: str_0, str_0: str_1, str_0: str_2}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1, dict_1)
    str_3 = parser_0.compile()

def test_case_8():
    expr_0 = module_1.expr()
    str_0 = 'khsIpI,u'
    import_from_0 = module_1.ImportFrom()
    int_0 = 3032
    parser_0 = module_0.Parser(int_0)
    parser_0.imports(str_0, import_from_0)
    str_1 = module_0.const_type(expr_0)

def test_case_9():
    parser_0 = module_0.Parser()
    str_0 = 'n!'
    list_0 = [str_0, parser_0, str_0, parser_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    parser_0.globals(str_0, ann_assign_0)

def test_case_10():
    str_0 = 'F[\'\x0bDP~FFd.%yw!sb~H"'
    list_0 = []
    dict_0 = {}
    stmt_0 = None
    list_1 = [stmt_0, stmt_0, stmt_0]
    bool_0 = False
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_11():
    str_0 = '__'
    list_0 = []
    list_1 = []
    bool_0 = False
    parser_0 = module_0.Parser(bool_0, bool_0)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_12():
    str_0 = 'l'
    parser_0 = module_0.Parser()
    parser_0.parse(str_0, str_0)
    str_1 = 'ns'
    expr_0 = module_1.expr()
    str_2 = parser_0.resolve(str_1, expr_0)
    str_3 = parser_0.compile()

def test_case_13():
    parser_0 = module_0.Parser()
    str_0 = parser_0.compile()

def test_case_14():
    str_0 = 'l'
    parser_0 = module_0.Parser()
    parser_0.parse(str_0, str_0)
    str_1 = parser_0.compile()

def test_case_15():
    str_0 = '__'
    list_0 = []
    bool_0 = module_0.is_public_family(str_0)
    list_1 = []
    bool_1 = False
    parser_0 = module_0.Parser(bool_1, bool_1)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_16():
    str_0 = 'Qfa|6s'
    dict_0 = {}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    stmt_0 = None
    list_0 = [stmt_0]
    subscript_0 = module_1.Subscript(*list_0)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)

def test_case_17():
    str_0 = ']l'
    list_0 = []
    dict_0 = {}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    list_1 = [resolver_0, resolver_0, list_0]
    attribute_0 = module_1.Attribute(*list_1)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)

def test_case_18():
    str_0 = ',DW'
    str_1 = module_0.parent(str_0)

def test_case_19():
    str_0 = ','
    str_1 = module_0.doctest(str_0)

def test_case_20():
    str_0 = None
    dict_0 = None
    str_1 = 'w^e{\x0cLKA?y_S6077+Q#X'
    resolver_0 = module_0.Resolver(str_0, dict_0, str_1)
    list_0 = [str_1]
    dict_1 = {str_1: str_0}
    constant_0 = module_1.Constant(*list_0, **dict_1)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)

def test_case_21():
    str_0 = '1b@71>J z'
    list_0 = [str_0, str_0]
    name_0 = module_1.Name(*list_0)
    str_1 = '.pyi'
    str_2 = "'9"
    str_3 = '__'
    str_4 = 'g-G2hy<\x0cW+'
    str_5 = 'T'
    dict_0 = {str_2: str_3, str_4: str_5, str_4: str_3}
    resolver_0 = module_0.Resolver(str_1, dict_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    expr_0 = module_1.expr()
    str_6 = module_0.const_type(expr_0)
    str_7 = '2)\rTy4=\rIQ'
    str_8 = module_0.esc_underscore(str_7)

def test_case_22():
    str_0 = ']RPA1Q(/CeydPCZ]D'
    int_0 = -182
    dict_0 = {}
    parser_0 = module_0.Parser(int_0, dict_0)
    str_1 = parser_0.compile()
    list_0 = [str_0, str_0]
    list_1 = [list_0, str_0, parser_0]
    assign_0 = module_1.Assign(*list_1)
    parser_0.globals(str_1, assign_0)

def test_case_23():
    str_0 = '__'
    str_1 = module_0.doctest(str_0)
    str_2 = None
    str_3 = module_0.doctest(str_0)
    module_x_var_0 = None
    str_4 = None
    str_5 = 'contextlib.AbstractContextManager'
    str_6 = None
    str_7 = '"";Z`ISz1(3\t\\]'
    str_8 = '6vIFp~b]Olb1~uN$2;'
    dict_0 = {str_0: str_5, str_5: str_6, str_2: str_7, str_0: str_8}
    parser_0 = module_0.Parser(dict_0, dict_0)
    parser_0.load_docstring(str_4, module_x_var_0)

def test_case_24():
    expr_0 = module_1.expr()
    list_0 = [expr_0, expr_0, expr_0]
    arguments_0 = module_1.arguments()
    list_1 = [list_0, arguments_0]
    constant_0 = module_1.Constant(*list_1)
    str_0 = '[c'
    str_1 = '/-Fninyk}>%u4Y'
    str_2 = ',Q$|=$c'
    str_3 = '|n'
    str_4 = 'ufu'
    str_5 = 'gU;'
    dict_0 = {str_0: str_1, str_2: str_3, str_4: str_5}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)

def test_case_25():
    str_0 = ''
    str_1 = module_0.code(str_0)
    dict_0 = {}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    bool_0 = False
    str_2 = module_0.doctest(str_0)
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)

def test_case_26():
    int_0 = -182
    dict_0 = {}
    parser_0 = module_0.Parser(int_0, dict_0)
    str_0 = parser_0.compile()
    list_0 = [str_0]
    list_1 = [list_0, str_0, parser_0]
    assign_0 = module_1.Assign(*list_1)
    parser_0.globals(str_0, assign_0)

def test_case_27():
    str_0 = '_'
    dict_0 = {}
    bool_0 = module_0.is_public_family(str_0)
    resolver_0 = module_0.Resolver(str_0, dict_0)
    bool_1 = True
    parser_0 = module_0.Parser(bool_1, dict_0, dict_0)

def test_case_28():
    str_0 = "be.$'L9D"
    str_1 = "\n[9sFm4d*'Th#4L"
    str_2 = 'vqgvTq%x'
    dict_0 = {str_2: str_1, str_0: str_2}
    resolver_0 = module_0.Resolver(str_2, dict_0)
    list_0 = [dict_0, str_0, str_1]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    bool_0 = True
    int_0 = 1564
    parser_0 = module_0.Parser(bool_0, int_0, bool_0, dict_0, dict_0)
    parser_0.globals(str_1, ann_assign_0)
    str_3 = module_0.doctest(str_1)
    str_4 = module_0.doctest(str_2)
    module_x_var_0 = None
    parser_0.load_docstring(str_2, module_x_var_0)

def test_case_29():
    str_0 = '_'
    str_1 = module_0.esc_underscore(str_0)
    str_2 = '__'
    str_3 = module_0.esc_underscore(str_2)
    str_4 = 'test_test'
    str_5 = module_0.esc_underscore(str_4)
    str_6 = module_0.esc_underscore(str_2)