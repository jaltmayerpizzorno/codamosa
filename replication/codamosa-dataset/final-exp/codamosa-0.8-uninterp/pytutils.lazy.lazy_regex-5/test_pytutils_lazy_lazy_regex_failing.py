# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        list_0 = []
        invalid_pattern_0 = module_0.InvalidPattern(list_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 3108.0
        invalid_pattern_0 = module_0.InvalidPattern(float_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'AE=\t-r\rIS6\toSM'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        list_0 = None
        var_0 = invalid_pattern_0.__eq__(list_0)
        var_1 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 832.3791
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'4\xb9\xc4'
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__setstate__(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'q6Gz(\nvZc3q&G*'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.finditer_public(str_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        str_0 = 'xah[oyy{\t\x0b'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        lazy_regex_1 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_1.__getattr__(lazy_regex_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xaa\xa6\xf1\x83\x99K\\\xf7\x92\xb9\x1f:\xa8j'
        dict_0 = {}
        lazy_regex_0 = module_0.LazyRegex(bytes_0, dict_0)
        set_0 = None
        var_0 = module_0.finditer_public(lazy_regex_0, set_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '%UCg'
        dict_0 = {str_0: str_0}
        str_1 = ','
        dict_1 = {str_1: str_1}
        lazy_regex_0 = module_0.LazyRegex(dict_1)
        var_0 = lazy_regex_0.__getattr__(dict_0)
    except BaseException:
        pass