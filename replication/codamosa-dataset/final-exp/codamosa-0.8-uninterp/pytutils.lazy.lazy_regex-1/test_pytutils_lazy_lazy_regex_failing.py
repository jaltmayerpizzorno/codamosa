# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        float_0 = -116.399
        invalid_pattern_0 = module_0.InvalidPattern(float_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 3153.0
        invalid_pattern_0 = module_0.InvalidPattern(float_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1904
        int_1 = 839
        invalid_pattern_0 = module_0.InvalidPattern(int_1)
        invalid_pattern_1 = module_0.InvalidPattern(invalid_pattern_0)
        set_0 = {int_1, int_0, int_0, int_0}
        invalid_pattern_2 = module_0.InvalidPattern(set_0)
        var_0 = invalid_pattern_2.__eq__(invalid_pattern_1)
        invalid_pattern_3 = module_0.InvalidPattern(int_1)
        var_1 = invalid_pattern_3.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        invalid_pattern_0 = module_0.InvalidPattern(lazy_regex_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xbbIB\xf5\xc8'
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        invalid_pattern_1 = module_0.InvalidPattern(invalid_pattern_0)
        str_0 = "\n    >>> m = AttrDict(omg=True, whoa='yes')\n    "
        dict_0 = {str_0: str_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        var_0 = lazy_regex_0.__getattr__(invalid_pattern_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x08M\xbd\x0f\xdb\xe5d5\x9a\x86\x80\xf0\xadwg\xc8\xc0\x1e?'
        lazy_regex_0 = module_0.LazyRegex(bytes_0)
        var_0 = lazy_regex_0.__getstate__()
        set_0 = {bytes_0, bytes_0, bytes_0}
        var_1 = lazy_regex_0.__getattr__(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0}
        invalid_pattern_0 = module_0.InvalidPattern(dict_0)
        int_0 = None
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__setstate__(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = module_0.install_lazy_compile()
        lazy_regex_0 = module_0.LazyRegex()
        var_1 = module_0.lazy_compile()
        str_0 = 'g*"xS=x\x0bFj-(!y4U]<'
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        dict_0 = {lazy_regex_0: lazy_regex_0, lazy_regex_0: lazy_regex_0}
        lazy_regex_1 = module_0.LazyRegex()
        var_2 = module_0.lazy_compile()
        var_3 = lazy_regex_1.__getattr__(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        str_0 = 'KHap{8\tPgCW2<oRQ)'
        int_0 = 304
        lazy_regex_0 = module_0.LazyRegex(int_0)
        dict_0 = {str_0: lazy_regex_0, str_0: int_0}
        int_1 = 1161
        dict_1 = {int_0: int_1}
        invalid_pattern_0 = module_0.InvalidPattern(dict_1)
        var_0 = module_0.finditer_public(bool_0, dict_0, invalid_pattern_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '_factory'
        bool_0 = True
        var_0 = module_0.reset_compile()
        lazy_regex_0 = module_0.LazyRegex()
        list_0 = [lazy_regex_0, str_0, str_0, str_0]
        bytes_0 = b'\xd0z\xe3J\xa8\xab\xd3r\x81\xa6ne<\xcf\x02\xa3'
        list_1 = [lazy_regex_0, bool_0, bool_0, bytes_0]
        var_1 = module_0.finditer_public(lazy_regex_0, list_0, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = module_0.reset_compile()
        str_0 = '%'
        tuple_0 = (str_0,)
        lazy_regex_0 = module_0.LazyRegex(tuple_0)
        int_0 = -1423
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_1 = invalid_pattern_0.__eq__(lazy_regex_0)
        int_1 = 141
        var_2 = module_0.finditer_public(lazy_regex_0, str_0, int_1)
        str_1 = '6}'
        var_3 = lazy_regex_0.__getattr__(str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = module_0.reset_compile()
        str_0 = '\\1'
        tuple_0 = (str_0,)
        lazy_regex_0 = module_0.LazyRegex(tuple_0)
        int_0 = 2923
        invalid_pattern_0 = module_0.InvalidPattern(int_0)
        var_1 = invalid_pattern_0.__eq__(lazy_regex_0)
        int_1 = 141
        var_2 = module_0.finditer_public(lazy_regex_0, str_0, int_1)
    except BaseException:
        pass