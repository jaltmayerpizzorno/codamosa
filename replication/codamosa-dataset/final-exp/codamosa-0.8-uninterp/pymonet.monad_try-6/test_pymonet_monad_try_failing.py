# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    try:
        str_0 = 'W3\x0bRT7wM['
        dict_0 = {str_0: str_0}
        bool_0 = True
        try_0 = module_0.Try(dict_0, bool_0)
        var_0 = try_0.on_fail(str_0)
        bool_1 = try_0.__eq__(try_0)
        list_0 = [str_0]
        str_1 = 'V`h%6}#B\t@yWZ+\\h'
        var_1 = try_0.on_fail(str_1)
        bool_2 = False
        try_1 = module_0.Try(list_0, bool_2)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = True
        float_0 = 1965.986696
        bool_0 = True
        bool_1 = True
        bytes_0 = b''
        try_0 = module_0.Try(bytes_0, bool_1)
        var_0 = try_0.get()
        str_0 = '-H6vfbi]d\r'
        try_1 = module_0.Try(str_0, bool_0)
        try_2 = module_0.Try(bool_0, bool_1)
        bool_2 = try_2.__eq__(float_0)
        float_1 = -504.0
        dict_0 = {float_1: float_1, float_1: float_1, float_1: float_1}
        var_1 = try_2.get_or_else(dict_0)
        bool_3 = True
        bool_4 = try_1.__eq__(int_0)
        try_3 = module_0.Try(int_0, bool_3)
        bool_5 = try_0.__eq__(try_3)
        var_2 = try_0.get_or_else(try_2)
        str_1 = ''
        var_3 = try_2.on_fail(str_1)
        var_4 = try_2.filter(try_2)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x9b_\xbb\xde\xe5\x803\x10r\xa0\xd6'
        tuple_0 = ()
        bool_0 = True
        int_0 = -1623
        bool_1 = False
        try_0 = module_0.Try(tuple_0, bool_1)
        var_0 = try_0.map(int_0)
        try_1 = module_0.Try(tuple_0, bool_0)
        var_1 = try_1.on_success(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -772
        int_1 = -1407
        bool_0 = True
        try_0 = module_0.Try(int_1, bool_0)
        var_0 = try_0.map(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        try_0 = module_0.Try(bool_0, bool_0)
        float_0 = -1548.2188
        str_0 = try_0.__str__()
        bool_1 = True
        try_1 = module_0.Try(float_0, bool_1)
        int_0 = 1293
        list_0 = [bool_0]
        tuple_0 = None
        tuple_1 = (int_0, list_0, tuple_0)
        dict_0 = {bool_0: try_1, tuple_0: float_0}
        tuple_2 = (int_0, tuple_1, dict_0)
        var_0 = try_0.bind(tuple_2)
        var_1 = try_1.filter(try_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n        Returns new ImmutableList with elements from previous one\n        and argument value on the end of list\n\n        :param new_element: element to append on the end of list\n        :type fn: A\n        :returns: ImmutableList[A]\n        '
        str_1 = '#]L{3Z1t#EhREP'
        int_0 = -3118
        float_0 = -900.2428
        list_0 = [int_0, str_1, str_0, str_0]
        bool_0 = True
        try_0 = module_0.Try(list_0, bool_0)
        var_0 = try_0.bind(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -1534.618888
        bool_0 = False
        try_0 = module_0.Try(bool_0, bool_0)
        var_0 = try_0.on_success(try_0)
        var_1 = try_0.on_fail(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        int_0 = -406
        str_0 = '9q'
        float_0 = None
        bool_1 = False
        try_0 = module_0.Try(bool_0, bool_1)
        var_0 = try_0.get_or_else(float_0)
        try_1 = module_0.Try(str_0, bool_0)
        var_1 = try_1.bind(int_0)
        var_2 = try_1.get()
        try_2 = module_0.Try(bool_0, bool_0)
        var_3 = try_2.on_fail(try_2)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        bool_0 = False
        try_0 = module_0.Try(dict_0, bool_0)
        var_0 = try_0.filter(dict_0)
        bool_1 = True
        try_1 = module_0.Try(dict_0, bool_1)
        var_1 = try_1.filter(dict_0)
    except BaseException:
        pass