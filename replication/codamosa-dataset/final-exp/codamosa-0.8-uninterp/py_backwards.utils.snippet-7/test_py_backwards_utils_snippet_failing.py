# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        alias_0 = module_0.alias()
        class_def_0 = module_0.ClassDef()
        str_0 = 'email.MIMEImage'
        str_1 = 'k$znuw]Th)Q#a(%Is0'
        str_2 = None
        str_3 = '4D/2[#DpS8A'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_3}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
        module_1.let(alias_0)
        bytes_0 = b'\x06V\xcfB\x01'
        snippet_0 = module_1.snippet(bytes_0)
        a_s_t_0 = None
        iterable_0 = module_1.find_variables(a_s_t_0)
    except BaseException:
        pass

def test_case_1():
    try:
        keyword_0 = None
        str_0 = '=U'
        str_1 = None
        dict_0 = {str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        except_handler_0 = module_0.ExceptHandler()
        variables_replacer_1 = module_1.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_1.visit_ExceptHandler(except_handler_0)
        except_handler_2 = variables_replacer_0.visit_ExceptHandler(except_handler_1)
        except_handler_3 = variables_replacer_0.visit_ExceptHandler(except_handler_2)
        except_handler_4 = variables_replacer_0.visit_ExceptHandler(except_handler_3)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    except BaseException:
        pass

def test_case_2():
    try:
        attribute_0 = module_0.Attribute()
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        function_def_0 = None
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    except BaseException:
        pass

def test_case_3():
    try:
        attribute_0 = module_0.Attribute()
        str_0 = '-+(&LAx,\x0b'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        a_s_t_0 = None
        str_1 = None
        dict_1 = {str_1: a_s_t_0, str_1: a_s_t_0}
        module_1.extend_tree(a_s_t_0, dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        import_from_0 = None
        str_0 = None
        str_1 = "#$LPc)qo'b"
        dict_0 = {str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Eg'
        dict_0 = {str_0: str_0}
        str_1 = '1jed7d*\x0b)P8'
        snippet_0 = module_1.snippet(str_1)
        list_0 = snippet_0.get_body(**dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'id'
        module_1.extend(str_0)
        str_1 = '\ntest = let(test)\ntest()\ntest1 = let(test1)\ntest2 = test1\n\ntest3 = let(test3)\ntest3()\n'
        var_0 = module_2.parse(str_1)
        iterable_0 = module_1.find_variables(var_0)
        var_1 = set(var_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = 'npN'
        str_1 = ''
        str_2 = None
        dict_1 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_2}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        dict_2 = {}
        variables_replacer_1 = module_1.VariablesReplacer(dict_2)
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        snippet_0 = module_1.snippet(iterable_0)
        class_def_0 = module_0.ClassDef(**dict_0)
        class_def_1 = variables_replacer_1.visit_ClassDef(class_def_0)
        name_0 = module_0.Name()
        name_1 = None
        name_2 = variables_replacer_0.visit_Name(name_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'npN'
        str_1 = ''
        str_2 = None
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_2: str_2}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        dict_1 = {}
        variables_replacer_1 = module_1.VariablesReplacer(dict_1)
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        arg_0 = module_0.arg()
        arg_1 = variables_replacer_1.visit_arg(arg_0)
        arg_2 = variables_replacer_0.visit_arg(arg_1)
        snippet_0 = module_1.snippet(iterable_0)
        module_1.let(str_0)
        variables_replacer_2 = module_1.VariablesReplacer(dict_0)
        arg_3 = variables_replacer_2.visit_arg(arg_1)
        module_1.extend_tree(a_s_t_0, dict_1)
        name_0 = None
        list_0 = [str_0]
        import_from_0 = module_0.ImportFrom(*list_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\nlet(vars)\nextend(vars)\n'
        var_0 = module_2.parse(str_0)
        module_1.extend_tree(var_0, str_0)
    except BaseException:
        pass