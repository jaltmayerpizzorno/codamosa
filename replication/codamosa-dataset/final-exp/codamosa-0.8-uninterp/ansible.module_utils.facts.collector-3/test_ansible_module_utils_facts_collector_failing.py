# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0
import collections as module_1

def test_case_0():
    try:
        str_0 = 'w^A,BjE`1^vN.0l'
        bool_0 = False
        var_0 = module_0.get_collector_names(str_0, bool_0, str_0)
        var_1 = module_0.find_collectors_for_platform(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        var_0 = module_0.collector_classes_from_gather_subset(str_0)
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_1 = '`%'
        var_1 = module_0.build_fact_id_to_collector_map(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x14\x10\xf4V\xa5\xaaH'
        bool_0 = False
        var_0 = module_0.find_unresolved_requires(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_0 = [unresolved_fact_dep_0, unresolved_fact_dep_0]
        str_0 = '+QBqa+q'
        list_1 = [unresolved_fact_dep_0, unresolved_fact_dep_0, str_0]
        var_0 = module_0.resolve_requires(list_0, list_1)
        var_1 = module_0.collector_classes_from_gather_subset(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Unit test for function find_collectors_for_platform'
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.tsort(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = None
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace()
        str_0 = "*N'xnW?cC5=Vy"
        var_1 = base_fact_collector_0.collect(str_0)
        var_2 = module_0.tsort(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 2686.6115467260015
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        var_0 = module_0.collector_classes_from_gather_subset(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace()
        str_0 = 'lH6[RZxb+p:,o:'
        dict_0 = {}
        var_1 = module_0.get_collector_names(dict_0)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        str_1 = '\x0cakC`m"qciQm%\x0cxj~='
        str_2 = None
        str_3 = '5~?+D3,!F'
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        dict_1 = {str_1: str_0, str_2: str_2, str_3: cycle_found_in_fact_deps_0, str_3: cycle_found_in_fact_deps_0}
        int_0 = -4125
        tuple_0 = (int_0, str_2)
        var_2 = module_0.resolve_requires(dict_1, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xaaE\xee[e\r'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.find_unresolved_requires(bytes_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        bool_0 = True
        base_fact_collector_0 = module_0.BaseFactCollector(bool_0)
        var_0 = base_fact_collector_0.collect()
        str_0 = '+QBqa+q'
        list_0 = [bool_0]
        var_1 = module_0.find_unresolved_requires(list_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_0 = [unresolved_fact_dep_0, unresolved_fact_dep_0]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        bool_0 = False
        base_fact_collector_0 = module_0.BaseFactCollector(bool_0)
        var_0 = base_fact_collector_0.collect()
        str_0 = '+QBqa+q'
        list_1 = [unresolved_fact_dep_0, unresolved_fact_dep_0, str_0]
        var_1 = module_0.collector_classes_from_gather_subset()
        var_2 = module_0.resolve_requires(list_0, list_1)
        float_0 = 0.1
        unresolved_fact_dep_1 = module_0.UnresolvedFactDep(*list_1)
        int_0 = 2793
        tuple_0 = (int_0, base_fact_collector_0)
        tuple_1 = (float_0, str_0, unresolved_fact_dep_1, tuple_0)
        str_1 = 'V\x0bXO6V7\rc\n'
        str_2 = '}s9\rI!E0>m@?If'
        str_3 = 'Cd~25]tC*eY[z;'
        dict_0 = {str_0: cycle_found_in_fact_deps_0, str_1: unresolved_fact_dep_1, str_2: var_2, str_3: tuple_0}
        list_2 = [unresolved_fact_dep_0, var_2, tuple_1, list_1]
        var_3 = module_0.get_collector_names(dict_0, unresolved_fact_dep_0, list_0, dict_0, list_2)
    except BaseException:
        pass

def test_case_11():
    try:
        set_0 = set()
        str_0 = '0AH\x0c(Yda:!BdyvH+,N|-'
        bool_0 = True
        list_0 = []
        bytes_0 = b'W\xaf\xe0\xff\xb5\xbdI\x9d\xab\xe4'
        var_0 = module_0.collector_classes_from_gather_subset(set_0, str_0, bool_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        defaultdict_0 = module_1.defaultdict()
        base_fact_collector_0 = module_0.BaseFactCollector()
        list_0 = [base_fact_collector_0, base_fact_collector_0, base_fact_collector_0]
        bool_0 = False
        var_0 = module_0.collector_classes_from_gather_subset(list_0, bool_0, base_fact_collector_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "7'Q^Z>tO#pFMl\x0cGFq"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        float_0 = None
        dict_1 = {float_0: float_0}
        var_0 = module_0.select_collector_classes(dict_0, dict_1)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        dict_2 = {str_0: dict_0}
        var_1 = module_0.tsort(dict_2)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        list_0 = []
        base_fact_collector_0 = module_0.BaseFactCollector()
        bytes_0 = b'\xd0a\xe8A\x04N\x96\x03\xc6i\x98\xad\xc0\x89\xba\xc71 \x0f'
        base_fact_collector_1 = module_0.BaseFactCollector(list_0, bytes_0)
        str_0 = '4r3V.=2=w|$i$q!7'
        var_1 = base_fact_collector_1.collect_with_namespace(str_0)
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        dict_0 = {str_0: cycle_found_in_fact_deps_0, str_0: str_0}
        var_2 = module_0.select_collector_classes(dict_0, dict_0)
        defaultdict_0 = module_1.defaultdict(**dict_0)
        var_3 = module_0.tsort(defaultdict_0)
        bool_0 = False
        var_4 = module_0.get_collector_names(str_0, bool_0, str_0)
        int_0 = 78
        int_1 = -413
        tuple_0 = (dict_0, int_0, int_1, list_0)
        var_5 = module_0.build_fact_id_to_collector_map(tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = "7'Q^Z>tO#pFMl\x0cGFq"
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        float_0 = None
        dict_1 = {float_0: float_0}
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect(cycle_found_in_fact_deps_0)
        var_1 = module_0.select_collector_classes(dict_0, dict_1)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_0 = [unresolved_fact_dep_0, unresolved_fact_dep_0]
        cycle_found_in_fact_deps_1 = module_0.CycleFoundInFactDeps()
        dict_2 = {str_0: cycle_found_in_fact_deps_1, str_0: list_0}
        var_2 = module_0.tsort(dict_2)
        bool_0 = False
        base_fact_collector_1 = module_0.BaseFactCollector(bool_0)
        var_3 = base_fact_collector_1.collect()
        str_1 = '+QBqa+q'
        list_1 = [str_1]
        cycle_found_in_fact_deps_2 = module_0.CycleFoundInFactDeps(*list_1)
        list_2 = [unresolved_fact_dep_0, unresolved_fact_dep_0, str_1]
        var_4 = module_0.collector_classes_from_gather_subset()
        var_5 = module_0.resolve_requires(list_0, list_2)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        base_fact_collector_2 = module_0.BaseFactCollector()
        var_6 = base_fact_collector_2.collect()
        str_2 = 'min'
        base_fact_collector_3 = module_0.BaseFactCollector(str_2)
        var_7 = base_fact_collector_3.collect_with_namespace(collector_not_found_error_0)
        base_fact_collector_4 = module_0.BaseFactCollector()
        base_fact_collector_5 = module_0.BaseFactCollector(dict_2)
        var_8 = module_0.collector_classes_from_gather_subset(dict_0, base_fact_collector_4, cycle_found_in_fact_deps_1, dict_0, bool_0, dict_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'Unit test for function find_collectors_for_platform'
        list_0 = [str_0, str_0, str_0, str_0]
        dict_0 = {str_0: str_0}
        str_1 = 'removable'
        str_2 = '^mv\n'
        dict_1 = {str_0: str_0, str_0: list_0, str_1: str_0, str_2: str_2}
        var_0 = module_0.build_dep_data(dict_0, dict_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'distribution'
        str_1 = '",b;D&BImPpc_XC5)vUF'
        bool_0 = False
        var_0 = module_0.get_collector_names(str_1, bool_0, str_0)
    except BaseException:
        pass