# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    module_1.let(iterable_0)

def test_case_2():
    function_def_0 = module_0.FunctionDef()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)

def test_case_3():
    attribute_0 = module_0.Attribute()
    str_0 = 'AlMM.HI]1+D.'
    str_1 = '?f'
    str_2 = '\tw\\q\x0b-uut\x0bw0'
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1, str_2: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    str_3 = None
    str_4 = '\nc)~G,aV0,rYB}`[!Kj'
    a_s_t_0 = module_0.AST()
    dict_1 = {str_3: str_3, str_4: str_4, str_3: str_4, str_4: a_s_t_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    attribute_2 = variables_replacer_1.visit_Attribute(attribute_1)
    str_5 = 'splituser'
    str_6 = None
    str_7 = 'q.[,#7QDyTW`X'
    dict_2 = {str_5: str_5, str_6: str_5, str_7: str_7}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    attribute_3 = variables_replacer_2.visit_Attribute(attribute_2)

def test_case_4():
    arg_0 = module_0.arg()
    str_0 = None
    str_1 = '@t5:8+YH=u'
    str_2 = 'mJ&\t+\n/Ss~jM'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    arg_1 = variables_replacer_0.visit_arg(arg_0)

def test_case_5():
    name_0 = module_0.Name()
    str_0 = '#FH@?k:A~pvx9 i'
    str_1 = "'"
    dict_0 = {str_0: str_0, str_1: str_1, str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    name_1 = variables_replacer_0.visit_Name(name_0)

def test_case_6():
    attribute_0 = module_0.Attribute()
    str_0 = 'OT'
    str_1 = 'o+nr5{=.6g[-'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    str_2 = 'SSa1J^\r#0aN*'
    dict_1 = {str_1: attribute_1, str_2: dict_0, str_2: str_2}
    keyword_0 = module_0.keyword(**dict_1)
    keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    keyword_2 = variables_replacer_0.visit_keyword(keyword_1)
    keyword_3 = variables_replacer_0.visit_keyword(keyword_2)
    keyword_4 = variables_replacer_0.visit_keyword(keyword_3)

def test_case_7():
    str_0 = 'e&'
    dict_0 = {str_0: str_0, str_0: str_0}
    keyword_0 = module_0.keyword(**dict_0)
    dict_1 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    keyword_1 = variables_replacer_0.visit_keyword(keyword_0)

def test_case_8():
    str_0 = 'tdF\tI~\tp'
    str_1 = ''
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
    class_def_0 = module_0.ClassDef(**dict_0)
    dict_1 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)

def test_case_9():
    a_s_t_0 = module_0.AST()
    dict_0 = {}
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_10():
    callable_0 = None
    module_1.extend(callable_0)
    snippet_0 = module_1.snippet(callable_0)

def test_case_11():
    str_0 = 'g>oaD'
    function_def_0 = module_0.FunctionDef()
    dict_0 = {str_0: str_0, str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    str_1 = None
    str_2 = '{bright}{red}WARN:{reset} {message}'
    str_3 = '\x0brH'
    dict_1 = {str_1: str_1, str_2: str_0, str_3: str_3}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    function_def_2 = variables_replacer_1.visit_FunctionDef(function_def_1)
    dict_2 = {str_0: str_0, str_0: str_0}
    str_4 = '^(\\s*)'
    a_s_t_0 = module_0.AST(**dict_2)
    dict_3 = {str_0: str_0, str_4: a_s_t_0}
    variables_replacer_2 = module_1.VariablesReplacer(dict_3)
    a_s_t_1 = module_0.AST(**dict_2)
    iterable_0 = module_1.find_variables(a_s_t_1)
    iterable_1 = module_1.find_variables(a_s_t_1)
    iterable_2 = module_1.find_variables(a_s_t_1)
    str_5 = 'N+x%:\x0cG\r\x0b!2Q'
    module_1.extend(dict_2)
    dict_4 = {str_5: a_s_t_1}
    except_handler_0 = module_0.ExceptHandler()
    except_handler_1 = variables_replacer_2.visit_ExceptHandler(except_handler_0)
    arg_0 = module_0.arg()
    arg_1 = variables_replacer_0.visit_arg(arg_0)
    variables_replacer_3 = module_1.VariablesReplacer(dict_0)
    arg_2 = variables_replacer_2.visit_arg(arg_1)
    except_handler_2 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    module_1.extend_tree(a_s_t_1, dict_3)
    list_0 = [str_5, variables_replacer_3, arg_1]
    import_from_0 = module_0.ImportFrom(*list_0, **dict_2)
    variables_replacer_4 = module_1.VariablesReplacer(dict_4)
    import_from_1 = variables_replacer_4.visit_ImportFrom(import_from_0)

def test_case_12():
    str_0 = '\nlet(x)\nx += 1\ny = 1\n'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_13():
    str_0 = '\nlet(vars)\nextend(vars)\nlet(vars)\nextend(vars)\nlet(vars)\nextend(vars)\n'
    var_0 = module_2.parse(str_0)
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    str_1 = ')Egc^C}i,\x0b@'
    str_2 = 'iHF,$PU,YtIF'
    str_3 = 'extcd'
    str_4 = 'extend'
    str_5 = 'G\t"iv1Rws'
    str_6 = '{=yv`x\tz+tL_Hwe"'
    a_s_t_1 = module_0.AST()
    list_0 = [a_s_t_1, str_0, str_5]
    class_def_0 = module_0.ClassDef(*list_0)
    dict_0 = {str_6: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    dict_1 = {str_3: a_s_t_0, str_4: a_s_t_0, str_5: str_0, str_6: str_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    str_7 = 'N=\r\tnL\x0c8K4%'
    str_8 = 'x7Vy:*'
    dict_2 = {str_0: str_1, str_2: str_2, str_7: str_8, str_2: str_1}
    module_1.extend_tree(a_s_t_0, dict_2)
    iterable_1 = module_1.find_variables(var_0)
    list_1 = [var_0, iterable_1]
    name_0 = module_0.Name(*list_1)
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    name_1 = variables_replacer_2.visit_Name(name_0)
    variables_replacer_3 = module_1.VariablesReplacer(dict_2)
    name_2 = variables_replacer_3.visit_Name(name_1)
    arg_0 = module_0.arg(*list_1)
    arg_1 = variables_replacer_1.visit_arg(arg_0)
    variables_replacer_4 = module_1.VariablesReplacer(dict_2)
    module_1.extend_tree(var_0, str_0)
    module_1.extend_tree(a_s_t_0, dict_2)
    var_1 = module_2.dump(var_0)
    var_2 = print(var_1)