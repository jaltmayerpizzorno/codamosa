

# Generated at 2022-06-13 16:25:11.372705
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.parsing.yaml.objects import AnsibleUnicode

    templar = Templar(loader=None)
    # Test string input
    assert isinstance(listify_lookup_plugin_terms(terms='foo', templar=templar, loader=None)[0], AnsibleUnicode)
    # Test list input
    assert isinstance(listify_lookup_plugin_terms(terms=['foo'], templar=templar, loader=None)[0], AnsibleUnicode)
    assert isinstance(listify_lookup_plugin_terms(terms=['foo', 'bar'], templar=templar, loader=None)[0], AnsibleUnicode)

# Generated at 2022-06-13 16:25:20.906385
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.parsing.vault import VaultLib
    from ansible.playbook.play_context import PlayContext

    # Set up vault
    vault = VaultLib([])
    vault.read_vault()
    templar = Templar(loader=None, shared_loader_obj=None, vault_secrets=vault, variables={})


# Generated at 2022-06-13 16:25:27.962224
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    templar = None
    loader = None
    assert listify_lookup_plugin_terms('some_string', templar, loader) == ['some_string']

    assert listify_lookup_plugin_terms('some_string with spaces', templar, loader) == ['some_string with spaces']

    assert listify_lookup_plugin_terms(['some_string', 'other_string'], templar, loader) == ['some_string', 'other_string']

    assert listify_lookup_plugin_terms(['some_string', 'other_string', '123'], templar, loader) == ['some_string', 'other_string', '123']

    assert listify_lookup_plugin_terms(1, templar, loader) == [1]


# Generated at 2022-06-13 16:25:38.381596
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.parsing.dataloader import DataLoader

    loader = DataLoader()
    templar = Templar(loader=loader)

    def test(terms, expected, vars=None):
        got = listify_lookup_plugin_terms(terms, templar, loader, vars)
        assert got == expected

    test('foo', ['foo'])
    test(['foo', 'bar'], ['foo', 'bar'])
    test('[foo, bar]', ['foo', 'bar'])
    test('foo,bar', ['foo,bar'])
    test('[foo], [bar]', ['foo', 'bar'])
    test('foo, bar', ['foo, bar'])

# Generated at 2022-06-13 16:25:50.889718
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.vars import VariableManager
    from ansible.parsing.dataloader import DataLoader

    fake_loader = DataLoader()
    v = VariableManager()

    # Test case #1: String term
    templar = Templar(loader=fake_loader, variables=v)
    terms = 'foo'
    r = listify_lookup_plugin_terms(terms, templar, fake_loader)
    assert r == ['foo']

    # Test case #2: Unquoted string
    templar = Templar(loader=fake_loader, variables=v)
    terms = u'{{ foo }}'
    v.set_variable('foo', 'bar')
    r = listify_lookup_plugin_terms(terms, templar, fake_loader)

# Generated at 2022-06-13 16:26:02.006821
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.template import Templar
    from ansible.template import bundle_basedir
    from ansible.parsing.mod_args import ModuleArgsParser

    # Create a dummy playbook to be used
    pb_dummy = dict(
        _ansible_no_log=False,
        ansible_version=dict(
            full='2.2.0.0',
            major=2,
            minor=2,
            revision=0
        ),
        ansible_managed='Ansible managed: Do not edit this file manually!',
        ansible_check_mode=False,
        ansible_diff_mode=False
    )

    # Create a dummy module_defs to be used

# Generated at 2022-06-13 16:26:09.892383
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.playbook.play_context import PlayContext
    from ansible.parsing.dataloader import DataLoader

    templar = DictableModule()
    terms = [{'foo': 'bar'}, '{{ a_string }}', 'no_templating']

    templated = listify_lookup_plugin_terms(terms, templar, loader=DataLoader())

    assert templated == [{'foo': 'bar'}, 'a_string', 'no_templating']



# Generated at 2022-06-13 16:26:18.666788
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    # Test string
    result = listify_lookup_plugin_terms('httpd')
    assert isinstance(result, list)
    assert result[0] == 'httpd'

    # Test list
    result = listify_lookup_plugin_terms(['httpd', 'nginx'])
    assert isinstance(result, list)
    assert result[0] == 'httpd'
    assert result[1] == 'nginx'

    # Test string containing a comma
    result = listify_lookup_plugin_terms('httpd,nginx')
    assert isinstance(result, list)
    assert result[0] == 'httpd'
    assert result[1] == 'nginx'

    # Test list containing a comma
    result = listify_lookup_plugin_terms(['httpd,nginx'])
   

# Generated at 2022-06-13 16:26:30.536766
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible import template
    from ansible.parsing.dataloader import DataLoader
    from ansible.vars import VariableManager
    from ansible.inventory.manager import InventoryManager

    loader = DataLoader()
    variable_manager = VariableManager()
    inventory = InventoryManager(loader=loader, sources='')
    variable_manager.set_inventory(inventory)
    templar =  template.AnsibleTemplar(loader=loader, shared_loader_obj=loader, variables=variable_manager)


# Generated at 2022-06-13 16:26:39.124021
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.parsing.dataloader import DataLoader
    from ansible.template import Templar

    parser = DataLoader()
    terms = ["item0", "item1", "item2"]
    templar = Templar(loader=parser)
    assert listify_lookup_plugin_terms(terms, templar, templar.loader) == terms

    terms = "item"
    assert listify_lookup_plugin_terms(terms, templar, templar.loader) == ["item"]

    terms = ["item0", ["item1", "item2"]]
    assert listify_lookup_plugin_terms(terms, templar, templar.loader) == ["item0", ["item1", "item2"]]

    terms = ["item0", {'item1': 'item2'}]


# Generated at 2022-06-13 16:26:47.603014
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.template import Templar
    from ansible.parsing.yaml.objects import AnsibleUnicode

    templar = Templar(loader=None)

    # Test the following:
    #   * convert a string to a list
    #   * templating of the string
    #   * convert a list of strings to a list
    #   * templating of the list items

    # Test string
    terms = 'foo'
    result = listify_lookup_plugin_terms(terms, templar, None, convert_bare=False)
    assert isinstance(result, list)
    assert result[0] == 'foo'

    terms = AnsibleUnicode('{{ foo }}')
    result = listify_lookup_plugin_terms(terms, templar, None, convert_bare=False)
   

# Generated at 2022-06-13 16:26:58.103361
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    """
    Ensure listify_lookup_plugin_terms() returns a list when given various string and non-string inputs
    """
    from ansible.module_utils.six import PY3
    from ansible.template import Templar

    loader = None

    text = "Hello World"
    text2 = "Howdy Y'all"
    text3 = "{{ foo }}"

    templar = Templar(loader=loader)

    # strings
    result = listify_lookup_plugin_terms(text, templar, loader)
    assert isinstance(result, list) and result[0] == text
    result = listify_lookup_plugin_terms(text2, templar, loader)
    assert isinstance(result, list) and result[0] == text2

# Generated at 2022-06-13 16:27:06.942630
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    import ansible.template
    import ansible.parsing.yaml.objects

    def test_template(template, vars=None, convert_bare=False, fail_on_undefined=False):
        if vars is None:
            vars = {}
        if isinstance(template, string_types) or isinstance(template, ansible.parsing.yaml.objects.AnsibleUnicode):
            template = ansible.template.Template(template, convert_bare=convert_bare, fail_on_undefined=fail_on_undefined)
        return template.render(vars=vars)

    terms = 'foo'
    templar = MockTemplar()
    templar.template = test_template
    loader = None
    fail_on_undefined = True

# Generated at 2022-06-13 16:27:17.566452
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.vars.manager import VariableManager
    from ansible.inventory.manager import InventoryManager
    from ansible.parsing.dataloader import DataLoader

    loader = DataLoader()
    inv_manager = InventoryManager(loader=loader)
    variable_manager = VariableManager(loader=loader, inventory=inv_manager)
    templar = Templar(loader=loader, variables=variable_manager)

    # Test string
    result = listify_lookup_plugin_terms('string', templar, loader)
    assert isinstance(result, list)
    assert result == ['string']

    # Test list
    result = listify_lookup_plugin_terms(['a', 'b'], templar, loader)
    assert result == ['a', 'b']

    # Test

# Generated at 2022-06-13 16:27:27.458823
# Unit test for function listify_lookup_plugin_terms

# Generated at 2022-06-13 16:27:31.567375
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from units.mock.loader import DictDataLoader
    from units.mock.path import mock_unfrackpath_noop
    from ansible.vars.manager import VariableManager
    from ansible.inventory.manager import InventoryManager
    from ansible.playbook.play_context import PlayContext
    from ansible.template import Templar
    from jinja2 import Template
    import pytest
    import sys

    variable_manager = VariableManager()
    loader = DictDataLoader({})

    inventory = InventoryManager(loader=loader, sources=['localhost'])
    variable_manager.set_inventory(inventory)

    play_context = PlayContext()

    templar = Templar(loader=loader, variables=variable_manager, fail_on_undefined=False)

    terms = 'foo'
    terms = listify_lookup

# Generated at 2022-06-13 16:27:41.262412
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar

    assert listify_lookup_plugin_terms("foo", Templar(loader=None), loader=None) == ["foo"]
    assert listify_lookup_plugin_terms(["foo"], Templar(loader=None), loader=None) == ["foo"]
    assert listify_lookup_plugin_terms("{{ ['foo'] }}", Templar(loader=None), loader=None) == ["foo"]
    assert listify_lookup_plugin_terms("{{ 'foo' }}", Templar(loader=None), loader=None) == ["foo"]
    assert listify_lookup_plugin_terms("foo", Templar(loader=None, variables={'foo': 'bar'}), loader=None) == ["bar"]

# Generated at 2022-06-13 16:27:51.062860
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.vars import VariableManager
    from ansible.parsing.dataloader import DataLoader

    v = VariableManager()
    dl = DataLoader()

    templar = Templar(loader=dl, variables=v)

    # Simple test with single item
    terms = ['foo']
    res = listify_lookup_plugin_terms(terms, templar, dl)
    assert res == ['foo'], res

    # Simple test with two items
    terms = ['foo', 'bar']
    res = listify_lookup_plugin_terms(terms, templar, dl)
    assert res == ['foo', 'bar'], res

    # Test with string
    terms = 'foo'

# Generated at 2022-06-13 16:28:02.128796
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible import constants as C
    from ansible.parsing.mod_args import ModuleArgsParser
    from ansible.template import Templar
    from ansible.vars.manager import VariableManager

    # setup required objects for listify_lookup_plugin_terms
    terms = '{{ item }}'
    basedir = '.'
    vars_manager = VariableManager()
    loader = vars_manager.get_vars_loader()
    display = C.DEFAULT_DISPLAY
    options = {'display_skipped_hosts': True}
    passwords = {}
    connection = {}
    inventory = []
    check = True
    module_vars = []

    # instantiate a ModuleArgsParser and a Templar

# Generated at 2022-06-13 16:28:06.906124
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.template import Templar

    # Test a string
    assert listify_lookup_plugin_terms('foo', Templar(loader=None), None) == ['foo']

    # Test a list
    assert listify_lookup_plugin_terms(['foo','bar'], Templar(loader=None), None) == ['foo','bar']


# Generated at 2022-06-13 16:28:20.402572
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.parsing.dataloader import DataLoader
    from ansible.template import Templar

    loader = DataLoader()
    terms = [
        "{{ ['a', 'b', 'c'] }}",
        ["{{ ['a', 'b', 'c'] }}", "{{ ['d', 'e', 'f'] }}"],
        "{{ 'a' }}",
        "{{ ['a', 'b', 'c'] }}",
        "{{ ['a', 'b', 'c'] }}",
        "{{ ['a', 'b', 'c'] }}",
        "{{ ['a', 'b', 'c'] }}",
        "{{ ['a', 'b', 'c'] }}",
        ["{{ ['a', 'b', 'c'] }}", "{{ ['d', 'e', 'f'] }}"],
    ]
    templ

# Generated at 2022-06-13 16:28:29.098143
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible import errors
    from ansible.template import Templar
    from ansible.parsing.dataloader import DataLoader

    templar = Templar(DataLoader())
    assert listify_lookup_plugin_terms('hello', templar, fail_on_undefined=True) == ['hello']
    assert listify_lookup_plugin_terms('hello', templar, fail_on_undefined=False) == ['hello']

    assert listify_lookup_plugin_terms(['hello'], templar, fail_on_undefined=True) == ['hello']
    assert listify_lookup_plugin_terms(['hello'], templar, fail_on_undefined=False) == ['hello']


# Generated at 2022-06-13 16:28:38.649378
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    import ansible.parsing.yaml.objects
    import ansible.template
    import ansible.template.safe_eval

    loader = ansible.parsing.dataloader.DataLoader()
    variables = ansible.template.VarsModule()
    templar = ansible.template.Templar(loader=loader, variables=variables)

    assert listify_lookup_plugin_terms("{{ 'myfile' }}", templar, loader) == ['myfile']
    assert listify_lookup_plugin_terms("{{ 'myfile' | basename }}", templar, loader) == ['myfile']
    assert listify_lookup_plugin_terms("[ 'myfile', 'yourfile' ]", templar, loader) == ['myfile', 'yourfile']
    assert listify_lookup

# Generated at 2022-06-13 16:28:49.100095
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    import ansible.parsing.yaml.objects
    import ansible.template.safe_eval

    templar = ansible.template.Templetor()
    terms = "{{a}} {{b}}"
    a = ansible.parsing.yaml.objects.AnsibleVaultEncryptedUnicode('hello')
    b = ansible.parsing.yaml.objects.AnsibleVaultEncryptedUnicode('world')
    with ansible.template.safe_eval.safe_eval(terms=terms, locals={'a': a, 'b': b}, follow_imports=False) as evaler:
        assert not evaler.failed
        ret = ansible.parsing.yaml.objects.AnsibleVaultEncryptedUnicode(evaler.result)

# Generated at 2022-06-13 16:29:00.511149
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.module_utils.common._collections_compat import Sequence
    from ansible.utils.unsafe_proxy import AnsibleUnsafeText
    from ansible.template import Templar
    from ansible.parsing.yaml.objects import AnsibleBaseYAMLObject

    class TestModule:
        class AnsibleModule:
            def __init__(self):
                self.params = {}
                self.args = {}

    class MyLoader(object):
        def __init__(self):
            self.mocked = True

    m = TestModule()
    t = Templar(loader=MyLoader(), variables={})

    # Test string term
    term = "A test"
    result = listify_lookup_plugin_terms(term, t, m)
    assert isinstance(result, Sequence)

# Generated at 2022-06-13 16:29:10.189406
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.template.template import AnsibleTemplate
    from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode

    from ansible.module_utils._text import to_text
    from ansible.module_utils.common._collections_compat import Mapping
    from ansible.module_utils.common._collections_compat import MutableMapping
    from ansible.module_utils.common._collections_compat import MutableSequence


# Generated at 2022-06-13 16:29:17.896486
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    assert listify_lookup_plugin_terms(['a', 'b'], None, None) == ['a', 'b']
    assert listify_lookup_plugin_terms('a b', None, None) == ['a', 'b']
    assert listify_lookup_plugin_terms(['a', '{{foo}}'], {'foo': 'bar'}, None) == ['a', 'bar']
    assert listify_lookup_plugin_terms('a {{foo}}', {'foo': 'bar'}, None) == ['a', 'bar']

# Generated at 2022-06-13 16:29:29.671430
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.utils.unsafe_proxy import AnsibleUnsafeText
    from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode
    from ansible.template import Templar

    # NOTE: the templar.environment is a copy of the `play_context` that would be used to
    #       render the lookup plugin call from any given play/task/etc.  It is stored in the
    #       `templar` arg on the LookupModule class to be used later in templating the lookup.
    class TestTemplar(Templar):
        def __init__(self):
            self.environment = Environment()

    loader = None
    templar = TestTemplar()


    # Tests for `listify_lookup_plugin_terms`

    # string input
    test_string

# Generated at 2022-06-13 16:29:39.280821
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.parsing.yaml.loader import AnsibleLoader
    loader = AnsibleLoader(None, dict())

    terms = 'a'
    terms = listify_lookup_plugin_terms(terms, Templar(loader=loader), loader)
    assert terms == ['a']

    terms = u'b'
    terms = listify_lookup_plugin_terms(terms, Templar(loader=loader), loader)
    assert terms == ['b']

    terms = ['a', 'b']
    terms = listify_lookup_plugin_terms(terms, Templar(loader=loader), loader)
    assert terms == ['a', 'b']

    terms = ['a', u'b']
    terms = listify_lookup_plugin_terms(terms, Templar(loader=loader), loader)
   

# Generated at 2022-06-13 16:29:49.269067
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.template import Templar

    class TestVars(object):
        pass

    v = TestVars()

    t = Templar(loader=None, variables=v)

    assert listify_lookup_plugin_terms(terms='1 2 3', templar=t) == ['1 2 3']
    assert listify_lookup_plugin_terms(terms=[1, 2, 3], templar=t) == [1, 2, 3]
    assert listify_lookup_plugin_terms(terms=(1, 2, 3), templar=t) == (1, 2, 3)
    assert listify_lookup_plugin_terms(terms='1', templar=t) == ['1']
    assert listify_lookup_plugin_terms(terms=1, templar=t) == [1]

   

# Generated at 2022-06-13 16:30:00.075463
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible import constants as C
    from ansible.template import Templar
    from ansible.parsing.dataloader import DataLoader

    loader = DataLoader()
    templar = Templar(loader=loader)

    parameters1 = dict(
        terms='{{ lookup_dump_var }}',
        templar=templar,
        loader=loader,
        fail_on_undefined=True,
    )
    result1 = listify_lookup_plugin_terms(**parameters1)
    assert result1 == [C.DEFAULT_JINJA2_NATIVE_STR]

    parameters2 = dict(
        terms=['{%', '%}'],
        templar=templar,
        loader=loader,
        fail_on_undefined=True,
    )

# Generated at 2022-06-13 16:30:04.303044
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    # It shoul convert a string to a list when the list is standardized (i.e. comma delimited)
    terms = listify_lookup_plugin_terms('foo,bar,baz', None, None, False)
    assert isinstance(terms, list)
    assert 'foo' in terms
    assert 'bar' in terms
    assert 'baz' in terms

# Generated at 2022-06-13 16:30:15.700626
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.parsing.yaml.objects import AnsibleUnicode
    from ansible.playbook.play_context import PlayContext

    templar = Templar(loader=None, variables={})

    assert listify_lookup_plugin_terms(terms='foo', templar=templar, loader=None) == ['foo']
    assert listify_lookup_plugin_terms(terms='foo', templar=templar, loader=None, convert_bare=True) == ['foo']

    assert listify_lookup_plugin_terms(terms=['foo'], templar=templar, loader=None) == ['foo']

    assert listify_lookup_plugin_terms(terms=['foo', 'bar'], templar=templar, loader=None)

# Generated at 2022-06-13 16:30:27.805586
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar

    class TestVarsModule(object):
        def __init__(self, data):
            self._data = data

        def __getattr__(self, name):
            if self._data is not None and name in self._data:
                return self._data[name]
            else:
                raise KeyError('key "{0}" is undefined'.format(name))

        def get(self, name, default=None):
            return getattr(self, name, default)

    class TestVars(object):
        def __init__(self, host_vars):
            self.host_vars = host_vars


# Generated at 2022-06-13 16:30:36.709434
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar

    mock_templar = Templar(None, loader=None)
    mock_templar.template = lambda x: x

    assert listify_lookup_plugin_terms('a', mock_templar, loader=None) == ['a']
    assert listify_lookup_plugin_terms(['a'], mock_templar, loader=None) == ['a']
    assert listify_lookup_plugin_terms('a b c', mock_templar, loader=None) == ['a b c']
    assert listify_lookup_plugin_terms(['a b c'], mock_templar, loader=None) == ['a b c']
    assert listify_lookup_plugin_terms(['a', ['b', 'c']], mock_templar, loader=None)

# Generated at 2022-06-13 16:30:42.160343
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.parsing.yaml.objects import AnsibleMapping
    from ansible.vars import VariableManager
    from ansible.utils.vars import combine_vars
    from ansible.inventory.manager import InventoryManager
    from ansible.playbook.play import Play

    inv_data = {
        "all": {
            "hosts": ['foo'],
            "vars": {'a': 'foo', 'b': 1, 'c': True, 'd': ['a', 'b', 'c'], 'e': {'a': 'foo'}, 'f': [{'a': 'foo'}, 'b']}
        }
    }

    vars_data = {"test": "{{ a }}", "test2": "{{ c }}"}

    # create the inventory

# Generated at 2022-06-13 16:30:53.085295
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.playbook.play_context import PlayContext
    from ansible.template import Templar, Jinja2Sandbox
    from ansible.vars.manager import VariableManager
    from ansible.parsing.dataloader import DataLoader
    from ansible.inventory.manager import InventoryManager
    from units.mock.loader import DictDataLoader
    from units.mock.path import mock_unfrackpath_noop
    from units.mock.plugins.lookup import LookupBase
    import os

    loader = DataLoader()

    inventory = InventoryManager(loader=loader, sources='localhost,')
    variable_manager = VariableManager(loader=loader, inventory=inventory)
    play_context = PlayContext()
    templar = Templar(loader=loader, variables=variable_manager, play_context=play_context)

# Generated at 2022-06-13 16:31:01.497267
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    # replicate some jinja2 templating objects so that we can test without import jinja2
    class FakeJinjaEnv:

        def __init__(self):
            self.loader = FakeJinjaLoader()

        def get_template(self, term):
            return term

    class FakeJinjaTemplate:

        def render(self, vars):
            return vars['term']

    class FakeJinjaLoader:
        def __init__(self):
            self.templates = {}

        def get_source(self, environment, template):
            if template not in self.templates:
                self.templates[template] = FakeJinjaTemplate()
            return (self.templates[template].render, None, lambda: True)


# Generated at 2022-06-13 16:31:10.770513
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.utils.template import Templar
    from ansible.parsing.yaml.objects import AnsibleUnicode
    from ansible.template import Templar
    from ansible.vars.manager import VariableManager
    from ansible.vars.unsafe_proxy import AnsibleUnsafeText
    from ansible.inventory.manager import InventoryManager
    from ansible.playbook.play_context import PlayContext

    t = Templar(loader=None, variables=VariableManager(loader=None, inventory=InventoryManager(loader=None, sources=None)))

    # string
    assert listify_lookup_plugin_terms("hello", templar=t) == ["hello"]

    # unicode
    assert listify_lookup_plugin_terms(AnsibleUnicode("hello"), templar=t) == ["hello"]

   

# Generated at 2022-06-13 16:31:19.305175
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar

    loader = FakeLoader()

    # Case 1: terms as list
    terms = [1, 2, 3]
    templar = Templar(loader=loader, variables={})
    result = listify_lookup_plugin_terms(terms, templar, loader, fail_on_undefined=True, convert_bare=False)
    assert result is not None
    assert result == [1, 2, 3]

    # Case 2: terms as single string
    terms = "{{ test_value }}"
    templar = Templar(loader=loader, variables={'test_value': 'abc'})
    result = listify_lookup_plugin_terms(terms, templar, loader, fail_on_undefined=True, convert_bare=False)
    assert result is not None

# Generated at 2022-06-13 16:31:37.126870
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    """
    Test function to ensure that listify_lookup_plugin_terms works as expected.
    """
    from ansible.parsing.dataloader import DataLoader
    from ansible.template import Templar
    loader = DataLoader()
    templar = Templar(loader=loader, variables={'bar': 'baz'})
    result = listify_lookup_plugin_terms('{{foo}}', templar, loader)
    assert result == [None], 'Templated string should have been converted to a single item list.'

    result = listify_lookup_plugin_terms('{{foo}} {{bar}}', templar, loader)
    assert result == [None, 'baz'], \
        'Templated string should have been converted to a two item list with the second item populated.'

    result = listify_lookup

# Generated at 2022-06-13 16:31:47.899899
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.vars import VariableManager
    from ansible.parsing.yaml.objects import AnsibleUnicode
    from ansible.parsing.dataloader import DataLoader
    import os

    v = VariableManager()
    v.extra_vars = dict(one=1, two=2, three=3)
    v.options_vars = dict()
    t = Templar(loader=DataLoader(), variables=v)

    # Test a scalar term
    assert listify_lookup_plugin_terms(AnsibleUnicode('one'), t, loader=DataLoader(), fail_on_undefined=True,
                                       convert_bare=False) == ['one']

    # Test an already listified term

# Generated at 2022-06-13 16:31:53.033749
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.parsing.yaml.objects import AnsibleUnicode
    from ansible.template import Templar
    from ansible import constants as C
    from ansible.parsing.dataloader import DataLoader

    # AnsibleUnicode is used in place of a string to ensure that templating works
    # and the quotes do not get stripped out.
    terms = [u"{{ var }}", AnsibleUnicode("one"), AnsibleUnicode("two")]

    var = 'value'
    templar = Templar(loader=DataLoader(), variables={'var': var})

    # Test with all unicode characters
    result = listify_lookup_plugin_terms(terms, templar, DataLoader())
    assert len(result) == 3

# Generated at 2022-06-13 16:32:01.167356
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    terms = "{{ 'foo','bar' }}"
    assert(listify_lookup_plugin_terms(terms, None, None) == ['foo','bar'])

    terms = ["{{ 'foo','bar' }}"]
    assert(listify_lookup_plugin_terms(terms, None, None) == [["foo",  "bar"]])

    terms = "foo,bar"
    assert(listify_lookup_plugin_terms(terms, None, None) == ['foo','bar'])

    terms = ["foo", "bar"]
    assert(listify_lookup_plugin_terms(terms, None, None) == ["foo", "bar"])

    terms = "{{ 'foo' }}"
    assert(listify_lookup_plugin_terms(terms, None, None) == ['foo'])


# Generated at 2022-06-13 16:32:12.567898
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.vars import VariableManager

    vm = VariableManager()
    vm.extra_vars = dict(name='world')
    templar = Templar(loader=None, variables=vm)

    # None / Not a string
    assert listify_lookup_plugin_terms(None, templar) == []

    # String
    assert listify_lookup_plugin_terms('hello', templar) == ['hello']

    # String with jinja2 syntax
    assert listify_lookup_plugin_terms('hello, {{name}}', templar) == ['hello', 'world']

    # String w/o jinja2 syntax
    assert listify_lookup_plugin_terms('hello, {name}', templar) == ['hello, {name}']

    #

# Generated at 2022-06-13 16:32:19.009483
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible import constants as C
    from ansible.template import Templar
    from ansible.vars import VariableManager
    from ansible.parsing.vault import VaultLib
    import pytest
    from ansible.utils.vars import combine_vars
    from ansible.utils.vars import combine_hash


# Generated at 2022-06-13 16:32:30.083835
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.vars import VariableManager
    from ansible.parsing.dataloader import DataLoader
    from ansible.template import Templar

    variable_manager = VariableManager()
    loader = DataLoader()
    variable_manager.set_vault_secrets(['secret1', 'secret2'])
    templar = Templar(loader=loader, variable_manager=variable_manager)
    terms = [1,2,3]
    expected = [1,2,3]
    result = listify_lookup_plugin_terms(terms, templar, loader)
    assert result == expected, 'listify_lookup_plugin_terms failed: expected: %s actual: %s' % (expected, result)

    terms = "1"
    expected = [1]
    result = listify_lookup_plugin_

# Generated at 2022-06-13 16:32:35.764332
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar

    listify_lookup_plugin_terms(['1', '2', '3'], Templar(loader=None), None)
    listify_lookup_plugin_terms('1', Templar(loader=None), None)
    listify_lookup_plugin_terms(['1'], Templar(loader=None), None)
    listify_lookup_plugin_terms(['{{foo}}'], Templar(loader=None), None)

# Generated at 2022-06-13 16:32:48.046350
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.playbook.play_context import PlayContext
    from ansible.template import Templar
    from ansible.vars.manager import VariableManager
    from ansible.module_utils.common._collections_compat import Mapping

    variables = dict(
        testvar=dict(
            dicto=dict(
                dicta="a",
                dictb="b",
            ),
            listo=["a", "b"],
            string="foo",
            string_list=["a", "b"],
        )
    )

    variable_manager = VariableManager()
    variable_manager.extra_vars = variables

    pc = PlayContext()
    pc.variable_manager = variable_manager

    templar = Templar(loader=None, variables=variables, shared_loader_obj=None, playcontext=pc)

   

# Generated at 2022-06-13 16:32:57.362316
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    assert listify_lookup_plugin_terms("one 'two three'", None, None, False, True) == ['one', 'two three']
    assert listify_lookup_plugin_terms("one 'two three'", None, None, False, False) == ['one', "'two three'"]
    assert listify_lookup_plugin_terms("one 'two three'", None, None, True, True) == ['one', 'two three']
    assert listify_lookup_plugin_terms("one 'two three'", None, None, True, False) == ['one', "'two three'"]

    assert listify_lookup_plugin_terms("{{ one }} 'two three'", "one", None, False, True) == 'one', 'two three'

# Generated at 2022-06-13 16:33:20.977205
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.parsing.dataloader import DataLoader
    from ansible.vars import VariableManager
    from ansible.template import Templar

    loader = DataLoader()
    variable_manager = VariableManager()
    variable_manager.set_inventory(loader.inventory)

    templar = Templar(loader=loader, variables=variable_manager)
    # test a string
    string = "one"
    assert listify_lookup_plugin_terms(string, templar) == ['one']
    # test a lit
    lit = ['two']
    assert listify_lookup_plugin_terms(lit, templar) == ['two']
    # test a range
    range = range(3)
    assert listify_lookup_plugin_terms(range, templar) == [0, 1, 2]
   

# Generated at 2022-06-13 16:33:29.632457
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.parsing.dataloader import DataLoader
    from ansible.parsing.yaml.objects import AnsibleVaultEncryptedUnicode
    from ansible.template import Templar
    loader = DataLoader()
    templar = Templar(loader=loader)

    assert listify_lookup_plugin_terms("foo", templar, loader) == ["foo"]
    assert listify_lookup_plugin_terms("foo", templar, loader, convert_bare=True) == ["{{ foo }}"]
    assert listify_lookup_plugin_terms("foo", templar, loader, fail_on_undefined=False) == [u"foo"]

# Generated at 2022-06-13 16:33:41.027902
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.module_utils.common._collections_compat import OrderedDict
    from ansible.template import Templar
    # listify_lookup_plugin_terms expects a mocked templar object
    templar = Templar(loader=None)

    # simplest case, a simple string
    terms = 'foo'
    assert listify_lookup_plugin_terms(terms, templar, loader) == ['foo']

    # next simplest, a list of strings
    terms = ['foo', 'bar']
    assert listify_lookup_plugin_terms(terms, templar, loader) == ['foo', 'bar']

    # now a list of template expressions
    terms = ['{{foo}}', '{{bar}}']
    templar.available_variables = dict(foo='foo', bar='bar')
    assert listify

# Generated at 2022-06-13 16:33:49.257339
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.template import Templar
    from ansible.utils.unsafe_proxy import wrap_var
    from ansible.vars.unsafe_proxy import UnsafeProxy, UnsafeVariableError
    templar = Templar(None, loader=None)
    terms = UnsafeProxy({'a':'b', 'c':'d'})
    terms = wrap_var(terms)

    # test passing dict
    r = listify_lookup_plugin_terms(terms, templar, None, fail_on_undefined=False)
    assert isinstance(r, list), "Failed to convert dict to list"

    # test passing string
    r = listify_lookup_plugin_terms("{{foo}}", templar, None, fail_on_undefined=False)

# Generated at 2022-06-13 16:34:00.469647
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.template import Templar
    from ansible.vars.manager import VariableManager

    fixture_data = dict(
        one='foo',
        two='bar',
    )

    vars_manager = VariableManager()
    vars_manager.set_inventory(Inventory(host_list=['localhost']))
    vars_manager.set_match_filter(MatchAllFilter())
    vars_manager.extra_vars = fixture_data

    templar = Templar(loader=None, variables=vars_manager)
    templar.set_available_variables(vars_manager)


# Generated at 2022-06-13 16:34:05.324206
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    # Test with invalid term type
    try:
        listify_lookup_plugin_terms(1)
    except TypeError as e:
        assert 'unsupported terms argument to listify_lookup_plugin_terms' in str(e)

    # Test with valid term types
    assert listify_lookup_plugin_terms('a') == ['a']
    assert listify_lookup_plugin_terms(['a']) == ['a']

# Generated at 2022-06-13 16:34:13.986667
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.module_utils.common._collections_compat import Mapping
    from ansible.parsing.dataloader import DataLoader
    from ansible.playbook.play_context import PlayContext
    from ansible.template import Templar

    loader = DataLoader()
    variable_manager = None
    _templar = Templar(loader=loader, variable_manager=variable_manager, shared_loader_obj=loader)
    terms = "{{ test_var }}"
    try:
        listify_lookup_plugin_terms(terms, _templar, loader)
        assert False, "expected failure"
    except Exception as e:
        assert "was requested" in str(e), str(e)


# Generated at 2022-06-13 16:34:19.877541
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    from ansible.module_utils.common._collections_compat import OrderedDict
    from ansible.playbook.play import Play
    from ansible.template import Templar

    test1_play = Play().load({
        'name': 'test1',
        'connection': 'local',
        'hosts': 'localhost',
        'gather_facts': 'no',
        'tasks': [
            {
                'name': 'debug',
                'debug': 'msg="{{ item }}"',
                'with_items': '{{ foo }}'
            }
        ]
    }, variable_manager=None, loader=None)
    test1_variables = OrderedDict({
        'foo': [
            'bar',
            'baz'
        ]
    })
    test1_result = listify_look

# Generated at 2022-06-13 16:34:30.395747
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():

    from ansible.template import Templar

    terms = '{{ foo }}'
    templar = Templar()

    ret = listify_lookup_plugin_terms(terms, templar, None)
    assert ret == ['{{ foo }}']

    terms = '{{ foo.keys() }}'
    ret = listify_lookup_plugin_terms(terms, templar, None)
    assert isinstance(ret, list) and len(ret) == 1 and ret[0] == '{{ foo.keys() }}'

    terms = '{{ foo.keys() }} {{ bar }}'
    ret = listify_lookup_plugin_terms(terms, templar, None)

# Generated at 2022-06-13 16:34:40.520213
# Unit test for function listify_lookup_plugin_terms
def test_listify_lookup_plugin_terms():
    """
    Test listify_lookup_plugin_terms
    """
    from ansible.module_utils.common._collections_compat import Mapping
    import ansible.template as template
    import ansible.parsing.dataloader as dataloader
    from ansible.utils import context_objects as co

    data = """
    var1: 1
    var2: 2
    """

    class TestVarsModule(object):
        pass

    class TestTemplate(template.Template):
        pass

    context = co.RequestContext()
    context.CLIARGS = {}
    context.BASEDIR = '.'

    dl = dataloader.DataLoader()
    tmplar = TestTemplate(loader=dl, variables=TestVarsModule())
    tmplar.set_available_vari