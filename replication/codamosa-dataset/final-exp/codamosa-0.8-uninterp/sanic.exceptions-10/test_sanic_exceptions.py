# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    pass

def test_case_1():
    float_0 = -2079.247
    header_expectation_failed_0 = module_0.HeaderExpectationFailed(float_0)

def test_case_2():
    request_timeout_0 = None
    str_0 = '^soId/|Vv-'
    file_not_found_0 = None
    header_not_found_0 = module_0.HeaderNotFound(str_0, file_not_found_0)
    bool_0 = False
    file_not_found_1 = module_0.FileNotFound(request_timeout_0, header_not_found_0, bool_0)
    server_error_0 = module_0.ServerError(file_not_found_1)
    float_0 = 0.1
    str_1 = '.%#H(h\x0bal'
    method_not_supported_0 = module_0.MethodNotSupported(server_error_0, float_0, str_1)

def test_case_3():
    payload_too_large_0 = None
    u_r_l_build_error_0 = module_0.URLBuildError(payload_too_large_0)
    str_0 = "^'\x0c0Mk-7 $9^4Me[=u"
    bool_0 = False
    py_file_error_0 = module_0.PyFileError(bool_0)
    header_expectation_failed_0 = module_0.HeaderExpectationFailed(str_0, py_file_error_0)
    py_file_error_1 = module_0.PyFileError(header_expectation_failed_0)

def test_case_4():
    list_0 = []
    payload_too_large_0 = module_0.PayloadTooLarge(list_0)
    set_0 = set()
    int_0 = 1737
    unauthorized_0 = module_0.Unauthorized(set_0, int_0, list_0)
    sanic_exception_0 = module_0.SanicException(list_0)
    py_file_error_0 = module_0.PyFileError(sanic_exception_0)
    bytes_0 = b'\xf9\x98\x17D\xe3T\xeb\xc5\x9d\xf9\xd3U'
    not_found_0 = module_0.NotFound(bytes_0)
    load_file_exception_0 = module_0.LoadFileException(set_0)

def test_case_5():
    header_expectation_failed_0 = None
    header_not_found_0 = module_0.HeaderNotFound(header_expectation_failed_0)
    list_0 = [header_expectation_failed_0]
    set_0 = {header_not_found_0}
    py_file_error_0 = module_0.PyFileError(set_0)
    dict_0 = None
    u_r_l_build_error_0 = module_0.URLBuildError(py_file_error_0, dict_0)
    payload_too_large_0 = module_0.PayloadTooLarge(header_not_found_0, list_0, u_r_l_build_error_0)
    tuple_0 = ()
    load_file_exception_0 = module_0.LoadFileException(tuple_0, payload_too_large_0)
    str_0 = '8ST6v&l&\\p:'
    method_not_supported_0 = module_0.MethodNotSupported(py_file_error_0, load_file_exception_0, str_0)
    request_timeout_0 = module_0.RequestTimeout(method_not_supported_0, str_0)
    forbidden_0 = module_0.Forbidden(request_timeout_0, dict_0)
    file_not_found_0 = module_0.FileNotFound(payload_too_large_0, header_not_found_0, forbidden_0)