# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    try:
        str_0 = 'f;S}wx)U8Rl?;RvP@]'
        blueprint_group_0 = module_0.BlueprintGroup()
        var_0 = blueprint_group_0.middleware()
        str_1 = ' 2$\t?B3yVYM:GPCrSc:'
        int_0 = -4700
        blueprint_0 = module_1.Blueprint(str_0)
        var_1 = blueprint_group_0.__iter__()
        var_2 = blueprint_group_0.middleware()
        blueprint_group_0.insert(int_0, blueprint_0)
        int_1 = 423
        blueprint_1 = module_1.Blueprint(str_1, str_1, int_1)
        blueprint_group_0.append(blueprint_1)
        blueprint_group_1 = module_0.BlueprintGroup()
        dict_0 = {var_0: var_0, blueprint_0: blueprint_group_0}
        var_3 = blueprint_group_1.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xc9\x00\xc9$\xd2\xf6\x98\x86j\xd6\xbc\xb62\x99Xj'
        float_0 = -75.2314
        str_0 = 'k\x0c1Pa^ZW"%`ZzD7ur@'
        list_0 = [str_0, str_0, str_0]
        str_1 = 's'
        blueprint_0 = module_1.Blueprint(str_1)
        blueprint_group_0 = module_0.BlueprintGroup(list_0, blueprint_0)
        blueprint_group_0.__setitem__(bytes_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        blueprint_group_0 = module_0.BlueprintGroup(dict_0)
        bool_0 = True
        blueprint_group_0.__delitem__(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        blueprint_group_0 = module_0.BlueprintGroup()
        int_0 = blueprint_group_0.__len__()
        str_0 = None
        blueprint_0 = module_1.Blueprint(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        blueprint_0 = None
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.append(blueprint_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        set_0 = {bool_0}
        blueprint_group_0 = module_0.BlueprintGroup(bool_0, set_0)
        int_0 = 2670
        str_0 = 'J(I,o\n.9K]<=j6@F]/e}'
        blueprint_0 = module_1.Blueprint(str_0, str_0, bool_0)
        blueprint_group_0.insert(int_0, blueprint_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'F<>f\ty'
        bool_0 = False
        int_0 = 692
        str_1 = 'Take a request from the HTTP Server and return a response object\n        to be sent back The HTTP Server only expects a response object, so\n        exception handling must be done here\n\n        :param request: HTTP Request object\n        :param write_callback: Synchronous response function to be\n            called with the response as the only argument\n        :param stream_callback: Coroutine that handles streaming a\n            StreamingHTTPResponse if produced by the handler.\n\n        :return: Nothing\n        '
        blueprint_0 = module_1.Blueprint(str_1, str_0, str_1, bool_0)
        blueprint_group_0 = module_0.BlueprintGroup()
        blueprint_group_0.insert(int_0, blueprint_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = None
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        float_0 = 4325.36442
        blueprint_group_0 = module_0.BlueprintGroup(float_0)
        int_0 = blueprint_group_0.__len__()
        blueprint_group_1 = module_0.BlueprintGroup()
        var_0 = blueprint_group_1.middleware()
        list_0 = [var_0, float_0, dict_0, float_0]
        var_1 = blueprint_group_0.middleware(*list_0)
        set_0 = set()
        var_2 = blueprint_group_0.middleware(*list_0)
        blueprint_group_0.__setitem__(set_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'bp1'
        str_1 = '/bp1'
        blueprint_0 = module_1.Blueprint(str_0, str_1)
        str_2 = 'bp2'
        str_3 = '/bp2'
        blueprint_1 = module_1.Blueprint(str_2, str_3)
        str_4 = 'bp3'
        str_5 = '/bp3'
        blueprint_2 = module_1.Blueprint(str_4, str_5)
        str_6 = 'bp4'
        str_7 = '/bp4'
        blueprint_3 = module_1.Blueprint(str_6, str_7)
        str_8 = '/api'
        str_9 = 'v1'
        blueprint_group_0 = module_0.BlueprintGroup(str_8, str_9)
        blueprint_group_0.append(blueprint_0)
        blueprint_group_0.append(blueprint_1)
        str_10 = '/api/v2'
        blueprint_group_1 = module_0.BlueprintGroup(str_10, blueprint_3)
        blueprint_group_0.append(blueprint_group_1)
    except BaseException:
        pass

def test_case_9():
    try:
        blueprint_group_0 = module_0.BlueprintGroup()
        bool_0 = None
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        float_0 = 4325.36442
        int_0 = blueprint_group_0.__len__()
        str_0 = 'xLc\nM\x0bZ%t\x0c\rwtaRC5LS'
        blueprint_0 = module_1.Blueprint(str_0)
        blueprint_group_1 = module_0.BlueprintGroup()
        var_0 = blueprint_group_1.middleware()
        str_1 = '.|Y1!/'
        set_0 = {float_0, str_1, float_0, blueprint_group_0}
        float_1 = 3649.0
        int_1 = blueprint_group_1.__len__()
        blueprint_group_2 = module_0.BlueprintGroup(float_1)
        int_2 = blueprint_group_2.__len__()
        blueprint_group_3 = module_0.BlueprintGroup(set_0)
        blueprint_group_1.append(blueprint_0)
        blueprint_group_4 = module_0.BlueprintGroup(blueprint_0)
        list_0 = [var_0, float_0, dict_0, float_0]
        var_1 = blueprint_group_1.middleware(*list_0)
    except BaseException:
        pass