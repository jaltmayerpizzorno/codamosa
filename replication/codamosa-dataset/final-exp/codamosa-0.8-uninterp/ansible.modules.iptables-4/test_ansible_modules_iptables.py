# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = None
    tuple_0 = ()
    float_0 = -1166.5941
    var_0 = module_0.append_match_flag(str_0, tuple_0, tuple_0, float_0)

def test_case_2():
    str_0 = None
    tuple_0 = ()
    float_0 = -1166.5941
    float_1 = 2723.354
    complex_0 = None
    set_0 = {float_0}
    var_0 = module_0.append_wait(float_1, complex_0, set_0)
    var_1 = module_0.append_match_flag(str_0, tuple_0, tuple_0, float_0)

def test_case_3():
    list_0 = None
    set_0 = {list_0, list_0}
    var_0 = module_0.main()
    bool_0 = False
    bool_1 = True
    str_0 = 'wEg-/3o61|NTtdL\x0cx5s#'
    int_0 = 922
    tuple_0 = (bool_1, str_0, int_0)
    bool_2 = False
    var_1 = module_0.append_match(tuple_0, bool_2, set_0)
    float_0 = 1807.4
    tuple_1 = ()
    var_2 = module_0.append_wait(set_0, tuple_1, tuple_1)
    bool_3 = False
    bool_4 = False
    float_1 = 60.0
    bytes_0 = b'^\x07\x03&5\xc52\x9e\xf6\xc1'
    dict_0 = {}
    var_3 = module_0.push_arguments(bytes_0, list_0, dict_0, float_1)
    dict_1 = {tuple_1: int_0, bool_2: float_1, tuple_0: float_0}
    var_4 = module_0.construct_rule(dict_1)
    var_5 = module_0.get_iptables_version(bool_3, bool_4)
    var_6 = module_0.get_chain_policy(set_0, bool_0, float_0)
    var_7 = module_0.check_present(list_0, dict_1, tuple_1)

def test_case_4():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0, bool_0}
    float_0 = -3394.5084
    str_0 = 'ansible.modules.iptables'
    tuple_0 = (set_0, float_0, str_0, str_0)
    str_1 = 'l8@V'
    list_0 = []
    var_0 = module_0.append_match_flag(bool_0, tuple_0, str_1, list_0)

def test_case_5():
    tuple_0 = ()
    float_0 = -1166.5941
    list_0 = []
    var_0 = module_0.append_match_flag(float_0, list_0, tuple_0, tuple_0)
    int_0 = -2218
    var_1 = module_0.append_jump(float_0, list_0, int_0)

def test_case_6():
    str_0 = 'Y[2N3@|Pgi1*7!8xD.?'
    str_1 = [str_0, str_0]
    str_2 = ')W?|3YZnu4'
    var_0 = dict(flags=str_1, flags_set=str_2)
    str_3 = '--tcp-flags'
    var_1 = []
    var_2 = module_0.append_tcp_flags(var_1, var_0, str_3)

def test_case_7():
    str_0 = '=\\'
    str_1 = 'RST'
    var_0 = dict(flags=str_1, flags_set=str_0)
    str_2 = '--tcp-flags'
    str_3 = 'flags'
    var_1 = var_0[str_3]
    var_2 = []
    var_3 = module_0.append_tcp_flags(var_2, var_0, str_2)
    bool_0 = False
    set_0 = {str_3, str_2, str_2}
    list_0 = [var_1]
    var_4 = module_0.append_tcp_flags(bool_0, set_0, list_0)

def test_case_8():
    var_0 = []
    str_0 = 'match'
    str_1 = '--syn'
    bool_0 = True
    var_1 = module_0.append_match_flag(var_0, str_0, str_1, bool_0)
    var_2 = len(var_0)
    var_3 = []
    str_2 = 'negate'
    str_3 = '--syn'
    var_4 = module_0.append_match_flag(var_3, str_2, str_3, bool_0)
    var_5 = len(var_3)
    var_6 = []
    str_4 = 'fail'
    str_5 = '--syn'
    var_7 = module_0.append_match_flag(var_6, str_4, str_5, bool_0)
    var_8 = len(var_6)