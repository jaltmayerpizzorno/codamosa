# Automatically generated by Pynguin.
import ansible.modules.iptables as module_0

def test_case_0():
    try:
        str_0 = '<z>+'
        bytes_0 = b'\xfdm\xb2v\x0cE\x15\xbbq1\x9b,o\xd3:\xfbu '
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        var_0 = module_0.append_param(bytes_0, str_0, list_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        str_0 = 'match'
        set_0 = {str_0}
        tuple_0 = (str_0, str_0, set_0)
        var_0 = module_0.append_param(bytes_0, tuple_0, tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Ee\x0b*J\x0bH2>Sw1\tXD\\J;'
        bytes_0 = None
        var_0 = module_0.append_tcp_flags(str_0, str_0, bytes_0)
        str_1 = '|zA'
        set_0 = {var_0, var_0, str_1}
        list_0 = [bytes_0, set_0]
        var_1 = module_0.append_csv(bytes_0, set_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1575
        str_0 = ''
        bool_0 = False
        var_0 = module_0.append_tcp_flags(int_0, str_0, bool_0)
        list_0 = None
        set_0 = {list_0, list_0}
        var_1 = module_0.construct_rule(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = None
        str_0 = 'uF_UbiCF?zRf_W'
        int_0 = 2066
        var_0 = module_0.append_match(dict_0, str_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        str_0 = '8!8wwGz93NZ"O8ejj'
        bytes_0 = b'b'
        var_0 = module_0.append_wait(list_0, str_0, bytes_0)
        bool_0 = None
        float_0 = 3.0519302131079207
        dict_0 = {}
        var_1 = module_0.flush_table(bool_0, float_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1298.628949
        set_0 = {float_0, float_0, float_0}
        var_0 = module_0.construct_rule(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = None
        str_0 = None
        float_0 = -367.8659
        var_0 = module_0.append_rule(set_0, str_0, float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '__main__'
        bytes_0 = None
        var_0 = module_0.append_tcp_flags(str_0, str_0, bytes_0)
        float_0 = None
        set_0 = {float_0}
        str_1 = '&'
        var_1 = module_0.check_present(set_0, set_0, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        tuple_0 = ()
        float_0 = -1166.5941
        var_0 = module_0.append_match_flag(str_0, tuple_0, tuple_0, float_0)
        int_0 = -2333
        str_1 = 'xD\\'
        set_0 = {str_0}
        var_1 = module_0.remove_rule(int_0, set_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -2271.69
        str_0 = '--transient'
        set_0 = None
        var_0 = module_0.set_chain_policy(float_0, str_0, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = []
        set_0 = set()
        int_0 = None
        var_0 = module_0.get_chain_policy(list_0, set_0, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 125
        bool_0 = False
        var_0 = module_0.get_iptables_version(int_0, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        tuple_0 = ()
        float_0 = -1166.5941
        var_0 = module_0.append_match_flag(str_0, tuple_0, tuple_0, float_0)
        bool_0 = False
        int_0 = -2333
        var_1 = module_0.append_jump(bool_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '=\\'
        str_1 = ')W?|3YZnu4'
        str_2 = 'RST'
        str_3 = [str_0, str_1, str_2]
        var_0 = dict(flags=str_2, flags_set=str_3)
        str_4 = '--tcp-flags'
        str_5 = 'flags'
        var_1 = var_0[str_5]
        var_2 = []
        var_3 = module_0.append_tcp_flags(var_2, var_0, str_4)
        list_0 = [str_2]
        int_0 = None
        str_6 = '\x0c'
        var_4 = module_0.insert_rule(list_0, int_0, str_6)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '=\\QBEY )Rj6-bn'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bool_0 = True
        bool_1 = False
        str_1 = None
        list_0 = [dict_0, bool_1, str_1, bool_1]
        var_0 = module_0.append_param(bool_1, str_1, list_0, bool_1)
        list_1 = [dict_0, dict_0, bool_0]
        bytes_0 = b'\xcf\x12\xf9c\x8e\xe0o,\x18.\x97\x9b\xadv.\xef'
        list_2 = []
        var_1 = module_0.set_chain_policy(list_1, bytes_0, list_2)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '-I'
        str_1 = 'table'
        list_0 = []
        list_1 = [str_0, str_1, list_0, str_1]
        bool_0 = False
        bytes_0 = b'\x91M\xbc'
        var_0 = module_0.append_param(list_0, list_1, bool_0, bytes_0)
        str_2 = 'chain'
        int_0 = -9
        var_1 = {str_1: str_0, str_2: str_0, str_1: int_0, str_0: str_0}
        var_2 = module_0.push_arguments(str_0, str_0, var_1)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 86411
        list_0 = [int_0]
        str_0 = '<z>+'
        var_0 = module_0.append_match(list_0, str_0, int_0)
        bytes_0 = b'\xfdm\xb2v\x0cE\x15\xbbq1\x9b,o\xd3:\xfbu '
        list_1 = [bytes_0, bytes_0, bytes_0, bytes_0]
        tuple_0 = None
        float_0 = 5560.1
        int_1 = None
        var_1 = module_0.append_csv(int_1, int_1, int_1)
        var_2 = module_0.append_match_flag(tuple_0, str_0, str_0, float_0)
        var_3 = module_0.append_param(bytes_0, str_0, list_1, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '-I'
        str_1 = 'table'
        str_2 = 'chain'
        str_3 = 'rule_num'
        int_0 = 40
        var_0 = {str_1: str_0, str_2: str_0, str_3: int_0, str_0: str_0}
        var_1 = module_0.push_arguments(str_0, str_0, var_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '-I'
        str_1 = 'table'
        str_2 = 'chain'
        float_0 = 626.0
        list_0 = None
        int_0 = -2690
        var_0 = module_0.append_match(float_0, list_0, int_0)
        int_1 = -16
        var_1 = {str_1: str_0, str_2: str_0, str_2: int_1, str_0: str_0}
        var_2 = module_0.push_arguments(str_0, str_0, var_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'iptables'
        str_1 = 'table'
        str_2 = 'chain'
        str_3 = 'ctstate'
        str_4 = 'OUTPUT'
        int_0 = 5
        var_0 = {str_1: str_3, str_2: str_4, str_4: int_0, str_3: str_4}
        var_1 = module_0.push_arguments(str_0, str_1, var_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '/sbin/iptables'
        var_0 = []
        str_1 = 'table'
        str_2 = 'chain'
        str_3 = 'filter'
        str_4 = 'INPUT'
        str_5 = {str_1: str_3, str_2: str_4}
        var_1 = module_0.get_chain_policy(str_0, var_0, str_5)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'atKdd Oo\nC\x0c6s =1+'
        float_0 = -2271.69
        str_1 = '--transient'
        str_2 = '!;j'
        list_0 = [str_2, str_1, float_0]
        str_3 = '-M{I'
        dict_0 = {str_0: str_2}
        var_0 = module_0.append_param(str_2, list_0, str_3, dict_0)
    except BaseException:
        pass