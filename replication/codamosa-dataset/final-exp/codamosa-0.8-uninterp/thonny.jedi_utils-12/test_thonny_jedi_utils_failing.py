# Automatically generated by Pynguin.
import thonny.jedi_utils as module_0

def test_case_0():
    try:
        bool_0 = False
        float_0 = 2.0
        var_0 = module_0.get_statement_of_position(bool_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 3388.407887
        var_0 = module_0.parse_source(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'KP_Up'
        int_0 = 97
        var_0 = module_0.get_script_completions(str_0, int_0, int_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'wB'
        int_0 = None
        str_1 = 'R4mYvGqP\x0cVP\x0c^8{>NFb'
        set_0 = set()
        float_0 = 1.7
        tuple_0 = ()
        list_0 = [str_0, tuple_0, set_0, int_0]
        thonny_completion_0 = module_0.ThonnyCompletion(str_1, str_0, set_0, float_0, tuple_0, list_0)
        var_0 = module_0.get_script_completions(str_0, int_0, int_0, str_0, thonny_completion_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '!BI%Hzc[\tM>\r.;y47X9'
        int_0 = 657
        var_0 = module_0.get_definitions(str_0, int_0, int_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '#b5bd68'
        str_1 = '|MM;+f,y8Ijc{\r4'
        int_0 = None
        var_0 = module_0.get_script_completions(str_1, int_0, int_0, str_0)
        str_2 = '<Up>'
        list_0 = []
        str_3 = 'â‘£'
        var_1 = module_0.get_interpreter_completions(str_2, list_0)
        int_1 = 2926
        str_4 = 'vn\n=w~N\\i7!`-]#oYA\n'
        var_2 = module_0.get_definitions(str_4, int_1, int_1, str_3)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'name'
        var_0 = []
        var_1 = module_0.get_interpreter_completions(str_0, var_0)
        var_2 = len(var_1)
        int_0 = 0
        str_1 = 'None'
        var_3 = []
        var_4 = module_0.get_interpreter_completions(str_1, var_3)
        var_5 = len(var_4)
        str_2 = 'type('
        var_6 = []
        var_7 = module_0.get_interpreter_completions(str_2, var_6)
        str_3 = 'type(1'
        var_8 = []
        var_9 = module_0.get_interpreter_completions(str_3, var_8)
        var_10 = len(var_9)
        var_11 = var_9[int_0]
    except BaseException:
        pass