# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        str_0 = '>C`'
        base_fact_collector_0 = module_0.BaseFactCollector()
        dict_0 = {str_0: base_fact_collector_0}
        var_1 = module_0.collector_classes_from_gather_subset(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        list_0 = [var_0]
        var_1 = module_0.build_fact_id_to_collector_map(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        bytes_0 = b'\xff\xe1\xdd\t6\xea\x03\xf6\x17U\xcd'
        var_0 = module_0.collector_classes_from_gather_subset(set_0, bytes_0, bytes_0)
        list_0 = [set_0, var_0, bytes_0, var_0]
        var_1 = module_0.find_unresolved_requires(bytes_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xfdY\xca\r'
        var_0 = module_0.resolve_requires(bytes_0, bytes_0)
        str_0 = '<P&aMMX83AnZ/bY\nB$-9'
        dict_0 = {str_0: var_0}
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_1 = module_0.find_unresolved_requires(dict_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 2934.0
        set_0 = {float_0, float_0}
        var_0 = module_0.resolve_requires(float_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'lpA+fq(3'
        set_0 = {str_0, str_0, str_0}
        bool_0 = True
        var_0 = module_0.resolve_requires(set_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        str_0 = 'bYb\t9'
        var_0 = module_0.get_collector_names(list_0, str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -827
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace(int_0)
        str_0 = ''
        str_1 = 'i\t2q&6DJR\x0bPu\nF!~q|h&'
        base_fact_collector_1 = None
        str_2 = [str_0, str_1]
        var_1 = module_0.get_collector_names(str_2, str_2)
        var_2 = set(str_1)
        float_0 = None
        var_3 = module_0.collector_classes_from_gather_subset(float_0, base_fact_collector_1)
        var_4 = set(str_1)
        var_5 = module_0.get_collector_names(var_2, var_0, var_4, var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 79
        str_0 = None
        tuple_0 = (int_0, str_0)
        set_0 = {tuple_0, str_0}
        var_0 = module_0.resolve_requires(tuple_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        set_0 = None
        list_0 = [base_fact_collector_0]
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(*list_0)
        var_0 = module_0.collector_classes_from_gather_subset(list_0, set_0, unresolved_fact_dep_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        set_0 = {bool_0}
        str_0 = "8%@J';%\rEk\\"
        var_0 = module_0.build_dep_data(set_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = '}\\b)lS6H[maY'
        str_1 = 'ua?;\tK'
        dict_0 = {str_0: str_1, str_1: str_1, str_0: str_0}
        var_0 = module_0.find_unresolved_requires(str_1, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        list_0 = []
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
        str_0 = 'M'
        dict_0 = {str_0: str_0, str_0: str_0}
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_1 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        list_0 = []
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
        str_0 = 'M<'
        dict_0 = {str_0: str_0, str_0: str_0}
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_1 = module_0.tsort(dict_0)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_1 = 'c\\b)lS6Z[)aY'
        base_fact_collector_1 = module_0.BaseFactCollector()
        collector_not_found_error_1 = module_0.CollectorNotFoundError()
        list_1 = [str_0, var_1, dict_0, str_0]
        tuple_0 = (list_1,)
        var_2 = base_fact_collector_1.collect(collector_not_found_error_1, tuple_0)
        tuple_1 = ()
        var_3 = module_0.select_collector_classes(tuple_1, collector_not_found_error_0)
        set_0 = None
        bytes_0 = b'\xff\xe1\xdd\t6\xea\x03\xb8\x17U\xcd'
        var_4 = base_fact_collector_1.collect_with_namespace()
        var_5 = module_0.collector_classes_from_gather_subset(set_0, bytes_0, bytes_0)
        var_6 = base_fact_collector_1.collect()
        cycle_found_in_fact_deps_1 = module_0.CycleFoundInFactDeps(*list_1)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(*list_1)
        bytes_1 = b'\x02\x9fd)yd\xe1C\x9c\x00'
        tuple_2 = ()
        var_7 = module_0.collector_classes_from_gather_subset(set_0, str_1, list_1, bytes_1, str_1, tuple_2)
    except BaseException:
        pass

def test_case_14():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_0 = [unresolved_fact_dep_0, base_fact_collector_0]
        str_0 = '?L7f\x0ce}\x0c{LB1r'
        float_0 = 512.0
        tuple_0 = (str_0, base_fact_collector_0, list_0, float_0)
        tuple_1 = (base_fact_collector_0, list_0, tuple_0)
        var_0 = module_0.build_fact_id_to_collector_map(tuple_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 330
        dict_0 = {}
        bool_0 = False
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        float_0 = 0.0001
        var_0 = module_0.collector_classes_from_gather_subset(int_0, dict_0, bool_0, unresolved_fact_dep_0, float_0, int_0)
    except BaseException:
        pass