# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'min'
    dict_0 = {str_0: str_0, str_0: str_0}
    base_fact_collector_0 = module_0.BaseFactCollector(dict_0)
    var_0 = base_fact_collector_0.collect_with_namespace()

def test_case_2():
    var_0 = module_0.collector_classes_from_gather_subset()

def test_case_3():
    set_0 = None
    bytes_0 = b'\xff\xe1\xdd\t6\xea\x03\xf6\x17U\xcd'
    var_0 = module_0.collector_classes_from_gather_subset(set_0, bytes_0, bytes_0)

def test_case_4():
    bytes_0 = b'\xfdY\xca\r'
    var_0 = module_0.resolve_requires(bytes_0, bytes_0)
    var_1 = module_0.collector_classes_from_gather_subset()
    collector_not_found_error_0 = module_0.CollectorNotFoundError()

def test_case_5():
    str_0 = ''
    dict_0 = {str_0: str_0}
    var_0 = module_0.tsort(dict_0)

def test_case_6():
    str_0 = 'i\t2q&6DJR\x0bPu\nF!~q|h&'
    var_0 = set(str_0)
    var_1 = module_0.get_collector_names(var_0, var_0, var_0)
    dict_0 = {str_0: var_1}
    var_2 = module_0.tsort(dict_0)

def test_case_7():
    cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
    set_0 = {cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0}
    base_fact_collector_0 = module_0.BaseFactCollector()
    var_0 = base_fact_collector_0.collect()
    base_fact_collector_1 = module_0.BaseFactCollector()
    var_1 = module_0.get_collector_names(set_0)

def test_case_8():
    str_0 = 'i\t2q&6DJR\x0bPu\nF!~q|h&'
    var_0 = set(str_0)
    var_1 = module_0.get_collector_names(var_0, var_0, var_0)

def test_case_9():
    float_0 = 1.5
    bytes_0 = b'k\xd0\x86\x86\xa1\xda;B\xcd\xa1'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    list_0 = [dict_0, dict_0, bytes_0, dict_0]
    base_fact_collector_0 = module_0.BaseFactCollector(dict_0, list_0)
    var_0 = base_fact_collector_0.collect_with_namespace(float_0)

def test_case_10():
    str_0 = ''
    str_1 = 'i\t2q&6DJR\x0bPu\nF!~q|h&'
    base_fact_collector_0 = None
    str_2 = [str_0, str_1]
    var_0 = module_0.get_collector_names(str_2, str_2)
    var_1 = set(str_1)
    float_0 = None
    var_2 = module_0.collector_classes_from_gather_subset(float_0, base_fact_collector_0)
    var_3 = set(str_1)
    var_4 = module_0.get_collector_names(var_1, var_3, var_3)
    str_3 = [str_0, str_1]
    str_4 = 'Iiq+WN#\tM8'
    dict_0 = {str_4: str_3, str_1: var_1}
    var_5 = module_0.tsort(dict_0)

def test_case_11():
    str_0 = 'KH!'
    dict_0 = None
    str_1 = '8KWj((t)5'
    dict_1 = {str_0: dict_0, str_0: str_0, str_1: str_1, str_1: str_1}
    var_0 = module_0.select_collector_classes(dict_1, dict_1)

def test_case_12():
    var_0 = module_0.collector_classes_from_gather_subset()
    str_0 = 'M<'
    dict_0 = {str_0: str_0}
    var_1 = module_0.tsort(dict_0)
    bytes_0 = b'T\x96@\x1c'
    float_0 = 1743.014306
    base_fact_collector_0 = module_0.BaseFactCollector(bytes_0, float_0)
    dict_1 = {base_fact_collector_0: var_1, base_fact_collector_0: base_fact_collector_0}
    unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
    base_fact_collector_1 = module_0.BaseFactCollector()
    collector_not_found_error_0 = module_0.CollectorNotFoundError()
    var_2 = base_fact_collector_1.collect_with_namespace()
    base_fact_collector_2 = module_0.BaseFactCollector()
    collector_not_found_error_1 = module_0.CollectorNotFoundError()
    list_0 = [collector_not_found_error_1, base_fact_collector_2]
    cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
    list_1 = [str_0, var_1, dict_0, str_0]
    tuple_0 = (list_1,)
    var_3 = base_fact_collector_2.collect(collector_not_found_error_1, tuple_0)
    base_fact_collector_3 = module_0.BaseFactCollector(dict_0)
    var_4 = module_0.collector_classes_from_gather_subset(dict_1)