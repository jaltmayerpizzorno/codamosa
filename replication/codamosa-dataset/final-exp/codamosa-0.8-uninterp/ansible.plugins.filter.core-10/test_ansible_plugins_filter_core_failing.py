# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0

def test_case_0():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = module_0.to_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_1():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.to_nice_yaml(filter_module_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'python'
        dict_0 = {}
        var_0 = module_0.regex_search(str_0, str_0, **dict_0)
        str_1 = 'XhN{0ddS@'
        set_0 = {str_0, str_1, str_1}
        var_1 = module_0.to_nice_json(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'python'
        set_0 = {str_0, str_0, str_0}
        var_0 = module_0.to_datetime(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        dict_0 = {}
        var_0 = module_0.strftime(list_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -3347.4828
        str_0 = 'c?PxNa\t9W\\0Ue\nFkrixC'
        var_0 = module_0.strftime(str_0)
        str_1 = "all hosts are done, so returning None'u for all hosts"
        list_0 = [str_1, float_0, str_1]
        var_1 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '/bin/b*'
        bytes_0 = b'YH\xda'
        list_0 = [bytes_0]
        var_0 = module_0.mandatory(bytes_0, list_0)
        var_1 = module_0.fileglob(str_0)
        str_1 = 'fF)+kZ,4LkH#2'
        list_1 = [str_0, str_1]
        str_2 = 't:+W~\r'
        str_3 = '2hL\n*EGqpi}?zwI'
        tuple_0 = None
        var_2 = module_0.quote(tuple_0)
        filter_module_0 = module_0.FilterModule()
        var_3 = filter_module_0.filters()
        var_4 = module_0.from_yaml(tuple_0)
        str_4 = 'R^G92m^:('
        list_2 = [str_1]
        var_5 = module_0.from_yaml(list_2)
        dict_0 = {str_2: list_1, str_3: str_3, str_2: str_2, str_4: str_2}
        var_6 = module_0.to_yaml(str_1, *list_1, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1574
        bytes_0 = b"\xb6\x93W\xcdH'N)Q\x9a"
        tuple_0 = None
        list_0 = [bytes_0, bytes_0, tuple_0]
        var_0 = module_0.regex_findall(int_0, bytes_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        str_0 = 'posix_extended'
        var_0 = module_0.regex_escape(list_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = module_0.regex_escape(filter_module_0, filter_module_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        var_0 = module_0.from_yaml(str_0)
        bool_0 = False
        str_1 = '"V[V"kD\x0c3tj{l*X'
        str_2 = 'NEUz#i~'
        var_1 = module_0.regex_findall(bool_0, str_1, str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        filter_module_0 = None
        str_0 = '--reference'
        var_0 = module_0.regex_search(filter_module_0, str_0)
        set_0 = set()
        int_0 = 2174
        str_1 = "t'-qn`n"
        str_2 = 'ghH[!Qef`8Y'
        str_3 = 'lR \x0co@'
        var_1 = module_0.rand(set_0, int_0, str_1, str_2, str_3)
    except BaseException:
        pass

def test_case_12():
    try:
        set_0 = None
        var_0 = module_0.rand(set_0, set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = None
        int_0 = 585
        var_0 = module_0.get_hash(dict_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -454
        bytes_0 = b'>\xac[\x19K\xeb\xd4"O\x7f\xd9\x0f'
        list_0 = [int_0, bytes_0, int_0, int_0]
        var_0 = module_0.ternary(int_0, bytes_0, list_0)
        float_0 = 2474.92
        str_0 = '--help'
        var_1 = module_0.to_uuid(str_0, float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        dict_0 = {str_0: str_0}
        complex_0 = None
        var_0 = module_0.to_uuid(complex_0)
        filter_module_0 = module_0.FilterModule(**dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -4116
        var_0 = module_0.comment(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = None
        bool_0 = True
        bytes_0 = b'L\xdc[\x05\x04\xc4\x85g\x98\x90`Z\xcd{i\xcf#T'
        var_0 = module_0.extract(float_0, bool_0, bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        list_0 = None
        str_0 = 'surrogateescape'
        var_0 = module_0.regex_findall(list_0, str_0)
        set_0 = {list_0, list_0, list_0}
        var_1 = module_0.to_bool(list_0)
        float_0 = -4465.3
        var_2 = module_0.do_groupby(set_0, float_0, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = module_0.combine()
        float_0 = 870.08
        var_1 = module_0.b64encode(float_0)
        str_0 = 'b|HY@E.XV'
        list_0 = [var_0, str_0, str_0]
        var_2 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        tuple_0 = ()
        list_0 = [tuple_0]
        var_0 = module_0.flatten(list_0)
        int_0 = -464
        dict_0 = {int_0: int_0}
        list_1 = []
        var_1 = module_0.subelements(dict_0, list_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'bN|HY@E.KwV'
        list_0 = [str_0, str_0, str_0, str_0, str_0]
        var_0 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '/bin/b*'
        var_0 = module_0.fileglob(str_0)
        str_1 = '\\w+'
        bool_0 = True
        var_1 = module_0.subelements(str_1, bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        var_0 = module_0.combine()
        str_0 = '--help'
        var_1 = module_0.dict_to_list_of_dict_key_value_elements(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 103
        dict_0 = {}
        list_0 = [int_0, int_0, dict_0, dict_0]
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        filter_module_0 = module_0.FilterModule()
        float_0 = 133.832194
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(filter_module_0, float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = None
        var_0 = module_0.path_join(bytes_0)
    except BaseException:
        pass

def test_case_27():
    try:
        filter_module_0 = None
        str_0 = '--refeyene'
        var_0 = module_0.regex_search(filter_module_0, str_0)
        int_0 = -1806
        tuple_0 = (int_0, int_0, filter_module_0)
        str_1 = 'B2b'
        var_1 = module_0.rand(tuple_0, str_1, filter_module_0)
        str_2 = 'posix_extended'
        var_2 = module_0.get_encrypted_password(str_0, str_2)
    except BaseException:
        pass

def test_case_28():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        list_0 = []
        var_1 = module_0.path_join(list_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = b'\x0f4\xb8'
        set_0 = {bytes_0, bytes_0}
        var_0 = module_0.get_encrypted_password(set_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'posix_basic'
        str_1 = 'OtO9w3OL(a,5ZopDL\r'
        var_0 = module_0.randomize_list(str_0, str_1)
        str_2 = None
        dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2, str_2: str_2}
        str_3 = 'hC'
        var_1 = module_0.subelements(dict_0, str_3)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = '9RZ<AM?u'
        var_0 = module_0.subelements(dict_0, str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = -454
        complex_0 = None
        float_0 = 2474.92
        dict_0 = {int_0: complex_0, float_0: int_0}
        str_0 = '--help'
        dict_1 = {str_0: str_0}
        var_0 = module_0.subelements(dict_0, dict_1)
    except BaseException:
        pass

def test_case_33():
    try:
        var_0 = module_0.combine()
        str_0 = "all hosts are done, so returning None'u for all hosts"
        list_0 = [var_0, var_0, str_0, str_0, str_0, str_0]
        var_1 = module_0.subelements(list_0, list_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'bN|HY@E.KV'
        list_0 = [str_0, str_0, str_0]
        bytes_0 = b";GF{\rt\xa2\xba^\x19>toF\x92(U\x07'\xc1"
        var_0 = module_0.regex_search(str_0, bytes_0, *list_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '--reference'
        int_0 = 1968
        dict_0 = {str_0: str_0, str_0: int_0}
        var_0 = module_0.combine(**dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = ''
        str_1 = 'Rm+'
        var_0 = module_0.mandatory(str_1)
        var_1 = module_0.regex_escape(str_0)
        float_0 = 746.0
        list_0 = []
        bool_0 = True
        var_2 = module_0.rand(float_0, list_0, bool_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = -464
        dict_0 = {int_0: int_0}
        list_0 = []
        var_0 = module_0.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_38():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '9InS0#KUdW(r-21+s'
        str_1 = '?'
        bool_0 = False
        int_0 = -3574
        var_0 = module_0.rand(str_1, bool_0, int_0)
        str_2 = 'Yc]\\\tL~b\x0b '
        var_1 = filter_module_0.filters()
        var_2 = filter_module_0.filters()
        var_3 = filter_module_0.filters()
        dict_0 = None
        dict_1 = {str_0: filter_module_0, str_2: dict_0, str_0: str_0}
        tuple_0 = (dict_1, dict_1)
        bool_1 = False
        var_4 = module_0.flatten(tuple_0, bool_1, dict_0)
        list_0 = []
        var_5 = module_0.subelements(list_0, dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'N\x0bgE`@E01)\x0bF\x0bUF9'
        str_1 = 'l9X{ p_'
        str_2 = 'UN'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1, str_2: str_0}
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(dict_0, filter_module_0)
        var_1 = module_0.regex_escape(dict_0)
        set_0 = set()
        list_0 = [set_0]
        bool_0 = False
        var_2 = module_0.randomize_list(bool_0)
        list_1 = [str_2]
        var_3 = module_0.to_nice_yaml(str_1, list_1, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = '#'
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        bytes_0 = b'\xa95\x04/\x00\xa5'
        set_0 = {bytes_0}
        var_1 = module_0.to_bool(set_0)
        bool_0 = True
        int_0 = 1
        var_2 = module_0.to_bool(int_0)
        var_3 = module_0.subelements(str_0, bool_0)
    except BaseException:
        pass

def test_case_41():
    try:
        dict_0 = {}
        filter_module_0 = None
        str_0 = '--reference'
        var_0 = module_0.regex_search(filter_module_0, str_0)
        list_0 = [str_0, str_0, var_0]
        dict_1 = {filter_module_0: str_0, str_0: list_0}
        int_0 = 1968
        var_1 = module_0.flatten(dict_1, int_0)
        var_2 = module_0.rand(filter_module_0, int_0)
        bytes_0 = b'jK\xcb\xe8Q\x19^\x94b\x08\x0bK\xd4\xd4\xd0/\xc9'
        var_3 = module_0.subelements(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_42():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_0 = 'bN|HY@E.KwV'
        str_1 = "H:TAm'%A^"
        var_1 = module_0.from_yaml_all(str_1)
        list_0 = [str_0, str_0, str_0, str_0, str_0]
        var_2 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_43():
    try:
        filter_module_0 = None
        str_0 = 'd5\nF.!\tG'
        float_0 = 49.690627729282916
        int_0 = -99
        var_0 = module_0.ternary(str_0, float_0, int_0)
        str_1 = 'ansible_forks'
        var_1 = module_0.path_join(str_1)
        str_2 = '--refeence'
        var_2 = module_0.regex_search(filter_module_0, str_2)
        list_0 = []
        str_3 = '`_`h@;IGJ'
        str_4 = ']l)X"yAp^%'
        str_5 = "Uv&kiu'1<z6:]CB"
        dict_0 = {str_4: str_3, str_5: str_1, str_3: str_4}
        var_3 = module_0.rand(list_0, str_3, filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_44():
    try:
        filter_module_0 = module_0.FilterModule()
        float_0 = 1595.3
        var_0 = filter_module_0.filters()
        var_1 = filter_module_0.filters()
        var_2 = module_0.to_uuid(float_0)
        str_0 = '\rx!~Ve?Obi?'
        var_3 = module_0.strftime(str_0)
        var_4 = filter_module_0.filters()
        bool_0 = False
        list_0 = None
        var_5 = module_0.to_uuid(bool_0, list_0)
    except BaseException:
        pass

def test_case_45():
    try:
        var_0 = module_0.combine()
        str_0 = 'bN|HY@E.KwV'
        list_0 = [var_0, str_0, str_0]
        var_1 = module_0.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_46():
    try:
        int_0 = -4125
        list_0 = [int_0]
        var_0 = module_0.combine(*list_0)
        var_1 = module_0.comment(int_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'rwQF6K'
        list_0 = []
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
        dict_0 = {str_0: str_0, str_0: str_0}
        var_1 = module_0.comment(str_0, **dict_0)
        list_1 = []
        str_1 = ':pn\\dkbraMw'
        var_2 = module_0.mandatory(list_1, str_1)
        str_2 = "5y\rc'Q"
        var_3 = module_0.regex_replace(str_2)
        str_3 = '4e.\\1bk9j",'
        var_4 = module_0.to_yaml(str_3, *list_1, **dict_0)
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = -4114
        var_0 = module_0.mandatory(int_0)
        bytes_0 = None
        bool_0 = None
        str_0 = ':veM^rRGX8_RT(5'
        var_1 = module_0.extract(int_0, bytes_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = 'KUK!WMQb'
        var_0 = module_0.to_bool(str_0)
        str_1 = 'm- otN<>:_]"\n'
        str_2 = None
        dict_0 = {str_1: var_0, str_2: var_0}
        tuple_0 = (dict_0,)
        var_1 = module_0.dict_to_list_of_dict_key_value_elements(tuple_0)
    except BaseException:
        pass

def test_case_50():
    try:
        int_0 = 256
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        bool_0 = True
        var_1 = module_0.to_bool(bool_0)
        list_0 = [int_0, int_0, int_0]
        filter_module_1 = module_0.FilterModule(*list_0)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = 'foobar'
        str_1 = 'a'
        var_0 = module_0.regex_replace(str_0, str_1, str_0)
        bool_0 = True
        var_1 = module_0.regex_replace(str_0, str_1, str_1, bool_0)
        var_2 = module_0.regex_replace(str_0, str_1, str_1, bool_0)
        bool_1 = True
        var_3 = module_0.regex_replace(str_1, str_1, str_0, bool_1)
        float_0 = -0.5598202758942169
        list_0 = [var_2]
        var_4 = module_0.to_nice_yaml(float_0, *list_0)
    except BaseException:
        pass

def test_case_52():
    try:
        dict_0 = {}
        filter_module_0 = None
        str_0 = '--reference'
        var_0 = module_0.regex_search(filter_module_0, str_0)
        list_0 = [str_0, str_0, var_0]
        tuple_0 = (dict_0,)
        str_1 = '|_d4[l\t;J{owkE/H+Yw'
        bytes_0 = b'8\x115E\xa4\x94>\xc8P\xe1'
        var_1 = module_0.regex_findall(tuple_0, str_1, bytes_0, list_0)
    except BaseException:
        pass

def test_case_53():
    try:
        float_0 = -5763.632996
        str_0 = 'posix_basic'
        list_0 = []
        var_0 = module_0.mandatory(list_0)
        float_1 = 1417.83
        var_1 = module_0.to_nice_json(float_1)
        var_2 = module_0.combine()
        list_1 = [float_0, str_0, float_0]
        filter_module_0 = module_0.FilterModule()
        float_2 = 920.7444
        int_0 = 4943
        var_3 = module_0.regex_escape(int_0, str_0)
        set_0 = {float_2}
        dict_0 = {}
        var_4 = module_0.to_yaml(set_0, *list_1, **dict_0)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = 'foo bar baz'
        str_1 = 'b.*'
        str_2 = '\\g<0>'
        bool_0 = True
        str_3 = '\\1'
        str_4 = [str_2, str_3]
        var_0 = module_0.regex_search(str_0, str_1, *str_4)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = '\\g<0>'
        bool_0 = True
        str_1 = '\\1'
        str_2 = [str_0, str_1]
        var_0 = module_0.regex_search(str_2, str_0, *str_2)
    except BaseException:
        pass

def test_case_56():
    try:
        list_0 = []
        var_0 = module_0.b64decode(list_0)
        str_0 = 'ccL('
        int_0 = -886
        tuple_0 = None
        var_1 = module_0.extract(int_0, tuple_0, str_0, list_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = 'foo'
        str_1 = 'bar'
        str_2 = 'baz'
        str_3 = 'qux'
        str_4 = [str_3]
        str_5 = [str_2, str_4]
        str_6 = [str_0, str_1, str_5]
        var_0 = module_0.flatten(str_6)
        str_7 = [str_3]
        str_8 = [str_2, str_7]
        str_9 = [str_0, str_1, str_8]
        int_0 = 1
        var_1 = module_0.flatten(str_9, int_0)
        bool_0 = False
        var_2 = module_0.comment(bool_0)
    except BaseException:
        pass