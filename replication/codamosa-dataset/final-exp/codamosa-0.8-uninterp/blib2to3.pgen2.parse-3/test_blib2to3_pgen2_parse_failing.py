# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = -5918
        str_0 = 'UqG:)WcSYl'
        parser_0 = module_1.Parser(grammar_0)
        list_0 = []
        tuple_0 = (int_0, str_0, parser_0, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 713
        str_0 = 'k~V\x0c'
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        grammar_0 = None
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = None
        str_0 = '7I~pR(mfY\x0c:YDb'
        dict_0 = {str_0: int_0, str_0: str_0}
        int_1 = -2177
        str_1 = "[^'\\\\]*(?:\\\\.[^'\\\\]*)*'"
        tuple_0 = None
        tuple_1 = (str_1, tuple_0)
        grammar_0 = module_0.Grammar()
        str_2 = '`_):2(|J3c'
        list_0 = [grammar_0, grammar_0, str_2, grammar_0]
        parser_0 = module_1.Parser(grammar_0, list_0)
        parser_0.shift(int_0, dict_0, int_1, tuple_1)
    except BaseException:
        pass

def test_case_5():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_0 = None
        list_0 = None
        list_1 = [list_0, list_0, list_0]
        int_1 = 1548
        int_2 = 499
        dict_0 = {int_1: int_2}
        tuple_0 = (list_1, dict_0)
        str_0 = 'd`4n9w@vorhuMay\r'
        int_3 = -5875
        tuple_1 = (int_0, int_3)
        tuple_2 = (str_0, tuple_1)
        parser_0.push(int_0, tuple_0, int_1, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 1574
        str_0 = ')Ozk2e"4@'
        str_1 = '(19ceiM3W\nN53fOyK8R'
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
        list_0 = None
        tuple_0 = (int_0, str_0, dict_0, list_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Kg.oi]"l(u<f-9sq?g'
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_0 = 1
        bool_0 = parser_0.addtoken(int_0, str_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        int_0 = 1
        str_0 = None
        bool_0 = parser_0.addtoken(int_0, str_0, int_0)
    except BaseException:
        pass