# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        bytes_0 = b'B\xc8U\xd7W\x8b\xf6"\xa3\x7f\xb7'
        str_0 = '[\x0b +,qI0zWjspUirw)v'
        dict_0 = {str_0: str_0}
        alpha_0 = module_0._Alpha(dict_0)
        var_0 = alpha_0.__le__(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '3"gJUT9eg>Q'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__lt__(str_0)
        loose_version_0 = module_1.LooseVersion()
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_2():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        str_0 = '^^{x$&QE,9b<\rnnKROPO'
        alpha_0 = module_0._Alpha(str_0)
        var_1 = alpha_0.__gt__(str_0)
        str_1 = 'V%Ksgi`>",EC57w5'
        numeric_0 = module_0._Numeric(str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xc2\x8aZ\xc9\x18=O\xfd^z\xe1\r\xa5'
        alpha_0 = module_0._Alpha(bytes_0)
        var_0 = alpha_0.__ne__(bytes_0)
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        bool_1 = False
        var_1 = numeric_0.__lt__(bool_1)
        tuple_0 = None
        var_2 = alpha_0.__ge__(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'6-\x06w\xae\xeep\x9b\xd5;\xdc'
        numeric_0 = module_0._Numeric(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = None
        int_1 = 2848
        numeric_0 = module_0._Numeric(int_1)
        var_0 = numeric_0.__eq__(int_0)
        list_0 = None
        var_1 = numeric_0.__ge__(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = None
        int_1 = 2848
        numeric_0 = module_0._Numeric(int_1)
        var_0 = numeric_0.__eq__(int_0)
        float_0 = 124.0
        var_1 = numeric_0.__ne__(float_0)
        list_0 = None
        var_2 = numeric_0.__ge__(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'V;]L*G>aINnTm1#~j>h*'
        semantic_version_0 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        numeric_0 = None
        semantic_version_0 = module_0.SemanticVersion(numeric_0)
        bytes_0 = b'\xc2\x8aZ\xc9\x18=O\xfd^z\xe1\r\xa5'
        bytes_1 = b'\xe4'
        alpha_0 = module_0._Alpha(bytes_1)
        var_0 = alpha_0.__ne__(bytes_0)
        str_0 = 'g|r"T=14i9)Kip'
        semantic_version_1 = module_0.SemanticVersion()
        var_1 = semantic_version_1.__ne__(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        str_0 = 'h"!"0"\x0b9g\n8pCs'
        var_0 = semantic_version_0.__gt__(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xc8jVK\x98p\xce\x01'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ge__(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        semantic_version_0 = module_0.SemanticVersion(bool_0)
        bytes_0 = b''
        semantic_version_1 = module_0.SemanticVersion(bytes_0)
        var_0 = semantic_version_1.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        set_0 = {bool_0}
        int_0 = -1391
        numeric_0 = module_0._Numeric(int_0)
        var_0 = numeric_0.__le__(set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        float_0 = -4048.7285
        numeric_0 = module_0._Numeric(float_0)
        var_1 = numeric_0.__le__(var_0)
        int_0 = 842
        var_2 = numeric_0.__eq__(int_0)
        loose_version_0 = module_1.LooseVersion()
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_14():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        int_0 = 374
        float_0 = 1000.0
        str_0 = '3"gJUT9eg>Q'
        var_0 = semantic_version_0.__repr__()
        alpha_0 = module_0._Alpha(str_0)
        str_1 = '$\n6\x0cRY><ma\nTkUcR'
        var_1 = alpha_0.__lt__(str_1)
        float_1 = -4048.7285
        numeric_0 = module_0._Numeric(float_1)
        int_1 = 856
        var_2 = alpha_0.__ne__(int_1)
        var_3 = alpha_0.__le__(str_1)
        var_4 = numeric_0.__eq__(float_0)
        var_5 = semantic_version_0.from_loose_version(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        var_1 = semantic_version_0.__repr__()
        str_0 = '|q_\x0b'
        float_0 = -4048.7285
        numeric_0 = module_0._Numeric(float_0)
        var_2 = numeric_0.__le__(var_0)
        float_1 = -2091.0
        var_3 = numeric_0.__eq__(float_1)
        var_4 = numeric_0.__eq__(numeric_0)
        var_5 = numeric_0.__repr__()
        loose_version_0 = module_1.LooseVersion(str_0)
        var_6 = numeric_0.__eq__(loose_version_0)
        var_7 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_16():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '3"gJUT9eg>Q'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__lt__(str_0)
        var_1 = alpha_0.__le__(alpha_0)
        loose_version_0 = module_1.LooseVersion()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_17():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        str_0 = '3"gJUT9eg>Q'
        var_1 = semantic_version_0.__repr__()
        alpha_0 = module_0._Alpha(str_0)
        str_1 = '$\n6\x0cRY><ma\nTkUcR'
        var_2 = alpha_0.__lt__(str_1)
        str_2 = 'nsU%^{A8n|gdhgJyz'
        var_3 = alpha_0.__le__(str_2)
        bool_0 = False
        var_4 = semantic_version_0.from_loose_version(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'MbnQV~1Zy'
        alpha_0 = module_0._Alpha(str_0)
        bytes_0 = b'\xf3\x01Bh)\xb8@\x7f\xa2* \x9e\x89\xf0\xf0\xe6'
        str_1 = "f\x0cE#q{CG'|"
        tuple_0 = (bytes_0,)
        int_0 = -552
        tuple_1 = (bytes_0, str_1, tuple_0, int_0)
        alpha_1 = module_0._Alpha(tuple_1)
        var_0 = alpha_1.__ge__(alpha_0)
    except BaseException:
        pass

def test_case_19():
    try:
        set_0 = None
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        bytes_0 = b'8\x15\xa9&\x85r1\xd4fo\xb8\x8d\xfe\xe7\xf4#\xdf['
        alpha_0 = module_0._Alpha(bytes_0)
        var_0 = numeric_0.__ge__(alpha_0)
        alpha_1 = module_0._Alpha(numeric_0)
        var_1 = alpha_1.__lt__(set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        int_0 = 365
        str_0 = '3"gJUT9eg>Q'
        alpha_0 = module_0._Alpha(str_0)
        str_1 = '$\n6\x0cRY><ma\nTkUcR'
        var_1 = alpha_0.__lt__(str_1)
        float_0 = -4048.7285
        numeric_0 = module_0._Numeric(float_0)
        var_2 = numeric_0.__le__(var_0)
        var_3 = alpha_0.__ne__(int_0)
        int_1 = None
        var_4 = alpha_0.__le__(numeric_0)
        var_5 = numeric_0.__eq__(int_1)
        loose_version_0 = module_1.LooseVersion()
        var_6 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_21():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        loose_version_0 = module_1.LooseVersion()
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_22():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        var_1 = semantic_version_0.__repr__()
        str_0 = '2rc&cV\rnO6u}N3I6oF7'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        str_0 = 'M#h>\x0c~ugka-voK'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_1 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_24():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '/\tB\r"cJ'
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        alpha_0 = module_0._Alpha(str_0)
        var_1 = alpha_0.__le__(alpha_0)
        str_1 = 'M#>\x0c~ugka-voK'
        loose_version_0 = module_1.LooseVersion(str_1)
        var_2 = alpha_0.__repr__()
        var_3 = loose_version_0.__gt__(alpha_0)
        var_4 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass