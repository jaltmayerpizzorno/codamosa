# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0

def test_case_0():
    try:
        bytes_0 = b'#~\xd7P[w\n\xb1|\xcab$rz\xe2'
        int_0 = -735
        list_token_0 = module_0.ListToken(bytes_0, int_0, int_0)
        set_0 = set()
        list_0 = [set_0, set_0, set_0, set_0]
        list_1 = []
        int_1 = -30
        str_0 = 'exclusiveMaximum'
        token_0 = module_0.Token(list_1, int_1, int_1, str_0)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 3510.96883
        list_0 = [float_0]
        int_0 = 151
        token_0 = module_0.Token(float_0, int_0, int_0)
        token_1 = token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        list_1 = []
        int_0 = 1027
        token_0 = module_0.Token(list_0, int_0, int_0)
        token_1 = token_0.lookup(list_1)
        str_0 = token_1.__repr__()
        str_1 = '&zRK_6Q\n`'
        int_1 = 5
        scalar_token_0 = module_0.ScalarToken(int_1, int_1, int_1)
        any_0 = scalar_token_0.__hash__()
        token_2 = module_0.Token(str_1, int_1, int_1)
        list_2 = []
        token_3 = token_2.lookup(list_2)
        bool_0 = token_2.__eq__(list_0)
        bool_1 = token_3.__eq__(scalar_token_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        list_0 = [dict_0]
        list_1 = [dict_0, dict_0, dict_0, dict_0]
        dict_token_0 = module_0.DictToken(*list_1, **dict_0)
        token_0 = dict_token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0]
        list_1 = [dict_0, dict_0, dict_0, dict_0]
        dict_token_0 = module_0.DictToken(*list_1, **dict_0)
        token_0 = dict_token_0.lookup_key(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'x\rL\\)y"lyh~2uCH'
        dict_0 = {str_0: str_0, str_0: str_0}
        int_0 = 0
        scalar_token_0 = module_0.ScalarToken(dict_0, int_0, int_0)
        any_0 = scalar_token_0.__hash__()
    except BaseException:
        pass

def test_case_6():
    try:
        dict_token_0 = module_0.DictToken()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '&zRK_6Q\n`'
        int_0 = 5
        int_1 = 648
        token_0 = module_0.Token(str_0, int_1, int_1)
        scalar_token_0 = module_0.ScalarToken(int_0, int_0, int_0)
        any_0 = scalar_token_0.__hash__()
        bool_0 = token_0.__eq__(str_0)
        bool_1 = token_0.__eq__(scalar_token_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        dict_0 = {str_0: str_0}
        int_0 = -2874
        list_token_0 = module_0.ListToken(dict_0, int_0, int_0)
        dict_1 = {}
        int_1 = 2119
        scalar_token_0 = module_0.ScalarToken(dict_1, int_1, int_1)
        bool_0 = scalar_token_0.__eq__(list_token_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '2c";Du;+oJ/<D'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        int_0 = -1342
        scalar_token_0 = module_0.ScalarToken(str_0, int_0, int_0)
        list_0 = [dict_0, str_0, scalar_token_0]
        dict_token_0 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        int_0 = 359
        int_1 = -3195
        token_0 = module_0.Token(str_0, int_0, int_1)
        str_1 = token_0.__repr__()
        bool_0 = token_0.__eq__(str_0)
        dict_0 = {}
        int_2 = -2865
        list_token_0 = module_0.ListToken(dict_0, int_2, int_2)
        dict_1 = {}
        list_0 = [dict_1, dict_1, dict_1, dict_1]
        scalar_token_0 = module_0.ScalarToken(dict_1, int_1, int_1)
        token_1 = module_0.Token(int_1, int_1, int_1)
        dict_token_0 = module_0.DictToken(*list_0, **dict_1)
        bool_1 = scalar_token_0.__eq__(dict_token_0)
        int_3 = -1702
        int_4 = 373
        scalar_token_1 = module_0.ScalarToken(bool_1, int_3, int_4)
        bool_2 = scalar_token_1.__eq__(list_token_0)
        bool_3 = token_1.__eq__(bool_1)
        list_1 = [scalar_token_0]
        token_2 = dict_token_0.lookup_key(list_1)
    except BaseException:
        pass