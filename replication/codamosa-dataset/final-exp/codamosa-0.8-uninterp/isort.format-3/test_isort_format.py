# Automatically generated by Pynguin.
import isort.format as module_0
import pathlib as module_1
import typing as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = 'oRC\\T{g{l>~\\K8 C\nP'
    str_1 = module_0.format_simplified(str_0)

def test_case_2():
    str_0 = '4_c;>0='
    str_1 = module_0.format_natural(str_0)

def test_case_3():
    str_0 = "Return a new dynamically created dataclass.\n    The dataclass name will be 'cls_name'.  'fields' is an iterable\n    of either (name), (name, type) or (name, type, Field) objects. If type is\n    omitted, use the string 'typing.Any'.  Field objects are created by\n    the equivalent of calling 'field(name, type [, Field-info])'.\n      C = make_dataclass('C', ['x', ('y', int), ('z', int, field(init=False))], bases=(Base,))\n    is equivalent to:\n      @dataclass\n      class C(Base):\n          x: 'typing.Any'\n          y: int\n          z: int = field(init=False)\n    For the bases and namespace parameters, see the builtin type() function.\n    The parameters init, repr, eq, order, unsafe_hash, and frozen are passed to\n    dataclass().\n    "
    str_1 = module_0.format_natural(str_0)
    str_2 = '--csi'
    basic_printer_0 = module_0.BasicPrinter()
    basic_printer_0.diff_line(str_1)
    basic_printer_0.success(str_2)
    str_3 = 'FoS%vKd}nSuN,y-GnjK'
    path_0 = module_1.Path()
    list_0 = []
    text_i_o_0 = module_2.TextIO(*list_0)
    var_0 = module_0.show_unified_diff(file_input=str_0, file_output=str_3, file_path=path_0, output=text_i_o_0)
    str_4 = module_0.format_natural(str_1)

def test_case_4():
    str_0 = '$@\x0bsY>'
    path_0 = module_1.Path()
    bool_0 = False
    var_0 = module_0.show_unified_diff(file_input=str_0, file_output=str_0, file_path=path_0, color_output=bool_0)
    str_1 = module_0.format_natural(str_0)

def test_case_5():
    str_0 = '-0-M5^bD+EdEGq.[\re'
    str_1 = 'Wk.*2D," :TN6N'
    str_2 = 'fS s+\n~<@"&&rHCq\r2K'
    str_3 = 'A,\r`P/Z'
    str_4 = 'Get all import definitions from a given file.Use `-` as the first argument to represent stdin.'
    dict_0 = {str_3: str_2, str_1: str_0, str_4: str_1}
    path_0 = module_1.Path(**dict_0)
    bool_0 = True
    var_0 = module_0.show_unified_diff(file_input=str_1, file_output=str_2, file_path=path_0, color_output=bool_0)
    str_5 = module_0.format_simplified(str_0)

def test_case_6():
    str_0 = 'hmM,o|49'
    colorama_printer_0 = module_0.ColoramaPrinter()
    colorama_printer_0.diff_line(str_0)
    colorama_printer_0.diff_line(str_0)
    str_1 = module_0.remove_whitespace(str_0)
    basic_printer_0 = module_0.BasicPrinter()
    str_2 = 'fU!HB;\r'
    basic_printer_0.diff_line(str_2)
    basic_printer_0.diff_line(str_2)
    str_3 = 'c(,X> =W\\$byC(Kk'
    str_4 = module_0.format_simplified(str_3)

def test_case_7():
    colorama_printer_0 = module_0.ColoramaPrinter()

def test_case_8():
    str_0 = '# isort: set'
    basic_printer_0 = module_0.BasicPrinter()
    basic_printer_0.success(str_0)

def test_case_9():
    str_0 = 'D\tAlS89,3'
    str_1 = module_0.format_simplified(str_0)
    str_2 = 'dCm\n*KM%0'
    basic_printer_0 = module_0.BasicPrinter()
    basic_printer_0.error(str_2)

def test_case_10():
    str_0 = '7pkbKc1j2;TM~]^g'
    basic_printer_0 = module_0.BasicPrinter()
    basic_printer_0.diff_line(str_0)

def test_case_11():
    str_0 = 'formatting_function'
    colorama_printer_0 = module_0.ColoramaPrinter()
    colorama_printer_0.diff_line(str_0)
    colorama_printer_0.diff_line(str_0)
    str_1 = colorama_printer_0.style_text(str_0)
    str_2 = 'zWsK# &"9Tb\r|K'
    str_3 = colorama_printer_0.style_text(str_2, str_1)
    str_4 = module_0.format_simplified(str_1)

def test_case_12():
    bool_0 = True
    var_0 = module_0.create_terminal_printer(bool_0)

def test_case_13():
    str_0 = 'lexicographical'
    basic_printer_0 = module_0.BasicPrinter()
    basic_printer_0.diff_line(str_0)
    str_1 = ''
    str_2 = module_0.format_simplified(str_1)
    str_3 = None
    text_i_o_0 = module_2.TextIO()
    basic_printer_1 = module_0.BasicPrinter(text_i_o_0)
    str_4 = None
    basic_printer_1.success(str_4)
    basic_printer_1.diff_line(str_3)

def test_case_14():
    colorama_printer_0 = module_0.ColoramaPrinter()
    bool_0 = False
    complex_0 = None
    var_0 = module_0.create_terminal_printer(bool_0, complex_0)

def test_case_15():
    str_0 = '/EZ0aFRpt<WhQ;'
    basic_printer_0 = module_0.BasicPrinter()
    basic_printer_0.success(str_0)
    str_1 = '{#\nkwS'
    str_2 = 'site'
    bytes_0 = None
    bool_0 = True
    var_0 = module_0.show_unified_diff(file_input=str_2, file_output=str_0, file_path=bytes_0, color_output=bool_0)
    basic_printer_1 = module_0.BasicPrinter()
    str_3 = 'decimal'
    str_4 = module_0.format_simplified(str_3)
    basic_printer_1.success(str_1)
    str_5 = 'ELZL&oBVat]}!7'
    str_6 = '-ds'
    basic_printer_1.diff_line(str_6)
    basic_printer_1.error(str_5)
    basic_printer_1.success(str_1)
    str_7 = '-i'
    basic_printer_1.success(str_7)

def test_case_16():
    str_0 = None
    basic_printer_0 = module_0.BasicPrinter()
    basic_printer_0.success(str_0)
    basic_printer_0.success(str_0)
    colorama_printer_0 = module_0.ColoramaPrinter()
    str_1 = '\r-9/mH#%TkLYV\x0bHVd'
    str_2 = colorama_printer_0.style_text(str_1)
    basic_printer_0.success(str_1)
    str_3 = colorama_printer_0.style_text(str_1, str_0)
    str_4 = colorama_printer_0.style_text(str_0)
    str_5 = 'from'
    str_6 = module_0.format_natural(str_5)
    str_7 = '>&K'
    str_8 = colorama_printer_0.style_text(str_7)
    int_0 = -208
    colorama_printer_1 = module_0.ColoramaPrinter(int_0)
    str_9 = module_0.format_natural(str_6)

def test_case_17():
    str_0 = 'from a import b as c'
    str_1 = module_0.format_simplified(str_0)