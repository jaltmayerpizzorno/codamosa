# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2
import typesystem.composites as module_3
import builtins as module_4

def test_case_0():
    try:
        str_0 = 'https://schemas.typesystem.dev/tests/union-anyOf-number-string.schema.json'
        field_0 = module_0.from_json_schema(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -2076.0
        dict_0 = {float_0: float_0}
        str_0 = ']|C:2M-=g\x0b'
        bool_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        validation_result_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        dict_0 = {validation_result_0: schema_definitions_0, validation_result_0: schema_definitions_0}
        field_0 = module_0.enum_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{5=LyhZA'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        schema_definitions_0 = None
        field_0 = module_0.from_json_schema(dict_0)
        field_1 = module_0.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'|;G\x10\xb8'
        str_0 = '7\x0c8z:6\nye'
        dict_0 = {bytes_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.all_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        str_0 = 'N4\nfj>_'
        dict_1 = {str_0: dict_0}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        field_0 = module_0.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = None
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'$\x06'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = None
        var_0 = module_0.to_json_schema(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'zV_x('
        field_0 = module_2.Field(title=str_0)
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        str_0 = '?`Jt2q4 xVB,\x0bB^GY['
        str_1 = 'Union'
        list_0 = []
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0)
        iterator_0 = schema_definitions_0.__iter__()
        dict_1 = {str_0: dict_0, str_1: str_0, str_1: iterator_0}
        schema_definitions_1 = module_1.SchemaDefinitions(**dict_1)
        field_0 = module_0.one_of_from_json_schema(dict_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'definitions'
        str_1 = '$ref'
        str_2 = 'foo'
        str_3 = 'bar'
        str_4 = 'type'
        str_5 = 'enum'
        str_6 = 'minLength'
        str_7 = 'string'
        str_8 = [str_2, str_3]
        int_0 = -20
        var_0 = {str_4: str_7, str_5: str_8, str_6: int_0}
        str_9 = 'null'
        str_10 = {str_4: str_9}
        var_1 = {str_2: var_0, str_3: str_10}
        str_11 = '#/definitions/foo'
        var_2 = {str_0: var_1, str_1: str_11}
        field_0 = module_0.from_json_schema(var_2)
        any_0 = field_0.validate(str_2)
        var_3 = None
        any_1 = field_0.validate(var_3)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'type'
        str_1 = 'integer'
        str_2 = {str_0: str_1}
        bool_0 = False
        var_0 = None
        field_0 = module_0.from_json_schema_type(str_2, str_1, bool_0, var_0)
        str_3 = {str_0: str_1}
        bool_1 = True
        field_1 = module_0.from_json_schema_type(str_3, str_1, bool_1, var_0)
        str_4 = 'null'
        str_5 = [str_4, str_1]
        str_6 = {str_0: str_5}
        field_2 = module_0.from_json_schema_type(str_6, str_4, bool_0, var_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'allOf'
        str_1 = 'string'
        str_2 = [str_1, str_0]
        str_3 = {str_0: str_2}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.all_of_from_json_schema(str_3, schema_definitions_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'oneOf'
        str_1 = 'type'
        str_2 = 'number'
        str_3 = {str_1: str_2}
        str_4 = 'integer'
        str_5 = {str_1: str_4}
        str_6 = [str_3, str_5]
        str_7 = {str_0: str_6}
        var_0 = {}
        field_0 = module_0.one_of_from_json_schema(str_7, var_0)
        float_0 = 1.0
        any_0 = field_0.validate(float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '$ref'
        str_1 = '#/de6_!tions/JSONSchema'
        str_2 = {str_0: str_1}
        field_0 = module_0.from_json_schema(str_2)
        bool_0 = True
        field_1 = module_0.from_json_schema(bool_0)
        any_0 = module_2.Any()
        bool_1 = False
        field_2 = module_0.from_json_schema(bool_1)
        never_match_0 = module_3.NeverMatch()
    except BaseException:
        pass

def test_case_16():
    try:
        choice_0 = module_2.Choice()
        int_0 = 1
        var_0 = module_0.to_json_schema(choice_0, int_0)
        str_0 = '$ref'
        str_1 = {str_0: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.ref_from_json_schema(str_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'not'
        str_1 = 'default'
        str_2 = 'tvp\x0b'
        str_3 = 'string'
        str_4 = {str_2: str_3}
        str_5 = {str_2: str_3, str_0: str_4}
        var_0 = None
        var_1 = {str_0: str_5, str_1: var_0}
        str_6 = {str_2: str_3}
        var_2 = {str_0: str_6, str_1: var_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.not_from_json_schema(var_1, schema_definitions_0)
        field_1 = module_0.not_from_json_schema(var_2, schema_definitions_0)
        string_0 = module_2.String()
        not_0 = module_3.Not(string_0)
        any_0 = field_1.validate(var_2)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'title'
        str_1 = 'type'
        str_2 = 'properties'
        str_3 = 'EM~FsdPW`%XO[K`{k'
        str_4 = 'object'
        str_5 = 'test'
        str_6 = 'oneOf'
        str_7 = 'string'
        str_8 = 'additionalProperties'
        str_9 = 'name'
        str_10 = 'age'
        str_11 = 'enum'
        str_12 = 'complex'
        str_13 = [str_12]
        str_14 = {str_1: str_7, str_11: str_13}
        str_15 = 'integer'
        str_16 = {str_1: str_15}
        str_17 = {str_9: str_14, str_10: str_16}
        bool_0 = False
        var_0 = {str_1: str_4, str_2: str_17, str_8: bool_0}
        str_18 = 'si5mple'
        str_19 = [str_18]
        str_20 = {str_1: str_7, str_11: str_19}
        var_1 = [var_0, str_20]
        var_2 = {str_1: str_7, str_6: var_1}
        var_3 = {str_5: var_2}
        var_4 = {str_0: str_3, str_1: str_4, str_2: var_3}
        field_0 = module_0.from_json_schema(var_4)
        str_21 = {str_5: str_18}
        any_0 = field_0.validate(str_21)
        str_22 = {str_5: str_12}
        any_1 = field_0.validate(str_22)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'definitions'
        str_1 = '$ref'
        str_2 = 'foo'
        str_3 = 'bar'
        str_4 = 'type'
        str_5 = 'enum'
        str_6 = 'minLength'
        str_7 = 'string'
        str_8 = [str_2, str_3]
        int_0 = 3
        var_0 = {str_4: str_7, str_5: str_8, str_6: int_0}
        str_9 = 'null'
        str_10 = {str_4: str_9}
        var_1 = {str_2: var_0, str_3: str_10}
        str_11 = '#/definitions/foo'
        var_2 = {str_0: var_1, str_1: str_11}
        field_0 = module_0.from_json_schema(var_2)
        any_0 = field_0.validate(str_2)
        any_1 = field_0.serialize(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        any_0 = module_2.Any()
        never_match_0 = module_3.NeverMatch()
        var_0 = module_0.to_json_schema(never_match_0)
        dict_0 = {never_match_0: never_match_0}
        list_0 = [dict_0]
        str_0 = '>"#js)\n&~FVP'
        dict_1 = {str_0: str_0, str_0: list_0, str_0: dict_0}
        schema_definitions_0 = module_1.SchemaDefinitions(*list_0, **dict_1)
        field_0 = module_0.from_json_schema(dict_0)
        dict_2 = module_4.dict()
        int_0 = 1
        int_1 = None
        string_0 = module_2.String(max_length=int_0, min_length=int_1)
        var_1 = module_0.to_json_schema(string_0)
        integer_0 = module_2.Integer(minimum=int_0)
        var_2 = module_0.to_json_schema(integer_0)
        bool_0 = True
        integer_1 = module_2.Integer(minimum=int_0)
        field_1 = module_2.Field()
        var_3 = module_0.to_json_schema(field_1)
    except BaseException:
        pass

def test_case_21():
    try:
        any_0 = module_2.Any()
        str_0 = '|~.Eh&E'
        int_0 = 1
        int_1 = None
        string_0 = module_2.String(min_length=int_1, format=str_0)
        var_0 = module_0.to_json_schema(string_0)
        integer_0 = module_2.Integer(minimum=int_0)
        var_1 = module_0.to_json_schema(integer_0)
        bool_0 = True
        integer_1 = module_2.Integer(minimum=int_0)
        field_0 = module_2.Field()
        var_2 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_22():
    try:
        string_0 = module_2.String()
        integer_0 = module_2.Integer()
        var_0 = module_0.to_json_schema(integer_0)
        str_0 = '#/definitions/name'
        reference_0 = module_1.Reference(str_0)
        var_1 = module_0.to_json_schema(reference_0)
    except BaseException:
        pass