# Automatically generated by Pynguin.
import ansible.playbook.included_file as module_0

def test_case_0():
    try:
        str_0 = '\n    Checks if __eq__ method of class IncludedFile will return true.\n    '
        var_0 = {}
        var_1 = None
        included_file_0 = module_0.IncludedFile(str_0, var_0, var_1, var_1)
        var_2 = included_file_0 == included_file_0
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -70.465
        list_0 = [float_0]
        set_0 = set()
        bytes_0 = b'\xa4\xee\x8c\x889v\x84\xbf&\xcf\xff\xa5'
        bool_0 = True
        included_file_0 = module_0.IncludedFile(bytes_0, float_0, bool_0, list_0)
        float_1 = 3515.38107
        int_0 = 32603
        set_1 = {int_0, int_0, int_0}
        str_0 = '<~X#q>0k'
        included_file_1 = module_0.IncludedFile(float_1, int_0, set_1, str_0, float_1)
        var_0 = included_file_1.process_include_results(list_0, set_0, float_0, included_file_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ''
        var_0 = []
        var_1 = []
        included_file_0 = module_0.IncludedFile(str_0, var_0, var_1, str_0)
        str_1 = 'host1'
        var_2 = included_file_0.add_host(str_1)
        str_2 = 'host1'
        var_3 = included_file_0.add_host(str_2)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\n- name: Install ntpdate\n  ansible.builtin.package:\n    name: ntpdate\n    state: present\n\n# This uses a variable as this changes per distribution.\n- name: Remove the apache package\n  ansible.builtin.package:\n    name: "{{ apache }}"\n    state: absent\n\n- name: Install the latest version of Apache and MariaDB\n  ansible.builtin.package:\n    name:\n      - httpd\n      - mariadb-server\n    state: latest\n'
        str_1 = ',XI\t}'
        dict_0 = {str_1: str_1, str_0: str_0}
        bytes_0 = None
        str_2 = 'version_info'
        bytes_1 = None
        bool_0 = False
        tuple_0 = ()
        int_0 = 1634
        set_0 = {bytes_0}
        float_0 = None
        str_3 = 'pzMU'
        included_file_0 = module_0.IncludedFile(set_0, float_0, bytes_1, str_3)
        bool_1 = None
        included_file_1 = module_0.IncludedFile(included_file_0, bool_1, tuple_0, tuple_0)
        included_file_2 = module_0.IncludedFile(bytes_1, bool_0, tuple_0, int_0)
        included_file_3 = module_0.IncludedFile(dict_0, bytes_0, str_2, included_file_2, dict_0)
        tuple_1 = ()
        int_1 = 2785
        int_2 = 255
        float_1 = 1621.6126
        included_file_4 = module_0.IncludedFile(dict_0, int_1, int_2, float_1, tuple_1)
        var_0 = included_file_4.__eq__(included_file_3)
        set_1 = {str_1, str_0, str_0}
        tuple_2 = ()
        bool_2 = False
        float_2 = 1963.65
        var_1 = included_file_3.process_include_results(tuple_2, float_2, bytes_1, float_2)
        dict_1 = {bool_2: bool_2, bool_2: bool_2, bool_2: bool_2}
        list_0 = None
        var_2 = included_file_4.add_host(list_0)
        str_4 = 'jxrJ99u(G*#}L'
        bytes_2 = b'\xa7\x9c\xba\xae\xfa\xfd\x9b\xc5\xa5\x96\xb9C\x10\x03'
        included_file_5 = module_0.IncludedFile(bool_2, dict_1, str_4, bytes_2)
        var_3 = included_file_5.process_include_results(str_0, str_1, set_1, tuple_2)
    except BaseException:
        pass