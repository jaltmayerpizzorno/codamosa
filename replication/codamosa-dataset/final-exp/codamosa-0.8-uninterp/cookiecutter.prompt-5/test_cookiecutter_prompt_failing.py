# Automatically generated by Pynguin.
import cookiecutter.prompt as module_0

def test_case_0():
    try:
        int_0 = 1
        bool_0 = True
        var_0 = module_0.read_user_variable(int_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ao\ngdd'
        var_0 = module_0.read_user_yes_no(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = None
        var_0 = module_0.read_repo_password(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 537.32199
        bool_0 = False
        list_0 = [float_0, bool_0]
        var_0 = module_0.read_user_choice(float_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 239.8
        str_0 = ''
        var_0 = module_0.read_user_choice(float_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'2Q{f'
        str_0 = 'L?Ag\x0bz+pmSt\\7Z9'
        float_0 = 2222.4
        dict_0 = {}
        int_0 = 0
        var_0 = module_0.prompt_choice_for_config(bytes_0, str_0, float_0, dict_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '{"key": value"}'
        var_0 = module_0.process_json(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Create a project from a Cookiecutter project template (TEMPLATE).\n\n    Cookiecutter is free and open source software, developed and managed by\n    volunteers. If you would like to help out or fund the project, please get\n    in touch at https://github.com/cookiecutter/cookiecutter.\n    '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.read_user_dict(str_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = None
        var_0 = module_0.read_user_dict(list_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 595.139684
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
        bool_0 = True
        int_0 = -1739
        var_0 = module_0.render_variable(bool_0, dict_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = 595.139684
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
        bytes_0 = b'\xdf{\x18hG2{y'
        str_0 = 'B'
        int_0 = -1831
        tuple_0 = (float_0, bytes_0, str_0, int_0)
        list_0 = []
        var_0 = module_0.render_variable(tuple_0, list_0, dict_0)
        set_0 = {str_0}
        var_1 = module_0.read_user_dict(float_0, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '$T}yc'
        str_1 = '>3Aiv#'
        bool_0 = True
        str_2 = 'Skip the files in the corresponding directories if they already exist'
        tuple_0 = None
        var_0 = module_0.prompt_choice_for_config(str_0, str_1, bool_0, str_2, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x0fg\xa5C\xb3f\x01Aj6\xf1\xd6'
        var_0 = module_0.prompt_for_config(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = None
        set_0 = {bytes_0, bytes_0, bytes_0}
        bytes_1 = b'x\xa9\x04Yv\x00\xc8\xdfnP\xa8\xe4|\xff\xac6D\x0e\x8f'
        list_0 = [bytes_1, set_0]
        float_0 = None
        var_0 = module_0.render_variable(set_0, list_0, float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'2Q{f'
        str_0 = 'L?Ag\x0bz+pmSt\\7Z9'
        float_0 = 2222.4
        dict_0 = {}
        int_0 = -39
        var_0 = module_0.prompt_choice_for_config(bytes_0, str_0, float_0, dict_0, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = None
        list_1 = [list_0, list_0, list_0, list_0]
        dict_0 = {}
        var_0 = module_0.render_variable(list_1, list_0, dict_0)
        var_1 = module_0.process_json(list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '{"foo": "bar"}'
        var_0 = module_0.process_json(str_0)
        str_1 = '["foo", "bar"]'
        var_1 = module_0.process_json(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b''
        var_0 = None
        str_0 = None
        str_1 = 'B\tcriP9$\nN2_p\x0bk3'
        str_2 = 'r|nI.'
        dict_0 = {str_0: str_0, str_1: var_0, str_2: str_0}
        float_0 = 4872.304
        var_1 = module_0.render_variable(bytes_0, dict_0, float_0)
    except BaseException:
        pass