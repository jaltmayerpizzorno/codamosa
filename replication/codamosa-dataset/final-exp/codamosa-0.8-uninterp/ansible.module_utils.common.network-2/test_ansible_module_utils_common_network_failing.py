# Automatically generated by Pynguin.
import ansible.module_utils.common.network as module_0

def test_case_0():
    try:
        dict_0 = {}
        bool_0 = True
        var_0 = module_0.to_subnet(dict_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 831.615
        str_0 = 'E\x0byxOX(QpRWHr&1eluE'
        var_0 = module_0.to_subnet(float_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '25.25.255.0'
        var_0 = module_0.is_netmask(str_0)
        bytes_0 = b'\x9f\xbaf`\xc0\x86\x98\x1e'
        var_1 = module_0.to_netmask(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'e<`KTL~\t"-w'
        var_0 = module_0.to_ipv6_subnet(str_0)
        tuple_0 = None
        var_1 = module_0.to_netmask(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'["\x9c\xbd\xb3\x06\xd4\x8a\x93!'
        var_0 = module_0.to_ipv6_subnet(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '#|\\8E))3Zx\nr~qedS\x0b'
        float_0 = 79.84327589455259
        var_0 = module_0.to_subnet(str_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 860.5878320745819
        str_0 = '/sr/bin/yum'
        set_0 = {str_0, str_0, float_0, str_0}
        str_1 = 'E\x0byxOX(QpRWHr&1eluE'
        tuple_0 = (set_0, str_1)
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.is_netmask(list_0)
        float_1 = -250.32
        var_1 = module_0.to_netmask(float_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '1111:2222:3333:4444:5555:6666:7777:8888'
        var_0 = module_0.to_ipv6_subnet(str_0)
        str_1 = '1111:2222::5555:6666:7777:8888'
        var_1 = module_0.to_ipv6_subnet(str_1)
        str_2 = '1111::5555:6666:7777:8888'
        var_2 = module_0.to_ipv6_subnet(str_2)
        float_0 = 1992.19
        dict_0 = {float_0: var_2, str_2: var_0, var_1: str_1, var_0: str_1}
        var_3 = module_0.to_bits(dict_0)
    except BaseException:
        pass