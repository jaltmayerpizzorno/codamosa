

# Generated at 2022-06-13 00:34:59.931169
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    class TestModule():
        def get_bin_path(self, executable):
            return 'sysctl'

        def run_command(self, cmd, encoding=None):
            return 0, b'\x00\x00\x00\x00\x00\x00\xd2\x69\x00\x00\x00\x00\x00\x00\x00\x00', ''

    class TestDarwinHardware(DarwinHardware):
        def __init__(self, module):
            self.sysctl = dict()
            self.module = module

    # first test case: seconds since 1970
    mac = TestDarwinHardware(TestModule())
    uptime_facts = mac.get_uptime_facts()
    assert uptime_facts['uptime_seconds'] == 1481746289

# Generated at 2022-06-13 00:35:08.258727
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    # Use output generated by 'sysctl -b kern.boottime'. Note that the
    # 'sysctl -b' command line option is not POSIX, and the '-n' option is
    # not available on Darwin.
    uptime_seconds = int(time.time()) - 500
    kern_boottime = struct.pack('@L', uptime_seconds)
    out = kern_boottime

    hardware = DarwinHardware()

    rc = 0
    err = ''
    hardware.module.run_command = lambda x, encoding=None: (rc, out, err)
    facts = hardware.get_uptime_facts()
    assert facts['uptime_seconds'] == 500

# Generated at 2022-06-13 00:35:17.988988
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    from ansible.module_utils.facts.hardware.darwin import DarwinHardware
    hardware = DarwinHardware()

    def mock_run_cmd(cmd, encoding=None):
        assert cmd == ['/usr/sbin/sysctl', '-b', 'kern.boottime']
        # Return a fake system boot time of 83499 seconds (23 hours, 16 minutes and 39 seconds)
        # in line with the kern.boottime format
        return 0, '1970-01-01 00:23:16.39', ''

    hardware.module.run_command = mock_run_cmd
    expected = {'uptime_seconds': 83499}

    actual = hardware.get_uptime_facts()
    assert(actual == expected)

# Generated at 2022-06-13 00:35:20.255333
# Unit test for constructor of class DarwinHardwareCollector
def test_DarwinHardwareCollector():
    hc = DarwinHardwareCollector()
    assert hc._platform == 'Darwin'
    assert hc._fact_class == DarwinHardware

# Generated at 2022-06-13 00:35:29.243947
# Unit test for method get_mac_facts of class DarwinHardware
def test_DarwinHardware_get_mac_facts():
    module = MockModule()
    hardware = DarwinHardware(module)

    module.run_command.return_value = (0, 'hw.model: MacPro3,1', '')
    module.run_command.return_value = (0, 'kern.osversion: 10.6.0', '')
    module.run_command.return_value = (0, 'kern.osrevision: 10A432', '')

    mac_facts = hardware.get_mac_facts()
    assert mac_facts['model'] == 'MacPro3,1'
    assert mac_facts['osversion'] == '10.6.0'
    assert mac_facts['osrevision'] == '10A432'



# Generated at 2022-06-13 00:35:39.370740
# Unit test for method get_system_profile of class DarwinHardware
def test_DarwinHardware_get_system_profile():
    '''Test the DarwinHardware class.'''
    module = AnsibleModuleMock()
    hardware = DarwinHardware(module)
    system_profile = hardware.get_system_profile()

    assert system_profile['Model Identifier'] == 'iMac12,1'
    assert system_profile['Model Name'] == 'iMac'
    assert system_profile['Serial Number'] == 'XXXXXXXXXX'
    assert system_profile['Hardware UUID'] == 'YYYYYYYY-YYYY-YYYY-YYYY-YYYYYYYYYYYY'
    assert system_profile['Processor Name'] == 'Intel Core i5'
    assert system_profile['Processor Speed'] == '2.5 GHz'
    assert system_profile['Number of Processors'] == '1'
    assert system_profile['Memory'] == '8 GB'
    assert system_profile

# Generated at 2022-06-13 00:35:41.894205
# Unit test for method get_mac_facts of class DarwinHardware
def test_DarwinHardware_get_mac_facts():
    test_module = FakeModule()
    mac_facts = DarwinHardware(test_module).get_mac_facts()
    assert mac_facts['model'] == 'MacBookPro111.22'
    assert mac_facts['osversion'] == '17.0.0'
    assert mac_facts['osrevision'] == '15G1217'


# Generated at 2022-06-13 00:35:54.579338
# Unit test for method get_mac_facts of class DarwinHardware
def test_DarwinHardware_get_mac_facts():
    """
    Test method get_mac_facts of DarwinHardware class
    """

# Generated at 2022-06-13 00:36:04.686263
# Unit test for method get_cpu_facts of class DarwinHardware
def test_DarwinHardware_get_cpu_facts():
    module = AnsibleModule(argument_spec={})

    hardware_obj = DarwinHardware(module)
    hardware_obj.sysctl = {
        'machdep.cpu.brand_string': 'Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz',
        'machdep.cpu.core_count': 4,
        'hw.logicalcpu': 8,
        'hw.physicalcpu': 4,
    }
    cpu_facts = hardware_obj.get_cpu_facts()
    assert cpu_facts['processor'] == 'Intel(R) Core(TM) i7-4770HQ CPU @ 2.20GHz'
    assert int(cpu_facts['processor_cores']) == 4
    assert int(cpu_facts['processor_vcpus']) == 8


# Generated at 2022-06-13 00:36:08.450797
# Unit test for constructor of class DarwinHardwareCollector
def test_DarwinHardwareCollector():
    darwin_hw_collector = DarwinHardwareCollector()
    assert darwin_hw_collector._fact_class == DarwinHardware
    assert darwin_hw_collector._platform == 'Darwin'


# Generated at 2022-06-13 00:36:27.462090
# Unit test for method populate of class DarwinHardware
def test_DarwinHardware_populate():
    module = AnsibleModule(
        argument_spec=dict()
    )

    hw_facts = DarwinHardware(module).populate()

    assert type(hw_facts['memtotal_mb']) == int
    assert type(hw_facts['memfree_mb']) == int
    assert type(hw_facts['processor']) == str
    assert type(hw_facts['processor_cores']) == str
    assert type(hw_facts['model']) == str
    assert type(hw_facts['osversion']) == str
    assert type(hw_facts['osrevision']) == str
    assert type(hw_facts['uptime_seconds']) == int


# Generated at 2022-06-13 00:36:33.072117
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    data = b'\x00\x00\x00\x00\x00\x03\xda\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    class_ = DarwinHardware(dict(), dict())
    assert class_.get_uptime_facts() == dict(uptime_seconds=108625)

# Generated at 2022-06-13 00:36:40.844490
# Unit test for method get_mac_facts of class DarwinHardware
def test_DarwinHardware_get_mac_facts():
    module = AnsibleModule(
        argument_spec=dict(),
        supports_check_mode=True
    )

    set_module_args({
    })

    module.params.update({
        'load_sysctl': True
    })

    result = dict()
    result['ansible_facts'] = dict()
    result['ansible_facts']['ansible_os_family'] = "Darwin"
    result['ansible_facts']['ansible_system'] = "Darwin"
    result['ansible_facts']['ansible_pkg_mgr'] = "port"
    result['ansible_facts']['ansible_kernel'] = "Darwin"
    result['ansible_facts']['ansible_machine'] = "x86_64"

# Generated at 2022-06-13 00:36:52.985467
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    cmd = ["/usr/sbin/system_profiler", "SPHardwareDataType"]
    rc = 0
    out = ""
    err = ""
    module = type('module', (), {'run_command': lambda *a, **k: (cmd, rc, out, err)})()
    darwin_hw = DarwinHardware(module)
    # Load the test data
    f = open('DarwinHardware.get_uptime_facts.out', 'rb')
    out = f.read()
    f.close()
    print('out', out)
    uptime_facts = darwin_hw.get_uptime_facts()
    assert uptime_facts['uptime_seconds'] == 33894, 'Uptime test failed.'
    print("Uptime test passed.")

# Generated at 2022-06-13 00:37:03.849449
# Unit test for method get_cpu_facts of class DarwinHardware
def test_DarwinHardware_get_cpu_facts():
    h = DarwinHardware()

    m = dict(
        machdep=dict(
            cpu=dict(
                brand_string="Intel(R) Core(TM) i7-4600M CPU @ 2.90GHz",
                core_count=1,
                logicalcpu=2,
                ncpu=2,
                physicalcpu=1,
            ),
        ),
        hw=dict(
            memsize=1073741824,
            model="MacBookPro11,3",
            physicalcpu=1,
            #vendor="GenuineIntel",
        ),
        kern=dict(
            osrevision=191104,
            osversion="16.7.0",
        ),
    )
    h.sysctl = m

    facts = h.get_cpu_facts()

# Generated at 2022-06-13 00:37:08.542666
# Unit test for method get_cpu_facts of class DarwinHardware
def test_DarwinHardware_get_cpu_facts():
    hardware = DarwinHardware()
    assert hardware.get_cpu_facts() == {'processor': 'Intel(R) Core(TM) i7-4770K CPU @ 3.50GHz',
                                        'processor_cores': 4,
                                        'processor_vcpus': 8}

# Generated at 2022-06-13 00:37:18.892626
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    test_module = AnsibleModule(argument_spec={})

    # Create an instance of DarwinHardware class
    dh = DarwinHardware(module=test_module)

    # Set the sysctl property for testing
    dh.sysctl = {
        'hw.memsize': 1073741824,  # bytes
    }

    # Set the vm_stat property for testing

# Generated at 2022-06-13 00:37:25.974587
# Unit test for method populate of class DarwinHardware
def test_DarwinHardware_populate():
    module = AnsibleModuleMock()
    hardware = DarwinHardware(module)
    hardware.sysctl = {'hw.model': 'MacBookPro8,2',
                       'hw.memsize': '3',
                       'hw.physicalcpu': '1',
                       'hw.logicalcpu': '2',
                       'kern.osversion': '15G31',
                       'kern.osrevision': '17G8030'}
    hardware.get_mac_facts = MagicMock(return_value={'osversion': '15G31', 'osrevision': '17G8030', 'model': 'MacBookPro8,2'})

# Generated at 2022-06-13 00:37:31.485328
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    # test error
    module = FakeAnsibleModule()
    module.get_bin_path.return_value = '/bin/sysctl'
    hardware = DarwinHardware(module)
    module.run_command.return_value = (1, None, None)
    assert hardware.get_uptime_facts() == {}

    # test ok
    module.run_command.return_value = (0, b'kern.boottime: { sec = 1548394717, usec = 199282 }\n', None)
    assert hardware.get_uptime_facts() == {'uptime_seconds': 212}



# Generated at 2022-06-13 00:37:42.255326
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    from ansible.module_utils.facts.hardware.darwin import DarwinHardware
    # Unit test for method get_uptime_facts of class DarwinHardware
    # with a time of 1515691041 (Thursday, January 11, 2018 3:04:01 PM GMT)
    boottime_bytes = b'\x01\x01\x00\x00\x00\x01\x00\x00'
    out = boottime_bytes + b'\0' * (8 - len(boottime_bytes))
    darwin_hardware = DarwinHardware(None)
    assert darwin_hardware.get_uptime_facts()['uptime_seconds'] == 39
    # with a time of 1515691041 (Thursday, January 11, 2018 3:04:01 PM GMT)
    # and some junk after the value
   

# Generated at 2022-06-13 00:38:00.168145
# Unit test for method get_mac_facts of class DarwinHardware
def test_DarwinHardware_get_mac_facts():
    from ansible.module_utils.facts.hardware.darwin import DarwinHardware
    with open("/tmp/ansible_DarwinHardware_get_mac_facts_test.txt", "w") as fd:
        fd.write("""
hw.memsize: 137438953472
hw.model: iMacPro1,1
machdep.cpu.brand_string: Intel(R) Xeon(R) W-2145 CPU @ 3.70GHz
machdep.cpu.core_count: 8
machdep.cpu.thread_count: 16
kern.osversion: 19.6.0
kern.osrevision: 15G1004
""")
    hardware = DarwinHardware()
    hardware.module = FakeAnsibleModule()
    hardware.get_mac_facts()

# Generated at 2022-06-13 00:38:00.765481
# Unit test for method populate of class DarwinHardware
def test_DarwinHardware_populate():
    assert True

# Generated at 2022-06-13 00:38:02.712857
# Unit test for constructor of class DarwinHardwareCollector
def test_DarwinHardwareCollector():
    module = AnsibleModuleMock()
    hc = DarwinHardwareCollector(module=module)
    assert hc.platform == 'Darwin'

# Generated at 2022-06-13 00:38:12.625443
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    # Create a mock object for the module
    class Module:
        def run_command(self, cmd, encoding=None):
            return 0, struct.pack('@QQ', 1598982030, 123456), ''

        def get_bin_path(self, cmd):
            return get_bin_path(cmd)

    sysctl_cmd = get_bin_path('sysctl')
    expected_cmd = [sysctl_cmd, '-b', 'kern.boottime']
    m = Module()
    dh = DarwinHardware(m)
    uptime_facts = dh.get_uptime_facts()
    assert m.run_command.call_count == 1
    assert m.run_command.call_args[0][0] == expected_cmd

# Generated at 2022-06-13 00:38:22.450139
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    # unit tests cannot run without the module_utils package
    try:
        from ansible.module_utils.facts.hardware.darwin import DarwinHardware as DUT
    except ImportError:
        return

    class DummyModule(object):
        def get_bin_path(self, name, required=False):
            return name

        def run_command(self, cmd, encoding=None):
            return 0, str(time.time() - 100), None

    dut = DUT(DummyModule())
    result = dut.get_uptime_facts()

    # uptime should be close to 100, with a few seconds of delta
    assert result['uptime_seconds'] < 200

# Generated at 2022-06-13 00:38:29.430891
# Unit test for method get_cpu_facts of class DarwinHardware
def test_DarwinHardware_get_cpu_facts():
    facts = {'module': None}
    hardware = DarwinHardware()
    system_profile = hardware.get_system_profile()
    for key, value in system_profile.items():
        facts[key] = value
    cpu_facts = hardware.get_cpu_facts()
    if system_profile['Processor Name']:
        assert cpu_facts['processor'] == '%s @ %s' % (system_profile['Processor Name'], system_profile['Processor Speed'])
    else:
        assert cpu_facts['processor'] == '%s @ %s' % (facts['machdep.cpu.brand_string'], facts['machdep.cpu.core_count'])

# Generated at 2022-06-13 00:38:41.095478
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    import resource
    import subprocess
    import unittest

    from ansible.module_utils.common.process import get_bin_path
    from ansible.module_utils.facts.hardware.darwin import DarwinHardware

    class TestDarwinHardware(unittest.TestCase):
        def setUp(self):
            self.darwin_hardware = DarwinHardware()

        def tearDown(self):
            pass

        def test_get_memory_facts(self):
            darwin_hardware = self.darwin_hardware

            # Get the pagesize of the underlying system
            pagesize = resource.getpagesize()

            # Generate a fake vm_stat command that returns the values we want for the pages
            # fields we care about
            vm_stat_command = [get_bin_path('vm_stat')]


# Generated at 2022-06-13 00:38:48.822287
# Unit test for method populate of class DarwinHardware
def test_DarwinHardware_populate():
    module = AnsibleModule(argument_spec={})
    hardwarecollector = DarwinHardwareCollector(module=module)
    result = hardwarecollector.collect()
    assert 'hw.logicalcpu' in result['ansible_facts']
    assert 'hw.memsize' in result['ansible_facts']
    assert 'hw.physicalcpu' in result['ansible_facts']
    assert 'kern.osversion' in result['ansible_facts']
    assert 'kern.osrevision' in result['ansible_facts']
    assert 'ansible_processor' not in result['ansible_facts']
    assert 'ansible_processor_cores' not in result['ansible_facts']
    assert 'ansible_processor_vcpus' not in result['ansible_facts']

# Generated at 2022-06-13 00:38:49.464484
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    m = Darw

# Generated at 2022-06-13 00:39:00.000477
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    class ModuleMock:
        class RunCommandResult:
            def __init__(self, rc, out, err):
                self.rc = rc
                self.out = out
                self.err = err

        def run_command(self, command):
            return ModuleMock.RunCommandResult(0, TEST_MEMORY_STAT_OUTPUT, '')

    class FactCollectorMock:
        def __init__(self):
            self.sysctl = {
                'hw.memsize': TEST_TOTAL_MEMORY
            }

    TEST_TOTAL_MEMORY = '18446744073709551616'

# Generated at 2022-06-13 00:39:22.138000
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    class ModuleStub(object):
        class RunCommandResult(object):
            def __init__(self, stdout, stderr, rc):
                self.out = stdout
                self.err = stderr
                self.rc = rc

        def __init__(self):
            self.run_command_calls = 0
            self.run_command_results = []
            self.get_bin_path_result = ""
            self.get_bin_path_result_index = 0
        def run_command(self, command, encoding=None):
            self.run_command_calls += 1
            return self.run_command_results[self.run_command_calls - 1]
        def get_bin_path(self, arg, required=False, opt_dirs=[]):
            return self.get_

# Generated at 2022-06-13 00:39:24.465416
# Unit test for method get_system_profile of class DarwinHardware
def test_DarwinHardware_get_system_profile():
    module = AnsibleModule(argument_spec={})
    dh = DarwinHardware(module)
    sp = dh.get_system_profile()
    assert sp is not None



# Generated at 2022-06-13 00:39:30.184259
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    class ModuleStub():
        def __init__(self):
            self.params = {}
            self.exit_args = {}
            self.fail_json_args = {}
            self.run_command_args = {}

        def check_mode(self):
            return self.params['check_mode']

        def run_command(self, cmd, encoding=None):
            self.run_command_args['cmd'] = cmd
            self.run_command_args['encoding'] = encoding

            if cmd == ['vm_stat']:
                if self.params['vm_stat'] == "error":
                    return 1, "", "some error"
                else:
                    return 0, self.params['vm_stat'], ""
            else:
                return 1, "", "some error"


# Generated at 2022-06-13 00:39:31.559760
# Unit test for constructor of class DarwinHardwareCollector
def test_DarwinHardwareCollector():
    DarwinHardwareCollector()

# Generated at 2022-06-13 00:39:35.951869
# Unit test for method get_mac_facts of class DarwinHardware
def test_DarwinHardware_get_mac_facts():
    from ansible.module_utils.basic import AnsibleModule
    module = AnsibleModule(argument_spec={})
    hardware = DarwinHardware('test_module', module)
    facts = hardware.get_mac_facts()

    assert facts == {
        'osversion': '16.6.0',
        'osrevision': '16G29',
    }



# Generated at 2022-06-13 00:39:41.105895
# Unit test for method get_cpu_facts of class DarwinHardware
def test_DarwinHardware_get_cpu_facts():
    hardware = DarwinHardware()
    hardware.sysctl = {'machdep.cpu.brand_string': 'Intel(R) Core(TM) i7-8700 CPU @ 3.20GHz'}
    cpu_facts = hardware.get_cpu_facts()
    assert cpu_facts['processor'] == hardware.sysctl['machdep.cpu.brand_string']
    assert cpu_facts['processor_cores'] == ''
    assert cpu_facts['processor_vcpus'] == ''

# Generated at 2022-06-13 00:39:47.209332
# Unit test for method populate of class DarwinHardware
def test_DarwinHardware_populate():
    mac_facts = {
        'model': 'MacBookPro8,2',
        'osversion': '16.7.0',
        'osrevision': '15G1108',
    }
    cpu_facts = {
        'processor': 'Intel Core i5',
        'processor_cores': '2',
        'processor_vcpus': '2',
    }
    memory_facts = {
        'memtotal_mb': 4096,
        'memfree_mb': 0,
    }
    uptime_facts = {
        'uptime_seconds': 14804670,
    }
    hardware_class = DarwinHardware()


# Generated at 2022-06-13 00:39:55.472282
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    from ansible.module_utils._text import to_bytes
    from ansible.module_utils.common.process import get_bin_path
    from ansible.module_utils.basic import AnsibleModule
    from ansible.module_utils.facts import default_collectors

    module = AnsibleModule(
        argument_spec=dict(),
        supports_check_mode=True,
    )
    try:
        get_bin_path('vm_stat')
        memory_facts = DarwinHardwareCollector._fact_class.get_memory_facts(module)
        assert 'memtotal_mb' in memory_facts
        assert 'memfree_mb' in memory_facts
    except ValueError:
        pass

# Generated at 2022-06-13 00:40:05.750808
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    memtotal_mb = 16384
    values = [
        ('Pages wired down', memtotal_mb),
        ('Pages active', memtotal_mb // 2),
        ('Pages inactive', memtotal_mb // 4),
    ]

    test_module = MagicMock()
    test_module.run_command.return_value = (0, '\n'.join('%s: %s' % (k, v) for k, v in values), '')

    hardware = DarwinHardware(test_module)
    memory_facts = hardware.get_memory_facts()

    test_module.run_command.assert_called_once_with(['/usr/sbin/vm_stat'])
    assert 'memtotal_mb' in memory_facts
    assert memory_facts['memtotal_mb'] == memtotal_mb

# Generated at 2022-06-13 00:40:09.610126
# Unit test for constructor of class DarwinHardwareCollector
def test_DarwinHardwareCollector():
    darwin_hw_collector = DarwinHardwareCollector()
    assert darwin_hw_collector.platform == DarwinHardwareCollector._platform
    assert darwin_hw_collector.fact_class == DarwinHardwareCollector._fact_class
    assert darwin_hw_collector.fact_class is not None

# Generated at 2022-06-13 00:40:37.223595
# Unit test for method get_cpu_facts of class DarwinHardware
def test_DarwinHardware_get_cpu_facts():
    hardware = DarwinHardware()
    hardware.module.run_command = lambda cmd: (0, "hw.logicalcpu: 1\nhw.physicalcpu: 2", "")
    cpu_facts = hardware.get_cpu_facts()
    assert cpu_facts['processor_cores'] == "2"
    assert cpu_facts['processor_vcpus'] == "1"



# Generated at 2022-06-13 00:40:42.493311
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    import pytest
    import psutil
    import sys

    if sys.version_info[0] == 2:
        pytest.skip("Skipping test for Python 2")

    uptime_facts = DarwinHardware().get_uptime_facts()
    assert uptime_facts == {'uptime_seconds': psutil.boot_time()}

# Generated at 2022-06-13 00:40:52.356618
# Unit test for method get_mac_facts of class DarwinHardware
def test_DarwinHardware_get_mac_facts():
    module = FakeModule()

    darwin_hardware = DarwinHardware(module)

    # For testing purpose we override the sysctl attribute of the DarwinHardware object
    # It should return the value of the osversion and osrevision keys
    darwin_hardware.sysctl = dict()
    darwin_hardware.sysctl['kern.osversion'] = '15.3.0'
    darwin_hardware.sysctl['kern.osrevision'] = '15.3.0'

    # We mock the module so that we can return the desired value for the model key
    with module_mock(module, {"rc": 0, "out": "hw.model: MacBookPro6,1", "err": ""}):
        mac_facts = darwin_hardware.get_mac_facts()
        assert mac_

# Generated at 2022-06-13 00:40:59.099184
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    m = MagicMock()

    darwin_hardware = Hardware()
    darwin_hardware.module = m

    m.get_bin_path.return_value = "/usr/bin/sysctl"
    m.run_command.return_value = (0, b'kern.boottime: { sec = 1522535190, usec = 636021 }\n', '')

    uptime_facts = darwin_hardware.get_uptime_facts()

    # Given the test data and the current system time, this is what
    # we should get as uptime.
    assert uptime_facts == {
        "uptime_seconds": 630
    }

# Generated at 2022-06-13 00:41:00.461780
# Unit test for constructor of class DarwinHardwareCollector
def test_DarwinHardwareCollector():
    collector = DarwinHardwareCollector()
    assert collector.collect() is not None


# Generated at 2022-06-13 00:41:09.374972
# Unit test for method get_cpu_facts of class DarwinHardware
def test_DarwinHardware_get_cpu_facts():
    cmd_outputs = {
        'sysctl -n machdep.cpu.brand_string': "Intel(R) Core(TM)2 Duo CPU     T6500  @ 2.10GHz",
        'sysctl -n machdep.cpu.core_count': "2",
        'sysctl -n hw.ncpu': "4",
        'sysctl -n hw.physicalcpu': "2",
        'sysctl -n hw.logicalcpu': "4",
        'sysctl -n machdep.cpu.features': "",
        'sysctl -n machdep.cpu.leaf7_features': "",
    }

    def mock_run_command(self, args, **kwargs):
        cmd = ' '.join(args)
        return (0, cmd_outputs.get(cmd), '')

    collector

# Generated at 2022-06-13 00:41:19.456699
# Unit test for method get_cpu_facts of class DarwinHardware
def test_DarwinHardware_get_cpu_facts():
    import ansible.module_utils.facts.hardware.darwin
    import ansible.module_utils.facts.get_ansible_facts
    import re


    def run_mock(module, command):
        rc = 0
        out = ''
        err = ''
        if re.match(r'^sysctl hw.model$', command):
            out = 'hw.model: MacBookPro11,4'
        elif re.match(r'^sysctl.*machdep.cpu.brand_string$', command):
            out = 'machdep.cpu.brand_string: Intel(R) Core(TM) i7-5557U CPU @ 3.10GHz'

# Generated at 2022-06-13 00:41:29.612250
# Unit test for method populate of class DarwinHardware
def test_DarwinHardware_populate():
    module = AnsibleModule(
        argument_spec=dict(),
        supports_check_mode=True
    )
    hardware_collector = DarwinHardwareCollector(module=module)
    hardware_facts = hardware_collector.collect()
    assert hardware_facts['cpu_facts']['processor_vcpus']
    assert hardware_facts['cpu_facts']['processor']
    assert hardware_facts['cpu_facts']['processor_cores']
    assert hardware_facts['memory_facts']['memtotal_mb']
    assert hardware_facts['memory_facts']['memfree_mb']
    assert hardware_facts['uptime_facts']['uptime_seconds']
    assert hardware_facts['mac_facts']['model']
    assert hardware_facts['mac_facts']['osversion']
    assert hardware_

# Generated at 2022-06-13 00:41:39.075853
# Unit test for method get_system_profile of class DarwinHardware
def test_DarwinHardware_get_system_profile():
    test_command_output = """Hardware:

    Hardware Overview:

      Model Name: MacBook Pro
      Model Identifier: MacBookPro1,1
      Processor Name: Intel Core Duo
      Processor Speed: 2 GHz
      Number Of Processors: 1
      Total Number Of Cores: 2
      L2 Cache: 4 MB
      Memory: 1 GB
      Bus Speed: 667 MHz
      Boot ROM Version: MB11.0055.B07
      SMC Version: 1.7f10
      Serial Number: W89108A3TY5
      Hardware UUID: 00000000-0000-1000-8000-0016CB7D1E3F

"""
    test_darwin_hardware = DarwinHardware()
    test_darwin_hardware.module = object()
    test_darwin_hardware.module.run_command = object()
    test_

# Generated at 2022-06-13 00:41:41.211587
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    expected_values = {
        'uptime_seconds': 129621,
    }
    test_hardware = DarwinHardware()
    assert test_hardware.get_uptime_facts() == expected_values

# Generated at 2022-06-13 00:42:34.914335
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    from ansible.module_utils.facts.hardware.darwin import DarwinHardware

    # initialize module object
    module = dict(
        run_command=lambda cmd, encoding=None: (
            0,
            '''
Pages free:                          46687.
Pages inactive:                     138263.
Pages speculative:                      0.
Pages active:                       633351.
Pages wired down:                   823714.
''',
            ''
        )
    )

    # initialize object
    dh = DarwinHardware(module)
    memory_facts = dh.get_memory_facts()

    # assert facts
    assert memory_facts['memtotal_mb'] == 46726
    assert memory_facts['memfree_mb'] == 23018

# Generated at 2022-06-13 00:42:45.561617
# Unit test for method get_system_profile of class DarwinHardware
def test_DarwinHardware_get_system_profile():
    import sys
    import tempfile
    if sys.version_info[0] < 3:
        import mock
    else:
        from unittest import mock

    # Create and edit the file
    (fd, path) = tempfile.mkstemp()
    tmp = open(path, 'w')

# Generated at 2022-06-13 00:42:54.547529
# Unit test for method get_system_profile of class DarwinHardware
def test_DarwinHardware_get_system_profile():
    from ansible.module_utils.facts.hardware.darwin import DarwinHardware
    from ansible.module_utils import basic
    module = basic.AnsibleModule(
        argument_spec=dict()
    )

# Generated at 2022-06-13 00:43:01.327237
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    # Arrange
    memtotal_mb = 4096

    # Act
    test_system = DarwinHardware()
    test_system.sysctl = {
        'hw.memsize': memtotal_mb * 1024 * 1024,
        'hw.pagesize': 4096,
    }
    test_system.run_command = lambda *args, **kwargs: (0, """Mach Virtual Memory Statistics: (page size of 4096 bytes)
Pages free:               4981.
Pages active:            14750.
Pages inactive:           8975.
Pages speculative:          48.
Pages throttled:              0.
Pages wired down:          1490.
Pages purgeable:          1171.
""", '')

    # Assert
    actual_result = test_system.get_memory_facts()
    assert actual_result['memtotal_mb'] == memtotal

# Generated at 2022-06-13 00:43:09.833060
# Unit test for method get_system_profile of class DarwinHardware
def test_DarwinHardware_get_system_profile():
    import sys
    import contextlib
    if sys.version[0] == 2:
        import __builtin__ as builtins
    else:
        import builtins

    class MockModule:
        def __init__(self):
            self.run_command = builtins.__dict__.get('__builtins__', {}).get('__import__')('mock').MagicMock()
    sys.modules['ansible.module_utils.common.process'] = contextlib.suppress()
    sys.modules['ansible.module_utils.facts.hardware.base'] = contextlib.suppress()
    sys.modules['ansible.module_utils.facts.sysctl'] = contextlib.suppress()

    mock_module = MockModule()
    result = DarwinHardware(mock_module).get_system_profile()

# Generated at 2022-06-13 00:43:20.501016
# Unit test for method populate of class DarwinHardware
def test_DarwinHardware_populate():
    module = AnsibleModule(
        argument_spec=dict()
    )
    # Create a mock for the sysctl command
    # its side_effect is a list of dictioanries
    # the first is the call to kern.osversion
    # the second is the call to hw.memsize
    # the third is the call to hw.physicalcpu
    # the fourth is the call to hw.logicalcpu
    # each will return a value as a string in the form "name: value"
    def side_effect(*args, **kwargs):
        if args == ('sysctl', 'kern.osversion'):
            return 0, 'kern.osversion: 10.8', ''

# Generated at 2022-06-13 00:43:26.630699
# Unit test for method get_memory_facts of class DarwinHardware
def test_DarwinHardware_get_memory_facts():
    import ansible.module_utils.facts.hardware.darwin

# Generated at 2022-06-13 00:43:35.770946
# Unit test for method populate of class DarwinHardware
def test_DarwinHardware_populate():
    data = {
        'hw': {
            'memsize': 6442450944,
            'model': 'MacBookPro10,2',
            'ncpu': 4
        },
        'machdep': {
            'cpu': {
                'core_count': 2,
                'features': '...',
                'thread_count': 2
            }
        },
        'kern': {
            'osversion': '15.0.0',
            'osrevision': '15A284'
        }
    }
    module = MockModule(run_command_ansible_results=[[0, "", ""]])
    hardware_collector = DarwinHardwareCollector(module)
    hardware = hardware_collector.collect(data, {})
    assert hardware['processor'] == '2 cores'

# Generated at 2022-06-13 00:43:44.546204
# Unit test for method get_uptime_facts of class DarwinHardware
def test_DarwinHardware_get_uptime_facts():
    from ansible.module_utils.facts.sysctl import get_sysctl
    import time
    import random

    import ansible.module_utils.facts.hardware.darwin as darwin

    class MockModule:
        def __init__(self, sysctl_return):
            self.sysctl = sysctl_return

        def run_command(self, args, encoding=None):
            if (args[0] == 'sysctl' and args[1] == '-b' and args[2] == 'kern.boottime'):
                raw = '{0:b}'.format(time.time() - self.sysctl)
                raw += '\x00' * (darwin.struct_size * 8 - len(raw))

# Generated at 2022-06-13 00:43:46.915781
# Unit test for method get_system_profile of class DarwinHardware
def test_DarwinHardware_get_system_profile():
    system_profile = DarwinHardware.get_system_profile(DarwinHardware)
    assert 'Model Identifier' in system_profile
    assert system_profile['Model Identifier'] == 'MacBookPro8,2'