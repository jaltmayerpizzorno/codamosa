# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = 648
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_2():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_3():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_4():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 1454
        set_0 = {grammar_0, grammar_0, int_0}
        wildcard_pattern_0 = None
        none_type_0 = None
        tuple_0 = (int_0, set_0, wildcard_pattern_0, none_type_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'KS[PRc|j,[Q&ToIB?j/'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = set()
        bool_0 = wildcard_pattern_0.match_seq(set_0, set_0)
        int_0 = -2090
        leaf_0 = module_0.Leaf(int_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'S[PRc|j,[Q+ IB?j/'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = set()
        bool_0 = wildcard_pattern_0.match_seq(set_0, set_0)
        any_0 = wildcard_pattern_0.optimize()
        list_0 = [bool_0, set_0, bool_0, any_0]
        base_pattern_0 = module_0.BasePattern(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 141
        str_0 = '\n5{Sy)% Hw'
        str_1 = "VU;vw'c)/"
        leaf_0 = module_0.Leaf(int_0, str_1)
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_pattern_1 = module_0.LeafPattern()
        list_0 = [leaf_pattern_1, leaf_pattern_0, leaf_pattern_1, str_1]
        str_2 = leaf_0.__repr__()
        var_0 = leaf_pattern_1.match(leaf_0, list_0)
        bool_0 = wildcard_pattern_0.match_seq(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 1096
        str_0 = 'P>n\\\ta\\ba<1(:YyqM{\t'
        str_1 = 'q\x0b#jt\\*'
        dict_0 = {str_0: int_0, str_1: grammar_0}
        list_0 = None
        list_1 = [dict_0, list_0]
        tuple_0 = (int_0, str_0, list_1, str_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '?p?%B3-ho!'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 1872
        list_0 = []
        str_1 = 'BeEY(LnA'
        node_0 = module_0.Node(int_0, list_0, str_1, str_1)
        list_1 = [node_0, node_0, node_0]
        any_0 = wildcard_pattern_0.optimize()
        node_1 = module_0.Node(int_0, list_1, any_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 666
        var_0 = []
        node_0 = module_0.Node(int_0, var_0)
        var_1 = repr(node_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 148
        str_0 = '\n5{Sy)% Hw'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        list_0 = []
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_0, any_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\rS'
        node_pattern_0 = module_0.NodePattern(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -3390
        str_0 = 'G\rhXXK8kvDz'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 44
        str_0 = "$Kd'R/dEG\x0b]a"
        str_1 = ''
        int_1 = 1990
        int_2 = -622
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_1)
        leaf_1 = leaf_0.clone()
        var_0 = None
        set_0 = {int_1, var_0}
        iterator_0 = leaf_0.pre_order()
        tuple_2 = (leaf_0, set_0, iterator_0)
        leaf_pattern_0 = module_0.LeafPattern()
        var_1 = leaf_pattern_0.match(leaf_1, tuple_2)
        int_3 = 366
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_3)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 73
        leaf_pattern_0 = module_0.LeafPattern()
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(leaf_pattern_0)
        str_0 = 'BeEYLnA'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bool_1 = wildcard_pattern_0.match_seq(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 671
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, str_0)
        node_1 = node_0.clone()
        int_1 = -2000
        int_2 = -680
        wildcard_pattern_0 = module_0.WildcardPattern(int_1, int_2)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '=s&2~yL7a'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 44
        str_0 = "$Kd'R/dEG\x0b]a"
        str_1 = ''
        int_1 = 1990
        int_2 = -622
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_1)
        leaf_1 = leaf_0.clone()
        var_0 = None
        set_0 = {int_1, var_0}
        iterator_0 = leaf_1.leaves()
        tuple_2 = (leaf_0, set_0, iterator_0)
        leaf_pattern_0 = module_0.LeafPattern()
        var_1 = leaf_pattern_0.match(leaf_1, tuple_2)
        int_3 = 1944
        int_4 = -856
        wildcard_pattern_0 = module_0.WildcardPattern(str_1, int_3, int_4)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 0
        str_0 = 'MC?'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_0.replace(leaf_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 99
        str_0 = '5Ss1yv%A\tMN"&2"'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match_seq(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        leaf_0 = None
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0)
        int_0 = 73
        negated_pattern_0 = module_0.NegatedPattern()
        str_0 = "BeDYLn'"
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bool_0 = wildcard_pattern_0.match_seq(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'KS[PRx|j[&ToI{?j/s'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 417
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        str_1 = node_0.__str__()
        any_0 = wildcard_pattern_0.optimize()
        list_1 = []
        node_1 = module_0.Node(int_0, list_0, any_0, list_1)
        negated_pattern_0 = module_0.NegatedPattern()
        negated_pattern_1 = module_0.NegatedPattern(any_0)
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 175
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        wildcard_pattern_0 = None
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match_seq(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_25():
    try:
        grammar_0 = module_1.Grammar()
        optional_0 = None
        str_0 = None
        int_0 = -1253
        int_1 = None
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_0, tuple_0)
        tuple_2 = ()
        tuple_3 = (int_1, optional_0, tuple_1, tuple_2)
        var_0 = module_0.convert(grammar_0, tuple_3)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '?p?%QB3-ho!'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bytes_0 = b''
        bool_0 = wildcard_pattern_0.match(bytes_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 111
        str_0 = 'G\rhXK8kvDz'
        wildcard_pattern_0 = None
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_1.optimize()
        bool_0 = wildcard_pattern_1.match_seq(wildcard_pattern_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 141
        str_0 = "VU;vw'c)/"
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'KS[PRx|j[&ToI{?j/s'
        int_0 = 431
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '?p?%QB3-ho!'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        str_1 = 'PE)3|1Ji^@+XZ\x0c6!'
        optional_0 = None
        node_pattern_0 = module_0.NodePattern(optional_0, str_1)
    except BaseException:
        pass

def test_case_31():
    try:
        optional_0 = None
        set_0 = {optional_0, optional_0}
        node_pattern_0 = module_0.NodePattern(optional_0, set_0)
    except BaseException:
        pass

def test_case_32():
    try:
        grammar_0 = module_1.Grammar()
        negated_pattern_0 = module_0.NegatedPattern(grammar_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 1890
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_1.update_sibling_maps()
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 674
        var_0 = []
        node_0 = module_0.Node(int_0, var_0)
        node_0.changed()
        var_1 = repr(node_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 940
        int_1 = 1789
        list_0 = []
        node_0 = module_0.Node(int_1, list_0)
        node_0.insert_child(int_0, node_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 2104
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 256
        int_1 = 765
        list_0 = []
        str_0 = '\tDC^b&!#y`$Lv'
        node_0 = module_0.Node(int_1, list_0, str_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        list_1 = [node_2]
        list_2 = []
        node_3 = module_0.Node(int_0, list_1, str_0, list_2)
        dict_0 = {}
        base_0 = module_0.Base(**dict_0)
    except BaseException:
        pass

def test_case_38():
    try:
        leaf_0 = None
        leaf_pattern_0 = module_0.LeafPattern()
        var_0 = leaf_pattern_0.match(leaf_0)
        int_0 = 43
        grammar_0 = module_1.Grammar()
        str_0 = 'bad token'
        dict_0 = {}
        list_0 = [leaf_0]
        tuple_0 = (int_0, str_0, dict_0, list_0)
        var_1 = module_0.convert(grammar_0, tuple_0)
        negated_pattern_0 = module_0.NegatedPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        bool_0 = wildcard_pattern_0.match_seq(int_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 1754
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_0.set_child(int_0, node_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 940
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_1.append_child(node_0)
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 2
        str_0 = 'number'
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
        var_0 = repr(leaf_pattern_0)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 12
        str_0 = 'MC?'
        leaf_0 = module_0.Leaf(int_0, str_0)
        int_1 = 2152
        list_0 = [leaf_0]
        node_0 = module_0.Node(int_1, list_0)
        node_1 = node_0.clone()
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'Z'
        int_0 = 2053
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        str_1 = node_1.__str__()
        node_1.changed()
        str_2 = 'numer'
        int_1 = None
        leaf_pattern_0 = module_0.LeafPattern(int_1, str_0, str_2)
        var_0 = repr(leaf_pattern_0)
    except BaseException:
        pass

def test_case_44():
    try:
        int_0 = 64
        int_1 = 2053
        list_0 = []
        node_0 = module_0.Node(int_1, list_0)
        node_1 = node_0.clone()
        int_2 = -1498
        node_0.insert_child(int_2, node_1)
        str_0 = node_1.__str__()
        node_1.changed()
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
        node_1.update_sibling_maps()
    except BaseException:
        pass