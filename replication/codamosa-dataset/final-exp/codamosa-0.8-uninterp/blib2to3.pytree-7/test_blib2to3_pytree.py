# Automatically generated by Pynguin.
import blib2to3.pytree as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 1208
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    int_0 = 1374
    list_0 = []
    node_0 = module_0.Node(int_0, list_0, int_0)
    node_1 = node_0.clone()

def test_case_3():
    str_0 = '$~V3(Rz\\L~'
    int_0 = 5
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_4():
    int_0 = 5
    str_0 = 'b8Mg_&GgFzc'
    int_1 = -686
    tuple_0 = (int_1, int_1)
    tuple_1 = (str_0, tuple_0)
    list_0 = [tuple_1, int_1]
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0, list_0)
    str_1 = leaf_0.__repr__()

def test_case_5():
    int_0 = 141
    str_0 = "]W'.DGl5KC ~piZAaWgY"
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.pre_order()
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_6():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_7():
    str_0 = '\rhXK8kODz'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_8():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_9():
    int_0 = 141
    str_0 = '-\tQ5^BFXY'
    str_1 = "VU;vw'c)/"
    leaf_0 = module_0.Leaf(int_0, str_1)
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    float_0 = -986.2157
    var_0 = leaf_pattern_0.match(leaf_0, float_0)

def test_case_10():
    int_0 = 141
    str_0 = '\n5{Sy)%!Hw'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_11():
    str_0 = 'rP8;9[\rdIXhEn'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_12():
    int_0 = 141
    str_0 = '\n5{Sy)% Hw'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_13():
    str_0 = 'KS[PRc|j,[Q&ToIB?j/'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    set_0 = set()
    bool_0 = wildcard_pattern_0.match_seq(set_0, set_0)

def test_case_14():
    str_0 = 'LTOeA1c*N'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    negated_pattern_0 = module_0.NegatedPattern()
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)

def test_case_15():
    str_0 = 'KS[PRx|j[&ToI{?j/s'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    int_0 = 417
    list_0 = []
    any_0 = wildcard_pattern_0.optimize()
    list_1 = []
    node_0 = module_0.Node(int_0, list_0, any_0, list_1)

def test_case_16():
    int_0 = 141
    str_0 = "VUva;vw'c)/"
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_17():
    str_0 = 'KS[PRx|j[Q&ToI{?j/s'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    set_0 = set()
    int_0 = 21
    leaf_0 = module_0.Leaf(int_0, str_0)
    float_0 = 1764.0
    int_1 = 65
    leaf_pattern_0 = module_0.LeafPattern(int_1, str_0)
    var_0 = leaf_pattern_0.match(leaf_0, float_0)
    leaf_1 = leaf_0.clone()
    bool_0 = wildcard_pattern_0.match_seq(set_0)

def test_case_18():
    str_0 = 'N'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_19():
    int_0 = 2
    str_0 = '2'
    var_0 = None
    var_1 = (var_0, var_0)
    var_2 = (var_0, var_1)
    leaf_0 = module_0.Leaf(int_0, str_0, var_2, var_0)
    iterator_0 = leaf_0.leaves()
    var_3 = list(iterator_0)
    var_4 = (var_0, var_0)
    var_5 = (var_0, var_4)
    leaf_1 = module_0.Leaf(int_0, str_0, var_5, var_0)

def test_case_20():
    int_0 = 1
    str_0 = 'hello'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.post_order()
    var_0 = list(iterator_0)

def test_case_21():
    var_0 = []
    var_1 = []
    iterator_0 = module_0.generate_matches(var_0, var_1)
    var_2 = list(iterator_0)

def test_case_22():
    int_0 = 256
    int_1 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_1, str_0)
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    leaf_2 = [leaf_0, leaf_1]
    node_0 = module_0.Node(int_0, leaf_2)
    iterator_0 = node_0.post_order()
    var_0 = list(iterator_0)
    leaf_3 = module_0.Leaf(int_1, str_0)
    leaf_4 = module_0.Leaf(int_1, str_1)
    leaf_5 = module_0.Leaf(int_1, str_0)
    leaf_6 = module_0.Leaf(int_1, str_1)
    leaf_7 = [leaf_5, leaf_6]
    node_1 = module_0.Node(int_0, leaf_7)
    leaf_8 = module_0.Leaf(int_1, str_0)
    leaf_9 = [leaf_8]
    node_2 = module_0.Node(int_0, leaf_9)
    iterator_1 = node_2.post_order()
    var_1 = list(iterator_1)
    leaf_10 = module_0.Leaf(int_1, str_0)
    leaf_11 = module_0.Leaf(int_1, str_0)
    leaf_12 = [leaf_11]
    node_3 = module_0.Node(int_0, leaf_12)

def test_case_23():
    int_0 = 0
    str_0 = 'MC?'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = leaf_0.depth()