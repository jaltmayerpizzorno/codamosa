# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1
import builtins as module_2
import collections.abc as module_3

def test_case_0():
    try:
        str_0 = None
        str_1 = module_0.doctest(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0]
        str_1 = "'Sh|(\t>~OR3*"
        dict_0 = {str_1: list_0, str_1: str_0}
        function_def_0 = module_1.FunctionDef(*list_0, **dict_0)
        str_2 = '\n^Cm=H#QA3#~Uju\tb]'
        str_3 = 'pB'
        str_4 = 'y0~X\n5%=ikn?1'
        dict_1 = {str_3: str_4, str_3: str_3}
        parser_0 = module_0.Parser(dict_1)
        parser_0.api(str_0, function_def_0, prefix=str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        subscript_0 = None
        str_0 = 'MIT'
        str_1 = 'Any'
        str_2 = ' &U)<v[#~La'
        dict_0 = {str_1: str_2}
        str_3 = '75U5J1nj\tVe/Q4GG'
        resolver_0 = module_0.Resolver(str_0, dict_0, str_3)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'I~HZ$'
        str_1 = module_0.doctest(str_0)
        dict_0 = {str_1: str_1}
        constant_0 = module_1.Constant(**dict_0)
        str_2 = '__'
        str_3 = 'F$_:Z92-0'
        str_4 = ']8\r\x0c\n\x0bM"yZhK'
        str_5 = '>>> '
        dict_1 = {str_2: str_3, str_4: str_5}
        resolver_0 = module_0.Resolver(str_1, dict_1, str_5)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'I~HZ$'
        str_1 = module_0.doctest(str_0)
        dict_0 = {str_1: str_1}
        constant_0 = module_1.Constant(**dict_0)
        str_2 = 'CkG@^I'
        str_3 = 'v{tW*A=d}Vx'
        int_0 = -22
        str_4 = None
        int_1 = 920
        str_5 = 'l$'
        int_2 = -570
        str_6 = '_Self'
        int_3 = 2884
        dict_1 = {str_4: int_1, str_5: int_2, str_6: int_3}
        parser_0 = module_0.Parser(int_0, dict_1)
        parser_0.parse(str_2, str_3)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Lc\x0blMo'
        import_0 = module_1.Import()
        bool_0 = False
        str_1 = '\r<'
        str_2 = 'Bases'
        dict_0 = {str_1: str_2}
        parser_0 = module_0.Parser(bool_0, dict_0)
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        assign_0 = module_1.Assign()
        bool_0 = False
        str_1 = 'list'
        str_2 = None
        dict_0 = {str_0: str_1, str_1: str_2}
        parser_0 = module_0.Parser(bool_0, bool_0, dict_0)
        parser_0.globals(str_0, assign_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'collections.abc.Awaitable'
        list_0 = [str_0, str_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        bool_0 = False
        str_1 = 'YJN\'DF\x0c<>"qvEn'
        str_2 = 'u]<$8l;>\nZ2'
        dict_0 = {str_1: str_2}
        parser_0 = module_0.Parser(bool_0, dict_0)
        parser_0.api(str_0, function_def_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '@staticmethod'
        str_1 = 'me^a`q\\!`PcC!\x0cz&|'
        list_0 = [str_1, str_0]
        subscript_0 = module_1.Subscript(*list_0)
        dict_0 = {}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
        arguments_0 = module_1.arguments()
        expr_0 = module_1.expr()
        bool_0 = False
        bool_1 = False
        parser_0 = module_0.Parser()
        parser_0.func_api(str_0, str_1, arguments_0, expr_0, has_self=bool_0, cls_method=bool_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1
        str_0 = 'Z6WUj4'
        str_1 = 'A!'
        str_2 = '__'
        str_3 = 'E{Q(l!o}cO\x0bsbf|nvx'
        str_4 = ''
        str_5 = 'EF}OoM5?"8[21('
        str_6 = 'i'
        dict_0 = {str_5: str_1, str_6: str_6, str_2: str_3, str_5: int_0}
        expr_0 = module_1.expr(**dict_0)
        list_0 = [expr_0]
        async_function_def_0 = module_1.AsyncFunctionDef()
        list_1 = [async_function_def_0]
        bool_0 = True
        int_1 = -714
        str_7 = '6xWT\r\x0b5(cTr)G)H\rKI`m'
        str_8 = 'eU.'
        set_0 = {str_0, str_8, str_3, str_1}
        str_9 = 'hJ\\PLeE\\cjj\t7V\n3=Z'
        dict_1 = {str_7: set_0, str_1: set_0, str_8: set_0, str_9: set_0}
        parser_0 = module_0.Parser(bool_0, int_1, dict_1)
        parser_0.class_api(str_4, str_1, list_0, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '_'
        bool_0 = False
        int_0 = -1718
        dict_0 = {}
        parser_0 = module_0.Parser(bool_0, int_0, dict_0)
        bool_1 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        bool_0 = module_0.is_public_family(str_0)
        str_1 = '\x0bdon8+\ni1\t/#nEh3{LC'
        list_0 = [str_0]
        constant_0 = module_1.Constant(*list_0)
        str_2 = ''
        str_3 = '4['
        str_4 = 't{'
        str_5 = "Y'H 7@t|KW"
        str_6 = "8*LH>TzDx{04kT/od\x0c#'"
        str_7 = 'P('
        str_8 = 'kBjd9j0ftd~wi6\nbd'
        str_9 = 'QtZ\x0bmp=m\rSZ0o4"\\=x'
        dict_0 = {str_2: str_3, str_4: str_5, str_6: str_7, str_8: str_9}
        resolver_0 = module_0.Resolver(str_1, dict_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        bool_0 = module_0.is_public_family(str_0)
        str_1 = '.__init__'
        str_2 = '\x0bdon8+\ni1\t/#nEh3{LC'
        str_3 = None
        list_0 = [str_1]
        constant_0 = module_1.Constant(*list_0)
        str_4 = ''
        str_5 = '4['
        str_6 = 't{'
        str_7 = "Y'H 7@t|KW"
        str_8 = "8*LH>TzDx{04kT/od\x0c#'"
        str_9 = 'P('
        str_10 = 'kBjd9j0ftd~wi6\nbd'
        str_11 = 'QtZ\x0bmp=m\rSZ0o4"\\=x'
        dict_0 = {str_4: str_5, str_6: str_7, str_8: str_9, str_10: str_11}
        resolver_0 = module_0.Resolver(str_2, dict_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        bool_1 = module_0.is_magic(str_3)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        bool_0 = False
        parser_0 = module_0.Parser(bool_0, bool_0, dict_0, dict_0, dict_0)
        str_0 = 'T]a"U45/ub^sAlD&'
        str_1 = module_0.esc_underscore(str_0)
        bool_1 = None
        parser_1 = module_0.Parser(bool_1, dict_0)
        var_0 = parser_1.__repr__()
        str_2 = '|'
        str_3 = module_0.code(str_2)
        int_0 = 1037
        bool_2 = True
        parser_2 = module_0.Parser(bool_0, int_0, bool_2, dict_0)
        bool_3 = parser_2.is_public(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'ce'
        str_1 = '2'
        list_0 = []
        stmt_0 = None
        list_1 = [stmt_0, stmt_0, stmt_0]
        bool_0 = True
        dict_0 = {}
        parser_0 = module_0.Parser(bool_0, dict_0)
        parser_0.class_api(str_0, str_1, list_0, list_1)
        str_2 = 'Kz'
        bool_1 = module_0.is_public_family(str_2)
        str_3 = '#;T^qI*1VHBq)J]+p~'
        str_4 = '-0a,b{aAB 2T{'
        str_5 = 'A8-l1S^X4\x0b?'
        str_6 = '-hJ%\t#:"\t-#}[Oee5'
        list_2 = [str_0, str_2]
        assign_0 = module_1.Assign(*list_2)
        dict_1 = {str_4: parser_0, str_5: bool_0, str_6: assign_0}
        import_from_0 = module_1.ImportFrom(*list_2, **dict_1)
        parser_0.imports(str_3, import_from_0)
    except BaseException:
        pass

def test_case_15():
    try:
        list_0 = []
        iterable_0 = None
        str_0 = module_0.table(*list_0, items=iterable_0)
    except BaseException:
        pass

def test_case_16():
    try:
        expr_0 = module_1.expr()
        bool_0 = False
        dict_0 = {}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_0, dict_0, dict_0)
        str_0 = '@F%u~ZLIBEh#3\x0b\x0b'
        str_1 = 'N'
        str_2 = module_0.doctest(str_1)
        list_0 = []
        list_1 = [list_0, dict_0, parser_0, parser_0]
        arguments_0 = module_1.arguments(*list_1)
        bool_1 = True
        parser_0.func_api(str_0, str_0, arguments_0, expr_0, has_self=bool_1, cls_method=bool_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '9D@hMicT5TWu&+[9'
        str_1 = 'y]u&au-zSE'
        list_0 = [str_1, str_1]
        dict_0 = {str_0: str_1, str_0: str_0}
        arguments_0 = module_1.arguments(*list_0, **dict_0)
        expr_0 = module_1.expr()
        bool_0 = False
        bool_1 = False
        str_2 = '-'
        int_0 = -4016
        dict_1 = {str_2: int_0, str_2: int_0, str_2: int_0}
        str_3 = 'R&OaSn%!zh'
        dict_2 = {str_2: str_3}
        dict_3 = {}
        parser_0 = module_0.Parser(dict_1, dict_2, dict_3, dict_2)
        parser_0.func_api(str_0, str_0, arguments_0, expr_0, has_self=bool_0, cls_method=bool_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '=N)1p\n'
        bool_0 = module_0.is_public_family(str_0)
        list_0 = [bool_0, str_0, str_0]
        ann_assign_0 = module_1.AnnAssign(*list_0)
        str_1 = 're.Pattern'
        dict_0 = {str_1: list_0}
        import_from_0 = module_1.ImportFrom(*list_0, **dict_0)
        bool_1 = True
        int_0 = -2468
        str_2 = None
        str_3 = 'vm;?E)'
        str_4 = 'tLCje}/*qQR'
        str_5 = '#~}?N10;'
        str_6 = '\x0c1Z-xP+x%S<|Zq B}qx1'
        dict_1 = {str_2: str_0, str_3: str_0, str_4: str_5, str_3: str_6}
        dict_2 = {}
        parser_0 = module_0.Parser(bool_1, int_0, dict_1, dict_2, dict_1)
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'zi'
        bool_0 = True
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_0, dict_0, dict_0)
        str_1 = '@F%u~ZLIBEh#3\x0b'
        bool_1 = module_0.is_magic(str_0)
        list_0 = [str_1]
        name_0 = module_1.Name(*list_0)
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        bool_2 = module_0.is_public_family(str_1)
        a_s_t_1 = resolver_0.visit_Name(name_0)
        str_2 = 'Kz'
        bool_3 = module_0.is_public_family(str_2)
        str_3 = parser_0.compile()
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '=N)1p\n'
        bool_0 = module_0.is_public_family(str_0)
        expr_0 = None
        str_1 = module_0.const_type(expr_0)
        bool_1 = module_0.is_public_family(str_0)
        str_2 = '3zJYPC:[;I%O'
        dict_0 = {str_2: str_1, str_1: str_1, str_0: str_2, str_2: str_1}
        import_0 = module_1.Import()
        str_3 = 'Rfgu"YofSC3!'
        int_0 = 613
        dict_1 = {str_3: int_0}
        parser_0 = module_0.Parser(bool_0, dict_1, dict_0, dict_0, dict_0)
        str_4 = "ss\rm2CI#Kj$;'VKuS]C"
        module_x_var_0 = None
        parser_0.load_docstring(str_4, module_x_var_0)
        list_0 = module_2.list()
        assign_0 = module_1.Assign()
        parser_0.globals(str_0, assign_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'zi'
        bool_0 = False
        dict_0 = {}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_0, dict_0, dict_0)
        str_1 = '@F%u~ZLIBEh#3\x0b'
        str_2 = '@|'
        list_0 = [str_1]
        name_0 = module_1.Name(*list_0)
        dict_1 = {str_2: bool_0}
        assign_0 = module_1.Assign(*list_0, **dict_1)
        bool_1 = module_0.is_public_family(str_1)
        parser_0.globals(str_0, assign_0)
        bool_2 = parser_0.is_public(str_2)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '=N)1p\n'
        bool_0 = module_0.is_public_family(str_0)
        str_1 = 'show the result instead write the file'
        str_2 = module_0.esc_underscore(str_1)
        str_3 = 'Rp$N!'
        str_4 = '3zJYPC:[;I%O'
        dict_0 = {str_4: str_3, str_3: str_3, str_0: str_4, str_4: str_3}
        import_0 = module_1.Import()
        str_5 = 'Rfgu"YofSC3!'
        int_0 = 649
        dict_1 = {str_5: int_0}
        parser_0 = module_0.Parser(bool_0, dict_1, dict_0, dict_0, dict_0)
        module_x_var_0 = None
        parser_0.load_docstring(str_4, module_x_var_0)
        list_0 = [str_0, bool_0]
        attribute_0 = module_1.Attribute(*list_0)
        sequence_0 = module_3.Sequence()
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'zi'
        bool_0 = False
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_0, dict_0, dict_0)
        str_1 = '@F%u~ZLIBEh#3\x0b'
        bool_1 = module_0.is_magic(str_0)
        list_0 = [str_1]
        subscript_0 = module_1.Subscript(*list_0)
        import_0 = module_1.Import(*list_0)
        parser_0.imports(str_1, import_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'zi'
        bool_0 = False
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        parser_0 = module_0.Parser(bool_0, dict_0, dict_0, dict_0, dict_0)
        str_1 = '@F%u~ZLIBEh#3\x0b'
        list_0 = []
        bytes_0 = b'"\xb8\xf8'
        bool_1 = module_0.is_magic(str_0)
        list_1 = [bytes_0, str_1]
        parser_0.class_api(str_0, str_1, list_0, list_1)
        list_2 = [str_1]
        name_0 = module_1.Name(*list_2)
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        dict_1 = {str_1: bool_0}
        assign_0 = module_1.Assign(*list_2, **dict_1)
        subscript_0 = module_1.Subscript(*list_2)
        a_s_t_1 = resolver_0.visit_Subscript(subscript_0)
        str_2 = "_ZlI*z:,}z|'+n~tr"
        bool_2 = module_0.is_public_family(str_2)
        str_3 = parser_0.compile()
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'zi'
        bool_0 = False
        expr_0 = None
        str_1 = module_0.const_type(expr_0)
        list_0 = [str_0, bool_0, str_0]
        ann_assign_0 = module_1.AnnAssign(*list_0)
        async_function_def_0 = module_1.AsyncFunctionDef(*list_0)
        bool_1 = False
        int_0 = 5
        bool_2 = True
        str_2 = 'WoO] .c*/k'
        str_3 = 'MIT'
        dict_0 = {str_0: str_1, str_2: str_3}
        parser_0 = module_0.Parser(bool_1, int_0, bool_2, dict_0)
        parser_0.api(str_0, async_function_def_0)
    except BaseException:
        pass