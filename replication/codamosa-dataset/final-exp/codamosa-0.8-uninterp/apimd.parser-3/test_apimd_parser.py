# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    str_0 = 'ct\r<'
    bool_0 = module_0.is_magic(str_0)

def test_case_1():
    str_0 = 'A0on'
    bool_0 = module_0.is_public_family(str_0)

def test_case_2():
    str_0 = '2Kkxk{XZ0qj:>X/Y\t?'
    str_1 = module_0.code(str_0)

def test_case_3():
    str_0 = '4VTX:'
    str_1 = module_0.esc_underscore(str_0)

def test_case_4():
    expr_0 = module_1.expr()
    str_0 = module_0.const_type(expr_0)

def test_case_5():
    str_0 = 'zi'
    dict_0 = {}
    str_1 = '@F%u~ZLIBEh#3\x0b'
    str_2 = '@|'
    bool_0 = module_0.is_magic(str_2)
    list_0 = [str_1]
    name_0 = module_1.Name(*list_0)
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    dict_1 = {str_2: bool_0}
    assign_0 = module_1.Assign(*list_0, **dict_1)
    bool_1 = module_0.is_public_family(str_1)

def test_case_6():
    assign_0 = module_1.Assign()
    list_0 = []
    list_1 = [assign_0, assign_0, list_0]
    attribute_0 = module_1.Attribute(*list_1)
    str_0 = 'k@v$0J1nFGB~'
    dict_0 = {str_0: str_0}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)

def test_case_7():
    parser_0 = module_0.Parser()
    str_0 = parser_0.compile()

def test_case_8():
    str_0 = 'A!rUB94['
    bool_0 = True
    dict_0 = None
    dict_1 = {str_0: str_0}
    dict_2 = {}
    str_1 = 'u&x!ycm>Z!M*D('
    str_2 = '#UyNRSe'
    str_3 = "fu$vkyE#a'D1c[H"
    str_4 = '\x0bU\x0c5'
    dict_3 = {str_1: str_2, str_0: str_1, str_1: str_3, str_4: str_1}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1, dict_1, dict_2, dict_3)
    bool_1 = module_0.is_magic(str_0)

def test_case_9():
    int_0 = -1414
    str_0 = 'e{o;!w0eX'
    str_1 = 'NM'
    bool_0 = False
    parser_0 = module_0.Parser(bool_0, int_0)
    parser_0.parse(str_0, str_1)

def test_case_10():
    expr_0 = module_1.expr()
    str_0 = 'A!'
    int_0 = -1414
    bool_0 = module_0.is_magic(str_0)
    str_1 = 'e{o;!w0eX'
    str_2 = 'NM'
    bool_1 = True
    parser_0 = module_0.Parser(bool_1, int_0)
    parser_0.parse(str_1, str_2)
    int_1 = -377
    list_0 = [int_1]
    ann_assign_0 = module_1.AnnAssign(*list_0)

def test_case_11():
    str_0 = '=N)1p\n'
    bool_0 = module_0.is_public_family(str_0)
    list_0 = [bool_0, str_0, str_0, str_0]
    ann_assign_0 = module_1.AnnAssign(*list_0)
    str_1 = '~^*/MUm4'
    str_2 = 'show the result instead write the file'
    str_3 = 'moz'
    dict_0 = {str_1: str_3, str_2: str_3, str_1: str_2}
    parser_0 = module_0.Parser(dict_0)
    parser_0.globals(str_0, ann_assign_0)

def test_case_12():
    str_0 = 'n'
    list_0 = []
    stmt_0 = None
    list_1 = [stmt_0, stmt_0, stmt_0]
    bool_0 = False
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, dict_0)
    parser_0.class_api(str_0, str_0, list_0, list_1)
    bool_1 = module_0.is_public_family(str_0)

def test_case_13():
    dict_0 = {}
    str_0 = 'B-7.(lS+'
    str_1 = module_0.esc_underscore(str_0)
    parser_0 = module_0.Parser(dict_0)
    str_2 = 'k'
    str_3 = module_0.code(str_2)
    expr_0 = module_1.expr()
    str_4 = parser_0.resolve(str_0, expr_0)

def test_case_14():
    str_0 = '~^*/MUm4'
    str_1 = module_0.esc_underscore(str_0)
    str_2 = ''
    str_3 = '{c5w]-E<oNPI'
    str_4 = 'M\t| Wx=@`DxTT8]-$Cu'
    dict_0 = {str_2: str_3, str_4: str_3, str_0: str_4}
    parser_0 = module_0.Parser(dict_0)
    str_5 = None
    module_x_var_0 = None
    parser_0.load_docstring(str_5, module_x_var_0)
    bool_0 = True
    parser_1 = module_0.Parser(bool_0, dict_0, dict_0)
    str_6 = parser_1.compile()

def test_case_15():
    int_0 = -1495
    str_0 = 'tNY"zM\tvWtnS6-p>_;{'
    dict_0 = {str_0: str_0}
    str_1 = '7%\tIh9j lNP'
    str_2 = 'DAR'
    dict_1 = {str_0: str_0, str_1: str_0, str_2: str_2}
    parser_0 = module_0.Parser(dict_0, dict_0, dict_1)
    str_3 = parser_0.compile()
    bool_0 = False
    str_4 = 'typing.Counter'
    str_5 = 'collections.OrderedDict'
    str_6 = '?2,W{Ru$umco)J2W'
    str_7 = 'zySlqnx\nrV!eK#=3am?'
    str_8 = ''
    dict_2 = {str_4: str_5, str_6: str_7, str_5: str_8}
    parser_1 = module_0.Parser(int_0, bool_0, dict_2)

def test_case_16():
    str_0 = 'ce'
    bool_0 = module_0.is_public_family(str_0)

def test_case_17():
    str_0 = 'm#w j'
    str_1 = module_0.parent(str_0)

def test_case_18():
    str_0 = 'C7<MPWj")9_6irj&yO\x0b\''
    str_1 = module_0.doctest(str_0)

def test_case_19():
    list_0 = []
    stmt_0 = None
    bool_0 = True
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, dict_0)
    str_0 = 'ezIO9s>-p*XY\x0cbI'
    bool_1 = module_0.is_public_family(str_0)
    list_1 = [list_0, list_0, stmt_0]
    import_from_0 = module_1.ImportFrom(*list_1)
    parser_0.imports(str_0, import_from_0)

def test_case_20():
    bool_0 = True
    str_0 = 'lkegPc*\tzlTG%O*K'
    str_1 = '@5'
    dict_0 = {str_0: str_0, str_1: str_1}
    dict_1 = {}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1)
    str_2 = '/'
    import_from_0 = module_1.ImportFrom()
    parser_0.imports(str_2, import_from_0)
    var_0 = parser_0.__post_init__()

def test_case_21():
    str_0 = 'zi'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    str_1 = '@F%u~ILIBEh#3\x0b'
    bool_0 = module_0.is_magic(str_0)
    list_0 = [str_1]
    resolver_0 = module_0.Resolver(str_0, dict_0)
    subscript_0 = module_1.Subscript(*list_0)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
    import_0 = module_1.Import(*list_0)

def test_case_22():
    str_0 = ''
    str_1 = None
    str_2 = '2*;./T6:`2(S'
    str_3 = 'c'
    str_4 = ',?29IfnP(wRqB'
    dict_0 = {str_2: str_0, str_3: str_4}
    resolver_0 = module_0.Resolver(str_1, dict_0)
    str_5 = module_0.code(str_0)
    str_6 = 'qm\rk'
    int_0 = 764
    dict_1 = {str_6: int_0}
    dict_2 = None
    dict_3 = {}
    parser_0 = module_0.Parser(dict_1, dict_2, dict_3)

def test_case_23():
    list_0 = []
    list_1 = [list_0]
    str_0 = ',:hQ1J\\ht\nJ:\x0c_AiI*'
    dict_0 = {str_0: list_0, str_0: list_0, str_0: list_1}
    constant_0 = module_1.Constant(*list_1, **dict_0)
    str_1 = '$DYPV\n'
    str_2 = '=('
    str_3 = ''
    str_4 = None
    dict_1 = {str_1: str_1, str_2: str_3, str_3: str_1, str_1: str_4}
    resolver_0 = module_0.Resolver(str_1, dict_1)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)

def test_case_24():
    str_0 = '=N)1p\n'
    bool_0 = module_0.is_public_family(str_0)
    str_1 = '__'
    str_2 = '~^*/MUm4'
    str_3 = module_0.esc_underscore(str_1)
    str_4 = 'hgGAUh^_;H\x0bhx~'
    str_5 = '{c5w]-E<oNPI'
    dict_0 = {str_4: str_5, str_3: str_5, str_2: str_3}
    parser_0 = module_0.Parser(dict_0)
    str_6 = '/f'
    resolver_0 = module_0.Resolver(str_6, dict_0)

def test_case_25():
    expr_0 = module_1.expr()
    str_0 = 'zi'
    bool_0 = False
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0, dict_0, dict_0)
    str_1 = '@|'
    str_2 = module_0.const_type(expr_0)
    list_0 = [str_0]
    name_0 = module_1.Name(*list_0)
    resolver_0 = module_0.Resolver(str_1, dict_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    str_3 = '}\\`ll`aB1\r3X/wj+v'
    bool_1 = module_0.is_public_family(str_3)
    resolver_1 = module_0.Resolver(str_3, dict_0, str_0)
    a_s_t_1 = resolver_1.visit_Name(name_0)
    ann_assign_0 = module_1.AnnAssign(*list_0)
    str_4 = 'Hb`3m;'
    parser_0.globals(str_4, ann_assign_0)

def test_case_26():
    int_0 = -1414
    str_0 = 'e{o;!w0eX'
    str_1 = 'NM'
    bool_0 = False
    parser_0 = module_0.Parser(bool_0, int_0)
    parser_0.parse(str_0, str_1)
    int_1 = -377
    int_2 = 1448
    str_2 = 'L=]V`?cl'
    str_3 = '2CKcj#:tGkn^cH'
    int_3 = 2731
    str_4 = 'H'
    expr_0 = module_1.expr()
    str_5 = 'X{1jTI$xMM'
    str_6 = 'u'
    dict_0 = {str_1: int_1, str_1: int_0, str_5: int_2, str_2: int_2, str_3: int_3, str_4: int_1}
    str_7 = '\n\x0cc'
    str_8 = '__'
    str_9 = 'YV`xg,>KYBo4-Y[\nr'
    str_10 = ''
    dict_1 = {str_7: str_6, str_8: str_9, str_4: str_10}
    parser_1 = module_0.Parser(int_1, dict_0, dict_1, dict_1)
    var_0 = parser_1.__post_init__()
    str_11 = parser_0.compile()

def test_case_27():
    str_0 = 'zi'
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0, dict_0, dict_0)
    expr_0 = None
    str_1 = module_0.const_type(expr_0)
    list_0 = []
    bytes_0 = b'"\xb8\xf8'
    bool_1 = module_0.is_magic(str_0)
    list_1 = [bytes_0, str_0]
    parser_0.class_api(str_0, str_0, list_0, list_1)
    list_2 = [str_0]
    resolver_0 = module_0.Resolver(str_0, dict_0)
    str_2 = '1sAV={{U_$E6RY}0JDue'
    dict_1 = {str_2: bytes_0}
    constant_0 = module_1.Constant(*list_2, **dict_1)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)
    subscript_0 = module_1.Subscript(*list_2)
    a_s_t_1 = resolver_0.visit_Subscript(subscript_0)
    bool_2 = module_0.is_magic(str_0)
    str_3 = 'b+(hES5\n&C\\$ZG{o'
    bool_3 = module_0.is_magic(str_3)

def test_case_28():
    str_0 = '\n>>> a = 1\n>>> a\n1\n'
    str_1 = module_0.doctest(str_0)
    str_2 = '\n>>> a = 1\n>>> a\n1\n>>> a = 1\n>>> a\n1\n>>> a = 1\n>>> a\n1\n>>> a = 1\n>>> a\n1\n'
    str_3 = module_0.doctest(str_2)

def test_case_29():
    str_0 = 'Hello world.'
    str_1 = module_0.doctest(str_0)
    str_2 = ">>> print('Hello world.')"
    str_3 = module_0.doctest(str_2)
    str_4 = ">>> print('Hello world.')\nHello world."
    str_5 = module_0.doctest(str_4)
    str_6 = module_0.doctest(str_3)

def test_case_30():
    bool_0 = False
    parser_0 = module_0.Parser(bool_0)
    str_0 = 'a'
    str_1 = 'CLASS: str\n'
    var_0 = module_1.parse(str_1)
    var_1 = var_0.body[bool_0]
    parser_0.globals(str_0, var_1)
    str_2 = 'CONST: int\n'
    var_2 = module_1.parse(str_2)
    var_3 = var_2.body[bool_0]
    parser_0.globals(str_0, var_3)
    str_3 = '__all__ = [1, 2]\n'
    var_4 = module_1.parse(str_3)
    var_5 = var_4.body[bool_0]
    parser_0.globals(str_0, var_5)

def test_case_31():
    int_0 = 0
    str_0 = 'Ek'
    var_0 = module_1.parse(str_0)
    var_1 = var_0.body[int_0]
    var_2 = var_1.value
    var_3 = module_1.parse(str_0)
    var_4 = var_3.body[int_0]
    var_5 = var_4.value
    str_1 = module_0.const_type(var_5)
    str_2 = 'None'
    var_6 = module_1.parse(str_2)
    var_7 = var_6.body[int_0]
    var_8 = var_7.value
    var_9 = module_1.parse(str_1)
    var_10 = var_9.body[int_0]
    str_3 = module_0.const_type(var_9)
    var_11 = module_1.parse(str_0)
    var_12 = var_11.body[int_0]
    var_13 = var_12.value
    str_4 = '3.14+2j'
    var_14 = module_1.parse(str_4)
    var_15 = var_14.body[int_0]
    var_16 = var_15.value
    str_5 = '"string"'
    var_17 = module_1.parse(str_5)
    str_6 = module_0.const_type(str_1)
    str_7 = '"".join()'
    var_18 = module_1.parse(str_7)
    var_19 = var_18.body[int_0]
    var_20 = var_19.value
    str_8 = module_0.const_type(var_20)

def test_case_32():
    int_0 = 0
    str_0 = 'Ek'
    var_0 = module_1.parse(str_0)
    var_1 = var_0.body[int_0]
    var_2 = var_1.value
    str_1 = module_0.const_type(var_2)
    str_2 = 'False'
    var_3 = module_1.parse(str_2)
    var_4 = var_3.body[int_0]
    var_5 = var_4.value
    str_3 = module_0.const_type(var_5)
    str_4 = 'None'
    var_6 = module_1.parse(str_4)
    var_7 = var_6.body[int_0]
    var_8 = var_7.value
    var_9 = module_1.parse(str_3)
    var_10 = var_9.body[int_0]
    var_11 = var_10.value
    str_5 = module_0.const_type(var_11)
    var_12 = module_1.parse(str_0)
    var_13 = var_12.body[int_0]
    var_14 = var_13.value
    str_6 = module_0.const_type(var_14)
    str_7 = '3.14+2j'
    var_15 = module_1.parse(str_7)
    var_16 = var_15.body[int_0]
    str_8 = module_0.const_type(str_5)
    str_9 = '"string"'
    var_17 = module_1.parse(str_9)
    var_18 = var_4.value
    str_10 = module_0.const_type(var_18)
    str_11 = '"".join()'
    var_19 = module_1.parse(str_11)
    var_20 = var_19.body[int_0]
    var_21 = var_20.value
    str_12 = module_0.const_type(var_21)

def test_case_33():
    str_0 = 'z=J'
    import_from_0 = module_1.ImportFrom()
    int_0 = 0
    str_1 = 'aX!^c5GL"cP1M'
    str_2 = ';WP'
    dict_0 = {str_1: str_0, str_1: str_2}
    parser_0 = module_0.Parser(int_0, dict_0)
    parser_0.imports(str_0, import_from_0)
    str_3 = 'W~>.?'
    bool_0 = False
    int_1 = 3384
    parser_1 = module_0.Parser(bool_0, int_1)
    parser_1.parse(str_3, str_0)