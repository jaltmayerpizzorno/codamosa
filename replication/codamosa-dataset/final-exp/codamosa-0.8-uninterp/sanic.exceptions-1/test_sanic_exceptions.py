# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 417
    header_not_found_0 = module_0.HeaderNotFound(int_0)

def test_case_2():
    str_0 = 'Connection lost before response written @ '
    int_0 = 508
    header_expectation_failed_0 = module_0.HeaderExpectationFailed(str_0, int_0)
    forbidden_0 = module_0.Forbidden(header_expectation_failed_0)
    int_1 = None
    py_file_error_0 = module_0.PyFileError(int_1)
    header_not_found_0 = module_0.HeaderNotFound(forbidden_0, py_file_error_0)
    server_error_0 = module_0.ServerError(header_not_found_0)

def test_case_3():
    request_timeout_0 = None
    bytes_0 = b'o:\xcc\xe3K\xd1\x87\t\xb6\xe4Q\xf7'
    payload_too_large_0 = module_0.PayloadTooLarge(request_timeout_0, bytes_0)
    u_r_l_build_error_0 = module_0.URLBuildError(payload_too_large_0)
    set_0 = None
    invalid_signal_0 = module_0.InvalidSignal(set_0)
    list_0 = []
    unauthorized_0 = module_0.Unauthorized(invalid_signal_0, list_0, u_r_l_build_error_0)

def test_case_4():
    float_0 = 432.55799
    bool_0 = True
    tuple_0 = ()
    load_file_exception_0 = module_0.LoadFileException(tuple_0)
    not_found_0 = module_0.NotFound(load_file_exception_0)
    forbidden_0 = module_0.Forbidden(float_0, bool_0, not_found_0)

def test_case_5():
    set_0 = set()
    not_found_0 = module_0.NotFound(set_0)
    str_0 = '" not found.'
    str_1 = 'J'
    dict_0 = {str_0: set_0, str_1: set_0, str_1: str_1}
    unauthorized_0 = module_0.Unauthorized(not_found_0, **dict_0)
    bytes_0 = b'LgDzU\x02'
    str_2 = None
    var_0 = module_0.add_status_code(str_2)
    int_0 = 500
    u_r_l_build_error_0 = module_0.URLBuildError(int_0)
    list_0 = [bytes_0, bytes_0, bytes_0]
    u_r_l_build_error_1 = module_0.URLBuildError(list_0)