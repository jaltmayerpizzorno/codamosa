# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        int_0 = None
        header_not_found_0 = module_0.HeaderNotFound(int_0)
        list_0 = [header_not_found_0, header_not_found_0]
        list_1 = []
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(int_0, list_0, list_1)
        server_error_0 = module_0.ServerError(header_expectation_failed_0)
        server_error_1 = module_0.ServerError(header_not_found_0, server_error_0)
        header_not_found_1 = module_0.HeaderNotFound(server_error_1)
        tuple_0 = ()
        load_file_exception_0 = module_0.LoadFileException(header_expectation_failed_0, tuple_0)
        str_0 = ''
        unauthorized_0 = module_0.Unauthorized(header_expectation_failed_0)
        method_not_supported_0 = module_0.MethodNotSupported(load_file_exception_0, str_0, unauthorized_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 2187
        str_0 = 'T):k)e '
        u_r_l_build_error_0 = module_0.URLBuildError(str_0)
        list_0 = [int_0, u_r_l_build_error_0, str_0, u_r_l_build_error_0]
        payload_too_large_0 = None
        file_not_found_0 = module_0.FileNotFound(int_0, list_0, payload_too_large_0)
        str_1 = 'Could not generate a name for handler'
        service_unavailable_0 = module_0.ServiceUnavailable(str_1)
        tuple_0 = ()
        header_not_found_0 = module_0.HeaderNotFound(service_unavailable_0, tuple_0)
        load_file_exception_0 = module_0.LoadFileException(payload_too_large_0, header_not_found_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        server_error_0 = module_0.ServerError(dict_0)
        forbidden_0 = module_0.Forbidden(server_error_0)
        dict_1 = {dict_0: dict_0, dict_0: server_error_0, server_error_0: dict_0}
        float_0 = 1023.66
        content_range_error_0 = module_0.ContentRangeError(dict_1, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 416
        str_0 = 'S'
        var_0 = module_0.abort(int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -3252
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = None
        header_not_found_0 = module_0.HeaderNotFound(bytes_0)
        bool_0 = False
        int_0 = 201
        u_r_l_build_error_0 = module_0.URLBuildError(int_0)
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(bool_0, u_r_l_build_error_0)
        int_1 = 500
        var_0 = module_0.abort(int_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 607
        int_1 = 106
        sanic_exception_0 = module_0.SanicException(int_1)
        dict_0 = {sanic_exception_0: sanic_exception_0, int_0: int_1, int_0: int_0, sanic_exception_0: int_1}
        invalid_signal_0 = None
        list_0 = [invalid_signal_0, int_1, dict_0, invalid_signal_0]
        str_0 = '3~[(N=!fXw'
        server_error_0 = module_0.ServerError(str_0)
        var_0 = module_0.add_status_code(list_0, server_error_0)
        set_0 = set()
        tuple_0 = (set_0,)
        py_file_error_0 = module_0.PyFileError(tuple_0)
        str_1 = '\n        Determine request scheme.\n        1. `config.SERVER_NAME` if in full URL format\n        2. proxied proto/scheme\n        3. local connection protocol\n\n        :return: http|https|ws|wss or arbitrary value given by the headers.\n        :rtype: str\n        '
        service_unavailable_0 = module_0.ServiceUnavailable(str_1)
        unauthorized_0 = module_0.Unauthorized(list_0, py_file_error_0, service_unavailable_0)
        invalid_usage_0 = module_0.InvalidUsage(unauthorized_0)
        str_2 = ''
        str_3 = 'mP"'
        set_1 = {invalid_signal_0}
        dict_1 = {str_2: str_2, str_2: dict_0, str_3: set_1}
        header_not_found_0 = module_0.HeaderNotFound(dict_1)
        unauthorized_1 = module_0.Unauthorized(list_0, **dict_1)
        float_0 = -1709.7827
        server_error_1 = module_0.ServerError(float_0)
        float_1 = -3130.132
        header_not_found_1 = module_0.HeaderNotFound(float_1)
        bool_0 = False
        bool_1 = False
        forbidden_0 = module_0.Forbidden(bool_1)
        file_not_found_0 = module_0.FileNotFound(header_not_found_1, bool_0, forbidden_0)
        bytes_0 = b'^\xbe\xb1G\x1b\xf9g\xca\xba\xae\xd0\x19\x89\xcf'
        service_unavailable_1 = module_0.ServiceUnavailable(server_error_1, bytes_0)
        load_file_exception_0 = module_0.LoadFileException(service_unavailable_1, dict_1)
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(dict_0)
        bytes_1 = b'\x9f]\x83\x1e[_\xde\xfe`\x18\xba'
        unauthorized_2 = module_0.Unauthorized(header_expectation_failed_0, bytes_1, sanic_exception_0, **dict_1)
        invalid_range_type_0 = module_0.InvalidRangeType(set_0, unauthorized_2)
    except BaseException:
        pass