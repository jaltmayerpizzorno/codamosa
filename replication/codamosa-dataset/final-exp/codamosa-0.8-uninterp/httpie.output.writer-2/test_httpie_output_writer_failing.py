# Automatically generated by Pynguin.
import requests.models as module_0
import httpie.context as module_1
import argparse as module_2
import httpie.output.writer as module_3
import typing as module_4
import httpie.models as module_5
import httpie.output.streams as module_6

def test_case_0():
    try:
        prepared_request_0 = module_0.PreparedRequest()
        environment_0 = module_1.Environment()
        namespace_0 = module_2.Namespace()
        float_0 = 1079.1
        var_0 = module_3.write_message(prepared_request_0, environment_0, namespace_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'KskBh(2X\rn1 yU\x0b0'
        prepared_request_0 = module_0.PreparedRequest()
        environment_0 = module_1.Environment()
        namespace_0 = module_2.Namespace()
        var_0 = module_3.write_message(prepared_request_0, environment_0, namespace_0)
        var_1 = module_3.write_stream(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'chunk'
        var_0 = module_3.write_stream(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        environment_0 = module_1.Environment()
        var_0 = environment_0.__repr__()
        var_1 = environment_0.__repr__()
        base_stream_0 = None
        text_i_o_0 = module_4.TextIO()
        bool_0 = False
        var_2 = module_3.write_stream_with_colors_win_py3(base_stream_0, text_i_o_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'italic'
        str_1 = '$'
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
        h_t_t_p_message_0 = module_5.HTTPMessage(dict_0)
        set_0 = {str_0, str_1}
        base_stream_0 = module_6.BaseStream(h_t_t_p_message_0, set_0)
        text_i_o_0 = None
        bool_0 = False
        var_0 = module_3.write_stream_with_colors_win_py3(base_stream_0, text_i_o_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        environment_0 = module_1.Environment()
        namespace_0 = None
        tuple_0 = module_3.get_stream_type_and_kwargs(environment_0, namespace_0)
    except BaseException:
        pass

def test_case_6():
    try:
        prepared_request_0 = module_0.PreparedRequest()
        environment_0 = module_1.Environment()
        namespace_0 = module_2.Namespace()
        bool_0 = True
        var_0 = module_3.write_message(prepared_request_0, environment_0, namespace_0, bool_0, bool_0)
    except BaseException:
        pass