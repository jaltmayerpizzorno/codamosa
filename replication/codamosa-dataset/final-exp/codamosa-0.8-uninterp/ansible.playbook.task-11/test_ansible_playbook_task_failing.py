# Automatically generated by Pynguin.
import ansible.playbook.task as module_0
import ansible.parsing.yaml.objects as module_1

def test_case_0():
    try:
        int_0 = 236
        int_1 = -833
        bytes_0 = b'<s'
        str_0 = '@X\t\x0cSmc0,o#S'
        task_0 = module_0.Task(int_1, bytes_0, str_0)
        var_0 = task_0.get_name(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.preprocess_data(task_0)
    except BaseException:
        pass

def test_case_2():
    try:
        task_0 = module_0.Task()
        var_0 = {}
        var_1 = task_0.deserialize(var_0)
        list_0 = [var_1, var_0, task_0, var_1]
        dict_0 = {task_0: list_0, var_1: var_1}
        var_2 = task_0.load(dict_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        task_0 = module_0.Task()
        tuple_0 = None
        var_0 = task_0.post_validate(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 252
        int_1 = -2712
        set_0 = {int_1, int_1, int_1, int_1}
        task_0 = module_0.Task(set_0)
        task_1 = module_0.Task(int_1, task_0)
        var_0 = task_1.post_validate(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        task_0 = module_0.Task()
        str_0 = 'action'
        str_1 = 'dleat1_vacts'
        str_2 = 'loop_control'
        str_3 = 'set_fact'
        bool_0 = True
        str_4 = 'loop_var'
        str_5 = 'Muem'
        str_6 = {str_4: str_5}
        task_1 = module_0.Task(task_0)
        str_7 = 'uSz|'
        var_0 = task_1.set_loader(str_7)
        var_1 = task_1.get_vars()
        var_2 = {str_0: str_3, str_1: bool_0, str_2: str_6}
        var_3 = task_0.load_data(var_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'foo+'
        var_0 = dict(action=str_0)
        task_0 = module_0.Task()
        task_1 = module_0.Task(task_0)
        var_1 = task_1.serialize()
        str_1 = '!_d\\T*m1'
        task_2 = module_0.Task(str_1)
        var_2 = task_1.preprocess_data(var_0)
        float_0 = 0.001
        var_3 = task_1.get_include_params()
        var_4 = task_0.post_validate(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'pBUK:p&{b*W+vO`'
        task_0 = module_0.Task(str_0)
        var_0 = task_0.serialize()
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xa31\x07\xb0hi\x7f\xf6\xc2^'
        str_0 = 'ansible_become_flags'
        task_0 = module_0.Task(str_0)
        var_0 = task_0.__repr__()
        task_1 = module_0.Task()
        task_2 = module_0.Task(task_1)
        var_1 = task_1.get_first_parent_include()
        int_0 = None
        task_3 = module_0.Task(bytes_0)
        var_2 = task_3.set_loader(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.serialize()
        var_1 = task_0.get_name()
        var_2 = task_0.all_parents_static()
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = True
        bytes_0 = b'\\\x14\xeb\xc3\xc7\xc32\x9ag\xa8I('
        task_0 = module_0.Task(bool_0, bytes_0)
        var_0 = task_0.all_parents_static()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 140
        task_0 = module_0.Task(int_0)
        var_0 = task_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xa31\x07\xb0hi\x7f\xf6\xc2^'
        str_0 = 'ansible_become_flags'
        task_0 = module_0.Task(str_0)
        var_0 = task_0.copy(bytes_0)
        task_1 = module_0.Task()
        task_2 = module_0.Task(task_1)
        var_1 = task_1.get_first_parent_include()
        var_2 = task_2.get_name()
        var_3 = task_0.get_name()
        bytes_1 = b'\xfd\xae)\xe57\xfe>f^\xd7\xc3\xe9\xf59'
        var_4 = task_1.preprocess_data(bytes_1)
    except BaseException:
        pass

def test_case_13():
    try:
        task_0 = module_0.Task()
        float_0 = -3544.595
        task_1 = module_0.Task(float_0)
        var_0 = task_1.copy()
    except BaseException:
        pass

def test_case_14():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.serialize()
        var_1 = task_0.get_include_params()
        bytes_0 = b'\xa31\x07\xb0hi\x7f\xf6\xc2^'
        tuple_0 = ()
        str_0 = 'ansible_become_flags'
        bytes_1 = b'@\x03n\xc9\x86\xea\xdcod\xb6}\xcc\x0c'
        var_2 = task_0.set_loader(bytes_1)
        task_1 = module_0.Task(str_0)
        task_2 = module_0.Task(tuple_0, task_1)
        var_3 = task_2.copy(bytes_0)
        var_4 = task_2.serialize()
    except BaseException:
        pass

def test_case_15():
    try:
        task_0 = module_0.Task()
        var_0 = {}
        var_1 = task_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        var_0 = dict(action=str_0)
        task_0 = module_0.Task()
        var_1 = task_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\xa31\x07\xb0hi\x7f\xf6\xc2^'
        str_0 = 'ansible_become_flags'
        task_0 = module_0.Task(str_0)
        var_0 = task_0.copy(bytes_0)
        task_1 = module_0.Task()
        task_2 = module_0.Task(task_1)
        var_1 = task_2.serialize()
        var_2 = task_1.get_first_parent_include()
        var_3 = task_1.get_name()
        var_4 = task_1.get_vars()
        dict_0 = {}
        var_5 = task_2.preprocess_data(dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'vHTlQwh{$6c}[ e'
        var_0 = dict(action=str_0)
        task_0 = module_0.Task()
        var_1 = task_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_19():
    try:
        task_0 = module_0.Task()
        str_0 = '2'
        var_0 = dict(name=str_0, parent=str_0)
        task_1 = module_0.Task()
        var_1 = task_1.deserialize(var_0)
    except BaseException:
        pass

def test_case_20():
    try:
        task_0 = module_0.Task()
        str_0 = 'action'
        str_1 = '>S1'
        bool_0 = False
        str_2 = 'loop_var'
        str_3 = {str_2: str_2}
        var_0 = {str_0: str_2, str_2: str_2, str_1: bool_0, str_2: str_3}
        var_1 = task_0.load_data(var_0)
    except BaseException:
        pass

def test_case_21():
    try:
        task_0 = module_0.Task()
        str_0 = 'action'
        str_1 = 'delegate_to'
        str_2 = 'delegate_facts'
        str_3 = 'loop_control'
        str_4 = 'set_fact'
        str_5 = 'localhost'
        bool_0 = True
        str_6 = 'loop_var'
        var_0 = {str_0: str_4, str_1: str_5, str_2: bool_0, str_3: str_6}
        var_1 = task_0.load_data(var_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'foe+'
        task_0 = module_0.Task()
        task_1 = module_0.Task(task_0)
        list_0 = [str_0, str_0, task_0]
        task_2 = module_0.Task(task_0, list_0)
        var_0 = task_0.get_vars()
        var_1 = task_0.get_name(str_0)
        var_2 = task_2.get_vars()
        var_3 = task_2.get_first_parent_include()
        var_4 = task_1.serialize()
        task_3 = module_0.Task(str_0)
        var_5 = task_1.preprocess_data(var_4)
    except BaseException:
        pass

def test_case_23():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.get_first_parent_include()
        tuple_0 = (task_0,)
        task_1 = module_0.Task(tuple_0)
        var_1 = task_0.__repr__()
        var_2 = task_0.__repr__()
        task_2 = module_0.Task(task_0)
        var_3 = task_2.all_parents_static()
        var_4 = task_0.get_vars()
        var_5 = task_0.serialize()
        var_6 = task_0.copy()
        task_3 = module_0.Task()
        var_7 = task_3.get_name()
        var_8 = task_3.__repr__()
        var_9 = task_2.serialize()
        ansible_mapping_0 = module_1.AnsibleMapping()
        var_10 = task_2.load_data(ansible_mapping_0)
    except BaseException:
        pass