# Automatically generated by Pynguin.
import tornado.options as module_0
import typing as module_1

def test_case_0():
    try:
        str_0 = 'g$O\tlfp`gzj\x0c>l?U-"'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'yR'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        str_1 = 'Call the given callback when the stream is closed.\n\n        This mostly is not necessary for applications that use the\n        `.Future` interface; all outstanding ``Futures`` will resolve\n        with a `StreamClosedError` when the stream is closed. However,\n        it is still useful as a way to signal that the stream has been\n        closed while no other read or write is in progress.\n\n        Unlike other callback-based interfaces, ``set_close_callback``\n        was not removed in Tornado 6.0.\n        '
        option_parser_1 = module_0.OptionParser()
        bool_0 = option_parser_1.__contains__(str_1)
        option_parser_2 = module_0.OptionParser()
        option_parser_2.define(str_0)
        str_2 = "Loads translations from `gettext`'s locale tree\n\n    Locale tree is similar to system's ``/usr/share/locale``, like::\n\n        {directory}/{lang}/LC_MESSAGES/{domain}.mo\n\n    Three steps are required to have your app translated:\n\n    1. Generate POT translation file::\n\n        xgettext --language=Python --keyword=_:1,2 -d mydomain file1.py file2.html etc\n\n    2. Merge against existing POT file::\n\n        msgmerge old.po mydomain.po > new.po\n\n    3. Compile::\n\n        msgfmt mydomain.po -o {directory}/pt_BR/LC_MESSAGES/mydomain.mo\n    "
        bool_1 = True
        str_3 = 'HZf[J'
        bool_2 = option_parser_1.__contains__(str_3)
        list_0 = module_0.parse_command_line(str_2, bool_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'J3%gZ:=%8H;pda7NYjj?'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Yjpe\x0b!*9==b$qDp>0\x0c\r$'
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        dict_1 = option_parser_0.as_dict()
        option_parser_2 = module_0.OptionParser()
        any_0 = option_parser_2.__getitem__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = object()
        str_0 = 'mysql_host'
        bool_0 = False
        str_1 = 'O,hf]aL@w)Y4-&*oTBN}'
        text_i_o_0 = module_1.TextIO()
        option_parser_0 = module_0.OptionParser()
        str_2 = None
        dict_0 = option_parser_0.group_dict(str_2)
        option_parser_0.print_help(text_i_o_0)
        optional_0 = None
        list_0 = [var_0, optional_0]
        option_0 = module_0._Option(str_1, optional_0, bool_0, str_0, str_1, list_0)
        option_0.set(optional_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '9 TP->F'
        module_0.define(str_0)
        str_1 = 'KP}OxQT'
        bool_0 = True
        option_0 = module_0._Option(str_1, bool_0, str_0)
        any_0 = option_0.value()
        option_parser_0 = module_0.OptionParser()
        any_1 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Jbi}F?EP?G'
        list_0 = [str_0, str_0]
        option_parser_0 = module_0.OptionParser()
        list_1 = option_parser_0.parse_command_line(list_0)
        str_1 = None
        option_parser_1 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_1, option_parser_1)
    except BaseException:
        pass

def test_case_8():
    try:
        option_parser_0 = module_0.OptionParser()
        list_0 = option_parser_0.parse_command_line()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ';WF7'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        module_0.print_help()
    except BaseException:
        pass

def test_case_11():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = "NN\\:'96>hIeCKy"
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, option_parser_0)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = object()
        mockable_0 = module_0._Mockable(var_0)
        str_0 = 'value'
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Hcj\tNgI!kIdryF\\#0'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        str_0 = '+'
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_0.add_parse_callback(iterable_0)
        iterator_0 = option_parser_0.__iter__()
        str_1 = 'Ph}FCm*l6V`0,q|`b g'
        option_0 = module_0._Option(str_1, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '_fF\n0*-'
        str_1 = 'g!-h\\{.({rA^.3-'
        option_0 = module_0._Option(str_1, str_1, str_1)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'cT4J\x0b8AtI/|n2^'
        bool_0 = False
        module_0.define(str_0, bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '/input/tornado/log.py'
        option_parser_0 = module_0.OptionParser()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help()
        int_0 = 10
        module_0.add_parse_callback(int_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_19():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = '--age=20'
        list_0 = option_parser_0.parse_command_line(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'mysql.com'
        list_0 = []
        error_0 = module_0.Error(*list_0)
        bool_0 = False
        optional_0 = None
        list_1 = [str_0, optional_0]
        option_0 = module_0._Option(str_0, optional_0, bool_0, str_0, str_0, list_1)
        list_2 = []
        option_parser_0 = module_0.OptionParser()
        list_3 = option_parser_0.parse_command_line(list_2)
        option_0.set(list_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'g!-h\\{.({rA^.3-'
        option_0 = module_0._Option(str_0, str_0, str_0)
        option_0.set(option_0)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = object()
        str_0 = 'X'
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        option_parser_2 = module_0.OptionParser()
        iterable_0 = option_parser_2.items()
        bool_0 = False
        list_0 = option_parser_1.parse_command_line(iterable_0, bool_0)
        dict_0 = option_parser_0.group_dict(str_0)
        list_1 = []
        error_0 = module_0.Error(*list_1)
        bool_1 = False
        str_1 = 'O,hf]aL@w)Y4-&*oTBN}'
        option_parser_3 = module_0.OptionParser()
        text_i_o_0 = module_1.TextIO()
        option_parser_4 = module_0.OptionParser()
        option_parser_4.print_help(text_i_o_0)
        error_1 = module_0.Error()
        optional_0 = None
        list_2 = [var_0, optional_0]
        optional_1 = None
        option_0 = module_0._Option(str_1, optional_1, bool_1, str_0, str_1, list_2)
        option_0.set(list_1)
        option_parser_5 = module_0.OptionParser()
        list_3 = option_parser_5.parse_command_line()
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = False
        error_0 = module_0.Error()
        str_0 = 'O,hf]aL@w)Y4-&*oTBN}'
        optional_0 = None
        list_0 = None
        option_0 = module_0._Option(str_0, optional_0, bool_0, str_0, str_0, list_0)
        int_0 = -18
        option_0.set(list_0)
        option_0.set(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        option_parser_0 = module_0.OptionParser()
        var_0 = iter(option_parser_0)
        var_1 = next(var_0)
        var_2 = next(var_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'midnight'
        bool_0 = False
        optional_0 = None
        list_0 = [str_0, optional_0]
        option_0 = module_0._Option(str_0, optional_0, bool_0, str_0, str_0, list_0)
        option_0.set(list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        var_0 = object()
        str_0 = 'mysql.com'
        bool_0 = False
        optional_0 = None
        list_0 = [var_0, optional_0]
        option_0 = module_0._Option(str_0, optional_0, bool_0, str_0, str_0, list_0)
        option_0.set(optional_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '\r9M3:T1AiEH'
        str_1 = 'dNU}B'
        str_2 = ']\\P6N^c Fj'
        bool_0 = True
        option_0 = module_0._Option(str_2, str_2, str_2, bool_0, str_2, str_0)
        any_0 = option_0.parse(str_1)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '/input/tornado/log.py'
        error_0 = module_0.Error()
        option_parser_0 = module_0.OptionParser()
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = "O&$:p&&'U?^@j?+RM,"
        option_parser_1 = module_0.OptionParser()
        dict_0 = option_parser_1.group_dict(str_0)
        error_0 = module_0.Error()
        str_1 = '/input/tornado/log.py'
        option_parser_1.parse_config_file(str_1)
        str_2 = ''
        option_parser_1.__setattr__(str_2, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        var_0 = object()
        str_0 = '4Xn"kK'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        list_0 = [str_0, var_0, str_0]
        error_0 = module_0.Error(*list_0)
        bool_0 = False
        str_1 = 'O,hf]aL@w)Y4-&*oTBN}'
        text_i_o_0 = module_1.TextIO()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.print_help(text_i_o_0)
        optional_0 = None
        option_parser_1.add_parse_callback(str_1)
        mockable_0 = module_0._Mockable(option_parser_1)
        list_1 = None
        option_0 = module_0._Option(str_1, optional_0, bool_0, str_1, str_1, list_1)
        option_0.set(list_1)
        any_0 = option_0.value()
        option_0.set(error_0)
    except BaseException:
        pass

def test_case_31():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'D[ysnal,DCs!;rvYe'
        option_parser_0.define(str_0, str_0)
        var_0 = [str_0]
        float_0 = 0.0
        module_0.add_parse_callback(float_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        mockable_0.__setattr__(str_0, var_0)
    except BaseException:
        pass