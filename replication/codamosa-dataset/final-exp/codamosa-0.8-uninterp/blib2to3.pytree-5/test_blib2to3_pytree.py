# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1
import _io as module_2

def test_case_0():
    pass

def test_case_1():
    int_0 = 1074
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    int_0 = 3
    str_0 = 'abc'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2394
    list_0 = [leaf_0]
    node_0 = module_0.Node(int_1, list_0)
    str_1 = node_0.__str__()
    optional_0 = leaf_0.remove()

def test_case_3():
    int_0 = 6010
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_4():
    int_0 = 2
    str_0 = ''
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_5():
    int_0 = 22
    str_0 = 'V3"UK6^!"-'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    str_1 = leaf_1.__repr__()
    str_2 = leaf_1.__repr__()

def test_case_6():
    int_0 = 3
    str_0 = '_Re*:@i#lX'
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_7():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_8():
    str_0 = '\n'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_9():
    int_0 = 1885
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    node_3 = node_2.clone()
    node_4 = node_3.clone()
    node_5 = node_4.clone()
    list_1 = [node_5, node_0, node_1, node_3]
    str_0 = 'f@]=:3 s:[vH2%u'
    node_6 = module_0.Node(int_0, list_1, str_0, int_0)

def test_case_10():
    int_0 = 30
    str_0 = ';7"K0D9'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_11():
    str_0 = ',Ffa{EK['
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_12():
    int_0 = 1074
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(node_0)

def test_case_13():
    str_0 = '\r'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_14():
    grammar_0 = module_1.Grammar()
    str_0 = '\n'
    int_0 = 16
    str_1 = 'zN{:M\\[pQPc]g+3'
    leaf_0 = module_0.Leaf(int_0, str_1)
    leaf_1 = leaf_0.clone()
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_15():
    int_0 = 3
    str_0 = 'abc'
    leaf_0 = module_0.Leaf(int_0, str_0)
    optional_0 = leaf_0.remove()

def test_case_16():
    var_0 = None
    negated_pattern_0 = module_0.NegatedPattern(var_0)
    var_1 = [var_0]
    iterator_0 = negated_pattern_0.generate_matches(var_1)
    var_2 = list(iterator_0)
    int_0 = 59
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    string_i_o_0 = module_2.StringIO()

def test_case_17():
    int_0 = 3
    str_0 = 'abc'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2394
    list_0 = [leaf_0]
    node_0 = module_0.Node(int_1, list_0)
    str_1 = node_0.__str__()
    optional_0 = node_0.get_lineno()

def test_case_18():
    int_0 = 6010
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    optional_0 = node_0.get_lineno()

def test_case_19():
    str_0 = 'u'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    list_0 = []
    bool_0 = wildcard_pattern_0.match_seq(list_0)

def test_case_20():
    int_0 = 350
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    int_1 = node_0.depth()

def test_case_21():
    int_0 = 48
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    leaf_pattern_1 = (leaf_pattern_0,)
    leaf_pattern_2 = [leaf_pattern_1, leaf_pattern_1, leaf_pattern_1]
    wildcard_pattern_0 = module_0.WildcardPattern(leaf_pattern_2)
    set_0 = None
    bool_0 = wildcard_pattern_0.match(set_0)

def test_case_22():
    int_0 = 1
    str_0 = 'hello'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.leaves()
    var_0 = list(iterator_0)
    var_1 = print(var_0)

def test_case_23():
    int_0 = 48
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    leaf_pattern_1 = (leaf_pattern_0,)
    leaf_pattern_2 = [leaf_pattern_1]
    wildcard_pattern_0 = module_0.WildcardPattern(leaf_pattern_2)
    str_0 = 'rb'
    tuple_0 = None
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_0)
    bytes_0 = None
    bool_0 = wildcard_pattern_0.match(leaf_0, bytes_0)