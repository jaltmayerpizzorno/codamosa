# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1
import os as module_2
import _io as module_3

def test_case_0():
    try:
        int_0 = 2179
        str_0 = 'f0Ij@;]Y'
        leaf_0 = module_0.Leaf(int_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'tK>[dOa\t:G !F'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = 690
        none_type_0 = None
        tuple_0 = (int_0, str_0, none_type_0, str_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_4():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 6
        str_0 = 'Hvep:/L'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = {int_0, int_0, wildcard_pattern_0}
        negated_pattern_0 = module_0.NegatedPattern(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 2804
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = wildcard_pattern_0.match(negated_pattern_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 2943
        list_0 = []
        any_0 = None
        node_0 = module_0.Node(int_0, list_0, any_0)
        list_1 = [node_0, node_0]
        node_1 = module_0.Node(int_0, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 108
        list_0 = []
        list_1 = [int_0, list_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -1765
        str_0 = 'static arc arcs_(\\d+)_(\\d+)\\[(\\d+)\\] = {$'
        leaf_0 = module_0.Leaf(int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '|[^XYvC;.,{E'
        dict_0 = {str_0: str_0}
        base_pattern_0 = module_0.BasePattern(**dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '&'
        int_0 = 1983
        list_0 = []
        int_1 = 1350
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1)
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_0, list_0, any_0, int_0)
        iterator_0 = node_0.pre_order()
        int_2 = node_0.depth()
        bool_0 = wildcard_pattern_0.match(int_2)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 2804
        str_0 = 'bare_name'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        negated_pattern_0 = module_0.NegatedPattern()
        dict_0 = {str_0: str_0}
        set_0 = {wildcard_pattern_0, negated_pattern_0}
        bool_0 = negated_pattern_0.match(dict_0, set_0)
        bool_1 = wildcard_pattern_0.match(negated_pattern_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = -1184
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '{j$N'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 180
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        list_0 = []
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
        leaf_1 = leaf_0.clone()
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\nz'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 257
        int_1 = 16
        str_1 = 'Node'
        leaf_0 = module_0.Leaf(int_1, str_1)
        leaf_1 = leaf_0.clone()
        list_0 = [leaf_1, leaf_0]
        node_0 = module_0.Node(int_0, list_0, str_1)
        node_1 = node_0.clone()
        bool_0 = wildcard_pattern_0.match(node_1, node_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '0'
        int_0 = 752
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        bool_0 = wildcard_pattern_0.match(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = ':'
        int_0 = 13
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_0.clone()
        var_0 = leaf_pattern_0.match(leaf_0, int_0)
        path_like_0 = module_2.PathLike()
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -25
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        str_0 = '\n'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_1 = 3660
        wildcard_pattern_1 = module_0.WildcardPattern(str_0, int_0, int_1, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 263
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_2.clone()
        node_3.update_sibling_maps()
    except BaseException:
        pass

def test_case_21():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = 4
        int_1 = -62
        grammar_0 = module_1.Grammar()
        str_0 = 'J'
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        node_0 = None
        list_0 = [node_0]
        tuple_2 = (int_0, str_0, tuple_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
        wildcard_pattern_0 = module_0.WildcardPattern(int_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = -4970
        dict_0 = {str_0: wildcard_pattern_0, str_0: str_0}
        list_0 = []
        tuple_0 = (int_0, str_0, dict_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_23():
    try:
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 1807
        str_0 = "*\x0c)1&w@oY+i'"
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = -25
        int_1 = 812
        list_0 = []
        node_0 = module_0.Node(int_1, list_0)
        node_1 = node_0.clone()
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = -52
        str_0 = '0'
        int_1 = 759
        list_0 = [int_1, int_0, int_1]
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match_seq(list_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_1, int_1)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_1 = module_0.NegatedPattern()
        bool_1 = True
        str_1 = None
        tuple_0 = (bool_1, str_1)
        bool_2 = wildcard_pattern_0.match(negated_pattern_1, tuple_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'U\rvU1|(FC|}f'
        int_0 = 2779
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = -25
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        str_0 = '\n'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '.'
        int_0 = 427
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        str_1 = 'os.PathLike[str]'
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match(str_1, str_1)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '}'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        iterator_0 = negated_pattern_0.generate_matches(grammar_0)
        bool_0 = wildcard_pattern_0.match(iterator_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'qe>v9mZ\\BH\riyGsU$<t'
        int_0 = 3555
        int_1 = -3331
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '.'
        int_0 = 326
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        iterator_0 = node_0.post_order()
        int_1 = node_0.depth()
        node_1 = node_0.clone()
        string_i_o_0 = module_3.StringIO()
        node_0.append_child(node_1)
        dict_0 = {str_0: int_1, str_0: node_0, int_0: int_0, string_i_o_0: int_1}
        bool_0 = wildcard_pattern_0.match(dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 4674
        int_1 = 12
        str_0 = '.'
        tuple_0 = None
        leaf_0 = module_0.Leaf(int_1, str_0)
        iterator_0 = leaf_0.pre_order()
        leaf_1 = module_0.Leaf(int_1, str_0, tuple_0)
        list_0 = [leaf_1]
        bool_0 = None
        node_0 = module_0.Node(int_0, list_0, bool_0, str_0)
        list_1 = [node_0, leaf_1]
        node_1 = module_0.Node(int_0, list_1)
    except BaseException:
        pass

def test_case_34():
    try:
        grammar_0 = module_1.Grammar()
        str_0 = 'f%Q'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 1577
        int_1 = 42
        str_1 = '?Z@&H<nWr@rWq8.'
        leaf_pattern_0 = module_0.LeafPattern()
        iterator_0 = wildcard_pattern_0.generate_matches(leaf_pattern_0)
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_1, tuple_0)
        int_2 = 5
        str_2 = 'lj$$J`<%Xq%y\x0c!WFQ\x0bo'
        leaf_0 = module_0.Leaf(int_2, str_2)
        list_0 = []
        node_0 = module_0.Node(int_0, list_0, str_0)
        node_0.insert_child(int_0, leaf_0)
        node_1 = node_0.clone()
        node_1.append_child(leaf_0)
        iterator_1 = leaf_0.leaves()
        var_0 = leaf_pattern_0.match(leaf_0)
        leaf_1 = module_0.Leaf(int_1, str_1, tuple_1, str_0)
        list_1 = [leaf_1, leaf_1]
        negated_pattern_0 = module_0.NegatedPattern()
        int_3 = 19
        iterator_2 = node_0.post_order()
        tuple_2 = (int_3, str_0, tuple_1, list_1)
        var_1 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 1045
        int_1 = 2010
        node_pattern_0 = module_0.NodePattern(int_0, int_1)
    except BaseException:
        pass

def test_case_36():
    try:
        var_0 = None
        negated_pattern_0 = module_0.NegatedPattern(var_0)
        iterator_0 = negated_pattern_0.generate_matches(var_0)
        var_1 = []
        iterator_1 = negated_pattern_0.generate_matches(var_1)
        var_2 = list(iterator_1)
        int_0 = 59
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        int_1 = 60
        leaf_pattern_1 = module_0.LeafPattern(int_1)
        var_3 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 46
        str_0 = ';"\\+2k9'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
        var_0 = leaf_pattern_0.match(leaf_0)
        optional_0 = leaf_0.remove()
        int_1 = 6010
        list_0 = []
        node_0 = module_0.Node(int_1, list_0)
        node_1 = node_0.clone()
        var_1 = leaf_pattern_0.match(leaf_0, node_1)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = 1335
        grammar_0 = module_1.Grammar()
        str_0 = None
        optional_0 = None
        list_0 = []
        tuple_0 = (int_0, str_0, optional_0, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 1045
        list_0 = []
        node_pattern_0 = module_0.NodePattern(int_0, list_0)
        wildcard_pattern_0 = module_0.WildcardPattern(node_pattern_0)
    except BaseException:
        pass

def test_case_40():
    try:
        optional_0 = None
        list_0 = [optional_0]
        node_pattern_0 = module_0.NodePattern(optional_0, list_0)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 1919
        list_0 = None
        str_0 = 'CXN0ts\\&n#>3NU\r )9M'
        str_1 = ''
        dict_0 = {str_0: list_0, str_1: str_1, str_1: str_1}
        wildcard_pattern_0 = module_0.WildcardPattern(dict_0, int_0)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 256
        int_1 = 1
        str_0 = ''
        leaf_0 = module_0.Leaf(int_1, str_0)
        leaf_1 = module_0.Leaf(int_1, str_0)
        leaf_2 = [leaf_0, leaf_1]
        node_0 = module_0.Node(int_0, leaf_2)
        leaf_3 = module_0.Leaf(int_1, str_0)
        var_0 = leaf_1.next_sibling.prefix
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = ''
        int_0 = 2
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = module_0.Leaf(int_0, str_0)
        var_0 = leaf_0.next_sibling.prefix
    except BaseException:
        pass

def test_case_44():
    try:
        int_0 = 256
        int_1 = 1
        str_0 = ''
        leaf_0 = module_0.Leaf(int_1, str_0)
        int_2 = 2
        leaf_1 = module_0.Leaf(int_2, str_0)
        leaf_2 = [leaf_0, leaf_1]
        node_0 = module_0.Node(int_0, leaf_2)
        int_3 = 0
        node_0.set_child(int_3, leaf_1)
        int_4 = 0
        var_0 = node_0.children[int_4]
        var_1 = var_0.next_sibling.prefix
    except BaseException:
        pass

def test_case_45():
    try:
        int_0 = 16
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        int_1 = 60
        str_0 = 'UmPVF'
        leaf_0 = module_0.Leaf(int_1, str_0)
        leaf_1 = leaf_0.clone()
        var_0 = leaf_pattern_0.match(leaf_0)
        leaf_2 = leaf_0.clone()
        int_2 = 32
        str_1 = 'L\n]%}*AXy3":T'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_1, tuple_0)
        leaf_3 = module_0.Leaf(int_2, str_0, tuple_1)
        iterator_0 = leaf_3.post_order()
        node_pattern_0 = module_0.NodePattern(iterator_0)
    except BaseException:
        pass

def test_case_46():
    try:
        int_0 = 16
        int_1 = 3149
        list_0 = [int_1, int_1, int_1]
        leaf_pattern_0 = module_0.LeafPattern(int_0, list_0)
    except BaseException:
        pass

def test_case_47():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 357
        str_0 = ''
        str_1 = 'ab'
        int_1 = 996
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_1, tuple_0)
        int_2 = 481
        list_0 = []
        list_1 = [str_1, int_2, str_1, tuple_1]
        list_2 = [str_0, list_1]
        node_0 = module_0.Node(int_2, list_0, list_1, str_0, list_2)
        list_3 = [node_0, node_0, node_0]
        tuple_2 = (int_0, str_0, tuple_1, list_3)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = 1919
        list_0 = None
        str_0 = 'CXN0ts\\&n#>3NU\r )9M'
        dict_0 = {str_0: list_0, str_0: str_0, str_0: str_0}
        wildcard_pattern_0 = module_0.WildcardPattern(dict_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        list_1 = [wildcard_pattern_0, any_0]
        node_0 = module_0.Node(int_0, list_0, any_0, list_1)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = 'd'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        set_0 = set()
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 774
        bool_0 = wildcard_pattern_0.match_seq(set_0, int_0)
    except BaseException:
        pass