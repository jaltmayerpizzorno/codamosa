# Automatically generated by Pynguin.
import ansible.vars.manager as module_0
import ansible.inventory.host as module_1

def test_case_0():
    try:
        bytes_0 = b'\xe0\x12\xcc\xf3\xcc'
        var_0 = module_0.preprocess_vars(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        vars_with_sources_0 = module_0.VarsWithSources()
        list_0 = [vars_with_sources_0, vars_with_sources_0, vars_with_sources_0]
        var_0 = module_0.preprocess_vars(list_0)
        str_0 = 'ag<K[B6\x0cfI\nI'
        set_0 = {str_0, str_0, str_0}
        str_1 = '{/2I}p^_]kwEh'
        bytes_0 = b';\x99\x8f\x93t\xae4\x1e\xba-\xc2'
        variable_manager_0 = module_0.VariableManager(bytes_0)
        bool_0 = True
        dict_0 = {str_1: list_0, str_1: vars_with_sources_0, str_0: bool_0, str_1: var_0}
        var_1 = variable_manager_0.set_nonpersistent_facts(set_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.__getstate__()
        bytes_0 = b'\x01.\x8d\x97\x9dm\xd6\xd0\xdb\xc6{(\x8b|'
        str_0 = ''
        var_1 = variable_manager_0.set_nonpersistent_facts(bytes_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2194.4898
        list_0 = [float_0, float_0, float_0, float_0]
        float_1 = 0.001
        str_0 = '<mfb2-,v\x0b\x0b,(VK%nZ+l'
        tuple_0 = (list_0, float_1, str_0)
        str_1 = 'yZ\te=SeM\x0b\r[ i<~H'
        str_2 = 'R4y4\x0c~6=[DXWm\rGbxr)'
        str_3 = 'D]F\n\x0cYr.'
        str_4 = 'YF\x0bo%!H\x0b'
        dict_0 = {str_1: str_1, str_2: str_2, str_3: str_4}
        vars_with_sources_0 = module_0.VarsWithSources(**dict_0)
        variable_manager_0 = module_0.VariableManager(list_0)
        var_0 = variable_manager_0.__setstate__(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        variable_manager_0 = module_0.VariableManager()
        float_0 = 1152.04
        complex_0 = None
        str_0 = "'dzW\t{N5xU("
        float_1 = 2097.9272
        list_0 = []
        str_1 = '{G`C.\t:.App65,'
        str_2 = '"U'
        dict_0 = {str_0: float_1, str_1: float_0, str_2: complex_0}
        vars_with_sources_0 = module_0.VarsWithSources(*list_0, **dict_0)
        var_0 = variable_manager_0.get_vars(float_0, complex_0, str_0, float_1, str_0, vars_with_sources_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x7fhY\x96\xd0h3\xd2\x14\x02\x8bW\xafr\x00'
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__contains__(bytes_0)
        float_0 = None
        var_1 = vars_with_sources_0.__iter__()
        str_0 = None
        dict_0 = {str_0: bytes_0}
        variable_manager_0 = module_0.VariableManager(dict_0)
        var_2 = variable_manager_0.set_host_facts(float_0, vars_with_sources_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '6d04!qlmuFP>~*[K'
        tuple_0 = None
        list_0 = []
        list_1 = [list_0]
        variable_manager_0 = module_0.VariableManager(list_0, list_1)
        variable_manager_1 = module_0.VariableManager(list_0, variable_manager_0)
        var_0 = variable_manager_1.set_host_facts(str_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x03\xca\xc9I\xdb\xb1\xec \xf7\xa3'
        bool_0 = False
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.set_nonpersistent_facts(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        variable_manager_0 = module_0.VariableManager()
        var_0 = variable_manager_0.__getstate__()
        set_0 = set()
        str_0 = '4'
        dict_0 = {str_0: variable_manager_0, str_0: set_0}
        vars_with_sources_0 = module_0.VarsWithSources()
        vars_with_sources_1 = module_0.VarsWithSources()
        var_1 = vars_with_sources_0.__iter__()
        vars_with_sources_2 = module_0.VarsWithSources(**dict_0)
        var_2 = vars_with_sources_2.copy()
        var_3 = variable_manager_0.set_host_variable(set_0, variable_manager_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        bytes_0 = b'(W\x81\xcf&\xa3RJO'
        str_0 = 'ab"v&Q#CE'
        vars_with_sources_0 = module_0.VarsWithSources()
        var_0 = vars_with_sources_0.__len__()
        str_1 = ''
        str_2 = '!M#\tiA{!&IuLbz><h:r'
        dict_0 = {str_1: list_0, str_2: list_0}
        variable_manager_0 = module_0.VariableManager(dict_0)
        vars_with_sources_1 = module_0.VarsWithSources(*list_0)
        var_1 = vars_with_sources_1.get_source(str_0)
        variable_manager_1 = module_0.VariableManager(bytes_0)
        var_2 = variable_manager_1.clear_facts(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        vars_with_sources_0 = module_0.VarsWithSources()
        int_0 = 24
        str_0 = 'w~Q$}xpsk6O'
        var_0 = vars_with_sources_0.__setitem__(int_0, str_0)
        list_0 = [vars_with_sources_0, vars_with_sources_0, vars_with_sources_0]
        var_1 = module_0.preprocess_vars(list_0)
        str_1 = 'ag<K[B6\x0cfI\nI'
        set_0 = {str_1, str_1, str_1}
        str_2 = '{/2I}p^_]kwEh'
        str_3 = '8\n7<TxF:*u{K+7t?'
        dict_0 = None
        bytes_0 = b'\xbfY\xd6|\xad\xe8o`\x11\xbe5\x7f\x00c\xa9U'
        bytes_1 = b';\x99\x8f\x93t\xae4\x1e\xba-\xc2'
        variable_manager_0 = module_0.VariableManager(bytes_1)
        var_2 = variable_manager_0.set_host_variable(dict_0, bytes_0, list_0)
        bool_0 = True
        dict_1 = {str_2: list_0, str_2: vars_with_sources_0, str_3: bool_0, str_2: var_1}
        variable_manager_1 = module_0.VariableManager()
        var_3 = variable_manager_1.set_nonpersistent_facts(set_0, dict_1)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = []
        str_0 = None
        str_1 = '>'
        vars_with_sources_0 = module_0.VarsWithSources()
        variable_manager_0 = module_0.VariableManager(list_0)
        dict_0 = {str_0: str_1}
        str_2 = '1GMy3?p\x0b9<0jh'
        str_3 = '\\$f\\'
        str_4 = '\n    This class is responsible for interpreting the resulting data\n    from an executed task, and provides helper methods for determining\n    the result of a given task.\n    '
        dict_1 = {str_2: str_1, str_3: dict_0, str_4: list_0, str_1: str_3}
        vars_with_sources_1 = module_0.VarsWithSources(*list_0)
        var_0 = vars_with_sources_1.__delitem__(dict_1)
    except BaseException:
        pass

def test_case_12():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = '`jX(@5'
        vars_with_sources_0 = module_0.VarsWithSources()
        str_1 = '\n---\nmodule: debconf\nshort_description: Configure a .deb package\ndescription:\n     - Configure a .deb package using debconf-set-selections.\n     - Or just query existing selections.\nversion_added: "1.6"\nextends_documentation_fragment:\n- action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: full\n    platform:\n        support: full\n        platforms: debian\nnotes:\n    - This module requires the command line debconf tools.\n    - A number of questions have to be answered (depending on the package).\n      Use \'debconf-show <package>\' on any Debian or derivative with the package\n      installed to see questions/settings available.\n    - Some distros will always record tasks involving the setting of passwords as changed. This is due to debconf-get-selections masking passwords.\n    - It is highly recommended to add I(no_log=True) to task while handling sensitive information using this module.\nrequirements:\n- debconf\n- debconf-utils\noptions:\n  name:\n    description:\n      - Name of package to configure.\n    type: str\n    required: true\n    aliases: [ pkg ]\n  question:\n    description:\n      - A debconf configuration setting.\n    type: str\n    aliases: [ selection, setting ]\n  vtype:\n    description:\n      - The type of the value supplied.\n      - It is highly recommended to add I(no_log=True) to task while specifying I(vtype=password).\n      - C(seen) was added in Ansible 2.2.\n    type: str\n    choices: [ boolean, error, multiselect, note, password, seen, select, string, text, title ]\n  value:\n    description:\n      -  Value to set the configuration to.\n    type: str\n    aliases: [ answer ]\n  unseen:\n    description:\n      - Do not set \'seen\' flag when pre-seeding.\n    type: bool\n    default: false\nauthor:\n- Brian Coca (@bcoca)\n'
        str_2 = 'G?`uk&Q4U%6"'
        dict_0 = {str_0: vars_with_sources_0, str_1: str_0, str_1: variable_manager_0, str_2: variable_manager_0}
        vars_with_sources_1 = module_0.VarsWithSources(**dict_0)
        var_0 = variable_manager_0.__setstate__(vars_with_sources_1)
        var_1 = vars_with_sources_1.__len__()
        var_2 = variable_manager_0.__getstate__()
        set_0 = set()
        str_3 = '4'
        dict_1 = {str_3: variable_manager_0, str_3: set_0}
        vars_with_sources_2 = module_0.VarsWithSources()
        vars_with_sources_3 = module_0.VarsWithSources()
        var_3 = vars_with_sources_2.__iter__()
        vars_with_sources_4 = module_0.VarsWithSources(**dict_1)
        var_4 = vars_with_sources_4.copy()
        var_5 = variable_manager_0.set_host_variable(set_0, variable_manager_0, dict_1)
    except BaseException:
        pass

def test_case_13():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = 'bar'
        str_1 = {str_0: str_0}
        var_0 = variable_manager_0.set_nonpersistent_facts(str_1, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x7fhY\x96\xd0h3\xd2\x14\x02\x8bW\xafr\x00'
        vars_with_sources_0 = module_0.VarsWithSources()
        bytes_1 = b'\xe5\xb5\xben\xe7\x0f!r\x1b\xee'
        var_0 = vars_with_sources_0.__setitem__(bytes_1, bytes_1)
        var_1 = vars_with_sources_0.__contains__(bytes_0)
        var_2 = vars_with_sources_0.__iter__()
        str_0 = None
        dict_0 = {str_0: bytes_0}
        variable_manager_0 = module_0.VariableManager(dict_0)
        var_3 = variable_manager_0.set_host_facts(vars_with_sources_0, vars_with_sources_0)
    except BaseException:
        pass

def test_case_15():
    try:
        variable_manager_0 = module_0.VariableManager()
        str_0 = 'hst'
        int_0 = 1648
        dict_0 = {variable_manager_0: variable_manager_0}
        var_0 = variable_manager_0.set_nonpersistent_facts(int_0, dict_0)
        str_1 = None
        bool_0 = True
        bool_1 = False
        var_1 = variable_manager_0.set_host_variable(bool_0, int_0, bool_1)
        tuple_0 = (bool_1,)
        var_2 = variable_manager_0.set_host_facts(tuple_0, dict_0)
        vars_with_sources_0 = module_0.VarsWithSources()
        var_3 = vars_with_sources_0.__iter__()
        bool_2 = True
        var_4 = variable_manager_0.set_host_variable(bool_2, int_0, str_0)
        var_5 = module_0.preprocess_vars(str_1)
        var_6 = variable_manager_0.set_host_facts(tuple_0, vars_with_sources_0)
        host_0 = module_1.Host()
        var_7 = variable_manager_0.set_nonpersistent_facts(vars_with_sources_0, dict_0)
    except BaseException:
        pass