

# Generated at 2022-06-13 12:55:13.155597
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    import pytest
    from ansible.inventory.host import Host
    from ansible.inventory.group import Group
    from ansible.playbook import PlaybookInventory
    inv_module = InventoryModule()
    inv = PlaybookInventory(loader=None, variable_manager=None)
    inv_module.inventory = inv
    inv_module._parse("test_file",
            [
                "test_group_1",
                "[test_group_2:children]",
                "test_group_1",
                "[test_group_3:vars]",
                "key1=value1",
                "key2=value2"
            ])

    print(inv_module.inventory.get_groups_dict())
    print(inv_module.inventory.get_hosts("test_group_1"))

# Generated at 2022-06-13 12:55:16.684498
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    module = InventoryModule()
    if isinstance(module, object):
        raise SkipTest()
    # This will not raise an assertion error, because the module does not
    # inherit from the class FileInclude.
    module.parse(filename=None, cache=True)


# Generated at 2022-06-13 12:55:20.769981
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inventory = InventoryPlugins()
    inventory_file = './tests/inventory'
    print('Ansible Inventory File = %s' % inventory_file)
    mod = InventoryModule(inventory, inventory_file)

    print(mod.inventory.groups)
    print(mod.inventory.hosts)

if __name__ == '__main__':
    test_InventoryModule_parse()

# Generated at 2022-06-13 12:55:32.489157
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inventoryModule = InventoryModule({}, "/dev/null")
    inventoryModule.parse("test/test-inventory-parse/test-group", None)

    # assert multiple hosts
    assert 3 == len(inventoryModule.inventory.groups['test-group'].hosts)
    assert inventoryModule.inventory.groups['test-group'].has_host('test.example.com')
    assert inventoryModule.inventory.groups['test-group'].has_host('test@example.com')
    assert inventoryModule.inventory.groups['test-group'].has_host('test.example.org')

    # assert host vars
    assert 'host' == inventoryModule.inventory.groups['test-group'].hosts['test.example.com'].vars['ansible_connection']

# Generated at 2022-06-13 12:55:40.486834
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    ansible_module = InventoryModule()

    def raise_error(message):
        raise AnsibleError("%s:%d: " % (ansible_module._filename, ansible_module.lineno) + message)

    def _parse(path, lines):
        ansible_module._parse(path, lines)

    try: os.makedirs('/tmp/ansible_inventory_module_test')
    except: pass

    with open('/tmp/ansible_inventory_module_test/inventory', 'w') as f:
        f.write("""
[testgroup1]
host1:2222
host2:2223
host3:2224
        """.strip())

    # FIXME: this test fails and cannot be fixed until the module is fixed.
    #with open('/tmp/ansible_inventory_module_

# Generated at 2022-06-13 12:55:50.878674
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    # arg_line is a string with the args passed to the ansible-playbook command line
    # ArgumentParser(usage='%(prog)s <inventory_path> [--list | --host <hostname>]')
    # arg_line='/etc/ansible/hosts --list'
    arg_line='/etc/ansible/hosts --host localhost'
    # Default for ansible-playbook
    display.verbosity = 3

    # Create the Inventory and pass on the source's path
    inventory = InventoryModule(arg_line)

    # Execute the parsing by calling the method parse
    inventory.parse()

    # Get result in json format
    inventory_dump = inventory.dump()

    # Print result in json format
    print(json.dumps(inventory_dump, indent=4, sort_keys=True))

   

# Generated at 2022-06-13 12:56:00.150222
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    constructor_params = dict(
        loader=None,
        variables={}
    )
    ins = InventoryModule(**constructor_params)

    path = '/tmp/tmpscy0b6z'
    lines = [u'# Generated by Ansible. Do not edit!', u'g1   ansible_ssh_port=1234 x=2']
    ins._parse(path, lines)

    assert ins.lineno == 2
    assert ins.inventory.groups == {'g1': {'variables': {'x': 2, 'ansible_ssh_port': 1234}}}

# Class to test parts of class script module

# Generated at 2022-06-13 12:56:14.130854
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    # Set up a _load_plugins_dynamic and _get_option call stubs
    class Stub_InventoryModule(InventoryModule):
        def _load_plugins_dynamic(self, class_name, module_name, module_path, src, dest, is_base_class=False):
            self.plugin_output = "dynamic stub"

        def _get_option(self, option):
            return True

    # Create an instance of the class to test
    test_inventory_parser = Stub_InventoryModule()
    test_inventory_parser._get_base_parent_class = lambda: "stub parent class"

    # create a test file
    test_file = tempfile.NamedTemporaryFile(delete=False)
    test_file.write(test_inventory_file)
    test_file.close()

    #

# Generated at 2022-06-13 12:56:23.863260
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    # test parsing with no arguments
    inv = InventoryModule(loader=None)
    assert inv is not None
    parser = InventoryParser(inv, module=inv, loader=BaseLoader())
    assert parser is not None
    assert parser.inventory is not None
    # test parsing with argument (path, data)
    inv2 = InventoryModule(loader=None)
    assert inv2 is not None
    parser2 = InventoryParser(inv2, module=inv2, loader=BaseLoader())
    assert parser2 is not None
    # this is a filenotfounderror for data
    with pytest.raises(IOError) as excinfo:
        parser2.parse("path", "data")
    assert "File not found for 'data'" in str(excinfo.value)
    # this should fail since there are no valid ungrouped hosts
    inv3

# Generated at 2022-06-13 12:56:32.495997
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    # Init a new InventoryModule object with a config
    im = InventoryModule(dict())

    # Test case: empty file
    data=list()

    # Call the method we are testing
    try:
        im._parse('inv.txt', data)
    except AnsibleError as e:
        assert isinstance(e, AnsibleError)
    else:
        assert False

    # Test case: file with one line
    data=['[group1]']

    # Call the method we are testing
    try:
        im._parse('inv.txt', data)
    except AnsibleError as e:
        assert False
    else:
        assert True

    # Test case: file with 2 lines
    data=['[group1]', 'a.b.c']

    # Call the method we are testing

# Generated at 2022-06-13 12:57:04.990430
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    module = create_ansible_module()
    inventory = InventoryManager(module=module)
    plugin = InventoryModule(inventory, module=module)
    plugin._parse(path='test', lines=[
        '[groupname]',
        '[somegroup:vars]',
        '# [naughty:children] # only get coal in their stockings',
        '[foobar:children] # stuff',
        'alpha',
        'beta:2345 user=admin',
        'gamma sudo=True user=root',
        '[foobar]',
        'alpha',
    ])

    print("inventory.groups={}".format(inventory.get_groups()))
    print("inventory.groups={}".format(inventory.groups))


# Generated at 2022-06-13 12:57:15.185868
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    from ansible import errors
    from ansible.inventory import Inventory

    inventory = Inventory(None)
    inventory.add_group("test_group")
    inventory.set_variable("test_group", "test_var", "test_value")
    inventory.add_host("test_host")

    def check_group(group_name):
        group = inventory.groups[group_name]
        if group.get_hosts()[0].get_vars()['test_var'] != "test_value":
            raise errors.AnsibleError("Adding variables to non-initialized groups failed")

    check_group("all")
    check_group("test_group")
    check_group("test_host")

    inventory_module = InventoryModule(inventory=inventory)

# Generated at 2022-06-13 12:57:19.998391
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    """Unit test for method parse of class InventoryModule"""
    # TODO: Complete this unit test
    inventory = InventoryManager()

    fd, path = tempfile.mkstemp()
    os.close(fd)

    inv_source = InventoryModule(inventory, path=path)
    inv_source.parse()
    os.remove(path)



# Generated at 2022-06-13 12:57:21.326559
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    unittest.main(module='test_inventory_module', exit=False)

# Generated at 2022-06-13 12:57:33.355719
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    impl = InventoryModule(Inventory())

# Generated at 2022-06-13 12:57:45.311729
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    invdir = tempfile.mkdtemp()
    inventories = """
[ungrouped]
localhost ansible_connection=local
0.0.0.0
0.0.0.1 ansible_port=23456 ansible_user=me
example.org:2345
example.net:2345 ansible_user=me

[group1]
localhost
0.0.0.1
example.org:2345
example.net

[group2:children]
group1
othergroup

[othergroup:vars]
somevar=foo
anothervar=bar
    """

    # parse inventory script
    file_path = os.path.join(invdir, "hosts")
    with open(file_path, "w") as f:
        f.write(inventories)


# Generated at 2022-06-13 12:57:49.686620
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inventory = InventoryManager(loader=None, src=None, resources_counts=None)
    inventory.parse('test/test_file')
    assert len(inventory.groups) == 2


# Generated at 2022-06-13 12:57:51.228398
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inventory = InventoryModule()
    try:
        inventory.parse('test.ini')
    except AnsibleError as e:
        pass
    except AnsibleParserError as e:
        pass



# Generated at 2022-06-13 12:57:53.150507
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    # FIXME: Create real unit tests for InventoryModule.parse()
    pass


# Generated at 2022-06-13 12:58:01.030972
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    fake_loader = DictDataLoader({
        "/etc/ansible/hosts": """
            [alpha:children] #
        """,
    })
    inventory_module = InventoryModule(loader=fake_loader, sources=['/etc/ansible/hosts'])
    inventory_module.parse()
    assert inventory_module.inventory.groups == {'all': Group('all')}, inventory_module.inventory.groups
    assert len(inventory_module.inventory.groups['all'].hosts) == 0, inventory_module.inventory.groups['all'].hosts
    assert len(inventory_module.inventory.groups['all'].child_groups) == 0, inventory_module.inventory.groups['all'].child_groups
    assert len(inventory_module.inventory.groups['all'].vars) == 0, inventory_module.inventory

# Generated at 2022-06-13 12:58:36.501910
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    test_inventory_path = tempfile.mktemp(dir=os.getcwd())

# Generated at 2022-06-13 12:58:48.376786
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inventory = InventoryManager(None, None)
    inv_path = os.path.join(tests.support_root, 'test_inv', 'test_inv.yml')
    inv = InventoryModule(None, inventory)
    inv.parse(inv_path)


# Generated at 2022-06-13 12:58:52.825629
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inv_module = InventoryModule()
    inv = Inventory(host_list=[])
    inv_module.parse(path=None, lines=["host1", "[group1]", "host2"], inventory=inv)
    assert "host1" in inv.get_host("host1").name
    assert "group1" in inv.get_group("group1").name
    assert "host2" in inv.get_host("host2").name

# Generated at 2022-06-13 12:59:00.193449
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    from .inventory import Inventory
    from .host import Host

    inventory = Inventory(loader=None)
    parser = InventoryModule(loader=None, inventory=inventory)

    def check_parse(lines, expected_groups, expected_hosts, expected_variables):
        # Make sure all the expected groups, hosts, and variables are missing to start
        for g in expected_groups:
            assert g not in inventory.groups
        for h in expected_hosts:
            assert h not in inventory.hosts
        for v in expected_variables:
            assert not inventory.get_variable_dict(v['host'], vault_password=None).get(v['var'])

        # Parse the lines and check that we got what we expected
        parser._parse('/etc/ansible/hosts', lines)

# Generated at 2022-06-13 12:59:06.698249
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    bar = """
# A comment
#[group1]
#host1
#host2:2345 user=admin
#host3 user=admin

[group1]
localhost
"""
    foo = InventoryModule(None)
    try:
        foo.parse(bar)
    except AnsibleError:
        pass
    except Exception as e:
        raise e
PARSERS = [InventoryScript, InventoryModule]



# Generated at 2022-06-13 12:59:13.510303
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    """
    Test parse method of class InventoryModule
    """

# Generated at 2022-06-13 12:59:15.377354
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    module = InventoryModule()
    module.parse("testinventory")
    assert True

# Generated at 2022-06-13 12:59:21.454105
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    import inspect
    import json
    import os

    examplePath = os.path.dirname(inspect.stack()[0][1])
    examplePath = os.sep.join([examplePath, "..", "example_1.cfg"])

    im = InventoryModule()
    im.inventory = InventoryManager(loader=C.DEFAULT_LOADER)
    im.parse(examplePath)

    pprint.pprint(im.inventory.groups)
    hosts = im.inventory.list_hosts()
    pprint.pprint(hosts)


# Generated at 2022-06-13 12:59:33.167586
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    # For now just checking code execution
    p = InventoryModule(None)

    ansible_path = os.path.dirname(os.path.dirname(__file__))
    path = os.path.join(ansible_path, 'lib/ansible/inventory/test_inventory.ini')

    p.parse(path)

test_InventoryModule_parse()

 
#
# This is the file used to configure the Ansible 'hosts' file for my two servers (host1 and host2.example.com).

[local]

# Generated at 2022-06-13 12:59:43.669578
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    ''' Make sure that the parse function does what we expect '''
    from ansible.inventory import Inventory
    from ansible.parsing.dataloader import DataLoader

    loader = DataLoader()
    script_path = os.path.realpath(__file__)
    test_path = os.path.join(os.path.dirname(script_path), 'inventory_parser_test.ini')

    inv = Inventory(loader=loader, host_list=test_path)

    # The inventory should process successfully and contain five groups
    assert inv.groups
    assert len(inv.groups) == 6

    # Ungrouped hosts
    assert 'somename:7001' in inv.get_host('somename').name
    assert 'somename' in inv.get_host('somename').name

    # group_

# Generated at 2022-06-13 13:00:33.204013
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inv = InventoryModule()
    inv._parse(None,[
    "    [test]\n",
    "    host1\n",
    "    host2 ansible_ssh_port=2222 ansible_user=testhost2\n",
    "    [test:vars]\n",
    "    my_var=foobar\n",
    "    [test:children]\n",
    "    other_group\n",
    "    "
    ])
    assert inv.inventory.groups['test'].name == 'test'


# Generated at 2022-06-13 13:00:40.509292
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    im = InventoryModule([])
    def raise_error(msg):
        raise AnsibleError("%s:%d: " % (im._filename, im.lineno) + msg)

    im._raise_error = raise_error
    def _compile_patterns():
        im.patterns={}

# Generated at 2022-06-13 13:00:49.340158
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    invmod = InventoryModule()
    invmod.parse("/etc/ansible/hosts", ["[ungrouped]", "host_a", "host_b", "[group_a]", "host_a", "host_c"])
    assert sorted(invmod.groups.keys()) == ['group_a', 'ungrouped']
    assert sorted(invmod.groups['ungrouped']['hosts']) == ['host_a', 'host_b']
    assert sorted(invmod.groups['group_a']['hosts']) == ['host_a', 'host_c']



# Generated at 2022-06-13 13:01:00.016149
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
  # create a temporary directory for testing purposes
  tmpdir = tempfile.mkdtemp()
  # create some group and host files under this directory
  fh = file(os.path.join(tmpdir, 'group'), 'w')
  for line in [
    '# This is a YAML file - look: [here]\n',
    '#\n',
    '[group1]\n',
    'foo\n',
    '[group1:vars]\n',
    'var1=var1\n',
    'var2=var2\n',
    '[group2]\n',
    'host1\n',
    'host2\n',
    '[group2:vars]\n',
    'var1=var1\n',
  ]:
    fh.write(line)

# Generated at 2022-06-13 13:01:14.849857
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    from ansible.inventory import Inventory
    from ansible.parsing.vault import VaultLib
    from ansible.parsing.vault import VaultEditor
    from ansible.cli.vault import VaultCLI
    from ansible.parsing.vault import UnsafeText
    import tempfile
    import os

    path = os.path.join(tempfile.mkdtemp(), "temp.vault")

# Generated at 2022-06-13 13:01:24.896464
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
  from nose.tools import assert_raises
  from ansible.parsing.vault import VaultLib

  def check_parse(vault, inventory):
    cls = InventoryModule
    source = vault.encrypt(b"%s\n" % inventory)
    inv = cls(source=source, vault_password=VAULT_PASS)
    inv.parse()

  vault = VaultLib(password=VAULT_PASS)
  
  # Test valid input (1)
  check_parse(vault, '''
[group_name]
my_host
''')

  # Test valid input (2)

# Generated at 2022-06-13 13:01:30.177164
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    test_inventory ='''
[webservers]
foo.example.org
    # This is a comment
bar.example.org
    baz.example.org variable_1="some value" variable_2=42 variable_3="some other value"
[dbservers]
one.example.org variable_1="3" variable_2=3 variable_3={'a whole': 'new ballgame'}
two.example.org variable_1=3 variable_2="3" variable_3=3.0
three.example.org variable_1=false variable_2=true variable_3=True
[ungrouped]
127.0.0.1
    '''
    inventory = InventoryModule(Filename=['/dev/null'])
    inventory.parse(test_inventory.splitlines(), None)

# Generated at 2022-06-13 13:01:36.999946
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    """Test behavior of parse method of InventoryModule class"""

    module = _init_InventoryModule_mock()

    # Generate inventory for groups name1 and name2. Each group has its own variable
    # and each variable have some value.
    inventory_content = '[name1]\n' \
                        'host1\n' \
                        '\n' \
                        '[name2]\n' \
                        'host2\n' \
                        '\n' \
                        '[name1:vars]\n' \
                        'var1=value1\n' \
                        '\n' \
                        '[name2:vars]\n'\
                        'var2=var2_value\n'

    inventory = module.parse(inventory_content, cache=False, filename='/dev/null')
    # Check if there

# Generated at 2022-06-13 13:01:49.594324
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    # Since the module is also a class, we need to instantiate it first
    # to be able to call its 'parse' method
    # FIXME: This import needs to moved out of here
    from ansible.inventory.manager import InventoryManager

    m = InventoryModule()

    # We need an inventory manager set in order to be able to call the
    # parse method
    m.inventory_manager = InventoryManager()

    filename = os.path.join(
        os.path.dirname(__file__),
        'test_static_inventory.ini')

    # The file test_static_inventory.ini contains the following content
    # [test1]
    # test32.example.com TEST=test var=val
    # test33.example.com TEST=test var=val
    # test1.example.com ANSIBLE_FOO=

# Generated at 2022-06-13 13:01:56.069625
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():

    from ansible.errors import AnsibleError

    import tempfile
    inventory_file = tempfile.NamedTemporaryFile(mode='w')

    # Test for 'hosts' state
    m = InventoryModule()
    content = 'alpha beta: alpha:2345 user=admin'
    inventory_file.write(content)
    inventory_file.seek(0)
    m._parse(inventory_file.name, content.split('\n'))
    assert m._filename == inventory_file.name
    assert m.lineno == 3

    inventory_file.close()


# Generated at 2022-06-13 13:03:32.258485
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inventory = InventoryManager(None, vault_password=PWD)
    hostname = os.uname()[1]
    inventory.parse_inventory(vars(InventoryModule(filename=INVENTORY_FILE, vault_password=PWD))['_original_path'])
    assert ('all' in inventory.groups)
    assert (hostname in inventory.groups['all']['hosts'])
    assert ('ungrouped' not in inventory.groups)
    assert (inventory.groups['all']['vars'] == {'ansible_python_interpreter': '/usr/bin/python', 'ansible_sudo_pass': ''})
    assert (inventory.groups['linux']['vars'] == {'ansible_connection': 'smart'})

# Generated at 2022-06-13 13:03:41.697999
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    inventory = InventoryModule(loader='', variable_manager='', host_list='/dev/null')

    # FIXME: These unit tests are based on ansible's inventory_ini tests, but they
    # do not actually run the same code. As a result they are not as thorough. We
    # should consider adopting ansible's tests and making them generic enough to
    # run on either.

    path = os.path.dirname(os.path.realpath(__file__))
    try:
        inventory.parse_inventory(path + '/../test/inventory/test_ini_inventory')
    except AnsibleParserError as e:
        assert(False and to_native(e))


# Generated at 2022-06-13 13:03:43.885231
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    (result, expected) = run_test(InventoryModule, 'parse')
    assert result == expected


# Generated at 2022-06-13 13:03:54.460628
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    invmod = InventoryModule()

# Generated at 2022-06-13 13:04:01.284990
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    from ansible.executor.task_queue_manager import TaskQueueManager

    my_inv = InventoryManager(loader=None, sources=["/home/my_hosts_file"])
    inv_module = InventoryModule(
        ansible_playbook_basedir="./",
        inventory=my_inv,
        variable_manager=None,
        loader=None,
        cache=TaskQueueManager._fact_cache,
    )
    inv_module.parse()
    inv_str = str(inv_module.inventory)
    assert "all" == inv_str


# Generated at 2022-06-13 13:04:06.386435
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    # Test setup
    yaml_filename = 'hosts.yml'
    yaml_file_content = 'all:\n  hosts:\n    hello\n'
    yaml_filepath = os.path.join(ANSIBLE_INVENTORIES_PATH, yaml_filename)
    with open(yaml_filepath, "w") as yaml_file:
        yaml_file.write(yaml_file_content)
    # Exercise
    inventory_module = InventoryModule()
    data = inventory_module.parse(yaml_filepath, None, None)
    # Verify

# Generated at 2022-06-13 13:04:16.593282
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():

    lines = ['# This is a comment\n',
             'first ansible_ssh_host=127.0.0.1 ansible_ssh_port=22\n',
             'second:2222 ansible_ssh_host=192.168.1.1\n',
             'third ansible_ssh_host=192.168.1.1 ansible_ssh_host=192.168.1.2\n',
             'fourth ansible_ssh_host=192.168.1.1 ansible_host=192.168.1.2\n',
             'fifth ansible_host=192.168.1.1\n',
             'sixth ansible_host=192.168.1.1 ansible_ssh_port=2222\n',
             'seventh\n',
             ]

# Generated at 2022-06-13 13:04:30.152495
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    from ansible.parsing.dataloader import DataLoader
    loader = DataLoader()
    def test_get_file_contents(path):
        return b'''
[ungrouped]
localhost ansible_connection=local

[local]
127.0.0.1
127.0.0.1:2222

[group1]
foo ansible_port=5555
1.2.3.4
1.2.3.4:2222

[group2]
child1
child2

[group2:vars]
foo = bar
baz = true

[group3:children]
group1
group2

[naughty:children] # only get coal in their stockings
'''
    loader._get_file_contents_from_path = test_get_file_

# Generated at 2022-06-13 13:04:33.784375
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    parser = InventoryModule(None)
    raw = """
    [test_group_01]
    user=test
    """
    parser._parse("test_InventoryModule_parse", raw.split("\n"))
    assert "test_group_01" in parser.inventory.groups
    assert dict(user="test") == parser.inventory.groups["test_group_01"].get_vars()


# Generated at 2022-06-13 13:04:47.524609
# Unit test for method parse of class InventoryModule
def test_InventoryModule_parse():
    from ansible.inventory.manager import InventoryManager
    from ansible.parsing.dataloader import DataLoader
    inventory = InventoryManager(loader = DataLoader())
    inventory.clear_pattern_cache()
    inventory_loader = InventoryModule(loader = DataLoader(), inventory = inventory)
    inventory_loader.parse('test/unit/ansible/inventory/test_inventory_manager.ini')
    # Check that the group 'ungrouped' was created
    assert 'ungrouped' in inventory.groups
    # Check that the group 'ungrouped' has all the hosts in it
    assert len(inventory.groups['ungrouped'].hosts) == 3
    # Check that the variables from the section [ungrouped] were added to the group 'ungrouped'
    assert inventory.groups['ungrouped'].vars['somevar']