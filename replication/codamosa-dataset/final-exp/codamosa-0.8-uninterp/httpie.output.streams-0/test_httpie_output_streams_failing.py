# Automatically generated by Pynguin.
import httpie.models as module_0
import httpie.output.processing as module_1
import httpie.output.streams as module_2

def test_case_0():
    try:
        float_0 = -574.08161
        h_t_t_p_message_0 = module_0.HTTPMessage(float_0)
        conversion_0 = module_1.Conversion()
        base_stream_0 = module_2.BaseStream(h_t_t_p_message_0, conversion_0)
        bytes_0 = base_stream_0.get_headers()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'A\x82MUu\x9aM$\x812\xbep'
        h_t_t_p_message_0 = module_0.HTTPMessage(bytes_0)
        base_stream_0 = module_2.BaseStream(h_t_t_p_message_0)
        iterable_0 = base_stream_0.iter_body()
    except BaseException:
        pass

def test_case_2():
    try:
        raw_stream_0 = module_2.RawStream()
    except BaseException:
        pass

def test_case_3():
    try:
        encoded_stream_0 = module_2.EncodedStream()
    except BaseException:
        pass

def test_case_4():
    try:
        conversion_0 = None
        list_0 = []
        str_0 = '%FOmh\x0cPHOr^'
        str_1 = 'yZ|\tpO\nLy\x0bVTH-w+'
        str_2 = '\n    You can specify a local cert to use as client side SSL certificate.\n    This file may either contain both private key and certificate or you may\n    specify --cert-key separately.\n\n    '
        str_3 = 'I&'
        str_4 = 'Ji'
        str_5 = 'TkI=c[=g2e]/{\n\x0b9bTI'
        dict_0 = {str_3: str_0, str_4: str_2, str_5: str_3}
        dict_1 = {str_0: str_0, str_1: conversion_0, str_2: str_0, str_1: dict_0}
        formatting_0 = module_1.Formatting(list_0, **dict_1)
        buffered_pretty_stream_0 = module_2.BufferedPrettyStream(conversion_0, formatting_0)
    except BaseException:
        pass

def test_case_5():
    try:
        h_t_t_p_message_0 = None
        base_stream_0 = module_2.BaseStream(h_t_t_p_message_0, h_t_t_p_message_0)
        iterable_0 = base_stream_0.iter_body()
    except BaseException:
        pass

def test_case_6():
    try:
        h_t_t_p_message_0 = None
        tuple_0 = ()
        conversion_0 = None
        base_stream_0 = module_2.BaseStream(h_t_t_p_message_0, tuple_0, conversion_0)
    except BaseException:
        pass