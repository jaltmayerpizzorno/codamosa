# Automatically generated by Pynguin.
import builtins as module_0
import pymonet.lazy as module_1

def test_case_0():
    try:
        object_0 = module_0.object()
        lazy_0 = module_1.Lazy(object_0)
        var_0 = lazy_0.to_either()
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        str_0 = '\n        Take function and applied this function on current Validation value and returns folder result.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> Validation[B, E]\n        :returns: new Validation with mapped value\n        :rtype: Validation[B, E]\n        '
        dict_1 = {str_0: str_0}
        lazy_0 = module_1.Lazy(dict_1)
        var_0 = lazy_0.map(dict_0)
        object_0 = module_0.object()
        lazy_1 = module_1.Lazy(object_0)
        var_1 = lazy_1.to_either()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b''
        list_0 = []
        list_1 = [list_0, bytes_0, bytes_0]
        set_0 = {bytes_0}
        lazy_0 = module_1.Lazy(set_0)
        var_0 = lazy_0.to_try(*list_1)
        lazy_1 = module_1.Lazy(list_0)
        var_1 = lazy_1.ap(bytes_0)
        float_0 = None
        var_2 = lazy_1.bind(float_0)
        var_3 = lazy_1.to_box()
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        lazy_0 = module_1.Lazy(callable_0)
        var_0 = lazy_0.to_box()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xd24\x81\x9fsX-~_\x93\xc0 \x8d6Zbo'
        lazy_0 = module_1.Lazy(bytes_0)
        var_0 = lazy_0.to_try()
        dict_0 = {}
        lazy_1 = module_1.Lazy(dict_0)
        str_0 = lazy_1.__str__()
        list_0 = [lazy_1]
        var_1 = lazy_1.to_maybe(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        lazy_0 = module_1.Lazy(bool_0)
        var_0 = lazy_0.to_validation()
    except BaseException:
        pass