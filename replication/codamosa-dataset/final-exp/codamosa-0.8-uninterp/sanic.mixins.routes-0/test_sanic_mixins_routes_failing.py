# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0

def test_case_0():
    try:
        str_0 = 'test_RouteMixin_add_route'
        route_mixin_0 = module_0.RouteMixin()
        bool_0 = True
        bytes_0 = b'=R\xd1\xaa\xb3\xfdj$.\xafzg\xbd\xf16W\xf6'
        route_mixin_1 = module_0.RouteMixin()
        var_0 = route_mixin_1.static(route_mixin_0, str_0, bool_0, route_mixin_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'File not found: path='
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'uD<*r%LD4?<Z5Hk'
        str_1 = 'Setting variables on '
        bool_0 = True
        list_0 = [str_0, str_0, str_0]
        route_mixin_0 = module_0.RouteMixin(*list_0)
        var_0 = route_mixin_0.add_websocket_route(str_0, str_1, str_1, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'File not found: path='
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.options(str_0, str_0)
        var_1 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'uD<*r%LD4?<Z5Hk'
        str_1 = 'Setting variables on '
        bool_0 = True
        list_0 = [str_0, str_0, str_0]
        route_mixin_0 = module_0.RouteMixin(*list_0)
        optional_0 = None
        var_0 = route_mixin_0.delete(str_0, optional_0)
        var_1 = route_mixin_0.add_websocket_route(str_0, str_1, str_1, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Sh%Stl2\x0b!H#6UeK>ftB)'
        optional_0 = None
        str_1 = '\n        Add an API URL under the **OPTIONS** *HTTP* method\n\n        :param uri: URL to be tagged to **OPTIONS** method of *HTTP*\n        :type uri: str\n        :param host: Host IP or FQDN for the service to use\n        :type host: Optional[str], optional\n        :param strict_slashes: Instruct :class:`Sanic` to check if the request\n            URLs need to terminate with a */*\n        :type strict_slashes: Optional[bool], optional\n        :param version: API Version\n        :type version: Optional[str], optional\n        :param name: Unique name that can be used to identify the Route\n        :type name: Optional[str], optional\n        :param ignore_body: whether the handler should ignore request\n            body (eg. GET requests), defaults to True\n        :type ignore_body: bool, optional\n        :return: Object decorated with :func:`route` method\n        '
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        var_0 = route_mixin_0.add_websocket_route(str_0, str_0, optional_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = lambda x: x
        str_0 = 'GT'
        str_1 = 'HEAD'
        int_0 = 1
        route_mixin_0 = module_0.RouteMixin()
        str_2 = "A'?v"
        var_1 = route_mixin_0.head(str_0, str_2, int_0, str_1)
        int_1 = 2817
        float_0 = -443.97
        pure_path_0 = None
        var_2 = route_mixin_0.static(float_0, pure_path_0, int_1, pure_path_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        str_0 = 'dk9F4v:fd7PwkA8dO'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(bool_0, str_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "'5"
        bool_0 = None
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.get(str_0, bool_0)
        str_1 = 'F%'
        bool_1 = True
        var_1 = route_mixin_0.add_route(route_mixin_0, str_1, bool_1)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = lambda x: x
        str_0 = '/EsD'
        str_1 = [str_0, str_0]
        int_0 = 19
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        var_1 = route_mixin_0.add_route(var_0, str_0, str_0, str_1, bool_0, int_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'hozst'
        str_1 = [str_0, str_0]
        bool_0 = True
        int_0 = 9
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(bool_0, str_0, str_0, str_1, bool_0, int_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Bad chunked encoding'
        route_mixin_0 = module_0.RouteMixin()
        int_0 = 1685
        list_0 = [int_0, int_0, int_0, int_0]
        tuple_0 = ()
        tuple_1 = (int_0, list_0, tuple_0)
        var_0 = route_mixin_0.post(str_0)
        str_1 = '<bcheJ9K7F$["4'
        var_1 = route_mixin_0.add_route(tuple_1, str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '/EsD'
        str_1 = [str_0, str_0]
        int_0 = 19
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        str_2 = 'SO\x0c[8}F#v*?XT>{S'
        str_3 = 'm=iFlbuY2#,\n\\dnC\r'
        str_4 = "rQ;'"
        var_0 = route_mixin_0.add_route(str_2, str_3, str_1, int_0, str_4, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = lambda x: x
        str_0 = 'hozst'
        str_1 = [str_0, str_0]
        int_0 = 9
        bool_0 = True
        route_mixin_0 = module_0.RouteMixin()
        var_1 = route_mixin_0.add_route(var_0, str_0, str_0, str_1, bool_0, int_0, str_0, bool_0)
    except BaseException:
        pass