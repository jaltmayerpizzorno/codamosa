# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = '_blocks'
        list_0 = []
        str_1 = 'available_algorithms'
        dict_0 = {str_1: collector_not_found_error_0}
        var_0 = module_0.get_collector_names(str_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        int_0 = -8
        list_0 = [base_fact_collector_0, int_0]
        bool_0 = True
        list_1 = None
        var_0 = module_0.collector_classes_from_gather_subset(list_0, bool_0, list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_0 = '>y2B7LOn'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.tsort(dict_0)
        var_1 = base_fact_collector_0.collect_with_namespace()
        var_2 = module_0.collector_classes_from_gather_subset()
        var_3 = base_fact_collector_0.collect()
        unresolved_fact_dep_0 = None
        var_4 = base_fact_collector_0.collect_with_namespace(unresolved_fact_dep_0)
        var_5 = module_0.build_fact_id_to_collector_map(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Tz09Pn\x0b4Vx0UQ})'
        list_0 = [str_0, str_0]
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        int_0 = 684
        dict_0 = {collector_not_found_error_0: list_0, str_0: int_0, int_0: list_0, int_0: list_0}
        base_fact_collector_0 = module_0.BaseFactCollector(dict_0)
        var_0 = module_0.find_unresolved_requires(list_0, base_fact_collector_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        int_0 = -1716
        var_0 = module_0.resolve_requires(bool_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        collector_not_found_error_0 = None
        dict_0 = {collector_not_found_error_0: cycle_found_in_fact_deps_0, collector_not_found_error_0: collector_not_found_error_0, collector_not_found_error_0: cycle_found_in_fact_deps_0}
        base_fact_collector_0 = module_0.BaseFactCollector()
        list_0 = [dict_0, base_fact_collector_0, cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0]
        var_0 = module_0.resolve_requires(dict_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        bytes_0 = b'\x87'
        tuple_0 = (bool_0, bytes_0)
        list_0 = [tuple_0]
        str_0 = '\n# NOTE: Before 2.3, option \'dest\', \'destfile\' or \'name\' was used instead of \'path\'\n- name: Ensure SELinux is set to enforcing mode\n  ansible.builtin.lineinfile:\n    path: /etc/selinux/config\n    regexp: \'^SELINUX=\'\n    line: SELINUX=enforcing\n\n- name: Make sure group wheel is not in the sudoers configuration\n  ansible.builtin.lineinfile:\n    path: /etc/sudoers\n    state: absent\n    regexp: \'^%wheel\'\n\n- name: Replace a localhost entry with our own\n  ansible.builtin.lineinfile:\n    path: /etc/hosts\n    regexp: \'^127\\.0\\.0\\.1\'\n    line: 127.0.0.1 localhost\n    owner: root\n    group: root\n    mode: \'0644\'\n\n- name: Replace a localhost entry searching for a literal string to avoid escaping\n  lineinfile:\n    path: /etc/hosts\n    search_string: \'127.0.0.1\'\n    line: 127.0.0.1 localhost\n    owner: root\n    group: root\n    mode: \'0644\'\n\n- name: Ensure the default Apache port is 8080\n  ansible.builtin.lineinfile:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: \'^Listen \'\n    insertafter: \'^#Listen \'\n    line: Listen 8080\n\n- name: Ensure php extension matches new pattern\n  lineinfile:\n    path: /etc/httpd/conf/httpd.conf\n    search_string: \'<FilesMatch ".php[45]?$">\'\n    insertafter: \'^\\t<Location \\/>\\n\'\n    line: \'        <FilesMatch ".php[34]?$">\'\n\n- name: Ensure we have our own comment added to /etc/services\n  ansible.builtin.lineinfile:\n    path: /etc/services\n    regexp: \'^# port for http\'\n    insertbefore: \'^www.*80/tcp\'\n    line: \'# port for http by default\'\n\n- name: Add a line to a file if the file does not exist, without passing regexp\n  ansible.builtin.lineinfile:\n    path: /tmp/testfile\n    line: 192.168.1.99 foo.lab.net foo\n    create: yes\n\n# NOTE: Yaml requires escaping backslashes in double quotes but not in single quotes\n- name: Ensure the JBoss memory settings are exactly as needed\n  ansible.builtin.lineinfile:\n    path: /opt/jboss-as/bin/standalone.conf\n    regexp: \'^(.*)Xms(\\d+)m(.*)$\'\n    line: \'\\1Xms${xms}m\\3\'\n    backrefs: yes\n\n# NOTE: Fully quoted because of the \': \' on the line. See the Gotchas in the YAML docs.\n- name: Validate the sudoers file before saving\n  ansible.builtin.lineinfile:\n    path: /etc/sudoers\n    state: present\n    regexp: \'^%ADMIN ALL=\'\n    line: \'%ADMIN ALL=(ALL) NOPASSWD: ALL\'\n    validate: /usr/sbin/visudo -cf %s\n\n# See https://docs.python.org/3/library/re.html for further details on syntax\n- name: Use backrefs with alternative group syntax to avoid conflicts with variable values\n  ansible.builtin.lineinfile:\n    path: /tmp/config\n    regexp: ^(host=).*\n    line: \\g<1>{{ hostname }}\n    backrefs: yes\n'
        var_0 = module_0.build_dep_data(list_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = '_blocks'
        list_0 = [collector_not_found_error_0, str_0]
        str_1 = 'available_algorithms'
        dict_0 = {str_1: collector_not_found_error_0}
        var_0 = module_0.get_collector_names(str_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        int_0 = 795
        int_1 = -742
        bytes_0 = b'\t\xc6b\xa7\xadJ\x89\xe0\xf0\x81\xbcc\xe3\xf0\xfe\x0f'
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_0 = module_0.collector_classes_from_gather_subset(cycle_found_in_fact_deps_0, int_0, int_1, bytes_0, unresolved_fact_dep_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 't\r]'
        list_0 = [str_0, str_0, str_0]
        int_0 = 200
        bytes_0 = b'\x9dJ\xbdu\x01\x1cU9\xfe\x95\xe2'
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace()
        dict_0 = {int_0: list_0, str_0: int_0}
        var_1 = module_0.find_unresolved_requires(bytes_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace()
        str_0 = 'W[R\r~SMm<]"-<ba"&'
        var_1 = module_0.resolve_requires(str_0, str_0)
        cycle_found_in_fact_deps_0 = None
        set_0 = {cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0}
        var_2 = base_fact_collector_0.collect(set_0)
        var_3 = module_0.build_dep_data(cycle_found_in_fact_deps_0, cycle_found_in_fact_deps_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = 'a'
        str_1 = 'b'
        var_1 = frozenset(str_0)
        var_2 = frozenset(str_0)
        list_0 = []
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0)
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_3 = base_fact_collector_0.collect(collector_not_found_error_0)
        var_4 = module_0.get_collector_names(str_1, var_2, var_1, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'frrdB'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {str_0: dict_0}
        var_0 = module_0.tsort(dict_1)
    except BaseException:
        pass