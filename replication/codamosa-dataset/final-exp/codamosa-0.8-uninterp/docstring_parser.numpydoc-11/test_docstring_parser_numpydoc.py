# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0
import inspect as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'Foo bar.\n\n    Parameters\n    ----------\n    arg_a : str\n        The first argument\n    arg_b : int\n        The second argument\n\n    Return\n    ------\n    dict\n        dict of str\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_3():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '\n            The :func:`~typing.no_type_check` decorator\n\n            This is the short description\n\n            This is the long description\n\n\n            Parameters\n            ----------\n            arg_name : arg_type\n                arg_description\n            arg_2 : arg_type, optional\n                How to use the optional arg_2\n\n\n            Returns\n            -------\n            return_type\n                return_description\n\n            Warns\n            -----\n            UserWarning\n                if something weird happens\n\n\n            References\n            ----------\n            https://www.python.org/dev/peps/pep-0484/\n                PEP0484 specification\n            '
    section_0 = module_0.Section(str_0, str_0)
    var_0 = numpydoc_parser_0.add_section(section_0)
    docstring_0 = numpydoc_parser_0.parse(str_0)
    str_1 = 'fyup\n+o0=T]5r\tFl\\@'
    param_section_0 = module_0.ParamSection(str_0, str_1)

def test_case_4():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = '(?P<type>.*?)(?:, optional|\\(optional\\))$'
    str_1 = 'Build docstring element.\n\n        :param text: docstring element text\n        :param title: title of section containing element\n        :return:\n        '
    docstring_0 = module_0.parse(str_1)
    str_2 = 'Yhd6I,a59IGIZv*d2|'
    k_v_section_0 = module_0._KVSection(str_0, str_2)

def test_case_6():
    str_0 = '@fhbBBxUErl{b'
    str_1 = 'X'
    section_0 = module_0.Section(str_1, str_1)
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_0)
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = 'Foo bar.\n\n    Paameters\n    ----------\n    arg_a : str\n        The first argument\n    arg_b : int\n        The second argument\n\n    Return\n    ------\n    dict\n        dict of str\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = 'Foo bar.\n\n    Parameters\n    ----------\n    arg_a : str\n        The first argument\n    arg_b : int\n        The second argument\n\n    Return\n    ------\n    dict\n        dict of str\n    '
    docstring_0 = numpydoc_parser_0.parse(str_0)
    section_0 = module_0.Section(str_0, str_0)
    numpydoc_parser_1 = module_0.NumpydocParser()
    var_0 = numpydoc_parser_1.add_section(section_0)
    str_1 = '\n'
    docstring_1 = numpydoc_parser_1.parse(str_1)
    var_1 = docstring_0.meta
    var_2 = len(var_1)

def test_case_9():
    str_0 = 'key\n            value\n        key2 : type\n            values can also span...\n            ... multiple lines'
    str_1 = '-'
    str_2 = ''
    k_v_section_0 = module_0._KVSection(str_1, str_2)
    iterable_0 = k_v_section_0.parse(str_0)
    int_0 = 0
    var_0 = list(iterable_0)[int_0]

def test_case_10():
    str_0 = 'deprecated:: 0.1\n    description'
    var_0 = module_1.cleandoc(str_0)
    str_1 = 'deprecated'
    deprecation_section_0 = module_0.DeprecationSection(str_1, str_1)
    iterable_0 = deprecation_section_0.parse(var_0)
    var_1 = list(iterable_0)
    var_2 = len(var_1)

def test_case_11():
    str_0 = 'e7I'
    str_1 = 'Parser for numpydoc raises sections.\n\n    E.g. any section that looks like this:\n        ValueError\n            A description of what might raise ValueError\n    '
    str_2 = ''
    deprecation_section_0 = module_0.DeprecationSection(str_1, str_2)
    iterable_0 = deprecation_section_0.parse(str_0)
    str_3 = 'deprecated'
    str_4 = 'deprecation'
    deprecation_section_1 = module_0.DeprecationSection(str_3, str_4)
    iterable_1 = deprecation_section_1.parse(str_4)
    var_0 = list(iterable_1)
    var_1 = len(var_0)
    str_5 = '`ipoA>O$)'
    iterable_2 = deprecation_section_0.parse(str_5)

def test_case_12():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '\n            The :func:`~typing.no_type_check` decorator\n\n            This is the short description\n\n            This is the long description\n\n\n            Parameters\n            ----------\n            arg_name : arg_type\n                arg_description\n            arg_2 : arg_type, optional\n                How to use the optional arg_2\n\n\n            Returns\n            -------\n            return_type\n                return_description\n\n            Warns\n            -----\n            UserWarning\n                if something weird happens\n\n\n            References\n            ----------\n            https://www.python.org/dev/peps/pep-0484/\n                PEP0484 specification\n            '
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_13():
    str_0 = 'Foo bar.\n\n    Parameters\n    ----------\n    arg_a : str\n        The first argument\n    arg_b : int\n        The second argument\n\n    Return\n    -----\n    dict\n        dict of str\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_14():
    str_0 = '\n    This is the example docstring.E\n    Parameters\n    ----------\n    a\n        This is param a\n    b: int\n        This is param b\n    c, optional\n        This is param c\n\n    Returns\n    -------\n    int\n        This is the return value.\n\n    Raises\n    ------\n    Excepton\n        This is a potential exception.\n    '
    dict_0 = None
    yields_section_0 = module_0.YieldsSection(str_0, str_0)
    numpydoc_parser_0 = module_0.NumpydocParser(dict_0)
    str_1 = 'D43WRZ$eS[+8OO8N'
    docstring_0 = numpydoc_parser_0.parse(str_1)
    k_v_section_0 = module_0._KVSection(str_0, str_1)
    numpydoc_parser_1 = module_0.NumpydocParser(dict_0)
    docstring_1 = module_0.parse(str_0)

def test_case_15():
    str_0 = '\n    This is a short description\n\n    Lorem ispum etc.\n\n    Parameters\n    ----------\n    arg_1 : type, optional\n        Description for arg_1.\n        Default is "hello"\n    arg_2 : type\n        Description for arg_2\n        Default is None\n\n    Returns\n    -------\n    return_1\n        Description for return_1\n\n    See Also\n    --------\n    This is a ref\n\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)