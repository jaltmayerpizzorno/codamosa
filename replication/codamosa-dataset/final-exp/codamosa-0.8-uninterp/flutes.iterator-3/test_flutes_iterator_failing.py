# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 8192
        str_0 = '[gi^'
        iterator_0 = module_0.chunk(int_0, str_0)
        map_list_0 = module_0.MapList(iterator_0, iterator_0)
        int_1 = map_list_0.__len__()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xdb\xf4=\xcfW\xf1F\xfe2\xa6\xe2z~\x18pn\xf3\x8e'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__getitem__(lazy_list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -30
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
        iterable_0 = None
        iterator_1 = module_0.take(int_0, iterable_0)
        list_0 = [iterator_1, var_0, var_0, iterator_1]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1628
        list_0 = [int_0, int_0]
        range_0 = module_0.Range(*list_0)
        str_0 = '289:7:hK'
        var_0 = range_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1408
        iterable_0 = None
        iterator_0 = module_0.chunk(int_0, iterable_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 5
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = next(iterator_0)
        var_2 = list(iterator_0)
        var_3 = range(int_0)
        iterator_1 = module_0.drop(int_0, var_3)
        var_4 = list(iterator_1)
        int_2 = 15
        int_3 = 0
        iterator_2 = module_0.drop(int_2, iterator_0)
        var_5 = list(iterator_2)
        var_6 = range(int_3, int_1)
        var_7 = list(iterator_0)
        int_4 = -1
        iterator_3 = module_0.drop(int_4, iterator_0)
        var_8 = list(iterator_3)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 5
        int_1 = 10
        iterator_0 = module_0.drop(int_0, int_1)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -1408
        iterable_0 = None
        iterator_0 = module_0.chunk(int_0, iterable_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        int_1 = None
        var_0 = lazy_list_0.__getitem__(int_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'm)36\'8\x0c )"cwVy%#i-_z'
        lazy_list_0 = module_0.LazyList(str_0)
        bool_0 = True
        var_0 = lazy_list_0.__getitem__(bool_0)
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xdb\xf4=\xcfW\xf1F\xfe2\xa6\xe2z~\x18pn\xf3\x8e'
        lazy_list_0 = module_0.LazyList(bytes_0)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        dict_0 = None
        var_0 = lazy_list_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'm)36\'8\x0c )"cwVy%#i-_z'
        lazy_list_0 = module_0.LazyList(str_0)
        bool_0 = True
        var_0 = lazy_list_0.__getitem__(bool_0)
        var_1 = lazy_list_0.__getitem__(bool_0)
        var_2 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_12():
    try:
        iterable_0 = None
        int_0 = -2044
        int_1 = None
        str_0 = '-z#&|*uwunM<}]{j*\t'
        dict_0 = {int_1: int_1, iterable_0: int_1, int_1: str_0}
        list_0 = [int_1, int_0, str_0, int_0]
        var_0 = module_0.scanr(str_0, dict_0, *list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        str_0 = '/P\n\t8,^jrFP\\23Z'
        dict_0 = {str_0: bool_0}
        bytes_0 = b'O\xe7\xa4\xa41\xf2\xa4.'
        map_list_0 = module_0.MapList(dict_0, bytes_0)
        int_0 = -3243
        iterator_0 = map_list_0.__iter__()
        iterator_1 = module_0.chunk(int_0, iterator_0)
        dict_1 = {}
        var_0 = module_0.scanr(iterator_1, dict_1)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 87
        list_0 = [int_0]
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__len__()
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 0
        var_0 = lambda x: x % int_0 == int_0
        bool_0 = True
        str_0 = '.'
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_1 = list(iterator_0)
        int_1 = -1167
        list_0 = []
        lazy_list_0 = module_0.LazyList(list_0)
        iterator_1 = module_0.drop(int_1, lazy_list_0)
        str_1 = 'FP\tc][b26SLu&/{L:'
        map_list_0 = module_0.MapList(iterator_1, str_1)
        iterator_2 = map_list_0.__iter__()
        var_2 = module_0.scanr(iterator_2, map_list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = "oXu~_'"
        list_0 = [str_0, str_0, str_0, str_0]
        float_0 = None
        tuple_0 = (float_0,)
        map_list_0 = module_0.MapList(list_0, tuple_0)
        iterator_0 = map_list_0.__iter__()
        bool_0 = True
        iterator_1 = module_0.split_by(bool_0)
        list_1 = [map_list_0]
        var_0 = module_0.scanr(iterator_1, map_list_0, *list_1)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 42
        iterator_0 = module_0.take(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 42
        var_0 = {}
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        int_1 = 0
        int_2 = 10
        var_2 = range(int_2)
        iterator_1 = module_0.take(int_1, var_2)
        var_3 = list(iterator_1)
        int_3 = -1
        iterator_2 = module_0.take(int_3, iterator_0)
        var_4 = list(iterator_2)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 0
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        int_2 = -1
        int_3 = 10
        var_2 = range(int_3)
        iterator_1 = module_0.take(int_2, var_2)
        var_3 = list(iterator_1)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 10
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = 10
        var_0 = range(int_0)
        int_1 = 3
        int_2 = 0
        var_1 = lambda x: x % int_1 == int_2
        iterator_0 = module_0.split_by(var_0, criterion=var_1)
        var_2 = list(iterator_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 10
        var_0 = range(int_0)
        int_1 = 3
        var_1 = lambda x: x % int_1 == int_0
        iterator_0 = module_0.split_by(var_0, criterion=var_1)
        str_0 = ' Split by: '
        bool_0 = True
        iterator_1 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_2 = list(iterator_1)
        int_2 = 10
        var_3 = range(int_2)
        int_3 = 3
        int_4 = 0
        var_4 = lambda x: x % int_3 == int_4
        str_1 = '.'
        iterator_2 = module_0.split_by(var_3, criterion=var_4, separator=str_1)
        var_5 = list(iterator_2)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 2
        int_1 = 1
        int_2 = -4
        int_3 = [int_0, int_1, int_2]
        lazy_list_0 = module_0.LazyList(int_3)
        var_0 = list(lazy_list_0)
        str_0 = 's'
        str_1 = None
        str_2 = '*Sm{%k}ru5OzhKTqmxf0'
        dict_0 = {str_0: var_0, str_1: str_0, str_2: int_2}
        var_1 = lazy_list_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 1117
        list_0 = [int_0]
        list_1 = [int_0]
        range_0 = module_0.Range(*list_1)
        int_1 = range_0.__next__()
        var_0 = range_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 3
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.chunk(int_0, var_0)
        var_1 = list(iterator_0)
        var_2 = print(var_1)
        int_2 = 1
        var_3 = range(int_2)
        iterator_1 = module_0.chunk(int_0, var_3)
        var_4 = list(iterator_1)
        var_5 = print(var_4)
        var_6 = []
        iterator_2 = module_0.chunk(int_0, var_6)
        var_7 = list(iterator_2)
        var_8 = print(var_7)
        int_3 = 0
        int_4 = 10
        var_9 = range(int_4)
        iterator_3 = module_0.chunk(int_3, var_9)
        var_10 = list(iterator_3)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = -1581.067
        str_0 = 'Dx?:1_ &cU+[ |e7H'
        map_list_0 = module_0.MapList(float_0, str_0)
        bytes_0 = None
        iterator_0 = map_list_0.__iter__()
        lazy_list_0 = module_0.LazyList(iterator_0)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_0 = lazy_list_1.__getitem__(bytes_0)
    except BaseException:
        pass