# Automatically generated by Pynguin.
import tornado.util as module_0
import builtins as module_1

def test_case_0():
    try:
        object_dict_0 = module_0.ObjectDict()
        str_0 = '0'
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        str_0 = 'x"\\'
        arg_replacer_0 = module_0.ArgReplacer(gzip_decompressor_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'Z\xe9\x99+\x15\x06\xa8=\xb1'
        int_0 = -311
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_1 = gzip_decompressor_0.decompress(bytes_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '0'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        object_dict_0 = module_0.ObjectDict()
        dict_0 = None
        bool_0 = None
        module_0.exec_in(object_dict_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        set_0 = set()
        bool_0 = True
        tuple_0 = (set_0, bool_0)
        var_0 = module_0.raise_exc_info(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = None
        var_0 = module_0.doctests()
        list_0 = [float_0, float_0, float_0, float_0]
        var_1 = module_0.raise_exc_info(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '[bI7\\nKXi\rqa\t*'
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'sys'
        any_0 = None
        list_0 = [any_0, str_0]
        str_1 = module_0.re_unescape(str_0)
        base_exception_0 = module_1.BaseException(*list_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        any_1 = module_0.import_object(str_0)
        var_0 = module_0.doctests()
        dict_0 = {}
        object_dict_0 = module_0.ObjectDict(**dict_0)
        str_2 = '8.%tu+pUMPB*2(GC@)r'
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        list_0 = [bytes_0]
        configurable_0 = module_0.Configurable(*list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        str_1 = module_0.re_unescape(str_0)
        bytes_0 = b"aG\x90\x06'\x8c\xd9,\x1b\xd4"
        list_0 = [str_0, str_1, bytes_0, bytes_0]
        var_0 = module_0.timedelta_to_seconds(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'ggBUm.yqjnW=\x0cF('
        dict_0 = {str_0: str_0}
        module_0.exec_in(str_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ' VrTlQFu\r.E]x"\x0ck'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        str_0 = "6'32`(v9*l|"
        str_1 = module_0.re_unescape(str_0)
        str_2 = ':0?dQi|:\\(ey@uP@-aZ'
        str_3 = module_0.re_unescape(str_2)
        var_0 = module_0.doctests()
        object_dict_0 = module_0.ObjectDict()
        float_0 = -215.19
        var_1 = module_0.raise_exc_info(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'sys.fake'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = lambda x, y, z: x * y - z
        str_0 = 'x'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 2
        int_1 = 3
        int_2 = 4
        int_3 = (int_0, int_1, int_2)
        var_1 = {}
        any_0 = arg_replacer_0.get_old_value(int_3, var_1)
        int_4 = -12
        int_5 = {str_0: int_4}
        any_1 = arg_replacer_0.get_old_value(int_4, int_5)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = lambda x, y, z: x * y - z
        str_0 = 'x'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 4
        var_1 = {}
        any_0 = arg_replacer_0.get_old_value(int_0, var_1)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = lambda x, y, z: x * y - z
        str_0 = "Creates listening sockets bound to the given port and address.\n\n    Returns a list of socket objects (multiple sockets are returned if\n    the given address maps to multiple IP addresses, which is most common\n    for mixed IPv4 and IPv6 use).\n\n    Address may be either an IP address or hostname.  If it's a hostname,\n    the server will listen on all IP addresses associated with the\n    name.  Address may be an empty string or None to listen on all\n    available interfaces.  Family may be set to either `socket.AF_INET`\n    or `socket.AF_INET6` to restrict to IPv4 or IPv6 addresses, otherwise\n    both will be used if available.\n\n    The ``backlog`` argument has the same meaning as for\n    `socket.listen() <socket.socket.listen>`.\n\n    ``flags`` is a bitmask of AI_* flags to `~socket.getaddrinfo`, like\n    ``socket.AI_PASSIVE | socket.AI_NUMERICHOST``.\n\n    ``reuse_port`` option sets ``SO_REUSEPORT`` option for every socket\n    in the list. If your platform doesn't support this option ValueError will\n    be raised.\n    "
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 4
        var_1 = {}
        any_0 = arg_replacer_0.get_old_value(int_0, var_1)
        any_1 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = lambda x, y, z: x * y - z
        str_0 = 'x'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 2
        int_1 = 3
        int_2 = 4
        int_3 = (int_0, int_1, int_2)
        any_0 = arg_replacer_0.get_old_value(int_3, int_3)
        int_4 = (int_0, int_1, int_2)
        timeout_error_0 = module_0.TimeoutError()
        dict_0 = {}
        dict_1 = {str_0: int_2, str_0: int_4, str_0: int_0}
        tuple_0 = arg_replacer_0.replace(arg_replacer_0, dict_0, dict_1)
        any_1 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = lambda x, y, z: x * y - z
        str_0 = 'x'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 2
        int_1 = 3
        int_2 = 4
        int_3 = (int_0, int_1, int_2)
        var_1 = {}
        list_0 = [arg_replacer_0, var_1]
        dict_0 = {}
        base_exception_0 = module_1.BaseException(*list_0, **dict_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        any_0 = arg_replacer_0.get_old_value(int_3, var_1)
        bytes_0 = b'\x89L\xb6~\x1a\x16|\xe8\xbe5M.\xda\xdfZ'
        dict_1 = {str_0: int_3}
        tuple_0 = arg_replacer_0.replace(int_2, bytes_0, dict_1)
        timeout_error_0 = module_0.TimeoutError()
        arg_replacer_1 = module_0.ArgReplacer(timeout_error_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = lambda x, y, z: x * y - z
        str_0 = '?'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 2
        int_1 = 3
        int_2 = 4
        int_3 = (int_0, int_1, int_2)
        var_1 = {int_3: int_2}
        any_0 = arg_replacer_0.get_old_value(int_3, var_1)
        int_4 = (int_0, int_1, int_2)
        timeout_error_0 = module_0.TimeoutError()
        str_1 = None
        dict_0 = {}
        dict_1 = {str_0: int_2, str_0: int_4, str_1: int_3, str_0: int_0}
        tuple_0 = arg_replacer_0.replace(arg_replacer_0, dict_0, dict_1)
        object_dict_0 = module_0.ObjectDict()
        arg_replacer_1 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = lambda x, y, z: x * y - z
        str_0 = 'x'
        arg_replacer_0 = module_0.ArgReplacer(var_0, str_0)
        int_0 = 2
        int_1 = 3
        int_2 = 4
        int_3 = (int_0, int_1, int_2)
        list_0 = []
        str_1 = '9\x0b'
        str_2 = None
        dict_0 = {str_1: int_3, str_1: int_0, str_2: str_1}
        optional_0 = None
        any_0 = arg_replacer_0.get_old_value(list_0, dict_0, optional_0)
        int_4 = (int_0, int_1, int_2)
        timeout_error_0 = module_0.TimeoutError()
        str_3 = None
        dict_1 = {}
        dict_2 = {str_0: int_2, str_0: int_4, str_3: int_3, str_0: int_0}
        tuple_0 = arg_replacer_0.replace(arg_replacer_0, dict_1, dict_2)
        object_dict_0 = module_0.ObjectDict()
        arg_replacer_1 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass