# Automatically generated by Pynguin.
import tornado.locale as module_0
import gettext as module_1
import datetime as module_2

def test_case_0():
    try:
        str_0 = '\x0b6`K('
        module_0.load_gettext_translations(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Ya^BWO3e~?h,3Z2(j'
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -366
        locale_0 = module_0.get()
        str_0 = locale_0.friendly_number(int_0)
        str_1 = locale_0.list(str_0)
        str_2 = locale_0.format_date(int_0)
        str_3 = '?N\nNA7'
        list_0 = []
        null_translations_0 = module_1.NullTranslations(list_0)
        str_4 = locale_0.friendly_number(int_0)
        gettext_locale_0 = module_0.GettextLocale(str_3, null_translations_0)
        str_5 = None
        list_1 = [str_2, str_5]
        locale_1 = module_0.get(*list_1)
        str_6 = None
        str_7 = locale_0.pgettext(str_1, str_1)
        iterable_0 = module_0.get_supported_locales()
        module_0.load_gettext_translations(str_5, str_6)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -4356.648222
        locale_0 = module_0.get()
        bool_0 = False
        str_0 = locale_0.format_date(float_0, bool_0)
        bool_1 = False
        str_1 = locale_0.format_date(float_0, bool_1)
        str_2 = None
        locale_1 = module_0.Locale(str_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'H'
        str_1 = 'Y<h[x )-'
        str_2 = '!6"\'~R[`\x0ci@sk[TolYC'
        str_3 = 'x?S'
        int_0 = -1719
        str_4 = ''
        str_5 = 'u7'
        str_6 = 'V'
        dict_0 = {str_0: str_0, str_4: str_5, str_6: str_6}
        dict_1 = {str_2: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_1, dict_1)
        str_7 = c_s_v_locale_0.pgettext(str_3, str_2, str_1, int_0)
        str_8 = "'|R-p(EV}\\\nqe"
        list_0 = [str_1, str_1, str_2, str_8]
        locale_0 = module_0.get(*list_0)
        locale_1 = module_0.get()
        str_9 = locale_0.list(str_0)
        list_1 = [str_3]
        datetime_0 = module_2.datetime(*list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -377
        locale_0 = module_0.get()
        str_0 = locale_0.friendly_number(int_0)
        locale_1 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        locale_0 = module_0.get()
        str_0 = '\ts\x0bzb,\tr{0:'
        bytes_0 = b'\xd5-\x97'
        str_1 = locale_0.translate(str_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1468
        str_0 = '\x0cRk4A|'
        str_1 = '*zIKpS`6$a|gj7<+YXVi'
        dict_0 = {str_1: str_1, str_0: str_1}
        dict_1 = {str_1: dict_0, str_1: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_1, dict_1)
        str_2 = c_s_v_locale_0.pgettext(str_1, str_1, str_1, int_0)
        str_3 = 'Multiple unequal Content-Lengths: %r'
        str_4 = 'Si7WIu(A3Rs'
        str_5 = 'GQr\x0c2\nNTq'
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_5, null_translations_0)
        str_6 = gettext_locale_0.pgettext(str_3, str_4, str_3)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -377
        locale_0 = module_0.get()
        str_0 = locale_0.format_date(int_0)
        str_1 = ''
        int_1 = 65535
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_1, null_translations_0)
        str_2 = gettext_locale_0.translate(str_1, int_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'J'
        module_0.set_default_locale(str_0)
        datetime_0 = None
        locale_0 = module_0.get()
        str_1 = locale_0.format_date(datetime_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'ko'
        str_1 = 'en'
        str_2 = '3Qls<^94$c_'
        str_3 = 'X[$sC'
        int_0 = 331
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_0, null_translations_0)
        str_4 = gettext_locale_0.pgettext(str_2, str_3, str_1, int_0)
        str_5 = gettext_locale_0.pgettext(str_0, str_3, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'xA\r\x0cz/'
        str_1 = 'Kcs&Fp6L\\B9|!"f*6\nb'
        locale_0 = module_0.get()
        int_0 = -457
        bool_0 = True
        bool_1 = True
        str_2 = locale_0.format_date(int_0, int_0, bool_0, bool_1, bool_0)
        str_3 = locale_0.pgettext(str_0, str_1)
        datetime_0 = module_2.datetime()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\rtE3tYw'
        str_1 = 'Cyr6020[9"nw'
        str_2 = 'plggq8`kL3J<Y{4t'
        str_3 = 'cannot set both whitespace and compress_whitespace'
        str_4 = None
        dict_0 = {str_1: str_2, str_1: str_2, str_3: str_4}
        str_5 = '\x0b!z]Uc\\MEa'
        str_6 = 'F\r'
        dict_1 = {}
        dict_2 = {str_1: dict_0, str_5: dict_0, str_6: dict_1}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_2)
        str_7 = '-5UmhX$y\rB|'
        int_0 = -2489
        locale_0 = module_0.get()
        str_8 = '\\As;D=W</YM'
        list_0 = [str_5, str_8, str_7]
        locale_1 = module_0.get(*list_0)
        str_9 = locale_1.friendly_number(int_0)
        bool_0 = True
        locale_2 = module_0.get()
        str_10 = locale_2.format_date(int_0, bool_0)
        str_11 = locale_1.pgettext(str_6, str_3, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -377
        locale_0 = module_0.get()
        str_0 = locale_0.friendly_number(int_0)
        locale_1 = module_0.get()
        str_1 = locale_0.format_date(int_0)
        str_2 = locale_0.format_date(int_0, int_0)
        str_3 = None
        str_4 = 'j9'
        str_5 = locale_0.pgettext(str_4, str_1)
        list_0 = [str_2, str_3]
        locale_2 = module_0.get(*list_0)
        datetime_0 = None
        bool_0 = locale_1.format_day(datetime_0)
    except BaseException:
        pass

def test_case_14():
    try:
        locale_0 = module_0.get()
        int_0 = 0
        locale_1 = module_0.get()
        str_0 = locale_0.format_date(int_0)
        bool_0 = True
        bool_1 = None
        str_1 = locale_1.format_date(int_0, int_0, bool_0, bool_1)
        int_1 = -91
        int_2 = -2514
        str_2 = locale_1.friendly_number(int_1)
        int_3 = -736
        bool_2 = False
        bool_3 = False
        str_3 = locale_1.format_date(int_2, int_3, bool_2, bool_3)
        iterable_0 = module_0.get_supported_locales()
        str_4 = locale_1.list(iterable_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Wait for multiple asynchronous futures in parallel.\n\n    Since Tornado 6.0, this function is exactly the same as `multi`.\n\n    .. versionadded:: 4.0\n\n    .. versionchanged:: 4.2\n       If multiple ``Futures`` fail, any exceptions after the first (which is\n       raised) will be logged. Added the ``quiet_exceptions``\n       argument to suppress this logging for selected exception types.\n\n    .. deprecated:: 4.3\n       Use `multi` instead.\n    '
        str_1 = 'dRm'
        str_2 = "-LM9iZK(`]Agar'CX(i"
        module_0.set_default_locale(str_2)
        str_3 = 'microseconds'
        str_4 = "Returns an instance of `~.httputil.HTTPMessageDelegate` for a\n        Rule's target. This method is called by `~.find_handler` and can be\n        extended to provide additional target types.\n\n        :arg target: a Rule's target.\n        :arg httputil.HTTPServerRequest request: current request.\n        :arg target_params: additional parameters that can be useful\n            for `~.httputil.HTTPMessageDelegate` creation.\n        "
        list_0 = [str_0, str_1, str_3, str_4]
        locale_0 = module_0.get(*list_0)
        str_5 = '|?MK'
        int_0 = -3935
        null_translations_0 = module_1.NullTranslations(int_0)
        gettext_locale_0 = module_0.GettextLocale(str_5, null_translations_0)
        str_6 = gettext_locale_0.pgettext(str_3, str_0)
        str_7 = locale_0.pgettext(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 't8'
        timedelta_0 = module_2.timedelta()
        str_1 = '`'
        null_translations_0 = module_1.NullTranslations(str_1)
        gettext_locale_0 = module_0.GettextLocale(str_1, null_translations_0)
        str_2 = gettext_locale_0.translate(str_0, str_0, timedelta_0)
        str_3 = 'Q./'
        module_0.set_default_locale(str_1)
        module_0.load_gettext_translations(str_3, str_3)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -366
        str_0 = 'headers'
        dict_0 = {}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_0)
        locale_0 = module_0.get()
        str_1 = locale_0.friendly_number(int_0)
        str_2 = locale_0.list(str_1)
        str_3 = 'en_US'
        dict_1 = {}
        str_4 = 'zy)EAd."wu\n?'
        dict_2 = {str_2: dict_1, str_4: dict_1, str_1: dict_1, str_2: dict_1}
        c_s_v_locale_1 = module_0.CSVLocale(str_3, dict_2)
        locale_1 = module_0.get()
        str_5 = locale_0.format_date(int_0)
        list_0 = []
        str_6 = None
        locale_2 = module_0.get(*list_0)
        str_7 = None
        str_8 = locale_0.friendly_number(int_0)
        module_0.load_gettext_translations(str_6, str_7)
    except BaseException:
        pass