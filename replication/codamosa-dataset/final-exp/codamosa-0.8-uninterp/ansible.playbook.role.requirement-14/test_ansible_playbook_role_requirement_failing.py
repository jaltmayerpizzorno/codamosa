# Automatically generated by Pynguin.
import ansible.playbook.role.requirement as module_0

def test_case_0():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        role_requirement_1 = module_0.RoleRequirement()
        var_1 = role_requirement_1.role_yaml_parse(role_requirement_1)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = None
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        dict_0 = None
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.scm_archive_role(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        role_requirement_1 = module_0.RoleRequirement()
        dict_0 = {role_requirement_1: role_requirement_1}
        var_0 = role_requirement_1.role_yaml_parse(dict_0)
        str_0 = 'Netconf'
        str_1 = "'+2,=[*-&\x0bHtK"
        var_1 = role_requirement_0.role_yaml_parse(str_1)
        var_2 = role_requirement_0.role_yaml_parse(var_1)
        var_3 = role_requirement_1.role_yaml_parse(str_0)
        int_0 = None
        var_4 = role_requirement_0.scm_archive_role(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        role_requirement_1 = module_0.RoleRequirement()
        dict_0 = {role_requirement_1: role_requirement_1}
        var_0 = role_requirement_1.role_yaml_parse(dict_0)
        str_0 = '\n    A helper class, which prevents Jinja2 from running AnsibleJ2Vars through dict().\n    Without this, {% include %} and similar will create new contexts unlike the special\n    one created in Templar.template. This ensures they are all alike, except for\n    potential locals.\n    '
        var_1 = role_requirement_0.role_yaml_parse(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '{iW.;*3)<,3,850D'
        role_requirement_0 = module_0.RoleRequirement()
        role_requirement_1 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(str_0)
        bool_0 = False
        bytes_0 = None
        var_1 = role_requirement_0.scm_archive_role(bool_0, bytes_0)
    except BaseException:
        pass