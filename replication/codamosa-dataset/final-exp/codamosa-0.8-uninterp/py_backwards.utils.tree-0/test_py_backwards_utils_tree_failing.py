# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.tree as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        a_s_t_0 = module_0.AST()
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = None
        a_s_t_0 = None
        module_1.insert_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -30
        a_s_t_0 = module_0.AST()
        type_0 = None
        iterable_0 = module_1.find(a_s_t_0, type_0)
        module_1.replace_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_3():
    try:
        a_s_t_0 = module_0.AST()
        int_0 = 961
        var_0 = module_1.get_closest_parent_of(a_s_t_0, a_s_t_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        a_s_t_0 = module_0.AST()
        list_0 = []
        dict_0 = {}
        a_s_t_1 = module_0.AST(*list_0, **dict_0)
        int_0 = 5
        list_1 = [a_s_t_1, a_s_t_0, a_s_t_1]
        module_1.insert_at(int_0, a_s_t_0, list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        a_s_t_0 = module_0.AST()
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'if a:\n  pass\n  pass\n'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.body[int_0]
        a_s_t_0 = module_1.get_parent(var_0, var_2)
        int_1 = 1
        var_3 = module_2.parse(str_0)
        var_4 = var_3.body[int_0]
        var_5 = var_4.body[int_0]
        module_1.insert_at(int_1, a_s_t_0, var_5)
        var_6 = a_s_t_0.body
        var_7 = len(var_6)
        str_1 = 'Test for function insert_at passed.'
        var_8 = print(str_1)
        list_0 = [var_5, str_1]
        iterable_0 = module_1.find(a_s_t_0, list_0)
        var_9 = module_1.get_closest_parent_of(a_s_t_0, a_s_t_0, iterable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'if a:\n  pass\n  pass\n'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.body[int_0]
        a_s_t_0 = module_1.get_parent(var_0, var_2)
        int_1 = 12
        bool_0 = False
        a_s_t_1 = module_1.get_parent(a_s_t_0, a_s_t_0, bool_0)
        var_3 = module_2.parse(str_0)
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
        var_4 = var_3.body[int_0]
        var_5 = var_4.body[int_0]
        module_1.insert_at(int_1, a_s_t_0, var_5)
        var_6 = a_s_t_0.body
        var_7 = len(var_6)
        bytes_0 = b'\xf7}\x83X\xfdB\xd8$'
        var_8 = module_1.get_closest_parent_of(a_s_t_0, a_s_t_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Unit test for function insert_at.'
        str_1 = 'if a:\n  pass\n  pass\n'
        var_0 = module_2.parse(str_1)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.body[int_0]
        a_s_t_0 = module_1.get_parent(var_0, var_2)
        var_3 = module_2.parse(str_1)
        a_s_t_1 = module_1.get_parent(a_s_t_0, a_s_t_0)
        int_1 = 0
        int_2 = -114
        module_1.insert_at(int_2, a_s_t_1, a_s_t_0)
        module_1.replace_at(int_1, a_s_t_1, a_s_t_1)
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
        var_4 = var_3.body[int_0]
        list_0 = [str_0]
        var_5 = module_1.get_closest_parent_of(a_s_t_0, a_s_t_0, list_0)
    except BaseException:
        pass