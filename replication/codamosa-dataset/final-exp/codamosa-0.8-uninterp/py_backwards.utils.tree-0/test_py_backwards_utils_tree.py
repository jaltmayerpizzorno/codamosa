# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.utils.tree as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    str_0 = 'print(__name__)'
    var_0 = module_0.parse(str_0)
    int_0 = 0
    var_1 = var_0.body[int_0]
    a_s_t_0 = module_1.get_parent(var_0, var_1)

def test_case_1():
    str_0 = 'if a:\n  pass\n  pass\n'
    var_0 = module_0.parse(str_0)
    int_0 = 0
    var_1 = var_0.body[int_0]
    var_2 = var_1.body[int_0]
    a_s_t_0 = module_1.get_parent(var_0, var_2)
    int_1 = 1
    var_3 = module_0.parse(str_0)
    var_4 = var_3.body[int_0]
    var_5 = var_4.body[int_0]
    module_1.insert_at(int_1, a_s_t_0, var_5)
    var_6 = a_s_t_0.body
    var_7 = len(var_6)
    str_1 = 'Test for function insert_at passed.'
    var_8 = print(str_1)

def test_case_2():
    str_0 = 'if a:\n  pass\n  pass\n'
    var_0 = module_0.parse(str_0)
    int_0 = 0
    var_1 = var_0.body[int_0]
    var_2 = var_1.body[int_0]
    a_s_t_0 = module_1.get_parent(var_0, var_2)
    int_1 = 12
    bool_0 = True
    a_s_t_1 = module_1.get_parent(a_s_t_0, a_s_t_0, bool_0)
    var_3 = module_0.parse(str_0)
    tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    module_1.insert_at(int_1, a_s_t_0, a_s_t_0)
    var_4 = var_3.body[int_0]
    a_s_t_2 = module_1.get_parent(a_s_t_1, a_s_t_1)
    var_5 = var_4.body[int_0]
    module_1.insert_at(int_1, a_s_t_0, var_5)
    var_6 = len(a_s_t_1)
    var_7 = print(int_1)
    str_1 = ''
    str_2 = 'G_;7d-fiDEpTd\\[CFkD|'
    str_3 = ';J35}mK}>a[D/hIjU'
    dict_0 = {str_1: int_1, str_0: var_5, str_2: a_s_t_0, str_3: int_1}
    a_s_t_3 = module_2.AST(**dict_0)
    a_s_t_4 = module_1.get_parent(a_s_t_1, a_s_t_3)
    bool_1 = True
    a_s_t_5 = module_1.get_parent(a_s_t_4, a_s_t_2, bool_1)