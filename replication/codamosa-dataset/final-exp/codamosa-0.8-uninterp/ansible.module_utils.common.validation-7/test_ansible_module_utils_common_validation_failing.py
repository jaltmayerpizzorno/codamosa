# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        list_0 = None
        str_0 = '.'
        set_0 = {list_0, str_0, list_0, list_0}
        var_0 = module_0.check_mutually_exclusive(list_0, str_0, set_0)
        str_1 = 'yNP9{TTOc4\t\\=,I/'
        var_1 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "5:76'/Q8t0B!=x`^\t3"
        bytes_0 = b'U\x90\xc3'
        var_0 = module_0.check_required_one_of(str_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '1Gb'
        int_0 = None
        dict_0 = None
        int_1 = -1118
        var_0 = module_0.check_required_one_of(int_0, dict_0, int_1)
        set_0 = {dict_0, dict_0, str_0}
        var_1 = module_0.check_type_bits(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '1r)vu'
        bool_0 = None
        bool_1 = False
        var_0 = module_0.check_required_by(bool_0, bool_1)
        float_0 = 0.2
        set_0 = {str_0, str_0}
        var_1 = module_0.check_required_if(float_0, set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 1843
        bool_0 = False
        var_0 = module_0.check_required_arguments(int_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'I\xcc\xbc\xe6\xfb\x9f\xc9\xb7&'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = [dict_0, bytes_0, bytes_0, dict_0]
        tuple_0 = ()
        tuple_1 = (list_0, tuple_0)
        int_0 = -851
        var_0 = module_0.check_required_if(tuple_1, list_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        set_0 = set()
        var_0 = module_0.check_missing_parameters(bool_0, set_0)
        bool_1 = True
        set_1 = {bool_1, bool_1, bool_1, bool_1}
        float_0 = -3238.0
        var_1 = module_0.check_type_list(float_0)
        list_0 = [bool_1, set_1, set_1]
        var_2 = module_0.check_required_arguments(set_1, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'v\x18\\4@'
        var_0 = module_0.check_missing_parameters(bytes_0)
        str_0 = 'yNP9{TTOc4\t\\=,I/'
        var_1 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 828
        set_0 = None
        var_0 = module_0.check_type_str(int_0, set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        int_0 = -4436
        var_0 = module_0.check_mutually_exclusive(dict_0, int_0)
        str_0 = 'BW/Bb\toWAMY7'
        var_1 = module_0.check_type_path(str_0)
        bytes_0 = b'\xe2\xfd\x9a\x9d%\xe6J;'
        float_0 = 1193.31288
        tuple_0 = ()
        tuple_1 = (bytes_0, dict_0, float_0, tuple_0)
        var_2 = module_0.check_type_list(tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -1727.5586
        var_0 = module_0.check_type_dict(float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'A}'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'I\xcc\xbc\xe6\xfb\x9f\xc9\xb7&'
        str_0 = 'T'
        var_0 = module_0.check_type_bool(str_0)
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = [dict_0, bytes_0, bytes_0, dict_0]
        tuple_0 = ()
        tuple_1 = (list_0, tuple_0)
        int_0 = -851
        var_1 = module_0.check_required_if(tuple_1, list_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xce\xcf\xb0\x95\xe98<G\xd1\xf9'
        var_0 = module_0.check_type_int(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '}'
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '!xiZNP(p+\t\x0c'
        var_0 = module_0.check_type_float(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'l'
        var_0 = module_0.check_type_bytes(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'sc%Z7v`M9}.#'
        var_0 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = {}
        int_0 = -4436
        var_0 = module_0.check_mutually_exclusive(dict_0, int_0)
        str_0 = 'Z6`14'
        float_0 = 44.450146
        list_0 = [var_0, float_0, int_0, int_0]
        var_1 = module_0.check_type_jsonarg(list_0)
        var_2 = module_0.check_required_one_of(str_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_19():
    try:
        float_0 = 966.0
        str_0 = None
        int_0 = -1574
        tuple_0 = (int_0,)
        bytes_0 = b'\xe3^%'
        var_0 = module_0.check_required_if(str_0, tuple_0, bytes_0)
        var_1 = module_0.check_type_jsonarg(float_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'bar'
        str_1 = 'baz'
        str_2 = [str_0, str_1]
        str_3 = [str_2]
        str_4 = 'foo'
        str_5 = {str_4: str_0}
        var_0 = module_0.check_required_one_of(str_3, str_5)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = -1728.09590956344
        var_0 = module_0.check_type_list(float_0)
        var_1 = module_0.check_type_dict(float_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = -995.0
        var_0 = module_0.check_type_bool(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = "5:76'/Q8t0B!e8=x`^\t3"
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.check_type_path(list_0)
        var_1 = module_0.check_type_dict(str_0)
        float_0 = None
        int_0 = 1942
        var_2 = module_0.check_required_arguments(float_0, int_0)
        var_3 = module_0.check_type_float(list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '{"a": 1, "b":X"wo", "c": \'three\'}'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        str_0 = '167'
        dict_0 = {tuple_0: tuple_0, str_0: tuple_1}
        bool_0 = True
        var_0 = module_0.safe_eval(str_0, dict_0, bool_0)
        bytes_0 = None
        bool_1 = True
        var_1 = module_0.check_required_together(bytes_0, bool_1)
        var_2 = module_0.check_type_bool(tuple_1)
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = b'I\xcc\xbc\xe6\xfb\x9f\xc9\xb7&'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = [dict_0, bytes_0, dict_0]
        tuple_0 = ()
        tuple_1 = (list_0, tuple_0)
        int_0 = -851
        var_0 = module_0.check_required_if(tuple_1, list_0, int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b'8o\x80\xb3!\xd7'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.check_required_by(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'yNP9{TTOc4\t\\=,I/'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 2039
        var_0 = module_0.check_type_int(int_0)
        bytes_0 = b'\xc1AG|\xb0\x8b1\x01\xbd'
        var_1 = module_0.check_type_bits(bytes_0)
    except BaseException:
        pass

def test_case_30():
    try:
        dict_0 = {}
        int_0 = -4436
        var_0 = module_0.check_mutually_exclusive(dict_0, int_0)
        str_0 = 'Z6`14'
        float_0 = 79.8
        var_1 = module_0.check_required_one_of(str_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_31():
    try:
        tuple_0 = ()
        int_0 = -2278
        var_0 = module_0.check_required_one_of(tuple_0, int_0)
        list_0 = [int_0, tuple_0]
        var_1 = module_0.check_type_dict(list_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'sjP59sc\x0b'
        dict_0 = {str_0: str_0}
        str_1 = 'bG2'
        var_0 = module_0.check_required_arguments(dict_0, str_1)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = "5:76'/Q8t0B!e8=x`^\t3"
        var_0 = module_0.check_type_dict(str_0)
        float_0 = None
        int_0 = 1942
        var_1 = module_0.check_required_arguments(float_0, int_0)
        bytes_0 = b'C\x9a\xaa'
        var_2 = module_0.check_required_one_of(bytes_0, str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 1
        var_0 = dict(a=int_0)
        str_0 = 'a'
        str_1 = [str_0]
        var_1 = module_0.check_missing_parameters(var_0, str_1)
        var_2 = dict()
        str_2 = 'a'
        var_3 = module_0.check_missing_parameters(var_2, str_2)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'A}'
        list_0 = [str_0]
        var_0 = module_0.check_type_list(list_0)
        set_0 = set()
        var_1 = module_0.check_type_dict(set_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 'A}'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [str_0]
        float_0 = 79.8
        var_0 = module_0.check_required_one_of(dict_0, list_0)
        bool_0 = False
        var_1 = module_0.check_type_path(bool_0)
        var_2 = module_0.check_type_dict(float_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '{"a": 1, "b": "two", "c": \'three\'}'
        var_0 = module_0.check_type_dict(str_0)
        str_1 = '2_$,;ac#2.*YHQ'
        bytes_0 = b'\xab\xe9e\x1e\xb8\xae'
        var_1 = module_0.check_mutually_exclusive(str_1, bytes_0)
        list_0 = [bytes_0]
        var_2 = module_0.check_type_list(list_0)
        float_0 = 2430.9388
        var_3 = module_0.check_type_float(float_0)
        var_4 = module_0.check_type_bits(bytes_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'one'
        str_1 = [str_0, str_0]
        str_2 = 'three'
        str_3 = 'four\nj'
        str_4 = [str_2, str_3]
        str_5 = 's\toa|'
        str_6 = [str_5, str_2]
        str_7 = [str_1, str_4, str_2, str_6]
        str_8 = {str_0: str_0, str_0: str_0, str_2: str_2, str_5: str_5, str_3: str_3}
        var_0 = module_0.check_mutually_exclusive(str_7, str_8)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'a'
        str_1 = 'c'
        str_2 = 'd'
        str_3 = 'e'
        str_4 = [str_2, str_3, str_0]
        str_5 = [str_1, str_4]
        str_6 = 'exist'
        var_0 = dict(a=str_6, c=str_6)
        var_1 = module_0.check_required_together(str_5, var_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'a'
        str_1 = 'c'
        str_2 = 'b'
        str_3 = 'd'
        str_4 = {str_0: str_1, str_3: str_2}
        var_0 = module_0.check_required_by(str_4, str_4)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'J \t^m\x0ciyMN%'
        float_0 = 1.0
        dict_0 = {str_0: float_0, str_0: float_0, float_0: float_0}
        var_0 = module_0.safe_eval(str_0, float_0, dict_0)
        var_1 = module_0.check_required_by(dict_0, dict_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'present'
        bool_0 = True
        var_0 = [str_0, str_0, str_0, bool_0]
        str_1 = 'toolxpr\rm'
        str_2 = (str_1, str_1)
        var_1 = [var_0, str_2]
        var_2 = {str_0: str_0, str_1: bool_0}
        var_3 = module_0.check_required_if(var_1, var_2)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'present'
        bool_0 = True
        var_0 = [str_0, str_0, str_0, bool_0]
        str_1 = 'somnt'
        int_0 = 99
        str_2 = 'bool_param'
        var_1 = [str_1, int_0, str_0]
        var_2 = [var_0, var_1]
        var_3 = {str_0: str_0, str_2: bool_0}
        var_4 = module_0.check_required_if(var_2, var_3)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'a'
        str_1 = 'c'
        str_2 = 'b'
        var_0 = None
        var_1 = {str_0: str_2, str_1: var_0}
        str_3 = 'd'
        str_4 = {str_0: str_1, str_3: str_2}
        var_2 = module_0.check_required_by(str_4, var_1)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '>$)E\x0bU=j]8]7dwp,'
        var_0 = module_0.check_type_dict(str_0)
        str_1 = 'a=1, b="two", c=\'three\''
        var_1 = module_0.check_type_dict(str_1)
        str_2 = 'abc'
        var_2 = module_0.check_type_dict(str_2)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'state'
        str_1 = 'present'
        str_2 = 'path'
        str_3 = (str_2,)
        bool_0 = True
        var_0 = [str_0, str_1, str_3, bool_0]
        int_0 = 99
        str_4 = 'bool_param'
        str_5 = 'string_param'
        str_6 = (str_4, str_5)
        var_1 = [str_0, int_0, str_6]
        var_2 = [var_0, var_1]
        var_3 = {str_0: str_1, str_4: bool_0}
        var_4 = module_0.check_required_if(var_2, var_3)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'a'
        str_1 = ' K'
        str_2 = '0'
        var_0 = {str_0: str_2, str_1: str_1}
        str_3 = 'd'
        int_0 = 14
        var_1 = module_0.check_type_bytes(int_0)
        str_4 = {str_0: str_1, str_3: str_2}
        str_5 = 'fJeG9\\JAWrK-f'
        var_2 = module_0.check_type_raw(str_5)
        var_3 = module_0.check_required_by(str_4, var_0)
        tuple_0 = (str_2,)
        var_4 = module_0.check_type_int(tuple_0)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = 'foo'
        str_1 = 'bar'
        str_2 = 'required'
        bool_0 = True
        bool_1 = {str_2: bool_0}
        bool_2 = {str_2: bool_0}
        bool_3 = {str_0: bool_1, str_1: bool_2}
        var_0 = module_0.check_required_arguments(bool_3, str_2)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = 'a'
        str_1 = 'required'
        bool_0 = True
        bool_1 = {str_1: bool_0}
        bool_2 = {str_0: bool_1}
        bool_3 = {str_0: bool_0}
        var_0 = module_0.check_required_arguments(bool_2, bool_3)
        bool_4 = {str_1: bool_0}
        bool_5 = {str_0: bool_4}
        var_1 = {}
        var_2 = module_0.check_required_arguments(bool_5, var_1)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = '{{foo.bar()}}'
        var_0 = module_0.safe_eval(str_0)
        var_1 = module_0.check_type_dict(str_0)
        int_0 = 982
        var_2 = module_0.check_type_str(int_0, str_0)
        list_0 = None
        dict_0 = None
        tuple_0 = (dict_0, dict_0)
        var_3 = module_0.check_required_if(list_0, list_0, tuple_0)
        str_1 = 'import'
        bool_0 = True
        int_1 = 295
        var_4 = module_0.check_type_float(int_1)
        var_5 = module_0.safe_eval(str_1, bool_0)
        var_6 = module_0.safe_eval(str_1)
        bytes_0 = b'M'
        var_7 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = (str_0, str_1)
        str_3 = 'c'
        str_4 = 'd'
        str_5 = (str_3, str_4)
        str_6 = [str_2, str_5]
        str_7 = 'e'
        str_8 = 'foo'
        str_9 = {str_7: str_8}
        str_10 = 'state'
        str_11 = [str_10]
        var_0 = module_0.check_required_together(str_6, str_9, str_11)
        str_12 = (str_0, str_1)
        str_13 = (str_3, str_4)
        str_14 = [str_12, str_13]
        str_15 = {str_0: str_8}
        str_16 = [str_10]
        var_1 = module_0.check_required_together(str_14, str_15, str_16)
    except BaseException:
        pass