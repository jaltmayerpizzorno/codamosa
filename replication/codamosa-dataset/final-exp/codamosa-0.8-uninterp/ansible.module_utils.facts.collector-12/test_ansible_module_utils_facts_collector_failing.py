# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        bytes_0 = b'\xa6\xf4\x0f\x93\xe0Kb/\x1f\xb3j'
        base_fact_collector_0 = module_0.BaseFactCollector(bytes_0)
        var_0 = module_0.select_collector_classes(bytes_0, base_fact_collector_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1580
        str_0 = '7A}./9[~\\o(i<[<tD'
        tuple_0 = ()
        dict_0 = {str_0: tuple_0}
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        dict_1 = {str_0: tuple_0, str_0: dict_0, str_0: int_0, str_0: collector_not_found_error_0}
        var_0 = module_0.collector_classes_from_gather_subset(tuple_0, int_0, str_0, dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'G\x97,\xf4U\xb26\xcd\x81\xd9F'
        var_0 = module_0.collector_classes_from_gather_subset(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '=Ci'
        str_1 = 'b\rWi1;L9QsvORi'
        str_2 = ''
        str_3 = 'PG/tG#iqbg['
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_3: str_2}
        var_0 = module_0.build_fact_id_to_collector_map(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\ng'
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_0 = module_0.find_unresolved_requires(str_0, cycle_found_in_fact_deps_0)
    except BaseException:
        pass

def test_case_5():
    try:
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        dict_0 = {}
        var_0 = module_0.resolve_requires(cycle_found_in_fact_deps_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 2802.087611
        list_0 = [float_0, float_0]
        bool_0 = False
        var_0 = module_0.resolve_requires(list_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = None
        str_0 = 'eZ.5*57"{'
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_1 = None
        int_0 = 20
        list_0 = [dict_0, int_0]
        var_0 = module_0.collector_classes_from_gather_subset(str_0, base_fact_collector_0, str_1, list_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'dulMu*U~QG)(X2'
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_1 = '[`?M/P]#'
        var_0 = module_0.resolve_requires(str_0, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '`Fg\x0cGt'
        str_1 = 'Fp3J}9-'
        dict_0 = {str_0: str_0, str_1: str_1}
        var_0 = module_0.find_unresolved_requires(str_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = 'd'
        str_4 = 'e'
        str_5 = 'f'
        str_6 = [str_1, str_2]
        str_7 = [str_3]
        str_8 = [str_4]
        str_9 = [str_5]
        str_10 = [str_5]
        var_0 = []
        var_1 = {str_0: str_6, str_1: str_7, str_2: str_8, str_3: str_9, str_4: str_10, str_5: var_0}
        str_11 = [str_1, str_2]
        str_12 = [str_0]
        str_13 = [str_0]
        str_14 = {str_0: str_11, str_1: str_12, str_2: str_13}
        var_2 = module_0.tsort(var_1)
        var_3 = module_0.tsort(str_14)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        float_0 = -880.94
        list_0 = [bool_0, float_0, bool_0, float_0]
        list_1 = [list_0, list_0, float_0]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        list_2 = [bool_0, list_1, float_0]
        int_0 = 242
        var_0 = module_0.get_collector_names(bool_0, list_1, cycle_found_in_fact_deps_0, list_2, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = base_fact_collector_0.collect_with_namespace()
        base_fact_collector_1 = module_0.BaseFactCollector()
        float_0 = 2966.348047
        base_fact_collector_2 = module_0.BaseFactCollector(float_0)
        list_0 = [base_fact_collector_2, base_fact_collector_1]
        var_1 = base_fact_collector_1.collect()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_2 = module_0.collector_classes_from_gather_subset(list_0, cycle_found_in_fact_deps_0)
        str_0 = '\x0cZx/qlXQ.dt1w@"v'
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        collector_not_found_error_1 = module_0.CollectorNotFoundError(*list_0)
        cycle_found_in_fact_deps_1 = module_0.CycleFoundInFactDeps()
        cycle_found_in_fact_deps_2 = module_0.CycleFoundInFactDeps()
        var_3 = module_0.resolve_requires(cycle_found_in_fact_deps_2, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -518.3
        tuple_0 = (float_0,)
        str_0 = '>\tpAJ>xkbeQ_dMi '
        base_fact_collector_0 = module_0.BaseFactCollector()
        set_0 = {float_0}
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        list_0 = [cycle_found_in_fact_deps_0]
        var_0 = module_0.collector_classes_from_gather_subset(tuple_0, str_0, base_fact_collector_0, set_0, cycle_found_in_fact_deps_0, list_0)
    except BaseException:
        pass