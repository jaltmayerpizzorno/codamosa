# Automatically generated by Pynguin.
import cookiecutter.prompt as module_0
import collections as module_1

def test_case_0():
    try:
        float_0 = 1191.66
        bool_0 = True
        var_0 = module_0.read_user_variable(float_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b''
        bool_0 = False
        var_0 = module_0.read_user_yes_no(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        var_0 = module_0.read_repo_password(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -1423.09
        set_0 = {float_0, float_0, float_0, float_0}
        bytes_0 = b'i\x9b\xad\xf7\xd8'
        var_0 = module_0.read_user_choice(set_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -3077
        var_0 = module_0.process_json(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'var_name'
        var_0 = module_0.read_user_dict(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0, bool_0}
        bool_1 = False
        var_0 = module_0.render_variable(bool_0, set_0, bool_1)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 1834.759
        tuple_0 = ()
        complex_0 = None
        bytes_0 = b'\xa3\xae\xbf\xbc5t\x1dzS\xfad\x95\x85\xb3\xfe\x82'
        bytes_1 = b'\xa0t'
        list_0 = []
        var_0 = module_0.render_variable(bytes_1, list_0, list_0)
        var_1 = module_0.prompt_choice_for_config(float_0, tuple_0, complex_0, bytes_0, float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 1834.759
        tuple_0 = ()
        complex_0 = None
        bytes_0 = b'\xa3\xae\xbf\xbc5t\x1dzS\xfa\xff\x95\x85\xb3\xd1\x82'
        var_0 = module_0.prompt_choice_for_config(float_0, tuple_0, complex_0, bytes_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '=DnT\x0cD+;'
        var_0 = module_0.prompt_for_config(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        str_1 = 'T-d]a+}NEAu(=^KE=m'
        var_0 = module_0.render_variable(str_0, str_1, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tuple_0 = ()
        complex_0 = None
        bytes_0 = b'\xa3\xae\xbf\xbc5t\x1dzS\xfad\x95\x85\xb3\xfe\x82'
        list_0 = [complex_0, complex_0]
        var_0 = module_0.render_variable(bytes_0, list_0, list_0)
        str_0 = '5fQW\\(PF>yGa_'
        var_1 = module_0.read_user_dict(tuple_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        var_0 = module_0.read_user_dict(dict_0, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'd@falt_<ale'
        list_0 = None
        str_1 = 'Bu"(Q=<'
        var_0 = module_0.render_variable(list_0, list_0, str_1)
        var_1 = module_0.read_user_dict(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        bytes_0 = b'\xdb&\x9dI`0'
        float_0 = None
        set_0 = set()
        int_0 = None
        var_0 = module_0.prompt_choice_for_config(bool_0, bytes_0, float_0, set_0, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 1834.759
        tuple_0 = ()
        dict_0 = {float_0: float_0, float_0: float_0, tuple_0: tuple_0}
        str_0 = 'R{s[jH:k:7e7Z<c'
        list_0 = [tuple_0, dict_0]
        float_1 = -221.705
        var_0 = module_0.prompt_choice_for_config(dict_0, str_0, list_0, tuple_0, float_1)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -672
        tuple_0 = None
        list_0 = [int_0, int_0]
        var_0 = module_0.read_user_choice(tuple_0, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'UenoLoGZE\nlhQ'
        list_0 = [str_0, str_0]
        str_1 = '"iw4\x0bBY/F+B'
        ordered_dict_0 = module_1.OrderedDict()
        set_0 = set()
        var_0 = module_0.render_variable(str_1, ordered_dict_0, set_0)
        var_1 = module_0.process_json(list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\xa0t'
        list_0 = []
        str_0 = 'PvD+b}\r8'
        str_1 = 'PvD+b}\r8'
        dict_0 = {str_0: str_1, bytes_0: str_1}
        var_0 = module_0.render_variable(list_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        tuple_0 = ()
        complex_0 = None
        bytes_0 = b'\xa3\xae\xbf\xbc5t\x1dzS\xfad\x95\x85\xb3\xfe\x82'
        bytes_1 = b'\xa0t'
        list_0 = []
        set_0 = {tuple_0, bytes_0, complex_0, bytes_0}
        dict_0 = {complex_0: bytes_1, bytes_0: list_0}
        var_0 = module_0.render_variable(set_0, dict_0, set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '{}'
        var_0 = module_0.process_json(str_0)
        str_1 = '[]'
        var_1 = module_0.process_json(str_1)
    except BaseException:
        pass