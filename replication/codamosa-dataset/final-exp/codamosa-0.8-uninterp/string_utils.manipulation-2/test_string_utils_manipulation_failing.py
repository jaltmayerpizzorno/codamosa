# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        int_0 = -258
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'CM!/UwNx'
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Y2 U7Zc]Bhr6'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'P[R72|uz`8G=y<u)D'
        str_1 = 'roman_decode'
        string_formatter_0 = module_0.__StringFormatter(str_1)
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ugRZO 0T\x0b\x0bX@/b'
        str_1 = module_0.shuffle(str_0)
        str_2 = module_0.compress(str_0)
        str_3 = None
        int_0 = module_0.roman_decode(str_3)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '(\\({2,}|\\){2,}|\\[{2,}|\\]{2,}|{{2,}|\\}{2,}|:{2,}|,{2,}|;{2,}|\\+{2,}|-{2,}|\\s{2,}|%{2,}|={2,}|"{2,}|\\\'{2,})'
        str_1 = module_0.decompress(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = None
        str_1 = module_0.compress(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Bik'
        bool_0 = module_0.booleanize(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.reverse(str_1)
        str_3 = ',j_rq&%d\\;:R='
        str_4 = module_0.slugify(str_2, str_3)
        int_0 = -816
        str_5 = module_0.compress(str_2, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '7:X[s=OH'
        roman_numbers_0 = module_0.__RomanNumbers()
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -4323
        list_0 = [int_0]
        string_formatter_0 = module_0.__StringFormatter(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        str_0 = "\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    "
        str_1 = module_0.prettify(str_0)
        str_2 = '/XUo3YlglewNq!9cU_fz'
        str_3 = module_0.reverse(str_0)
        int_0 = module_0.roman_decode(str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '^[a-zA-Z]*([a-z]+[A-Z]+|[A-Z]+[a-z]+)[a-zA-Z\\d]*$'
        str_1 = module_0.strip_html(str_0)
        str_2 = 'LJ:bX1Hs,'
        str_3 = "\n    Check if a string is a valid url.\n\n    *Examples:*\n\n    >>> is_url('http://www.mysite.com') # returns true\n    >>> is_url('https://mysite.com') # returns true\n    >>> is_url('.mysite.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param allowed_schemes: List of valid schemes ('http', 'https', 'ftp'...). Default to None (any scheme is valid).\n    :type allowed_schemes: Optional[List[str]]\n    :return: True if url, false otherwise\n    "
        tuple_0 = (str_1, str_2, str_3)
        int_0 = 2705
        var_0 = module_0.camel_case_to_snake(tuple_0, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = module_0.snake_case_to_camel(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '~:\\ Qb/:'
        str_1 = module_0.prettify(str_0)
        str_2 = None
        str_3 = module_0.shuffle(str_2)
    except BaseException:
        pass

def test_case_14():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        int_0 = 1083
        str_0 = module_0.roman_encode(int_0)
        bool_0 = False
        str_1 = module_0.strip_html(str_0, bool_0)
        str_2 = None
        str_3 = module_0.strip_html(str_2)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '_'
        str_1 = module_0.slugify(str_0)
        str_2 = module_0.roman_encode(str_1)
    except BaseException:
        pass

def test_case_16():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        int_0 = -1797
        str_0 = '<Mb-;>09:!4'
        bool_0 = module_0.booleanize(str_0)
        str_1 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        set_0 = set()
        int_0 = 1097
        str_0 = module_0.roman_encode(int_0)
        str_1 = "\\ac.n#'eYx?"
        str_2 = module_0.strip_margin(str_1)
        string_formatter_0 = module_0.__StringFormatter(set_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '1?VuxO~'
        str_1 = module_0.prettify(str_0)
        str_2 = 'HN"'
        bool_0 = True
        str_3 = 'M0l0&'
        bool_1 = module_0.booleanize(str_3)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_4 = module_0.slugify(str_2)
        str_5 = module_0.strip_html(str_4, bool_1)
        str_6 = module_0.reverse(str_4)
        str_7 = module_0.strip_html(str_2, bool_0)
        int_0 = module_0.roman_decode(str_2)
    except BaseException:
        pass

def test_case_19():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = None
        str_1 = module_0.reverse(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '{w]*5?B/FX>gV/q'
        bool_0 = module_0.booleanize(str_0)
        bool_1 = True
        str_1 = module_0.strip_html(str_0, bool_1)
        str_2 = module_0.reverse(str_1)
        str_3 = 's%DN\x0b5B'
        roman_numbers_0 = module_0.__RomanNumbers()
        str_4 = module_0.prettify(str_3)
        str_5 = '==v'
        str_6 = 'LL$GN~.z&1JsSSFyjP[H'
        str_7 = module_0.strip_margin(str_6)
        str_8 = module_0.strip_html(str_5)
        str_9 = ''
        str_10 = module_0.slugify(str_9)
        str_11 = None
        str_12 = module_0.slugify(str_11)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'Bik'
        bool_0 = module_0.booleanize(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_1 = None
        bool_1 = module_0.booleanize(str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = None
        str_1 = module_0.strip_margin(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '*Q'
        str_1 = module_0.reverse(str_0)
        str_2 = ''
        str_3 = '\rJ1n:QAR_).vG_U'
        var_0 = module_0.camel_case_to_snake(str_3)
        str_4 = module_0.decompress(str_2)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 1653
        str_0 = module_0.roman_encode(int_0)
        str_1 = 'gg2i'
        str_2 = module_0.asciify(str_1)
        str_3 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '5( :\t,0Yy^Q\tO4)2p'
        str_1 = '5eL-\ncP)yxS?A},z=^'
        int_0 = 917
        str_2 = module_0.compress(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'GK)HN>hXhL\r'
        str_1 = '?d<8$(f9d\n\n'
        str_2 = module_0.strip_margin(str_1)
        int_0 = -237
        str_3 = module_0.compress(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'gg2i'
        str_1 = module_0.asciify(str_0)
        str_2 = 'W.H@QD|pKh8'
        str_3 = module_0.prettify(str_2)
        int_0 = 418
        str_4 = module_0.prettify(str_3)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_5 = module_0.roman_encode(int_0)
        str_6 = 'c2d$i0EiYH\n'
        str_7 = module_0.roman_encode(str_6)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'Pf<dWs0q-\x0cRf-f9y.'
        str_1 = module_0.compress(str_0)
        str_2 = 'is_ip_v4'
        bool_0 = False
        str_3 = module_0.snake_case_to_camel(str_2, bool_0)
        str_4 = module_0.strip_html(str_0)
        str_5 = '%isbLw1A5\x0cI%Ektk=CP'
        str_6 = module_0.strip_html(str_5)
        str_7 = 'F;cdyA[x'
        str_8 = "B\x0bs+1OTq@*0N.j<'"
        var_0 = module_0.camel_case_to_snake(str_8)
        int_0 = module_0.roman_decode(str_7)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '((?<=[^\\s\\d]),(?=[^\\s\\d])|\\s,\\s|\\s,(?=[^\\s\\d])|\\s,(?!.)|(?<=[^\\s\\d.])\\.+(?=[^\\s\\d.])|\\s\\.+\\s|\\s\\.+(?=[^\\s\\d])|\\s\\.+(?!\\.)|(?<=\\S);(?=\\S)|\\s;\\s|\\s;(?=\\S)|\\s;(?!.)|(?<=\\S):(?=\\S)|\\s:\\s|\\s:(?=\\S)|\\s:(?!.)|(?<=[^\\s!])!+(?=[^\\s!])|\\s!+\\s|\\s!+(?=[^\\s!])|\\s!+(?!!)|(?<=[^\\s?])\\?+(?=[^\\s?])|\\s\\?+\\s|\\s\\?+(?=[^\\s?])|\\s\\?+(?!\\?)|\\d%(?=\\S)|(?<=\\d)\\s%\\s|(?<=\\d)\\s%(?=\\S)|(?<=\\d)\\s%(?!.))'
        str_1 = module_0.strip_margin(str_0)
        int_0 = None
        str_2 = module_0.compress(str_1, str_1, int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'GK)HN>hXhL\r'
        str_1 = module_0.strip_margin(str_0)
        str_2 = module_0.compress(str_0)
        str_3 = 'roman_decode'
        string_formatter_0 = module_0.__StringFormatter(str_3)
        str_4 = 'is_ip_v4'
        bool_0 = False
        str_5 = string_formatter_0.format()
        str_6 = module_0.snake_case_to_camel(str_4, bool_0)
        str_7 = "((?<=\\w)\\'\\ss\\s|(?<=\\w)\\s\\'s(?=\\w)|(?<=\\w)\\s\\'s\\s(?=\\w))"
        str_8 = string_formatter_0.format()
        str_9 = module_0.strip_html(str_7)
        str_10 = module_0.strip_html(str_0)
        str_11 = 'is_email'
        int_0 = module_0.roman_decode(str_11)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'GK)HN>hXhL\r'
        str_1 = module_0.compress(str_0)
        str_2 = 'roman_decode'
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = module_0.decompress(str_1)
        str_4 = 'is_ip_v4'
        str_5 = string_formatter_0.format()
        str_6 = module_0.snake_case_to_camel(str_4)
        str_7 = '^3(?:0[0-5]|[68]\\d)\\d{11}$'
        str_8 = module_0.strip_html(str_7)
        str_9 = 'cMe@u5'
        str_10 = module_0.strip_html(str_9)
        string_compressor_0 = module_0.__StringCompressor()
        str_11 = '"WjyX`kx1gnAEY'
        str_12 = module_0.prettify(str_11)
        str_13 = module_0.shuffle(str_10)
        str_14 = 'G.HRJDU!{\x0c_'
        int_0 = module_0.roman_decode(str_14)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'GK)HN>hXhL\r'
        str_1 = module_0.compress(str_0)
        str_2 = 'roman_decode'
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = 'is_ip_v4'
        bool_0 = False
        str_4 = string_formatter_0.format()
        str_5 = module_0.snake_case_to_camel(str_3, bool_0)
        str_6 = module_0.strip_html(str_1)
        str_7 = '-Bu/\nWHn;a:hb!'
        str_8 = module_0.strip_html(str_7)
        str_9 = 'contains_html'
        int_0 = module_0.roman_decode(str_9)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'GK)HNhXhL\r'
        str_1 = module_0.compress(str_0)
        str_2 = 'roman_decode'
        var_0 = module_0.camel_case_to_snake(str_1)
        string_formatter_0 = module_0.__StringFormatter(str_2)
        str_3 = '^([a-z\\d]+'
        str_4 = string_formatter_0.format()
        str_5 = module_0.snake_case_to_camel(str_4)
        str_6 = string_formatter_0.format()
        str_7 = '@s\x0b'
        str_8 = module_0.strip_html(str_7)
        bool_0 = False
        str_9 = module_0.strip_html(str_3, bool_0)
        str_10 = '\\D `g)\r5mK;yE'
        str_11 = module_0.strip_html(str_10)
        str_12 = '6'
        int_0 = module_0.roman_decode(str_12)
    except BaseException:
        pass

def test_case_35():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        int_0 = 5280
        str_0 = '8'
        str_1 = module_0.strip_html(str_0)
        string_formatter_0 = module_0.__StringFormatter(str_0)
        str_2 = string_formatter_0.format()
        str_3 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 285
        str_0 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.roman_encode(int_0)
        string_compressor_0 = module_0.__StringCompressor()
        int_1 = 160
        str_3 = module_0.reverse(str_0)
        str_4 = 'm;^@$tQ@O{&\\f(PT\rRv['
        str_5 = module_0.asciify(str_4)
        str_6 = module_0.compress(str_1, str_0, int_1)
    except BaseException:
        pass