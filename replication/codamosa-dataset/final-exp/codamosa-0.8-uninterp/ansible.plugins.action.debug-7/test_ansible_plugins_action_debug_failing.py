# Automatically generated by Pynguin.
import ansible.plugins.action.debug as module_0

def test_case_0():
    try:
        str_0 = 'MacOSX'
        str_1 = 'QsR\x0b;skg0(!\nKe'
        int_0 = -2029
        dict_0 = {str_1: int_0, int_0: int_0}
        complex_0 = None
        list_0 = [str_1, complex_0, dict_0, str_0]
        str_2 = 'Q62F+r~'
        str_3 = '9g$tM$DC*%QDx'
        action_module_0 = None
        str_4 = '6Yr42Iute0'
        action_module_1 = module_0.ActionModule(complex_0, list_0, str_2, str_3, action_module_0, str_4)
        float_0 = -962.851332
        set_0 = {float_0, str_1, float_0}
        bytes_0 = b"\x10\x1e\x90\xf1\r'1\xd8\xf8\xe1\xb4{\xd6\xa8^\x1eq\xf1"
        action_module_2 = module_0.ActionModule(str_1, int_0, dict_0, set_0, bytes_0, float_0)
        var_0 = action_module_2.run(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        float_0 = 1000.0
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: float_0, bytes_0: float_0}
        str_0 = 'N5\x0c%\x0b\\Vb#6Gt'
        int_0 = -2792
        set_0 = {int_0}
        int_1 = -1548
        action_module_0 = module_0.ActionModule(int_0, dict_0, set_0, dict_0, bytes_0, int_1)
        list_0 = [str_0]
        complex_0 = None
        set_1 = {int_0, bytes_0}
        action_module_1 = module_0.ActionModule(int_0, int_0, list_0, complex_0, list_0, set_1)
        action_module_2 = module_0.ActionModule(dict_0, str_0, action_module_1, action_module_1, int_0, bytes_0)
        list_1 = [bytes_0, bytes_0]
        float_1 = -1865.478542
        int_2 = -1992
        dict_1 = {float_1: float_1, float_1: float_1, float_1: int_2}
        int_3 = -32
        set_2 = set()
        bytes_1 = b'3\xeb'
        int_4 = 368
        tuple_0 = (list_1, int_4)
        int_5 = None
        bool_0 = True
        str_1 = 'the playbook: %s could not be found'
        tuple_1 = (tuple_0, int_5, bool_0, str_1)
        action_module_3 = module_0.ActionModule(set_1, tuple_1, list_1, tuple_0, int_0, bytes_1)
        str_2 = '\n    \\[\n        (?:[0-9]+:[0-9]+)               # numeric begin:end\n        (?::[0-9]+)?                    # numeric :step (optional)\n    \\]\n'
        action_module_4 = module_0.ActionModule(int_4, str_2, tuple_1, bytes_1, complex_0, bytes_1)
        action_module_5 = module_0.ActionModule(float_1, dict_1, int_3, set_2, bytes_1, str_2)
        var_0 = action_module_5.run(bytes_0, list_1)
    except BaseException:
        pass