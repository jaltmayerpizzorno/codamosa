# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 512.0
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        dict_0 = {}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        list_0 = [float_0]
        var_1 = ansible_vault_encrypted_unicode_1.__int__(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '4,2#XQ_dWeHE\\}Du'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x93\x8d%\xf9\x03'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'FA\tf~9<$?\n\x0bQHGM'
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(str_0)
        bytes_0 = b'tmu\xba\xbd\x9cv\xaarYo\xb3:\xa5H[TM'
        list_0 = [bytes_0, bytes_0]
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [str_0]
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_1.__lt__(ansible_vault_encrypted_unicode_0)
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_2.__float__()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'm(YHa1@F)'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalpha()
        var_1 = ansible_vault_encrypted_unicode_0.split()
        str_1 = '/W)Ft wkp'
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_3 = ansible_vault_encrypted_unicode_0.__add__(ansible_base_y_a_m_l_object_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        ansible_base_y_a_m_l_object_1 = module_0.AnsibleBaseYAMLObject()
        var_4 = ansible_vault_encrypted_unicode_1.__contains__(ansible_base_y_a_m_l_object_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        int_0 = -1006
        set_0 = {int_0, bool_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.__reversed__()
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        list_0 = [bool_0, bool_0, bool_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_2 = ansible_vault_encrypted_unicode_2.__unicode__()
        var_3 = ansible_vault_encrypted_unicode_2.expandtabs()
        var_4 = ansible_vault_encrypted_unicode_2.is_encrypted()
        str_0 = '=ROqD)!a}xp`,gB5'
        var_5 = ansible_vault_encrypted_unicode_0.__rmod__(str_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b"J\x16'cm"
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        dict_1 = {}
        list_0 = [dict_1]
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.isprintable()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_1 = ansible_vault_encrypted_unicode_1.isdigit()
        list_1 = [dict_0, dict_0, bytes_0, dict_0]
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_2)
        var_2 = ansible_vault_encrypted_unicode_3.casefold()
        list_2 = [bytes_0]
        var_3 = ansible_vault_encrypted_unicode_0.find(list_2)
    except BaseException:
        pass

def test_case_9():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [ansible_unicode_0, ansible_unicode_0]
        list_1 = [list_0, ansible_unicode_0, list_0]
        ansible_sequence_0 = module_0.AnsibleSequence()
        list_2 = []
        list_3 = [list_2]
        str_0 = 'only run the playbook if the repository has been updated'
        dict_0 = {str_0: list_3, str_0: str_0}
        ansible_sequence_1 = module_0.AnsibleSequence(*list_3, **dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_1)
        var_0 = ansible_vault_encrypted_unicode_0.endswith(list_1, ansible_sequence_0)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_sequence_0 = None
        set_0 = {ansible_sequence_0, ansible_sequence_0, ansible_sequence_0, ansible_sequence_0}
        float_0 = 1696.622526
        tuple_0 = ()
        str_0 = '3}QMEV\x0b2Ep?Q%i@j,\x0bd'
        tuple_1 = (tuple_0, str_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_1)
        var_0 = ansible_vault_encrypted_unicode_0.find(set_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__unicode__()
        int_0 = None
        list_0 = [int_0, int_0, int_0]
        str_0 = 'all_ipv6_addresses'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_1.format_map(int_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_2 = ansible_vault_encrypted_unicode_2.encode()
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -573.54
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.rsplit()
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_0.title()
        list_0 = [float_0, var_1, var_0, float_0]
        int_0 = 442
        var_3 = ansible_vault_encrypted_unicode_0.isalnum()
        var_4 = ansible_vault_encrypted_unicode_0.__ne__(int_0)
        str_0 = 'True AAA'
        dict_0 = {str_0: float_0}
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        bytes_0 = b'\xed"\xa6\x97'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        int_0 = -1251
        list_0 = [ansible_vault_encrypted_unicode_0]
        var_0 = ansible_vault_encrypted_unicode_0.isascii()
        str_0 = ']Q*Hmo'
        dict_0 = {str_0: int_0, str_0: bytes_0, str_0: ansible_vault_encrypted_unicode_1}
        ansible_mapping_0 = module_0.AnsibleMapping(*list_0, **dict_0)
        var_1 = ansible_vault_encrypted_unicode_1.rfind(int_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'V:zv<\rk>`JOJFhAGeH'
        dict_0 = {str_0: str_0}
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        list_0 = [bool_0, ansible_vault_encrypted_unicode_0, var_0]
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        int_0 = -1006
        set_0 = {int_0, bool_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.isnumeric()
        var_1 = ansible_vault_encrypted_unicode_0.__reversed__()
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_1.__unicode__()
        var_4 = ansible_vault_encrypted_unicode_1.expandtabs()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_5 = ansible_vault_encrypted_unicode_0.lower()
        str_0 = '7*8&jR@bw--aqj'
        dict_0 = {str_0: var_1}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        var_6 = ansible_vault_encrypted_unicode_1.join(ansible_sequence_0)
        ansible_sequence_1 = module_0.AnsibleSequence()
        var_7 = ansible_vault_encrypted_unicode_0.__le__(ansible_sequence_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '_|L0@z8oj;Jm!;?'
        ansible_unicode_0 = None
        bytes_0 = b'\x91O'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.replace(str_0, str_0, ansible_unicode_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ';Lg6E'
        str_1 = '`8JM{E<e>F$u\nJ'
        dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
        str_2 = 'd4H~Lt\x0b@px'
        list_0 = [str_2, str_2, str_2, str_2]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 4095
        str_0 = '&@ '
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.swapcase()
        str_0 = '%s --keyring %s add -'
        list_0 = [str_0, str_0, str_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_sequence_1 = module_0.AnsibleSequence()
        list_1 = [ansible_vault_encrypted_unicode_1, list_0]
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_2.translate(*list_1)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = None
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        dict_0 = {}
        var_1 = ansible_vault_encrypted_unicode_0.rjust(dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.format_map(ansible_mapping_0)
        list_1 = []
        float_0 = 1675.000985
        var_1 = ansible_vault_encrypted_unicode_0.__radd__(float_0)
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_1)
        str_0 = "}T] Q5#&\n,nf'f8rk,3"
        dict_0 = {str_0: str_0}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\xd7\xf3\x90\x97\xd00|\xeehH\x80\xdc\x11'
        set_0 = {bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.swapcase()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.isdigit()
        str_0 = 'f14_p>m1aTZgC(Ed'
        list_0 = [str_0]
        list_1 = []
        var_2 = ansible_vault_encrypted_unicode_1.center(list_1, *list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bool_0 = False
        int_0 = -1006
        set_0 = {int_0, bool_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.isnumeric()
        var_1 = ansible_vault_encrypted_unicode_0.__reversed__()
        var_2 = ansible_vault_encrypted_unicode_0.is_encrypted()
        list_0 = [bool_0, var_2, bool_0, bool_0, bool_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_3 = ansible_vault_encrypted_unicode_2.__unicode__()
        var_4 = ansible_vault_encrypted_unicode_2.expandtabs()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_5 = ansible_vault_encrypted_unicode_2.lstrip()
        var_6 = ansible_vault_encrypted_unicode_1.lower()
        list_1 = [var_3, var_1, var_3]
        var_7 = ansible_vault_encrypted_unicode_2.replace(list_1, list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '_|L0@z8oj;Jm!;?'
        ansible_unicode_0 = None
        bytes_0 = b'\x91O'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        bool_0 = False
        var_0 = ansible_vault_encrypted_unicode_0.startswith(str_0, bool_0)
        var_1 = ansible_vault_encrypted_unicode_0.replace(str_0, str_0, ansible_unicode_0)
    except BaseException:
        pass

def test_case_26():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_0 = ansible_vault_encrypted_unicode_0.__le__(ansible_mapping_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = True
        dict_0 = {}
        str_0 = 'NY\x0cCjH'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [bool_0, bool_0]
        str_1 = "NqRSka;\x0c=0\n\n4'6\rB;"
        var_0 = ansible_vault_encrypted_unicode_0.isalpha()
        list_1 = [str_1, str_1]
        dict_1 = {str_1: list_0, str_1: list_1}
        str_2 = "''c1V#QeV w-|h?,9l"
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        bool_1 = False
        var_1 = ansible_vault_encrypted_unicode_1.__mul__(bool_1)
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        var_2 = ansible_vault_encrypted_unicode_1.isascii()
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_1)
        var_3 = ansible_vault_encrypted_unicode_1.swapcase()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_4 = ansible_vault_encrypted_unicode_2.__add__(bool_0)
        complex_0 = None
        var_5 = ansible_vault_encrypted_unicode_2.__le__(complex_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'm(YHa1@F)'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalpha()
        set_0 = {str_0, ansible_vault_encrypted_unicode_0, str_0, str_0}
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(set_0)
        var_2 = ansible_vault_encrypted_unicode_0.split()
        var_3 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_4 = ansible_vault_encrypted_unicode_0.__add__(ansible_base_y_a_m_l_object_0)
        float_0 = None
        var_5 = ansible_vault_encrypted_unicode_0.rindex(float_0, ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bool_0 = False
        int_0 = -1006
        set_0 = {int_0, bool_0}
        str_0 = '|\nP|TI\x0b0;c]"BASM^'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        list_0 = [bool_0, var_0, bool_0, bool_0, bool_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_1.__ge__(str_0)
        var_2 = ansible_vault_encrypted_unicode_1.lower()
        var_3 = ansible_vault_encrypted_unicode_0.__contains__(bool_0)
    except BaseException:
        pass

def test_case_30():
    try:
        tuple_0 = ()
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(tuple_0)
    except BaseException:
        pass

def test_case_31():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        str_0 = '$ns`'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_2.isascii()
        var_1 = ansible_vault_encrypted_unicode_1.isspace()
        int_0 = 1748
        int_1 = -1794
        tuple_0 = (int_1,)
        var_2 = ansible_vault_encrypted_unicode_1.isupper()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_3 = ansible_vault_encrypted_unicode_3.__mod__(int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        dict_0 = {ansible_base_y_a_m_l_object_0: ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0: ansible_base_y_a_m_l_object_0}
        float_0 = 0.0001
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(dict_0)
        bool_0 = True
        ansible_unicode_0 = module_0.AnsibleUnicode()
        set_0 = set()
        str_0 = '[S-\\=fO=WFf\nO'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_1.__rmod__(set_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_2 = ansible_vault_encrypted_unicode_2.splitlines()
        set_1 = set()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(set_1)
        var_3 = ansible_vault_encrypted_unicode_3.partition(bool_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'CI)'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [str_0]
        bytes_0 = b';\x08D8\xbe>\xcf\x8f\x1b\xc4~\xb2J\x8cQ'
        str_1 = 'DXx\\6)SNrgrJe'
        dict_0 = {str_0: bytes_0, str_0: str_0, str_1: bytes_0}
        list_1 = [ansible_vault_encrypted_unicode_0, dict_0, list_0, dict_0]
        var_0 = ansible_vault_encrypted_unicode_0.count(list_0, list_1)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'm(YHa1@F)'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        set_0 = {str_0, ansible_vault_encrypted_unicode_0, str_0, str_0}
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(set_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        list_0 = [set_0, ansible_base_y_a_m_l_object_0, str_0]
        var_1 = ansible_vault_encrypted_unicode_0.partition(list_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = '|?FY#xE!'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        float_0 = -573.54
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_1.rsplit()
        var_2 = ansible_vault_encrypted_unicode_1.is_encrypted()
        var_3 = ansible_vault_encrypted_unicode_1.title()
        float_1 = -2314.2797
        list_0 = [float_0, var_2, var_1, float_1]
        int_0 = 442
        var_4 = ansible_vault_encrypted_unicode_1.isalnum()
        var_5 = ansible_vault_encrypted_unicode_1.__ne__(int_0)
        str_1 = 'True AAA'
        dict_0 = {str_1: float_1}
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        bool_0 = False
        int_0 = -1006
        set_0 = {int_0, bool_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        dict_0 = {}
        str_0 = '$]*l+-((1e#\x0b"8(2j'
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(dict_0, str_0)
    except BaseException:
        pass

def test_case_37():
    try:
        bytes_0 = b'R'
        str_0 = 'EtnI\\pt'
        str_1 = "'\n|"
        dict_0 = {str_0: str_0, str_1: str_1}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__unicode__()
        str_2 = '#\r+ v^>y'
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        str_3 = '\udc97\udccc!\udca9\udcd6[\udc9a\udcca0l\udcbc\udc81v\udce2\udcff\x01\udcb3ϗ'
        var_1 = ansible_vault_encrypted_unicode_2.__rmod__(str_3)
        var_2 = ansible_vault_encrypted_unicode_2.ljust(bytes_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = '^K'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.format()
        bool_0 = False
        str_1 = " w\n{?.f&xhh'"
        dict_0 = {str_1: bool_0}
        float_0 = 1.1236440890618118
        set_0 = {float_0, bool_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_1 = ansible_vault_encrypted_unicode_1.__eq__(dict_0)
        int_0 = -1019
        set_1 = {int_0, bool_0}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_1)
        var_2 = ansible_vault_encrypted_unicode_2.__reversed__()
        var_3 = ansible_vault_encrypted_unicode_2.is_encrypted()
        list_0 = [bool_0, var_3, bool_0, bool_0, bool_0]
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_3)
        var_4 = ansible_vault_encrypted_unicode_2.count(dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'm(YHa1@F)'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalpha()
        set_0 = {str_0, ansible_vault_encrypted_unicode_0, str_0, str_0}
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(set_0)
        var_2 = ansible_vault_encrypted_unicode_0.split()
        var_3 = ansible_vault_encrypted_unicode_0.is_encrypted()
        list_0 = [var_0, str_0, set_0, var_2]
        tuple_0 = ()
        str_1 = '=2]K++wb%^%vM]R>'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_4 = ansible_vault_encrypted_unicode_1.index(ansible_vault_encrypted_unicode_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 4095
        str_0 = 'Eh FM\x0b<e?}|j).WMOL'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(int_0)
    except BaseException:
        pass

def test_case_41():
    try:
        bytes_0 = b'O'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        bool_0 = True
        var_0 = ansible_vault_encrypted_unicode_0.replace(ansible_vault_encrypted_unicode_0, bool_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = 'm(YHa1@F)'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        bool_0 = True
        float_0 = -2168.0
        var_1 = ansible_vault_encrypted_unicode_0.__getslice__(bool_0, float_0)
        set_0 = {str_0, ansible_vault_encrypted_unicode_0, str_0, str_0}
        var_2 = ansible_vault_encrypted_unicode_0.__ne__(set_0)
        var_3 = ansible_vault_encrypted_unicode_0.split()
        var_4 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_5 = ansible_vault_encrypted_unicode_0.__add__(ansible_base_y_a_m_l_object_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_6 = ansible_vault_encrypted_unicode_0.rfind(ansible_mapping_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_43():
    try:
        bool_0 = False
        int_0 = -1006
        set_0 = {int_0, bool_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.__reversed__()
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        list_0 = [bool_0, var_1, bool_0, bool_0, bool_0]
        var_2 = ansible_vault_encrypted_unicode_0.isalnum()
        var_3 = ansible_vault_encrypted_unicode_0.casefold()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_4 = ansible_vault_encrypted_unicode_2.__unicode__()
        var_5 = ansible_vault_encrypted_unicode_2.expandtabs()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_6 = ansible_vault_encrypted_unicode_1.lower()
        var_7 = ansible_vault_encrypted_unicode_2.__unicode__()
        str_0 = 'Eh FM\x0b<e?}|j).WMOL'
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        float_0 = -3131.26585
        var_8 = ansible_vault_encrypted_unicode_3.replace(float_0, ansible_vault_encrypted_unicode_4)
    except BaseException:
        pass

def test_case_44():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.isspace()
        str_0 = '\\OTW]\\;+b"'
        str_1 = '|Gg]x\reX\rn4(*; nF"8D'
        int_0 = 1095
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        str_2 = '#T'
        str_3 = 'p\x0c&9!#{H`\r|'
        dict_0 = {str_1: str_1, str_1: int_0, str_2: str_0, str_3: str_3}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        bool_0 = False
        var_1 = ansible_vault_encrypted_unicode_1.rsplit()
        dict_1 = {}
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_2 = ansible_vault_encrypted_unicode_2.find(ansible_vault_encrypted_unicode_1, ansible_sequence_0, bool_0)
    except BaseException:
        pass

def test_case_45():
    try:
        bytes_0 = b'foo\xad'
        str_0 = '{'
        str_1 = 'upgrades'
        bool_0 = True
        tuple_0 = (str_1, bytes_0, bool_0)
        list_0 = [bool_0, str_1, bytes_0, str_1]
        int_0 = 2799
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_1.__radd__(str_0)
        var_2 = ansible_vault_encrypted_unicode_1.__ge__(ansible_vault_encrypted_unicode_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        str_2 = 'foo'
        var_3 = ansible_vault_encrypted_unicode_2.__contains__(str_2)
        var_4 = ansible_vault_encrypted_unicode_2.__contains__(str_2)
        bool_1 = False
        var_5 = ansible_vault_encrypted_unicode_0.__mod__(bool_1)
    except BaseException:
        pass

def test_case_46():
    try:
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        bytes_0 = b'\xa0\xff&\xea?\xf1\xdb'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.__str__()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_2 = ansible_vault_encrypted_unicode_1.rfind(ansible_vault_encrypted_unicode_1, ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass