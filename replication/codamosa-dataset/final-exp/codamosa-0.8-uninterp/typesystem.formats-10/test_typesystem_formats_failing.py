# Automatically generated by Pynguin.
import typesystem.formats as module_0
import datetime as module_1

def test_case_0():
    try:
        str_0 = ''
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = None
        base_format_0 = module_0.BaseFormat()
        bool_0 = base_format_0.is_native_type(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "I<`'@^@it@-%7,1"
        str_1 = '`+:\tu4uS'
        dict_0 = {str_0: str_0, str_1: str_0}
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        base_format_0 = module_0.BaseFormat()
        optional_0 = None
        optional_1 = base_format_0.serialize(optional_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '76XXa"ORY@\r5rO"dE2G'
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '76XXa"ORY@\r5rkKdG|'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(str_0)
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'DC19q$v@}Q>`I?q'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '0'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_1 = u_u_i_d_format_0.serialize(str_0)
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_14():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2010-12-26T12:30:06'
        datetime_0 = date_time_format_0.validate(str_0)
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(datetime_0)
        optional_0 = date_time_format_0.serialize(datetime_0)
        dict_0 = None
        time_format_1 = module_0.TimeFormat()
        date_format_0 = module_0.DateFormat()
        optional_1 = time_format_0.serialize(dict_0)
        str_1 = 'list'
        date_format_1 = module_0.DateFormat()
        optional_2 = date_format_1.serialize(datetime_0)
        list_0 = [datetime_0, dict_0, str_0, str_1]
        time_format_2 = module_0.TimeFormat(*list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = None
        date_format_0 = module_0.DateFormat()
        bool_0 = False
        set_0 = None
        bool_1 = date_format_0.is_native_type(bool_0)
        optional_0 = date_format_0.serialize(set_0)
        time_0 = module_1.time()
        dict_0 = {time_0: bytes_0}
        time_format_0 = module_0.TimeFormat()
        optional_1 = time_format_0.serialize(dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        list_0 = None
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(list_0)
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_0 = 'fBtj_dH-J5\x0c(HW'
        str_1 = '"L=}GcAJ9\tX'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
        base_format_0 = module_0.BaseFormat(**dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '25:00:00'
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-13-01'
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2020-07-10T00:00:00+0100'
        datetime_0 = date_time_format_0.validate(str_0)
        datetime_1 = date_time_format_0.validate(datetime_0)
    except BaseException:
        pass

def test_case_20():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = '2010-12-26T12:30:06'
        datetime_0 = date_time_format_0.validate(str_0)
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(datetime_0)
        optional_0 = date_time_format_0.serialize(datetime_0)
        dict_0 = None
        time_format_1 = module_0.TimeFormat()
        date_format_0 = module_0.DateFormat()
        optional_1 = date_format_0.serialize(datetime_0)
        str_1 = 'list'
        date_format_1 = module_0.DateFormat()
        optional_2 = date_format_1.serialize(datetime_0)
        list_0 = [datetime_0, dict_0, str_0, str_1]
        time_format_2 = module_0.TimeFormat(*list_0)
    except BaseException:
        pass