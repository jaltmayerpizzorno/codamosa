# Automatically generated by Pynguin.
import tornado.escape as module_0

def test_case_0():
    try:
        bytes_0 = b'{\xc4n?ZR\x0c\xd9<\x827'
        any_0 = module_0.json_decode(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '>j={dliw[3Q'
        str_1 = module_0.json_encode(str_0)
        str_2 = module_0.url_escape(str_0)
        str_3 = None
        bool_0 = False
        var_0 = module_0.url_unescape(str_3, str_3, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        str_0 = 'http://example.com/foo/bar extra'
        str_1 = module_0.linkify(str_0, bool_0)
        bool_1 = False
        dict_0 = module_0.parse_qs_bytes(str_1, bool_1)
        optional_0 = module_0.utf8(str_1)
        str_2 = module_0.xhtml_escape(str_0)
        str_3 = module_0.json_encode(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x9d'
        str_0 = '*WQ}D:?f${o'
        str_1 = module_0.squeeze(str_0)
        any_0 = module_0.recursive_unicode(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'http://example.com'
        str_1 = module_0.linkify(str_0)
        any_0 = module_0.recursive_unicode(str_1)
        bytes_0 = b'2\xd5\xde\xc4\xfa:{\x0f'
        str_2 = module_0.xhtml_escape(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'http://www.google.com'
        str_1 = module_0.linkify(str_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
        any_0 = module_0.recursive_unicode(dict_0)
        bytes_0 = b'2\xd5\xde\xc4\xfa:{\x0f'
        str_2 = module_0.xhtml_escape(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        str_0 = None
        bytes_0 = b'\xaa*;9\x0c\xe7\x9co\xcf\xda\xe6\xed\xa7\xda\x84\xc8'
        bytes_1 = b'\xc8\xe1\x1a\x93EX\x9d\x05%\x1d\xb2a[\xfePn\xf6\x9f'
        list_0 = [bytes_0, bytes_1]
        str_1 = None
        str_2 = 'c>'
        dict_0 = {str_0: list_0, str_1: list_0, str_0: list_0, str_2: list_0}
        bytes_2 = b'\xa55\xbe\xf0\xe6\x03Q\xe8'
        tuple_0 = (bool_0, dict_0, bytes_1, bytes_2)
        any_0 = module_0.recursive_unicode(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'nG8Q'
        str_1 = '[&<>"\']'
        str_2 = '8As%'
        optional_0 = module_0.to_unicode(str_1)
        list_0 = [str_1, str_2, str_0]
        str_3 = module_0.linkify(str_0, list_0)
        float_0 = 2973.3
        str_4 = module_0.json_encode(float_0)
        bool_0 = False
        str_5 = module_0.url_escape(str_1, bool_0)
        bytes_0 = b'\xa2W\xb23\x91\xc0Iv'
        optional_1 = module_0.utf8(bytes_0)
        bool_1 = None
        dict_0 = module_0.parse_qs_bytes(str_1, bool_1)
        any_0 = module_0.json_decode(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Hello http://tornadoweb.org!'
        str_1 = module_0.linkify(str_0)
        str_2 = 'Hello www.tornadoweb.org!'
        str_3 = module_0.linkify(str_2)
        str_4 = 'Hello x@y.z, I still love you!'
        bool_0 = None
        var_0 = module_0.url_unescape(str_1, bool_0)
        str_5 = module_0.linkify(str_4)
        bytes_0 = b"p\x0f'\xb2Xg\rk\xa0T\xf4<`\\\x1dl\\?K\xb6"
        bool_1 = False
        str_6 = 'cannot set both whitespace and compress_whitespace'
        list_0 = [str_6]
        str_7 = module_0.linkify(bytes_0, bool_1, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1000
        optional_0 = module_0.utf8(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'application/xml'
        str_1 = module_0.linkify(str_0)
        str_2 = 'https://wwwgogle.co/searchq=febook'
        str_3 = module_0.linkify(str_2, str_1)
        bool_0 = False
        str_4 = module_0.linkify(str_1, bool_0, str_3)
        bool_1 = False
        str_5 = 'V&l4oHShw'
        str_6 = ',T\x0cnM8=VE,~`nIhw.'
        str_7 = module_0.xhtml_escape(str_4)
        bytes_0 = None
        list_0 = [bool_1, str_6, bytes_0]
        any_0 = module_0.recursive_unicode(list_0)
        str_8 = module_0.linkify(bytes_0, str_5)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'htwp://www.google.com'
        str_1 = module_0.linkify(str_0)
        bytes_0 = b'\xa2R(x\x15\xe1'
        bool_0 = False
        str_2 = module_0.linkify(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'http://www.google.com'
        str_1 = 'https://www.google.com/sharchq"1tebook'
        str_2 = module_0.linkify(str_1, str_0)
        bytes_0 = b'\xcez\x83\x96Rg\xe6\x8a7'
        list_0 = None
        str_3 = module_0.linkify(str_1, list_0)
        str_4 = module_0.linkify(bytes_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 2661.7
        optional_0 = module_0.to_unicode(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'http://www.facebook.com/tornadoweb'
        str_1 = None
        str_2 = 'only AsyncIOLoop is allowed when asyncio is available'
        list_0 = [str_1, str_2]
        str_3 = module_0.linkify(str_0, list_0)
        bool_0 = False
        str_4 = module_0.linkify(str_2, bool_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Hello http://tornadoweb.org!'
        str_1 = module_0.linkify(str_0)
        var_0 = print(str_1)
        bool_0 = True
        str_2 = module_0.linkify(str_0, bool_0)
        var_1 = print(str_2)
        str_3 = 'Hello https://tornadoweb.org!'
        str_4 = 'rel="nofollow" class="external"'
        str_5 = module_0.linkify(str_3, bool_0, str_4)
        var_2 = print(str_5)
        str_6 = 'Hello http://tw.yahoo.com!'
        var_3 = lambda url: str_4
        str_7 = module_0.linkify(str_6, bool_0, var_3)
    except BaseException:
        pass