# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        float_0 = 0.5
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.run()
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2.0
        role_mixin_0 = module_0.RoleMixin()
        doc_c_l_i_0 = module_0.DocCLI(role_mixin_0)
        var_0 = doc_c_l_i_0.display_plugin_list(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 80
        float_0 = 60.0
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.get_all_plugins_of_type(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ']@Za!;=SH'
        float_0 = 1643.0
        list_0 = [str_0, str_0, str_0, str_0]
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        plugin_not_found_0 = module_0.PluginNotFound()
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(str_0, float_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        role_mixin_0 = None
        list_0 = None
        role_mixin_1 = module_0.RoleMixin()
        doc_c_l_i_0 = module_0.DocCLI(role_mixin_1)
        doc_c_l_i_1 = module_0.DocCLI(doc_c_l_i_0)
        var_0 = doc_c_l_i_1.format_snippet(role_mixin_0, list_0, role_mixin_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 80
        float_0 = 60.0
        float_1 = 205.578
        str_0 = '^f;nR'
        list_0 = [float_1, int_0, float_1]
        var_0 = module_0.add_collection_plugins(str_0, list_0)
        bytes_0 = b'\x80 @\xab6\x08'
        bytes_1 = b'\xa1y\xfb\x81s'
        list_1 = [float_0, float_0, float_1]
        float_2 = 2276.3
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_1 = doc_c_l_i_0.format_plugin_doc(float_1, bytes_0, bytes_1, list_1, float_2, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        tuple_0 = None
        float_0 = -685.98045
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.find_plugins(plugin_not_found_0, plugin_not_found_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'black'
        float_0 = 63.183
        str_1 = 'inventory_sources'
        dict_0 = {str_1: str_0, str_0: float_0}
        str_2 = 'HostName: not set'
        list_0 = [float_0, dict_0, dict_0]
        str_3 = "\n- hosts: localhost\n  tasks:\n    - debug:\n        msg: play1\n\n- name: Include a play after another play\n  import_playbook: otherplays.yaml\n\n- name: Set variables on an imported playbook\n  import_playbook: otherplays.yml\n  vars:\n    service: httpd\n\n- name: This DOES NOT WORK\n  hosts: all\n  tasks:\n    - debug:\n        msg: task1\n\n    - name: This fails because I'm inside a play already\n      import_playbook: stuff.yaml\n"
        doc_c_l_i_0 = module_0.DocCLI(str_3)
        var_0 = doc_c_l_i_0.add_fields(str_0, float_0, dict_0, str_2, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        role_mixin_0 = module_0.RoleMixin()
        doc_c_l_i_0 = None
        float_0 = 2895.0
        doc_c_l_i_1 = module_0.DocCLI(float_0)
        doc_c_l_i_2 = module_0.DocCLI(doc_c_l_i_1)
        var_0 = doc_c_l_i_2.get_role_man_text(role_mixin_0, doc_c_l_i_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = ()
        int_0 = 142
        float_0 = -1163.053
        plugin_not_found_0 = module_0.PluginNotFound()
        doc_c_l_i_0 = module_0.DocCLI(plugin_not_found_0)
        var_0 = doc_c_l_i_0.get_man_text(tuple_0, int_0, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'lookup'
        plugin_not_found_0 = module_0.PluginNotFound()
        plugin_not_found_1 = module_0.PluginNotFound()
        doc_c_l_i_0 = module_0.DocCLI(plugin_not_found_1)
        doc_c_l_i_1 = module_0.DocCLI(doc_c_l_i_0)
        var_0 = doc_c_l_i_1.get_plugin_metadata(str_0, plugin_not_found_0)
    except BaseException:
        pass

def test_case_11():
    try:
        set_0 = set()
        var_0 = module_0.jdump(set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'v{-@[id!*H*)'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        int_0 = 479
        var_0 = doc_c_l_i_0.run()
        set_0 = set()
        plugin_not_found_0 = module_0.PluginNotFound()
        var_1 = module_0.add_collection_plugins(set_0, plugin_not_found_0, set_0)
        str_1 = 'LL.1j@fVx"gJo'
        dict_0 = {str_1: int_0}
        var_2 = doc_c_l_i_0.get_man_text(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = []
        str_0 = 'v{-@[id!*H*)'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        int_0 = 479
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        var_0 = doc_c_l_i_0.find_plugins(str_0, int_0, plugin_not_found_0)
        list_1 = [list_0, list_0]
        var_1 = doc_c_l_i_0.run()
        str_1 = 'X3^'
        plugin_not_found_1 = module_0.PluginNotFound()
        dict_0 = {str_1: var_0}
        complex_0 = None
        float_0 = 2027.3981944120042
        role_mixin_0 = module_0.RoleMixin()
        var_2 = doc_c_l_i_0.add_fields(list_1, dict_0, complex_0, float_0, role_mixin_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = []
        str_0 = 'v{-@[id!*H*)'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
        str_1 = '%s_mb'
        dict_0 = None
        set_0 = {str_0, str_1}
        var_1 = doc_c_l_i_0.format_snippet(dict_0, set_0, str_1)
        int_0 = 479
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        var_2 = doc_c_l_i_0.find_plugins(str_1, int_0, plugin_not_found_0)
        var_3 = doc_c_l_i_0.run()
        plugin_not_found_1 = module_0.PluginNotFound()
        str_2 = 'maGD`N,M%8"5xkf|SB_'
        bytes_0 = b'j\xb1M\x06\x8f\xa3\xc6\x89Q+\xa3\xbc\xd9'
        str_3 = 'J\x0c'
        dict_1 = {str_2: var_3, str_3: var_0}
        var_4 = doc_c_l_i_0.get_role_man_text(bytes_0, dict_1)
    except BaseException:
        pass