# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_2():
    str_0 = 'body'
    str_1 = 'lj,<d<K?/b|NXko o'
    str_2 = '_pz]#o\tX4H6Q-a'
    dict_0 = {str_0: str_0, str_1: str_0, str_2: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)

def test_case_3():
    str_0 = 'let(x);x + le\n(y);let(z);'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    variables_replacer_1 = module_1.VariablesReplacer(dict_0)
    list_0 = [str_0, str_0]
    alias_0 = module_0.alias(*list_0)
    alias_1 = variables_replacer_0.visit_alias(alias_0)
    snippet_0 = module_1.snippet(str_0)

def test_case_4():
    str_0 = 'let(x);x + let(y);let(z);'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    arg_0 = module_0.arg()
    dict_0 = {str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    arg_1 = variables_replacer_0.visit_arg(arg_0)

def test_case_5():
    str_0 = 'let(x);x + let(y);let(z);'
    var_0 = module_2.parse(str_0)
    name_0 = module_0.Name()
    str_1 = ';DsP100x`kf'
    dict_0 = {str_0: str_0, str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    name_1 = variables_replacer_0.visit_Name(name_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_6():
    function_def_0 = module_0.FunctionDef()
    str_0 = 'wA+#I\t^0'
    dict_0 = {str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    dict_1 = {str_0: str_0, str_0: str_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    function_def_2 = variables_replacer_1.visit_FunctionDef(function_def_1)
    dict_2 = {}
    a_s_t_0 = module_0.AST()
    module_1.extend_tree(a_s_t_0, dict_2)
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    function_def_3 = variables_replacer_2.visit_FunctionDef(function_def_2)
    set_0 = set()
    module_1.let(set_0)

def test_case_7():
    str_0 = 'let(x);x + le\n(y);let(z);'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    variables_replacer_1 = module_1.VariablesReplacer(dict_0)
    list_0 = [str_0, str_0]
    alias_0 = module_0.alias(*list_0)
    alias_1 = variables_replacer_0.visit_alias(alias_0)
    class_def_0 = module_0.ClassDef(*list_0)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    snippet_0 = module_1.snippet(str_0)
    a_s_t_0 = module_0.AST()
    module_1.extend_tree(a_s_t_0, dict_0)
    iterable_1 = module_1.find_variables(a_s_t_0)

def test_case_8():
    str_0 = '_increased'
    int_0 = 0
    list_0 = [str_0, str_0, int_0]
    import_from_0 = module_0.ImportFrom(*list_0)
    str_1 = 'let'
    dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_0: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)

def test_case_9():
    str_0 = 'let(x);x + le\n(y);let(z);'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    str_1 = 'uzDA;p.'
    variables_replacer_1 = module_1.VariablesReplacer(dict_0)
    list_0 = [str_1, str_1]
    alias_0 = module_0.alias(*list_0)
    alias_1 = variables_replacer_0.visit_alias(alias_0)

def test_case_10():
    a_s_t_0 = module_0.AST()
    str_0 = '3'
    dict_0 = {str_0: a_s_t_0, str_0: a_s_t_0, str_0: a_s_t_0, str_0: a_s_t_0}
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_11():
    int_0 = 6
    list_0 = [int_0]
    attribute_0 = module_0.Attribute(*list_0)
    dict_0 = {}
    a_s_t_0 = module_0.AST()
    module_1.extend_tree(a_s_t_0, dict_0)
    dict_1 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    module_1.let(dict_1)
    module_1.extend(attribute_0)
    dict_2 = {}
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)

def test_case_12():
    str_0 = 'c8;ZuI8*Zd(zVzCk'
    str_1 = "a*p~a'H#|<>"
    str_2 = '}\t'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_0: str_2}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    module_1.extend(variables_replacer_0)
    str_3 = 'let(x);x + let(y);let(z);'
    var_0 = module_2.parse(str_3)
    iterable_0 = module_1.find_variables(var_0)

def test_case_13():
    str_0 = 'let(x);x + let(y);let(z);'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_14():
    int_0 = 0
    str_0 = 'from .a import b'
    var_0 = module_2.parse(str_0)
    var_1 = var_0.body[int_0]
    str_1 = 'b'
    str_2 = 'c'
    str_3 = {str_1: str_2}
    variables_replacer_0 = module_1.VariablesReplacer(str_3)
    var_2 = var_1.names[int_0]
    alias_0 = variables_replacer_0.visit_alias(var_2)

def test_case_15():
    str_0 = 'a = 1\nb = 2\nc = 3\nextend(d)\nprint(a, b, c)'
    var_0 = module_2.parse(str_0)
    str_1 = 'd'
    int_0 = 2
    var_1 = {str_1: int_0}
    module_1.extend_tree(var_0, var_1)

def test_case_16():
    str_0 = 'let(x);x + le\n(y);let(z);'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    a_s_t_0 = module_0.AST()
    dict_0 = {str_0: a_s_t_0}
    module_1.extend_tree(a_s_t_0, dict_0)
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    list_0 = [str_0, str_0]
    alias_0 = module_0.alias(*list_0)
    alias_1 = variables_replacer_0.visit_alias(alias_0)
    a_s_t_1 = module_0.AST()

def test_case_17():
    str_0 = 'a = 1\nb = 2\nc = 3\nextend(d)\np.int(a, b, c)'
    var_0 = module_2.parse(str_0)
    str_1 = 'n+U'
    str_2 = 'd'
    int_0 = 2
    var_1 = {str_2: int_0}
    module_1.extend_tree(var_0, var_1)
    list_0 = [str_1, int_0]
    str_3 = "G'tQ\x0cSh9**5&JCAsNij="
    dict_0 = {str_0: str_1, str_3: int_0}
    a_s_t_0 = module_0.AST(**dict_0)
    str_4 = "A2$zBf>'"
    dict_1 = {str_4: str_2}
    module_1.extend_tree(a_s_t_0, dict_1)
    str_5 = "}rN-3)~'V}0@"
    import_from_0 = module_0.ImportFrom(*list_0)
    dict_2 = {str_2: str_1, str_1: str_5}
    variables_replacer_0 = module_1.VariablesReplacer(dict_2)
    import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    str_6 = None
    str_7 = ')S/#D.#j4<p'
    dict_3 = {str_6: str_5, str_7: str_0, str_6: str_5}
    variables_replacer_1 = module_1.VariablesReplacer(dict_3)
    import_from_2 = variables_replacer_1.visit_ImportFrom(import_from_1)
    str_8 = "`NTB_o8.b$$~nK2d'_"
    str_9 = "{*o\rt~G'#Ph"
    dict_4 = {str_5: import_from_2, str_8: list_0, str_9: var_1, str_5: variables_replacer_1}
    import_from_3 = module_0.ImportFrom(*list_0, **dict_4)
    import_from_4 = variables_replacer_1.visit_ImportFrom(import_from_3)
    a_s_t_1 = module_0.AST()
    import_from_5 = variables_replacer_0.visit_ImportFrom(import_from_1)
    iterable_0 = module_1.find_variables(a_s_t_1)