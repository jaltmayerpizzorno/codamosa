# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        except_handler_0 = None
        arg_0 = module_0.arg()
        str_0 = None
        str_1 = 'reprlib'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        keyword_0 = module_0.keyword()
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '^8cFX\x0c'
        str_1 = '\x0bWl*5}[,f=xO;\r`SZ'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        snippet_0 = module_1.snippet(variables_replacer_0)
        attribute_0 = None
        variables_replacer_1 = module_1.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_1.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'let(x);x + let(y);let(z);'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
        arg_0 = module_0.arg()
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        keyword_0 = None
        variables_replacer_1 = module_1.VariablesReplacer(dict_0)
        keyword_1 = variables_replacer_1.visit_keyword(keyword_0)
    except BaseException:
        pass

def test_case_3():
    try:
        alias_0 = None
        str_0 = '.V_kd #%GBB}ua,}p '
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 10
        snippet_0 = module_1.snippet(int_0)
        str_0 = ''
        except_handler_0 = module_0.ExceptHandler()
        str_1 = 'body'
        str_2 = 'N]G],'
        dict_0 = {str_1: str_0, str_2: str_2, str_1: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        dict_1 = {str_0: str_0, str_0: str_0}
        list_0 = snippet_0.get_body(**dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'hFP9x`\tE\t\\?S'
        str_1 = '\x0bWl*5}[,f=xO;\r`SZ'
        str_2 = 'Slm4_pUwRZ7W\\j'
        dict_0 = {str_0: str_0, str_1: str_2, str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        snippet_0 = module_1.snippet(variables_replacer_0)
        list_0 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_6():
    try:
        class_def_0 = module_0.ClassDef()
        snippet_0 = module_1.snippet(class_def_0)
        function_def_0 = module_0.FunctionDef()
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0}
        except_handler_0 = module_0.ExceptHandler()
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        variables_replacer_1 = module_1.VariablesReplacer(dict_0)
        except_handler_2 = variables_replacer_1.visit_ExceptHandler(except_handler_1)
        variables_replacer_2 = module_1.VariablesReplacer(dict_0)
        class_def_1 = variables_replacer_2.visit_ClassDef(class_def_0)
        dict_1 = {}
        name_0 = module_0.Name(**dict_1)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'l-t(x);x + let();let(z);'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
    except BaseException:
        pass