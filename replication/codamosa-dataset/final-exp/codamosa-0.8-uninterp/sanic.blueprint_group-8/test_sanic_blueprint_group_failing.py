# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    try:
        blueprint_group_0 = module_0.BlueprintGroup()
        var_0 = blueprint_group_0.__getitem__(blueprint_group_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b''
        float_0 = 1.0
        dict_0 = {float_0: float_0, float_0: bytes_0}
        blueprint_group_0 = module_0.BlueprintGroup(bytes_0)
        blueprint_group_1 = module_0.BlueprintGroup()
        blueprint_group_1.__setitem__(bytes_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = ''
        blueprint_group_0 = module_0.BlueprintGroup(str_0)
        blueprint_group_0.__delitem__(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "{5=|'YFl5\r%vg-J+hwK\n"
        blueprint_0 = module_1.Blueprint(str_0, str_0)
        str_1 = ''
        str_2 = 'oOh;TH'
        dict_0 = {str_1: str_1, str_1: str_1, str_1: str_1, str_2: str_2}
        blueprint_group_0 = module_0.BlueprintGroup(dict_0)
        blueprint_group_0.append(blueprint_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 207
        blueprint_0 = None
        str_0 = 'N0]Fp8xj/H?z+J"n'
        str_1 = 'rBo(a{(\ri<<]J'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        int_1 = 1744
        bool_0 = False
        float_0 = 1.0
        tuple_0 = (dict_0, int_1, bool_0, float_0)
        tuple_1 = (tuple_0,)
        blueprint_group_0 = module_0.BlueprintGroup(tuple_1)
        blueprint_group_0.insert(int_0, blueprint_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'bp1'
        str_1 = '/bp1'
        blueprint_0 = module_1.Blueprint(str_0, str_1)
        str_2 = 'bp2'
        str_3 = '/bp2'
        blueprint_1 = module_1.Blueprint(str_2, str_3)
        str_4 = 'bp3'
        str_5 = '/bp3'
        blueprint_2 = module_1.Blueprint(str_4, str_5)
        str_6 = 'bp4'
        str_7 = '/bp4'
        blueprint_3 = module_1.Blueprint(str_6, str_7)
        str_8 = '/bpg1'
        blueprint_group_0 = module_0.BlueprintGroup(str_8)
        str_9 = '/bpg2'
        blueprint_group_1 = module_0.BlueprintGroup(str_9)
        str_10 = '/bpg3'
        blueprint_group_2 = module_0.BlueprintGroup(str_10)
        blueprint_group_0.append(blueprint_0)
        blueprint_group_0.append(blueprint_1)
        blueprint_group_1.append(blueprint_2)
        blueprint_group_1.append(blueprint_3)
        blueprint_group_2.append(blueprint_group_0)
    except BaseException:
        pass

def test_case_6():
    try:
        blueprint_group_0 = module_0.BlueprintGroup()
        str_0 = '4r\x0b~~t(oA$du'
        blueprint_0 = module_1.Blueprint(str_0, str_0)
        blueprint_group_0.append(blueprint_0)
        var_0 = blueprint_group_0.__iter__()
        var_1 = blueprint_group_0.middleware()
        list_0 = [var_1, blueprint_group_0]
        var_2 = blueprint_group_0.middleware(*list_0)
        tuple_0 = ()
        blueprint_group_1 = module_0.BlueprintGroup(tuple_0)
        int_0 = blueprint_group_1.__len__()
        str_1 = 'Bk b5'
        blueprint_1 = module_1.Blueprint(str_1, str_1, int_0)
        blueprint_group_0.append(blueprint_1)
        var_3 = blueprint_group_0.middleware()
        str_2 = 'Cl0Z\x0c{My'
        dict_0 = {str_2: str_2}
        blueprint_group_0.__setitem__(dict_0, blueprint_group_1)
    except BaseException:
        pass