# Automatically generated by Pynguin.
import sanic.blueprint_group as module_0
import sanic.blueprints as module_1

def test_case_0():
    pass

def test_case_1():
    blueprint_group_0 = module_0.BlueprintGroup()

def test_case_2():
    str_0 = '/bp1'
    blueprint_0 = module_1.Blueprint(str_0, str_0)
    str_1 = 'bp2'
    str_2 = '/bp2'
    blueprint_1 = module_1.Blueprint(str_1, str_2)
    blueprint_group_0 = module_0.BlueprintGroup()
    blueprint_group_0.append(blueprint_0)
    blueprint_group_0.append(blueprint_1)
    var_0 = blueprint_group_0.blueprints
    var_1 = len(var_0)

def test_case_3():
    list_0 = []
    str_0 = 'serve_coro'
    blueprint_group_0 = module_0.BlueprintGroup(str_0)
    var_0 = blueprint_group_0.middleware(*list_0)
    str_1 = '\n        Method to parse `query_string` using `urllib.parse.parse_qs`.\n        This methods is used by `args` property.\n        Can be used directly if you need to change default parameters.\n\n        :param keep_blank_values:\n            flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as blank\n            strings.  The default false value indicates that blank values\n            are to be ignored and treated as if they were  not included.\n        :type keep_blank_values: bool\n        :param strict_parsing:\n            flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored. If true,\n            errors raise a ValueError exception.\n        :type strict_parsing: bool\n        :param encoding:\n            specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n        :type encoding: str\n        :param errors:\n            specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n        :type errors: str\n        :return: RequestParameters\n        '
    blueprint_group_1 = module_0.BlueprintGroup(str_1)
    var_1 = blueprint_group_1.__iter__()
    blueprint_group_2 = module_0.BlueprintGroup()
    blueprint_group_3 = module_0.BlueprintGroup(list_0)

def test_case_4():
    dict_0 = {}
    dict_1 = {}
    blueprint_group_0 = module_0.BlueprintGroup(dict_1)
    var_0 = blueprint_group_0.__iter__()
    str_0 = '\r\\/c&M'
    str_1 = '=Cc2\n0A\x0bm|*'
    bool_0 = False
    blueprint_group_1 = module_0.BlueprintGroup(bool_0)
    str_2 = 'iFrzin1Rechko'
    tuple_0 = (bool_0, blueprint_group_1, blueprint_group_1, str_2)
    list_0 = []
    blueprint_group_2 = module_0.BlueprintGroup(tuple_0, list_0)
    int_0 = blueprint_group_2.__len__()
    blueprint_0 = module_1.Blueprint(str_1, bool_0)
    blueprint_group_3 = module_0.BlueprintGroup(dict_0, str_0, blueprint_0)
    int_1 = blueprint_group_3.__len__()
    var_1 = blueprint_group_3.__iter__()

def test_case_5():
    list_0 = []
    str_0 = 'serve_coro'
    blueprint_group_0 = module_0.BlueprintGroup(str_0)
    var_0 = blueprint_group_0.middleware(*list_0)
    int_0 = -5408
    str_1 = '\n        Method to parse `query_string` using `urllib.parse.parse_qs`.\n        This methods is used by `args` property.\n        Can be used directly if you need to change default parameters.\n\n        :param keep_blank_values:\n            flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as blank\n            strings.  The default false value indicates that blank values\n            are to be ignored and treated as if they were  not included.\n        :type keep_blank_values: bool\n        :param strict_parsing:\n            flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored. If true,\n            errors raise a ValueError exception.\n        :type strict_parsing: bool\n        :param encoding:\n            specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n        :type encoding: str\n        :param errors:\n            specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n        :type errors: str\n        :return: RequestParameters\n        '
    none_type_0 = None
    blueprint_0 = module_1.Blueprint(str_1, none_type_0)
    blueprint_group_1 = module_0.BlueprintGroup(str_1)
    var_1 = blueprint_group_1.__iter__()
    tuple_0 = ()
    var_2 = blueprint_group_1.middleware()
    blueprint_group_2 = module_0.BlueprintGroup(tuple_0)
    blueprint_group_1.insert(int_0, blueprint_0)

def test_case_6():
    str_0 = None
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, str_0]
    blueprint_group_0 = module_0.BlueprintGroup()
    var_0 = blueprint_group_0.middleware(*list_0)

def test_case_7():
    str_0 = '6R,?L'
    list_0 = [str_0, str_0, str_0, str_0]
    blueprint_group_0 = module_0.BlueprintGroup()
    var_0 = blueprint_group_0.middleware(*list_0)
    str_1 = 'TiX4^@n?^'
    blueprint_0 = module_1.Blueprint(str_1)
    blueprint_group_0.append(blueprint_0)
    int_0 = 319
    bool_0 = False
    blueprint_1 = module_1.Blueprint(str_0, str_0, int_0, bool_0)
    blueprint_group_0.append(blueprint_1)
    blueprint_2 = module_1.Blueprint(str_0)
    blueprint_group_1 = module_0.BlueprintGroup()
    int_1 = blueprint_group_1.__len__()
    blueprint_group_0.insert(int_0, blueprint_1)
    var_1 = blueprint_group_0.__iter__()
    blueprint_group_2 = module_0.BlueprintGroup()
    blueprint_group_2.append(blueprint_2)

def test_case_8():
    list_0 = []
    str_0 = 'serve_coro'
    blueprint_group_0 = module_0.BlueprintGroup(str_0)
    var_0 = blueprint_group_0.middleware(*list_0)
    str_1 = '\n        Method to parse `query_string` using `urllib.parse.parse_qs`.\n        This methods is used by `args` property.\n        Can be used directly if you need to change default parameters.\n\n        :param keep_blank_values:\n            flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as blank\n            strings.  The default false value indicates that blank values\n            are to be ignored and treated as if they were  not included.\n        :type keep_blank_values: bool\n        :param strict_parsing:\n            flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored. If true,\n            errors raise a ValueError exception.\n        :type strict_parsing: bool\n        :param encoding:\n            specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n        :type encoding: str\n        :param errors:\n            specify how to decode percent-encoded sequences\n            into Unicode characters, as accepted by the bytes.decode() method.\n        :type errors: str\n        :return: RequestParameters\n        '
    none_type_0 = None
    blueprint_0 = module_1.Blueprint(str_1, none_type_0)
    str_2 = 'T;a665i\td\n#j`I{'
    blueprint_group_1 = module_0.BlueprintGroup(str_2)