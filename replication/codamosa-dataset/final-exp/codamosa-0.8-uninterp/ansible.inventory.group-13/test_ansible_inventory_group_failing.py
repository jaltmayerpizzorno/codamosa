# Automatically generated by Pynguin.
import ansible.inventory.group as module_0

def test_case_0():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.get_ancestors()
        tuple_0 = ()
        set_0 = {tuple_0}
        group_1 = module_0.Group()
        var_1 = group_0.__getstate__()
        var_2 = group_1.__setstate__(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        var_0 = group_1.add_host(group_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        group_0 = module_0.Group()
        var_0 = group_0.remove_host(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        group_0 = module_0.Group()
        int_0 = 2779
        var_0 = group_0.set_priority(int_0)
        var_1 = group_0.get_descendants()
        var_2 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_4():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__repr__()
        var_1 = group_0.__repr__()
        var_2 = group_0.__str__()
        var_3 = group_0.add_child_group(group_0)
    except BaseException:
        pass

def test_case_5():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.get_hosts()
        var_1 = group_0.clear_hosts_cache()
        str_0 = '<Dy'
        var_2 = group_0.set_priority(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        var_0 = group_0.add_child_group(group_1)
        var_1 = group_1.add_child_group(group_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'g2'
        group_0 = module_0.Group(str_0)
        str_1 = 'g3'
        group_1 = module_0.Group(str_1)
        str_2 = 'g4'
        group_2 = module_0.Group(str_2)
        str_3 = 'g5'
        group_3 = module_0.Group(str_3)
        var_0 = group_0.add_child_group(group_1)
        var_1 = group_0.add_child_group(group_2)
        var_2 = group_0.add_child_group(group_3)
        str_4 = 'g6'
        group_4 = module_0.Group(str_4)
        str_5 = 'g7'
        group_5 = module_0.Group(str_5)
        var_3 = group_4.add_child_group(group_5)
        var_4 = group_1.add_child_group(group_4)
        var_5 = group_5.add_child_group(group_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'y\n0\\$\x0c7fh}2,T5CwJTF'
        dict_0 = {str_0: str_0, str_0: str_0}
        group_0 = module_0.Group()
        var_0 = group_0.deserialize(dict_0)
        str_1 = '1'
        str_2 = ''
        str_3 = ':'
        str_4 = 'g1'
        group_1 = module_0.Group(str_4)
        str_5 = 'g2'
        group_2 = module_0.Group(str_5)
        str_6 = ''
        group_3 = module_0.Group(str_6)
        str_7 = 'g4'
        group_4 = module_0.Group(str_7)
        group_5 = module_0.Group(str_1)
        var_1 = group_2.add_child_group(group_3)
        var_2 = group_2.add_child_group(group_4)
        var_3 = group_2.add_child_group(group_5)
        str_8 = '7g6'
        group_6 = module_0.Group(str_8)
        str_9 = 'g7'
        var_4 = group_5.serialize()
        group_7 = module_0.Group(str_9)
        set_0 = {str_3, str_3, var_0, str_2}
        var_5 = group_6.__setstate__(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        var_0 = group_1.remove_host(group_0)
        str_0 = 'y\n0\\$\x0c7fh}2,T5CwJTF'
        dict_0 = {str_0: str_0, str_0: str_0}
        group_2 = module_0.Group()
        var_1 = group_2.deserialize(dict_0)
        str_1 = ':'
        group_3 = module_0.Group(str_1)
        var_2 = group_0.add_child_group(group_2)
        var_3 = group_1.add_host(group_0)
    except BaseException:
        pass