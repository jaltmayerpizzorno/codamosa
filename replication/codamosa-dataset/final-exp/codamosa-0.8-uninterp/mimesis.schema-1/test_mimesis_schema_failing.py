# Automatically generated by Pynguin.
import mimesis.schema as module_0

def test_case_0():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = 'DvM0P5&XuQQnXLT'
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__()
    except BaseException:
        pass

def test_case_2():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = 'person.useWrname'
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'X\xb9'
        schema_0 = module_0.Schema(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'a'
        str_1 = 'b'
        int_0 = 1
        int_1 = 2
        int_2 = {str_0: int_0, str_1: int_1}
        var_0 = lambda : int_2
        schema_0 = module_0.Schema(var_0)
        list_0 = schema_0.create(int_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Test unit AbstraztField.__call__.'
        abstract_field_0 = module_0.AbstractField()
        any_0 = abstract_field_0.__call__(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = 'full_name'
        any_0 = abstract_field_0.__call__(str_0)
        str_1 = 'person.full_nae'
        any_1 = abstract_field_0.__call__(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = 'person.name'
        any_0 = abstract_field_0.__call__(str_0)
        any_1 = abstract_field_0.__call__(str_0, abstract_field_0)
    except BaseException:
        pass

def test_case_8():
    try:
        abstract_field_0 = module_0.AbstractField()
        str_0 = 'full_name'
        bool_0 = True
        any_0 = abstract_field_0.__call__(str_0, bool_0)
        any_1 = abstract_field_0.__call__(str_0)
        str_1 = 'unrowdy'
        any_2 = abstract_field_0.__call__(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        abstract_field_0 = module_0.AbstractField()
        var_0 = abstract_field_0.__str__()
        var_1 = abstract_field_0.__str__()
        schema_0 = module_0.Schema(abstract_field_0)
        int_0 = -1128
        list_0 = schema_0.create(int_0)
        list_1 = schema_0.create()
    except BaseException:
        pass