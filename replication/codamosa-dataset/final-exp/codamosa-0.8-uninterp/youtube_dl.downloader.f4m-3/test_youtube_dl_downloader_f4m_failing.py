# Automatically generated by Pynguin.
import youtube_dl.downloader.f4m as module_0
import youtube_dl.compat as module_1

def test_case_0():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_abst()
    except BaseException:
        pass

def test_case_1():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_unsigned_int()
    except BaseException:
        pass

def test_case_2():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_string()
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        flv_reader_0 = module_0.FlvReader(**dict_0)
        var_0 = flv_reader_0.read_bootstrap_info()
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = flv_reader_0.read_asrt()
    except BaseException:
        pass

def test_case_5():
    try:
        flv_reader_0 = module_0.FlvReader()
        var_0 = flv_reader_0.read_afrt()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Use2z\x0cT]Zv|'
        var_0 = module_0.read_bootstrap_info(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0}
        var_0 = module_0.build_fragments_list(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'https://www.jamendo.com/album/121486/duck-on-cover'
        str_1 = 'ùî∂'
        str_2 = '5e14040d-18a4-47c4-a582-43ff602de88e'
        str_3 = 'P{a;N'
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_3: str_1}
        list_0 = None
        var_0 = module_0.write_unsigned_int(dict_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        flv_reader_0 = module_0.FlvReader()
        dict_0 = None
        list_0 = [dict_0, dict_0, dict_0]
        var_0 = module_0.write_metadata_tag(flv_reader_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -3161.79
        var_0 = module_0.write_flv_header(float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Generation What'
        list_0 = None
        dict_0 = {str_0: list_0, str_0: str_0}
        bool_0 = True
        float_0 = 1413.875271
        dict_1 = {}
        f4m_f_d_0 = module_0.F4mFD(float_0, dict_1)
        var_0 = f4m_f_d_0.real_download(dict_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '<manifest><baseURL>https://one.example.com/</baseURL></manifest>'
        var_0 = module_1.compat_etree_fromstring(str_0)
        var_1 = module_0.get_base_url(var_0)
        var_2 = module_1.compat_etree_fromstring(str_0)
        list_0 = []
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_3 = flv_reader_0.read_unsigned_long_long()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'segments'
        str_1 = 'fragments'
        str_2 = 'segment_run'
        int_0 = 2249
        int_1 = (int_0, int_0)
        int_2 = [int_1, int_0]
        int_3 = {str_2: int_2}
        int_4 = [int_3, int_3]
        str_3 = 'first'
        str_4 = 'ts'
        var_0 = None
        var_1 = {str_3: int_0, str_4: int_0, str_2: int_3, str_2: var_0}
        list_0 = [int_4, str_0, int_0, str_1]
        dict_0 = {}
        var_2 = module_0.write_metadata_tag(list_0, dict_0)
        var_3 = {str_4: int_0, str_3: int_0, str_4: int_0, str_4: int_0, str_2: var_0}
        flv_reader_0 = module_0.FlvReader()
        var_4 = [var_1, var_3, int_3]
        var_5 = {str_1: var_4}
        var_6 = [var_5, var_3]
        var_7 = {str_0: int_4, str_1: var_6}
        var_8 = module_0.build_fragments_list(var_7)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'segments'
        str_1 = 'fragments'
        str_2 = 'segment_run'
        int_0 = 2276
        int_1 = (int_0, int_0)
        int_2 = [int_1, int_0]
        int_3 = {str_2: int_2}
        int_4 = [int_3]
        str_3 = 'first'
        var_0 = None
        var_1 = {str_3: int_0, str_0: int_0, str_2: int_3, str_2: var_0}
        var_2 = [var_1, int_2, int_3]
        var_3 = {str_1: var_2}
        var_4 = [var_3]
        var_5 = {str_0: int_4, str_1: var_4}
        var_6 = module_0.build_fragments_list(var_5)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'segments'
        str_1 = 'fragments'
        str_2 = 'segment_run'
        int_0 = 0
        int_1 = (int_0, int_0)
        int_2 = [int_1, int_1]
        int_3 = {str_2: int_2}
        int_4 = [int_3]
        str_3 = 'first'
        str_4 = 'ts'
        str_5 = 'duration'
        var_0 = None
        var_1 = {str_3: int_0, str_4: int_0, str_5: int_1, str_2: var_0}
        var_2 = {str_5: int_0, str_3: int_0, str_4: int_0, str_5: int_0, str_2: var_0}
        var_3 = [var_1, var_2, int_3]
        var_4 = {str_1: var_3}
        var_5 = [var_4]
        var_6 = {str_0: int_4, str_1: var_5}
        var_7 = module_0.build_fragments_list(var_6)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b"\x10\xfc\x06\x11'8\x06\xd2\x87V\x08 \\\xb4\x0b\xc9"
        var_0 = module_0.read_bootstrap_info(bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'gameloft'
        list_0 = []
        flv_reader_0 = module_0.FlvReader(*list_0)
        var_0 = module_0.write_flv_header(flv_reader_0)
        dict_0 = {str_0: str_0, str_0: str_0}
        f4m_f_d_0 = module_0.F4mFD(str_0, dict_0)
        var_1 = module_0.remove_encrypted_media(f4m_f_d_0)
    except BaseException:
        pass