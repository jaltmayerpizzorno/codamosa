# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        str_0 = 'n*_*w'
        var_0 = module_0.collector_classes_from_gather_subset(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '%4d!`m~<vq3A:J@F5=G\r'
        bool_0 = False
        list_0 = [bool_0, str_0, str_0]
        int_0 = 760
        var_0 = module_0.find_unresolved_requires(list_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        str_0 = None
        var_0 = module_0.collector_classes_from_gather_subset(set_0)
        unresolved_fact_dep_1 = module_0.UnresolvedFactDep()
        str_1 = 'all'
        dict_0 = {str_0: var_0}
        var_1 = module_0.find_unresolved_requires(str_1, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'oG]~0Db4\\2\r\tuZ>\rN5'
        str_1 = '\n\x0c\tUfnIo0x#XgGH'
        var_0 = module_0.resolve_requires(str_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 79
        var_0 = module_0.get_collector_names(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = "qiy$3'FKSADiR<+z<12i"
        base_fact_collector_0 = module_0.BaseFactCollector()
        var_0 = module_0.collector_classes_from_gather_subset(collector_not_found_error_0, str_0, collector_not_found_error_0, base_fact_collector_0)
    except BaseException:
        pass

def test_case_6():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        base_fact_collector_1 = module_0.BaseFactCollector()
        list_0 = None
        set_0 = set()
        bytes_0 = b'W\xb7]L`!R'
        var_0 = module_0.resolve_requires(set_0, bytes_0)
        var_1 = module_0.collector_classes_from_gather_subset(list_0)
        int_0 = 1223
        var_2 = base_fact_collector_0.collect_with_namespace(int_0)
        base_fact_collector_2 = module_0.BaseFactCollector()
        var_3 = module_0.find_collectors_for_platform(list_0, base_fact_collector_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'a'
        str_1 = [str_0]
        var_0 = set(str_1)
        var_1 = set(str_0)
        str_2 = 'V*J&Z\n;5N'
        str_3 = [str_2]
        var_2 = module_0.get_collector_names(var_0, var_1, str_3)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '%d!`~m~<vqA:J@FA='
        var_0 = module_0.get_collector_names(str_0, str_0, str_0)
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        base_fact_collector_0 = module_0.BaseFactCollector(cycle_found_in_fact_deps_0)
        str_1 = 'K3&"X8+:j+_7d\rE$4O'
        dict_0 = {str_1: str_1, str_1: str_1, str_0: var_0, str_0: var_0, str_0: str_0}
        str_2 = 'y2zx^Br=_v('
        dict_1 = {str_1: dict_0, str_0: dict_0, str_2: str_2}
        var_1 = module_0.tsort(dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '%4d!m~<vq3:J@ F5=zG\r'
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        var_0 = module_0.get_collector_names(str_0, str_0, str_0, collector_not_found_error_0)
    except BaseException:
        pass