# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    pass

def test_case_1():
    base_fact_collector_0 = module_0.BaseFactCollector()

def test_case_2():
    base_fact_collector_0 = module_0.BaseFactCollector()
    unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
    base_fact_collector_1 = module_0.BaseFactCollector(base_fact_collector_0, unresolved_fact_dep_0)
    var_0 = base_fact_collector_1.collect_with_namespace()

def test_case_3():
    str_0 = '%4d!`m~<vq3A:J@F5=G\r'
    base_fact_collector_0 = module_0.BaseFactCollector()
    var_0 = base_fact_collector_0.collect_with_namespace()
    var_1 = module_0.get_collector_names(str_0, str_0, str_0)

def test_case_4():
    var_0 = module_0.get_collector_names()

def test_case_5():
    set_0 = None
    var_0 = module_0.collector_classes_from_gather_subset(set_0)

def test_case_6():
    unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
    base_fact_collector_0 = module_0.BaseFactCollector()
    dict_0 = {base_fact_collector_0: unresolved_fact_dep_0}
    var_0 = module_0.collector_classes_from_gather_subset(dict_0)

def test_case_7():
    bytes_0 = b'h(\xbd\x8c'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    base_fact_collector_0 = module_0.BaseFactCollector(dict_0)

def test_case_8():
    bytes_0 = b'\x8d\xbf\xa8!T\xa5\xb7O'
    var_0 = module_0.get_collector_names(bytes_0)

def test_case_9():
    str_0 = 'iR(c'
    str_1 = "\x0b'R=)C"
    str_2 = "3d?42{&]'FN"
    list_0 = [str_0, str_2, str_0, str_2]
    tuple_0 = (list_0,)
    bytes_0 = b''
    base_fact_collector_0 = module_0.BaseFactCollector(tuple_0, bytes_0)
    var_0 = base_fact_collector_0.collect()
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: str_1}
    var_1 = module_0.tsort(dict_0)

def test_case_10():
    str_0 = '%4d!`m~<vq3A:J@F5=G\r'
    var_0 = module_0.get_collector_names(str_0, str_0, str_0)

def test_case_11():
    set_0 = None
    list_0 = []
    var_0 = module_0.collector_classes_from_gather_subset(set_0)
    unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
    str_0 = None
    var_1 = module_0.collector_classes_from_gather_subset(str_0)
    base_fact_collector_0 = module_0.BaseFactCollector()
    str_1 = '-g$d-!wer'
    var_2 = base_fact_collector_0.collect_with_namespace(str_1, set_0)
    cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
    str_2 = '3Li[%I\r%V8Ui'
    var_3 = module_0.collector_classes_from_gather_subset(list_0, str_2)
    bool_0 = False
    list_1 = []
    bool_1 = False
    str_3 = 'veIpR/3/BWd'
    var_4 = module_0.collector_classes_from_gather_subset(bool_0, list_1, bool_1, set_0, str_3)

def test_case_12():
    str_0 = '%d!`~m~<vqA:J@FA='
    var_0 = module_0.get_collector_names(str_0, str_0, str_0)
    cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
    set_0 = None
    base_fact_collector_0 = module_0.BaseFactCollector(cycle_found_in_fact_deps_0)
    str_1 = 'K3&"X8+:j+_7d\rE$4O'
    dict_0 = {str_1: str_1, str_1: str_1, str_0: var_0, str_0: var_0, str_0: str_0}
    str_2 = 'y2zx^Br=_v('
    dict_1 = {str_1: dict_0, str_0: dict_0, str_2: str_2}
    list_0 = [base_fact_collector_0, base_fact_collector_0]
    var_1 = module_0.collector_classes_from_gather_subset(list_0, dict_1, set_0)