# Automatically generated by Pynguin.
import types as module_0
import flutils.namedtupleutils as module_1
import collections as module_2

def test_case_0():
    simple_namespace_0 = module_0.SimpleNamespace()
    var_0 = module_1.to_namedtuple(simple_namespace_0)

def test_case_1():
    bool_0 = False
    list_0 = [bool_0]
    str_0 = '} hGB\\Fa'
    tuple_0 = (str_0,)
    var_0 = module_1.to_namedtuple(list_0)
    var_1 = module_1.to_namedtuple(tuple_0)
    var_2 = module_1.to_namedtuple(list_0)
    var_3 = module_1.to_namedtuple(list_0)

def test_case_2():
    str_0 = '*|Y'
    dict_0 = {str_0: str_0}
    simple_namespace_0 = module_0.SimpleNamespace(**dict_0)
    var_0 = module_1.to_namedtuple(simple_namespace_0)

def test_case_3():
    str_0 = 'v.DM/u~0[(Y\r`vX`\x0bzJ'
    str_1 = 'cw1'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
    list_0 = [dict_0, dict_0, str_0]
    var_0 = module_1.to_namedtuple(list_0)

def test_case_4():
    str_0 = '} h9pGB\\Fa'
    tuple_0 = (str_0,)
    var_0 = module_1.to_namedtuple(tuple_0)

def test_case_5():
    bytes_0 = b'l\xd27\x8c\xb3<9'
    list_0 = [bytes_0, bytes_0, bytes_0]
    var_0 = module_1.to_namedtuple(list_0)
    var_1 = module_1.to_namedtuple(list_0)
    var_2 = module_1.to_namedtuple(list_0)

def test_case_6():
    tuple_0 = None
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    var_0 = module_1.to_namedtuple(dict_0)
    simple_namespace_0 = module_0.SimpleNamespace()
    var_1 = module_1.to_namedtuple(simple_namespace_0)
    var_2 = module_1.to_namedtuple(simple_namespace_0)
    list_0 = [var_0, var_0]
    var_3 = module_1.to_namedtuple(list_0)
    var_4 = module_1.to_namedtuple(list_0)

def test_case_7():
    tuple_0 = None
    dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0, tuple_0: tuple_0}
    var_0 = module_1.to_namedtuple(dict_0)
    str_0 = 'M'
    dict_1 = {str_0: var_0, str_0: dict_0, str_0: dict_0, str_0: dict_0}
    simple_namespace_0 = module_0.SimpleNamespace(**dict_1)
    bool_0 = True
    tuple_1 = (simple_namespace_0, bool_0)
    var_1 = module_1.to_namedtuple(tuple_1)
    var_2 = module_1.to_namedtuple(simple_namespace_0)
    list_0 = [var_0, tuple_0, var_1, var_0]
    var_3 = module_1.to_namedtuple(list_0)

def test_case_8():
    ordered_dict_0 = module_2.OrderedDict()
    tuple_0 = (ordered_dict_0,)
    var_0 = module_1.to_namedtuple(tuple_0)

def test_case_9():
    str_0 = 'Zh\ti4*\\'
    simple_namespace_0 = module_0.SimpleNamespace()
    tuple_0 = (str_0, simple_namespace_0)
    var_0 = module_1.to_namedtuple(simple_namespace_0)
    tuple_1 = (tuple_0,)
    var_1 = module_1.to_namedtuple(tuple_1)
    tuple_2 = None
    dict_0 = {tuple_2: tuple_2, tuple_2: tuple_2, tuple_2: tuple_2}
    list_0 = [dict_0, str_0, tuple_1]
    var_2 = module_1.to_namedtuple(list_0)
    var_3 = module_1.to_namedtuple(list_0)
    var_4 = module_1.to_namedtuple(tuple_1)
    var_5 = module_1.to_namedtuple(dict_0)
    simple_namespace_1 = module_0.SimpleNamespace()
    var_6 = module_1.to_namedtuple(simple_namespace_1)
    str_1 = 'H\x0b'
    str_2 = 'D`<(*6B5'
    dict_1 = {str_1: var_5, str_1: dict_0, str_1: dict_0, str_2: dict_0}
    simple_namespace_2 = module_0.SimpleNamespace(**dict_1)
    bool_0 = True
    tuple_3 = (simple_namespace_2, bool_0)
    var_7 = module_1.to_namedtuple(tuple_3)
    var_8 = module_1.to_namedtuple(tuple_3)
    simple_namespace_3 = module_0.SimpleNamespace(**dict_1)
    var_9 = module_1.to_namedtuple(simple_namespace_3)
    var_10 = module_1.to_namedtuple(simple_namespace_1)
    var_11 = module_1.to_namedtuple(tuple_1)
    list_1 = [var_5, tuple_0, var_8, var_5]
    var_12 = module_1.to_namedtuple(tuple_3)
    var_13 = module_1.to_namedtuple(simple_namespace_2)
    var_14 = module_1.to_namedtuple(list_1)
    var_15 = module_1.to_namedtuple(simple_namespace_1)