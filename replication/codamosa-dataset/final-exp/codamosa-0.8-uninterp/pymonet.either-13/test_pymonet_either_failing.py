# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = '?\x0c-fQ1t_"0VWE%Aeb'
        str_1 = '\n        Returns Lazy with function returning argument.\n\n        :param value: value to return by Lazy constructor_fn\n        :type value: Any\n        :returns: Lazy with function returning argument\n        :rtype: Lazy[Function() -> A]\n        '
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0, str_1: str_1}
        right_0 = None
        bool_0 = False
        either_0 = module_0.Either(bool_0)
        var_0 = either_0.case(dict_0, right_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xc8\xf8\x06Bp\xaf\xc26s\x06\x17C2\xfe\xd7\x9d\xbe\xcb\x96'
        str_0 = '\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    '
        dict_0 = {str_0: bytes_0}
        right_0 = module_0.Right(dict_0)
        bool_0 = right_0.is_right()
        tuple_0 = (bytes_0,)
        bool_1 = False
        either_0 = module_0.Either(bool_1)
        var_0 = either_0.ap(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\x0ckN'
        list_0 = []
        object_0 = module_1.object(*list_0)
        left_0 = module_0.Left(object_0)
        var_0 = left_0.bind(str_0)
        dict_0 = {}
        either_0 = module_0.Either(dict_0)
        var_1 = either_0.to_try()
        var_2 = either_0.to_lazy()
        bool_0 = either_0.__eq__(object_0)
        var_3 = left_0.to_validation()
        callable_0 = None
        var_4 = either_0.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = None
        either_0 = module_0.Either(var_0)
        right_0 = module_0.Right(var_0)
        bool_0 = right_0.is_left()
        bytes_0 = b'\xa2\t5\x86J\xb5\x8e\x7f\r\x0b\xac\x9c\xf6'
        object_0 = module_1.object()
        bool_1 = either_0.__eq__(object_0)
        right_1 = module_0.Right(bytes_0)
        var_1 = right_1.map(either_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -350.0
        str_0 = "o|7t|_)s(Rr,f;9%'h"
        dict_0 = {str_0: str_0}
        right_0 = module_0.Right(dict_0)
        var_0 = right_0.bind(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = None
        either_0 = module_0.Either(var_0)
        right_0 = module_0.Right(var_0)
        bool_0 = right_0.is_right()
        bool_1 = right_0.is_left()
        bytes_0 = b''
        object_0 = module_1.object()
        bool_2 = either_0.__eq__(object_0)
        var_1 = right_0.to_maybe()
        right_1 = module_0.Right(bytes_0)
        var_2 = right_1.map(either_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = None
        either_0 = module_0.Either(var_0)
        right_0 = module_0.Right(var_0)
        bool_0 = right_0.is_left()
        object_0 = module_1.object()
        bool_1 = right_0.is_left()
        var_1 = right_0.to_validation()
        either_1 = module_0.Either(var_0)
        var_2 = either_0.to_lazy()
        right_1 = module_0.Right(var_0)
        bool_2 = either_1.__eq__(object_0)
        right_2 = module_0.Right(var_0)
        callable_0 = None
        var_3 = either_1.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 10
        var_0 = lambda x: x + int_0
        right_0 = module_0.Right(var_0)
        var_1 = right_0.to_lazy()
        right_1 = module_0.Right(int_0)
        var_2 = right_1.to_lazy()
        left_0 = module_0.Left(int_0)
        var_3 = left_0.to_lazy()
        var_4 = lambda x: x + int_0
        right_2 = module_0.Right(var_4)
        var_5 = right_2.to_lazy()
        var_6 = lambda x: x + int_0
        right_3 = module_0.Right(var_6)
        var_7 = right_3.to_lazy()
        var_8 = lambda x: x + int_0
        left_1 = module_0.Left(var_8)
        var_9 = left_1.to_lazy()
        var_10 = lambda x: x + int_0
        left_2 = module_0.Left(var_10)
        callable_0 = None
        bytes_0 = b"\xd0\xde#q\xfdG\t\xc1\xcc\xb9'\xa3\x86\xb8\x80\x040@"
        right_4 = module_0.Right(bytes_0)
        var_11 = right_4.case(callable_0, callable_0)
    except BaseException:
        pass