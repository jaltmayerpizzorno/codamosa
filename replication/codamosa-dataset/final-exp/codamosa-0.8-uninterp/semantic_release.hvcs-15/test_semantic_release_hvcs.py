# Automatically generated by Pynguin.
import semantic_release.hvcs as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'y'
    token_auth_0 = module_0.TokenAuth(str_0)

def test_case_2():
    dict_0 = {}
    str_0 = '_'
    token_auth_0 = module_0.TokenAuth(str_0)
    var_0 = token_auth_0.__ne__(dict_0)

def test_case_3():
    github_0 = module_0.Github()
    str_0 = github_0.domain()

def test_case_4():
    str_0 = 'Create a new release\n\n        https://docs.github.com/rest/reference/repos#create-a-release\n\n        :param owner: The owner namespace of the repository\n        :param repo: The repository name\n        :param tag: Tag to create release for\n        :param changelog: The release notes for this version\n\n        :return: Whether the request succeeded\n        '
    bool_0 = module_0.post_changelog(str_0, str_0, str_0, str_0)

def test_case_5():
    bool_0 = module_0.check_token()

def test_case_6():
    str_0 = ' \x0cN2\tyriYq3#\n=G~{'
    str_1 = 'b'
    bool_0 = module_0.check_build_status(str_0, str_0, str_1)

def test_case_7():
    str_0 = '^'
    str_1 = '?9j'
    bool_0 = module_0.upload_to_release(str_0, str_0, str_1, str_0)

def test_case_8():
    gitlab_0 = module_0.Gitlab()
    str_0 = gitlab_0.domain()

def test_case_9():
    gitlab_0 = module_0.Gitlab()
    str_0 = gitlab_0.api_url()
    str_1 = 'y'
    token_auth_0 = module_0.TokenAuth(str_1)

def test_case_10():
    base_0 = module_0.get_hvcs()

def test_case_11():
    github_0 = module_0.Github()
    optional_0 = github_0.auth()
    str_0 = '\x0cqz\x0bI8\rc>%&'
    bool_0 = github_0.check_build_status(str_0, str_0, str_0)
    optional_1 = module_0.get_token()

def test_case_12():
    optional_0 = module_0.get_domain()
    base_0 = module_0.Base()

def test_case_13():
    github_0 = module_0.Github()
    session_0 = github_0.session()
    str_0 = 'Retry the same release, do not bump.'
    str_1 = None
    str_2 = None
    str_3 = github_0.api_url()
    str_4 = '8Ui"}TS]Jph`Q'
    str_5 = ";e+e/kmsK`_ug/N5B'1"
    bool_0 = module_0.post_changelog(str_4, str_4, str_1, str_5)
    str_6 = 'zjqT}U1|M\r6#E^'
    optional_0 = github_0.auth()
    str_7 = 'BZ}25B,\x0b'
    bool_1 = github_0.check_build_status(str_1, str_6, str_7)
    bool_2 = module_0.upload_to_release(str_2, str_2, str_6, str_6)
    base_0 = module_0.get_hvcs()
    bool_3 = module_0.check_build_status(str_0, str_1, str_1)
    str_8 = 'Main config: '
    str_9 = 'twine upload '
    optional_1 = base_0.token()
    bool_4 = module_0.check_build_status(str_5, str_9, str_9)
    token_auth_0 = module_0.TokenAuth(session_0)
    var_0 = token_auth_0.__call__(session_0)
    bool_5 = github_0.check_build_status(str_1, str_8, str_8)
    str_10 = 'Go.A8R y'
    base_1 = module_0.get_hvcs()
    optional_2 = module_0.get_token()
    str_11 = 'U DC8s'
    str_12 = '_kNkXR"<\\qCtY3'
    str_13 = '> \r6dANe8~c dZ7v!wJJ'
    str_14 = 'D\x0biPW?Ua3s;qG'
    str_15 = 'j6;xBU2pu{g_)B>8[M;'
    bool_6 = module_0.post_changelog(str_13, str_14, str_15, str_9)
    bool_7 = module_0.upload_to_release(str_14, str_7, str_9, str_11)
    str_16 = None
    bool_8 = base_1.check_build_status(str_16, str_12, str_10)