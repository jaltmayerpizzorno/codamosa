# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        bytes_0 = b'\xb6o\x8e\xa5 o\x13\x1f \xc4!\xf3'
        never_match_0 = module_0.NeverMatch()
        any_0 = never_match_0.validate(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = []
        one_of_0 = module_0.OneOf(var_0)
        any_0 = one_of_0.validate(var_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        str_0 = " 4n1'lZj~hfw*4%{P/"
        bool_0 = True
        field_0 = module_1.Field(title=str_0, allow_null=bool_0)
        list_0 = [field_0, field_0, field_0]
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        all_of_0 = module_0.AllOf(list_0)
        one_of_0 = module_0.OneOf(list_0)
        any_0 = one_of_0.validate(one_of_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Test'
        bool_0 = True
        field_0 = module_1.Field()
        list_0 = [field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        any_0 = all_of_0.validate(str_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        any_0 = module_1.Any()
        not_0 = module_0.Not(any_0)
        int_0 = 2
        any_1 = not_0.validate(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        never_match_0 = module_0.NeverMatch()
        never_match_1 = module_0.NeverMatch()
        never_match_2 = module_0.NeverMatch()
        if_then_else_0 = module_0.IfThenElse(never_match_0, never_match_1, never_match_2)
        any_0 = if_then_else_0.validate(if_then_else_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 4
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        bool_1 = field_0.has_default()
        list_0 = [field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        list_1 = [field_0, field_0, field_0, field_0]
        str_0 = 'allow_null'
        dict_0 = {str_0: bool_0, str_0: field_0, str_0: int_0}
        one_of_0 = module_0.OneOf(list_1, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        any_0 = module_1.Any()
        any_1 = [any_0]
        one_of_0 = module_0.OneOf(any_1)
        int_0 = 42
        any_2 = one_of_0.validate(int_0)
        never_match_0 = module_0.NeverMatch()
        never_match_1 = [never_match_0]
        one_of_1 = module_0.OneOf(never_match_1)
        int_1 = 42
        any_3 = one_of_1.validate(int_1)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 4
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        bool_1 = field_0.has_default()
        list_0 = [field_0, field_0, field_0]
        all_of_0 = module_0.AllOf(list_0)
        str_0 = 'allow_null'
        dict_0 = {str_0: bool_0, str_0: field_0, str_0: int_0}
        if_then_else_0 = module_0.IfThenElse(field_0, **dict_0)
    except BaseException:
        pass