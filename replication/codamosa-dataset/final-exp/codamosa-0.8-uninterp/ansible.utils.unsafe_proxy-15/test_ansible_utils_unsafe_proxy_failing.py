# Automatically generated by Pynguin.
import ansible.utils.unsafe_proxy as module_0

def test_case_0():
    try:
        str_0 = 'aR5c:KtM(0lt0z\x0cBQ3y'
        str_1 = 'i.I5{ev\t*\x0c6Of+ZRf'
        list_0 = [str_1, str_1, str_0]
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        var_0 = ansible_unsafe_bytes_0.decode()
        dict_0 = {str_0: str_0, str_0: str_0, str_1: list_0, str_1: str_1}
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '$f=J[>^a\rJ0'
        str_1 = 'Block removed'
        str_2 = 'PC'
        int_0 = 1953
        str_3 = 'shadow'
        dict_0 = {str_0: str_0, str_1: str_1, str_2: int_0, str_3: str_1}
        dict_1 = {}
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText(**dict_1)
        var_0 = ansible_unsafe_text_0.encode(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.'
        str_1 = 'bUtK&Qw\tS&S+'
        list_0 = [str_1, str_0, str_1]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        var_0 = module_0.wrap_var(ansible_unsafe_0)
        dict_0 = {str_1: str_0, str_1: str_0}
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        var_1 = ansible_unsafe_bytes_0.decode(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        native_jinja_unsafe_text_0 = module_0.NativeJinjaUnsafeText(**dict_0)
        var_0 = module_0.wrap_var(native_jinja_unsafe_text_0)
        list_0 = [native_jinja_unsafe_text_0, var_0]
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = module_0.to_unsafe_bytes()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.to_unsafe_text()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.'
        bytes_0 = b'\x9c\xf2'
        list_0 = [str_0]
        list_1 = [list_0, str_0, str_0, list_0]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_1)
        var_0 = unsafe_proxy_0.__new__(bytes_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.'
        str_1 = 'bUtK&Qw\tS&S+'
        str_2 = ''
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        var_0 = module_0.wrap_var(ansible_unsafe_0)
        dict_0 = {str_1: str_0, str_1: str_0}
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        var_1 = ansible_unsafe_bytes_0.decode()
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText()
        list_0 = [ansible_unsafe_text_0, dict_0, str_2, ansible_unsafe_bytes_0]
        var_2 = ansible_unsafe_text_0.encode()
        var_3 = module_0.wrap_var(list_0)
        var_4 = ansible_unsafe_bytes_0.decode(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Deprecation warnings can be disabled by setting deprecation_warnings=False in ansible.cfg.'
        str_1 = 'bUtK&Qw\tS&S+'
        str_2 = ''
        ansible_unsafe_0 = module_0.AnsibleUnsafe()
        var_0 = module_0.wrap_var(ansible_unsafe_0)
        dict_0 = {str_1: str_0, str_1: str_0}
        ansible_unsafe_bytes_0 = module_0.AnsibleUnsafeBytes()
        var_1 = ansible_unsafe_bytes_0.decode()
        ansible_unsafe_text_0 = None
        var_2 = module_0.wrap_var(ansible_unsafe_text_0)
        ansible_unsafe_text_1 = module_0.AnsibleUnsafeText()
        list_0 = [ansible_unsafe_text_1, dict_0, str_2, ansible_unsafe_bytes_0]
        var_3 = ansible_unsafe_text_1.encode()
        var_4 = module_0.wrap_var(list_0)
        var_5 = ansible_unsafe_bytes_0.decode(**dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        ansible_unsafe_text_0 = module_0.AnsibleUnsafeText()
        list_0 = [ansible_unsafe_text_0]
        unsafe_proxy_0 = module_0.UnsafeProxy(*list_0)
    except BaseException:
        pass