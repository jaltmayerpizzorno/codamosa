# Automatically generated by Pynguin.
import ansible.utils.jsonrpc as module_0
import json as module_1

def test_case_0():
    try:
        dict_0 = {}
        json_rpc_server_0 = module_0.JsonRpcServer(**dict_0)
        var_0 = json_rpc_server_0.method_not_found()
    except BaseException:
        pass

def test_case_1():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{\n   "jsonrpc": "2.0",\n    "method": "subtract",\n    "params": [42, 23],\n    "id": 1\n}'
        var_0 = json_rpc_server_0.handle_request(str_0)
        list_0 = None
        var_1 = json_rpc_server_0.parse_error(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{\n   "jsonrpc": "2.0",\n    "method": "subtrat",\n    "params": [42, 23],\n    "id": 1\n}'
        var_0 = json_rpc_server_0.handle_request(str_0)
        var_1 = json_rpc_server_0.invalid_request()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{"jsonrpc": "2.0", "method": "do_notify", "params": [["test_host"],"msg"], "id": 0}'
        json_rpc_server_0 = module_0.JsonRpcServer()
        var_0 = json_rpc_server_0.handle_request(str_0)
        var_1 = module_1.loads(var_0)
        bool_0 = False
        list_0 = [bool_0]
        var_2 = json_rpc_server_0.invalid_params(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '{"jsonrpc": "2.0", "method": "um", "params": [1,2], "id": "1"}'
        var_0 = json_rpc_server_0.handle_request(str_0)
        var_1 = json_rpc_server_0.internal_error()
    except BaseException:
        pass

def test_case_5():
    try:
        json_rpc_server_0 = module_0.JsonRpcServer()
        str_0 = '_an_error'
        var_0 = dict(method=str_0)
        var_1 = module_1.dumps(var_0)
        var_2 = json_rpc_server_0.handle_request(var_1)
    except BaseException:
        pass