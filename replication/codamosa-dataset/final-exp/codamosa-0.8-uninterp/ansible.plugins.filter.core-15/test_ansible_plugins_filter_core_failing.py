# Automatically generated by Pynguin.
import random as module_0
import ansible.plugins.filter.core as module_1
import ansible.template as module_2

def test_case_0():
    try:
        random_0 = module_0.Random()
        var_0 = module_1.to_yaml(random_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        str_0 = 'TPi/'
        dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0}
        var_0 = module_1.to_yaml(dict_0, *list_0)
        filter_module_0 = module_1.FilterModule(*list_0)
        tuple_0 = (filter_module_0,)
        var_1 = module_1.flatten(tuple_0)
        ansible_undefined_0 = module_2.AnsibleUndefined()
        var_2 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = None
        str_0 = 'sg#QLI7-dS )BWgpd;Nn'
        dict_0 = {str_0: str_0}
        var_0 = module_1.to_nice_yaml(tuple_0, **dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = None
        var_0 = module_1.to_nice_yaml(float_0)
        dict_0 = {}
        var_1 = module_1.comment(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        bool_1 = False
        var_0 = module_1.to_bool(bool_1)
        dict_0 = None
        var_1 = module_1.regex_search(bool_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 438.64
        list_0 = []
        bytes_0 = b'\xcb\x8b'
        var_0 = module_1.ternary(float_0, list_0, bytes_0)
        str_0 = None
        set_0 = {str_0, str_0, str_0}
        var_1 = module_1.to_datetime(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        int_0 = -5650
        var_0 = module_1.regex_findall(dict_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        dict_0 = None
        var_0 = module_1.regex_search(bool_0, dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        str_0 = 'posix_basic'
        list_0 = [str_0]
        bytes_0 = None
        tuple_0 = (bool_0, bytes_0)
        var_0 = module_1.ternary(str_0, list_0, tuple_0)
        dict_0 = None
        var_1 = module_1.regex_search(bool_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "\nx';xJP&(j"
        list_0 = [str_0]
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.from_yaml(filter_module_0)
        var_1 = module_1.to_nice_json(str_0, *list_0)
        str_1 = 'BhM[ Y}[\nJb%P&:'
        var_2 = module_1.fileglob(str_1)
        var_3 = module_1.comment(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 2142
        var_0 = module_1.combine()
        str_0 = '+]Eb=i`\r(2(JH$2rk@5|'
        filter_module_0 = module_1.FilterModule()
        list_0 = [int_0, int_0, str_0, filter_module_0, str_0, str_0]
        var_1 = module_1.randomize_list(str_0)
        dict_0 = {str_0: list_0, str_0: str_0, str_0: int_0}
        bool_0 = False
        var_2 = module_1.from_yaml_all(bool_0)
        var_3 = module_1.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '/c0pB7D#-\rP>VO'
        var_0 = module_1.get_hash(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        set_0 = set()
        tuple_0 = ()
        var_0 = module_1.get_encrypted_password(set_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.get_encrypted_password(set_0, filter_module_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = []
        var_0 = module_1.comment(list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'ogv\x0e]\x110K\xc8:\x00'
        dict_0 = {bytes_0: bytes_0}
        bool_0 = True
        var_0 = module_1.extract(bytes_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 2776
        list_0 = [int_0, int_0, int_0, int_0]
        list_1 = [list_0]
        complex_0 = None
        bytes_0 = b'j\x10N\x81\x13\x91Z\xb1\xd6\x7f\xd7<'
        tuple_0 = (complex_0, bytes_0, list_1)
        bool_0 = True
        str_0 = ''
        dict_0 = {str_0: str_0}
        tuple_1 = (tuple_0, bool_0, dict_0, list_0)
        int_1 = 15
        var_0 = module_1.do_groupby(list_1, tuple_1, int_1)
    except BaseException:
        pass

def test_case_17():
    try:
        set_0 = None
        var_0 = module_1.b64encode(set_0)
        str_0 = '!}Cf9KSW:?P\r?i\t'
        var_1 = module_1.get_hash(str_0, str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = None
        var_0 = module_1.mandatory(float_0)
        bytes_0 = b'UbL\x04'
        var_1 = module_1.b64decode(bytes_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 8
        var_0 = module_1.flatten(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        filter_module_0 = module_1.FilterModule()
        filter_module_1 = module_1.FilterModule()
        var_0 = module_1.dict_to_list_of_dict_key_value_elements(filter_module_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '+Eb=i`\r(2(JH$2rk@5|'
        filter_module_0 = module_1.FilterModule()
        str_1 = 'nw{FL80'
        str_2 = '1\x0b>Ys'
        dict_0 = {str_0: filter_module_0, str_1: str_0, str_2: str_2}
        var_0 = module_1.list_of_dict_key_value_elements_to_dict(dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = 1535.112
        str_0 = '"j7q'
        dict_0 = {str_0: float_0, str_0: float_0, str_0: str_0}
        var_0 = module_1.path_join(dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        float_0 = None
        str_0 = ")hb1m!N=\nc_'6Cjo{%V"
        var_0 = module_1.path_join(str_0)
        set_0 = None
        float_1 = 1.0
        var_1 = module_1.regex_escape(float_1)
        var_2 = module_1.mandatory(float_0, set_0)
        list_0 = [set_0, float_0, var_1, str_0]
        var_3 = module_1.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        async_iterator_0 = None
        var_0 = module_1.to_bool(async_iterator_0)
        bytes_0 = b'\x01\x08\x8d\xa4J\xbd'
        var_1 = module_1.rand(bytes_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_25():
    try:
        bytes_0 = b'\x01\x08\x8d\xa4J\xbd'
        list_0 = []
        var_0 = module_1.rand(bytes_0, list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        float_0 = 1352.672
        var_0 = module_1.b64encode(float_0)
        int_0 = None
        str_0 = None
        var_1 = module_1.to_uuid(int_0, str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 600
        dict_0 = None
        filter_module_0 = module_1.FilterModule()
        var_0 = module_1.regex_escape(filter_module_0)
        var_1 = filter_module_0.filters()
        var_2 = module_1.quote(dict_0)
        var_3 = filter_module_0.filters()
        var_4 = filter_module_0.filters()
        var_5 = module_1.to_bool(int_0)
        str_0 = 'S|cK$7N,P*GoDpV4?'
        str_1 = 'posix_extended'
        dict_1 = {str_0: var_0, str_1: filter_module_0}
        str_2 = '4SexSX{'
        var_6 = module_1.mandatory(str_2, filter_module_0)
        bool_0 = False
        var_7 = module_1.to_uuid(dict_1, bool_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '^https?://\\S+\\.com$'
        str_1 = '\n\\;1c]]'
        var_0 = module_1.regex_escape(str_0, str_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = "The 'data' option needs to be a dictionary/hash"
        var_0 = module_1.regex_replace()
        bool_0 = False
        type_0 = None
        ansible_undefined_0 = module_2.AnsibleUndefined(type_0)
        dict_0 = {str_0: ansible_undefined_0, str_0: ansible_undefined_0, str_0: ansible_undefined_0, str_0: var_0}
        var_1 = module_1.ternary(bool_0, ansible_undefined_0, dict_0)
        random_0 = module_0.Random()
        bytes_0 = b'\x108r\xd21\x05\xef\xf08\x9b9;\xd4\xe5'
        var_2 = module_1.rand(random_0, bytes_0)
        var_3 = module_1.to_yaml(random_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bytes_0 = b'}p-\x93\xef\x92F\xa9'
        str_0 = 'gMO?5O^>`T5@_DoAcqs$'
        list_0 = []
        var_0 = module_1.regex_search(bytes_0, str_0, *list_0)
        str_1 = '-m venv'
        str_2 = 'm60|RsLPN'
        dict_0 = {str_1: var_0, str_2: str_1}
        var_1 = module_1.combine(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'python'
        var_0 = module_1.regex_escape(str_0, str_0)
        set_0 = {str_0}
        tuple_0 = ()
        var_1 = module_1.combine()
        var_2 = module_1.get_hash(tuple_0, set_0)
    except BaseException:
        pass

def test_case_32():
    try:
        filter_module_0 = None
        tuple_0 = None
        set_0 = set()
        var_0 = module_1.ternary(tuple_0, set_0, filter_module_0)
        int_0 = 32600
        var_1 = module_1.fileglob(int_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'Function comment(text) has been tested in test_jinja2.py'
        list_0 = [str_0]
        tuple_0 = (list_0,)
        var_0 = module_1.regex_search(tuple_0, str_0, *list_0)
    except BaseException:
        pass

def test_case_34():
    try:
        dict_0 = {}
        bytes_0 = b'\x01\x08\x8d\xa4J\xbd'
        var_0 = module_1.rand(bytes_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 2159
        str_0 = '+Eb=i`\r(2(JH$2rk@5|'
        filter_module_0 = module_1.FilterModule()
        list_0 = [int_0, int_0, filter_module_0, str_0]
        dict_0 = {str_0: list_0, str_0: str_0}
        var_0 = module_1.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '?'
        var_0 = module_1.to_bool(str_0)
        set_0 = {str_0}
        float_0 = -609.12987
        var_1 = module_1.subelements(float_0, set_0)
    except BaseException:
        pass

def test_case_37():
    try:
        list_0 = []
        var_0 = module_1.randomize_list(list_0)
        var_1 = module_1.combine(*list_0)
        bytes_0 = b'Z\rp\xe7b*\xbc\xde\xd5\xc1%\xde\x82'
        str_0 = "';2O;DE\\NQ@s;-"
        dict_0 = {str_0: str_0}
        var_2 = module_1.comment(bytes_0, **dict_0)
    except BaseException:
        pass

def test_case_38():
    try:
        bool_0 = None
        str_0 = 'RD66'
        list_0 = [bool_0, str_0, bool_0]
        dict_0 = {str_0: list_0, str_0: str_0}
        list_1 = [str_0, list_0, bool_0, str_0, str_0, dict_0]
        var_0 = module_1.combine(*list_1)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 2159
        str_0 = '+Eb=i`\r(2(JH$2rk@5|'
        filter_module_0 = module_1.FilterModule()
        list_0 = [int_0, int_0, filter_module_0, str_0]
        list_1 = [list_0]
        set_0 = set()
        var_0 = module_1.subelements(list_1, set_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 2240
        str_0 = 'G\\u/":'
        filter_module_0 = module_1.FilterModule()
        list_0 = [int_0, int_0, str_0, filter_module_0, str_0, str_0]
        list_1 = []
        var_0 = module_1.subelements(list_0, list_1)
    except BaseException:
        pass

def test_case_41():
    try:
        bool_0 = False
        var_0 = module_1.to_uuid(bool_0)
        str_0 = '~$v,qT+-9pO'
        var_1 = module_1.from_yaml_all(str_0)
        list_0 = [var_0]
        list_1 = [var_1]
        str_1 = "k[u4`GT+&2+|qj'"
        dict_0 = {str_0: list_0, str_1: list_1}
        filter_module_0 = module_1.FilterModule(*list_1, **dict_0)
    except BaseException:
        pass

def test_case_42():
    try:
        list_0 = []
        int_0 = -1643
        var_0 = module_1.rand(list_0, int_0, list_0)
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = 1
        random_0 = module_0.Random(int_0)
        var_0 = None
        int_1 = 1
        int_2 = 10
        var_1 = module_1.rand(var_0, int_1, int_2, random_0)
    except BaseException:
        pass

def test_case_44():
    try:
        filter_module_0 = module_1.FilterModule()
        bool_0 = None
        list_0 = [filter_module_0, bool_0, filter_module_0, bool_0]
        var_0 = filter_module_0.filters()
        var_1 = module_1.combine(*list_0)
    except BaseException:
        pass

def test_case_45():
    try:
        bytes_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0]
        tuple_0 = ()
        var_0 = module_1.flatten(list_0, tuple_0)
        list_1 = [bytes_0, bytes_0]
        var_1 = module_1.path_join(list_1)
    except BaseException:
        pass

def test_case_46():
    try:
        float_0 = 1964.18778
        filter_module_0 = None
        var_0 = module_1.quote(filter_module_0)
        tuple_0 = (float_0, filter_module_0, filter_module_0)
        var_1 = module_1.regex_replace(tuple_0)
        dict_0 = {float_0: var_1, float_0: var_1, var_1: var_0}
        var_2 = module_1.to_bool(dict_0)
        bytes_0 = b'@\x0e!\x1c\x86\xaa\nM'
        str_0 = '['
        var_3 = module_1.extract(bytes_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_47():
    try:
        int_0 = 2776
        list_0 = [int_0, int_0, int_0, int_0]
        float_0 = -2797.15
        var_0 = module_1.rand(list_0, float_0)
    except BaseException:
        pass

def test_case_48():
    try:
        int_0 = 2159
        list_0 = [int_0, int_0, int_0, int_0]
        filter_module_0 = None
        var_0 = module_1.flatten(list_0, filter_module_0)
        str_0 = '+Eb=i`\r(2(JH$2rk@5|'
        filter_module_1 = module_1.FilterModule()
        list_1 = [int_0, int_0, filter_module_1, str_0]
        str_1 = '\x0b\x0cVP'
        str_2 = 'P/+kYIe\x0bEqUS5EG=;J4'
        float_0 = 1947.428004
        tuple_0 = (str_1, str_2, float_0)
        var_1 = module_1.list_of_dict_key_value_elements_to_dict(list_1, tuple_0)
    except BaseException:
        pass

def test_case_49():
    try:
        float_0 = 1.0
        list_0 = []
        var_0 = module_1.list_of_dict_key_value_elements_to_dict(list_0)
        str_0 = '$)E@@Q!\x0b'
        var_1 = module_1.regex_search(str_0, float_0)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = 'D=}6<C\\N\txfGZu'
        int_0 = -900
        float_0 = None
        bytes_0 = b'\xc3dV2=lK\xb7i/lE\xc4\x1d\xe5\xe3G5\xa0\xcf'
        list_0 = [str_0, str_0, str_0]
        var_0 = module_1.regex_findall(int_0, float_0, bytes_0, list_0)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = 'notification_secrets'
        var_0 = module_1.strftime(str_0, str_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = 'foo'
        float_0 = 1753.13
        var_0 = module_1.b64encode(float_0)
        str_1 = 'bar'
        str_2 = {str_0: str_1}
        dict_0 = {}
        float_1 = 1105.01
        list_0 = [float_1, str_0, str_2, float_1]
        bytes_0 = b'\xc5\x8b\xd4\xef\xc0\xfe\xe0\xee\xc6\xacZ'
        dict_1 = {str_0: float_1}
        var_1 = module_1.mandatory(bytes_0, dict_1)
        ansible_undefined_0 = module_2.AnsibleUndefined(str_1, str_1)
        var_2 = module_1.extract(dict_0, float_1, list_0, ansible_undefined_0)
    except BaseException:
        pass

def test_case_53():
    try:
        int_0 = 2240
        bytes_0 = b'\xea\x15t`S\x17k2X\xb3\xb1('
        var_0 = module_1.fileglob(bytes_0)
        str_0 = 'G\\u/":'
        filter_module_0 = module_1.FilterModule()
        list_0 = [int_0, int_0, str_0, filter_module_0, str_0, str_0]
        var_1 = module_1.combine(*list_0)
    except BaseException:
        pass

def test_case_54():
    try:
        bool_0 = True
        str_0 = 'e'
        tuple_0 = (bool_0, str_0)
        float_0 = 461.0
        bytes_0 = b'\xd8'
        bool_1 = True
        tuple_1 = (tuple_0, float_0, bytes_0, bool_1)
        list_0 = [float_0]
        tuple_2 = (tuple_1, tuple_1, float_0, list_0)
        var_0 = module_1.flatten(tuple_2)
        var_1 = module_1.regex_escape(bool_0)
        str_1 = None
        str_2 = 'E.2|X!~WdhAY(K.%U'
        dict_0 = {str_1: str_2}
        var_2 = module_1.fileglob(dict_0)
    except BaseException:
        pass

def test_case_55():
    try:
        int_0 = 2159
        str_0 = '+Eb=i`\r(2(JH$2rk@5|'
        dict_0 = {}
        set_0 = {str_0}
        var_0 = module_1.dict_to_list_of_dict_key_value_elements(dict_0, set_0)
        filter_module_0 = module_1.FilterModule()
        list_0 = [int_0, int_0, filter_module_0, str_0]
        list_1 = [list_0]
        set_1 = {filter_module_0}
        var_1 = module_1.subelements(list_1, set_1)
    except BaseException:
        pass

def test_case_56():
    try:
        int_0 = 2184
        str_0 = 'python'
        str_1 = '|$?7=ia'
        dict_0 = {str_1: int_0, str_0: str_1}
        var_0 = module_1.dict_to_list_of_dict_key_value_elements(dict_0)
        filter_module_0 = module_1.FilterModule()
        list_0 = [int_0, int_0, filter_module_0, str_0]
        var_1 = module_1.mandatory(filter_module_0)
        str_2 = None
        dict_1 = {str_2: str_2, str_0: list_0, str_2: var_1}
        var_2 = module_1.subelements(dict_1, list_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = '+Eb=i`\r(2(JH$2rk@5|'
        filter_module_0 = module_1.FilterModule()
        bytes_0 = b'\xa1\xd8\xc7o\xc5\xbc\x92\xe6U\xb34gB\x1f\x9d'
        tuple_0 = (str_0, filter_module_0, bytes_0)
        bool_0 = False
        list_0 = [tuple_0, bool_0, tuple_0]
        var_0 = module_1.rand(tuple_0, list_0)
        var_1 = module_1.flatten(list_0, bool_0)
        int_0 = None
        str_1 = None
        var_2 = module_1.to_uuid(int_0, str_1)
    except BaseException:
        pass

def test_case_58():
    try:
        int_0 = 2142
        str_0 = '+]Eb=i`\r(2(JH$2rk@5|'
        filter_module_0 = module_1.FilterModule()
        list_0 = [int_0, int_0, str_0, filter_module_0, str_0, str_0]
        dict_0 = {str_0: list_0, str_0: str_0, str_0: int_0}
        var_0 = module_1.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_59():
    try:
        str_0 = 'A"'
        str_1 = 'T-yxede7]V+BRoNS'
        str_2 = '_default'
        dict_0 = {str_1: str_1, str_1: str_0, str_2: str_0}
        tuple_0 = (str_0, dict_0, str_1, dict_0)
        str_3 = '8}i'
        var_0 = module_1.regex_replace(tuple_0, tuple_0, str_3, tuple_0)
    except BaseException:
        pass

def test_case_60():
    try:
        float_0 = None
        set_0 = None
        float_1 = 1.0
        var_0 = module_1.regex_escape(float_1)
        var_1 = module_1.mandatory(float_0, set_0)
        str_0 = 'T32wOEUM*449%>t#'
        list_0 = [set_0, float_0, var_0, str_0]
        var_2 = module_1.subelements(list_0, str_0)
    except BaseException:
        pass

def test_case_61():
    try:
        bool_0 = True
        str_0 = 'posix_basic'
        list_0 = [str_0]
        bytes_0 = None
        tuple_0 = (bool_0, bytes_0)
        var_0 = module_1.ternary(str_0, list_0, tuple_0)
        bool_1 = True
        str_1 = '8^Tkn`nUJNw[`UY6<.EN'
        str_2 = None
        str_3 = 'w'
        dict_0 = {str_1: tuple_0, str_1: bytes_0, str_2: str_0, str_3: tuple_0}
        str_4 = 'checkout'
        set_0 = {str_3}
        int_0 = 712
        var_1 = module_1.rand(bool_1, dict_0, str_4, set_0, int_0)
    except BaseException:
        pass

def test_case_62():
    try:
        int_0 = -3
        bytes_0 = b'\x9e\xc8\xaa\x130T\x82\xff\xf5/ft\xb0\xd7'
        set_0 = {int_0, bytes_0, int_0}
        filter_module_0 = module_1.FilterModule()
        str_0 = None
        dict_0 = {}
        str_1 = 'kwii`g0( \x0bVaX>xWIi}'
        str_2 = 'okeF$<V8Q'
        list_0 = [filter_module_0]
        list_1 = [str_2, bytes_0, list_0, str_0]
        var_0 = module_1.extract(set_0, dict_0, str_1, list_1)
    except BaseException:
        pass

def test_case_63():
    try:
        str_0 = '-o'
        bool_0 = None
        var_0 = module_1.to_nice_yaml(bool_0)
        list_0 = [str_0]
        var_1 = module_1.combine(*list_0)
        var_2 = module_1.from_yaml(str_0)
    except BaseException:
        pass

def test_case_64():
    try:
        set_0 = None
        bool_0 = False
        dict_0 = {}
        int_0 = -1232
        var_0 = module_1.ternary(set_0, bool_0, dict_0, int_0)
        float_0 = None
        str_0 = ")hb1m!N=\nc_'6Cjo{%V"
        var_1 = module_1.path_join(str_0)
        set_1 = None
        float_1 = 1.0
        var_2 = module_1.regex_escape(float_1)
        var_3 = module_1.mandatory(float_0, set_1)
        str_1 = 'T32wOEUM*449%>t#'
        list_0 = [set_1, float_0, var_2, str_1]
        var_4 = module_1.subelements(list_0, str_1)
    except BaseException:
        pass

def test_case_65():
    try:
        bool_0 = True
        var_0 = module_1.to_bool(bool_0)
        str_0 = 'on'
        var_1 = module_1.to_bool(str_0)
        str_1 = 'true'
        var_2 = module_1.to_bool(str_1)
        str_2 = 'yes'
        var_3 = module_1.to_bool(str_2)
        str_3 = '1'
        var_4 = module_1.to_bool(str_3)
        dict_0 = {}
        filter_module_0 = module_1.FilterModule(**dict_0)
        var_5 = module_1.regex_escape(filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_66():
    try:
        ansible_undefined_0 = module_2.AnsibleUndefined()
        var_0 = module_1.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_67():
    try:
        str_0 = '/bin/*'
        var_0 = module_1.fileglob(str_0)
        ansible_undefined_0 = module_2.AnsibleUndefined()
        list_0 = None
        filter_module_0 = module_1.FilterModule(*list_0)
    except BaseException:
        pass

def test_case_68():
    try:
        var_0 = None
        bool_0 = True
        var_1 = module_1.mandatory(bool_0)
        str_0 = '#1~-0c'
        str_1 = '<-"\x0cG/"Rw]Gom\\2U>B-`'
        str_2 = '8 G9S<Pn'
        dict_0 = {str_0: bool_0, str_1: var_0, str_2: str_2}
        var_2 = module_1.mandatory(dict_0)
        str_3 = ">'BE.,O[qrk<}}o\t"
        var_3 = module_1.mandatory(str_3)
        int_0 = -1180
        ansible_undefined_0 = module_2.AnsibleUndefined(str_1, int_0)
        list_0 = [var_2]
        var_4 = module_1.mandatory(ansible_undefined_0, list_0)
    except BaseException:
        pass

def test_case_69():
    try:
        str_0 = ''
        var_0 = module_1.comment(str_0)
        str_1 = 'c'
        var_1 = module_1.comment(str_0, str_1)
        str_2 = 'erlang'
        var_2 = module_1.comment(str_0, str_2)
        str_3 = 'cblock'
        var_3 = module_1.comment(str_0, str_3)
        str_4 = 'xml'
        var_4 = module_1.comment(str_0, str_4)
        dict_0 = {var_1: str_0, str_4: var_1, str_4: str_4}
        var_5 = module_1.fileglob(dict_0)
    except BaseException:
        pass

def test_case_70():
    try:
        str_0 = '|,F }^Ag>E?>C/:0lU'
        str_1 = 'gL-uPps'
        str_2 = {str_0: str_0, str_1: str_0, str_0: str_0}
        str_3 = [str_2]
        str_4 = 'user.groups'
        var_0 = module_1.subelements(str_3, str_4)
    except BaseException:
        pass

def test_case_71():
    try:
        str_0 = 'n:ame'
        str_1 = 'gL-uPps'
        str_2 = [str_1]
        str_3 = [str_1, str_2]
        str_4 = {str_0: str_3, str_1: str_2, str_0: str_3}
        str_5 = [str_4]
        var_0 = module_1.subelements(str_5, str_1)
        str_6 = [str_2]
        str_7 = {str_0: str_6, str_1: str_6, str_0: str_6}
        str_8 = [str_7]
        str_9 = 'user.groups'
        var_1 = module_1.subelements(str_8, str_9)
    except BaseException:
        pass