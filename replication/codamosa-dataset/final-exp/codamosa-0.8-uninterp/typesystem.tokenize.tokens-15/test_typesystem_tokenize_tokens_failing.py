# Automatically generated by Pynguin.
import typesystem.tokenize.tokens as module_0
import typesystem.base as module_1

def test_case_0():
    try:
        int_0 = -822
        token_0 = module_0.Token(int_0, int_0, int_0)
        bool_0 = token_0.__eq__(int_0)
        bool_1 = token_0.__eq__(token_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2231.613
        int_0 = -230
        list_0 = [int_0]
        str_0 = '1'
        token_0 = module_0.Token(float_0, int_0, int_0, str_0)
        token_1 = token_0.lookup(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_token_0 = None
        dict_0 = {list_token_0: list_token_0, list_token_0: list_token_0}
        list_0 = [list_token_0, list_token_0, dict_0]
        list_1 = [list_0]
        int_0 = 737
        int_1 = 3015
        str_0 = '\n    Only ever matches the given given value.\n    '
        token_0 = module_0.Token(dict_0, int_0, int_1, str_0)
        token_1 = token_0.lookup_key(list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -661.038532
        int_0 = -23
        str_0 = '?pd)ys=emT'
        token_0 = module_0.Token(float_0, int_0, int_0, str_0)
        str_1 = token_0.__repr__()
        list_0 = []
        dict_0 = {}
        int_1 = 4
        token_1 = module_0.Token(dict_0, int_1, int_1)
        token_2 = token_1.lookup_key(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        int_0 = 4
        str_0 = 'Definition for {key!r} has already been set.'
        scalar_token_0 = module_0.ScalarToken(bool_0, int_0, int_0, str_0)
        any_0 = scalar_token_0.__hash__()
        dict_token_0 = module_0.DictToken(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_token_0 = module_0.DictToken()
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 0
        int_1 = 1
        position_0 = module_1.Position(int_1, int_1, int_0)
        int_2 = 12
        position_1 = {int_0: position_0, int_1: position_0}
        str_0 = 'value'
        str_1 = 'start_index'
        str_2 = 'end_index'
        str_3 = 'content'
        str_4 = 'test content'
        var_0 = {str_0: position_1, str_1: int_0, str_2: int_2, str_3: str_4}
        dict_token_0 = module_0.DictToken(**var_0)
    except BaseException:
        pass