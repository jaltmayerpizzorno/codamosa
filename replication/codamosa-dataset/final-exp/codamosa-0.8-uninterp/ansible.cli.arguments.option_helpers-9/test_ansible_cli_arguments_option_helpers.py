# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    var_0 = module_0.unfrack_path()

def test_case_1():
    str_0 = None
    str_1 = ''
    str_2 = ''
    dict_0 = {str_1: str_0, str_2: str_2}
    argument_parser_0 = module_1.ArgumentParser(str_0, dict_0)
    var_0 = module_0.add_module_options(argument_parser_0)

def test_case_2():
    bytes_0 = b'\x83_'
    bool_0 = True
    set_0 = {bytes_0, bool_0, bool_0, bytes_0}
    str_0 = ']'
    prepend_list_action_0 = None
    ansible_version_0 = module_0.AnsibleVersion(set_0, set_0, str_0, prepend_list_action_0, bytes_0)
    str_1 = 'to-W\x0b.A0;LKG'
    ansible_version_1 = module_0.AnsibleVersion(bytes_0, ansible_version_0, str_1)
    var_0 = module_0.maybe_unfrack_path(ansible_version_1)

def test_case_3():
    var_0 = module_0.version()

def test_case_4():
    int_0 = 1460
    var_0 = module_0.version(int_0)

def test_case_5():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_output_options(argument_parser_0)
    str_0 = '-o'
    str_1 = 'test'
    str_2 = [str_0, str_1, str_1]
    var_1 = argument_parser_0.parse_args(str_2)

def test_case_6():
    str_0 = '/ansible-playbook'
    var_0 = module_0.create_base_parser(str_0)
    var_1 = module_0.add_meta_options(var_0)

def test_case_7():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_connect_options(argument_parser_0)

def test_case_8():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_meta_options(argument_parser_0)

def test_case_9():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_check_options(argument_parser_0)

def test_case_10():
    set_0 = set()
    int_0 = 1460
    bool_0 = False
    prepend_list_action_0 = None
    bool_1 = True
    sorting_help_formatter_0 = module_0.SortingHelpFormatter(prepend_list_action_0, bool_1)
    list_0 = None
    ansible_version_0 = module_0.AnsibleVersion(bool_0, int_0, set_0, list_0)
    str_0 = ';sfo#"16c4\tDY=W/'
    int_1 = -7
    tuple_0 = (str_0, bool_0, int_1)
    str_1 = 'failovermethod'
    prepend_list_action_1 = module_0.PrependListAction(ansible_version_0, str_1, tuple_0, list_0, str_1)
    var_0 = prepend_list_action_1.__call__(list_0, sorting_help_formatter_0, str_1, set_0)

def test_case_11():
    set_0 = set()
    int_0 = 1460
    var_0 = module_0.version(int_0)
    str_0 = '?'
    bool_0 = False
    prepend_list_action_0 = None
    bool_1 = True
    sorting_help_formatter_0 = module_0.SortingHelpFormatter(prepend_list_action_0, bool_1)
    unrecognized_argument_0 = module_0.UnrecognizedArgument(str_0, bool_0, sorting_help_formatter_0, sorting_help_formatter_0)
    list_0 = None
    ansible_version_0 = module_0.AnsibleVersion(bool_0, int_0, set_0, list_0)
    str_1 = ';safo#"16c4\tDY=W/'
    int_1 = 0
    tuple_0 = (str_1, bool_0, int_1)
    str_2 = '|)4\r\r[}+\x0bMHE]V'
    prepend_list_action_1 = module_0.PrependListAction(ansible_version_0, str_2, tuple_0, list_0, str_2)
    argument_parser_0 = module_1.ArgumentParser(ansible_version_0)
    complex_0 = None
    var_1 = ansible_version_0.__call__(argument_parser_0, tuple_0, complex_0, argument_parser_0)
    str_3 = '_AO,yw/'
    var_2 = module_0.create_base_parser(unrecognized_argument_0)
    var_3 = prepend_list_action_1.__call__(list_0, sorting_help_formatter_0, str_3, set_0)

def test_case_12():
    str_0 = 'test_add_inventory_options_parser'
    var_0 = module_0.create_base_parser(str_0)
    var_1 = module_0.add_inventory_options(var_0)

def test_case_13():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_runas_prompt_options(argument_parser_0)
    var_1 = []
    var_2 = argument_parser_0.parse_args(var_1)

def test_case_14():
    str_0 = ''
    var_0 = module_0.create_base_parser(str_0)
    var_1 = module_0.add_fork_options(var_0)

def test_case_15():
    str_0 = 'mock'
    argument_parser_0 = module_1.ArgumentParser(str_0)
    var_0 = module_0.add_subset_options(argument_parser_0)
    str_1 = 'c'
    var_1 = argument_parser_0.parse_args(str_1)

def test_case_16():
    namespace_0 = module_1.Namespace()
    str_0 = 'foo'
    str_1 = 'bar'
    var_0 = setattr(namespace_0, str_0, str_1)
    str_2 = 'baz'
    var_1 = module_0.ensure_value(namespace_0, str_0, str_2)
    var_2 = getattr(namespace_0, str_0)
    namespace_1 = module_1.Namespace()
    var_3 = module_0.ensure_value(namespace_1, str_0, str_2)
    var_4 = getattr(namespace_1, str_0)
    namespace_2 = module_1.Namespace()
    var_5 = None
    var_6 = module_0.ensure_value(namespace_2, str_0, var_5)
    var_7 = getattr(namespace_2, str_0)