# Automatically generated by Pynguin.
import docstring_parser.rest as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'Setup sections.\n\n        :param sections: Recognized sections or None to defaults.\n        :param title_colon: require colon after section title.\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = 'Parse the docstring into its components.\n\n    :param text: docstring text to parse\n    :param style: docstring style\n    :returns: parsed docstring representation\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = 'Short string.\n\nLong string.\n:param int a: Parameter a.\n:type a: int'
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    str_0 = 'c1A.^0Mn'
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = '\n    :param a: Desc\n    :param b: Desc\n    :param c: Desc\n    :type a: int\n    :type b: str\n    :type c: str\n    :param d: Desc\n    :param e: Desc\n    :type d: int\n    :returns: Desc\n    :returns: Desc\n    :returns: None\n    :returns: Desc\n    :yields: Desc\n    :yields: Desc\n    :yields: int\n    :yields: Desc\n    :raises ValueError: Desc\n    :raises ValueError: Desc\n    :raises ValueError: None\n    :raises ValueError: Desc\n\n    Short description\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_6():
    str_0 = None
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = '\n    :param thing:\n    :param another_thing:\n    :description:\n    :param list things: A list of things\n    :param int n_things:\n    :param generator(int) n:\n    :param default:\n    :param non_default: defaults to "1".\n    :param str optional_thing: Defaults to "default".\n    :return:\n    :rtype:\n    :returns:\n    :rtype:\n    :returns list: A list of things\n    :yields int:\n    :yields:\n    :raises:\n    :raises ValueError:\n    :raises:\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '\n    Terminal control routines.\n\n    This module provides functions for controlling the\n    terminal.\n\n    :param int fd:\n        A file descriptor (defaults to ``sys.__stdout__``).\n    :param encoding:\n        The encoding to use for all text output to the standard\n        output and error streams (defaults to\n        ``locale.getpreferredencoding(False)``).\n\n    :raises SystemExit:\n        if the ``encoding`` is not supported.\n\n    :returns:\n        None\n\n    :raises ValueError:\n        if something is wrong.\n    :returns:\n        Something.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    str_0 = '    Short summary.\n\n    Long description (optional).\n\n    :param foo: Foo is a required parameter with a type.\n    :type foo: int\n    :param bar: Bar is an optional parameter with a default.\n    :type bar: str\n    :param baz: Defaults to None.\n    :type baz: int?\n    :param fux: An optional parameter with an optional type.\n    :raises: SomeError, SomeOtherError\n    :returns: Whatever\n    :returns: int\n    :yields: Whatever\n    :yields: int\n    :rtype: int\n    :meta: An unhandled meta info.\n    '
    docstring_0 = module_0.parse(str_0)