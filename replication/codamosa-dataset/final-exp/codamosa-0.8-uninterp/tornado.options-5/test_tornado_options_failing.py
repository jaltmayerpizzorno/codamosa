# Automatically generated by Pynguin.
import tornado.options as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = 'UVp8\r&r"&+Jh'
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        str_0 = ''
        optional_0 = None
        option_parser_0.define(str_0, optional_0, str_0)
        str_1 = '0@\t,Oymt8Yd'
        option_parser_0.__setitem__(str_1, option_parser_0)
    except BaseException:
        pass

def test_case_2():
    try:
        option_parser_0 = module_0.OptionParser()
        int_0 = -41
        var_0 = list(option_parser_0)
        var_1 = list(option_parser_0)[int_0]
    except BaseException:
        pass

def test_case_3():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = ';c!7yz&TCCjctAJ_(\nsT'
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        option_parser_0 = module_0.OptionParser()
        list_0 = option_parser_0.parse_command_line()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '!'
        module_0.define(str_0)
        str_1 = 'IF9FO#o5;1ZV>`3wW'
        list_0 = [str_1, str_0, str_1]
        bool_0 = False
        list_1 = module_0.parse_command_line(list_0, bool_0)
        list_2 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_6():
    try:
        module_0.print_help()
        error_0 = module_0.Error()
        bool_0 = True
        option_parser_0 = module_0.OptionParser()
        str_0 = '20>o\n#";Ox<#Ut(w'
        str_1 = '^'
        list_0 = [str_1, str_0]
        list_1 = module_0.parse_command_line(list_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '/input/tornado/log.py'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        option_parser_0 = module_0.OptionParser()
        module_0.print_help()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '-0_<)%Z8'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        list_0 = None
        option_parser_0.add_parse_callback(list_0)
        mockable_0 = option_parser_0.mockable()
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.run_parse_callbacks()
        option_parser_2 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        option_parser_3 = module_0.OptionParser()
        dict_1 = option_parser_3.as_dict()
        option_parser_3.print_help()
        error_0 = module_0.Error()
        str_0 = None
        mockable_1 = module_0._Mockable(option_parser_0)
        mockable_1.__delattr__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '-'
        option_0 = module_0._Option(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '#1'
        bool_0 = False
        option_0 = module_0._Option(str_0, str_0, bool_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'L'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'pa_IN'
        set_0 = None
        bool_0 = True
        module_0.define(str_0, set_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'foo'
        option_parser_0.define(str_0, str_0)
        str_1 = '--foo'
        str_2 = '--foo=spam'
        str_3 = [str_1, str_2]
        list_0 = option_parser_0.parse_command_line(str_3)
        str_4 = [str_2, str_1, str_2, str_2, str_1]
        list_1 = option_parser_0.parse_command_line(str_4)
    except BaseException:
        pass

def test_case_18():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_1 = module_0.OptionParser()
        option_parser_1.add_parse_callback(iterable_0)
        str_0 = 'debug|info|warning|error|none'
        bool_0 = False
        none_type_0 = None
        module_0.define(str_0, iterable_0, bool_0, str_0, str_0, bool_0, str_0, none_type_0)
        str_1 = 'lFzc'
        option_parser_2 = module_0.OptionParser()
        mockable_0 = option_parser_2.mockable()
        option_parser_2.__setattr__(str_1, mockable_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '#1'
        bool_0 = False
        list_0 = None
        list_1 = [list_0, bool_0]
        str_1 = 'M:QpsM0\\'
        option_0 = module_0._Option(str_0, list_1, str_0, bool_0, str_0, str_1)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = None
        str_1 = 'wJeIe0:">%Cz;mOe\'N'
        list_0 = [str_1, str_0, str_0, str_1, str_1, str_0, str_0]
        bool_0 = True
        list_1 = [bool_0]
        type_0 = module_1.type(*list_1)
        bool_1 = None
        list_2 = [list_0, bool_1, list_0, list_1]
        option_0 = module_0._Option(str_0, list_0, str_1)
        none_type_0 = None
        option_1 = module_0._Option(str_1, type_0, type_0, str_1, bool_1, str_1, none_type_0)
        any_0 = option_1.value()
        any_1 = option_1.parse(str_1)
        option_0.set(str_0)
        option_1.set(list_2)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = None
        str_1 = 'wJeIe:">%Cz;mOe;\'<N'
        list_0 = [str_0, str_1, str_1, str_1]
        bool_0 = None
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        list_1 = [bool_0]
        list_2 = [list_0, bool_0, list_0, list_1]
        str_2 = 'M:QpsM0\\'
        mockable_0 = module_0._Mockable(option_parser_0)
        option_0 = module_0._Option(str_2, list_2, str_2, bool_0, str_2, str_2)
        option_0.set(list_2)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '#1'
        str_1 = None
        str_2 = 'wJeIe:">%Cz;mOe;\'<N'
        list_0 = [str_1, str_2, str_2, str_0]
        bool_0 = None
        bool_1 = True
        option_parser_0 = module_0.OptionParser()
        option_parser_0.run_parse_callbacks()
        list_1 = option_parser_0.parse_command_line(list_0, bool_1)
        option_parser_0.run_parse_callbacks()
        bool_2 = False
        list_2 = None
        list_3 = [bool_2]
        list_4 = [list_2, bool_1, list_2, list_3]
        str_3 = 'M:QpsM0\\'
        mockable_0 = module_0._Mockable(option_parser_0)
        option_0 = module_0._Option(str_0, list_4, str_0, bool_0, str_0, str_3)
        option_0.set(list_4)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = None
        str_1 = 'wJeIe0:">%Cz;mOe\'N'
        list_0 = [str_1, str_0, str_0, str_1, str_1, str_0, str_0]
        bool_0 = True
        list_1 = [bool_0]
        type_0 = module_1.type(*list_1)
        bool_1 = None
        list_2 = [list_0, bool_1, list_0, list_1]
        option_0 = module_0._Option(str_0, list_0, str_1)
        none_type_0 = None
        option_1 = module_0._Option(str_1, type_0, type_0, str_1, bool_1, str_1, none_type_0)
        str_2 = ',1c|a-;Q0'
        any_0 = option_1.parse(str_2)
        any_1 = option_1.parse(str_1)
        option_0.set(str_0)
        option_1.set(list_2)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'A'
        str_1 = 'Returns the `.AsyncHTTPClient` instance to be used for auth requests.\n\n        May be overridden by subclasses to use an HTTP client other than\n        the default.\n\n        .. versionadded:: 4.3\n        '
        list_0 = [str_1, str_1, str_1, str_0]
        bool_0 = None
        list_1 = module_0.parse_command_line(list_0, bool_0)
        option_parser_0 = module_0.OptionParser()
        list_2 = option_parser_0.parse_command_line(list_0, bool_0)
        option_parser_0.run_parse_callbacks()
        bool_1 = False
        list_3 = None
        set_0 = option_parser_0.groups()
        list_4 = [bool_1]
        type_0 = module_1.type(*list_4)
        iterable_0 = option_parser_0.items()
        bool_2 = None
        list_5 = [list_3, list_3, bool_0, list_3, bool_0, list_4]
        str_2 = 'M:QpsM0\\'
        dict_0 = option_parser_0.group_dict(str_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        option_0 = module_0._Option(str_0, list_5, str_0, bool_2, str_0, str_2)
        any_0 = option_0.value()
        option_1 = module_0._Option(str_0, any_0, type_0, str_0, bool_2)
        any_1 = option_1.parse(str_0)
        option_0.set(type_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'KR'
        str_1 = None
        list_0 = [str_1, str_0, str_1, str_1, str_0]
        bool_0 = False
        list_1 = [bool_0]
        type_0 = module_1.type(*list_1)
        bool_1 = None
        list_2 = [list_0, bool_1, list_0, list_1]
        option_0 = module_0._Option(str_1, list_0, str_0)
        option_0.set(str_1)
        any_0 = option_0.value()
        str_2 = '9'
        bool_2 = True
        none_type_0 = None
        option_1 = module_0._Option(str_2, any_0, type_0, str_0, bool_2, str_2, none_type_0)
        str_3 = ',1c|a-;Q0'
        any_1 = option_1.parse(str_3)
        any_2 = option_1.parse(str_0)
        option_1.set(list_2)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = None
        str_1 = 'wJeIe0:">%Cz;mOe\'<N'
        list_0 = [str_0, str_1, str_1, str_0]
        bool_0 = None
        list_1 = module_0.parse_command_line(list_0, bool_0)
        bool_1 = True
        option_parser_0 = module_0.OptionParser()
        list_2 = option_parser_0.parse_command_line(list_0, bool_1)
        option_parser_0.run_parse_callbacks()
        list_3 = None
        list_4 = [bool_0]
        type_0 = module_1.type(*list_4)
        bool_2 = None
        list_5 = [list_3, bool_2, list_3, list_4]
        str_2 = "M:QpsM0\x0cJt'"
        dict_0 = option_parser_0.group_dict(str_1)
        mockable_0 = option_parser_0.mockable()
        mockable_1 = module_0._Mockable(option_parser_0)
        option_0 = module_0._Option(str_2, list_5, str_2, bool_2, str_2, str_2)
        any_0 = option_0.value()
        str_3 = '9'
        bool_3 = True
        none_type_0 = None
        option_1 = module_0._Option(str_3, any_0, type_0, str_0, bool_3, str_3, none_type_0)
        str_4 = ',1c|a-;Q0'
        any_1 = option_1.parse(str_4)
    except BaseException:
        pass

def test_case_27():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help()
        str_0 = 'dPx&VI%U'
        str_1 = "jYX<-m\n3D31'"
        none_type_0 = None
        str_2 = None
        bool_0 = None
        str_3 = '_bzv\r F.7Dkjs'
        str_4 = '76\x0cI&3F'
        list_0 = [str_3, str_3, str_4]
        list_1 = [option_parser_0, bool_0, list_0]
        option_parser_0.define(str_0, str_1, none_type_0, str_2, bool_0, str_1, list_1)
        str_5 = 'kW'
        bytes_0 = b"W>\xd7\x84=\xcbE\xd7%\xd4\x1e}\xd1'\xf0"
        list_2 = [option_parser_0]
        str_6 = 'বাংলা'
        bool_1 = option_parser_0.__contains__(str_6)
        option_0 = module_0._Option(str_5, bytes_0, list_2)
        option_0.set(option_parser_0)
    except BaseException:
        pass

def test_case_28():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'foo'
        str_1 = 'bar'
        option_parser_0.define(str_0, str_1)
        str_2 = '--foo'
        str_3 = 'quux'
        str_4 = [str_3, str_2, str_3, str_3, str_3]
        list_0 = option_parser_0.parse_command_line(str_4)
    except BaseException:
        pass