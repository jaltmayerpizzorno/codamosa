# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        dict_0 = {}
        callable_0 = None
        bool_0 = False
        either_0 = module_0.Either(bool_0)
        var_0 = either_0.case(dict_0, callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2424.252
        bytes_0 = b'F/t\x93\x89kU\x1bPJ\r:\x1d\xaf'
        either_0 = module_0.Either(bytes_0)
        left_0 = module_0.Left(either_0)
        bool_0 = left_0.is_right()
        left_1 = module_0.Left(either_0)
        var_0 = left_1.to_maybe()
        either_1 = module_0.Either(left_1)
        var_1 = either_1.ap(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2409.3
        object_0 = module_1.object()
        str_0 = 'SeX3-27oHyt'
        str_1 = 'OI\\W#FSz kz_'
        str_2 = '\n    Perform right-to-left function composition.\n\n    :param value: argument of first applied function\n    :type value: Any\n    :param functions: list of functions to applied from right-to-left\n    :type functions: List[Function]\n    :returns: result of all functions\n    :rtype: Any\n    '
        dict_0 = {str_0: object_0, str_1: float_0, str_2: object_0}
        tuple_0 = (dict_0,)
        left_0 = module_0.Left(tuple_0)
        var_0 = left_0.to_maybe()
        int_0 = -1382
        either_0 = module_0.Either(int_0)
        var_1 = either_0.case(float_0, object_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'K'
        str_1 = ']Bjpe>\rN}'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1}
        bool_0 = True
        left_0 = module_0.Left(bool_0)
        callable_0 = None
        right_0 = module_0.Right(dict_0)
        var_0 = right_0.map(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        right_0 = module_0.Right(list_0)
        var_0 = right_0.to_maybe()
        str_0 = 'ig"(\x0c~YRJ'
        str_1 = None
        dict_0 = {str_0: var_0, str_0: list_0, str_1: str_1}
        var_1 = right_0.bind(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'z}\rCHhDclm^'
        bool_0 = True
        right_0 = module_0.Right(bool_0)
        either_0 = module_0.Either(right_0)
        var_0 = either_0.to_try()
        either_1 = module_0.Either(str_0)
        list_0 = None
        set_0 = {list_0}
        right_1 = module_0.Right(set_0)
        var_1 = right_1.to_validation()
        str_1 = 'WJqv^e'
        set_1 = {str_1, str_1, str_1, str_1}
        either_2 = module_0.Either(set_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2
        var_0 = lambda x: x + int_0
        var_1 = lambda x: x + int_0
        right_0 = module_0.Right(int_0)
        var_2 = lambda x: x + int_0
        var_3 = lambda x: x + int_0
        var_4 = right_0.case(var_2, var_3)
    except BaseException:
        pass