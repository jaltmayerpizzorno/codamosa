# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.tree as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        a_s_t_0 = module_0.AST()
        a_s_t_1 = module_1.get_parent(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_1():
    try:
        a_s_t_0 = module_0.AST()
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -3582
        a_s_t_0 = module_0.AST()
        module_1.insert_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_3():
    try:
        a_s_t_0 = None
        set_0 = None
        iterable_0 = module_1.find(a_s_t_0, set_0)
        int_0 = 377
        module_1.replace_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_4():
    try:
        a_s_t_0 = module_0.AST()
        type_0 = None
        var_0 = module_1.get_closest_parent_of(a_s_t_0, a_s_t_0, type_0)
    except BaseException:
        pass

def test_case_5():
    try:
        a_s_t_0 = module_0.AST()
        int_0 = 1160
        list_0 = [a_s_t_0, a_s_t_0, a_s_t_0, a_s_t_0]
        module_1.insert_at(int_0, a_s_t_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        a_s_t_0 = module_0.AST()
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_7():
    try:
        a_s_t_0 = module_0.AST()
        int_0 = -1177
        list_0 = []
        module_1.insert_at(int_0, a_s_t_0, list_0)
        a_s_t_1 = module_1.get_parent(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'a = m + 5\n'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        a_s_t_0 = module_1.get_parent(var_0, var_1)
        var_2 = a_s_t_0.__class__
        var_3 = var_0.body[int_0]
        var_4 = var_3.value
        a_s_t_1 = module_1.get_parent(var_0, var_4)
        var_5 = var_1.value.left
        a_s_t_2 = module_1.get_parent(var_0, var_5)
        var_6 = a_s_t_2.__class__
        var_7 = var_3.value.right
        a_s_t_3 = module_1.get_parent(var_0, var_7)
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_3, a_s_t_2)
        var_8 = a_s_t_3.__class__
        str_1 = None
        var_9 = module_1.get_closest_parent_of(a_s_t_0, a_s_t_2, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'a = 4 + 5\n'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        a_s_t_0 = module_1.get_parent(var_0, var_1)
        var_2 = var_0.body[int_0]
        var_3 = var_2.value
        a_s_t_1 = module_1.get_parent(var_0, var_3)
        a_s_t_2 = module_0.AST()
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_2, a_s_t_1)
        a_s_t_3 = module_1.get_parent(var_0, a_s_t_0)
    except BaseException:
        pass