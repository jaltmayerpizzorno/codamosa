# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'~\xf7i\xa1\x00e\x0b\x92\x00\x94\x84o\xec'
    distribution_0 = module_0.Distribution(bytes_0)
    var_0 = distribution_0.get_distribution_facts()

def test_case_2():
    str_0 = 'Ua64'
    distribution_files_0 = module_0.DistributionFiles(str_0)

def test_case_3():
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
    bool_0 = True
    str_0 = 'mK\t.k2\rE({^z'
    set_0 = set()
    var_0 = distribution_files_0.parse_distribution_file_Slackware(bool_0, str_0, distribution_files_0, set_0)

def test_case_4():
    str_0 = '@#a\x0bIPtN!oM'
    tuple_0 = (str_0,)
    distribution_0 = module_0.Distribution(tuple_0)
    str_1 = '/.klsBpgIn,)m}X6tS:'
    bool_0 = True
    str_2 = '{J'
    distribution_fact_collector_0 = module_0.DistributionFactCollector(str_2)
    dict_0 = {bool_0: distribution_fact_collector_0, str_2: str_1}
    bool_1 = True
    tuple_1 = (distribution_fact_collector_0, dict_0, bool_1)
    tuple_2 = (distribution_0, str_1, bool_0, tuple_1)
    str_3 = 'accept_newhostkey'
    int_0 = 1331
    distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
    str_4 = 'Error connecting to %s: %s'
    dict_1 = {str_4: str_4}
    distribution_files_1 = module_0.DistributionFiles(dict_1)
    var_0 = distribution_files_1.parse_distribution_file_Alpine(tuple_2, str_3, int_0, distribution_files_0)

def test_case_5():
    str_0 = 'QN_G.'
    int_0 = 1694
    str_1 = None
    dict_0 = {}
    str_2 = 'f>/Ox\r.O'
    list_0 = []
    bytes_0 = b'q\x8d\x80@\xc4t\xaa+}\xfe_'
    tuple_0 = ()
    distribution_files_0 = module_0.DistributionFiles(tuple_0)
    var_0 = distribution_files_0.parse_distribution_file_CentOS(str_0, list_0, bytes_0, str_1)
    distribution_files_1 = module_0.DistributionFiles(str_2)
    str_3 = 'S\r,#\tP)BPa}n'
    var_1 = distribution_files_1.parse_distribution_file_Mandriva(str_3, dict_0, tuple_0, distribution_files_1)
    var_2 = distribution_files_1.parse_distribution_file_Coreos(str_0, int_0, str_1, dict_0)

def test_case_6():
    int_0 = 1694
    str_0 = None
    dict_0 = {}
    str_1 = 'f>/Ox\r.O'
    distribution_files_0 = module_0.DistributionFiles(str_1)
    var_0 = distribution_files_0.parse_distribution_file_Coreos(str_0, int_0, str_0, dict_0)

def test_case_7():
    bytes_0 = b'6c\xe4\r\xe4\xef\xaa'
    tuple_0 = None
    str_0 = '(ada?\\d+s\\d+\\w*|da\\d+s\\d+\\w*)'
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
    var_0 = distribution_files_0.parse_distribution_file_Flatcar(bytes_0, tuple_0, str_0, str_0)

def test_case_8():
    bool_0 = False
    distribution_0 = module_0.Distribution(bool_0)
    float_0 = -519.79622
    bytes_0 = b'\x91k\xd8'
    distribution_files_0 = module_0.DistributionFiles(bytes_0)
    str_0 = 'x*bOG\x0b11lrA.>k'
    int_0 = -1210
    set_0 = {int_0, str_0, float_0}
    var_0 = distribution_files_0.parse_distribution_file_ClearLinux(str_0, set_0, str_0, int_0)

def test_case_9():
    bool_0 = True
    distribution_0 = module_0.Distribution(bool_0)

def test_case_10():
    set_0 = set()
    distribution_0 = module_0.Distribution(set_0)
    var_0 = distribution_0.get_distribution_FreeBSD()

def test_case_11():
    str_0 = 'o'
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    var_0 = distribution_fact_collector_0.collect(str_0, distribution_fact_collector_0)

def test_case_12():
    str_0 = 'QN_G.'
    int_0 = 1694
    str_1 = 'kern.osversion'
    distribution_fact_collector_0 = module_0.DistributionFactCollector(str_1)
    distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_fact_collector_0)
    var_0 = distribution_fact_collector_1.collect()
    str_2 = None
    dict_0 = {}
    str_3 = 'f>/Ox\r.O'
    distribution_files_0 = module_0.DistributionFiles(str_3)
    var_1 = distribution_files_0.parse_distribution_file_Coreos(str_0, int_0, str_2, dict_0)

def test_case_13():
    str_0 = '_ZQ*&'
    int_0 = -1391
    distribution_files_0 = module_0.DistributionFiles(str_0)
    var_0 = distribution_files_0.parse_distribution_file_NA(str_0, str_0, str_0, int_0)

def test_case_14():
    str_0 = 'Ua64'
    distribution_files_0 = module_0.DistributionFiles(str_0)
    dict_0 = {distribution_files_0: str_0}
    bytes_0 = None
    list_0 = [str_0, distribution_files_0, distribution_files_0]
    var_0 = distribution_files_0.parse_distribution_file_Debian(distribution_files_0, dict_0, bytes_0, list_0)

def test_case_15():
    str_0 = 'QN_G.'
    int_0 = 1694
    str_1 = None
    dict_0 = {}
    str_2 = 'f>/Ox\r.O'
    list_0 = []
    bytes_0 = b'q\x8d\x80@\xc4t\xaa+}\xfe_'
    tuple_0 = ()
    distribution_files_0 = module_0.DistributionFiles(tuple_0)
    var_0 = distribution_files_0.parse_distribution_file_CentOS(str_0, list_0, bytes_0, str_1)
    distribution_files_1 = module_0.DistributionFiles(str_2)
    var_1 = distribution_files_1.parse_distribution_file_Coreos(str_0, int_0, str_1, dict_0)