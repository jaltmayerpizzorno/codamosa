# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        bool_0 = False
        var_0 = module_0.get_uname(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'bP]`#<`]'
        distribution_0 = module_0.Distribution(str_0)
        list_0 = []
        distribution_files_0 = module_0.DistributionFiles(list_0)
        float_0 = -2167.049
        tuple_0 = (float_0,)
        bool_0 = False
        distribution_files_1 = module_0.DistributionFiles(bool_0)
        var_0 = distribution_files_1.parse_distribution_file_OpenWrt(distribution_files_0, tuple_0, distribution_files_0, distribution_files_0)
        var_1 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = None
        bool_0 = None
        float_1 = -5131.6598
        bool_1 = False
        bytes_0 = b'1\xf7 \xdd\x1dr\xb1w&8\xf9'
        list_0 = [bytes_0]
        distribution_files_0 = module_0.DistributionFiles(list_0)
        var_0 = distribution_files_0.parse_distribution_file_CentOS(float_0, bool_0, float_1, bool_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b"\xf2\xf7;\taJ\x8f\xb8'q7*\xa0Il"
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '_f:Ycc'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        dict_0 = {}
        distribution_fact_collector_1 = module_0.DistributionFactCollector(dict_0)
        distribution_0 = module_0.Distribution(dict_0)
        var_0 = distribution_0.get_distribution_facts()
        str_1 = '<\n2EJ#?kFV@H'
        distribution_1 = module_0.Distribution(str_1)
        var_1 = distribution_1.get_distribution_FreeBSD()
        var_2 = distribution_fact_collector_1.collect(str_0, distribution_fact_collector_0)
        var_3 = distribution_1.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '4Kiidc\r14C<b>T_s=K!:'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        distribution_0 = module_0.Distribution(bool_0)
        var_0 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '&WRYoWu7?'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0}
        distribution_0 = module_0.Distribution(dict_0)
        var_0 = distribution_0.get_distribution_facts()
        bool_1 = False
        distribution_1 = module_0.Distribution(bool_1)
        var_1 = distribution_1.get_distribution_SMGL()
        str_0 = 'n.h.59=HYK'
        distribution_2 = module_0.Distribution(str_0)
        int_0 = 2072
        distribution_files_0 = module_0.DistributionFiles(int_0)
        var_2 = distribution_2.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'o'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        dict_0 = {}
        distribution_fact_collector_1 = module_0.DistributionFactCollector(dict_0)
        var_0 = distribution_fact_collector_1.collect(str_0, distribution_fact_collector_0)
        set_0 = set()
        distribution_0 = module_0.Distribution(set_0)
        distribution_1 = module_0.Distribution(distribution_0)
        var_1 = distribution_1.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        float_0 = 1493.063
        bytes_0 = b'\xe85kQ\x92'
        str_0 = 'l6l'
        tuple_0 = (bytes_0, dict_0, float_0, str_0)
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        set_0 = set()
        var_0 = distribution_fact_collector_0.collect(set_0)
        tuple_1 = (distribution_fact_collector_0, set_0)
        int_0 = 1434
        distribution_files_0 = module_0.DistributionFiles(int_0)
        var_1 = distribution_files_0.parse_distribution_file_Flatcar(dict_0, float_0, tuple_0, tuple_1)
        str_1 = 'mandrivalinux-release'
        bool_0 = True
        var_2 = module_0.get_uname(str_1, bool_0)
    except BaseException:
        pass