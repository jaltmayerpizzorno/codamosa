# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        str_0 = '<TUaN\\/f%F403x'
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        var_1 = module_0.find_collectors_for_platform(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'j.ETErrc'
        var_0 = module_0.build_fact_id_to_collector_map(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_fact_collector_0 = module_0.BaseFactCollector()
        bool_0 = True
        int_0 = 32601
        list_0 = [bool_0, int_0, bool_0, bool_0]
        var_0 = base_fact_collector_0.collect(list_0)
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        list_1 = [base_fact_collector_0, base_fact_collector_0, base_fact_collector_0, bool_0]
        dict_0 = {base_fact_collector_0: base_fact_collector_0, base_fact_collector_0: base_fact_collector_0, base_fact_collector_0: base_fact_collector_0, base_fact_collector_0: list_1}
        var_1 = module_0.build_fact_id_to_collector_map(dict_0)
        str_0 = 'E;IGN(SD'
        var_2 = module_0.find_unresolved_requires(str_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        cycle_found_in_fact_deps_0 = None
        var_0 = module_0.collector_classes_from_gather_subset()
        set_0 = None
        tuple_0 = (cycle_found_in_fact_deps_0, set_0, set_0)
        list_0 = [tuple_0, tuple_0, set_0, set_0]
        base_fact_collector_0 = module_0.BaseFactCollector()
        str_0 = 'CB2'
        var_1 = module_0.find_unresolved_requires(str_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\t`.$T7i;92'
        list_0 = [str_0]
        var_0 = module_0.resolve_requires(str_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        bytes_0 = b'\xce\xc0\x894\xaa\x00a\x1c'
        var_1 = module_0.build_dep_data(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Kt(vF'
        bool_0 = None
        dict_0 = {str_0: bool_0, str_0: bool_0}
        base_fact_collector_0 = module_0.BaseFactCollector(dict_0)
        list_0 = [bool_0, bool_0]
        base_fact_collector_1 = module_0.BaseFactCollector(list_0)
        var_0 = base_fact_collector_1.collect_with_namespace(base_fact_collector_0)
        var_1 = module_0.collector_classes_from_gather_subset(str_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        var_0 = module_0.get_collector_names(collector_not_found_error_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Kt(vF'
        bool_0 = None
        var_0 = module_0.collector_classes_from_gather_subset(str_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ':I&w\\Q|T'
        base_fact_collector_0 = module_0.BaseFactCollector(str_0)
        list_0 = None
        dict_0 = {}
        var_0 = module_0.get_collector_names(base_fact_collector_0, list_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        var_0 = object()
        var_1 = [var_0]
        var_2 = object()
        var_3 = [var_2]
        var_4 = object()
        var_5 = [var_4]
        var_6 = {str_0: var_1, str_1: var_3, str_2: var_5}
        str_3 = [str_0]
        var_7 = module_0.find_unresolved_requires(str_3, var_6)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = module_0.collector_classes_from_gather_subset()
        bool_0 = False
        int_0 = None
        int_1 = -3206
        set_0 = {int_1}
        base_fact_collector_0 = module_0.BaseFactCollector(int_0, set_0)
        list_0 = [set_0, base_fact_collector_0, int_1, set_0]
        dict_0 = {bool_0: base_fact_collector_0}
        var_1 = module_0.build_dep_data(dict_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'all'
        str_1 = 'hardware'
        str_2 = 'network'
        str_3 = 'virtual'
        str_4 = 'min'
        str_5 = 'disks'
        str_6 = (str_0, str_1, str_2, str_3, str_4, str_5)
        str_7 = '!network'
        str_8 = (str_7, str_5)
        str_9 = (str_4,)
        var_0 = module_0.get_collector_names(str_6, str_9, str_8)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_10 = (str_0, str_1, str_2, str_3, str_4, str_5)
        str_11 = (str_4,)
        var_1 = module_0.get_collector_names(str_10, str_11, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'facter_linux_system'
        str_1 = [str_0]
        int_0 = 1
        int_1 = 2
        int_2 = [int_0, int_1]
        int_3 = {str_0: int_2}
        var_0 = module_0.select_collector_classes(str_1, int_3)
        str_2 = [str_0]
        int_4 = 4
        int_5 = [int_4, int_4]
        var_1 = module_0.select_collector_classes(str_2, int_5)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        str_3 = [str_1, str_2]
        var_0 = set(str_3)
        str_4 = [str_2]
        var_1 = set(str_4)
        var_2 = set()
        var_3 = {str_0: var_0, str_1: var_1, str_2: var_2}
        var_4 = module_0.tsort(var_3)
        var_5 = set()
        str_5 = [str_2]
        var_6 = set(str_5)
        str_6 = [str_1, str_2]
        var_7 = set(str_6)
        str_7 = 'a'
        str_8 = 'b'
        str_9 = [str_8]
        var_8 = set(str_9)
        str_10 = [str_7]
        var_9 = set(str_10)
        var_10 = {str_7: var_8, str_8: var_9}
        var_11 = module_0.tsort(var_10)
    except BaseException:
        pass