# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        str_0 = 'n\rkNG!GQ"8\x0ckc\t;|'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x17\xfd\x7f\xb7\x1d\x17o'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_2():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        str_0 = '/<J{'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 117
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        str_0 = '7{gX.^.s$i5*?g0'
        tuple_0 = (str_0,)
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.__reversed__()
        dict_0 = {}
        str_0 = ''
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_1)
        var_1 = ansible_vault_encrypted_unicode_2.__len__()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_2 = ansible_vault_encrypted_unicode_3.isupper()
        var_3 = ansible_vault_encrypted_unicode_3.lower()
        var_4 = ansible_vault_encrypted_unicode_1.__int__()
    except BaseException:
        pass

def test_case_8():
    try:
        set_0 = set()
        float_0 = -271.6
        bytes_0 = b's\xa3G\x07\xbd\x0fh\xe0\xa7B\xef\xec\xea\xa2\xfe\xe8\xe8\x8b\xab'
        str_0 = 'rxExRqv/<\n#H8H<%70'
        str_1 = '*$?;ft!\x0c=f(g ^Cu'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.__radd__(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        str_2 = 'Provides'
        str_3 = 'c)'
        str_4 = '=*\x0ckV&eANh'
        dict_0 = {str_3: set_0, str_3: float_0, str_4: str_4, str_2: set_0}
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        set_0 = {ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0}
        list_0 = [set_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        tuple_0 = ()
        str_0 = 'allow-downgrade'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_1.count(ansible_vault_encrypted_unicode_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.expandtabs()
        tuple_0 = ()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_1.__float__()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1266
        list_0 = [int_0, int_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '5jVDqirL{k[E'
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_0 = ansible_vault_encrypted_unicode_0.index(str_0, ansible_vault_encrypted_unicode_0, ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_12():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        set_0 = {ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0, ansible_base_y_a_m_l_object_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.isspace()
        str_0 = 'allow-downgrade'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = 'Non integer values in %r'
        str_2 = '# My$\r}Q\\sa1GICe97A'
        var_1 = ansible_vault_encrypted_unicode_1.capitalize()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_2 = ansible_vault_encrypted_unicode_2.replace(ansible_vault_encrypted_unicode_2, str_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_0 = 'sy\\'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.partition(ansible_mapping_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\x0c\x0c`4!'
        int_0 = 499
        list_0 = [str_0, str_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.rindex(int_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = None
        str_0 = ';CFW(VF"T/6'
        float_0 = 0.0001
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.startswith(str_0)
        list_0 = [int_0]
        bytes_0 = b'\x12\x7f'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_1.format(*list_0)
        str_1 = '[nT?A'
        var_2 = ansible_vault_encrypted_unicode_0.rjust(str_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '$nT'
        list_0 = [str_0, str_0]
        bytes_0 = b'W}\x81\xf0\xdd\xc6\x94}NIv\xc7\x8furp\xd78\xe3\xa9'
        str_1 = "(|j:BgPQ54]:^'\x0c:lP%S"
        str_2 = '#5zczurL>Y|^'
        str_3 = ' '
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_3: list_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.startswith(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'Non integer values in %r'
        str_1 = '# My$\r}Q\\sa1GICe97A'
        str_2 = '"wO\n8<7J'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        dict_0 = {str_1: str_0}
        var_1 = ansible_vault_encrypted_unicode_0.__ge__(dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        str_0 = '/<J{'
        bool_0 = False
        dict_0 = {}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(bool_0)
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_1 = ansible_vault_encrypted_unicode_1.isnumeric()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_2 = ansible_vault_encrypted_unicode_2.__le__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_19():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(ansible_mapping_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 304
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        str_0 = '43gU]iI\teCg9E,'
        list_0 = []
        var_0 = ansible_vault_encrypted_unicode_0.replace(str_0, list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'abcabcabcabcbcabcabcabcabcabcabcabcabcababcabcabcabcabcabcabcabc'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(bytes_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'marking host %s failed, current state: %s'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.lower()
        list_0 = [var_0, ansible_vault_encrypted_unicode_0, var_0]
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        tuple_0 = ()
        var_1 = ansible_vault_encrypted_unicode_2.count(tuple_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = -2036
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.split()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_1 = ansible_vault_encrypted_unicode_0.rfind(ansible_unicode_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        ansible_mapping_0 = None
        var_2 = ansible_vault_encrypted_unicode_0.find(ansible_mapping_0)
    except BaseException:
        pass

def test_case_24():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(ansible_unicode_0)
    except BaseException:
        pass

def test_case_25():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        str_0 = 'Non integer value{ in %r'
        str_1 = '# My$\r}Q\\sa1GICe97A'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.replace(ansible_vault_encrypted_unicode_0, str_0, str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = True
        float_0 = -2950.1546
        bytes_0 = b''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(bool_0, float_0)
        int_0 = -738
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        ansible_sequence_0 = None
        var_1 = ansible_vault_encrypted_unicode_1.__getitem__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = -2036
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        var_1 = ansible_vault_encrypted_unicode_1.isalpha()
        list_0 = [ansible_vault_encrypted_unicode_1, ansible_vault_encrypted_unicode_1, var_0, var_0]
        var_2 = ansible_vault_encrypted_unicode_0.center(list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'nv5FRYr|`(_\n&'
        int_0 = -2036
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.split()
        dict_0 = {int_0: var_0, str_0: var_0}
        var_1 = ansible_vault_encrypted_unicode_0.rpartition(dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '0!:k|lk%3='
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 304
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        dict_0 = {}
        str_0 = "{'GrK `%G1M1h4pE', 'l3Tz'}"
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_1.replace(dict_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass

def test_case_31():
    try:
        bytes_0 = b't4'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.isidentifier()
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_1.isspace()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_base_y_a_m_l_object_0 = None
        var_2 = ansible_vault_encrypted_unicode_1.swapcase()
        var_3 = ansible_vault_encrypted_unicode_1.index(ansible_unicode_0, ansible_base_y_a_m_l_object_0)
        var_4 = ansible_vault_encrypted_unicode_0.__lt__(ansible_vault_encrypted_unicode_1)
        var_5 = ansible_vault_encrypted_unicode_1.__complex__()
    except BaseException:
        pass