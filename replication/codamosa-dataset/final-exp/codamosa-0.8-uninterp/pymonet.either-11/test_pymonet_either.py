# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = None
    left_0 = module_0.Left(var_0)

def test_case_2():
    object_0 = module_1.object()
    dict_0 = {}
    either_0 = module_0.Either(dict_0)
    bool_0 = either_0.__eq__(object_0)

def test_case_3():
    set_0 = set()
    bytes_0 = b'\x88%W\xb2H\xdf\xfc'
    left_0 = module_0.Left(bytes_0)
    left_1 = module_0.Left(left_0)
    bool_0 = left_1.is_left()
    either_0 = module_0.Either(set_0)
    var_0 = either_0.to_box()

def test_case_4():
    bytes_0 = b'?\xbe\x92\xea\\\xa7'
    either_0 = module_0.Either(bytes_0)
    var_0 = either_0.to_try()
    var_1 = either_0.to_lazy()
    object_0 = module_1.object()
    bool_0 = either_0.__eq__(object_0)

def test_case_5():
    str_0 = "fm`$[\nYriE^r\r'"
    either_0 = module_0.Either(str_0)
    var_0 = either_0.to_lazy()

def test_case_6():
    bytes_0 = b''
    complex_0 = None
    bytes_1 = b'\xb6U\xef\xdbj|%'
    tuple_0 = (bytes_0, complex_0, bytes_1)
    list_0 = None
    str_0 = 's-XRS~^y'
    float_0 = None
    tuple_1 = (list_0, str_0, float_0)
    bool_0 = False
    object_0 = module_1.object()
    tuple_2 = (tuple_1, bool_0, object_0)
    set_0 = {tuple_2, object_0}
    left_0 = module_0.Left(set_0)
    var_0 = left_0.ap(tuple_0)

def test_case_7():
    bool_0 = False
    list_0 = None
    var_0 = None
    right_0 = module_0.Right(var_0)
    tuple_0 = (bool_0, list_0, right_0)
    left_0 = module_0.Left(tuple_0)
    bool_1 = left_0.is_right()
    float_0 = 1585.837998
    left_1 = module_0.Left(float_0)

def test_case_8():
    float_0 = -164.1
    str_0 = "fm`$[\nYriE^r\r'"
    either_0 = module_0.Either(str_0)
    var_0 = either_0.to_lazy()
    right_0 = module_0.Right(float_0)
    var_1 = right_0.to_maybe()
    bool_0 = right_0.is_right()

def test_case_9():
    str_0 = '9NLc;'
    right_0 = module_0.Right(str_0)
    var_0 = right_0.to_validation()

def test_case_10():
    int_0 = 1
    left_0 = module_0.Left(int_0)
    left_1 = module_0.Left(int_0)
    left_2 = module_0.Left(int_0)
    int_1 = 2
    left_3 = module_0.Left(int_1)
    var_0 = left_2 == left_3
    left_4 = module_0.Left(int_0)
    right_0 = module_0.Right(int_0)
    right_1 = module_0.Right(int_0)
    right_2 = module_0.Right(int_0)
    right_3 = module_0.Right(int_1)
    var_1 = right_2 == right_3
    right_4 = module_0.Right(int_0)
    left_5 = module_0.Left(int_0)
    var_2 = right_4 == left_5
    left_6 = module_0.Left(int_0)
    left_7 = module_0.Left(int_0)
    left_8 = module_0.Left(int_0)
    left_9 = module_0.Left(int_0)