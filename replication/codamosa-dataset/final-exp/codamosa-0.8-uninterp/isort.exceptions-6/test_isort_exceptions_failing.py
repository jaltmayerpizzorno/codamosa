# Automatically generated by Pynguin.
import isort.exceptions as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = None
        str_1 = ':rJ\t"zO({oC'
        dict_0 = {str_0: str_0, str_1: str_0}
        introduced_syntax_errors_0 = module_0.IntroducedSyntaxErrors(str_0)
        i_sort_error_0 = module_0.ISortError(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '[~;>n8+aMLyZ&j'
        dict_0 = {}
        dict_1 = {str_0: dict_0}
        str_1 = '!-4'
        profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_1)
        unsupported_settings_0 = module_0.UnsupportedSettings(dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Defines a git hook to allow pre-commit warnings and errors about import order.\n\nusage:\n    exit_code = git_hook(strict=True|False, modify=True|False)\n'
        str_1 = '[\thm'
        str_2 = '\nSP'
        str_3 = '8p/7SC"5G>'
        formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_3)
        dict_0 = {str_1: str_0, str_2: str_0}
        i_sort_error_0 = module_0.ISortError(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        exception_0 = module_1.Exception()
        str_1 = 'B;boY;Y"<4\x0bu'
        introduced_syntax_errors_0 = module_0.IntroducedSyntaxErrors(str_1)
        literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_0, exception_0)
        str_2 = '\t8'
        file_skipped_0 = module_0.FileSkipped(str_0, str_2)
        str_3 = '?L5K96\\~563%'
        file_skip_setting_0 = module_0.FileSkipSetting(str_3)
        type_0 = module_1.type()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "'NRjK~+t@/3p|{6GC/X"
        unsupported_encoding_0 = module_0.UnsupportedEncoding(str_0)
        str_1 = '!=8Ee\x0bY<+0\\f v'
        type_0 = None
        invalid_settings_path_0 = module_0.InvalidSettingsPath(str_1)
        str_2 = '/21'
        invalid_settings_path_1 = module_0.InvalidSettingsPath(str_2)
        literal_sort_type_mismatch_0 = module_0.LiteralSortTypeMismatch(type_0, type_0)
        str_3 = '\x0c"A'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_3: str_3}
        str_4 = 'HO \n'
        invalid_settings_path_2 = module_0.InvalidSettingsPath(str_4)
        str_5 = 'G/vz"C'
        formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_5)
        i_sort_error_0 = module_0.ISortError(**dict_0)
    except BaseException:
        pass