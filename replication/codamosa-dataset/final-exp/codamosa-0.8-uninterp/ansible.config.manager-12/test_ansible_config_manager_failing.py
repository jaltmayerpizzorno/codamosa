# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data()
        var_1 = config_manager_0.get_config_value_and_origin(config_manager_0)
    except BaseException:
        pass

def test_case_1():
    try:
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data()
        str_0 = 'Sv6a4._Jx^\x0cVeIN\tZ'
        var_1 = module_0.get_config_type(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 5532
        config_manager_0 = module_0.ConfigManager(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ',pn!L\n'
        config_manager_0 = module_0.ConfigManager(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'~\x99\xcd\x06\xbd\xd1\tns'
        str_0 = 'OcB )fm)aJ[lD-"IA/zS'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definitions(str_0)
        tuple_0 = (bytes_0,)
        dict_0 = {bytes_0: bytes_0, tuple_0: tuple_0}
        config_manager_1 = module_0.ConfigManager()
        var_1 = config_manager_1.get_plugin_options(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'test_value'
        var_0 = dict(default=str_0, type=str_0)
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(str_0, str_0, str_0)
        list_0 = [config_manager_0, config_manager_0, var_1, var_1]
        bytes_0 = b'>\x89N'
        var_2 = config_manager_0.get_configuration_definition(list_0, bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'The field \'module_defaults\' is supposed to be a dictionary or list of dictionaries, the keys of which must be static action, module, or group names. Only the values may contain templates. For example: {\'ping\': "{{ ping_defaults }}"}'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -2427
        str_0 = '8+uf}:}5&}Ve|mtV'
        var_0 = module_0.get_ini_config_value(int_0, str_0)
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.update_config_data()
        dict_0 = {int_0: str_0}
        var_2 = config_manager_0.get_config_value(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        config_manager_0 = module_0.ConfigManager(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'test_value'
        var_0 = dict(default=str_0, type=str_0)
        var_1 = config_manager_0.initialize_plugin_configuration_definitions(str_0, str_0, str_0)
        bytes_0 = b',\x8a\xe1\xea~\xa8\xa8\xe5\xeb\x8e5\xd2\x92\x8f\x92u;'
        complex_0 = None
        var_2 = config_manager_0.get_configuration_definitions(complex_0)
        var_3 = config_manager_0.update_config_data(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = None
        config_manager_0 = module_0.ConfigManager()
        var_0 = module_0.get_ini_config_value(bool_0, config_manager_0)
        config_manager_1 = module_0.ConfigManager()
        var_1 = config_manager_1.update_config_data()
        str_0 = 'kCAB}"]l\reg%=nJm7'
        var_2 = module_0.get_config_type(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '..!kmQ*$n1ywe4}RHH4Q'
        dict_0 = {str_0: str_0, str_0: str_0}
        config_manager_0 = module_0.ConfigManager(str_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 513.86
        set_0 = {float_0, float_0, float_0}
        str_0 = 'xLZ+9uV'
        tuple_0 = (set_0, str_0)
        var_0 = module_0.ensure_type(float_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Found "rpm" but %s'
        bytes_0 = b'\\\xb9i\xeb\xd6r\xd8>\xec3\x04"'
        list_0 = [str_0, bytes_0, bytes_0, str_0]
        plugin_0 = None
        tuple_0 = (plugin_0,)
        setting_0 = module_0.Setting(*list_0)
        bytes_1 = b'\r\x18\xdf\x7f\x16\xda\xaf}Ao}J%\x17i\xcd+\xb5}\xc9'
        str_1 = 'pathlist'
        float_0 = None
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_config_value(tuple_0, setting_0, bytes_1, str_1, float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'$\xe42;\xa0]\x1b\xe9\xe6n@\x8f\x93\x14\x8b\x8d'
        float_0 = -656.0
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definition(float_0, bytes_0, bytes_0)
        config_manager_1 = module_0.ConfigManager()
        dict_0 = None
        float_1 = 1041.93
        list_0 = [dict_0, config_manager_1, bytes_0]
        var_1 = config_manager_0.get_config_value(float_1, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -2449.0
        tuple_0 = ()
        var_0 = module_0.resolve_path(tuple_0)
        list_0 = []
        bool_0 = True
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_config_value_and_origin(bool_0, list_0, float_0)
    except BaseException:
        pass

def test_case_16():
    try:
        complex_0 = None
        dict_0 = {complex_0: complex_0}
        str_0 = '$13A5}~x={`$Re[u'
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data(dict_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'plT".uNtvR-88Y1@n\tD_'
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager()
        var_0 = config_manager_1.get_configuration_definition(str_0)
        set_0 = {config_manager_1}
        list_0 = []
        var_1 = module_0.get_ini_config_value(set_0, list_0)
        str_1 = 'te"tsetHnng'
        str_2 = 'test_value'
        var_2 = dict(default=str_2, type=str_0)
        bytes_0 = b'\xafQu\xc0\xcc`'
        var_3 = config_manager_1.get_plugin_options(bytes_0, config_manager_0)
        int_0 = -370
        float_0 = -136.0
        tuple_0 = None
        var_4 = config_manager_1.initialize_plugin_configuration_definitions(int_0, float_0, tuple_0)
        var_5 = {str_1: var_2}
        int_1 = 1334
        str_3 = None
        dict_0 = {str_2: var_5, str_0: str_2, str_2: set_0, str_3: str_1}
        var_6 = config_manager_1.initialize_plugin_configuration_definitions(int_0, int_1, dict_0)
        bool_0 = False
        config_manager_2 = module_0.ConfigManager(bool_0)
    except BaseException:
        pass