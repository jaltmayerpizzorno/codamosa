# Automatically generated by Pynguin.
import ansible.cli.console as module_0

def test_case_0():
    try:
        bool_0 = False
        float_0 = -2534.652
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        bytes_0 = b'\x0e\xa1'
        console_c_l_i_1 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_1.do_cd(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '['
        int_0 = -2512
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_shell(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xb1lQ\xb1\xf8T\xcb\xde\x17'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.get_names()
        bool_0 = False
        list_0 = [console_c_l_i_0, bool_0, bool_0, var_0]
        var_1 = console_c_l_i_0.do_forks(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 2442
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        float_0 = -2039.5
        var_0 = console_c_l_i_0.do_forks(float_0)
        var_1 = console_c_l_i_0.do_become_user(console_c_l_i_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        str_0 = 'Xs\x0c2q'
        float_0 = -2534.652
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.do_diff(str_0)
        bytes_0 = b'\x8a[1\xd3\xb4\xff\x93\x83\xbfJ\x14\t\x85\x00\xa7'
        console_c_l_i_1 = module_0.ConsoleCLI(bytes_0)
        var_1 = console_c_l_i_1.do_cd(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'k\x0bXhl@Kh)Bfo&TJr3/'
        bytes_0 = b'\xdc\xba^\xa8\xcfd\rGI"C\xb3\xc2cy'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.do_cd(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        str_0 = 'bootinfo'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_list(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        bool_0 = True
        tuple_1 = (bool_0,)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_1)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        console_c_l_i_2 = module_0.ConsoleCLI(console_c_l_i_1)
        var_0 = console_c_l_i_2.do_become(tuple_0)
        bytes_0 = b'\xb1lQ\xb1\xf8T\xcb\xde\x17'
        console_c_l_i_3 = module_0.ConsoleCLI(bytes_0)
        str_0 = 'pjRH\x0b7'
        var_1 = console_c_l_i_3.do_shell(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -2799
        bytes_0 = b'\x8a/'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.do_become(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '7n'
        bool_0 = False
        bytes_0 = b'~w[X7b\\d'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.init_parser()
        console_c_l_i_1 = module_0.ConsoleCLI(bytes_0)
        var_1 = console_c_l_i_1.do_remote_user(bool_0)
        set_0 = {str_0}
        var_2 = console_c_l_i_1.module_args(set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        int_0 = 2039
        set_0 = {str_0, str_0}
        console_c_l_i_0 = module_0.ConsoleCLI(set_0)
        var_0 = console_c_l_i_0.do_remote_user(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\x0cIEx'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        set_0 = None
        str_1 = 'Cx=5fb;'
        console_c_l_i_1 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_1.do_become_user(set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\xb1lQ\xb1\xf8T\xcb\xde\x17'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.get_names()
        var_1 = console_c_l_i_0.do_timeout(console_c_l_i_0)
        var_2 = console_c_l_i_0.do_verbosity(console_c_l_i_0)
        int_0 = -582
        var_3 = console_c_l_i_0.do_verbosity(int_0)
        tuple_0 = ()
        var_4 = console_c_l_i_0.do_timeout(tuple_0)
        int_1 = 1856
        var_5 = console_c_l_i_0.do_become_user(int_1)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xb1lQ\xb1\xf8\xd4T\xcb\xde\x17'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        float_0 = 3988.5
        var_0 = console_c_l_i_0.do_check(float_0)
        str_0 = '~\x0c\x0cT\r\x0c[HW3h/s/J'
        var_1 = console_c_l_i_0.do_remote_user(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\x83l\xdf\xd0T\x17'
        list_0 = [bytes_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        list_1 = [bytes_0, bytes_0, bytes_0, bytes_0]
        var_0 = console_c_l_i_0.run()
        console_c_l_i_1 = module_0.ConsoleCLI(list_1)
        float_0 = -2670.353783
        var_1 = console_c_l_i_0.helpdefault(float_0)
        var_2 = console_c_l_i_1.get_names()
        var_3 = console_c_l_i_1.do_shell(list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'groups'
        list_0 = [str_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_list(str_0)
        bytes_0 = b'\xbbp\xa0\x8f\x85\xa8\xdc\x0f{'
        var_1 = console_c_l_i_0.module_args(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ',.{{3%G,Bq}S>jn\t%'
        float_0 = -1713.1
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        dict_0 = {console_c_l_i_0: str_0, str_0: float_0, float_0: str_0}
        var_0 = console_c_l_i_0.do_become_method(dict_0)
        var_1 = console_c_l_i_0.list_modules()
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\xb1lQ\xb1\xf8\xd4T\xcb\xde\x17'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        float_0 = 3988.5
        int_0 = None
        var_0 = console_c_l_i_0.do_become_method(int_0)
        var_1 = console_c_l_i_0.do_timeout(float_0)
        var_2 = console_c_l_i_0.get_names()
        str_0 = 'pjRH\x0b7'
        var_3 = console_c_l_i_0.do_shell(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\xb1lQ\xb1\xf8T\xcb\xde\x17'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        float_0 = 3988.5
        var_0 = console_c_l_i_0.do_timeout(float_0)
        str_0 = 'pj\x0b'
        var_1 = console_c_l_i_0.do_shell(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = False
        str_0 = "Invalid value '%s' for 'namespace': %s"
        bytes_0 = b'>\x85\xab\xe0\xd1\x9b'
        tuple_0 = ()
        int_0 = -452
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.completedefault(bool_0, str_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = 1.5
        int_0 = -1067
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_become_method(float_0)
        int_1 = 804
        var_1 = console_c_l_i_0.do_forks(int_1)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b'\x83l\xdf\xd0T\x17'
        str_0 = 'M'
        list_0 = None
        set_0 = {bytes_0}
        str_1 = '|)\x0b@o'
        str_2 = 'rkY1c&b=_H.=Q(;\x0cH&Vv'
        tuple_0 = (set_0, str_1, str_2)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        var_0 = console_c_l_i_0.do_diff(list_0)
        list_1 = [bytes_0, bytes_0, bytes_0, bytes_0]
        console_c_l_i_1 = module_0.ConsoleCLI(list_1)
        var_1 = console_c_l_i_1.do_timeout(str_0)
        list_2 = [bytes_0, bytes_0, bytes_0]
        console_c_l_i_2 = module_0.ConsoleCLI(list_2)
        var_2 = console_c_l_i_2.init_parser()
        str_3 = 'pjRH\x0b7'
        var_3 = console_c_l_i_1.do_shell(str_3)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'\xb1lQ\xb1\xf8\xd4T\xcb\xde\x17'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        str_0 = '9XQnT`~u3\\`@~'
        var_0 = console_c_l_i_0.module_args(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\x83l\xdf\xd0T\x17'
        list_0 = [bytes_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.run()
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        float_0 = -2670.353783
        var_1 = console_c_l_i_0.helpdefault(float_0)
        var_2 = console_c_l_i_1.get_names()
        set_0 = None
        var_3 = console_c_l_i_0.do_remote_user(list_0)
        str_0 = 'G|Q|pA\t@\x0b'
        str_1 = ''
        var_4 = console_c_l_i_0.do_shell(str_1)
        var_5 = console_c_l_i_1.do_timeout(str_0)
        var_6 = console_c_l_i_0.do_shell(set_0)
    except BaseException:
        pass

def test_case_24():
    try:
        bytes_0 = b'\x83l\xdf\xd0T\x17'
        str_0 = '"/c'
        float_0 = None
        list_0 = [bytes_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_check(float_0)
        var_1 = console_c_l_i_0.run()
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        var_2 = console_c_l_i_1.do_timeout(str_0)
        console_c_l_i_2 = None
        var_3 = console_c_l_i_0.do_cd(console_c_l_i_2)
        var_4 = console_c_l_i_0.helpdefault(float_0)
        bool_0 = True
        dict_0 = {var_1: str_0}
        tuple_0 = (bytes_0, bool_0, dict_0)
        var_5 = console_c_l_i_0.do_list(tuple_0)
        var_6 = console_c_l_i_1.get_names()
        var_7 = console_c_l_i_0.do_remote_user(list_0)
        str_1 = ''
        var_8 = console_c_l_i_0.do_shell(str_1)
        var_9 = console_c_l_i_0.do_shell(console_c_l_i_2)
    except BaseException:
        pass

def test_case_25():
    try:
        bytes_0 = b'\x83l\xdf\xd0T\x17'
        str_0 = '"/c'
        list_0 = [bytes_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.run()
        str_1 = 'Z2PW2XhM.'
        bool_0 = False
        var_1 = console_c_l_i_0.complete_cd(list_0, str_1, bytes_0, bool_0)
        var_2 = console_c_l_i_0.init_parser()
        var_3 = console_c_l_i_0.run()
        var_4 = console_c_l_i_0.do_timeout(str_0)
        console_c_l_i_1 = None
        var_5 = console_c_l_i_0.do_cd(console_c_l_i_1)
        str_2 = 'pjRH\x0b7'
        var_6 = console_c_l_i_0.do_shell(str_2)
        var_7 = console_c_l_i_0.get_names()
        var_8 = console_c_l_i_1.init_parser()
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = b'\x83l\xdf\xd0T\x17'
        str_0 = '"/c'
        float_0 = None
        list_0 = [bytes_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.run()
        var_1 = console_c_l_i_0.do_check(float_0)
        str_1 = 'Separate-git-dir path %s already exists.'
        bool_0 = False
        var_2 = console_c_l_i_0.complete_cd(list_0, str_1, bytes_0, bool_0)
        var_3 = console_c_l_i_0.init_parser()
        var_4 = console_c_l_i_0.run()
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        var_5 = console_c_l_i_1.do_timeout(str_0)
        console_c_l_i_2 = None
        var_6 = console_c_l_i_0.do_cd(console_c_l_i_2)
        var_7 = console_c_l_i_0.helpdefault(float_0)
        dict_0 = {}
        var_8 = console_c_l_i_1.do_exit(dict_0)
        bool_1 = False
        dict_1 = {var_4: var_5, var_7: str_0}
        tuple_0 = (bytes_0, bool_1, dict_1)
        var_9 = console_c_l_i_0.do_list(tuple_0)
        str_2 = 'pjRH\x0b7'
        var_10 = console_c_l_i_0.do_shell(str_2)
        var_11 = console_c_l_i_1.get_names()
        var_12 = console_c_l_i_1.init_parser()
        var_13 = console_c_l_i_0.do_remote_user(list_0)
        var_14 = console_c_l_i_0.do_shell(str_2)
        var_15 = console_c_l_i_0.do_verbosity(tuple_0)
        var_16 = console_c_l_i_2.do_shell(bytes_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'groups'
        list_0 = [str_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_list(str_0)
        str_1 = ''
        set_0 = {str_1, console_c_l_i_0, str_0}
        var_1 = console_c_l_i_0.do_list(set_0)
    except BaseException:
        pass