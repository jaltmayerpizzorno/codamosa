# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.metaclass as module_1

def test_case_0():
    try:
        module_x_var_0 = module_0.Module()
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        module_x_var_1 = metaclass_transformer_0.visit_Module(module_x_var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        a_s_t_0 = module_0.AST()
        metaclass_transformer_0 = module_1.MetaclassTransformer(a_s_t_0)
        metaclass_transformer_1 = module_1.MetaclassTransformer(a_s_t_0)
        module_x_var_0 = None
        a_s_t_1 = module_0.AST()
        dict_0 = {}
        list_0 = [a_s_t_1, module_x_var_0, dict_0, metaclass_transformer_1]
        str_0 = 'J(w7mFME?Ko'
        str_1 = 'ZbD)"+<\t\r9V\x0b '
        str_2 = ':AGG$|w\x0by`!DA'
        dict_1 = None
        class_def_0 = module_0.ClassDef(*list_0)
        class_def_1 = metaclass_transformer_0.visit_ClassDef(class_def_0)
        dict_2 = {str_0: module_x_var_0, str_1: str_1, str_0: metaclass_transformer_1, str_2: dict_1}
        class_def_2 = module_0.ClassDef(*list_0, **dict_2)
        class_def_3 = metaclass_transformer_1.visit_ClassDef(class_def_2)
        class_def_4 = metaclass_transformer_1.visit_ClassDef(class_def_2)
        metaclass_transformer_2 = module_1.MetaclassTransformer(a_s_t_0)
        class_def_5 = metaclass_transformer_2.visit_ClassDef(class_def_4)
        class_def_6 = metaclass_transformer_1.visit_ClassDef(class_def_5)
        module_x_var_1 = metaclass_transformer_1.visit_Module(module_x_var_0)
    except BaseException:
        pass