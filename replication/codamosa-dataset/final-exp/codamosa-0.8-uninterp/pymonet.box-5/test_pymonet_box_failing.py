# Automatically generated by Pynguin.
import pymonet.box as module_0
import builtins as module_1

def test_case_0():
    try:
        callable_0 = None
        str_0 = '\n        Transform Maybe to Either.\n\n        :returns: Right monad with previous value when Maybe is not empty, in other case Left with None\n        :rtype: Either[A | None]\n        '
        box_0 = module_0.Box(str_0)
        var_0 = box_0.map(callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        dict_1 = {}
        object_0 = module_1.object()
        bool_0 = True
        box_0 = module_0.Box(bool_0)
        bool_1 = box_0.__eq__(object_0)
        box_1 = module_0.Box(dict_1)
        var_0 = box_1.bind(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = None
        object_0 = module_1.object()
        str_0 = '-z'
        bytes_0 = b'\xc4\xc8A\xa2jR\xd62\xb8;\x85\xa0L\x8d\x93\xbc\x1c'
        dict_0 = {str_0: bytes_0, str_0: str_0, str_0: bytes_0}
        box_0 = module_0.Box(dict_0)
        bool_0 = box_0.__eq__(object_0)
        box_1 = module_0.Box(str_0)
        var_0 = box_1.ap(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1
        box_0 = module_0.Box(int_0)
        box_1 = module_0.Box(int_0)
        var_0 = box_0 == box_1
        var_1 = var_0.value
    except BaseException:
        pass