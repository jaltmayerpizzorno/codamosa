# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        bytes_0 = b'+\xc9=G\x0c\xd6\x83w\xab_\xf2,(='
        tuple_0 = ()
        bool_0 = False
        corrected_command_0 = module_0.CorrectedCommand(bytes_0, tuple_0, bool_0)
        set_0 = {bytes_0, tuple_0}
        var_0 = corrected_command_0.__eq__(set_0)
        var_1 = corrected_command_0.__hash__()
        var_2 = corrected_command_0.run(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '2fU}6\rl|tGZ>'
        set_0 = set()
        bytes_0 = b'u'
        list_0 = [bytes_0]
        str_1 = 'QrMR'
        dict_0 = {str_1: str_1, str_1: list_0}
        float_0 = -1022.7
        rule_0 = module_0.Rule(set_0, set_0, bytes_0, set_0, list_0, dict_0, float_0)
        var_0 = rule_0.get_corrected_commands(str_0)
        dict_1 = {bytes_0: bytes_0, str_1: var_0, bytes_0: str_1, var_0: set_0}
        bool_0 = False
        corrected_command_0 = module_0.CorrectedCommand(float_0, dict_1, bool_0)
        list_1 = [var_0, list_0, bytes_0]
        command_0 = module_0.Command(float_0, list_1)
        float_1 = -1681.1
        corrected_command_1 = module_0.CorrectedCommand(command_0, rule_0, float_1)
        var_1 = corrected_command_1.run(corrected_command_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = None
        dict_0 = {}
        corrected_command_0 = module_0.CorrectedCommand(bytes_0, dict_0, bytes_0)
        tuple_0 = ()
        var_0 = corrected_command_0.run(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1491
        str_0 = '`Wp\r"/]c'
        list_0 = [str_0]
        command_0 = module_0.Command(list_0, list_0)
        str_1 = '*DMy0'
        bytes_0 = b'\x0c\xbd\x1a8\xd8\x90\x85\x85\xf6\x1b\xbfB\x9a\xcb\xb9*\xe46'
        tuple_0 = ()
        set_0 = {bytes_0}
        str_2 = 'yrU+'
        dict_0 = {str_2: bytes_0, str_2: str_0}
        command_1 = module_0.Command(dict_0, str_2)
        var_0 = command_0.__eq__(command_1)
        rule_0 = module_0.Rule(bytes_0, list_0, tuple_0, set_0, str_2, tuple_0, command_0)
        var_1 = rule_0.__repr__()
        corrected_command_0 = module_0.CorrectedCommand(command_0, list_0, str_1)
        corrected_command_1 = module_0.CorrectedCommand(str_0, str_0, corrected_command_0)
        var_2 = command_0.__repr__()
        list_1 = [str_1, var_2]
        var_3 = corrected_command_1.__eq__(list_1)
        var_4 = corrected_command_1.run(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'b4`y'
        set_0 = {str_0}
        bool_0 = True
        bytes_0 = b'CV\x11'
        str_1 = '#1'
        bytes_1 = b'\xe1\xb4\xc1\xdf\xb7\x01\x97U\xeb\x06\xc5C\xcf\xdct\x1e\xee\xa4\xf8\x13'
        corrected_command_0 = module_0.CorrectedCommand(bytes_0, str_1, bytes_1)
        var_0 = corrected_command_0.__hash__()
        float_0 = -358.13687
        corrected_command_1 = module_0.CorrectedCommand(set_0, bool_0, float_0)
        bool_1 = True
        list_0 = [bool_1]
        str_2 = '{file}'
        corrected_command_2 = module_0.CorrectedCommand(bool_1, list_0, str_2)
        var_1 = corrected_command_2.__eq__(corrected_command_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'test'
        bool_0 = True
        var_0 = lambda x: bool_0
        var_1 = lambda x, y: x
        var_2 = None
        rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, var_2, bool_0, bool_0)
        str_1 = 'echo'
        command_0 = module_0.Command(str_1, var_2)
        var_3 = rule_0.get_corrected_commands(command_0)
        var_4 = next(var_3)
    except BaseException:
        pass