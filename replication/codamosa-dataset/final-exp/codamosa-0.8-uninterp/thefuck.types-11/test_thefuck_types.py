# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    command_0 = module_0.Command(bool_0, bool_0)

def test_case_2():
    set_0 = set()
    list_0 = []
    str_0 = '2i!C;"Y^YzQb '
    command_0 = module_0.Command(list_0, str_0)
    var_0 = command_0.__eq__(set_0)

def test_case_3():
    bool_0 = False
    command_0 = module_0.Command(bool_0, bool_0)
    var_0 = command_0.__repr__()

def test_case_4():
    bool_0 = False
    command_0 = module_0.Command(bool_0, bool_0)
    var_0 = command_0.update()
    var_1 = command_0.__repr__()

def test_case_5():
    str_0 = 'M+d*P:Qt;='
    command_0 = module_0.Command(str_0, str_0)
    bool_0 = True
    rule_0 = module_0.Rule(bool_0, bool_0, str_0, bool_0, bool_0, bool_0, bool_0)
    var_0 = rule_0.is_match(command_0)

def test_case_6():
    bytes_0 = b'K\x1f^\xb2\xeac?\xc2-\xac\xabv\xa8{2\xc7'
    int_0 = 904
    set_0 = {int_0}
    corrected_command_0 = module_0.CorrectedCommand(int_0, set_0, set_0)
    dict_0 = {}
    str_0 = 'jdwp'
    dict_1 = {str_0: int_0, str_0: dict_0}
    tuple_0 = (corrected_command_0, dict_0, dict_1)
    str_1 = 'xlz1;}3xlDup5%B<>z'
    list_0 = [str_1, str_0]
    list_1 = [set_0, str_1]
    rule_0 = module_0.Rule(corrected_command_0, tuple_0, list_0, corrected_command_0, dict_0, list_1, list_0)
    var_0 = rule_0.__eq__(bytes_0)

def test_case_7():
    var_0 = None
    bool_0 = True
    var_1 = lambda _: bool_0
    rule_0 = module_0.Rule(var_0, var_1, var_0, bool_0, var_0, bool_0, bool_0)
    str_0 = ''
    var_2 = rule_0.__repr__()
    command_0 = module_0.Command(str_0, var_0)
    var_3 = rule_0.is_match(command_0)
    var_4 = lambda _: command_0
    list_0 = [var_3, rule_0, str_0, rule_0]
    bool_1 = False
    rule_1 = module_0.Rule(var_0, list_0, var_4, bool_0, var_0, bool_0, bool_1)
    command_1 = module_0.Command(str_0, var_0)
    var_5 = rule_1.is_match(command_1)

def test_case_8():
    bool_0 = True
    float_0 = 434.599
    str_0 = 'js6UJNZloSy\t1@`m'
    corrected_command_0 = module_0.CorrectedCommand(bool_0, float_0, str_0)
    var_0 = corrected_command_0.__repr__()

def test_case_9():
    int_0 = -2246
    list_0 = [int_0]
    str_0 = '>=Vt'
    tuple_0 = (str_0,)
    bool_0 = True
    float_0 = 930.18713
    bytes_0 = b'U\x82\xc2U\xe1\xdfw\x9f\x168\x83@\xb5\xdfB'
    str_1 = 'u.^;SJTJ+*%nb'
    list_1 = [int_0]
    str_2 = '*ey'
    corrected_command_0 = module_0.CorrectedCommand(list_1, list_1, str_2)
    var_0 = corrected_command_0.__repr__()
    str_3 = ')0%^0w|m'
    dict_0 = {str_3: tuple_0, int_0: list_1, bool_0: str_0}
    command_0 = module_0.Command(float_0, dict_0)
    corrected_command_1 = module_0.CorrectedCommand(list_0, command_0, corrected_command_0)
    bytes_1 = b"\x89\xca\xbcm\x9a\x05\xab\xe2x\x92\xfeD'\x82\x8cq\xc3A"
    str_4 = 'Q2]DC!'
    bytes_2 = b"\x8c'\xa5e\xea\x03\xcc"
    command_1 = module_0.Command(str_4, bytes_2)
    rule_0 = module_0.Rule(bytes_0, str_1, tuple_0, str_3, bytes_1, command_1, bytes_0)
    bool_1 = True
    var_1 = rule_0.__eq__(rule_0)
    command_2 = module_0.Command(bool_1, bool_0)
    rule_1 = module_0.Rule(list_0, tuple_0, bool_0, list_0, float_0, rule_0, command_2)
    var_2 = rule_1.__repr__()

def test_case_10():
    var_0 = None
    bool_0 = True
    rule_0 = module_0.Rule(var_0, bool_0, bool_0, bool_0, bool_0, bool_0, bool_0)
    str_0 = ''
    command_0 = module_0.Command(str_0, var_0)
    var_1 = rule_0.is_match(command_0)
    bool_1 = False
    rule_1 = module_0.Rule(var_0, bool_1, str_0, bool_0, var_0, bool_0, bool_1)
    var_2 = rule_1.is_match(command_0)

def test_case_11():
    var_0 = None
    str_0 = ''
    command_0 = module_0.Command(str_0, var_0)
    bool_0 = False
    rule_0 = module_0.Rule(var_0, bool_0, str_0, bool_0, var_0, bool_0, bool_0)
    var_1 = rule_0.is_match(command_0)