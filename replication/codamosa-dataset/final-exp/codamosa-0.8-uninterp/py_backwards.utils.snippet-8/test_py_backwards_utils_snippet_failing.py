# Automatically generated by Pynguin.
import py_backwards.utils.snippet as module_0
import typed_ast.ast3 as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    try:
        attribute_0 = None
        dict_0 = {}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'x = let(y); let(z)'
        var_0 = module_1.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
        var_1 = list(iterable_0)
        keyword_0 = module_2.keyword()
        dict_0 = {str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
        list_0 = [dict_0, str_0]
        name_0 = module_2.Name(*list_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_2():
    try:
        a_s_t_0 = module_2.AST()
        iterable_0 = module_0.find_variables(a_s_t_0)
        module_0.let(a_s_t_0)
        str_0 = 'g"'
        dict_0 = {str_0: a_s_t_0, str_0: str_0, str_0: str_0}
        module_0.extend_tree(a_s_t_0, dict_0)
        arg_0 = None
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        arg_1 = variables_replacer_0.visit_arg(arg_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 't9[\rj'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        attribute_0 = module_2.Attribute(**dict_0)
        str_1 = 'copyreg'
        str_2 = None
        dict_1 = {str_1: str_1, str_1: str_1, str_2: str_2}
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        list_0 = [attribute_0]
        import_from_0 = module_2.ImportFrom(*list_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_4():
    try:
        import_from_0 = module_2.ImportFrom()
        str_0 = 'HE:>5Lb'
        str_1 = 'i'
        dict_0 = {str_0: str_0, str_1: str_1, str_1: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_5():
    try:
        alias_0 = None
        str_0 = ';fYN2\n1l\x0bc)A\tQ0W]\x0b'
        str_1 = 'Use transformer "{}"'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'x = let(y); let(z)'
        var_0 = module_1.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
        var_1 = list(iterable_0)
        a_s_t_0 = module_2.AST()
        list_0 = [a_s_t_0, a_s_t_0]
        list_1 = [a_s_t_0, a_s_t_0, a_s_t_0, a_s_t_0]
        str_1 = 'Tix'
        dict_0 = {str_0: str_0, str_0: list_0, str_0: list_1, str_1: a_s_t_0}
        list_2 = []
        snippet_0 = module_0.snippet(list_2)
        list_3 = snippet_0.get_body(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        arg_0 = module_2.arg()
        function_def_0 = module_2.FunctionDef()
        str_0 = 'n=\nsz$vt8L5'
        a_s_t_0 = None
        dict_0 = {str_0: a_s_t_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
        a_s_t_1 = module_2.AST()
        str_1 = None
        str_2 = '{LL*ug'
        dict_1 = {str_1: str_1, str_1: str_1, str_2: str_1, str_1: str_1}
        module_0.extend(arg_0)
        module_0.extend(function_def_0)
        variables_replacer_1 = module_0.VariablesReplacer(dict_1)
        arg_1 = variables_replacer_1.visit_arg(arg_0)
        dict_2 = {}
        name_0 = module_2.Name(**dict_2)
        variables_replacer_2 = module_0.VariablesReplacer(dict_1)
        name_1 = variables_replacer_2.visit_Name(name_0)
    except BaseException:
        pass

def test_case_8():
    try:
        keyword_0 = module_2.keyword()
        str_0 = 'Compiling "{}"'
        except_handler_0 = None
        str_1 = None
        str_2 = '[6JBfS\nD\x0cL'
        dict_0 = {str_0: str_0, str_1: str_1, str_2: str_2, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    except BaseException:
        pass

def test_case_9():
    try:
        a_s_t_0 = module_2.AST()
        iterable_0 = module_0.find_variables(a_s_t_0)
        str_0 = 'g"'
        dict_0 = {str_0: a_s_t_0, str_0: str_0, str_0: str_0}
        module_0.extend_tree(a_s_t_0, dict_0)
        dict_1 = {}
        variables_replacer_0 = module_0.VariablesReplacer(dict_1)
        variables_replacer_1 = module_0.VariablesReplacer(dict_1)
        module_0.let(str_0)
        list_0 = [str_0]
        module_0.extend_tree(a_s_t_0, dict_1)
        import_from_0 = module_2.ImportFrom(*list_0)
        dict_2 = {}
        str_1 = 'X.UtK45=I}*#l|v'
        attribute_0 = module_2.Attribute()
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        variables_replacer_2 = module_0.VariablesReplacer(dict_2)
        attribute_2 = variables_replacer_2.visit_Attribute(attribute_1)
        variables_replacer_3 = module_0.VariablesReplacer(dict_2)
        str_2 = '1)vSZ]q\n] c;YZo '
        dict_3 = {str_1: dict_2, str_0: variables_replacer_3, str_1: variables_replacer_3, str_2: str_1}
        alias_0 = module_2.alias(*list_0, **dict_3)
        alias_1 = variables_replacer_1.visit_alias(alias_0)
        import_from_1 = variables_replacer_3.visit_ImportFrom(import_from_0)
        dict_4 = {}
        variables_replacer_4 = module_0.VariablesReplacer(dict_4)
        arg_0 = module_2.arg(*list_0)
        attribute_3 = variables_replacer_1.visit_Attribute(attribute_2)
        variables_replacer_5 = module_0.VariablesReplacer(dict_4)
        name_0 = module_2.Name()
        name_1 = variables_replacer_5.visit_Name(name_0)
        arg_1 = None
        arg_2 = variables_replacer_2.visit_arg(arg_1)
    except BaseException:
        pass