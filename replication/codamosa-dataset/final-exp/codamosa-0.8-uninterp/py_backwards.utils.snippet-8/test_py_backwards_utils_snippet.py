# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_2():
    str_0 = 'x = let(y); let(z)'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    a_s_t_0 = module_0.AST()
    str_1 = '\x0bk'
    list_0 = [str_1, str_0, var_0, iterable_0]
    class_def_0 = module_0.ClassDef(*list_0)
    str_2 = 'O0/EpT/W%6)K=<'
    str_3 = ''
    dict_0 = {str_1: a_s_t_0, str_2: str_2, str_3: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    class_def_2 = variables_replacer_0.visit_ClassDef(class_def_1)
    dict_1 = {str_1: str_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    class_def_3 = variables_replacer_1.visit_ClassDef(class_def_2)
    str_4 = 'up'
    dict_2 = {str_1: str_0, str_4: str_4}
    module_1.extend_tree(a_s_t_0, dict_2)
    var_1 = list(str_3)

def test_case_3():
    str_0 = 'x = let(y); let(z)'
    dict_0 = {str_0: str_0, str_0: str_0}
    except_handler_0 = module_0.ExceptHandler(**dict_0)
    str_1 = 'CUE/\r13'
    str_2 = None
    dict_1 = {str_1: str_0, str_2: str_2}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    var_1 = list(iterable_0)

def test_case_4():
    str_0 = 'let(x)\nx += 1\ny = 1\nle(z)\n'
    a_s_t_0 = module_0.AST()
    str_1 = 'o'
    name_0 = module_0.Name()
    str_2 = 'B]5!yR\x0brDt:%pv !u.F`'
    dict_0 = {str_1: str_0, str_1: a_s_t_0, str_0: a_s_t_0, str_2: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    name_1 = variables_replacer_0.visit_Name(name_0)
    dict_1 = {str_1: str_1}
    module_1.extend_tree(a_s_t_0, dict_1)
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    module_1.let(iterable_0)
    var_1 = set(iterable_0)
    var_2 = set(str_0)

def test_case_5():
    function_def_0 = module_0.FunctionDef()
    str_0 = 'sQpFk90{JwAD\x0bvU'
    str_1 = 'SimpleDialog'
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    function_def_1 = None
    dict_0 = {str_1: function_def_1, str_1: function_def_1}
    a_s_t_1 = module_0.AST(**dict_0)
    str_2 = None
    dict_1 = {str_0: a_s_t_1, str_2: a_s_t_1, str_1: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    function_def_2 = variables_replacer_0.visit_FunctionDef(function_def_0)

def test_case_6():
    dict_0 = {}
    module_1.extend(dict_0)
    keyword_0 = module_0.keyword(**dict_0)
    dict_1 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    keyword_1 = variables_replacer_0.visit_keyword(keyword_0)

def test_case_7():
    dict_0 = {}
    class_def_0 = module_0.ClassDef(**dict_0)
    str_0 = 'v_Dru"'
    dict_1 = {str_0: str_0, str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    dict_2 = None
    list_0 = [class_def_1, dict_2, dict_2]
    str_1 = 'H\\b+S/'
    dict_3 = {str_1: str_1}
    attribute_0 = module_0.Attribute(*list_0, **dict_3)
    dict_4 = {}
    variables_replacer_1 = module_1.VariablesReplacer(dict_4)
    attribute_1 = variables_replacer_1.visit_Attribute(attribute_0)

def test_case_8():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    module_1.let(a_s_t_0)
    str_0 = 'g"'
    dict_0 = {str_0: a_s_t_0, str_0: str_0, str_0: str_0}
    module_1.extend_tree(a_s_t_0, dict_0)
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    except_handler_0 = module_0.ExceptHandler()
    except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)

def test_case_9():
    str_0 = 'extdnd(mod)'
    var_0 = module_2.parse(str_0)
    module_1.extend_tree(var_0, str_0)

def test_case_10():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    snippet_0 = module_1.snippet(iterable_0)

def test_case_11():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    module_1.let(a_s_t_0)

def test_case_12():
    dict_0 = {}
    module_1.extend(dict_0)

def test_case_13():
    str_0 = 'k2U4.@v6,)5}<BFky8'
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    dict_1 = {}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    module_1.let(str_0)
    list_0 = [str_0]
    import_from_0 = module_0.ImportFrom(*list_0)
    dict_2 = {}
    attribute_0 = module_0.Attribute()
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    attribute_2 = variables_replacer_0.visit_Attribute(attribute_1)
    attribute_3 = variables_replacer_0.visit_Attribute(attribute_2)
    attribute_4 = variables_replacer_1.visit_Attribute(attribute_3)
    variables_replacer_2 = module_1.VariablesReplacer(dict_1)
    attribute_5 = variables_replacer_2.visit_Attribute(attribute_4)
    variables_replacer_3 = module_1.VariablesReplacer(dict_2)
    import_from_1 = variables_replacer_3.visit_ImportFrom(import_from_0)

def test_case_14():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    str_0 = 'g"'
    dict_0 = {str_0: a_s_t_0, str_0: str_0, str_0: str_0}
    module_1.extend_tree(a_s_t_0, dict_0)
    dict_1 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    module_1.let(str_0)
    list_0 = [str_0]
    module_1.extend_tree(a_s_t_0, dict_1)
    import_from_0 = module_0.ImportFrom(*list_0)
    dict_2 = {}
    attribute_0 = module_0.Attribute()
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    attribute_2 = variables_replacer_2.visit_Attribute(attribute_1)
    variables_replacer_3 = module_1.VariablesReplacer(dict_2)
    import_from_1 = variables_replacer_3.visit_ImportFrom(import_from_0)
    dict_3 = {}
    variables_replacer_4 = module_1.VariablesReplacer(dict_3)
    arg_0 = module_0.arg(*list_0)
    variables_replacer_5 = module_1.VariablesReplacer(dict_0)
    arg_1 = variables_replacer_5.visit_arg(arg_0)
    arg_2 = variables_replacer_1.visit_arg(arg_0)
    import_from_2 = variables_replacer_5.visit_ImportFrom(import_from_1)

def test_case_15():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    str_0 = 'g"'
    dict_0 = {str_0: a_s_t_0, str_0: str_0, str_0: str_0}
    module_1.extend_tree(a_s_t_0, dict_0)
    dict_1 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    dict_2 = {str_0: a_s_t_0}
    dict_3 = {str_0: a_s_t_0, str_0: dict_1, str_0: a_s_t_0}
    class_def_0 = module_0.ClassDef(**dict_3)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)
    module_1.let(str_0)
    list_0 = [str_0]
    module_1.extend_tree(a_s_t_0, dict_2)
    import_from_0 = module_0.ImportFrom(*list_0)
    dict_4 = {}
    attribute_0 = module_0.Attribute()
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    iterable_1 = module_1.find_variables(a_s_t_0)
    attribute_2 = variables_replacer_2.visit_Attribute(attribute_1)
    variables_replacer_3 = module_1.VariablesReplacer(dict_4)
    import_from_1 = variables_replacer_3.visit_ImportFrom(import_from_0)
    variables_replacer_4 = module_1.VariablesReplacer(dict_2)
    module_1.extend(str_0)
    arg_0 = module_0.arg(*list_0)
    variables_replacer_5 = module_1.VariablesReplacer(dict_0)
    name_0 = module_0.Name(*list_0)
    variables_replacer_6 = module_1.VariablesReplacer(dict_4)
    name_1 = variables_replacer_6.visit_Name(name_0)
    arg_1 = variables_replacer_5.visit_arg(arg_0)
    arg_2 = variables_replacer_4.visit_arg(arg_0)
    import_from_2 = variables_replacer_2.visit_ImportFrom(import_from_1)

def test_case_16():
    str_0 = 'a = 1\nb = 2'
    var_0 = module_2.parse(str_0)
    var_1 = var_0.body
    str_1 = 'extend(mod)'
    var_2 = module_2.parse(str_1)
    str_2 = 'mod'
    var_3 = {str_2: var_1}
    module_1.extend_tree(var_2, var_3)
    var_4 = module_2.dump(var_2)

def test_case_17():
    str_0 = '\nlet(x)\nlet(y)\nlet(z)\nz = 1\n'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)

def test_case_18():
    str_0 = 'let(x)\nx += 1\ny = 1\nle(z)\n'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)