# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1
import os as module_2

def test_case_0():
    try:
        int_0 = 1524
        str_0 = "j9,\tWWh\tQt~!RpX,%'"
        leaf_0 = module_0.Leaf(int_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 4835
        int_1 = 42
        str_0 = 'wwVB'
        str_1 = ')d^'
        int_2 = False
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_1, tuple_0)
        list_0 = [tuple_0, tuple_1]
        leaf_0 = module_0.Leaf(int_1, str_0, tuple_1, list_0)
        leaf_1 = leaf_0.clone()
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(leaf_1)
        str_2 = ':$0WZU\n?[p!2p]'
        list_1 = [str_2, str_2, int_0]
        leaf_2 = module_0.Leaf(int_0, str_2, list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'w,`,]\\I=l&$2gPe!{\x0b'
        int_0 = 24
        grammar_0 = module_1.Grammar()
        dict_0 = {}
        tuple_0 = (int_0, str_0, int_0, dict_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_4():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Px\r}J\tMpG'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bytes_0 = b'<\x11\x92\xaa7V\x88F\xe6V#\xd4LEg\xd3\x01\xbe'
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        bool_0 = negated_pattern_0.match(bytes_0)
        bool_1 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'uRKHLqJ0&\\*Vs`|>zn9\x0c'
        str_1 = 'labels'
        str_2 = '.lo$ZB,&\r$YB*$'
        dict_0 = {}
        dict_1 = {str_0: str_0, str_1: str_1, str_2: dict_0}
        base_0 = module_0.Base(**dict_1)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 180
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -2535
        str_0 = '\x0bnMOSfXD>T5k/'
        none_type_0 = None
        optional_0 = None
        tuple_0 = (int_0, str_0, none_type_0, optional_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -2790
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 2385
        int_1 = 216
        str_0 = ']09!t0Zk$'
        leaf_0 = module_0.Leaf(int_1, str_0)
        list_0 = [leaf_0, leaf_0, leaf_0]
        list_1 = []
        node_0 = module_0.Node(int_0, list_0, str_0, list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'p2'
        node_pattern_0 = module_0.NodePattern(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -683
        str_0 = 'Qa\\6{jPKd,\n9JFE'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'O6oF\n'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        dict_0 = {wildcard_pattern_0: wildcard_pattern_0, str_0: wildcard_pattern_0}
        negated_pattern_0 = module_0.NegatedPattern(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 4283
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 2287
        list_0 = []
        leaf_pattern_0 = module_0.LeafPattern()
        tuple_0 = (leaf_pattern_0,)
        node_0 = module_0.Node(int_0, list_0, tuple_0)
        node_0.insert_child(int_0, node_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 2982
        list_0 = []
        str_0 = 'S\n'
        node_0 = module_0.Node(int_0, list_0, str_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        str_1 = node_2.__str__()
        str_2 = '}B\x0c;)\x0b%5X$4!q(eH>'
        node_pattern_0 = module_0.NodePattern(str_2)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'P}J\tD_M'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match_seq(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 257
        var_0 = []
        node_0 = module_0.Node(int_0, var_0)
        var_1 = repr(node_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 2287
        str_0 = '?'
        int_1 = -569
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_1)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -7146
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 598
        list_0 = []
        str_0 = '1X.QZ`a$+Xw6?pr'
        list_1 = []
        node_0 = module_0.Node(int_0, list_0, str_0, list_1)
        node_1 = node_0.clone()
        node_1.update_sibling_maps()
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'barZTna3e'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        any_1 = wildcard_pattern_0.optimize()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        int_0 = -2866
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'a6:3'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 2839
        int_1 = 17
        leaf_0 = module_0.Leaf(int_1, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        leaf_3 = leaf_2.clone()
        list_0 = [leaf_3]
        node_0 = module_0.Node(int_0, list_0, int_0, str_0)
        int_2 = -2266
        wildcard_pattern_1 = module_0.WildcardPattern(int_2)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = -111
        int_1 = 37
        str_0 = 'unknown encoding: '
        str_1 = 'bad input'
        int_2 = -786
        int_3 = 330
        tuple_0 = (int_2, int_3)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_1, str_0, tuple_1)
        leaf_1 = leaf_0.clone()
        int_4 = 980
        list_0 = []
        node_0 = module_0.Node(int_4, list_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_2.insert_child(int_0, leaf_1)
        str_2 = 'ur'
        leaf_pattern_0 = module_0.LeafPattern(str_2)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'Ky\tDkM'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        float_0 = None
        bool_0 = wildcard_pattern_0.match(float_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'TFMr-T'
        int_0 = 120
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        bool_0 = wildcard_pattern_0.match_seq(leaf_pattern_0)
    except BaseException:
        pass

def test_case_28():
    try:
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = 'Px\rGJ\tMpG'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 2021
        node_pattern_0 = module_0.NodePattern(int_0)
    except BaseException:
        pass

def test_case_29():
    try:
        int_0 = 140
        str_0 = ')g-l u7i* '
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        str_1 = leaf_0.get_suffix()
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        iterator_0 = leaf_1.pre_order()
        wildcard_pattern_0 = module_0.WildcardPattern(str_1)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '(";"7fvlHX'
        negated_pattern_0 = module_0.NegatedPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        iterator_0 = wildcard_pattern_0.generate_matches(str_0)
        int_0 = 817
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 2280
        float_0 = 178.0
        set_0 = {int_0, float_0}
        node_pattern_0 = module_0.NodePattern(int_0, set_0)
    except BaseException:
        pass

def test_case_32():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = 360
        optional_0 = None
        optional_1 = None
        list_0 = []
        tuple_0 = (int_0, optional_0, optional_1, list_0)
        var_0 = module_0.convert(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = '~rE'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        int_0 = 135
        str_1 = "h]]a'd(DNA*M$PRD z"
        int_1 = None
        int_2 = 1053
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_1, tuple_0)
        str_2 = ')/!(H;A/* I&)'
        tuple_2 = (int_0, str_0, tuple_1, str_2)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = '[ceM{ggmV'
        int_0 = 120
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        str_1 = ':8O)k'
        leaf_0 = module_0.Leaf(int_0, str_1)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        str_2 = leaf_2.__str__()
        any_0 = wildcard_pattern_0.optimize()
        bool_0 = wildcard_pattern_0.match_seq(str_0, str_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 2239
        list_0 = []
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = 'm'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        leaf_0 = None
        var_0 = leaf_pattern_0.match(leaf_0)
        int_1 = 1504
        any_0 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_1, list_0, any_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = module_0.Node(int_1, list_0, str_0, node_2)
        var_1 = leaf_pattern_0.match(node_3, int_1)
        node_1.set_child(int_0, node_2)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 2304
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = '\r}\t.G'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        grammar_0 = module_1.Grammar()
        var_0 = leaf_pattern_0.match(node_1, wildcard_pattern_0)
        node_1.append_child(node_0)
        node_0.append_child(node_1)
        var_1 = grammar_0.copy()
        list_1 = [any_0, any_0]
        bool_0 = wildcard_pattern_0.match_seq(list_1)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 2309
        leaf_pattern_0 = module_0.LeafPattern()
        str_0 = '\r}\t.G'
        int_1 = 51
        str_1 = ')g-l uri* '
        leaf_0 = module_0.Leaf(int_1, str_1)
        var_0 = leaf_pattern_0.match(leaf_0)
        leaf_1 = leaf_0.clone()
        var_1 = leaf_pattern_0.match(leaf_1, int_1)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        grammar_0 = module_1.Grammar()
        node_1.append_child(node_0)
        var_2 = grammar_0.copy()
        str_2 = leaf_1.__repr__()
        int_2 = node_1.depth()
        node_1.update_sibling_maps()
        node_1.set_child(int_2, leaf_1)
        path_like_0 = module_2.PathLike()
    except BaseException:
        pass

def test_case_38():
    try:
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        negated_pattern_0 = module_0.NegatedPattern()
        iterator_0 = negated_pattern_0.generate_matches(var_0)
        int_0 = 54
        wildcard_pattern_0 = module_0.WildcardPattern(iterator_0, int_0, int_0)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 24
        str_0 = '{8$j\twF!L8V-2'
        leaf_pattern_0 = module_0.LeafPattern(int_0)
        int_1 = 67
        none_type_0 = None
        leaf_0 = module_0.Leaf(int_1, str_0, none_type_0)
        var_0 = leaf_pattern_0.match(leaf_0)
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        list_0 = [str_0, int_0, leaf_0]
        base_0 = module_0.Base(*list_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'Y{(al'
        int_0 = 24
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
        var_0 = leaf_pattern_0.match(leaf_0)
        iterator_0 = leaf_0.post_order()
        list_0 = []
        str_1 = "S^1l,_g.7'1u\\\x0caLtM"
        list_1 = [str_1, int_0]
        node_0 = module_0.Node(int_0, list_0, list_1, str_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'TFMr-T'
        int_0 = 120
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = 571
        list_0 = []
        node_0 = module_0.Node(int_1, list_0)
        list_1 = [node_0]
        node_1 = module_0.Node(int_1, list_1, str_0, str_0)
        iterator_0 = node_1.post_order()
        leaf_pattern_0 = None
        wildcard_pattern_1 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_1.match_seq(leaf_pattern_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '\n{_al'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        any_1 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern()
        int_0 = 24
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        str_1 = '[1-9]\\d*(?:_\\d+)*[lL]?'
        int_1 = 893
        tuple_0 = (int_0, int_1)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_1)
        leaf_1 = leaf_0.clone()
        leaf_2 = leaf_1.clone()
        var_0 = leaf_pattern_0.match(leaf_2)
        bool_0 = wildcard_pattern_0.match(int_0)
    except BaseException:
        pass

def test_case_43():
    try:
        int_0 = 258
        var_0 = []
        node_0 = module_0.Node(int_0, var_0)
        iterator_0 = node_0.pre_order()
        var_1 = list(iterator_0)
        var_2 = len(var_0)
        int_1 = 2
        str_0 = ''
        leaf_0 = module_0.Leaf(int_1, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = module_0.Leaf(int_1, str_0)
        str_1 = 'e'
        leaf_3 = module_0.Leaf(int_1, str_1)
        node_1 = node_0.clone()
        var_3 = len(node_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = '\n{_al'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 24
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        int_1 = 2126
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
        leaf_1 = leaf_0.clone()
        var_0 = leaf_pattern_0.match(leaf_1, leaf_1)
        str_1 = leaf_1.__repr__()
        bool_0 = wildcard_pattern_0.match(int_0)
    except BaseException:
        pass