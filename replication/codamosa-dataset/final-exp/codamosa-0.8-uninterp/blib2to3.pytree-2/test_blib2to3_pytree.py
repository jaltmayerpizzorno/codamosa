# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 4226
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)

def test_case_2():
    str_0 = 'PL.m\tDV_CU'
    int_0 = 47
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_3():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_4():
    str_0 = 'P}J\tD_M'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_5():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_6():
    int_0 = 3621
    list_0 = []
    str_0 = '9D\tB\\)&!-7\tV{.<d'
    node_0 = module_0.Node(int_0, list_0, str_0)
    node_1 = node_0.clone()

def test_case_7():
    str_0 = '6^-K{c4"w8#'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    list_0 = []
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: any_0, str_0: list_0, str_0: list_0, str_0: str_0, str_0: str_0, str_0: wildcard_pattern_0}
    bool_0 = wildcard_pattern_0.match_seq(list_0, dict_0)
    int_0 = 2066
    list_1 = []
    node_0 = module_0.Node(int_0, list_1, str_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    node_3 = node_2.clone()
    list_2 = [node_3]
    node_4 = module_0.Node(int_0, list_2)
    node_5 = node_4.clone()

def test_case_8():
    str_0 = 'barZTna3e'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_9():
    str_0 = 'Y'
    int_0 = 620
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0, str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_10():
    str_0 = '+qR6z?qml'
    int_0 = 187
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)

def test_case_11():
    int_0 = 2287
    list_0 = []
    leaf_pattern_0 = module_0.LeafPattern()
    tuple_0 = (leaf_pattern_0,)
    node_0 = module_0.Node(int_0, list_0, tuple_0)
    leaf_pattern_1 = module_0.LeafPattern()
    var_0 = leaf_pattern_1.match(node_0)

def test_case_12():
    list_0 = None
    str_0 = "M\x0bI'24k\x0bEzV"
    dict_0 = {list_0: list_0, list_0: list_0, str_0: list_0}
    list_1 = [dict_0, str_0, str_0, list_0]
    list_2 = [dict_0, str_0, str_0]
    negated_pattern_0 = module_0.NegatedPattern()
    bool_0 = negated_pattern_0.match_seq(list_1, list_2)

def test_case_13():
    str_0 = 'D'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_14():
    str_0 = '(";&7fvj,HX'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    list_0 = []
    dict_0 = {str_0: str_0, str_0: list_0, str_0: list_0, str_0: str_0}
    bool_0 = wildcard_pattern_0.match_seq(list_0, dict_0)

def test_case_15():
    str_0 = 'Px\r}J\tMpG'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    str_1 = ''
    bool_0 = wildcard_pattern_0.match_seq(str_1)

def test_case_16():
    str_0 = 'PL.m\tDV_CU'
    int_0 = 47
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()
    leaf_1 = leaf_0.clone()

def test_case_17():
    leaf_pattern_0 = module_0.LeafPattern()
    int_0 = 51
    str_0 = ')g-l uri* '
    leaf_0 = module_0.Leaf(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_18():
    grammar_0 = module_1.Grammar()
    int_0 = 2605
    optional_0 = None
    str_0 = '9w[^m2D\t[Ht,'
    list_0 = [str_0]
    tuple_0 = (int_0, optional_0, str_0, list_0)
    var_0 = module_0.convert(grammar_0, tuple_0)

def test_case_19():
    int_0 = 2306
    leaf_pattern_0 = module_0.LeafPattern()
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    grammar_0 = module_1.Grammar()
    node_1.append_child(node_0)
    int_1 = node_1.depth()
    node_1.update_sibling_maps()

def test_case_20():
    leaf_pattern_0 = module_0.LeafPattern()
    int_0 = 51
    str_0 = ')g-l uri* '
    leaf_0 = module_0.Leaf(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)
    var_1 = leaf_pattern_0.match(leaf_0, int_0)
    iterator_0 = leaf_0.post_order()

def test_case_21():
    int_0 = 66
    str_0 = ')g-l uri* '
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    str_1 = leaf_0.get_suffix()
    iterator_0 = leaf_1.post_order()
    grammar_0 = module_1.Grammar()

def test_case_22():
    int_0 = 2982
    list_0 = []
    str_0 = 'S\n'
    node_0 = module_0.Node(int_0, list_0, str_0)
    int_1 = node_0.depth()

def test_case_23():
    int_0 = 258
    var_0 = []
    node_0 = module_0.Node(int_0, var_0)
    iterator_0 = node_0.post_order()
    var_1 = list(iterator_0)
    var_2 = len(var_1)
    int_1 = 2
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_1, str_0)
    int_2 = 259
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    str_2 = 'c'
    leaf_2 = module_0.Leaf(int_1, str_2)
    str_3 = 'd'
    leaf_3 = module_0.Leaf(int_1, str_3)
    leaf_4 = [leaf_1, leaf_2, leaf_3]
    node_1 = module_0.Node(int_2, leaf_4)
    str_4 = 'e'
    leaf_5 = module_0.Leaf(int_1, str_4)
    var_3 = [leaf_0, node_1, leaf_5]
    node_2 = module_0.Node(int_0, var_3)
    iterator_1 = node_2.post_order()
    var_4 = list(iterator_1)
    var_5 = len(var_4)

def test_case_24():
    str_0 = 'F)YS'
    dict_0 = {str_0: str_0, str_0: str_0}
    wildcard_pattern_0 = module_0.WildcardPattern(dict_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_25():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 2
    str_1 = 'b'
    leaf_1 = module_0.Leaf(int_1, str_1)
    int_2 = 3
    str_2 = 'c'
    leaf_2 = module_0.Leaf(int_2, str_2)
    int_3 = 4
    str_3 = 'd'
    leaf_3 = module_0.Leaf(int_3, str_3)
    iterator_0 = leaf_0.pre_order()
    var_0 = list(iterator_0)