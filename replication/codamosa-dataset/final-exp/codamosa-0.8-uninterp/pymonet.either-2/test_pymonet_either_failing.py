# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        int_0 = 1975
        set_0 = {int_0}
        callable_0 = None
        list_0 = [int_0, int_0]
        either_0 = module_0.Either(list_0)
        var_0 = either_0.case(set_0, callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        left_0 = module_0.Left(var_0)
        str_0 = 'B)}qA,=].D8fEi'
        either_0 = module_0.Either(var_0)
        var_1 = either_0.ap(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        left_0 = module_0.Left(bool_0)
        either_0 = module_0.Either(left_0)
        var_0 = either_0.to_box()
        str_0 = None
        str_1 = None
        float_0 = -3910.788
        either_1 = module_0.Either(float_0)
        var_1 = either_1.to_box()
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
        object_0 = module_1.object(**dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x11BW\\\x19\xe9'
        left_0 = module_0.Left(bytes_0)
        right_0 = module_0.Right(left_0)
        bool_0 = right_0.is_right()
        str_0 = 'e)+3jB.|3i|\x0cR'
        left_1 = module_0.Left(str_0)
        bool_1 = left_1.is_left()
        var_0 = left_1.to_maybe()
        int_0 = None
        bytes_1 = b'\x18'
        right_1 = module_0.Right(bytes_1)
        var_1 = right_1.map(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = None
        float_0 = 1251.4
        right_0 = module_0.Right(float_0)
        var_0 = right_0.map(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '#\x0cv[*4f'
        str_1 = '4vc_j\x0c6\t5KbUM9n`'
        right_0 = module_0.Right(str_1)
        var_0 = right_0.bind(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        right_0 = module_0.Right(bool_0)
        bool_1 = right_0.is_left()
        callable_0 = None
        var_0 = right_0.map(callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 5
        left_0 = module_0.Left(int_0)
        right_0 = module_0.Right(int_0)
        var_0 = lambda x: x
        int_1 = 3
        var_1 = lambda x: x + int_1
        var_2 = left_0.case(var_0, var_1)
        var_3 = lambda x: x
        var_4 = lambda x: x + int_1
        var_5 = right_0.case(var_3, var_4)
    except BaseException:
        pass