# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    float_0 = 1251.4
    right_0 = module_0.Right(float_0)

def test_case_2():
    object_0 = module_1.object()
    bool_0 = False
    either_0 = module_0.Either(bool_0)
    bool_1 = either_0.__eq__(object_0)

def test_case_3():
    int_0 = -1085
    dict_0 = {int_0: int_0}
    either_0 = module_0.Either(dict_0)
    var_0 = either_0.to_try()

def test_case_4():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    str_0 = '\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        '
    either_0 = module_0.Either(str_0)
    either_1 = module_0.Either(either_0)
    bool_0 = either_1.__eq__(object_0)
    dict_1 = {}
    list_0 = [dict_1, dict_1]
    right_0 = module_0.Right(list_0)
    either_2 = module_0.Either(right_0)
    var_0 = either_2.to_lazy()
    float_0 = -4730.71681
    left_0 = module_0.Left(float_0)
    left_1 = module_0.Left(left_0)
    bool_1 = left_1.is_left()
    either_3 = module_0.Either(either_2)
    var_1 = left_1.ap(dict_1)

def test_case_5():
    var_0 = None
    right_0 = module_0.Right(var_0)
    list_0 = [right_0, var_0, var_0]
    int_0 = 1998
    left_0 = module_0.Left(int_0)
    var_1 = left_0.map(list_0)

def test_case_6():
    var_0 = None
    left_0 = module_0.Left(var_0)
    int_0 = -2096
    left_1 = module_0.Left(int_0)
    var_1 = left_1.bind(left_0)
    str_0 = 'G'
    right_0 = module_0.Right(str_0)
    bool_0 = right_0.is_right()

def test_case_7():
    list_0 = []
    tuple_0 = None
    str_0 = 'iZ6o\\hgD-nF(K\x0cqsWr#'
    object_0 = module_1.object()
    left_0 = module_0.Left(object_0)
    var_0 = left_0.ap(str_0)
    tuple_1 = (tuple_0,)
    left_1 = module_0.Left(tuple_1)
    var_1 = left_1.bind(list_0)

def test_case_8():
    str_0 = '#MY`u'
    int_0 = 2817
    right_0 = module_0.Right(int_0)
    left_0 = module_0.Left(right_0)
    bool_0 = left_0.is_right()
    either_0 = module_0.Either(str_0)

def test_case_9():
    list_0 = []
    right_0 = module_0.Right(list_0)
    bool_0 = True
    left_0 = module_0.Left(bool_0)
    var_0 = left_0.to_maybe()
    bool_1 = right_0.is_right()
    var_1 = right_0.to_validation()

def test_case_10():
    tuple_0 = None
    left_0 = module_0.Left(tuple_0)
    int_0 = True
    either_0 = module_0.Either(int_0)
    var_0 = either_0.to_lazy()
    bool_0 = False
    str_0 = '\n        Transform Lazy into Box with constructor_fn result.\n\n        :returns: Box monad with constructor_fn result\n        :rtype: Box[A]\n        '
    dict_0 = {str_0: bool_0}
    var_1 = left_0.bind(left_0)
    var_2 = left_0.ap(dict_0)
    right_0 = module_0.Right(dict_0)
    var_3 = right_0.to_maybe()
    var_4 = left_0.to_maybe()
    var_5 = left_0.to_validation()
    var_6 = either_0.to_lazy()
    object_0 = None
    bool_1 = either_0.__eq__(object_0)
    var_7 = left_0.to_validation()
    var_8 = left_0.ap(left_0)

def test_case_11():
    var_0 = None
    either_0 = module_0.Either(var_0)
    tuple_0 = (either_0,)
    right_0 = module_0.Right(tuple_0)
    bool_0 = right_0.is_right()

def test_case_12():
    dict_0 = {}
    object_0 = module_1.object(**dict_0)
    str_0 = '\n        It takes as a parameter function returning another Validation.\n        Function is called with Validation value and returns new Validation with previous value\n        and concated new and old errors.\n\n        :param monad: monad contains function\n        :type monad: Function(A) -> Validation[Any, List[E]]\n        :returns: new validation with stored errors\n        :rtype: Validation[A, List[E]]\n        '
    either_0 = module_0.Either(str_0)
    either_1 = module_0.Either(either_0)
    bool_0 = either_1.__eq__(object_0)
    dict_1 = {}
    list_0 = [dict_1, dict_1]
    right_0 = module_0.Right(list_0)
    either_2 = module_0.Either(right_0)
    var_0 = either_2.to_lazy()
    float_0 = -4730.71681
    left_0 = module_0.Left(float_0)
    left_1 = module_0.Left(left_0)
    bool_1 = left_1.is_left()
    either_3 = module_0.Either(either_2)
    var_1 = right_0.to_maybe()

def test_case_13():
    int_0 = 2
    either_0 = module_0.Either(int_0)
    either_1 = module_0.Either(int_0)
    bool_0 = either_0.__eq__(either_1)
    either_2 = module_0.Either(int_0)
    right_0 = module_0.Right(int_0)
    either_3 = module_0.Either(int_0)
    tuple_0 = None
    right_1 = module_0.Right(tuple_0)

def test_case_14():
    int_0 = 2
    either_0 = module_0.Either(int_0)
    either_1 = module_0.Either(int_0)
    bool_0 = either_0.__eq__(either_1)
    either_2 = module_0.Either(int_0)
    right_0 = module_0.Right(int_0)
    bool_1 = either_2.__eq__(right_0)
    either_3 = module_0.Either(int_0)
    int_1 = 3
    right_1 = module_0.Right(int_1)
    bool_2 = either_3.__eq__(right_1)