# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        callable_0 = None
        int_0 = -1971
        immutable_list_0 = module_0.ImmutableList()
        str_0 = immutable_list_0.__str__()
        immutable_list_1 = module_0.ImmutableList(int_0)
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        str_0 = '\n    Last is a Monoid that will always return the lastest, value when 2 Last instances are combined.\n    '
        dict_0 = {}
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(dict_0, bool_0)
        var_0 = immutable_list_0.append(str_0)
        int_0 = -1971
        bool_1 = False
        immutable_list_1 = module_0.ImmutableList(bool_1)
        immutable_list_2 = module_0.ImmutableList(int_0)
        optional_0 = immutable_list_2.find(callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        optional_0 = None
        immutable_list_0 = module_0.ImmutableList(optional_0)
        int_0 = 620
        str_0 = 'y$zEPL7v1S'
        dict_0 = {str_0: immutable_list_0}
        tuple_0 = (immutable_list_0, int_0, dict_0)
        immutable_list_1 = module_0.ImmutableList()
        var_0 = immutable_list_1.append(tuple_0)
        immutable_list_2 = module_0.ImmutableList(var_0)
        str_1 = immutable_list_2.__str__()
        var_1 = None
        str_2 = 'qtqNf]=rF(D=uX.C+'
        set_0 = {str_2}
        immutable_list_3 = module_0.ImmutableList(set_0)
        var_2 = None
        var_3 = immutable_list_3.unshift(var_2)
        var_4 = immutable_list_3.__add__(var_1)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_0 = immutable_list_0.__len__()
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        immutable_list_0 = module_0.ImmutableList()
        immutable_list_1 = module_0.ImmutableList()
        immutable_list_2 = module_0.ImmutableList()
        immutable_list_3 = module_0.ImmutableList()
        int_0 = 2
        immutable_list_4 = module_0.ImmutableList(int_0, immutable_list_2)
        immutable_list_5 = module_0.ImmutableList(int_0)
        var_0 = immutable_list_4.__len__()
        immutable_list_6 = module_0.ImmutableList()
        immutable_list_7 = module_0.ImmutableList(int_0, immutable_list_6)
        callable_0 = None
        optional_0 = immutable_list_5.find(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.__len__()
        callable_0 = None
        bool_0 = True
        str_0 = immutable_list_0.__str__()
        immutable_list_1 = module_0.ImmutableList(str_0, bool_0)
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 3
        immutable_list_0 = module_0.ImmutableList(int_0)
        immutable_list_1 = module_0.ImmutableList(int_0, immutable_list_0)
        callable_0 = None
        var_0 = immutable_list_1.to_list()
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        dict_0 = {str_0: str_0}
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.map(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '4Z'
        str_1 = 's*K!SchGuX$;K=1'
        set_0 = {str_0, str_0}
        bytes_0 = b''
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(set_0, bytes_0, bool_0)
        var_0 = immutable_list_0.filter(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_10():
    try:
        callable_0 = None
        int_0 = -1971
        immutable_list_0 = module_0.ImmutableList(int_0)
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n        Transform Either into Validation.\n\n        :returns: successfull Validation monad with previous value\n        :rtype: Validation[A, []]\n        '
        callable_0 = None
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(str_0, bool_0)
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_12():
    try:
        immutable_list_0 = module_0.ImmutableList()
        immutable_list_1 = module_0.ImmutableList(immutable_list_0)
        callable_0 = None
        var_0 = None
        var_1 = immutable_list_1.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_13():
    try:
        immutable_list_0 = module_0.ImmutableList()
        int_0 = 3
        bytes_0 = b"2\x80\xcb\xb2\xe5\x93Az_'\x03\xb9\xa1\xb4\xae\xf1"
        var_0 = None
        var_1 = immutable_list_0.reduce(int_0, var_0)
        var_2 = immutable_list_0.reduce(bytes_0, var_1)
        immutable_list_1 = module_0.ImmutableList(int_0)
        immutable_list_2 = module_0.ImmutableList(int_0, immutable_list_1)
        set_0 = set()
        optional_0 = immutable_list_1.find(set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        object_0 = module_1.object()
        bool_1 = True
        var_0 = immutable_list_0.__len__()
        immutable_list_1 = module_0.ImmutableList(bool_1)
        var_1 = None
        var_2 = immutable_list_1.append(var_1)
        var_3 = immutable_list_1.unshift(var_1)
        immutable_list_2 = module_0.ImmutableList()
        var_4 = immutable_list_0.__len__()
        bool_2 = immutable_list_1.__eq__(object_0)
        immutable_list_3 = module_0.ImmutableList()
        bool_3 = True
        immutable_list_4 = module_0.ImmutableList(var_3, bool_3)
        var_5 = immutable_list_3.append(var_1)
        callable_0 = None
        var_6 = None
        var_7 = immutable_list_4.reduce(callable_0, var_6)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        bool_1 = True
        var_0 = immutable_list_0.__len__()
        immutable_list_1 = module_0.ImmutableList(bool_1)
        var_1 = None
        var_2 = immutable_list_1.append(var_1)
        var_3 = immutable_list_0.unshift(var_1)
        bool_2 = False
        immutable_list_2 = module_0.ImmutableList(var_3, bool_2)
        var_4 = immutable_list_1.__len__()
        immutable_list_3 = module_0.ImmutableList()
        immutable_list_4 = module_0.ImmutableList()
        callable_0 = None
        optional_0 = immutable_list_3.find(callable_0)
        var_5 = immutable_list_0.unshift(var_1)
        var_6 = immutable_list_0.unshift(var_1)
        immutable_list_5 = module_0.ImmutableList(var_1, var_2, bool_2)
        callable_1 = None
        var_7 = immutable_list_2.map(callable_1)
    except BaseException:
        pass

def test_case_16():
    try:
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0 != immutable_list_0
        int_0 = 3
        immutable_list_1 = module_0.ImmutableList(int_0)
        immutable_list_2 = module_0.ImmutableList(int_0, immutable_list_1)
        immutable_list_3 = module_0.ImmutableList(int_0)
        immutable_list_4 = module_0.ImmutableList(int_0, immutable_list_2)
        callable_0 = None
        optional_0 = immutable_list_3.find(callable_0)
    except BaseException:
        pass