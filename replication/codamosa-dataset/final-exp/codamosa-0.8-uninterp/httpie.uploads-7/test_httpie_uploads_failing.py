# Automatically generated by Pynguin.
import typing as module_0
import requests_toolbelt.multipart.encoder as module_1
import httpie.uploads as module_2
import requests.models as module_3
import httpie.cli.dicts as module_4

def test_case_0():
    try:
        list_0 = []
        int_0 = -1138
        i_o_0 = module_0.IO()
        var_0 = i_o_0.readline(int_0)
        multipart_encoder_0 = module_1.MultipartEncoder(list_0, var_0)
        str_0 = '@x7{5w)&Y:lrlWp: \x0cb]'
        var_1 = module_2.prepare_request_body(multipart_encoder_0, str_0)
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = False
        var_2 = module_2.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = None
        str_0 = 'Rb6\\?\tgGcE=I'
        dict_0 = {str_0: str_0, str_0: set_0}
        request_data_dict_0 = module_4.RequestDataDict(**dict_0)
        multipart_encoder_0 = module_1.MultipartEncoder(request_data_dict_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_1 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        chunked_multipart_upload_stream_2 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        chunked_multipart_upload_stream_3 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_0 = module_2.prepare_request_body(request_data_dict_0, iterable_0)
        chunked_multipart_upload_stream_4 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = False
        var_1 = module_2.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        i_o_0 = module_0.IO()
        str_0 = None
        var_0 = module_2.prepare_request_body(i_o_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = True
        var_0 = module_2.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        multipart_encoder_0 = module_1.MultipartEncoder(list_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        str_0 = 'J0^BJ"Z]G]O[(Ajee'
        bytes_0 = b'\x07;\x11\x82\x8c\xf1\x1a4\xdd\xd4\xf6z\xee\xda\xb9V\x10'
        var_0 = module_2.prepare_request_body(str_0, bytes_0, bytes_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        multipart_encoder_1 = module_1.MultipartEncoder(chunked_multipart_upload_stream_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ']^n&P#ZI/^w%rK^'
        str_1 = '#af005f'
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(str_0, str_1)
        multipart_encoder_0 = module_1.MultipartEncoder(chunked_upload_stream_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        multipart_encoder_0 = module_1.MultipartEncoder(list_0)
        str_0 = 'Lw1I?c8oDF\\~'
        str_1 = "F|I'C"
        dict_0 = {str_0: multipart_encoder_0, str_1: str_1, str_0: multipart_encoder_0, str_0: str_0}
        multipart_request_data_dict_0 = module_4.MultipartRequestDataDict(**dict_0)
        tuple_0 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        bool_0 = True
        none_type_0 = None
        var_0 = module_2.prepare_request_body(multipart_encoder_0, bool_0, none_type_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        prepared_request_0 = module_3.PreparedRequest()
        callable_0 = None
        var_1 = module_2.prepare_request_body(str_1, callable_0)
        var_2 = multipart_encoder_0.read(multipart_encoder_0)
    except BaseException:
        pass

def test_case_7():
    try:
        multipart_request_data_dict_0 = module_4.MultipartRequestDataDict()
        bytes_0 = b'4 \x1a\xa3.@\xbbH\x07\xe1\xbfp\x06\xd5'
        int_0 = 150
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(bytes_0, int_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        request_data_dict_0 = module_4.RequestDataDict()
        callable_0 = None
        str_0 = 'l/H%<UjB'
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        iterable_1 = None
        callable_1 = None
        multipart_encoder_1 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_1)
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        chunked_upload_stream_1 = module_2.ChunkedUploadStream(iterable_1, callable_1)
        chunked_multipart_upload_stream_1 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        tuple_0 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0)
        chunked_upload_stream_2 = module_2.ChunkedUploadStream(iterable_1, callable_1)
        chunked_upload_stream_3 = module_2.ChunkedUploadStream(iterable_1, callable_1)
        var_0 = module_2.prepare_request_body(request_data_dict_0, callable_0)
        str_1 = None
        iterable_3 = chunked_upload_stream_0.__iter__()
        iterable_4 = chunked_multipart_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_2 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_1 = module_2.prepare_request_body(multipart_encoder_0, callable_0, int_0, str_1)
        iterable_5 = chunked_multipart_upload_stream_1.__iter__()
        dict_0 = {iterable_4: multipart_encoder_1, iterable_2: multipart_request_data_dict_0, var_1: iterable_0, iterable_1: multipart_encoder_0}
        var_2 = module_2.prepare_request_body(multipart_encoder_1, callable_0, int_0, dict_0)
        var_3 = module_2.prepare_request_body(request_data_dict_0, callable_0)
        str_2 = '<'
        prepared_request_0 = module_3.PreparedRequest()
        tuple_1 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_2)
        var_4 = multipart_encoder_0.read()
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        multipart_encoder_0 = module_1.MultipartEncoder(list_0)
        str_0 = 'Lw1I?c8oDF\\~'
        str_1 = "F|I'C"
        str_2 = 'QISH9Ex /?'
        str_3 = "JqR'Av$U}n\\"
        dict_0 = {str_0: multipart_encoder_0, str_1: str_1, str_2: multipart_encoder_0, str_3: str_0}
        multipart_request_data_dict_0 = module_4.MultipartRequestDataDict(**dict_0)
        tuple_0 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        var_0 = multipart_encoder_0.to_string()
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        str_4 = 'J0^BJ"Z]G]O[(Ajee'
        bytes_0 = b'\x07;\x11\x82\x8c\xf1\x1a4\xdd\xd4\xf6z\xee\xda\xb9V\x10'
        var_1 = module_2.prepare_request_body(str_4, bytes_0, bytes_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        iterable_2 = chunked_multipart_upload_stream_0.__iter__()
        i_o_0 = module_0.IO()
        var_2 = i_o_0.__enter__()
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(var_2, var_2)
        iterable_3 = chunked_upload_stream_0.__iter__()
        multipart_encoder_1 = module_1.MultipartEncoder(chunked_multipart_upload_stream_0)
        chunked_multipart_upload_stream_1 = module_2.ChunkedMultipartUploadStream(multipart_encoder_1)
        tuple_1 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1, str_0)
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = False
        var_3 = module_2.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        callable_0 = None
        list_0 = []
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(list_0, callable_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        iterable_1 = None
        iterable_2 = chunked_upload_stream_0.__iter__()
        chunked_upload_stream_1 = module_2.ChunkedUploadStream(iterable_1, callable_0)
        multipart_encoder_0 = module_1.MultipartEncoder(iterable_0, chunked_upload_stream_1)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = False
        var_0 = module_2.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        multipart_request_data_dict_0 = module_4.MultipartRequestDataDict()
        bytes_0 = b'4 \x1a\xa3.@\xbbH\x07\xe1\xbfp\x06\xd5'
        int_0 = 150
        chunked_upload_stream_0 = module_2.ChunkedUploadStream(bytes_0, int_0)
        iterable_0 = chunked_upload_stream_0.__iter__()
        request_data_dict_0 = module_4.RequestDataDict()
        callable_0 = None
        str_0 = '\x0bYUH#t(.?}ua}'
        multipart_encoder_0 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        var_0 = module_2.prepare_request_body(str_0, callable_0, int_0, bytes_0, iterable_0)
        multipart_encoder_1 = module_1.MultipartEncoder(multipart_request_data_dict_0)
        multipart_request_data_dict_1 = module_4.MultipartRequestDataDict()
        tuple_0 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_1, str_0, str_0)
        chunked_multipart_upload_stream_0 = module_2.ChunkedMultipartUploadStream(multipart_encoder_1)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_1 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_1 = module_2.prepare_request_body(request_data_dict_0, callable_0)
        str_1 = None
        iterable_2 = chunked_upload_stream_0.__iter__()
        iterable_3 = chunked_multipart_upload_stream_0.__iter__()
        chunked_multipart_upload_stream_2 = module_2.ChunkedMultipartUploadStream(multipart_encoder_0)
        prepared_request_0 = module_3.PreparedRequest()
        var_2 = module_2.prepare_request_body(multipart_encoder_0, callable_0, int_0, prepared_request_0, chunked_upload_stream_0)
        tuple_1 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        var_3 = module_2.prepare_request_body(multipart_encoder_0, callable_0, int_0, str_1)
        var_4 = module_2.prepare_request_body(multipart_encoder_0, callable_0)
        prepared_request_1 = module_3.PreparedRequest()
        bool_0 = False
        tuple_2 = module_2.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1)
        var_5 = module_2.compress_request(prepared_request_1, bool_0)
    except BaseException:
        pass