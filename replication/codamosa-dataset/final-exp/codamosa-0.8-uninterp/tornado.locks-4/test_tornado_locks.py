# Automatically generated by Pynguin.
import tornado.locks as module_0
import tornado.ioloop as module_1

def test_case_0():
    pass

def test_case_1():
    semaphore_0 = module_0.Semaphore()
    semaphore_0.release()

def test_case_2():
    event_0 = module_0.Event()

def test_case_3():
    event_0 = module_0.Event()
    bool_0 = event_0.is_set()

def test_case_4():
    event_0 = module_0.Event()
    event_0.set()

def test_case_5():
    float_0 = -17.247229
    releasing_context_manager_0 = module_0._ReleasingContextManager(float_0)

def test_case_6():
    bounded_semaphore_0 = module_0.BoundedSemaphore()
    releasing_context_manager_0 = module_0._ReleasingContextManager(bounded_semaphore_0)
    releasing_context_manager_0.__enter__()

def test_case_7():
    lock_0 = module_0.Lock()
    str_0 = lock_0.__repr__()

def test_case_8():
    i_o_loop_0 = module_1.IOLoop()
    semaphore_0 = module_0.Semaphore()
    awaitable_0 = semaphore_0.acquire(i_o_loop_0)

def test_case_9():
    i_o_loop_0 = module_1.IOLoop()
    condition_0 = module_0.Condition()
    awaitable_0 = condition_0.wait()
    str_0 = condition_0.__repr__()
    semaphore_0 = module_0.Semaphore()
    semaphore_0.release()
    event_0 = module_0.Event()
    awaitable_1 = event_0.wait()
    event_0.set()
    awaitable_2 = condition_0.wait()
    event_1 = module_0.Event()
    awaitable_3 = event_1.wait()
    float_0 = 1.5
    awaitable_4 = condition_0.wait(float_0)
    condition_1 = module_0.Condition()
    str_1 = condition_0.__repr__()
    condition_2 = module_0.Condition()
    condition_2.notify()

def test_case_10():
    i_o_loop_0 = module_1.IOLoop()
    condition_0 = module_0.Condition()
    str_0 = condition_0.__repr__()
    lock_0 = module_0.Lock()
    condition_0.notify_all()
    event_0 = module_0.Event()
    bool_0 = event_0.is_set()
    semaphore_0 = module_0.Semaphore()
    semaphore_0.release()
    str_1 = lock_0.__repr__()
    str_2 = lock_0.__repr__()
    event_1 = module_0.Event()
    event_1.set()
    float_0 = -494.52
    awaitable_0 = condition_0.wait()
    awaitable_1 = event_0.wait(float_0)
    awaitable_2 = condition_0.wait()
    condition_1 = module_0.Condition()
    awaitable_3 = lock_0.acquire()
    condition_0.notify()
    condition_2 = module_0.Condition()
    awaitable_4 = lock_0.acquire()
    condition_2.notify()
    lock_0.release()

def test_case_11():
    i_o_loop_0 = module_1.IOLoop()
    condition_0 = module_0.Condition()
    str_0 = condition_0.__repr__()
    releasing_context_manager_0 = module_0._ReleasingContextManager(str_0)
    lock_0 = module_0.Lock()
    int_0 = 633
    semaphore_0 = module_0.Semaphore(int_0)
    semaphore_0.release()
    str_1 = lock_0.__repr__()
    awaitable_0 = condition_0.wait()
    condition_1 = module_0.Condition()
    awaitable_1 = lock_0.acquire()
    int_1 = -4724
    condition_0.notify(int_1)
    lock_0.__aenter__()
    lock_1 = module_0.Lock()
    lock_0.release()

def test_case_12():
    i_o_loop_0 = module_1.IOLoop()
    lock_0 = module_0.Lock()
    int_0 = 633
    semaphore_0 = module_0.Semaphore()
    semaphore_0.release()
    str_0 = lock_0.__repr__()
    str_1 = lock_0.__repr__()
    str_2 = lock_0.__repr__()
    event_0 = module_0.Event()
    event_1 = module_0.Event()
    event_1.set()
    float_0 = -494.5
    awaitable_0 = event_1.wait()
    i_o_loop_1 = i_o_loop_0.instance()
    condition_0 = module_0.Condition()
    awaitable_1 = lock_0.acquire(float_0)
    condition_0.notify(int_0)
    condition_1 = module_0.Condition()
    awaitable_2 = lock_0.acquire(float_0)
    condition_1.notify()
    lock_0.release()

def test_case_13():
    i_o_loop_0 = module_1.IOLoop()
    lock_0 = module_0.Lock()
    semaphore_0 = module_0.Semaphore()
    semaphore_1 = module_0.Semaphore()
    semaphore_1.release()
    str_0 = lock_0.__repr__()
    semaphore_2 = module_0.Semaphore()
    event_0 = module_0.Event()
    event_0.set()
    awaitable_0 = event_0.wait()
    event_1 = module_0.Event()
    awaitable_1 = event_1.wait()
    condition_0 = module_0.Condition()
    awaitable_2 = lock_0.acquire()
    awaitable_3 = lock_0.acquire()
    lock_0.release()

def test_case_14():
    i_o_loop_0 = module_1.IOLoop()
    condition_0 = module_0.Condition()
    str_0 = condition_0.__repr__()
    lock_0 = module_0.Lock()
    condition_0.notify_all()
    event_0 = module_0.Event()
    bool_0 = event_0.is_set()
    semaphore_0 = module_0.Semaphore()
    semaphore_0.release()
    str_1 = lock_0.__repr__()
    str_2 = lock_0.__repr__()
    event_1 = module_0.Event()
    event_1.set()
    float_0 = -494.52
    awaitable_0 = condition_0.wait()
    awaitable_1 = event_0.wait(float_0)
    awaitable_2 = condition_0.wait()
    condition_1 = module_0.Condition()
    awaitable_3 = lock_0.acquire()
    condition_0.notify()
    i_o_loop_0.start()
    awaitable_4 = lock_0.acquire(float_0)
    int_0 = 2882
    condition_1.notify(int_0)
    lock_0.release()

def test_case_15():
    i_o_loop_0 = module_1.IOLoop()
    condition_0 = module_0.Condition()
    str_0 = condition_0.__repr__()
    lock_0 = module_0.Lock()
    semaphore_0 = module_0.Semaphore()
    str_1 = lock_0.__repr__()
    semaphore_1 = module_0.Semaphore()
    event_0 = module_0.Event()
    float_0 = 40.0
    awaitable_0 = event_0.wait(float_0)
    event_0.set()
    event_0.set()
    semaphore_1.release()
    awaitable_1 = event_0.wait()
    awaitable_2 = condition_0.wait(float_0)
    event_1 = module_0.Event()
    event_2 = module_0.Event()
    awaitable_3 = event_0.wait()
    releasing_context_manager_0 = module_0._ReleasingContextManager(awaitable_0)
    releasing_context_manager_0.__enter__()
    awaitable_4 = lock_0.acquire()
    awaitable_5 = lock_0.acquire()
    condition_1 = module_0.Condition()
    event_3 = module_0.Event()
    str_2 = event_2.__repr__()
    float_1 = 514.4225
    awaitable_6 = lock_0.acquire(float_1)
    awaitable_7 = semaphore_1.acquire()
    awaitable_8 = semaphore_0.acquire()
    int_0 = -161
    i_o_loop_0.start()
    condition_0.notify(int_0)
    float_2 = 1097.0
    awaitable_9 = lock_0.acquire(float_2)
    lock_0.release()
    lock_1 = module_0.Lock()
    lock_1.release()