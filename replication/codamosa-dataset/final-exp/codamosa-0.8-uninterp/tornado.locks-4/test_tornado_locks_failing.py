# Automatically generated by Pynguin.
import tornado.locks as module_0
import builtins as module_1
import tornado.ioloop as module_2
import concurrent.futures._base as module_3
import datetime as module_4

def test_case_0():
    try:
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_1():
    try:
        event_0 = module_0.Event()
        str_0 = event_0.__repr__()
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_2():
    try:
        event_0 = module_0.Event()
        event_0.clear()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_3():
    try:
        event_0 = module_0.Event()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        base_exception_0 = module_1.BaseException()
        lock_0 = module_0.Lock()
        float_0 = 60.0
        releasing_context_manager_0 = module_0._ReleasingContextManager(float_0)
        releasing_context_manager_0.__exit__(list_0, base_exception_0, lock_0)
    except BaseException:
        pass

def test_case_5():
    try:
        semaphore_0 = module_0.Semaphore()
        str_0 = semaphore_0.__repr__()
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        awaitable_0 = condition_0.wait()
        semaphore_0.__enter__()
    except BaseException:
        pass

def test_case_6():
    try:
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        bounded_semaphore_0.release()
    except BaseException:
        pass

def test_case_7():
    try:
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_8():
    try:
        lock_0 = module_0.Lock()
        str_0 = lock_0.__repr__()
        semaphore_0 = module_0.Semaphore()
        lock_1 = module_0.Lock()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_9():
    try:
        lock_0 = module_0.Lock()
        type_0 = None
        none_type_0 = None
        lock_0.__exit__(type_0, lock_0, none_type_0)
    except BaseException:
        pass

def test_case_10():
    try:
        event_0 = module_0.Event()
        event_0.set()
        event_0.set()
        event_1 = module_0.Event()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -979
        semaphore_0 = module_0.Semaphore(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        event_0 = module_0.Event()
        bool_0 = event_0.is_set()
        str_0 = event_0.__repr__()
        lock_0 = module_0.Lock()
        awaitable_0 = lock_0.acquire()
    except BaseException:
        pass

def test_case_13():
    try:
        semaphore_0 = module_0.Semaphore()
        event_0 = module_0.Event()
        event_0.set()
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        str_0 = semaphore_0.__repr__()
        event_1 = module_0.Event()
        event_0.set()
        event_1.clear()
        str_1 = event_0.__repr__()
        semaphore_1 = module_0.Semaphore()
        semaphore_2 = module_0.Semaphore()
        list_0 = [str_1, event_0, semaphore_2, semaphore_2]
        base_exception_0 = None
        dict_0 = {}
        semaphore_0.__exit__(list_0, base_exception_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        event_0 = module_0.Event()
        awaitable_0 = event_0.wait()
        condition_1 = module_0.Condition()
        condition_1.notify()
        bool_0 = event_0.is_set()
        executor_0 = module_3.Executor()
        dict_0 = None
        i_o_loop_0.add_callback_from_signal(executor_0, **dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        lock_0 = module_0.Lock()
        int_0 = 633
        semaphore_0 = module_0.Semaphore(int_0)
        semaphore_1 = module_0.Semaphore()
        semaphore_0.release()
        str_1 = lock_0.__repr__()
        str_2 = lock_0.__repr__()
        event_0 = module_0.Event()
        event_0.set()
        awaitable_0 = condition_0.wait()
        awaitable_1 = event_0.wait()
        timedelta_0 = module_4.timedelta()
        condition_1 = module_0.Condition()
        awaitable_2 = condition_1.wait(timedelta_0)
        condition_2 = module_0.Condition()
        awaitable_3 = lock_0.acquire(timedelta_0)
        int_1 = None
        condition_2.notify(int_1)
        lock_0.__aenter__()
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        lock_2.release()
    except BaseException:
        pass

def test_case_16():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        int_0 = 633
        semaphore_0 = module_0.Semaphore(int_0)
        semaphore_0.release()
        i_o_loop_0.stop()
        event_0 = module_0.Event()
        event_0.set()
        awaitable_0 = event_0.wait()
        condition_1 = module_0.Condition()
        condition_1.notify()
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_17():
    try:
        lock_0 = module_0.Lock()
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        i_o_loop_0 = module_2.IOLoop()
        semaphore_0 = module_0.Semaphore()
        awaitable_0 = semaphore_0.acquire()
        semaphore_1 = module_0.Semaphore()
        awaitable_1 = semaphore_0.acquire()
        event_0 = module_0.Event()
        lock_0.release()
    except BaseException:
        pass

def test_case_18():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        lock_0 = module_0.Lock()
        str_0 = lock_0.__repr__()
        event_0 = module_0.Event()
        event_0.set()
        awaitable_0 = event_0.wait()
        var_0 = None
        awaitable_1 = condition_0.wait(var_0)
        condition_1 = module_0.Condition()
        awaitable_2 = lock_0.acquire()
        condition_0.notify()
        lock_0.__aenter__()
        bool_0 = event_0.is_set()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_19():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        lock_0 = module_0.Lock()
        int_0 = 633
        semaphore_0 = module_0.Semaphore(int_0)
        semaphore_0.release()
        str_1 = lock_0.__repr__()
        event_0 = module_0.Event()
        awaitable_0 = condition_0.wait()
        event_0.set()
        timedelta_0 = module_4.timedelta()
        event_1 = module_0.Event()
        awaitable_1 = event_1.wait(timedelta_0)
        condition_1 = module_0.Condition()
        condition_1.notify()
        lock_0.__aenter__()
        lock_1 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_20():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        lock_0 = module_0.Lock()
        int_0 = 633
        semaphore_0 = module_0.Semaphore()
        semaphore_1 = module_0.Semaphore(int_0)
        semaphore_1.release()
        str_1 = lock_0.__repr__()
        event_0 = module_0.Event()
        event_0.set()
        awaitable_0 = event_0.wait()
        timedelta_0 = module_4.timedelta()
        awaitable_1 = condition_0.wait(timedelta_0)
        awaitable_2 = event_0.wait(timedelta_0)
        awaitable_3 = condition_0.wait()
        condition_1 = module_0.Condition()
        awaitable_4 = lock_0.acquire(timedelta_0)
        int_1 = 1259
        condition_0.notify(int_1)
        lock_1 = module_0.Lock()
        lock_2 = module_0.Lock()
        lock_1.release()
    except BaseException:
        pass

def test_case_21():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        releasing_context_manager_0 = module_0._ReleasingContextManager(str_0)
        lock_0 = module_0.Lock()
        int_0 = 633
        awaitable_0 = lock_0.acquire()
        semaphore_0 = module_0.Semaphore(int_0)
        semaphore_0.release()
        str_1 = lock_0.__repr__()
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        bounded_semaphore_0.release()
    except BaseException:
        pass

def test_case_22():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        str_0 = condition_0.__repr__()
        releasing_context_manager_0 = module_0._ReleasingContextManager(str_0)
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_0.release()
        str_1 = lock_0.__repr__()
        lock_1 = module_0.Lock()
        str_2 = lock_1.__repr__()
        event_0 = module_0.Event()
        event_1 = module_0.Event()
        event_1.set()
        awaitable_0 = condition_0.wait()
        selectable_0 = None
        awaitable_1 = event_0.wait(selectable_0)
        condition_1 = module_0.Condition()
        awaitable_2 = lock_0.acquire()
        condition_0.notify()
        condition_2 = module_0.Condition()
        bool_0 = event_0.is_set()
        awaitable_3 = lock_0.acquire(lock_0)
    except BaseException:
        pass

def test_case_23():
    try:
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        awaitable_0 = condition_0.wait()
        str_0 = condition_0.__repr__()
        lock_0 = module_0.Lock()
        semaphore_0 = module_0.Semaphore()
        semaphore_1 = module_0.Semaphore()
        semaphore_1.release()
        str_1 = lock_0.__repr__()
        semaphore_2 = module_0.Semaphore()
        event_0 = module_0.Event()
        float_0 = 40.0
        awaitable_1 = event_0.wait(float_0)
        event_0.set()
        awaitable_2 = lock_0.acquire(float_0)
        awaitable_3 = condition_0.wait()
        str_2 = semaphore_2.__repr__()
        lock_0.__aenter__()
        event_1 = module_0.Event()
        float_1 = 1.5
        awaitable_4 = condition_0.wait(float_0)
        callable_0 = None
        any_0 = i_o_loop_0.run_sync(callable_0, float_1)
    except BaseException:
        pass