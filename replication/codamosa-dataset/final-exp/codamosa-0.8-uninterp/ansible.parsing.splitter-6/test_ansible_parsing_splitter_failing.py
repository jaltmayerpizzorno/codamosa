# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    try:
        float_0 = -1598.7158
        var_0 = module_0.parse_kv(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 1794.1606
        var_0 = module_0.join_args(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '!\x0c"1T@}\n-(civ`b{[qB'
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ';:t,pI"XHn\'_:f`'
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n[\x0cN'
        str_1 = 'Qx`w{eK@'
        var_0 = module_0.parse_kv(str_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ')np'
        var_0 = module_0.split_args(str_0)
        str_1 = 'This is only needed for special packages which do not show up in pip freeze\n\n    pip and setuptools fall into this category.\n\n    :returns: a string containing the version number if the package is\n        installed.  None if the package is not installed.\n    '
        var_1 = module_0.parse_kv(str_1)
        bytes_0 = b'\xfe\x12[\xd3wZ\xe8m\xb2=\xc8\x1c\xe4\xa5\x12\x12\xa0'
        str_2 = 'K%M 0Tez\x0bq-wUMSj?Ceh'
        var_2 = module_0.join_args(str_2)
        var_3 = module_0.join_args(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '{{ foo }}'
        var_0 = module_0.split_args(str_0)
        var_1 = print(var_0)
        str_1 = '{{ foo }} {{ bar }}'
        var_2 = module_0.split_args(str_1)
        var_3 = print(var_2)
        str_2 = '{{ foo }} {{ bar }}  {{ baz qux }} '
        var_4 = module_0.split_args(str_2)
        var_5 = print(var_4)
        str_3 = "{{ foo }} {{ bar }} '{{ baz qux }}' "
        var_6 = module_0.split_args(str_3)
        var_7 = print(var_6)
        str_4 = '{{ foo }} {{ bar }} "{{ baz qux }}" '
        var_8 = module_0.split_args(str_4)
        var_9 = print(var_8)
        str_5 = '{{ foo }} {{ bar }} {{ baz qux }} {{ alpha beta }} '
        var_10 = module_0.split_args(str_5)
        var_11 = print(var_10)
        str_6 = '{{ foo }} {{ bar }} {{ baz qux }r {{ alpha beta }} {{ one two threN }}'
        var_12 = module_0.split_args(str_6)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '"foo"=bar'
        var_0 = module_0.parse_kv(str_0)
        var_1 = module_0.parse_kv(str_0)
        str_1 = '*F?UGj'
        set_0 = set()
        var_2 = module_0.parse_kv(str_1, set_0)
        str_2 = '=c\\_ x\\='
        var_3 = module_0.parse_kv(str_2)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'a="\\"x\\""'
        var_0 = module_0.parse_kv(str_0)
        str_1 = '-WNT{%'
        var_1 = module_0.split_args(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\\"foo\\"=bar'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'a="\\"x\\""'
        bytes_0 = b'\xf4n\t\x89S\\\xaeD'
        var_1 = module_0.parse_kv(bytes_0, bytes_0)
        var_2 = module_0.parse_kv(str_1)
        bytes_1 = b'\x92V\xef\xc0\xd1N\xa6\xc1\xb0\x84\x80\xf8p*'
        str_2 = '{0-WNT{'
        var_3 = module_0.split_args(str_2)
        var_4 = module_0.parse_kv(bytes_1, bytes_1)
        str_3 = '= " \\'
        var_5 = module_0.parse_kv(str_3)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '"foo"=bar'
        var_0 = module_0.parse_kv(str_0)
        bytes_0 = b'\x92V\xef\xc0\xd1N\xa6\xc1\xb0\x84\x80\xf8p*'
        var_1 = module_0.parse_kv(bytes_0, bytes_0)
        str_1 = '{#'
        var_2 = module_0.split_args(str_0)
        int_0 = 434
        var_3 = module_0.parse_kv(str_1, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\\"foo\\"=bar'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'a="\\"x\\""'
        bytes_0 = b'\xf4n\t\x89S\\\xaeD'
        var_1 = module_0.parse_kv(bytes_0, bytes_0)
        var_2 = module_0.parse_kv(str_1)
        bytes_1 = b'\x92V\xef\xc0\xd1N\xa6\xc1\xb0\x84\x80\xf8p*'
        var_3 = module_0.split_args(str_0)
        var_4 = module_0.parse_kv(bytes_1, bytes_1)
        str_2 = '{%% if %s %%} True {%% else %%} False {%% endif %%}'
        var_5 = module_0.parse_kv(str_2)
        str_3 = '/=#"fok bar"'
        int_0 = 434
        var_6 = module_0.parse_kv(str_3, int_0)
        float_0 = 224.0
        bytes_2 = b'2\xf51'
        var_7 = module_0.parse_kv(float_0, bytes_2)
    except BaseException:
        pass