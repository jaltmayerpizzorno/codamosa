# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n    Checks if the given string represents a valid ISBN 13 (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn_13(\'9780312498580\') # returns true\n    >>> is_isbn_13(\'978-0312498580\') # returns true\n    >>> is_isbn_13(\'978-0312498580\', normalize=False) # returns false\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens ("-") in the string (default), false otherwise.\n    :return: True if valid ISBN 13, false otherwise.\n    '
    bool_0 = module_0.is_isbn_13(str_0)

def test_case_2():
    str_0 = '9780312498580'
    bool_0 = module_0.is_isbn(str_0)

def test_case_3():
    str_0 = 'test@test.com'
    bool_0 = module_0.is_isbn(str_0)

def test_case_4():
    str_0 = '1506715214'
    bool_0 = module_0.is_isbn(str_0)

def test_case_5():
    str_0 = '080442957X'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = i_s_b_n_checker_0.is_isbn_10()

def test_case_6():
    i_s_b_n_checker_0 = None
    bool_0 = module_0.is_ip_v6(i_s_b_n_checker_0)

def test_case_7():
    str_0 = 'is_isbn'
    bool_0 = module_0.is_decimal(str_0)
    bool_1 = module_0.is_isbn_13(str_0)

def test_case_8():
    bool_0 = False
    bool_1 = module_0.is_palindrome(bool_0)
    str_0 = 'Czm\x0c:gC#)Fd^*'
    str_1 = '?aX?k6O3YsfyY'
    bool_2 = module_0.is_integer(str_1)
    bool_3 = module_0.is_credit_card(str_0)

def test_case_9():
    str_0 = 'd<-\\Jk2"pTs{f\r}='
    tuple_0 = (str_0,)
    bool_0 = module_0.is_email(tuple_0)
    bool_1 = module_0.is_url(str_0, tuple_0)

def test_case_10():
    str_0 = 'http://www.mysite.com'
    str_1 = 'https://mysite.com'
    bool_0 = module_0.is_url(str_1, str_0)
    bool_1 = module_0.is_url(str_1)

def test_case_11():
    dict_0 = None
    bool_0 = module_0.is_url(dict_0)

def test_case_12():
    str_0 = 'test@test.com'
    bool_0 = module_0.is_email(str_0)

def test_case_13():
    str_0 = '\rn4&[_{.4'
    bool_0 = module_0.is_email(str_0)

def test_case_14():
    str_0 = 'test@test.com'
    bool_0 = module_0.is_credit_card(str_0)
    bool_1 = module_0.is_ip(bool_0)

def test_case_15():
    str_0 = 'john.doe@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_email(str_0)
    str_1 = '.john.doe@the-provider.com'
    bool_2 = module_0.is_email(str_1)
    str_2 = 'john.doe.@the-provider.com'
    bool_3 = module_0.is_email(str_2)
    str_3 = 'john..doe@the-provider.com'
    bool_4 = module_0.is_email(str_3)
    str_4 = 'john.doe@the-provider..com'
    bool_5 = module_0.is_email(str_4)
    bool_6 = module_0.is_credit_card(bool_5, str_3)

def test_case_16():
    str_0 = 'C'
    bool_0 = module_0.is_ip(str_0)
    str_1 = 'IzS8Zm8\tRly'
    bool_1 = module_0.is_json(str_1)
    set_0 = {str_1}
    float_0 = 769.946
    bool_2 = module_0.is_camel_case(set_0)
    tuple_0 = (set_0, float_0)
    bool_3 = module_0.is_uuid(tuple_0)
    str_2 = 'V.8-)4G\t#\x0bYTm'
    bool_4 = module_0.is_isogram(tuple_0)
    bool_5 = module_0.is_isbn_13(str_2)

def test_case_17():
    str_0 = '+`1-'
    bool_0 = module_0.is_ip_v6(str_0)
    str_1 = '~'
    bool_1 = True
    bool_2 = True
    bool_3 = module_0.is_isbn_10(str_1, bool_2)
    bool_4 = module_0.is_isbn_10(str_1, bool_1)
    bool_5 = module_0.contains_html(str_1)
    bool_6 = module_0.is_snake_case(bool_4)
    float_0 = -1349.04
    bool_7 = module_0.is_ip(float_0)

def test_case_18():
    complex_0 = None
    bool_0 = module_0.is_url(complex_0)
    str_0 = 'q'
    bool_1 = module_0.is_slug(bool_0, str_0)
    bool_2 = module_0.is_email(complex_0)
    bool_3 = module_0.is_pangram(complex_0)
    str_1 = 'jZ\x0bew|2 b{:{E'
    bool_4 = module_0.is_snake_case(str_1)
    bool_5 = module_0.is_isbn_13(str_1, bool_0)
    bool_6 = module_0.is_string(complex_0)
    bool_7 = module_0.is_email(str_1)

def test_case_19():
    str_0 = '<]\x0byZ\r\x0bw\\`'
    bool_0 = False
    bool_1 = module_0.is_isbn(str_0, bool_0)
    bool_2 = module_0.is_json(str_0)

def test_case_20():
    int_0 = 1058
    bool_0 = module_0.is_uuid(int_0)

def test_case_21():
    set_0 = set()
    bool_0 = module_0.is_ip_v4(set_0)

def test_case_22():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip(str_0)

def test_case_23():
    str_0 = '*'
    bool_0 = None
    bool_1 = module_0.is_palindrome(str_0, bool_0)
    str_1 = "W\x0b'X9\n"
    bool_2 = False
    bool_3 = module_0.is_isbn(str_1, bool_2)
    int_0 = module_0.words_count(str_0)
    str_2 = ' >'
    bool_4 = module_0.is_number(str_2)

def test_case_24():
    str_0 = 'test@test.com'
    bool_0 = module_0.is_credit_card(str_0)
    bool_1 = module_0.is_ip(bool_0)
    bool_2 = module_0.is_palindrome(bool_1)

def test_case_25():
    str_0 = 'j/3HbF/Jo1OdohV/ M*'
    bool_0 = module_0.is_string(str_0)
    bool_1 = module_0.is_isogram(str_0)
    bool_2 = module_0.is_palindrome(str_0, bool_0)
    bytes_0 = b'[\x8cgZ\x11\x91\x84\x9c'
    bool_3 = module_0.is_ip_v4(bytes_0)
    bool_4 = module_0.is_url(bool_2)
    bool_5 = module_0.is_ip(bool_2)
    str_1 = 'YVoc}2'
    bool_6 = module_0.is_ip(str_1)
    bool_7 = module_0.contains_html(str_1)

def test_case_26():
    int_0 = 8
    bool_0 = module_0.is_camel_case(int_0)
    str_0 = 'YfiDmk$|m0|'
    bool_1 = module_0.is_number(str_0)
    str_1 = 'K'
    bool_2 = module_0.is_email(str_1)
    bool_3 = module_0.is_isbn_13(str_1)
    bool_4 = False
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_4)
    bool_5 = i_s_b_n_checker_0.is_isbn_13()
    bool_6 = module_0.is_isogram(int_0)
    int_1 = module_0.words_count(str_1)
    bool_7 = i_s_b_n_checker_0.is_isbn_10()
    bool_8 = module_0.is_pangram(str_0)
    bool_9 = module_0.is_uuid(bool_3, bool_3)
    bool_10 = module_0.is_pangram(int_0)
    bool_11 = module_0.is_credit_card(bool_3)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_0)
    bool_12 = module_0.is_camel_case(bool_3)
    bool_13 = i_s_b_n_checker_1.is_isbn_13()

def test_case_27():
    dict_0 = {}
    bool_0 = module_0.is_pangram(dict_0)

def test_case_28():
    str_0 = '('
    bool_0 = module_0.is_number(str_0)
    float_0 = 248.3
    bool_1 = module_0.is_decimal(str_0)
    bool_2 = module_0.is_email(float_0)
    str_1 = 'g'
    bool_3 = module_0.is_isbn_10(str_1)
    bool_4 = module_0.is_isbn_10(str_1)
    str_2 = 'SU00/5|:/0/U\r\tn6F2'
    bool_5 = module_0.is_isogram(str_2)

def test_case_29():
    str_0 = '127.0.0.1'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = '255.200.100.75'
    bool_1 = module_0.is_ip_v4(str_1)
    str_2 = 'nope'
    bool_2 = module_0.is_slug(str_1, str_1)
    bool_3 = module_0.is_ip_v4(str_2)
    bool_4 = module_0.is_email(str_2)
    bool_5 = True
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_5)
    bool_6 = module_0.is_email(str_1)
    bool_7 = module_0.is_email(bool_4)
    bool_8 = module_0.is_email(bool_4)

def test_case_30():
    str_0 = None
    bool_0 = module_0.is_slug(str_0)

def test_case_31():
    str_0 = 'http://www.mysite.com'
    bool_0 = module_0.is_url(str_0)
    str_1 = '[1, 2, 3]'
    bool_1 = module_0.is_json(str_0)
    bool_2 = module_0.is_json(str_1)
    bool_3 = True
    bool_4 = module_0.is_isbn_10(str_1, bool_3)

def test_case_32():
    str_0 = '{SD055L3YdB/&M{fS!n'
    bool_0 = None
    bool_1 = module_0.is_isbn(str_0, bool_0)
    bool_2 = module_0.is_full_string(bool_1)
    str_1 = '\x0c\t;z h0,[}H"w'
    bool_3 = module_0.is_decimal(str_1)
    str_2 = '@~}:QMei\\x^g#-j'
    bool_4 = module_0.is_string(bool_3)
    bool_5 = module_0.is_ip(str_2)
    bool_6 = module_0.is_url(bool_4)
    bool_7 = module_0.is_camel_case(str_2)
    bool_8 = module_0.is_isbn(str_2)
    str_3 = '8{n0/"-E7#k&meXT'
    bool_9 = True
    bool_10 = module_0.is_isbn(str_3, bool_9)
    bool_11 = None
    bool_12 = False
    bool_13 = module_0.is_palindrome(bool_11, bool_12)

def test_case_33():
    str_0 = ''
    bool_0 = module_0.is_email(str_0)
    str_1 = 'test'
    bool_1 = module_0.is_email(str_1)
    str_2 = 'test@test'
    bool_2 = module_0.is_email(str_2)
    str_3 = 'test@test.'
    bool_3 = module_0.is_email(str_3)
    str_4 = 'test.@test.com'
    bool_4 = module_0.is_email(str_4)
    str_5 = '[1, 2, 3]'
    float_0 = 453.32
    bool_5 = module_0.is_json(float_0)
    bool_6 = module_0.is_json(str_5)

def test_case_34():
    str_0 = 'C'
    bool_0 = module_0.is_ip(str_0)
    str_1 = 'IzS8Zm8\tRly'
    bool_1 = module_0.is_json(str_1)

def test_case_35():
    str_0 = '7~%BhPiW[4)Ix!G'
    bool_0 = module_0.is_ip_v6(str_0)

def test_case_36():
    str_0 = '}bTPLUqL(~lE\n}.'
    bool_0 = module_0.contains_html(str_0)
    str_1 = '\n    Restore a previously compressed string (obtained using `compress()`) back to its original state.\n\n    :param input_string: String to restore.\n    :type input_string: str\n    :param encoding: Original string encoding.\n    :type encoding: str\n    :return: Decompressed string.\n    '
    str_2 = '^5[1-5]\\d{14}$'
    bool_1 = module_0.contains_html(str_2)
    bool_2 = module_0.is_ip(str_1)
    int_0 = module_0.words_count(str_1)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    str_3 = 'NT|9m_;,iR{zY.'
    bool_3 = module_0.is_integer(str_3)
    dict_0 = None
    bool_4 = module_0.is_url(dict_0)
    bool_5 = i_s_b_n_checker_0.is_isbn_13()
    bool_6 = module_0.is_isogram(i_s_b_n_checker_0)
    list_0 = []
    bool_7 = module_0.is_url(str_1, list_0)
    str_4 = 'is_integer'
    bool_8 = module_0.is_integer(str_4)
    float_0 = -1773.831
    tuple_0 = (i_s_b_n_checker_0, float_0)
    bool_9 = module_0.is_email(str_2)
    bool_10 = module_0.is_url(tuple_0)
    bool_11 = True
    bool_12 = module_0.is_uuid(int_0, bool_11)
    bool_13 = i_s_b_n_checker_0.is_isbn_10()
    bool_14 = i_s_b_n_checker_0.is_isbn_13()

def test_case_37():
    str_0 = 'gM_ys'
    str_1 = '\n    Convert a snake case string into a camel case one.\n    (The original string is returned if is not a valid snake case string)\n\n    *Example:*\n\n    >>> snake_case_to_camel(\'the_snake_is_green\') # returns \'TheSnakeIsGreen\'\n\n    :param input_string: String to convert.\n    :type input_string: str\n    :param upper_case_first: True to turn the first letter into uppercase (default).\n    :type upper_case_first: bool\n    :param separator: Sign to use as separator (default to "_").\n    :type separator: str\n    :return: Converted string\n    '
    bool_0 = False
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1, bool_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_10()
    bool_2 = False
    bool_3 = module_0.is_isbn_10(str_0, bool_2)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_0)
    bool_4 = i_s_b_n_checker_1.is_isbn_13()
    bool_5 = module_0.is_palindrome(str_0)
    bool_6 = module_0.is_email(str_1)
    str_2 = 'o'
    bool_7 = i_s_b_n_checker_1.is_isbn_10()
    bool_8 = module_0.is_json(bool_6)
    str_3 = 'RYpY Dx?|rXqFss{\n3W'
    bool_9 = module_0.is_decimal(str_3)
    bool_10 = True
    i_s_b_n_checker_2 = module_0.__ISBNChecker(str_1, bool_10)
    int_0 = module_0.words_count(str_2)
    bool_11 = False
    bool_12 = True
    bool_13 = module_0.is_palindrome(int_0, bool_11, bool_12)
    str_4 = 'o4rplFYkT&'
    bool_14 = False
    bool_15 = module_0.is_isbn(str_4, bool_14)
    bool_16 = module_0.is_snake_case(i_s_b_n_checker_2)
    bool_17 = i_s_b_n_checker_0.is_isbn_10()
    bool_18 = i_s_b_n_checker_2.is_isbn_13()
    bool_19 = i_s_b_n_checker_0.is_isbn_10()
    i_s_b_n_checker_3 = module_0.__ISBNChecker(str_4, bool_1)
    bool_20 = i_s_b_n_checker_1.is_isbn_10()

def test_case_38():
    str_0 = '365844926830494'
    str_1 = 'AMERICAN_EXPRESS'
    bool_0 = module_0.is_credit_card(str_0, str_1)

def test_case_39():
    str_0 = '9\rca}92r6jHkf#2kMKzM'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = module_0.is_ip_v6(i_s_b_n_checker_0)
    bool_1 = module_0.is_decimal(str_0)
    list_0 = None
    bool_2 = i_s_b_n_checker_0.is_isbn_10()
    bool_3 = module_0.is_isogram(list_0)
    bool_4 = True
    bool_5 = module_0.is_isogram(bool_4)
    bool_6 = module_0.is_ip(bool_2)
    str_1 = ' \\x\x0c g7DYh>"'
    tuple_0 = (str_1,)
    bool_7 = i_s_b_n_checker_0.is_isbn_10()
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_1)
    bool_8 = i_s_b_n_checker_1.is_isbn_10()
    tuple_1 = (list_0, bool_4, tuple_0, i_s_b_n_checker_1)
    bool_9 = module_0.is_email(tuple_1)
    str_2 = '+0'
    bool_10 = module_0.is_integer(str_2)
    int_0 = -1990
    bool_11 = module_0.is_camel_case(int_0)
    bytes_0 = b'9\xe8\x1c1S\x82?\xcb\xc9\xb5DA\xf6z\xde\xddA\xc7\xda\xda'
    bool_12 = module_0.is_json(str_1)
    bool_13 = module_0.is_palindrome(tuple_1, bool_10)
    bool_14 = i_s_b_n_checker_1.is_isbn_13()
    bool_15 = module_0.is_full_string(bytes_0)
    str_3 = 'Ow1_"\'W(@0t7G3/Z]'
    bool_16 = module_0.is_integer(str_2)
    bool_17 = module_0.is_isbn_10(str_3)
    bool_18 = module_0.is_url(tuple_0)

def test_case_40():
    str_0 = '}Ed[D"n%T}9\x0c]'
    bool_0 = module_0.is_integer(str_0)
    str_1 = "'Q\n,GXw."
    bool_1 = module_0.is_url(str_1)
    str_2 = '^[a-zA-Z]*([a-z]+[A-Z]+|[A-Z]+[a-z]+)[a-zAZ\\d]*$'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    bool_2 = module_0.is_decimal(str_2)
    bool_3 = module_0.is_isbn_10(str_0, bool_0)
    bool_4 = module_0.is_email(bool_0)
    bool_5 = module_0.is_json(str_1)
    bool_6 = False
    bool_7 = module_0.is_ip(str_1)
    str_3 = "\n    Decode a roman number string into an integer if the provided string is valid.\n\n    *Example:*\n\n    >>> roman_decode('VII') # returns 7\n\n    :param input_string: (Assumed) Roman number\n    :type input_string: str\n    :return: Integer value\n    "
    bool_8 = module_0.is_integer(str_3)
    bool_9 = module_0.is_palindrome(str_1)
    str_4 = 'Czm\x0c:gC#)Fd^*'
    bool_10 = module_0.is_isbn(str_2)
    bool_11 = i_s_b_n_checker_0.is_isbn_13()
    bool_12 = module_0.is_palindrome(bool_6, bool_10)
    bool_13 = module_0.is_integer(str_0)
    bool_14 = True
    bool_15 = True
    bool_16 = module_0.is_palindrome(str_4, bool_14, bool_15)
    bool_17 = module_0.is_snake_case(bool_12)
    bool_18 = module_0.is_credit_card(bool_13)

def test_case_41():
    str_0 = '"Abc\\@def"@example.com'
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_email(str_0)
    str_1 = '@gmail.com'
    bool_2 = module_0.is_email(str_1)

def test_case_42():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip_v4(str_0)
    bool_1 = module_0.is_ip_v4(str_0)
    str_1 = '255.200.100.999'
    bool_2 = module_0.is_ip_v4(str_1)
    str_2 = '0.0.0.1'
    bool_3 = module_0.is_ip_v4(str_2)
    str_3 = '1.1.1.1'
    bool_4 = module_0.is_ip_v4(str_3)
    bool_5 = module_0.is_ip_v4(str_2)
    str_4 = ''
    bool_6 = module_0.is_ip_v4(str_4)

def test_case_43():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip(str_0)
    str_1 = '2001:db8:85a3:0000:0000:8a2e:370:7334'
    bool_1 = module_0.is_ip(str_1)
    str_2 = '1.2.3'
    bool_2 = module_0.is_ip(str_2)

def test_case_44():
    str_0 = 'test@test.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = 'test+test@test.com'
    bool_1 = module_0.is_email(str_1)
    str_2 = '"test"]c0@test.com'
    bool_2 = module_0.is_email(str_2)
    str_3 = 'test.test@test.com'
    bool_3 = module_0.is_email(str_3)
    str_4 = '"test\\.test"@test.com'
    bool_4 = module_0.is_email(str_4)
    bool_5 = module_0.is_email(str_3)
    str_5 = 'Q\x0cMJOa,g:+'
    bool_6 = module_0.is_json(bool_3)
    bool_7 = module_0.is_isbn(str_5)
    bool_8 = True
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    bool_9 = i_s_b_n_checker_0.is_isbn_13()
    bool_10 = module_0.is_slug(bool_7)
    str_6 = 'GEw$"b3G2@w7hEFNR@0m'
    bool_11 = module_0.is_isbn(str_6)
    bool_12 = module_0.is_palindrome(bool_8, bool_7)
    str_7 = "ejUPttpp\rHB6^]'i"
    bool_13 = module_0.is_integer(str_7)
    bool_14 = module_0.is_palindrome(i_s_b_n_checker_0, bool_5)
    bool_15 = module_0.is_url(i_s_b_n_checker_0)
    dict_0 = {}
    bool_16 = module_0.is_credit_card(dict_0)
    bool_17 = module_0.is_ip(bool_0)

def test_case_45():
    str_0 = "{'x': 'y'}"
    bool_0 = module_0.is_json(str_0)
    str_1 = '[1, 2, 3]'
    bool_1 = module_0.is_json(str_1)

def test_case_46():
    str_0 = '8'
    bool_0 = module_0.is_email(str_0)
    bool_1 = module_0.is_email(str_0)
    bool_2 = module_0.is_ip(bool_0)
    str_1 = 'test.test@test.com'
    bool_3 = module_0.is_decimal(str_0)
    bool_4 = module_0.is_email(str_1)
    str_2 = '"test\\.test"@test.com'
    bool_5 = module_0.is_email(str_2)
    bool_6 = module_0.is_email(str_1)
    str_3 = 'Q\x0cMJOa,g:+'
    bool_7 = module_0.is_json(bool_4)
    bool_8 = module_0.is_isbn(str_3)
    bool_9 = True
    bool_10 = module_0.is_full_string(bool_9)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    bool_11 = i_s_b_n_checker_0.is_isbn_13()
    bool_12 = module_0.is_url(bool_7)
    bool_13 = module_0.is_integer(str_2)
    int_0 = module_0.words_count(str_0)
    bool_14 = module_0.is_palindrome(i_s_b_n_checker_0, bool_6)
    bool_15 = module_0.is_url(i_s_b_n_checker_0)
    bool_16 = i_s_b_n_checker_0.is_isbn_10()
    str_4 = 'seWORRRJk@m.\n"TV 5'
    bool_17 = module_0.is_credit_card(str_1)
    bool_18 = module_0.is_ip(str_4)
    bool_19 = module_0.is_ip_v6(bool_0)

def test_case_47():
    float_0 = 2196.0
    str_0 = '1V7!?u,qRU'
    bool_0 = module_0.is_slug(float_0, str_0)
    str_1 = '4111111111111111'
    bool_1 = module_0.is_credit_card(str_1)
    str_2 = '@gmail.com'
    bool_2 = module_0.is_email(str_2)
    str_3 = 'my.email@the-provider,com'
    bool_3 = module_0.is_email(str_1)
    str_4 = 'my.email@the-provider.c'
    bool_4 = module_0.is_email(str_2)
    str_5 = 'my.email@the-provider.com.'
    bool_5 = module_0.is_email(bool_3)
    bool_6 = module_0.is_email(str_4)
    bool_7 = module_0.is_email(str_3)
    bool_8 = module_0.is_email(bool_6)
    bool_9 = module_0.is_email(str_5)

def test_case_48():
    str_0 = '.my.email@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = 'my.email@the-provider.com\n'
    bool_1 = module_0.is_email(str_1)