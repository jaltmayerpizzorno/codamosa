# Automatically generated by Pynguin.
import ansible.plugins.callback.default as module_0
import ansible.playbook.task_include as module_1

def test_case_0():
    try:
        bool_0 = True
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_matched()
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_1.set_options(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x020\xd0\xda\xedN\x1a\xd2E\x8f\xf8\xa2\xa0\x1e0$x'
        bytes_1 = b'\x97'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_1, bytes_0: bytes_0}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_failed(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_ok(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callback_module_0 = module_0.CallbackModule()
        bytes_0 = b'\xad\x9f\x85\xf0\x9c\xe0\xccc\xda\x1cU\xc8D\x1f'
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_on_skipped(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_on_unreachable(callback_module_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_remaining()
        dict_0 = {callback_module_0: callback_module_0}
        var_1 = callback_module_0.v2_playbook_on_notify(dict_0, dict_0)
        bytes_0 = b'K\xd3\x14tP'
        var_2 = callback_module_0.v2_playbook_on_cleanup_task_start(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xb8\xdf\xa53\tXK\\\xb0Q\x12\xc4\xc6\x8d\xdd\xf3\x92'
        list_0 = [bytes_0, bytes_0]
        list_1 = [list_0, bytes_0]
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_task_start(list_1, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_cleanup_task_start(callback_module_0)
    except BaseException:
        pass

def test_case_8():
    try:
        callback_module_0 = module_0.CallbackModule()
        set_0 = {callback_module_0, callback_module_0}
        var_0 = callback_module_0.v2_playbook_on_handler_task_start(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x81\xe5\x16k\x14w\xbfr\x94W\xd6D\xa6q<\xa1\xf9%\xa5g'
        list_0 = [bytes_0]
        set_0 = {bytes_0}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_start(list_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_item_on_ok(callback_module_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'r\xf1\xca)\x0fvj\xaag?'
        callback_module_0 = module_0.CallbackModule()
        tuple_0 = (bytes_0, callback_module_0)
        callback_module_1 = module_0.CallbackModule()
        var_0 = callback_module_1.v2_runner_item_on_skipped(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        tuple_0 = ()
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_include(tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 400
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_stats(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_start(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -642
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_retry(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_async_poll(callback_module_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_async_ok(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_matched()
        bool_0 = True
        list_0 = [callback_module_0, callback_module_0, callback_module_0, callback_module_0]
        var_1 = callback_module_0.v2_playbook_on_notify(bool_0, list_0)
        bool_1 = False
        var_2 = callback_module_0.v2_runner_on_async_failed(bool_1)
    except BaseException:
        pass

def test_case_19():
    try:
        callback_module_0 = None
        callback_module_1 = module_0.CallbackModule()
        float_0 = None
        dict_0 = {callback_module_1: callback_module_0, float_0: callback_module_0, callback_module_1: float_0}
        var_0 = callback_module_1.v2_playbook_on_notify(float_0, dict_0)
        callback_module_2 = module_0.CallbackModule()
        var_1 = callback_module_1.v2_on_file_diff(callback_module_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'C\x0cKNyp2'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_item_on_failed(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        tuple_0 = ()
        task_include_0 = module_1.TaskInclude(tuple_0)
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_play_start(task_include_0)
        int_0 = -445
        var_1 = callback_module_0.v2_playbook_on_start(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        callback_module_0 = module_0.CallbackModule()
        list_0 = []
        task_include_0 = module_1.TaskInclude(list_0)
        var_0 = callback_module_0.v2_playbook_on_handler_task_start(task_include_0)
    except BaseException:
        pass