# Automatically generated by Pynguin.
import ansible.playbook.block as module_0

def test_case_0():
    try:
        str_0 = '2A\rM-|@ ~1A4/P}C,p('
        dict_0 = {str_0: str_0}
        block_0 = module_0.Block(str_0, dict_0)
        var_0 = block_0.get_dep_chain()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 368
        str_0 = 'SZY-0OU#'
        str_1 = 'The name of a group in the inventory, relevant when using --graph'
        str_2 = "Q\nX'`8`+\r5"
        dict_0 = {int_0: str_1, str_1: str_1, str_0: str_2, str_2: str_2}
        block_0 = None
        tuple_0 = (block_0,)
        str_3 = '\n    This is a HP-UX User manipulation class.\n\n    This overrides the following methods from the generic class:-\n      - create_user()\n      - remove_user()\n      - modify_user()\n    '
        block_1 = module_0.Block(tuple_0, str_3)
        var_0 = block_1.__repr__()
        block_2 = module_0.Block(dict_0, block_1, tuple_0, dict_0)
        set_0 = {str_2}
        bool_0 = False
        block_3 = module_0.Block(block_2, tuple_0, set_0, bool_0)
        var_1 = block_3.serialize()
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        bytes_0 = b'\x97a\xb9>^\xca\x1c\xcd\xcf`\x92\xcfM\r'
        block_0 = module_0.Block()
        var_0 = block_0.__repr__()
        tuple_0 = (set_0, bytes_0, block_0)
        str_0 = 'conditional statements should not include jinja2 templating delimiters such as {{ }} or {%% %%}. Found: %s'
        var_1 = block_0.set_loader(str_0)
        var_2 = block_0.serialize()
        int_0 = -1463
        block_1 = module_0.Block(tuple_0, int_0)
        var_3 = block_0.get_dep_chain()
        var_4 = block_1.__repr__()
        block_2 = module_0.Block()
        var_5 = block_1.deserialize(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        block_0 = module_0.Block()
        bool_0 = True
        block_1 = module_0.Block(bool_0)
        float_0 = -2433.4
        var_0 = block_0.__ne__(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0}
        str_0 = '*D\n^6TT\rE\nCXgD'
        block_0 = module_0.Block(str_0)
        block_1 = module_0.Block(bool_0, set_0, block_0)
        var_0 = block_1.get_vars()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ':\n`\n|P'
        set_0 = {str_0}
        tuple_0 = ()
        block_0 = module_0.Block(set_0, tuple_0)
        var_0 = block_0.copy()
        var_1 = block_0.copy()
        var_2 = block_0.load(tuple_0, str_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        block_0 = module_0.Block(bool_0)
        var_0 = block_0.deserialize(block_0)
    except BaseException:
        pass

def test_case_7():
    try:
        block_0 = module_0.Block()
        var_0 = block_0.__repr__()
        str_0 = '+UWHry'
        dict_0 = {str_0: str_0}
        float_0 = 123.07449
        block_1 = module_0.Block(dict_0, float_0)
        tuple_0 = None
        set_0 = {tuple_0}
        var_1 = block_1.set_loader(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "Bp8we(H#'"
        set_0 = {str_0, str_0}
        list_0 = [set_0]
        block_0 = module_0.Block(set_0, list_0, str_0)
        var_0 = block_0.serialize()
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = None
        str_0 = '.<@'
        block_0 = module_0.Block()
        var_0 = block_0.get_include_params()
        block_1 = module_0.Block(str_0)
        var_1 = block_0.all_parents_static()
        var_2 = block_1.is_block(list_0)
        tuple_0 = ()
        block_2 = module_0.Block(tuple_0)
        var_3 = block_2.get_include_params()
        float_0 = 3423.2743
        str_1 = '\n    Timeout decorator to expire after a set number of seconds.  This raises an\n    ansible.module_utils.facts.TimeoutError if the timeout is hit before the\n    function completes.\n    '
        int_0 = 923
        block_3 = module_0.Block(str_1, int_0)
        var_4 = block_3.__ne__(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '0\n4DQQqq:7J[:%/g'
        bool_0 = False
        list_0 = [str_0, bool_0]
        block_0 = module_0.Block(bool_0, list_0)
        var_0 = block_0.get_include_params()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1478
        bytes_0 = b'C\x18\xa1}'
        str_0 = 'uL\x0b)\rpT]'
        block_0 = module_0.Block(int_0, bytes_0, str_0)
        var_0 = block_0.all_parents_static()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "+>n':p~"
        bytes_0 = b"W7\xfbf\x81\xcc\xb7oO\xd0\xa5N\tm'W\xd5\x113"
        dict_0 = {str_0: str_0, bytes_0: bytes_0, str_0: bytes_0, str_0: bytes_0}
        block_0 = module_0.Block(str_0, dict_0)
        var_0 = block_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_13():
    try:
        block_0 = module_0.Block()
        bool_0 = True
        int_0 = 639
        str_0 = ')un2MOzY'
        var_0 = block_0.set_loader(str_0)
        str_1 = 'LWRf\\50dU>1I,XO2B'
        var_1 = block_0.has_tasks()
        dict_0 = {str_1: bool_0}
        block_1 = module_0.Block(int_0, str_1, block_0, dict_0)
        var_2 = block_0.get_first_parent_include()
        bytes_0 = b''
        var_3 = block_1.filter_tagged_tasks(bytes_0)
        var_4 = block_1.copy(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '+UWHry'
        dict_0 = {str_0: str_0}
        int_0 = -2798
        float_0 = 123.07449
        block_0 = module_0.Block(dict_0, float_0)
        bool_0 = False
        bytes_0 = b''
        block_1 = module_0.Block(block_0, float_0, bool_0, bytes_0)
        bytes_1 = b'^\xf6B\x9f\x0eCE\x10\xa9LW@n\xfb\xcf\x7f\xc1\r'
        int_1 = -123
        block_2 = module_0.Block(bytes_1, int_1)
        var_0 = block_2.filter_tagged_tasks(int_0)
        str_1 = 'b[K?U<EGSZY{/\x0c!6v||2'
        var_1 = block_1.load(dict_0, str_0, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'%\xb8~\x17%\x84\xf1\x19\x97\xd3\xa7\xe0\x8d\xd7'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        tuple_0 = ()
        list_0 = [tuple_0, bytes_0]
        block_0 = module_0.Block(list_0)
        var_0 = block_0.has_tasks()
        block_1 = module_0.Block(dict_0, tuple_0)
        var_1 = block_1.serialize()
        block_2 = module_0.Block(bytes_0)
        var_2 = block_2.get_first_parent_include()
        float_0 = -1034.2718
        var_3 = block_2.set_loader(float_0)
        var_4 = block_2.copy()
        bytes_1 = b''
        var_5 = block_2.is_block(bytes_1)
        float_1 = -2461.6049
        var_6 = block_1.filter_tagged_tasks(float_1)
        str_0 = ''
        str_1 = 'Z'
        var_7 = block_0.filter_tagged_tasks(str_1)
        var_8 = block_0.all_parents_static()
        var_9 = block_0.copy()
        set_0 = None
        str_2 = 'wU"2j`wo'
        block_3 = module_0.Block(set_0, bytes_1, str_2, str_0)
        var_10 = block_3.serialize()
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'%\xb8~\x17%\x84\xf1\x19\x97\xd3\xa7\xe0\x8d\xd7'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        tuple_0 = ()
        list_0 = [tuple_0, bytes_0]
        block_0 = module_0.Block(list_0)
        var_0 = block_0.has_tasks()
        block_1 = module_0.Block(dict_0, tuple_0)
        var_1 = block_1.serialize()
        var_2 = block_0.get_first_parent_include()
        var_3 = block_1.deserialize(var_1)
        var_4 = block_0.copy()
        str_0 = 'JC$'
        block_2 = module_0.Block(str_0, block_0, tuple_0, tuple_0)
        str_1 = 'a^\x0b&m'
        var_5 = block_1.is_block(str_1)
        var_6 = block_2.is_block(block_2)
        float_0 = -2461.605
        var_7 = block_2.copy()
        bool_0 = False
        var_8 = block_2.filter_tagged_tasks(bool_0)
        float_1 = -1937.5047799610572
        str_2 = 'n\t,2^IcQ3\noR'
        dict_1 = {float_1: var_4, float_0: list_0}
        block_3 = module_0.Block(dict_1, str_2, block_0)
        var_9 = block_3.serialize()
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'%\xb8~\x17%\x84\xf1\x19\x97\xd3\xa7\xe0\x8d\xd7'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        tuple_0 = ()
        list_0 = [tuple_0, bytes_0]
        block_0 = module_0.Block(list_0)
        var_0 = block_0.has_tasks()
        block_1 = module_0.Block(dict_0, tuple_0)
        var_1 = block_1.serialize()
        block_2 = module_0.Block(bytes_0)
        var_2 = block_2.get_first_parent_include()
        float_0 = -1034.2718
        var_3 = block_2.set_loader(float_0)
        var_4 = block_2.copy()
        str_0 = 'JC$'
        block_3 = module_0.Block(str_0, block_2, tuple_0, tuple_0)
        var_5 = block_3.copy()
        var_6 = block_1.set_loader(tuple_0)
        var_7 = block_2.get_dep_chain()
        var_8 = block_2.get_vars()
        var_9 = block_1.is_block(block_0)
        float_1 = -1646.68098
        var_10 = block_3.filter_tagged_tasks(float_1)
        str_1 = 'I`b)dT2lJS}4o'
        int_0 = 0
        block_4 = module_0.Block(str_1, block_0, int_0)
        var_11 = block_3.serialize()
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 200000
        complex_0 = None
        bytes_0 = b'\xd3\xa8'
        bool_0 = False
        set_0 = {int_0, bytes_0, bool_0, bool_0}
        block_0 = module_0.Block(bytes_0, bool_0, set_0)
        var_0 = block_0.set_loader(complex_0)
    except BaseException:
        pass

def test_case_19():
    try:
        block_0 = module_0.Block()
        str_0 = 'dep_chain'
        str_1 = 'role'
        str_2 = 'parent'
        var_0 = None
        str_3 = 'ThisClassDoesNotExist'
        var_1 = {str_0: var_0, str_1: var_0, str_2: var_0, str_2: str_3}
        var_2 = block_0.deserialize(var_1)
    except BaseException:
        pass

def test_case_20():
    try:
        block_0 = module_0.Block()
        str_0 = 'dep_chain'
        str_1 = 'role'
        str_2 = 'ThisClassDoesNotExist'
        var_0 = {str_0: str_2, str_1: str_2, str_2: str_2, str_2: str_2}
        var_1 = block_0.deserialize(var_0)
    except BaseException:
        pass