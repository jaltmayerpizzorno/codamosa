# Automatically generated by Pynguin.
import pathlib as module_0
import httpie.config as module_1

def test_case_0():
    try:
        path_0 = module_0.Path()
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        var_0 = base_config_dict_0.ensure_directory()
        var_1 = base_config_dict_0.ensure_directory()
        bool_0 = base_config_dict_0.is_new()
        var_2 = base_config_dict_0.ensure_directory()
        var_3 = base_config_dict_0.delete()
    except BaseException:
        pass

def test_case_1():
    try:
        path_0 = module_0.Path()
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        var_0 = base_config_dict_0.load()
    except BaseException:
        pass

def test_case_2():
    try:
        config_0 = module_1.Config()
        var_0 = config_0.save()
    except BaseException:
        pass

def test_case_3():
    try:
        path_0 = module_0.Path()
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        var_0 = base_config_dict_0.delete()
    except BaseException:
        pass

def test_case_4():
    try:
        config_0 = module_1.Config()
        path_0 = module_1.get_default_config_dir()
        path_1 = module_1.get_default_config_dir()
        base_config_dict_0 = module_1.BaseConfigDict(path_1)
        var_0 = base_config_dict_0.ensure_directory()
        base_config_dict_1 = module_1.BaseConfigDict(path_1)
        var_1 = base_config_dict_1.delete()
        base_config_dict_2 = module_1.BaseConfigDict(path_0)
        var_2 = base_config_dict_2.delete()
        path_2 = module_1.get_default_config_dir()
        var_3 = base_config_dict_2.delete()
        var_4 = base_config_dict_2.load()
        var_5 = path_0.readlink()
    except BaseException:
        pass

def test_case_5():
    try:
        path_0 = module_1.get_default_config_dir()
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        bool_0 = base_config_dict_0.is_new()
        path_1 = None
        path_2 = module_1.get_default_config_dir()
        base_config_dict_1 = module_1.BaseConfigDict(path_1)
        path_3 = module_1.get_default_config_dir()
        base_config_dict_2 = module_1.BaseConfigDict(path_1)
        var_0 = base_config_dict_1.delete()
    except BaseException:
        pass

def test_case_6():
    try:
        path_0 = module_1.get_default_config_dir()
        config_file_error_0 = module_1.ConfigFileError()
        base_config_dict_0 = module_1.BaseConfigDict(path_0)
        var_0 = base_config_dict_0.load()
    except BaseException:
        pass

def test_case_7():
    try:
        path_0 = module_0.Path()
        path_1 = None
        base_config_dict_0 = module_1.BaseConfigDict(path_1)
        var_0 = base_config_dict_0.ensure_directory()
    except BaseException:
        pass

def test_case_8():
    try:
        path_0 = module_1.get_default_config_dir()
        str_0 = "Return a humanized string representation of a number of bytes.\n\n    Assumes `from __future__ import division`.\n\n    >>> humanize_bytes(1)\n    '1 B'\n    >>> humanize_bytes(1024, precision=1)\n    '1.0 kB'\n    >>> humanize_bytes(1024 * 123, precision=1)\n    '123.0 kB'\n    >>> humanize_bytes(1024 * 12342, precision=1)\n    '12.1 MB'\n    >>> humanize_bytes(1024 * 12342, precision=2)\n    '12.05 MB'\n    >>> humanize_bytes(1024 * 1234, precision=2)\n    '1.21 MB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=2)\n    '1.31 GB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=1)\n    '1.3 GB'\n\n    "
        config_0 = module_1.Config(str_0)
        var_0 = config_0.save()
    except BaseException:
        pass