# Automatically generated by Pynguin.
import ansible.plugins.inventory.generator as module_0

def test_case_0():
    try:
        bytes_0 = b'\xff\xf1n\x0b?Eg0'
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.verify_file(bytes_0)
        dict_0 = {bytes_0: inventory_module_0, bytes_0: bytes_0}
        inventory_module_1 = module_0.InventoryModule()
        var_1 = inventory_module_1.template(bytes_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        inventory_module_0 = None
        str_0 = '\ndest:\n    description: Destination file/path.\n    returned: success\n    type: str\n    sample: /path/to/file.txt\nsrc:\n    description: Source file used for the copy on the target machine.\n    returned: changed\n    type: str\n    sample: /home/httpd/.ansible/tmp/ansible-tmp-1423796390.97-147729857856000/source\nmd5sum:\n    description: MD5 checksum of the file after running copy.\n    returned: when supported\n    type: str\n    sample: 2a5aeecc61dc98c4d780b14b330e3282\nchecksum:\n    description: SHA1 checksum of the file after running copy.\n    returned: success\n    type: str\n    sample: 6e642bb8dd5c2e027bf21dd923337cbb4214f827\nbackup_file:\n    description: Name of backup file created.\n    returned: changed and if backup=yes\n    type: str\n    sample: /path/to/file.txt.2015-02-12@22:09~\ngid:\n    description: Group id of the file, after execution.\n    returned: success\n    type: int\n    sample: 100\ngroup:\n    description: Group of the file, after execution.\n    returned: success\n    type: str\n    sample: httpd\nowner:\n    description: Owner of the file, after execution.\n    returned: success\n    type: str\n    sample: httpd\nuid:\n    description: Owner id of the file, after execution.\n    returned: success\n    type: int\n    sample: 100\nmode:\n    description: Permissions of the target, after execution.\n    returned: success\n    type: str\n    sample: 0644\nsize:\n    description: Size of the target, after execution.\n    returned: success\n    type: int\n    sample: 1220\nstate:\n    description: State of the target, after execution.\n    returned: success\n    type: str\n    sample: file\n'
        set_0 = {str_0, str_0}
        inventory_module_1 = module_0.InventoryModule()
        var_0 = inventory_module_1.add_parents(inventory_module_0, str_0, str_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        bool_0 = True
        int_0 = -744
        tuple_0 = (bool_0, int_0)
        list_0 = [bool_0, tuple_0, bool_0]
        tuple_1 = (tuple_0, tuple_0, list_0, set_0)
        inventory_module_0 = module_0.InventoryModule()
        var_0 = inventory_module_0.parse(set_0, set_0, tuple_1)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_module_0 = module_0.InventoryModule()
        str_0 = ''
        set_0 = {inventory_module_0}
        bytes_0 = b'\xd5'
        tuple_0 = (bytes_0,)
        var_0 = inventory_module_0.add_parents(inventory_module_0, set_0, str_0, tuple_0)
        str_1 = '@.N L-r:f9  <VEEiWT'
        var_1 = inventory_module_0.add_parents(set_0, str_1, str_1, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'inentory'
        str_1 = 'child'
        str_2 = 'prets'
        str_3 = 'template_vars'
        var_0 = {}
        str_4 = 'b'
        str_5 = 'name'
        str_6 = 'a'
        str_7 = {str_5: str_6}
        str_8 = [str_7]
        var_1 = {}
        var_2 = {str_0: var_0, str_1: str_4, str_2: str_8, str_3: var_1}
        inventory_module_0 = module_0.InventoryModule()
        var_3 = var_2[str_0]
        var_4 = var_2[str_1]
        var_5 = var_2[str_2]
        var_6 = var_2[str_3]
        var_7 = inventory_module_0.add_parents(var_3, var_4, var_5, var_6)
    except BaseException:
        pass