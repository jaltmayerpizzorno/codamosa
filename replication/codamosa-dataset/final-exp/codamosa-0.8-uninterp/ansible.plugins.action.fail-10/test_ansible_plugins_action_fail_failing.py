# Automatically generated by Pynguin.
import ansible.plugins.action.fail as module_0

def test_case_0():
    try:
        float_0 = 2559.08
        bool_0 = True
        set_0 = {bool_0, float_0}
        str_0 = 'b}G<t})P;HbZV)Blrn`x'
        str_1 = "/usr/contrib/bin/machinfo | grep 'Number of CPUs'"
        action_module_0 = module_0.ActionModule(float_0, bool_0, set_0, str_0, str_1, set_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        str_0 = '^'
        bytes_0 = b'\xde\x18'
        list_0 = [bool_0, str_0, str_0, str_0]
        dict_0 = {bytes_0: str_0, bool_0: list_0}
        bool_1 = False
        int_0 = 1485
        bool_2 = None
        tuple_0 = None
        action_module_0 = module_0.ActionModule(bool_2, bool_0, dict_0, tuple_0, list_0, list_0)
        str_1 = '\n    The connection process wraps around a Connection object that manages\n    the connection to a remote device that persists over the playbook\n    '
        str_2 = 'q\\6^ES YQZ5~'
        bytes_1 = b'vOg1'
        tuple_1 = (bytes_1, bool_0, int_0)
        tuple_2 = ()
        set_0 = {tuple_1, str_0, tuple_2}
        str_3 = ''
        int_1 = -793
        action_module_1 = module_0.ActionModule(str_3, bytes_0, int_1, tuple_2, list_0, bool_1)
        action_module_2 = module_0.ActionModule(tuple_2, set_0, action_module_1, int_0, dict_0, tuple_1)
        int_2 = -3331
        action_module_3 = module_0.ActionModule(str_2, tuple_1, tuple_1, action_module_2, bool_0, int_2)
        var_0 = action_module_3.run(action_module_0, str_1)
    except BaseException:
        pass