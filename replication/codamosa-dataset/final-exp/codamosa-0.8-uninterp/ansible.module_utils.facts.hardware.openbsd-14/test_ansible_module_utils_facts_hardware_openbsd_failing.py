# Automatically generated by Pynguin.
import ansible.module_utils.facts.hardware.openbsd as module_0

def test_case_0():
    try:
        complex_0 = None
        bool_0 = False
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(bool_0)
        var_0 = open_b_s_d_hardware_0.populate(complex_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Failed to convert "%s": %s'
        set_0 = {str_0}
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(str_0, set_0)
        var_0 = open_b_s_d_hardware_0.get_memory_facts()
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = set()
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(set_0)
        open_b_s_d_hardware_collector_0 = module_0.OpenBSDHardwareCollector()
        var_0 = open_b_s_d_hardware_0.get_uptime_facts()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xd7\xe1\x06\xceo\x16W\xd2\xbe\x84\xd5x\x96\xae'
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(bytes_0)
        var_0 = open_b_s_d_hardware_0.get_processor_facts()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'fL(Z3mo>ScyBix>=?L,'
        list_0 = [str_0, str_0, str_0, str_0]
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(list_0, str_0)
        var_0 = open_b_s_d_hardware_0.get_device_facts()
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        open_b_s_d_hardware_0 = module_0.OpenBSDHardware(list_0)
        var_0 = open_b_s_d_hardware_0.get_dmi_facts()
    except BaseException:
        pass