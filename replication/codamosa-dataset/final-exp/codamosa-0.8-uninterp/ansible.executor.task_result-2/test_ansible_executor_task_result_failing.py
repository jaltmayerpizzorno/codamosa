# Automatically generated by Pynguin.
import ansible.executor.task_result as module_0
import ansible.parsing.dataloader as module_1

def test_case_0():
    try:
        bool_0 = None
        float_0 = 0.2
        task_result_0 = module_0.TaskResult(bool_0, float_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        str_0 = 'failed_when_result'
        task_result_0 = module_0.TaskResult(var_0, var_0, str_0, var_0)
        var_1 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'!\x91'
        str_0 = 'xNmXI}loM}jM?HpQQ['
        float_0 = 442.257169
        set_0 = set()
        int_0 = 1496
        tuple_0 = (str_0, float_0, set_0, int_0)
        task_result_0 = module_0.TaskResult(bytes_0, tuple_0, str_0)
        var_0 = task_result_0.is_skipped()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        bool_1 = False
        str_0 = 'is_ambiguous'
        task_result_0 = module_0.TaskResult(bool_0, bool_1, str_0)
        var_0 = task_result_0.needs_debugger(task_result_0)
    except BaseException:
        pass

def test_case_4():
    try:
        data_loader_0 = module_1.DataLoader()
        float_0 = 26.0
        str_0 = 'g-m{*ry$O36-.L{Df'
        task_result_0 = module_0.TaskResult(data_loader_0, float_0, str_0)
        var_0 = task_result_0.clean_copy()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = None
        str_0 = 'failed'
        bool_0 = False
        bool_1 = {str_0: bool_0}
        task_result_0 = module_0.TaskResult(var_0, var_0, bool_1)
        var_1 = task_result_0.is_failed()
        task_result_1 = module_0.TaskResult(var_0, var_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = dict()
        var_1 = dict()
        str_0 = 'ignore_errors'
        str_1 = 'debugger'
        bool_0 = True
        str_2 = 'on_failed'
        task_result_0 = module_0.TaskResult(str_1, var_0, var_1, var_1)
        var_2 = task_result_0.needs_debugger(bool_0)
        var_3 = dict()
        var_4 = dict()
        var_5 = {str_0: bool_0, str_1: str_2}
        task_result_1 = module_0.TaskResult(var_3, var_4, var_3, var_5)
        var_6 = task_result_1.needs_debugger(bool_0)
        var_7 = task_result_1.clean_copy()
    except BaseException:
        pass