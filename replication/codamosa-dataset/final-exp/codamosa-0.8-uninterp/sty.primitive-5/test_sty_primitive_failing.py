# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_0 = 'e.]n\\i\x0cC=&\tN;MdMd)Yk'
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_1.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        int_0 = -2439
        register_1 = module_0.Register()
        register_2 = register_1.copy()
        register_2.mute()
        register_3 = module_0.Register()
        list_0 = [int_0, int_0, int_0]
        str_0 = register_3.__call__(*list_0)
        type_0 = None
        register_3.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        type_0 = None
        register_0.set_eightbit_call(type_0)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        dict_0 = register_1.as_dict()
        var_0 = None
        var_1 = None
        list_0 = [var_0, var_1]
        list_1 = [list_0]
        register_2 = module_0.Register()
        register_2.set_rgb_call(list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        type_0 = None
        register_1.set_renderfunc(type_0, register_1)
        register_1.set_rgb_call(type_0)
        register_2 = register_1.copy()
        register_2.unmute()
        register_3 = module_0.Register()
        var_0 = register_1.as_namedtuple()
        list_0 = None
        style_0 = module_0.Style(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.mute()
        register_3 = register_0.copy()
        dict_1 = {}
        register_4 = module_0.Register()
        dict_2 = register_4.as_dict()
        dict_3 = register_0.as_dict()
        var_0 = register_4.as_namedtuple()
        style_0 = module_0.Style(**dict_1)
        type_0 = None
        register_4.set_renderfunc(type_0, dict_3)
        register_4.mute()
        str_0 = register_1.__call__(**dict_1)
        list_0 = [str_0]
        register_5 = register_4.copy()
        str_1 = register_3.__call__(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.mute()
        register_3 = module_0.Register()
        dict_1 = {}
        register_4 = module_0.Register()
        dict_2 = register_0.as_dict()
        str_0 = '~@[+o-tj'
        style_0 = module_0.Style()
        var_0 = register_1.__setattr__(str_0, style_0)
        register_4.unmute()
        var_1 = register_4.as_namedtuple()
        register_5 = module_0.Register()
        style_1 = module_0.Style(**dict_1)
        type_0 = None
        register_1.set_renderfunc(type_0, dict_2)
        str_1 = register_1.__call__(**dict_1)
        list_0 = [str_1]
        str_2 = register_1.__call__(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        str_0 = 't}|C|0,O\r( |Xa@N\x0c'
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        style_1 = module_0.Style()
        register_0.mute()
        register_0.unmute()
        str_1 = 'WC31{'
        register_1 = module_0.Register()
        register_2 = module_0.Register()
        var_1 = register_2.__setattr__(str_1, style_1)
        str_2 = 'gY]ZYvl5eEF'
        var_2 = register_0.__setattr__(str_2, style_1)
        register_0.mute()
        var_3 = register_0.as_namedtuple()
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        str_0 = '*K z|[\x0cxfc'
        bytes_0 = b'\xa8\xe0\xe9:\xd0\x1c\xf5|\x8dX\xae\x92$\x18\xb3'
        register_0.set_renderfunc(str_0, bytes_0)
        var_0 = register_0.as_namedtuple()
        type_0 = None
        tuple_0 = None
        register_0.set_renderfunc(type_0, tuple_0)
        register_0.set_eightbit_call(type_0)
        str_1 = None
        register_0.set_eightbit_call(type_0)
        var_1 = register_0.as_namedtuple()
        register_1 = register_0.copy()
        str_2 = '0['
        dict_0 = {str_1: str_2}
        var_2 = register_0.as_namedtuple()
        register_0.set_eightbit_call(type_0)
        register_2 = module_0.Register()
        type_1 = None
        str_3 = '.\x0b8lxD-zQWu?Z]`a'
        register_0.set_renderfunc(type_1, str_3)
        register_0.set_eightbit_call(type_0)
        str_4 = "The mute() method can only be used with objects that inherit from the 'Register class'."
        var_3 = register_0.as_namedtuple()
        list_0 = [str_4]
        register_0.unmute()
        register_0.set_renderfunc(dict_0, list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.mute()
        register_3 = register_0.copy()
        register_4 = register_3.copy()
        register_5 = register_3.copy()
        dict_1 = {}
        register_6 = module_0.Register()
        dict_2 = register_0.as_dict()
        str_0 = '~@[+o-tj'
        style_0 = module_0.Style()
        style_1 = module_0.Style()
        register_6.unmute()
        var_0 = register_6.as_namedtuple()
        register_7 = register_6.copy()
        style_2 = module_0.Style(**dict_1)
        type_0 = None
        register_4.set_renderfunc(type_0, dict_2)
        register_6.mute()
        str_1 = register_1.__call__(**dict_1)
        register_8 = module_0.Register()
        register_9 = register_3.copy()
        str_2 = 'dGO;R&M2kw'
        int_0 = None
        bool_0 = False
        list_0 = [style_1, str_2, dict_1, int_0, str_0, bool_0]
        style_3 = module_0.Style(*list_0)
        var_1 = register_8.__setattr__(str_1, style_3)
    except BaseException:
        pass

def test_case_10():
    try:
        register_0 = module_0.Register()
        dict_0 = {}
        render_type_0 = module_1.RenderType(**dict_0)
        list_0 = [render_type_0, register_0, register_0]
        style_0 = module_0.Style(*list_0)
        str_0 = '9jv#S\t\r\x0bbVFOb'
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass