# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    pass

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    register_0 = module_0.Register()
    callable_0 = None
    register_1 = register_0.copy()
    style_0 = module_0.Style()
    register_0.set_renderfunc(register_0, callable_0)
    register_2 = register_0.copy()
    register_2.mute()
    str_0 = 'izUR\r]Q+=w[{Z~;>|WL\t'
    register_3 = module_0.Register()
    var_0 = register_3.__setattr__(str_0, style_0)
    str_1 = register_2.__call__()

def test_case_3():
    register_0 = module_0.Register()

def test_case_4():
    register_0 = module_0.Register()
    callable_0 = None
    register_1 = register_0.copy()
    style_0 = module_0.Style()
    register_0.set_renderfunc(register_0, callable_0)
    register_2 = register_0.copy()
    register_2.mute()
    str_0 = 'izUR\r]Q+=w[{Z~;>|WL\t'
    var_0 = register_2.__setattr__(str_0, style_0)
    str_1 = register_2.__call__()

def test_case_5():
    register_0 = module_0.Register()
    str_0 = register_0.__call__()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    dict_0 = register_2.as_dict()

def test_case_6():
    type_0 = None
    str_0 = 'be{'
    register_0 = module_0.Register()
    register_0.set_renderfunc(type_0, str_0)

def test_case_7():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    register_2.mute()

def test_case_8():
    register_0 = module_0.Register()
    register_0.unmute()
    var_0 = register_0.as_namedtuple()
    register_1 = register_0.copy()
    register_0.mute()

def test_case_9():
    register_0 = module_0.Register()
    dict_0 = register_0.as_dict()

def test_case_10():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    var_0 = register_1.as_namedtuple()

def test_case_11():
    dict_0 = {}
    register_0 = module_0.Register()
    var_0 = register_0.as_namedtuple()
    register_1 = module_0.Register()
    register_2 = register_1.copy()
    str_0 = register_2.__call__(**dict_0)
    str_1 = 'Q3ZG6~ '
    str_2 = register_1.__call__()
    style_0 = module_0.Style(**dict_0)
    int_0 = -1741
    list_0 = [str_0, str_0, str_1, int_0]
    str_3 = register_1.__call__(*list_0)
    var_1 = register_2.__setattr__(str_1, style_0)
    dict_1 = register_2.as_dict()
    register_3 = module_0.Register()

def test_case_12():
    register_0 = module_0.Register()
    dict_0 = register_0.as_dict()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    register_2.mute()
    register_3 = module_0.Register()
    register_4 = register_3.copy()
    dict_1 = {}
    int_0 = 528
    list_0 = [int_0]
    register_5 = register_0.copy()
    str_0 = register_5.__call__(*list_0)
    register_6 = module_0.Register()
    dict_2 = register_0.as_dict()
    str_1 = '~@[+o-tj'
    style_0 = module_0.Style()
    var_0 = register_1.__setattr__(str_1, style_0)
    register_6.unmute()
    var_1 = register_6.as_namedtuple()
    register_7 = module_0.Register()
    style_1 = module_0.Style(**dict_1)
    type_0 = None
    register_4.set_renderfunc(type_0, dict_2)
    register_6.mute()
    str_2 = register_1.__call__(**dict_1)
    register_8 = module_0.Register()
    str_3 = register_8.__call__()
    register_9 = register_8.copy()
    register_10 = register_9.copy()
    var_2 = register_3.as_namedtuple()