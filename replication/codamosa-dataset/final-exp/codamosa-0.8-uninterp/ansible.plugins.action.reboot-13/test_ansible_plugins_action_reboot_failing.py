# Automatically generated by Pynguin.
import ansible.plugins.action.reboot as module_0

def test_case_0():
    try:
        action_module_0 = module_0.ActionModule()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 92
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        var_0 = action_module_0.run_test_command(action_module_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        var_0 = action_module_0.deprecated_args()
        bytes_0 = b'\\$\xfa\x01\\\t\x86,2'
        timed_out_exception_0 = None
        var_1 = action_module_0.perform_reboot(bytes_0, timed_out_exception_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 92
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        str_0 = '~2q[t?9?d{s[:hSnP/'
        var_0 = action_module_0.validate_reboot(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        float_0 = 0.0
        str_0 = '"7AN7WnQS\'7'
        var_0 = action_module_0.check_boot_time(float_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        str_0 = "})pE'EJ-|7Eq\x0c("
        bool_0 = True
        timed_out_exception_0 = module_0.TimedOutException()
        var_0 = action_module_0.do_until_success_or_timeout(str_0, bool_0, list_0, timed_out_exception_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        bool_0 = False
        var_0 = action_module_0.deprecated_args()
        var_1 = action_module_0.get_shutdown_command_args(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        dict_0 = None
        var_0 = action_module_0.run(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        var_0 = action_module_0.deprecated_args()
        str_0 = "})pE'EJ-|7Eq\x0c("
        bool_0 = False
        timed_out_exception_0 = module_0.TimedOutException()
        var_1 = action_module_0.do_until_success_or_timeout(str_0, bool_0, list_0, timed_out_exception_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        str_0 = 'b#h@;#vs&|sr4C>gc'
        var_0 = action_module_0.get_system_boot_time(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        timed_out_exception_0 = module_0.TimedOutException()
        tuple_0 = (int_0,)
        var_0 = action_module_0.get_distribution(tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        var_0 = action_module_0.deprecated_args()
        bool_0 = True
        timed_out_exception_0 = module_0.TimedOutException()
        action_module_1 = None
        set_0 = set()
        var_1 = action_module_0.do_until_success_or_timeout(action_module_1, bool_0, int_0, set_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -138
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        action_module_0 = module_0.ActionModule(*list_0)
        var_0 = action_module_0.deprecated_args()
        bool_0 = True
        timed_out_exception_0 = module_0.TimedOutException()
        dict_0 = {}
        complex_0 = None
        var_1 = action_module_0.do_until_success_or_timeout(list_0, bool_0, dict_0, complex_0)
    except BaseException:
        pass