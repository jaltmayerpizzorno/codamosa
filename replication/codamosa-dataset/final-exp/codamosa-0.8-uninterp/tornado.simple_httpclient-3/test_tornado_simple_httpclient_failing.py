# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.httputil as module_1
import tornado.tcpclient as module_2
import tornado.httpclient as module_3
import socket as module_4
import tornado.ioloop as module_5
import datetime as module_6
import builtins as module_7
import ssl as module_8

def test_case_0():
    try:
        str_0 = 'e@]h\x0cpYN5N'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        str_1 = 'tornado.simple_httpclient'
        str_2 = None
        str_3 = h_t_t_p_stream_closed_error_0.__str__()
        str_4 = 'p'
        h_t_t_p_headers_0 = module_1.HTTPHeaders()
        h_t_t_p_headers_1 = h_t_t_p_headers_0.copy()
        h_t_t_p_headers_2 = h_t_t_p_headers_1.copy()
        t_c_p_client_0 = module_2.TCPClient()
        str_5 = 'Ta_?'
        callable_0 = None
        int_0 = 4434
        none_type_0 = None
        none_type_1 = None
        h_t_t_p_request_0 = module_3.HTTPRequest(str_5, str_2, str_5, str_4, str_4, str_0, callable_0, int_0, str_1, str_2, str_4, none_type_0, str_0, none_type_1)
        h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_2)
        address_family_0 = module_4.AddressFamily.AF_X25
        h_t_t_p_connection_0 = module_0._HTTPConnection(t_c_p_client_0, h_t_t_p_request_0, h_t_t_p_stream_closed_error_1, address_family_0, int_0, t_c_p_client_0, int_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '`'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        str_1 = 'e@]h\x0cpYN5N'
        h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_1)
        str_2 = h_t_t_p_stream_closed_error_1.__str__()
        str_3 = 'iFR\rkhPe-<j3J'
        t_c_p_client_0 = module_2.TCPClient()
        callable_0 = None
        str_4 = ' FU\x0c1B-J#KZ'
        str_5 = ')7l;13V=\x0c>4\t{G$~;H'
        none_type_0 = None
        i_o_loop_0 = module_5.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        h_t_t_p_request_0 = module_3.HTTPRequest(str_4, str_3, str_0, str_0, str_5, callable_0, none_type_0, i_o_loop_2)
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, h_t_t_p_stream_closed_error_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '`'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        str_1 = 'e@]h\x0cpYN5N'
        h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_1)
        str_2 = 'tornado.simple_httpclient'
        str_3 = None
        str_4 = h_t_t_p_stream_closed_error_1.__str__()
        str_5 = 'iFR\rkhPe-<j3J'
        h_t_t_p_headers_0 = module_1.HTTPHeaders()
        h_t_t_p_headers_1 = h_t_t_p_headers_0.copy()
        h_t_t_p_headers_2 = h_t_t_p_headers_0.copy()
        int_0 = 4434
        dict_0 = {}
        i_o_loop_0 = module_5.IOLoop(**dict_0)
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        str_6 = '"Z'
        optional_0 = None
        bool_0 = False
        h_t_t_p_timeout_error_0 = None
        str_7 = '@Y%u;|Q>;D Ygn|'
        dict_1 = {str_1: h_t_t_p_stream_closed_error_1, str_6: i_o_loop_0, str_7: int_0}
        h_t_t_p_request_0 = module_3.HTTPRequest(str_6, str_5, str_0, str_2, optional_0, str_2, bool_0, h_t_t_p_timeout_error_0, bool_0, str_3, dict_1)
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, i_o_loop_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '`'
        str_1 = 'e@]h\x0cpYN5N'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_1)
        str_2 = '+%>lLP;KT/O 2hk;X]\n'
        str_3 = h_t_t_p_stream_closed_error_0.__str__()
        list_0 = []
        str_4 = '8'
        t_c_p_client_0 = module_2.TCPClient()
        int_0 = 4407
        str_5 = h_t_t_p_stream_closed_error_0.__str__()
        str_6 = ')7l)13V=\x0c>4\t{G$~;H'
        dict_0 = {}
        i_o_loop_0 = module_5.IOLoop(**dict_0)
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        h_t_t_p_headers_0 = module_1.HTTPHeaders()
        timedelta_0 = module_6.timedelta()
        bool_0 = True
        h_t_t_p_request_0 = module_3.HTTPRequest(str_0, str_6, h_t_t_p_headers_0, str_1, int_0, str_2, timedelta_0, str_2, str_2, bool_0, bool_0)
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        dict_1 = {str_4: dict_0, str_3: str_5, bool_0: str_0}
        int_1 = 690
        h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, list_0, dict_1, int_0, t_c_p_client_0, int_1, int_0)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '+%>lLP;KT/O 2hk;X]\n'
        str_1 = '8'
        t_c_p_client_0 = module_2.TCPClient()
        int_0 = 4467
        str_2 = ' FU\x0c1B-J#KZ'
        str_3 = ')7l)13V=\x0c>4\t{G$~;H'
        dict_0 = {}
        i_o_loop_0 = module_5.IOLoop(**dict_0)
        i_o_loop_1 = i_o_loop_0.instance()
        h_t_t_p_headers_0 = module_1.HTTPHeaders()
        timedelta_0 = module_6.timedelta()
        bool_0 = True
        h_t_t_p_request_0 = module_3.HTTPRequest(str_3, str_3, h_t_t_p_headers_0, str_2, int_0, str_0, timedelta_0, str_0, str_0, bool_0, bool_0)
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        str_4 = 'DU'
        h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_4)
        simple_async_h_t_t_p_client_0.close()
        str_5 = h_t_t_p_timeout_error_0.__str__()
        bytes_0 = b'\x9a$\x8c\xdeG\xd8D\x95\x13\xb6\xaf\x97\x8d\x9f'
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, bytes_0)
        h_t_t_p_timeout_error_1 = module_0.HTTPTimeoutError(str_1)
        callable_0 = None
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
        int_1 = -1896
        int_2 = 1914
        h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, h_t_t_p_headers_0, callable_0, int_0, t_c_p_client_0, int_1, int_2)
        h_t_t_p_connection_0.on_connection_close()
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'm`a'
        h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
        str_1 = 'e@]h\x0cpYN5N'
        str_2 = h_t_t_p_stream_closed_error_0.__str__()
        h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_1)
        str_3 = '+%>lLP;KT/O 2hk;X]\n'
        str_4 = h_t_t_p_stream_closed_error_1.__str__()
        t_c_p_client_0 = module_2.TCPClient()
        int_0 = 4467
        str_5 = ')7l)13V=\x0c>4\t{G$~;H'
        dict_0 = {}
        i_o_loop_0 = module_5.IOLoop(**dict_0)
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        h_t_t_p_headers_0 = module_1.HTTPHeaders()
        timedelta_0 = module_6.timedelta()
        bool_0 = True
        h_t_t_p_request_0 = module_3.HTTPRequest(str_0, str_5, h_t_t_p_headers_0, str_1, int_0, str_3, timedelta_0, str_3, str_3, bool_0, bool_0)
        simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
        str_6 = 'DU'
        h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_6)
        h_t_t_p_stream_closed_error_2 = module_0.HTTPStreamClosedError(str_6)
        str_7 = 'tornado.simple_httpclient'
        dict_1 = {str_3: str_7}
        base_exception_0 = module_7.BaseException()
        simple_async_h_t_t_p_client_0.initialize(int_0, dict_1, int_0, base_exception_0)
        str_8 = h_t_t_p_timeout_error_0.__str__()
        bytes_0 = b'\x9a$\x8c\xdeG\xd8D\x95\x13\xb6\xaf\x97\x8d\x9f'
        simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, bytes_0)
        h_t_t_p_timeout_error_1 = module_0.HTTPTimeoutError(str_1)
        s_s_l_context_0 = module_8.SSLContext()
        simple_async_h_t_t_p_client_1 = None
        callable_0 = None
        h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_1, h_t_t_p_request_0, s_s_l_context_0, callable_0, int_0, t_c_p_client_0, int_0, int_0)
        h_t_t_p_connection_0.finish()
    except BaseException:
        pass