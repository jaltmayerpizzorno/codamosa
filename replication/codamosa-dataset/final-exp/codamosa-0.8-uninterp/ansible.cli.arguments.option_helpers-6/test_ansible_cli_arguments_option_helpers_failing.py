# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        str_0 = '/usr/bin/netstat -niw'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_0)
        list_0 = []
        var_0 = sorting_help_formatter_0.add_arguments(list_0)
        str_1 = '^>#f6]'
        var_1 = module_0.add_basedir_options(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '?Z(\tU@\t :|f}:2K'
        tuple_0 = ()
        float_0 = 939.953
        str_1 = '8voLWn'
        bytes_0 = b'[W\xd7\xe6Q\xa1\xaa"\x8d\x1a\xb7jV\xcc!\xacS'
        list_0 = [str_1]
        unrecognized_argument_0 = module_0.UnrecognizedArgument(str_1, bytes_0, list_0, list_0)
        var_0 = unrecognized_argument_0.__call__(str_0, tuple_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        bytes_0 = b''
        float_0 = -476.5343
        prepend_list_action_0 = module_0.PrependListAction(dict_0, bytes_0, float_0)
        var_0 = module_0.add_fork_options(prepend_list_action_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2338.2609
        prepend_list_action_0 = None
        set_0 = {float_0, float_0, prepend_list_action_0, float_0}
        bool_0 = True
        int_0 = None
        ansible_version_0 = module_0.AnsibleVersion(prepend_list_action_0, set_0, bool_0, int_0)
        str_0 = 'K(DgCZKUg;nW'
        str_1 = 'f]\r6\x0b'
        prepend_list_action_1 = module_0.PrependListAction(float_0, ansible_version_0, ansible_version_0, str_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = module_0.version()
        bool_0 = True
        var_1 = module_0.add_async_options(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        argument_parser_0 = module_1.ArgumentParser()
        var_0 = module_0.add_output_options(argument_parser_0)
        str_0 = None
        var_1 = module_0.add_connect_options(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'AEb~!7o<\tX'
        var_0 = module_0.add_fork_options(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'<\xaf\xe3g\x8f'
        float_0 = -1183.0
        bool_0 = True
        float_1 = 60.0
        str_0 = 'V$.poV=J*\x0c@uGM/'
        bool_1 = True
        int_0 = 1587
        dict_0 = {bytes_0: bool_1, bytes_0: int_0}
        ansible_version_0 = module_0.AnsibleVersion(float_0, bool_0, float_1, str_0, dict_0)
        var_0 = module_0.create_base_parser(bytes_0, ansible_version_0, dict_0)
        tuple_0 = ()
        str_1 = 'latest'
        complex_0 = None
        sorting_help_formatter_0 = None
        argument_parser_0 = module_1.ArgumentParser(complex_0, sorting_help_formatter_0, ansible_version_0)
        var_1 = module_0.add_meta_options(argument_parser_0)
        dict_1 = {str_1: float_0, str_0: float_0}
        var_2 = ansible_version_0.__call__(dict_0, ansible_version_0, tuple_0, dict_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xfe!5@?\x89\r\x84\x9c\xae\xbb\xccc'
        bool_0 = True
        bool_1 = False
        list_0 = [bool_1, bool_0, bool_0]
        bool_2 = True
        set_0 = {bool_1, bool_2, bool_2, bytes_0}
        int_0 = -869
        ansible_version_0 = module_0.AnsibleVersion(bool_0, bool_1, list_0, set_0, int_0)
        float_0 = -1187.583
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(ansible_version_0, float_0)
        var_0 = module_0.add_module_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 574.62
        var_0 = module_0.add_runas_options(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = module_0.version()
        unrecognized_argument_0 = None
        list_0 = []
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        set_0 = None
        var_1 = module_0.add_runtask_options(set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = module_0.version()
        int_0 = 144
        var_1 = module_0.add_subset_options(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        set_0 = set()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_0)
        bool_0 = True
        tuple_0 = ()
        tuple_1 = (set_0, sorting_help_formatter_0, bool_0, tuple_0)
        var_0 = module_0.add_vault_options(tuple_1)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -2811.76
        int_0 = 2364
        bool_0 = True
        bool_1 = True
        unrecognized_argument_0 = module_0.UnrecognizedArgument(int_0, bool_0, bool_1)
        set_0 = {int_0, bool_0, int_0}
        ansible_version_0 = module_0.AnsibleVersion(float_0, unrecognized_argument_0, set_0)
        set_1 = {ansible_version_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(set_1, bool_0)
        var_0 = module_0.add_fork_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = module_0.version()
        complex_0 = None
        dict_0 = {complex_0: complex_0}
        unrecognized_argument_0 = None
        list_0 = []
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        int_0 = 257
        var_1 = module_0.unfrack_path()
        var_2 = module_0.maybe_unfrack_path(dict_0)
        float_0 = -2370.069242
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0, int_0)
        var_3 = module_0.add_inventory_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = module_0.version()
        complex_0 = None
        unrecognized_argument_0 = None
        list_0 = [complex_0]
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        var_1 = module_0.unfrack_path()
        bool_0 = True
        str_0 = 'nx'
        int_0 = -214
        bool_1 = False
        argument_parser_0 = module_1.ArgumentParser(int_0, bool_0, bool_1, unrecognized_argument_0)
        dict_0 = {argument_parser_0: int_0, var_1: int_0}
        set_0 = {var_1, str_0, argument_parser_0}
        str_1 = ''
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_1)
        ansible_version_0 = module_0.AnsibleVersion(dict_0, set_0, sorting_help_formatter_0, sorting_help_formatter_0)
        var_2 = module_0.add_runas_prompt_options(argument_parser_0, ansible_version_0)
        var_3 = module_0.ensure_value(argument_parser_0, str_0, list_0)
        var_4 = module_0.add_async_options(bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = module_0.version()
        unrecognized_argument_0 = None
        list_0 = []
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        bytes_0 = b'o\x15\x8a\xab\xcc\xad"y!2\xa3[h\xba?\x95V'
        tuple_0 = None
        var_1 = module_0.add_runas_prompt_options(bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = module_0.version()
        str_0 = 'yo<-g'
        var_1 = module_0.version(str_0)
        var_2 = module_0.unfrack_path()
        bool_0 = True
        var_3 = module_0.add_async_options(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bool_0 = True
        list_0 = []
        str_0 = ',_R'
        var_0 = module_0.ensure_value(bool_0, str_0, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '*~0.;L$?3.6:'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_0)
        var_0 = module_0.add_tasknoplay_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        bytes_0 = b''
        float_0 = -476.5343
        prepend_list_action_0 = module_0.PrependListAction(dict_0, bytes_0, float_0)
        set_0 = set()
        list_0 = [set_0, float_0]
        var_0 = prepend_list_action_0.__call__(set_0, list_0, prepend_list_action_0, set_0)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = module_0.version()
        bool_0 = False
        unrecognized_argument_0 = None
        list_0 = []
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        var_1 = module_0.unfrack_path()
        bytes_0 = b'\xb0\xd7r\x17\xc9jQ\x8d\xda\x9b\x8f\xb0\xdb!'
        str_0 = '\\B+B{E`wC9?|rHK<L'
        bool_1 = True
        prepend_list_action_1 = module_0.PrependListAction(bytes_0, bytes_0, bool_0, str_0, bool_1)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = None
        dict_0 = {int_0: int_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(dict_0)
        var_0 = module_0.add_basedir_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_23():
    try:
        var_0 = module_0.version()
        set_0 = {var_0, var_0, var_0}
        argument_parser_0 = None
        str_0 = '=8>fgtH'
        ansible_version_0 = None
        str_1 = None
        dict_0 = {str_0: ansible_version_0, str_0: var_0, str_1: argument_parser_0}
        bool_0 = False
        float_0 = -17.021603
        ansible_version_1 = module_0.AnsibleVersion(dict_0, bool_0, float_0)
        argument_parser_1 = module_1.ArgumentParser(set_0, argument_parser_0, ansible_version_1)
        var_1 = module_0.add_runtask_options(argument_parser_1)
        unrecognized_argument_0 = None
        list_0 = []
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        var_2 = module_0.unfrack_path()
        bool_1 = True
        str_2 = 'nx'
        var_3 = module_0.ensure_value(bool_1, str_2, list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = -290
        tuple_0 = ()
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(tuple_0, int_0)
        argument_parser_0 = module_1.ArgumentParser(int_0, sorting_help_formatter_0)
        dict_0 = {argument_parser_0: argument_parser_0, sorting_help_formatter_0: sorting_help_formatter_0}
        float_0 = -2656.9095
        argument_parser_1 = module_1.ArgumentParser(dict_0, tuple_0, float_0)
        var_0 = module_0.add_inventory_options(argument_parser_1)
        var_1 = module_0.version()
        unrecognized_argument_0 = None
        list_0 = []
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        var_2 = module_0.unfrack_path()
        str_0 = ',_R'
        var_3 = module_0.add_tasknoplay_options(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        var_0 = module_0.version()
        complex_0 = None
        unrecognized_argument_0 = None
        list_0 = []
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        str_0 = ''
        var_1 = module_0.unfrack_path()
        str_1 = 'wb$'
        dict_0 = {str_1: prepend_list_action_0}
        list_1 = []
        tuple_0 = (dict_0, complex_0, list_1)
        argument_parser_0 = module_1.ArgumentParser(tuple_0, complex_0, unrecognized_argument_0, str_0)
        var_2 = module_0.add_subset_options(argument_parser_0)
        bool_0 = True
        str_2 = 'nx'
        var_3 = module_0.ensure_value(bool_0, str_2, list_0)
    except BaseException:
        pass

def test_case_26():
    try:
        var_0 = module_0.version()
        complex_0 = None
        unrecognized_argument_0 = None
        list_0 = [complex_0]
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        var_1 = module_0.unfrack_path()
        bool_0 = True
        str_0 = 'nx'
        int_0 = -214
        bool_1 = False
        argument_parser_0 = module_1.ArgumentParser(int_0, bool_0, bool_1, unrecognized_argument_0)
        str_1 = ''
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(str_1)
        var_2 = module_0.ensure_value(argument_parser_0, str_0, list_0)
        var_3 = module_0.add_async_options(bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        set_0 = None
        list_0 = []
        var_0 = module_0.maybe_unfrack_path(list_0)
        bool_0 = True
        argument_parser_0 = module_1.ArgumentParser(set_0, bool_0)
        var_1 = module_0.add_async_options(argument_parser_0)
        var_2 = module_0.version()
        complex_0 = None
        list_1 = [complex_0]
        var_3 = module_0.unfrack_path()
        bool_1 = True
        str_0 = 'nx'
        var_4 = module_0.ensure_value(bool_1, str_0, list_1)
    except BaseException:
        pass

def test_case_28():
    try:
        var_0 = module_0.version()
        float_0 = -2222.0246
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0)
        int_0 = None
        argument_parser_0 = module_1.ArgumentParser(sorting_help_formatter_0, int_0)
        var_1 = module_0.add_runas_options(argument_parser_0)
        set_0 = {var_0}
        bool_0 = True
        unrecognized_argument_0 = None
        list_0 = []
        prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
        var_2 = module_0.unfrack_path()
        str_0 = ',_R'
        ansible_version_0 = module_0.AnsibleVersion(unrecognized_argument_0, set_0, bool_0, prepend_list_action_0, unrecognized_argument_0)
        var_3 = module_0.create_base_parser(ansible_version_0)
        bool_1 = False
        var_4 = module_0.ensure_value(bool_1, str_0, list_0)
    except BaseException:
        pass