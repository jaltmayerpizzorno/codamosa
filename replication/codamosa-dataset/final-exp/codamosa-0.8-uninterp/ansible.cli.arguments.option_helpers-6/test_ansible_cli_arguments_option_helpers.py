# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    pass

def test_case_1():
    var_0 = module_0.version()

def test_case_2():
    bytes_0 = b'<\xaf\xe3g\x8f'
    float_0 = -1183.0
    bool_0 = True
    float_1 = 60.0
    str_0 = 'V$.poV=J*\x0c@uGM/'
    bool_1 = True
    int_0 = 1587
    dict_0 = {bytes_0: bool_1, bytes_0: int_0}
    ansible_version_0 = module_0.AnsibleVersion(float_0, bool_0, float_1, str_0, dict_0)
    var_0 = module_0.create_base_parser(bytes_0, ansible_version_0, dict_0)

def test_case_3():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_check_options(argument_parser_0)

def test_case_4():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_output_options(argument_parser_0)
    str_0 = '-o'
    str_1 = '-t'
    str_2 = '/t<Ip/test'
    str_3 = [str_0, str_1, str_2]
    var_1 = argument_parser_0.parse_args(str_3)

def test_case_5():
    var_0 = module_0.unfrack_path()

def test_case_6():
    int_0 = 3768
    set_0 = set()
    bool_0 = False
    bytes_0 = b'YY\x14\x800?7\xd1O\x8b\x1d4\x91\xbe\xf4Zo'
    dict_0 = {bool_0: int_0}
    list_0 = [set_0, bool_0, set_0]
    ansible_version_0 = module_0.AnsibleVersion(bool_0, bytes_0, dict_0, list_0)
    bytes_1 = b'\xb5\xc5Z\x8b\xd3\xb7/\x04'
    ansible_version_1 = module_0.AnsibleVersion(set_0, ansible_version_0, bytes_1)
    int_1 = None
    int_2 = 334
    int_3 = -1485
    float_0 = 60.0
    unrecognized_argument_0 = module_0.UnrecognizedArgument(int_1, int_2, int_3, float_0, dict_0)
    str_0 = '?'
    prepend_list_action_0 = module_0.PrependListAction(dict_0, dict_0, str_0, bytes_0, int_2)

def test_case_7():
    var_0 = module_0.version()
    bytes_0 = b'\x87\xe1\xfd\xd2'
    bool_0 = True
    list_0 = [bool_0, bytes_0]
    var_1 = module_0.maybe_unfrack_path(list_0)

def test_case_8():
    str_0 = 'test_add_vault'
    argument_parser_0 = module_1.ArgumentParser(str_0)
    var_0 = module_0.add_vault_options(argument_parser_0)
    var_1 = dir(argument_parser_0)
    var_2 = print(var_1)
    var_3 = argument_parser_0.parse_args
    var_4 = dir(var_3)
    var_5 = print(var_4)

def test_case_9():
    var_0 = module_0.version()
    set_0 = {var_0}
    bool_0 = True
    complex_0 = None
    dict_0 = {complex_0: complex_0}
    unrecognized_argument_0 = None
    list_0 = []
    prepend_list_action_0 = module_0.PrependListAction(unrecognized_argument_0, list_0, unrecognized_argument_0)
    var_1 = module_0.unfrack_path()
    set_1 = {var_1, var_1, var_0}
    float_0 = -751.0
    int_0 = -616
    str_0 = '?)\\&6GMDFZ'
    ansible_version_0 = module_0.AnsibleVersion(float_0, int_0, str_0)
    argument_parser_0 = module_1.ArgumentParser(set_1, ansible_version_0, dict_0, set_1)
    dict_1 = {}
    list_1 = [float_0, ansible_version_0]
    bytes_0 = b'\x96\xc4\xb7?\xa6\xdf\xbd\xd3\xab\x9e]cs'
    list_2 = []
    ansible_version_1 = module_0.AnsibleVersion(bytes_0, dict_0, list_2)
    var_2 = ansible_version_1.__call__(argument_parser_0, dict_1, list_1)
    str_1 = ',_R'
    ansible_version_2 = module_0.AnsibleVersion(unrecognized_argument_0, set_0, bool_0, prepend_list_action_0, unrecognized_argument_0)
    var_3 = module_0.create_base_parser(ansible_version_2)
    bool_1 = False
    var_4 = module_0.ensure_value(bool_1, str_1, list_0)
    var_5 = module_0.add_async_options(complex_0)
    var_6 = module_0.maybe_unfrack_path(unrecognized_argument_0)

def test_case_10():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_connect_options(argument_parser_0)
    str_0 = '-T'
    str_1 = '11'
    str_2 = '-k'
    str_3 = '--connection'
    str_4 = 'ssh'
    str_5 = [str_0, str_1, str_2, str_3, str_4]
    var_1 = argument_parser_0.parse_args(str_5)