# Automatically generated by Pynguin.
import urllib.error as module_0
import ansible.galaxy.api as module_1
import threading as module_2

def test_case_0():
    try:
        str_0 = 'https://localhost'
        int_0 = 404
        str_1 = 'Not found'
        var_0 = None
        h_t_t_p_error_0 = module_0.HTTPError(str_0, int_0, str_1, var_0, var_0)
        str_2 = 'Test error'
        galaxy_error_0 = module_1.GalaxyError(h_t_t_p_error_0, str_2)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -1347
        set_0 = {int_0}
        list_0 = []
        list_1 = [set_0, set_0, list_0]
        bool_0 = True
        str_0 = 'Retry limit exceeded: %d'
        tuple_0 = (str_0, set_0)
        galaxy_a_p_i_0 = module_1.GalaxyAPI(list_0, set_0, list_1, bool_0, tuple_0)
        var_0 = galaxy_a_p_i_0.__repr__()
        str_1 = 'OuD\x0bc\x0b\t*Q\nD'
        str_2 = 'x\x0c%s<yU'
        str_3 = None
        dict_0 = {str_3: str_2, str_1: str_3, str_3: str_2}
        bytes_0 = b'\xd9'
        list_2 = []
        collection_version_metadata_0 = module_1.CollectionVersionMetadata(list_0, bytes_0, list_0, list_2, bool_0, tuple_0)
        float_0 = -1295.0
        galaxy_a_p_i_1 = module_1.GalaxyAPI(tuple_0, float_0, float_0, tuple_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'testPurl9'
        str_1 = 'test_key'
        str_2 = 'tet_secret'
        str_3 = 'ztest_name'
        galaxy_a_p_i_0 = module_1.GalaxyAPI(str_3, str_0, str_1, str_2)
        galaxy_a_p_i_1 = module_1.GalaxyAPI(str_1, str_0, str_1, str_2)
        galaxy_a_p_i_2 = module_1.GalaxyAPI(str_0, str_0, str_1, str_2)
        var_0 = galaxy_a_p_i_0.__repr__()
        var_1 = str_0 < galaxy_a_p_i_2
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1347
        set_0 = {int_0}
        list_0 = []
        list_1 = [set_0, set_0, list_0]
        bool_0 = True
        str_0 = 'Retry limit exceeded: %d'
        tuple_0 = (str_0, set_0)
        galaxy_a_p_i_0 = module_1.GalaxyAPI(list_0, set_0, list_1, bool_0, tuple_0)
        var_0 = galaxy_a_p_i_0.__repr__()
        str_1 = None
        dict_0 = {str_1: str_0, str_1: str_1, str_1: str_0}
        float_0 = 0.2
        dict_1 = {float_0: galaxy_a_p_i_0, int_0: list_0, str_1: dict_0}
        str_2 = "Unable to find APTITUDE in path. Please make sure to have APTITUDE in path or use 'force_apt_get=True'"
        galaxy_error_0 = None
        float_1 = 714.0
        galaxy_a_p_i_1 = module_1.GalaxyAPI(tuple_0, bool_0, tuple_0, float_0, galaxy_a_p_i_0, dict_1, str_2, galaxy_error_0, float_1)
        galaxy_error_1 = module_1.GalaxyError(list_1, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = None
        list_0 = [bool_0, bool_0]
        str_0 = ') *$&\r'
        dict_0 = {str_0: str_0, str_0: str_0}
        int_0 = 25
        galaxy_a_p_i_0 = module_1.GalaxyAPI(dict_0, dict_0, int_0, int_0, int_0)
        var_0 = module_1.is_rate_limit_exception(list_0)
        var_1 = galaxy_a_p_i_0.__unicode__()
        var_2 = galaxy_a_p_i_0.__repr__()
        var_3 = module_1.cache_lock(list_0)
        var_4 = galaxy_a_p_i_0.__str__()
        var_5 = module_1.get_cache_id(bool_0)
        tuple_0 = ()
        list_1 = [str_0]
        tuple_1 = (tuple_0, list_1)
        var_6 = module_1.is_rate_limit_exception(tuple_1)
        collection_metadata_0 = module_1.CollectionMetadata(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'test_name'
        str_1 = 'test_key'
        str_2 = 'tet_secret'
        str_3 = 'ztest_name'
        galaxy_a_p_i_0 = module_1.GalaxyAPI(str_3, str_1, str_1, str_2)
        galaxy_a_p_i_1 = module_1.GalaxyAPI(str_0, str_3, str_1, str_2)
        galaxy_a_p_i_2 = module_1.GalaxyAPI(str_0, str_0, str_1, str_2)
        var_0 = galaxy_a_p_i_1 < galaxy_a_p_i_2
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'url'
        str_1 = 'code'
        str_2 = 'msg'
        str_3 = 'hdrs'
        str_4 = 'utf8'
        h_t_t_p_error_0 = module_0.HTTPError(str_0, str_1, str_2, str_3, str_4)
        galaxy_error_0 = module_1.GalaxyError(h_t_t_p_error_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        thread_0 = module_2.Thread()
        list_0 = [thread_0, thread_0, thread_0, thread_0]
        str_0 = 'gather_subset'
        dict_0 = {str_0: list_0}
        int_0 = 1901
        bytes_0 = b'\x15\xb1~D(Pqh\x1b\xf67b\x8c\xbd\xe4'
        set_0 = set()
        list_1 = [str_0, str_0]
        tuple_0 = (dict_0,)
        tuple_1 = (set_0, tuple_0, tuple_0, list_1)
        int_1 = 443
        galaxy_a_p_i_0 = module_1.GalaxyAPI(bytes_0, set_0, list_1, tuple_1, str_0, list_0, int_1, int_0, list_1)
        galaxy_error_0 = module_1.GalaxyError(galaxy_a_p_i_0, thread_0)
    except BaseException:
        pass