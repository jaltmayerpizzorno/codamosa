# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        str_0 = '{De9eQowXqWe\x0c'
        complex_0 = None
        var_0 = module_0.sanitize_keys(complex_0, str_0)
        list_0 = [str_0]
        tuple_0 = ()
        set_0 = set()
        var_1 = module_0.remove_values(tuple_0, set_0)
        var_2 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = 'z/QI>t7\tIj\\g!'
        list_0 = [bool_0, bool_0, str_0]
        str_1 = 'C^|>^DPYYbT`k'
        var_0 = module_0.remove_values(list_0, str_1)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        str_0 = 'z/QI>t7\tIj\\g!'
        list_0 = [bool_0, bool_0, str_0]
        str_1 = 'C^|>^DPYYbT`k'
        var_0 = module_0.remove_values(list_0, str_1)
        str_2 = '+zMi[a.QPy{qzd$1RCl'
        str_3 = "we@k8'<$&%9+$Urf="
        dict_0 = {str_2: str_1, str_3: list_0}
        bytes_0 = b'\xcc\xf3ek\x07\x93\x95\x93\x91&\xa7\x1f\xef\xaa\\\x83e\x89\xc8'
        list_1 = None
        float_0 = -448.90266
        tuple_0 = (bytes_0, bool_0, list_1, float_0)
        var_1 = module_0.sanitize_keys(dict_0, tuple_0)
        var_2 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '{De9eQowXqWe\x0c'
        list_0 = [str_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "os>cZL&F'@e^\t~A"
        dict_0 = {str_0: str_0}
        tuple_0 = ()
        complex_0 = None
        tuple_1 = (dict_0, tuple_0, complex_0)
        str_1 = 'smbios'
        var_0 = module_0.set_fallbacks(tuple_1, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        set_0 = set()
        int_0 = None
        bytes_0 = b'+Y'
        str_0 = 'FyImh\t'
        tuple_0 = (str_0,)
        dict_0 = {bool_0: bool_0, bytes_0: bool_0, bool_0: set_0, tuple_0: int_0}
        tuple_1 = (dict_0,)
        bool_1 = True
        list_0 = [int_0, bool_1]
        tuple_2 = (tuple_1, bool_1, set_0, list_0)
        var_0 = module_0.remove_values(tuple_2, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'WYXT\xfd\xe6\xae\xae\xc4L\x15\x88B\xcf\x0f'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = [dict_0, dict_0, bytes_0, dict_0]
        var_0 = module_0.remove_values(dict_0, list_0)
        str_0 = '<i8M3\x0crhaew@Z'
        int_0 = 2769
        str_1 = 'j))He$Z9\\GQp'
        dict_1 = {str_0: int_0, str_0: var_0, str_1: list_0, str_1: str_0}
        list_1 = [var_0, int_0]
        var_1 = module_0.set_fallbacks(dict_1, list_1)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        str_0 = 'z/QI>t7\tIj\\g!'
        list_0 = [bool_0, bool_0, str_0]
        str_1 = 'C^|>^DPYYbT`k'
        var_0 = module_0.remove_values(list_0, str_1)
        list_1 = [bool_0, bool_0, bool_0, bool_0]
        float_0 = 0.0
        str_2 = "L?IR7Tl!r'wCi"
        bytes_0 = b'\x8e\x1f\x02\x02s\xe5\xbc\x85ER\xf2TJz\xb3u\x9d'
        str_3 = 'kDi#:]=a4MUUv%Ce#tQ'
        dict_0 = {str_1: list_1, str_0: list_1, str_3: str_3}
        tuple_0 = (str_2, bytes_0, dict_0)
        int_0 = -4313
        list_2 = [bytes_0, int_0]
        var_1 = module_0.sanitize_keys(tuple_0, list_2, dict_0)
        str_4 = 'niz9.'
        str_5 = '\r7u(EcylZ'
        dict_1 = {str_5: list_0, str_4: var_0, str_5: var_0, str_0: str_5}
        dict_2 = None
        tuple_1 = (float_0, dict_1, dict_2, list_1)
        var_2 = module_0.remove_values(tuple_1, tuple_1)
        str_6 = '+zMi[a.QPy{qzd0$1RCl'
        str_7 = "we@k8'<$&%9+$Urf="
        dict_3 = {str_6: str_1, str_7: list_0}
        bytes_1 = b'\xcc\xf3ek\x07\x93\x95\x93\x91&\xa7\x1f\xef\xaa\\\x83e\x89\xc8'
        list_3 = None
        float_1 = -448.90266
        tuple_2 = (bytes_1, bool_0, list_3, float_1)
        var_3 = module_0.sanitize_keys(dict_3, tuple_2)
        str_8 = 'L-(L<yj )dE_:$'
        str_9 = 'to count backwards make stride negative'
        float_2 = 315.662
        var_4 = module_0.sanitize_keys(str_8, str_9, float_2)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = -3913
        dict_0 = {}
        bool_0 = True
        var_0 = module_0.set_fallbacks(dict_0, bool_0)
        int_1 = -525
        list_0 = [int_0]
        var_1 = module_0.sanitize_keys(int_1, list_0)
        int_2 = 331
        bool_1 = None
        var_2 = module_0.set_fallbacks(int_2, bool_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'str'
        str_1 = 'env'
        str_2 = 'TEST_A'
        str_3 = (str_1, str_2)
        var_0 = dict(type=str_0, fallback=str_3)
        str_4 = 'TEST_B'
        str_5 = (str_1, str_4)
        var_1 = dict(type=str_0, fallback=str_5)
        var_2 = dict(a=var_0, b=var_1)
        var_3 = dict()
        var_4 = module_0.set_fallbacks(var_2, var_3)
    except BaseException:
        pass