# Automatically generated by Pynguin.
import ansible.inventory.data as module_0

def test_case_0():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'localhost'
        var_0 = inventory_data_0.reconcile_inventory()
        var_1 = inventory_data_0.add_host(str_0)
        var_2 = inventory_data_0.deserialize(inventory_data_0)
    except BaseException:
        pass

def test_case_1():
    try:
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.add_group(inventory_data_0)
    except BaseException:
        pass

def test_case_2():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        var_1 = inventory_data_0.get_groups_dict()
        inventory_data_1 = module_0.InventoryData()
        str_0 = 'als'
        var_2 = inventory_data_0.get_host(str_0)
        var_3 = inventory_data_0.add_host(str_0)
        var_4 = inventory_data_0.remove_group(str_0)
        bool_0 = False
        var_5 = inventory_data_1.add_group(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'als'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.remove_group(str_0)
        var_2 = inventory_data_0.add_host(str_0, inventory_data_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 60.0
        set_0 = {float_0, float_0}
        list_0 = [float_0, set_0, float_0, set_0]
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(float_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_0.get_host(inventory_data_1)
        str_0 = 'F\rR'
        var_2 = inventory_data_0.add_host(str_0)
        var_3 = inventory_data_0.remove_group(str_0)
        var_4 = inventory_data_0.reconcile_inventory()
        var_5 = inventory_data_0.serialize()
        var_6 = inventory_data_0.reconcile_inventory()
        bool_0 = None
        var_7 = inventory_data_1.add_host(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        str_0 = "Consider using the {mod} module with {subcmd} rather than running '{cmd}'.  "
        str_1 = 'NK5ngern.XG)m\x0cYOkB3'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.set_variable(list_0, str_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'localhost'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.add_child(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'als'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.add_host(str_0, inventory_data_0)
    except BaseException:
        pass

def test_case_9():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_host(inventory_data_0)
        str_0 = 'F\rR'
        var_1 = inventory_data_0.add_host(str_0)
        var_2 = inventory_data_0.remove_group(str_0)
        var_3 = inventory_data_0.reconcile_inventory()
        var_4 = inventory_data_0.serialize()
        var_5 = inventory_data_0.get_groups_dict()
    except BaseException:
        pass

def test_case_10():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'group1'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'group2'
        var_1 = inventory_data_0.add_group(str_1)
        str_2 = 'hst'
        var_2 = inventory_data_0.get_groups_dict()
        var_3 = inventory_data_0.add_child(str_1, str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_groups_dict()
        bytes_0 = b'\x1d)'
        str_0 = 'all'
        set_0 = {str_0, str_0}
        var_1 = inventory_data_0.add_group(str_0)
        inventory_data_1 = module_0.InventoryData()
        list_0 = None
        var_2 = inventory_data_1.remove_group(list_0)
        var_3 = inventory_data_1.add_host(bytes_0, set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'group2'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'pbxCtQ'
        var_1 = inventory_data_0.add_host(str_1)
        str_2 = 'hst'
        var_2 = inventory_data_0.add_host(str_2)
        var_3 = inventory_data_0.add_host(str_1)
        var_4 = inventory_data_0.add_child(str_0, str_2)
        var_5 = inventory_data_0.add_child(str_0, str_2)
        var_6 = inventory_data_0.add_child(str_0, str_2)
        var_7 = inventory_data_0.reconcile_inventory()
        var_8 = inventory_data_0.hosts[var_6]
    except BaseException:
        pass

def test_case_13():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'group1'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'group2'
        var_1 = inventory_data_0.add_group(str_1)
        var_2 = inventory_data_0.add_host(str_0)
        str_2 = 'hust'
        var_3 = inventory_data_0.add_host(str_2)
        var_4 = inventory_data_0.add_child(str_0, str_1)
        var_5 = inventory_data_0.add_child(str_1, str_2)
        var_6 = inventory_data_0.add_child(str_1, str_2)
        var_7 = inventory_data_0.reconcile_inventory()
        var_8 = inventory_data_0.hosts[str_1]
    except BaseException:
        pass