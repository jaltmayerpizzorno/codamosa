# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    var_0 = lambda _, m: m

def test_case_1():
    bool_0 = None
    min_0 = module_0.Min(bool_0)

def test_case_2():
    bytes_0 = b'\xecDk\x9dQ`A\xd8\xff\xf1'
    last_0 = module_0.Last(bytes_0)
    sum_0 = module_0.Sum(last_0)
    int_0 = -2740
    all_0 = module_0.All(int_0)
    first_0 = module_0.First(all_0)
    var_0 = last_0.concat(first_0)
    str_0 = sum_0.__str__()
    str_1 = sum_0.__str__()

def test_case_3():
    str_0 = '%I0|GF>9'
    set_0 = {str_0}
    max_0 = module_0.Max(set_0)
    str_1 = 'Syq]p-V/gO@K='
    sum_0 = module_0.Sum(str_1)
    sum_1 = sum_0.concat(sum_0)
    var_0 = max_0.concat(max_0)
    sum_2 = sum_0.concat(sum_1)

def test_case_4():
    str_0 = '?7j(]}q~W0!;,0Oq'
    all_0 = module_0.All(str_0)
    str_1 = all_0.__str__()

def test_case_5():
    str_0 = '\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        '
    float_0 = -1773.08
    min_0 = module_0.Min(float_0)
    all_0 = module_0.All(str_0)
    all_1 = all_0.concat(all_0)
    float_1 = 3573.7
    bytes_0 = b's\xccP\xc9\xbc\xbc\xa1\xc3\xf3\xa8\x894\x0f\xa6'
    min_1 = module_0.Min(bytes_0)
    one_0 = module_0.One(min_1)
    var_0 = one_0.concat(float_1)
    str_1 = all_0.__str__()
    bool_0 = False
    map_0 = module_0.Map(bool_0)

def test_case_6():
    bytes_0 = b'\xb4\x18\x84='
    one_0 = module_0.One(bytes_0)
    str_0 = one_0.__str__()

def test_case_7():
    bytes_0 = b'\xb4\x18\x84='
    one_0 = module_0.One(bytes_0)
    float_0 = 274.86776
    min_0 = module_0.Min(float_0)
    var_0 = one_0.concat(min_0)
    str_0 = one_0.__str__()
    sum_0 = module_0.Sum(bytes_0)
    max_0 = module_0.Max(str_0)
    last_0 = module_0.Last(max_0)
    var_1 = last_0.concat(sum_0)

def test_case_8():
    float_0 = 725.642
    bool_0 = True
    set_0 = {bool_0, bool_0, bool_0}
    min_0 = None
    last_0 = module_0.Last(min_0)
    dict_0 = {}
    bool_1 = True
    max_0 = module_0.Max(bool_1)
    one_0 = module_0.One(max_0)
    str_0 = one_0.__str__()
    map_0 = module_0.Map(dict_0)
    var_0 = map_0.concat(last_0)
    first_0 = module_0.First(set_0)
    var_1 = first_0.concat(float_0)

def test_case_9():
    float_0 = -3044.0
    map_0 = module_0.Map(float_0)
    str_0 = map_0.__str__()
    list_0 = [str_0, str_0, float_0]
    first_0 = module_0.First(list_0)
    first_1 = module_0.First(first_0)
    one_0 = module_0.One(first_1)

def test_case_10():
    str_0 = '`dQiJBx^{eQ'
    last_0 = module_0.Last(str_0)
    semigroup_0 = module_0.Semigroup(last_0)
    min_0 = module_0.Min(semigroup_0)
    str_1 = min_0.__str__()

def test_case_11():
    int_0 = 2
    min_0 = module_0.Min(int_0)
    int_1 = 3
    min_1 = module_0.Min(int_1)
    var_0 = min_0.concat(min_1)

def test_case_12():
    all_0 = None
    str_0 = '\n        Call success_callback function with monad value when monad is not successfully.\n\n        :params fail_callback: function to apply with monad value.\n        :type fail_callback: Function(A)\n        :returns: self\n        :rtype: Try[A]\n        '
    float_0 = -1773.08
    min_0 = module_0.Min(float_0)
    all_1 = module_0.All(str_0)
    all_2 = all_1.concat(all_1)
    bytes_0 = b's\xccP\xc9\xbc\xbc\xa1\xc3\xf3\xa8\x894\x0f\xa6'
    min_1 = module_0.Min(bytes_0)
    one_0 = module_0.One(min_1)
    max_0 = module_0.Max(all_2)
    first_0 = module_0.First(max_0)
    one_1 = module_0.One(all_0)
    map_0 = module_0.Map(one_1)
    var_0 = one_1.concat(map_0)
    str_1 = all_1.__str__()
    str_2 = 'AtUHY6dXC.:m'
    var_1 = first_0.concat(str_2)

def test_case_13():
    str_0 = 'I\\%C73Cd]3<y'
    last_0 = module_0.Last(str_0)
    list_0 = []
    all_0 = module_0.All(list_0)
    all_1 = all_0.concat(all_0)
    all_2 = all_1.concat(all_0)
    all_3 = all_2.concat(all_1)
    all_4 = module_0.All(all_2)
    all_5 = all_3.concat(all_2)
    str_1 = all_4.__str__()
    map_0 = module_0.Map(str_1)
    float_0 = -2677.8
    max_0 = module_0.Max(float_0)
    var_0 = max_0.concat(max_0)
    all_6 = all_0.concat(all_5)
    one_0 = module_0.One(all_0)
    min_0 = module_0.Min(one_0)
    first_0 = module_0.First(min_0)
    one_1 = module_0.One(max_0)
    dict_0 = {}
    var_1 = one_1.concat(dict_0)
    min_1 = module_0.Min(dict_0)
    str_2 = min_1.__str__()

def test_case_14():
    int_0 = 2
    max_0 = module_0.Max(int_0)
    int_1 = 3
    var_0 = max_0.concat(max_0)
    var_1 = lambda x: x
    max_1 = module_0.Max(int_0)
    max_2 = module_0.Max(int_0)
    var_2 = max_1.concat(max_2)
    var_3 = lambda x: x
    max_3 = module_0.Max(int_1)
    max_4 = module_0.Max(int_0)
    var_4 = max_3.concat(max_4)
    var_5 = lambda x: x

def test_case_15():
    int_0 = 3
    min_0 = module_0.Min(int_0)
    int_1 = 2
    min_1 = module_0.Min(int_1)
    int_2 = -1
    min_2 = module_0.Min(int_2)
    int_3 = -1
    min_3 = module_0.Min(int_3)
    var_0 = min_0.concat(min_1)
    var_1 = min_1.concat(min_0)
    var_2 = min_1.concat(min_2)
    int_4 = -1
    min_4 = module_0.Min(int_4)