# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        str_0 = 'v/HV$E@v%'
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '((?<=")[^"]+(?=")|(?<=\\()[^)]+(?=\\)))'
        list_0 = []
        roman_numbers_0 = module_0.__RomanNumbers(*list_0)
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '4][G'
        str_1 = module_0.compress(str_0)
        str_2 = '(H4/H#3TM-\r'
        str_3 = module_0.reverse(str_0)
        str_4 = 'C&$W='
        str_5 = module_0.strip_margin(str_4)
        str_6 = module_0.prettify(str_2)
        str_7 = ';uR\rC'
        int_0 = module_0.roman_decode(str_7)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'a0#&peo\x0bh9w\t;fa;)'
        str_1 = module_0.compress(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '=_jX\tHu|2a-3R{\x0cB'
        roman_numbers_0 = module_0.__RomanNumbers()
        str_1 = module_0.slugify(str_0, str_0)
        str_2 = None
        int_0 = 3826
        str_3 = module_0.roman_encode(int_0)
        str_4 = module_0.compress(str_2, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '8'
        int_0 = -1582
        str_1 = module_0.compress(str_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'contains_html'
        str_1 = module_0.strip_html(str_0)
        bool_0 = False
        str_2 = module_0.snake_case_to_camel(str_0, bool_0)
        str_3 = module_0.strip_margin(str_1)
        str_4 = 'QI\x0cY|ts-zy]8,~X'
        int_0 = None
        str_5 = module_0.compress(str_4, str_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'w'
        str_1 = module_0.decompress(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '!pC\\[!='
        str_1 = module_0.reverse(str_0)
        str_2 = module_0.shuffle(str_1)
        dict_0 = {}
        roman_numbers_0 = module_0.__RomanNumbers(**dict_0)
        string_formatter_0 = module_0.__StringFormatter(roman_numbers_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = None
        var_0 = module_0.camel_case_to_snake(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        bool_0 = False
        str_1 = module_0.snake_case_to_camel(str_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'F`nxjvKuOd'
        bool_0 = module_0.booleanize(str_0)
        str_1 = module_0.slugify(str_0)
        str_2 = module_0.strip_html(str_0)
        str_3 = module_0.prettify(str_0)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_4 = None
        str_5 = module_0.asciify(str_4)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'F`nxjvKuOd'
        bool_0 = module_0.booleanize(str_0)
        str_1 = module_0.slugify(str_0)
        str_2 = module_0.prettify(str_0)
        bool_1 = module_0.booleanize(str_1)
        int_0 = -401
        roman_numbers_0 = module_0.__RomanNumbers()
        str_3 = module_0.compress(str_2, str_2, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '*\x0ck`WYvEr+x:'
        str_1 = module_0.compress(str_0)
        str_2 = module_0.asciify(str_0)
        int_0 = 889
        str_3 = module_0.roman_encode(int_0)
        int_1 = module_0.roman_decode(str_3)
        str_4 = module_0.roman_encode(str_3)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 889
        str_0 = module_0.roman_encode(int_0)
        str_1 = 'H4/H#3TM-\r'
        str_2 = module_0.prettify(str_1)
        str_3 = '~'
        str_4 = module_0.roman_encode(str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'J'
        str_1 = module_0.strip_margin(str_0)
        str_2 = "'s}\nOI\nng/eyGot'$"
        str_3 = module_0.compress(str_2)
        str_4 = module_0.strip_margin(str_3)
        str_5 = None
        str_6 = module_0.slugify(str_5, str_5)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '((<([a-z]+:)?[a-z]+[^>]*/?>)(.*?(</([a-z]+:)?[a-z]+>))?|<!--.*-->|<!doctype.*>)'
        string_formatter_0 = module_0.__StringFormatter(str_0)
        str_1 = 'yA@J(%f&r0^#nFf'
        str_2 = '@8CTWH})0\x0b&%('
        str_3 = module_0.prettify(str_2)
        str_4 = module_0.shuffle(str_1)
        string_compressor_0 = module_0.__StringCompressor()
        str_5 = module_0.asciify(str_4)
        str_6 = '2C2^'
        str_7 = string_formatter_0.format()
        var_0 = module_0.camel_case_to_snake(str_6)
        dict_0 = {}
        roman_numbers_0 = module_0.__RomanNumbers(**dict_0)
        str_8 = None
        str_9 = module_0.roman_encode(str_8)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '"j+7oF)7U7'
        int_0 = 1855
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = ''
        str_1 = module_0.compress(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = None
        bool_0 = module_0.booleanize(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -2461
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = None
        str_1 = module_0.shuffle(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'nf}{4h!U\rjq$a'
        str_1 = module_0.compress(str_0)
        str_2 = module_0.strip_html(str_1)
        str_3 = module_0.reverse(str_0)
        str_4 = 'yA@J(%f&r0^#nFc'
        str_5 = '@8CTWH})0\x0b&%('
        str_6 = module_0.prettify(str_5)
        str_7 = module_0.shuffle(str_4)
        var_0 = module_0.camel_case_to_snake(str_2)
        str_8 = module_0.asciify(str_7)
        var_1 = module_0.camel_case_to_snake(str_7)
        tuple_0 = ()
        string_formatter_0 = module_0.__StringFormatter(tuple_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = None
        str_1 = module_0.strip_html(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = "4W(_e!'@de|zF5Q![!\t"
        str_1 = module_0.compress(str_0)
        str_2 = '>4\nN'
        str_3 = module_0.asciify(str_2)
        roman_numbers_0 = module_0.__RomanNumbers()
        int_0 = 20
        str_4 = module_0.roman_encode(int_0)
        str_5 = None
        str_6 = module_0.prettify(str_5)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '*\x0ck`WYvEr+x:'
        str_1 = module_0.compress(str_0)
        str_2 = module_0.asciify(str_0)
        str_3 = None
        str_4 = module_0.strip_margin(str_3)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '\x0ck`WYvEr+x:'
        str_1 = module_0.compress(str_0)
        str_2 = module_0.asciify(str_0)
        int_0 = 184
        str_3 = module_0.roman_encode(int_0)
        str_4 = module_0.prettify(str_2)
        int_1 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'contains_html'
        str_1 = module_0.strip_html(str_0)
        bool_0 = False
        str_2 = module_0.snake_case_to_camel(str_0, bool_0)
        str_3 = '0j!T24}y-y@B'
        bool_1 = module_0.booleanize(str_3)
        str_4 = module_0.strip_margin(str_3)
        str_5 = module_0.compress(str_3)
        str_6 = module_0.asciify(str_2)
        int_0 = 889
        str_7 = module_0.roman_encode(int_0)
        str_8 = module_0.asciify(str_7)
        str_9 = module_0.compress(str_3)
        str_10 = None
        str_11 = module_0.reverse(str_10)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'contains_html'
        str_1 = module_0.strip_html(str_0)
        bool_0 = False
        str_2 = module_0.snake_case_to_camel(str_0, bool_0)
        str_3 = ''
        bool_1 = module_0.booleanize(str_3)
        str_4 = 'wVzSuMS5~_,tj'
        str_5 = module_0.strip_margin(str_4)
        str_6 = "\n    Similarly to native Python's `range()`, returns a Generator object which generates a new roman number\n    on each iteration instead of an integer.\n\n    *Example:*\n\n    >>> for n in roman_range(7): print(n)\n    >>> # prints: I, II, III, IV, V, VI, VII\n    >>> for n in roman_range(start=7, stop=1, step=-1): print(n)\n    >>> # prints: VII, VI, V, IV, III, II, I\n\n    :param stop: Number at which the generation must stop (must be <= 3999).\n    :param start: Number at which the generation must start (must be >= 1).\n    :param step: Increment of each generation step (default to 1).\n    :return: Generator of roman numbers.\n    "
        str_7 = module_0.compress(str_6)
        int_0 = 4547
        str_8 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '0j!T24}y-y@B'
        bool_0 = module_0.booleanize(str_0)
        str_1 = '\x0c~BG4u"?O2\rPmy+C/tD'
        str_2 = module_0.strip_margin(str_1)
        str_3 = 'O?1TaJJQa\tPSTXx|'
        str_4 = module_0.compress(str_3)
        int_0 = 889
        str_5 = module_0.roman_encode(int_0)
        str_6 = "\n    Check if a string is a valid email.\n\n    Reference: https://tools.ietf.org/html/rfc3696#section-3\n\n    *Examples:*\n\n    >>> is_email('my.email@the-provider.com') # returns true\n    >>> is_email('@gmail.com') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if email, false otherwise.\n    "
        str_7 = module_0.prettify(str_6)
        str_8 = '^\\s*[\\[{]\\s*(.*)\\s*[\\}\\]]\\s*$'
        str_9 = module_0.prettify(str_8)
        str_10 = None
        int_1 = module_0.roman_decode(str_10)
    except BaseException:
        pass