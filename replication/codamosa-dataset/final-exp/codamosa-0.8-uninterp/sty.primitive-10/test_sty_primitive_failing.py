# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        str_0 = None
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        str_0 = 'g<\x0b*Im$5~xI%'
        list_0 = [str_0]
        dict_0 = {}
        str_1 = register_0.__call__(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = None
        set_0 = {bytes_0}
        register_0 = module_0.Register()
        register_0.set_eightbit_call(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = None
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_2.set_rgb_call(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = None
        callable_0 = None
        register_0 = module_0.Register()
        register_0.set_renderfunc(list_0, callable_0)
        register_1 = module_0.Register()
        dict_0 = register_1.as_dict()
        register_2 = module_0.Register()
        register_2.unmute()
        str_0 = register_1.__call__()
        register_3 = module_0.Register()
        style_0 = module_0.Style()
        var_0 = register_1.__setattr__(str_0, style_0)
        style_1 = module_0.Style()
        var_1 = register_1.as_namedtuple()
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        int_0 = -1339
        list_0 = [int_0]
        str_0 = register_0.__call__(*list_0)
        str_1 = register_0.__call__()
        dict_1 = {}
        style_0 = module_0.Style()
        register_0.mute()
        var_0 = register_0.__setattr__(str_1, style_0)
        style_1 = module_0.Style(**dict_1)
        var_1 = register_0.as_namedtuple()
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        str_0 = '%\\yR$H!,xEJFYQ\t@xy_b'
        list_0 = [register_0, register_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        str_0 = '"9%F=$QAdZ\\cP,1'
        dict_0 = {str_0: register_0}
        type_0 = None
        register_0.unmute()
        register_0.set_renderfunc(type_0, register_0)
        register_0.set_eightbit_call(type_0)
        register_1 = register_0.copy()
        list_0 = [dict_0, register_1, register_1]
        str_1 = "\nThe Register class: Sty's heart.\n"
        style_0 = module_0.Style(*list_0)
        var_0 = register_1.__setattr__(str_1, style_0)
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        str_0 = register_0.__call__()
        register_1 = module_0.Register()
        register_2 = module_0.Register()
        style_0 = module_0.Style()
        register_1.mute()
        var_0 = register_2.__setattr__(str_0, style_0)
        style_1 = module_0.Style()
        var_1 = register_0.as_namedtuple()
        register_2.mute()
        register_3 = register_2.copy()
        register_3.set_rgb_call(register_3)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_1.unmute()
        register_2 = module_0.Register()
        register_3 = module_0.Register()
        str_0 = "The mute() method can only be used with objects that inherit from the 'Register class'."
        list_0 = [str_0, str_0, str_0]
        dict_0 = register_2.as_dict()
        str_1 = register_3.__call__(*list_0)
        bool_0 = True
        register_3.set_rgb_call(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = None
        callable_0 = None
        register_0 = module_0.Register()
        str_0 = 'j{qiZ'
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        register_1 = register_0.copy()
        register_1.set_renderfunc(list_0, callable_0)
        register_2 = register_0.copy()
        dict_0 = register_1.as_dict()
        register_3 = module_0.Register()
        register_4 = module_0.Register()
        register_4.unmute()
        str_1 = register_1.__call__()
        register_5 = module_0.Register()
        dict_1 = register_0.as_dict()
        int_0 = None
        register_4.set_renderfunc(int_0, callable_0)
        register_6 = module_0.Register()
        list_1 = [dict_0, register_2, register_5, register_6]
        dict_2 = {}
        style_1 = module_0.Style(*list_1, **dict_2)
        register_5.mute()
        register_7 = register_0.copy()
        str_2 = '9^'
        var_1 = register_0.__setattr__(str_2, style_1)
    except BaseException:
        pass