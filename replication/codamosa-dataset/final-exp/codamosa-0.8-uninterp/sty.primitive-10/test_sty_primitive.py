# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    pass

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    register_0 = module_0.Register()

def test_case_3():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    register_3 = register_2.copy()
    str_0 = register_3.__call__()

def test_case_4():
    register_0 = module_0.Register()
    dict_0 = register_0.as_dict()
    type_0 = None
    register_1 = module_0.Register()
    register_2 = register_1.copy()
    type_1 = None
    tuple_0 = ()
    register_2.set_renderfunc(type_1, tuple_0)
    str_0 = ''
    str_1 = "The unmute() method can only be used with objects that inherit from the 'Register class'."
    dict_1 = {str_0: register_1, str_0: register_1, str_1: str_0, str_1: type_0}
    str_2 = register_1.__call__(**dict_1)
    register_1.unmute()
    register_2.set_rgb_call(type_0)
    register_3 = module_0.Register()
    callable_0 = None
    register_1.set_renderfunc(type_0, callable_0)
    register_4 = register_0.copy()

def test_case_5():
    style_0 = module_0.Style()
    int_0 = 88
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_1.set_renderfunc(style_0, int_0)

def test_case_6():
    register_0 = module_0.Register()
    register_0.mute()

def test_case_7():
    register_0 = module_0.Register()
    register_0.unmute()
    register_1 = module_0.Register()
    register_1.mute()

def test_case_8():
    register_0 = module_0.Register()
    var_0 = register_0.as_namedtuple()
    dict_0 = register_0.as_dict()

def test_case_9():
    register_0 = module_0.Register()
    register_0.unmute()
    register_1 = register_0.copy()
    register_1.mute()

def test_case_10():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    str_0 = register_1.__call__()
    register_2 = module_0.Register()
    str_1 = 'test'
    var_0 = lambda x: str_1
    render_type_0 = module_1.RenderType()
    register_2.mute()
    str_2 = '?@;4^cWXW/y'
    style_0 = module_0.Style()
    var_1 = register_2.__setattr__(str_2, style_0)
    register_2.unmute()

def test_case_11():
    register_0 = module_0.Register()
    dict_0 = register_0.as_dict()
    type_0 = None
    register_1 = module_0.Register()
    register_2 = register_0.copy()
    register_3 = register_2.copy()
    register_4 = register_3.copy()
    str_0 = ''
    str_1 = "Parameter 'rules' must be of type Iterable[Rule]."
    str_2 = "The unmute() method can only be used with objects that inherit from the 'Register class'."
    dict_1 = {str_0: register_1, str_1: register_4, str_2: str_0, str_2: type_0}
    str_3 = register_4.__call__(**dict_1)
    register_1.unmute()
    register_2.mute()
    register_5 = module_0.Register()
    register_6 = module_0.Register()
    list_0 = [str_3]
    str_4 = register_2.__call__(*list_0, **dict_1)
    register_4.unmute()