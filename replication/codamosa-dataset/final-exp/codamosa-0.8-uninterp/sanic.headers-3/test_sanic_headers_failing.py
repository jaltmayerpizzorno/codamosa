# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0}
        optional_0 = module_0.parse_forwarded(dict_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\n0\xc3\xaf'
        dict_0 = {}
        tuple_0 = (dict_0, bytes_0)
        str_0 = 'Zr'
        list_0 = []
        dict_1 = module_0.fwd_normalize(list_0)
        optional_0 = module_0.parse_xforwarded(tuple_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -3724
        dict_0 = module_0.fwd_normalize(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'J'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = None
        tuple_1 = module_0.parse_content_header(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 272
        str_0 = 'ISdo$\x0bjMSl-cWR '
        bytes_0 = module_0.format_http1_response(int_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ':"'
        dict_0 = module_0.fwd_normalize(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Zr'
        list_0 = []
        dict_0 = module_0.fwd_normalize(list_0)
        tuple_0 = (str_0, dict_0)
        dict_1 = module_0.fwd_normalize(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'w'
        int_0 = -2040
        tuple_0 = module_0.parse_host(str_0)
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = 'L\x0cAuV'
        str_3 = module_0.fwd_normalize_address(str_2)
        str_4 = '@'
        str_5 = "`e$$0(ks\x0b]'.saQX$."
        tuple_1 = module_0.parse_content_header(str_3)
        tuple_2 = module_0.parse_host(str_4)
        list_0 = [tuple_0, int_0, str_1, str_5]
        dict_0 = module_0.fwd_normalize(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = []
        dict_0 = module_0.fwd_normalize(var_0)
        str_0 = 'by'
        str_1 = '1.1.1.1'
        str_2 = (str_0, str_1)
        str_3 = 'host'
        str_4 = (str_3, str_3)
        str_5 = [str_2, str_4]
        dict_1 = module_0.fwd_normalize(str_5)
        str_6 = 'proto'
        str_7 = 'scheme'
        str_8 = {str_6: str_7, str_3: str_3}
        dict_2 = module_0.fwd_normalize(str_8)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 't;#[z6o_Mr8t[B'
        tuple_0 = module_0.parse_content_header(str_0)
        str_1 = '127.0.0.1:8000'
        int_0 = 33
        list_0 = []
        bytes_0 = module_0.format_http1_response(int_0, list_0)
        str_2 = 'x-forwarded-host'
        tuple_1 = module_0.parse_content_header(str_2)
        tuple_2 = module_0.parse_content_header(str_1)
        tuple_3 = module_0.parse_host(str_1)
        str_3 = module_0.fwd_normalize_address(str_1)
        dict_0 = module_0.fwd_normalize(tuple_3)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'for'
        str_1 = '1'
        str_2 = (str_0, str_1)
        str_3 = [str_2]
        dict_0 = module_0.fwd_normalize(str_3)
        str_4 = (str_0, str_0)
        str_5 = [str_4]
        dict_1 = module_0.fwd_normalize(str_5)
        str_6 = '[::1]'
        str_7 = (str_0, str_6)
        str_8 = [str_7]
        dict_2 = module_0.fwd_normalize(str_8)
        str_9 = '::1'
        str_10 = (str_0, str_9)
        str_11 = [str_10]
        dict_3 = module_0.fwd_normalize(str_11)
        str_12 = 'unknown'
        str_13 = (str_0, str_12)
        str_14 = [str_13]
        dict_4 = module_0.fwd_normalize(str_14)
        str_15 = (str_0, str_13)
        dict_5 = module_0.fwd_normalize(str_15)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '1'
        str_1 = (str_0, str_0)
        str_2 = [str_1]
        dict_0 = module_0.fwd_normalize(str_2)
        str_3 = '1.2.3.4'
        str_4 = (str_2, str_3)
        str_5 = [str_4]
        dict_1 = module_0.fwd_normalize(str_5)
    except BaseException:
        pass