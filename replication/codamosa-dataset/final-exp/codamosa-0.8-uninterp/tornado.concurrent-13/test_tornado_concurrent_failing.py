# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import concurrent.futures._base as module_1
import builtins as module_2

def test_case_0():
    try:
        dummy_executor_0 = module_0.DummyExecutor()
        str_0 = 'T7a'
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        list_0 = [return_value_ignored_error_0, str_0, str_0]
        callable_0 = module_0.run_on_executor(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Gz(^@*n\x0cK+I'
        list_0 = [str_0]
        future_0 = module_1.Future()
        base_exception_0 = module_2.BaseException()
        module_0.future_add_done_callback(future_0, base_exception_0)
        callable_0 = None
        str_1 = 'cjCh>L^@\tK'
        str_2 = 'Expires'
        float_0 = -501.9
        str_3 = '4k7v^-Zy&\rC'
        dict_0 = {str_1: callable_0, str_2: float_0, str_3: str_1}
        dummy_executor_0 = module_0.DummyExecutor()
        future_1 = dummy_executor_0.submit(callable_0, *list_0, **dict_0)
        future_2 = None
        module_0.chain_future(future_2, future_2)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Gz(^@*n\x0cK+I'
        list_0 = [str_0]
        callable_0 = module_0.run_on_executor(*list_0)
        callable_1 = None
        str_1 = 'cjCh>L^@\tK'
        str_2 = 'Expires'
        float_0 = -501.9
        dict_0 = {str_1: callable_1, str_2: float_0, str_0: str_1}
        dummy_executor_0 = module_0.DummyExecutor()
        future_0 = dummy_executor_0.submit(callable_1, *list_0, **dict_0)
        base_exception_0 = module_2.BaseException(*list_0)
        module_0.future_add_done_callback(future_0, base_exception_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ']>P\t)P\\G>Ey~]&I%'
        list_0 = [str_0]
        str_1 = '@F'
        str_2 = '__main__'
        dict_0 = {str_2: str_0, str_2: str_1}
        callable_0 = module_0.run_on_executor(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Gz(^@*n\x0cK+I'
        list_0 = [str_0]
        callable_0 = module_0.run_on_executor(*list_0)
        callable_1 = None
        dummy_executor_0 = module_0.DummyExecutor()
        future_0 = dummy_executor_0.submit(callable_1)
        int_0 = -1740
        callable_2 = None
        tuple_0 = (int_0, callable_2, future_0)
        module_0.future_set_exc_info(future_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Gz(^@*n\x0cK+I'
        list_0 = [str_0]
        callable_0 = module_0.run_on_executor(*list_0)
        callable_1 = None
        str_1 = 'cjCh>L^@\tK'
        float_0 = -501.9
        str_2 = ''
        dict_0 = {str_1: callable_1, str_1: str_1, str_2: float_0, str_2: str_1}
        dummy_executor_0 = module_0.DummyExecutor()
        future_0 = dummy_executor_0.submit(callable_1, *list_0, **dict_0)
        base_exception_0 = module_2.BaseException()
        module_0.future_add_done_callback(future_0, callable_0)
    except BaseException:
        pass