# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    try:
        bool_0 = False
        var_0 = module_0.parse_kv(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        var_0 = module_0.split_args(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\ns\x8b\xb9\xb1-\xfe'
        var_0 = module_0.parse_kv(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b"\x1c\x0b\ns\x0c^\xb9\xb1\xca\xdf'"
        var_0 = module_0.parse_kv(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "'\n5}BZVN%HF}-K"
        var_0 = module_0.parse_kv(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '$_XUv\x0cA"G0uJq/]a(6'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'AT24nK*`\nS138S?-nmN'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'l<@,c['
        var_1 = module_0.parse_kv(str_1)
        str_2 = '\\'
        var_2 = module_0.parse_kv(str_2)
        str_3 = '|-pVF\rJR\r=.}0l+U'
        var_3 = module_0.parse_kv(str_3)
        str_4 = 'failed'
        var_4 = module_0.parse_kv(str_4)
        int_0 = 5
        var_5 = module_0.parse_kv(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '#}LnuG\n'
        var_0 = module_0.parse_kv(str_0)
        list_0 = []
        var_1 = module_0.split_args(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        var_0 = module_0.parse_kv(str_0)
        var_1 = None
        var_2 = module_0.parse_kv(var_1)
        str_1 = 'foo=bar'
        var_3 = module_0.parse_kv(str_1)
        str_2 = 'foo='
        var_4 = module_0.parse_kv(str_2)
        str_3 = 'A><'
        var_5 = module_0.join_args(str_2)
        var_6 = module_0.parse_kv(str_3)
        bytes_0 = b'\x10d=c\x85\x85\xc4\xef\xff\x13\xb8\xb2U'
        int_0 = None
        var_7 = module_0.parse_kv(bytes_0, int_0)
        str_4 = 'a="b{{'
        var_8 = module_0.split_args(str_4)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'r$T{'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'a= =d'
        var_1 = module_0.parse_kv(str_1)
        str_2 = 'a=b\\ c=d'
        var_2 = module_0.parse_kv(str_2)
        set_0 = {str_0, str_0, str_2}
        var_3 = module_0.join_args(set_0)
        str_3 = 'a="b c"'
        var_4 = module_0.parse_kv(str_3)
        str_4 = '{%!}/Ei\x0cSzXm0'
        var_5 = module_0.parse_kv(str_4)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '*L[~\n:+'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'r$T{#'
        var_1 = module_0.parse_kv(str_1)
    except BaseException:
        pass