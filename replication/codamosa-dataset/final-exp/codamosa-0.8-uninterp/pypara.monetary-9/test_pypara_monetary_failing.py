# Automatically generated by Pynguin.
import pypara.currencies as module_0
import pypara.monetary as module_1
import decimal as module_2
import datetime as module_3

def test_case_0():
    try:
        str_0 = '\\^ph% Dh<nHc^R 3'
        str_1 = "T>0%'dAv/xH+gnmR"
        int_0 = -4666
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = None
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        str_2 = None
        incompatible_currency_error_0 = module_1.IncompatibleCurrencyError(currency_0, currency_0, str_2)
        list_0 = [incompatible_currency_error_0, str_1]
        none_price_0 = module_1.NonePrice(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.positive()
        str_0 = 'Iranian Rial'
        bool_0 = none_money_0.lte(money_0)
        bool_1 = money_0.__ge__(money_0)
        currency_type_0 = module_0.CurrencyType.MONEY
        money_1 = money_0.__truediv__(currency_type_0)
        int_0 = -1147
        currency_type_1 = module_0.CurrencyType.CRYPTO
        decimal_0 = None
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_1, decimal_0, int_0)
        money_2 = money_0.with_ccy(currency_0)
        bool_2 = none_money_0.as_boolean()
        price_0 = module_1.Price()
        price_1 = price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_2():
    try:
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.abs()
        money_1 = module_1.Money()
        list_0 = []
        none_price_0 = module_1.NonePrice(*list_0)
        money_2 = money_1.divide(none_price_0)
    except BaseException:
        pass

def test_case_3():
    try:
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        none_price_0 = module_1.NonePrice()
        float_0 = none_price_0.as_float()
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        int_0 = 12
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = price_0.add(price_0)
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.floor_divide(dict_0)
        int_1 = -1173
        list_0 = [dict_0, int_1, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        bool_0 = some_price_0.lte(price_2)
        price_3 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_4 = some_price_0.subtract(price_3)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_5 = some_price_0.positive()
        price_6 = some_price_0.add(price_2)
        decimal_0 = module_2.Decimal(**dict_0)
        str_0 = '8r\n}c07A'
        int_2 = -720
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_2)
        price_7 = price_0.convert(currency_0, bool_0)
        price_8 = some_price_0.add(price_1)
        price_9 = price_7.__neg__()
        price_10 = price_2.subtract(price_8)
        int_3 = -5314
        int_4 = 2558
        currency_1 = module_0.Currency(str_0, str_0, int_3, currency_type_0, decimal_0, int_4)
        price_11 = some_price_0.convert(currency_1)
    except BaseException:
        pass

def test_case_5():
    try:
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.positive()
        int_0 = none_price_0.as_integer()
    except BaseException:
        pass

def test_case_6():
    try:
        decimal_0 = module_2.Decimal()
        bytes_0 = b'\xec:\xea@'
        int_0 = -233
        list_0 = [int_0, int_0, int_0]
        some_price_0 = module_1.SomePrice(*list_0)
        price_0 = some_price_0.floor_divide(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_subtract(var_0)
        price_1 = price_0.multiply(var_0)
        some_money_0 = module_1.SomeMoney()
    except BaseException:
        pass

def test_case_8():
    try:
        none_money_0 = module_1.NoneMoney()
        set_0 = set()
        str_0 = 'P'
        tuple_0 = (set_0, str_0)
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.divide(tuple_0)
        money_0 = none_money_0.positive()
        str_1 = 'Iranian Rial'
        bool_0 = none_money_0.lte(money_0)
        bool_1 = money_0.__ge__(money_0)
        money_1 = none_money_0.subtract(money_0)
        int_0 = -1147
        currency_type_0 = module_0.CurrencyType.CRYPTO
        decimal_0 = None
        currency_0 = module_0.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        money_2 = money_0.with_ccy(currency_0)
        bool_2 = none_money_0.as_boolean()
        price_1 = module_1.Price()
        price_2 = price_1.round()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\\^ph% Dh<nHc^R 3'
        str_1 = "T>0%'dAv/xH+gnmR"
        int_0 = -4666
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = None
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        str_2 = None
        incompatible_currency_error_0 = module_1.IncompatibleCurrencyError(currency_0, currency_0, str_2)
        tuple_0 = None
        tuple_1 = (tuple_0,)
        list_0 = [currency_type_0, str_1, str_1]
        some_price_0 = module_1.SomePrice(*list_0)
        price_0 = some_price_0.scalar_add(tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\x0blPhah'
        none_money_0 = module_1.NoneMoney()
        none_money_1 = module_1.NoneMoney()
        money_0 = none_money_1.abs()
        money_1 = money_0.__neg__()
        int_0 = -2540
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        int_1 = -232
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        list_0 = [str_0, str_0, str_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.floor_divide(currency_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.positive()
        price_1 = none_price_0.subtract(price_0)
        var_0 = price_1.__round__()
        str_0 = '\n    Provides an enumeration for indicating increment and decrement events.\n    '
        list_0 = [none_price_0, str_0]
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x06\xb1-Y'
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, bytes_0]
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.abs()
        bool_0 = price_0.as_boolean()
        none_price_1 = module_1.NonePrice(*list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ' 4G3P'
        str_1 = None
        int_0 = 281
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        int_1 = 309
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        str_2 = 's66+{2jv:\nM\x0cn.S\t1o'
        int_2 = 3832
        currency_type_1 = module_0.CurrencyType.MONEY
        decimal_1 = module_2.Decimal()
        currency_1 = module_0.Currency(str_2, str_2, int_2, currency_type_1, decimal_1, int_2)
        incompatible_currency_error_0 = module_1.IncompatibleCurrencyError(currency_1, currency_1)
        dict_0 = {incompatible_currency_error_0: currency_1, decimal_1: str_2, currency_type_1: int_2, int_2: str_2}
        price_0 = module_1.Price()
        price_1 = price_0.scalar_subtract(dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\x0blPhah'
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.abs()
        bool_0 = none_money_0.is_equal(money_0)
        money_1 = none_money_0.abs()
        money_2 = money_1.__neg__()
        money_3 = none_money_0.positive()
        int_0 = -2540
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        int_1 = -232
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        list_0 = [str_0, str_0, str_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_4 = some_money_0.floor_divide(currency_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '\x0blPhah'
        int_0 = 2487
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.scalar_subtract(int_0)
        none_money_1 = module_1.NoneMoney()
        money_1 = none_money_1.abs()
        money_2 = money_1.__neg__()
        money_3 = none_money_1.positive()
        bool_0 = none_money_1.as_boolean()
        int_1 = -2540
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        int_2 = -232
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_2)
        list_0 = [str_0, str_0, str_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        int_3 = money_0.as_integer()
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '6+wX9e+r}W:W\roEiH[5'
        int_0 = 2487
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.scalar_subtract(int_0)
        date_0 = None
        money_1 = money_0.with_dov(date_0)
        none_money_1 = module_1.NoneMoney()
        money_2 = none_money_1.abs()
        money_3 = money_2.__neg__()
        money_4 = money_3.subtract(money_0)
        int_1 = -2540
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        int_2 = -255
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_2)
        list_0 = [currency_type_0, money_0, str_0, str_0, str_0]
        some_money_0 = module_1.SomeMoney(*list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 2487
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.scalar_subtract(int_0)
        none_money_1 = module_1.NoneMoney()
        str_0 = '9m:RI^u0Q#yv\x0biM@'
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = module_2.Decimal()
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.with_ccy(currency_0)
        price_1 = price_0.abs()
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.scalar_subtract(int_0)
        bool_0 = price_2.gte(price_1)
        money_1 = none_money_1.abs()
        money_2 = money_1.__neg__()
        money_3 = none_money_1.positive()
        bool_1 = none_money_1.as_boolean()
        int_1 = -2540
        currency_type_1 = module_0.CurrencyType.MONEY
        decimal_1 = module_2.Decimal()
        int_2 = -232
        currency_1 = module_0.Currency(str_0, str_0, int_1, currency_type_1, decimal_1, int_2)
        list_0 = [str_0, str_0, str_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_4 = some_money_0.floor_divide(currency_1)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = {}
        int_0 = -26
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        decimal_0 = module_2.Decimal()
        bool_0 = money_0.__gt__(money_0)
        str_0 = '"x$k\'eTd0'
        currency_type_0 = None
        int_1 = 671
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        money_2 = money_1.with_ccy(currency_0)
        bool_1 = money_1.__ge__(money_1)
        bool_2 = money_1.__ge__(money_2)
    except BaseException:
        pass

def test_case_19():
    try:
        decimal_0 = module_2.Decimal()
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_0 = some_money_0.with_qty(decimal_0)
    except BaseException:
        pass

def test_case_20():
    try:
        price_0 = module_1.Price()
        price_1 = price_0.__abs__()
        list_0 = []
        int_0 = 319
        var_0 = None
        list_1 = [list_0, int_0, list_0, var_0]
        some_price_0 = module_1.SomePrice(*list_1)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.subtract(price_0)
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.floor_divide(dict_0)
        int_0 = 2282
        bool_0 = none_price_0.lte(price_1)
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        var_0 = None
        price_2 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'\x06\xb1-Y'
        dict_0 = {}
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(bytes_0)
        price_1 = none_price_0.positive()
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.negative()
        bool_0 = none_price_0.lte(price_1)
        int_0 = -1173
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
        bool_1 = some_price_0.lte(price_1)
        price_2 = price_1.__add__(price_1)
        str_0 = 'x>xYY]wfdNT_{yjm'
        str_1 = 'XoW/B[]Y\r#kM\n&y{'
        int_1 = 2690
        currency_type_0 = module_0.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_1)
        str_2 = 'HfM08$%XI"Ai|\\nA\nM}R'
        incompatible_currency_error_0 = module_1.IncompatibleCurrencyError(currency_0, currency_0, str_2)
        money_1 = money_0.__truediv__(incompatible_currency_error_0)
        var_0 = money_1.__round__()
        price_3 = some_price_0.positive()
        float_0 = money_1.__float__()
    except BaseException:
        pass

def test_case_23():
    try:
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.positive()
        none_money_0 = module_1.NoneMoney()
        bool_0 = True
        price_1 = none_price_0.floor_divide(bool_0)
        bool_1 = none_price_0.lte(price_0)
        none_money_1 = module_1.NoneMoney()
        list_0 = [none_money_1]
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        int_0 = 12
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.positive()
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.floor_divide(dict_0)
        bool_0 = none_price_1.lte(price_2)
        int_1 = -1173
        list_0 = [dict_0, int_1, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        bool_1 = some_price_0.lte(price_2)
        price_3 = some_price_0.positive()
        price_4 = price_3.__neg__()
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_5 = some_price_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.positive()
        var_0 = money_1.__round__()
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = {}
        int_0 = 12
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        bool_0 = some_price_0.lte(price_2)
        price_3 = some_price_0.positive()
        price_4 = some_price_0.subtract(price_3)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_5 = some_price_0.positive()
        price_6 = none_price_0.add(price_1)
        price_7 = some_price_0.add(price_6)
        price_8 = price_4.negative()
        bool_1 = none_price_1.as_boolean()
        price_9 = price_8.__neg__()
        date_0 = None
        price_10 = some_price_0.multiply(date_0)
    except BaseException:
        pass

def test_case_26():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_1)
        money_2 = none_money_0.add(money_1)
        price_2 = none_price_1.round()
        currency_type_0 = module_0.CurrencyType.METAL
        price_3 = price_1.__pos__()
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_4 = price_3.subtract(price_0)
        price_5 = price_4.subtract(price_2)
        bool_1 = price_2.__lt__(price_2)
        int_1 = -2115
        decimal_0 = module_2.Decimal()
        str_0 = 'k8CdrG1Ut23\\?)!'
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        bool_2 = False
        money_3 = money_1.convert(currency_0, bool_2)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b'\x06\xb1-Y'
        dict_0 = {}
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(bytes_0)
        price_1 = price_0.subtract(price_0)
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.floor_divide(dict_0)
        bool_0 = none_price_0.lte(price_1)
        int_0 = -1173
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
        bool_1 = some_price_0.lte(price_1)
        price_2 = none_price_0.positive()
        bool_2 = price_1.gt(price_2)
        bool_3 = money_0.is_equal(price_1)
        price_3 = price_0.__pos__()
        var_0 = None
        money_1 = none_price_0.times(var_0)
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.negative()
        var_1 = money_2.__round__(int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'\x06\xb1-Y'
        dict_0 = {}
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(bytes_0)
        price_1 = none_price_0.positive()
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.floor_divide(dict_0)
        bool_0 = none_price_0.lte(price_1)
        int_0 = -1173
        currency_type_0 = module_0.CurrencyType.CRYPTO
        bool_1 = none_price_0.is_equal(currency_type_0)
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
        bool_2 = some_price_0.lte(price_1)
        str_0 = 'x>xYY]wfdNT_{yjm'
        str_1 = 'XoW/B[]Y\r#kM\n&y{'
        int_1 = 2690
        currency_type_1 = module_0.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_1, decimal_0, int_1)
        str_2 = '9h]y:0jtlGP'
        incompatible_currency_error_0 = module_1.IncompatibleCurrencyError(currency_0, currency_0, str_2)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.positive()
        price_4 = some_price_0.with_qty(decimal_0)
        list_1 = [none_money_0, int_0, price_3]
        bool_3 = price_1.__eq__(list_1)
        some_money_0 = module_1.SomeMoney()
    except BaseException:
        pass

def test_case_29():
    try:
        dict_0 = {}
        int_0 = 12
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = price_0.add(price_0)
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.floor_divide(dict_0)
        int_1 = -1173
        list_0 = [dict_0, int_1, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        bool_0 = some_price_0.lte(price_2)
        price_3 = some_price_0.positive()
        price_4 = price_2.__neg__()
        var_0 = None
        none_price_2 = module_1.NonePrice()
        money_1 = none_price_2.times(var_0)
        var_1 = money_1.__round__()
        bool_1 = price_1.__gt__(price_2)
        price_5 = some_price_0.positive()
        price_6 = some_price_0.add(price_0)
        price_7 = price_5.divide(var_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bytes_0 = b'\x06\xb1-Y'
        dict_0 = {}
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(bytes_0)
        price_1 = none_price_0.positive()
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.floor_divide(dict_0)
        bool_0 = none_price_0.lte(price_1)
        int_0 = -1173
        currency_type_0 = module_0.CurrencyType.CRYPTO
        bool_1 = none_price_0.is_equal(currency_type_0)
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
        bool_2 = some_price_0.lte(price_1)
        str_0 = 'x>xYY]wfdNT_{yjm'
        str_1 = 'XoW/B[]Y\r#kM\n&y{'
        int_1 = 2690
        currency_type_1 = module_0.CurrencyType.CRYPTO
        decimal_0 = module_2.Decimal()
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_1, decimal_0, int_1)
        str_2 = '9h]y:0jtlGP'
        incompatible_currency_error_0 = module_1.IncompatibleCurrencyError(currency_0, currency_0, str_2)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.with_ccy(currency_0)
        price_4 = some_price_0.with_qty(decimal_0)
        list_1 = [none_money_0, int_0, price_3]
        bool_3 = price_1.__eq__(list_1)
        some_money_0 = module_1.SomeMoney()
    except BaseException:
        pass

def test_case_31():
    try:
        decimal_0 = module_2.Decimal()
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        str_0 = ''
        str_1 = 'Belize Dollar'
        int_0 = 1033
        currency_type_0 = module_0.CurrencyType.CRYPTO
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        bool_1 = False
        some_price_0 = module_1.SomePrice(*list_0)
        price_0 = some_price_0.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_32():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        price_1 = price_0.__add__(price_0)
        none_price_1 = module_1.NonePrice()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_1)
        money_2 = none_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.subtract(price_2)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_4 = price_3.subtract(price_0)
        bool_1 = price_2.__lt__(price_2)
        float_0 = -665.51535
        money_3 = some_money_0.add(money_2)
        money_4 = money_3.multiply(float_0)
    except BaseException:
        pass

def test_case_33():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = none_money_0.add(money_1)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.METAL
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        bool_0 = price_0.__lt__(price_0)
        decimal_0 = module_2.Decimal()
        str_0 = 'k8CdrG1Ut23\\?)!'
        int_1 = 2749
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        bool_1 = False
        money_3 = money_1.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_34():
    try:
        dict_0 = {}
        int_0 = 12
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        var_0 = None
        money_2 = none_money_0.scalar_add(var_0)
        bool_0 = money_1.as_boolean()
        bool_1 = some_money_0.gt(money_1)
        money_3 = money_1.__add__(money_1)
        money_4 = money_1.subtract(money_3)
        currency_0 = None
        bool_2 = some_money_0.gte(money_1)
        bool_3 = money_4.lte(money_1)
        price_0 = some_price_0.convert(currency_0, some_price_0)
    except BaseException:
        pass

def test_case_35():
    try:
        price_0 = module_1.Price()
        bytes_0 = b'\xb1-'
        none_price_0 = module_1.NonePrice()
        price_1 = none_price_0.scalar_add(bytes_0)
        price_2 = none_price_0.positive()
        bool_0 = none_price_0.is_equal(price_1)
        int_0 = price_0.as_integer()
    except BaseException:
        pass

def test_case_36():
    try:
        dict_0 = {}
        int_0 = 12
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = price_0.add(price_0)
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.floor_divide(dict_0)
        int_1 = -1173
        list_0 = [dict_0, int_1, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        bool_0 = some_price_0.lte(price_2)
        bool_1 = some_price_0.lte(price_0)
        price_3 = some_price_0.positive()
        price_4 = some_price_0.subtract(price_1)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_5 = some_price_0.positive()
        price_6 = some_price_0.positive()
        none_price_2 = module_1.NonePrice()
        price_7 = none_price_2.add(price_0)
        float_0 = -1119.7
        price_8 = some_price_0.scalar_subtract(float_0)
        price_9 = some_price_0.add(price_8)
        price_10 = price_0.negative()
        price_11 = some_price_0.positive()
        price_12 = price_11.__add__(price_10)
        price_13 = some_price_0.add(price_12)
        price_14 = price_7.__neg__()
        int_2 = None
        price_15 = some_price_0.divide(int_2)
    except BaseException:
        pass

def test_case_37():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        price_2 = none_price_0.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        bool_0 = some_price_0.lte(price_2)
        price_3 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_4 = some_price_0.subtract(price_3)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_5 = some_price_0.positive()
        price_6 = none_price_0.add(price_1)
        price_7 = some_price_0.add(price_6)
        none_money_1 = module_1.NoneMoney(**dict_0)
        money_0 = none_money_1.scalar_add(none_price_0)
        float_0 = some_price_0.as_float()
        var_0 = money_0.__round__()
        bool_1 = price_5.__gt__(price_7)
        price_8 = some_price_0.positive()
        price_9 = some_price_0.add(price_4)
        money_1 = none_money_0.negative()
        monetary_operation_exception_1 = module_1.MonetaryOperationException(*list_0, **dict_0)
        int_1 = -1396
        str_0 = '\n        Returns the list of currencies.\n        '
        decimal_0 = module_2.Decimal()
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_1.IncompatibleCurrencyError(currency_0, currency_0)
        price_10 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_38():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        bool_0 = some_price_0.lte(price_2)
        price_3 = some_price_0.positive()
        price_4 = some_price_0.subtract(price_3)
        price_5 = some_price_0.positive()
        price_6 = none_price_0.add(price_1)
        price_7 = some_price_0.add(price_6)
        none_money_1 = module_1.NoneMoney(**dict_0)
        money_0 = module_1.Money(**dict_0)
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_39():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.subtract(price_1)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_3 = some_price_0.positive()
        price_4 = price_1.__abs__()
        none_money_1 = module_1.NoneMoney(**dict_0)
        var_0 = None
        money_2 = none_money_0.scalar_add(var_0)
        bool_1 = price_1.gte(price_4)
        money_3 = money_1.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_40():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_1 = none_price_1.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.subtract(price_2)
        bool_0 = none_price_0.is_equal(dict_0)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_4 = none_price_0.add(price_1)
        money_2 = money_1.divide(price_0)
    except BaseException:
        pass

def test_case_41():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_price_1 = module_1.NonePrice()
        price_0 = none_price_1.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.subtract(price_1)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_3 = some_price_0.positive()
        none_money_1 = module_1.NoneMoney(**dict_0)
        money_0 = none_money_1.scalar_add(none_price_0)
        var_0 = money_0.__round__()
        price_4 = some_price_0.positive()
        price_5 = some_price_0.add(price_2)
        decimal_0 = module_2.Decimal()
        money_1 = price_2.times(price_5)
    except BaseException:
        pass

def test_case_42():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.negative()
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_2)
        float_0 = money_1.as_float()
        price_3 = some_price_0.positive()
        price_4 = some_price_0.subtract(price_3)
        bool_1 = none_price_0.is_equal(dict_0)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_5 = some_price_0.positive()
        price_6 = none_price_0.add(price_1)
        price_7 = some_price_0.add(price_6)
        list_1 = [none_price_1]
        money_2 = some_price_0.times(list_1)
    except BaseException:
        pass

def test_case_43():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_2)
        price_3 = some_price_0.positive()
        price_4 = some_price_0.subtract(price_3)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_5 = some_price_0.positive()
        price_6 = none_price_0.add(price_1)
        price_7 = some_price_0.add(price_6)
        price_8 = price_7.negative()
        none_money_1 = module_1.NoneMoney(**dict_0)
        money_2 = none_money_1.scalar_add(none_price_0)
        bool_1 = price_7.gte(price_0)
        price_9 = module_1.Price(**dict_0)
        var_0 = money_2.__round__()
        var_1 = None
        money_3 = money_1.scalar_add(var_1)
    except BaseException:
        pass

def test_case_44():
    try:
        dict_0 = {}
        money_0 = module_1.Money(**dict_0)
        bool_0 = money_0.gte(money_0)
        money_1 = money_0.subtract(money_0)
    except BaseException:
        pass

def test_case_45():
    try:
        dict_0 = {}
        int_0 = 1578
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        none_money_0 = module_1.NoneMoney()
        int_1 = -1173
        list_0 = [dict_0, int_1, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        bool_0 = some_price_0.lte(price_1)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_2 = module_1.Price()
        price_3 = some_price_0.positive()
        price_4 = some_price_0.subtract(price_3)
        monetary_operation_exception_1 = module_1.MonetaryOperationException()
        price_5 = price_2.subtract(price_3)
    except BaseException:
        pass

def test_case_46():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round(int_0)
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_2)
        price_3 = some_price_0.positive()
        price_4 = some_price_0.subtract(price_3)
        float_0 = money_1.__float__()
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_5 = some_price_0.positive()
        price_6 = none_price_0.add(price_1)
        price_7 = some_price_0.add(price_6)
        price_8 = price_3.__abs__()
        none_money_1 = module_1.NoneMoney(**dict_0)
        money_2 = none_money_0.scalar_add(none_price_0)
        bool_1 = price_3.gte(price_3)
        var_0 = money_2.__round__()
        bool_2 = some_money_0.gt(money_0)
        bool_3 = price_8.__gt__(price_3)
        price_9 = some_price_0.positive()
        str_0 = 'p8x(#RP#l;\x0c'
        price_10 = price_8.floor_divide(str_0)
        price_11 = some_price_0.add(price_7)
        price_12 = price_7.__neg__()
        currency_0 = None
        tuple_0 = ()
        price_13 = some_price_0.convert(currency_0, tuple_0)
    except BaseException:
        pass

def test_case_47():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        price_1 = price_0.negative()
        none_price_1 = module_1.NonePrice()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_1)
        money_2 = none_money_0.add(money_1)
        money_3 = none_money_0.add(money_2)
        price_2 = some_price_0.positive()
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_3 = price_0.subtract(price_0)
        price_4 = price_2.subtract(price_2)
        bool_1 = price_2.__lt__(price_0)
        str_0 = 'k8CdrG1Ut23\\?)!'
        money_4 = some_money_0.floor_divide(str_0)
        bool_2 = money_4.as_boolean()
        bool_3 = price_4.gte(price_2)
        var_0 = money_1.__round__()
    except BaseException:
        pass

def test_case_48():
    try:
        price_0 = module_1.Price()
        price_1 = price_0.positive()
    except BaseException:
        pass

def test_case_49():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        price_1 = price_0.__add__(price_0)
        none_price_1 = module_1.NonePrice()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_1)
        money_2 = none_money_0.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.subtract(price_2)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_4 = price_3.subtract(price_0)
        bool_1 = price_2.__lt__(price_2)
        bool_2 = none_money_0.lt(money_0)
        bool_3 = money_1.as_boolean()
        bool_4 = price_4.gte(price_2)
        var_0 = money_0.__round__()
        bool_5 = some_money_0.gt(money_0)
        bool_6 = some_money_0.gt(money_1)
        bool_7 = price_2.__gt__(price_2)
        price_5 = some_price_0.positive()
        price_6 = price_4.scalar_subtract(bool_1)
        price_7 = some_price_0.add(price_4)
        currency_0 = None
        bool_8 = some_money_0.gte(money_2)
        int_1 = some_money_0.as_integer()
        price_8 = some_price_0.convert(currency_0, bool_7)
    except BaseException:
        pass

def test_case_50():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.__add__(price_0)
        bool_0 = money_1.__lt__(money_1)
        decimal_0 = module_2.Decimal()
        str_0 = 'k8CdrG1Ut23\\?)!'
        money_2 = some_money_0.add(money_1)
        bool_1 = money_1.as_boolean()
        bool_2 = price_2.gte(price_0)
        money_3 = some_money_0.positive()
        bool_3 = some_money_0.gt(money_0)
        bool_4 = price_2.__gt__(price_1)
        str_1 = None
        int_1 = 1411
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        money_4 = money_3.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_51():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        bool_0 = some_price_0.lte(price_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.subtract(price_1)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_3 = price_1.__add__(price_1)
        none_price_1 = module_1.NonePrice()
        bool_1 = price_1.__lt__(price_1)
        money_0 = some_money_0.positive()
        bool_2 = none_price_0.lte(price_1)
        bool_3 = price_3.gte(price_1)
        bool_4 = money_0.is_equal(none_price_1)
        bool_5 = price_3.__gt__(price_0)
        price_4 = price_0.__neg__()
        currency_0 = None
        price_5 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_52():
    try:
        dict_0 = {}
        int_0 = -41
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        none_price_1 = module_1.NonePrice()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = some_price_0.lte(price_0)
        price_1 = none_price_1.round()
        money_2 = money_1.add(money_1)
        price_2 = some_price_0.positive()
        price_3 = some_price_0.subtract(price_2)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_4 = price_3.subtract(price_0)
        bool_1 = price_2.__lt__(price_2)
        money_3 = some_money_0.positive()
        bool_2 = none_price_0.lte(price_0)
        bool_3 = price_2.gte(price_3)
        bool_4 = money_2.is_equal(money_2)
        bool_5 = price_3.__gt__(price_4)
        money_4 = money_1.__add__(money_2)
        price_5 = price_1.__neg__()
        money_5 = none_money_0.negative()
        price_6 = none_price_1.positive()
        bool_6 = some_money_0.gte(money_0)
        date_0 = module_3.date()
    except BaseException:
        pass

def test_case_53():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_1 = some_price_0.subtract(price_0)
        bool_0 = price_0.lt(price_1)
        str_0 = 'SLL'
        str_1 = "b?,=L)62Doq`'A-\rHy"
        int_1 = 4
        decimal_0 = module_2.Decimal()
        int_2 = 360
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        price_2 = price_0.__add__(price_0)
        none_price_1 = module_1.NonePrice()
        bool_1 = money_1.__lt__(money_1)
        bool_2 = price_0.__lt__(price_0)
        money_2 = money_1.__abs__()
        bool_3 = none_price_0.lte(price_0)
        price_3 = some_price_0.subtract(price_1)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_4 = price_3.subtract(price_1)
        bool_4 = price_2.__lt__(price_4)
        money_3 = some_money_0.with_ccy(currency_0)
        money_4 = some_money_0.add(money_3)
    except BaseException:
        pass

def test_case_54():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_1 = some_price_0.subtract(price_0)
        bool_0 = price_0.lt(price_1)
        str_0 = 'SLL'
        str_1 = "b?,=L)62Doq`'A-\rHy"
        int_1 = 4
        decimal_0 = module_2.Decimal()
        int_2 = 360
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        money_2 = none_money_0.with_ccy(currency_0)
        price_2 = price_0.__add__(price_0)
        none_price_1 = module_1.NonePrice()
        bool_1 = money_1.__lt__(money_1)
        bool_2 = price_0.__lt__(price_0)
        money_3 = money_1.__abs__()
        bool_3 = none_price_0.lte(price_0)
        bool_4 = money_1.as_boolean()
        bool_5 = money_1.__le__(money_2)
        bool_6 = price_2.gte(price_0)
        bool_7 = some_money_0.gt(money_3)
        bool_8 = price_2.__gt__(price_2)
        money_4 = money_1.__add__(money_1)
        price_3 = price_1.__neg__()
        money_5 = money_3.subtract(money_4)
        currency_1 = None
        price_4 = none_price_0.positive()
        bool_9 = some_money_0.gte(money_5)
        price_5 = some_price_0.convert(currency_1)
    except BaseException:
        pass

def test_case_55():
    try:
        price_0 = module_1.Price()
        none_price_0 = module_1.NonePrice()
        price_1 = none_price_0.subtract(price_0)
        price_2 = price_1.subtract(price_0)
    except BaseException:
        pass

def test_case_56():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        str_0 = '=n5G'
        str_1 = 'o kQa,'
        int_1 = None
        currency_type_0 = None
        decimal_0 = module_2.Decimal()
        int_2 = -184
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        price_1 = price_0.with_ccy(currency_0)
        bool_0 = some_price_0.lte(price_0)
        price_2 = some_price_0.with_ccy(currency_0)
        price_3 = some_price_0.subtract(price_2)
    except BaseException:
        pass

def test_case_57():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        str_0 = '=n5G'
        str_1 = 'o kQa,'
        int_1 = None
        currency_type_0 = None
        decimal_0 = module_2.Decimal()
        int_2 = -178
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        price_0 = some_price_0.with_ccy(currency_0)
        price_1 = some_price_0.abs()
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_2 = price_0.__add__(price_0)
        bool_0 = money_1.__lt__(money_1)
        bool_1 = price_0.__lt__(price_0)
        decimal_1 = module_2.Decimal()
        money_2 = money_1.__abs__()
        bool_2 = money_1.as_boolean()
        bool_3 = price_2.gte(price_0)
        bool_4 = some_money_0.gt(money_0)
        bool_5 = price_2.__gt__(price_0)
        price_3 = some_price_0.positive()
        bool_6 = price_2.__le__(price_1)
    except BaseException:
        pass

def test_case_58():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.round()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = none_money_0.add(money_0)
        str_0 = '=n5G'
        str_1 = 'o kQa,'
        int_1 = None
        currency_type_0 = None
        decimal_0 = module_2.Decimal()
        int_2 = -178
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        price_0 = some_price_0.positive()
        price_1 = some_price_0.subtract(price_0)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_2 = price_0.__add__(price_0)
        bool_0 = money_1.__lt__(money_1)
        bool_1 = price_1.__lt__(price_0)
        bool_2 = money_1.as_boolean()
        price_3 = module_1.Price()
        bool_3 = price_3.gte(price_1)
        bool_4 = some_money_0.gt(money_1)
        bool_5 = price_2.__gt__(price_2)
        money_2 = money_0.__add__(money_0)
        price_4 = price_1.__neg__()
        money_3 = money_0.subtract(money_0)
        price_5 = none_price_0.positive()
        bool_6 = some_money_0.gte(money_1)
        price_6 = some_price_0.convert(currency_0, bool_2)
    except BaseException:
        pass

def test_case_59():
    try:
        dict_0 = {}
        int_0 = 16
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        date_0 = None
        money_2 = money_1.with_dov(date_0)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.__add__(price_0)
        bool_0 = money_1.__lt__(money_1)
        bool_1 = price_0.__lt__(price_0)
        decimal_0 = module_2.Decimal()
        str_0 = 'k8CdrG1Ut23\\?)!'
        int_1 = -720
        money_3 = money_1.__abs__()
        money_4 = some_money_0.add(money_1)
        bool_2 = money_1.as_boolean()
        bool_3 = price_2.gte(price_0)
        money_5 = some_money_0.positive()
        bool_4 = some_money_0.gt(money_0)
        bool_5 = price_2.__gt__(price_1)
        price_3 = some_price_0.positive()
        bool_6 = price_2.__le__(price_1)
        money_6 = money_4.__add__(money_0)
        price_4 = price_1.__neg__()
        money_7 = money_6.subtract(money_6)
        bool_7 = money_1.__ge__(money_1)
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        bool_8 = False
        money_8 = some_money_0.convert(currency_0, bool_8)
    except BaseException:
        pass

def test_case_60():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = none_money_0.abs()
        bool_0 = some_price_0.lte(price_0)
        price_1 = some_price_0.positive()
        price_2 = some_price_0.subtract(price_1)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_3 = price_1.__add__(price_1)
        bool_1 = money_1.__lt__(money_1)
        bool_2 = price_1.__lt__(price_1)
        decimal_0 = module_2.Decimal()
        bool_3 = some_money_0.gt(money_1)
        money_2 = module_1.Money()
        bool_4 = money_1.as_boolean()
        bool_5 = price_3.gte(price_1)
        money_3 = some_money_0.positive()
        bool_6 = some_money_0.gt(money_0)
        bool_7 = price_3.__gt__(price_3)
        money_4 = money_2.__add__(money_2)
        price_4 = price_1.__abs__()
        money_5 = money_3.subtract(money_4)
    except BaseException:
        pass

def test_case_61():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_1 = some_price_0.subtract(price_0)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_2 = price_0.__add__(price_0)
        bool_0 = money_1.__lt__(money_1)
        bool_1 = price_0.__lt__(price_0)
        decimal_0 = module_2.Decimal()
        int_1 = -738
        money_2 = some_money_0.add(money_1)
        bool_2 = money_1.as_boolean()
        price_3 = price_2.__sub__(price_1)
        bool_3 = price_2.gte(price_0)
        money_3 = some_money_0.positive()
        bool_4 = some_money_0.gt(money_0)
        bool_5 = price_2.__gt__(price_1)
        price_4 = some_price_0.positive()
        bool_6 = price_2.__le__(price_1)
        money_4 = money_2.__add__(money_0)
        price_5 = price_1.__neg__()
        money_5 = module_1.Money()
        bool_7 = some_money_0.gte(money_2)
        bool_8 = money_5.lte(money_1)
        str_0 = None
        bool_9 = some_money_0.gt(money_2)
        str_1 = None
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        price_6 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_62():
    try:
        dict_0 = {}
        int_0 = 16
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_1 = some_price_0.subtract(price_0)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        bool_0 = money_1.__lt__(money_1)
        bool_1 = price_0.__lt__(price_0)
        int_1 = -2115
        decimal_0 = module_2.Decimal()
        str_0 = 'k8CdrG1Ut23\\?)!'
        money_2 = some_money_0.add(money_1)
        bool_2 = money_1.as_boolean()
        bool_3 = price_1.gte(price_0)
        monetary_operation_exception_1 = module_1.MonetaryOperationException()
        str_1 = '$@\rXo)'
        int_2 = -947
        currency_0 = module_0.Currency(str_1, str_0, int_1, currency_type_0, decimal_0, int_2)
        price_2 = price_1.with_ccy(currency_0)
        bool_4 = price_2.__lt__(price_1)
    except BaseException:
        pass

def test_case_63():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.abs()
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        str_0 = '(b%\x0cSw('
        str_1 = ')X.d];m?n!R\x0c=>'
        int_1 = 3
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        str_2 = "az'y`N"
        decimal_1 = module_2.Decimal()
        currency_0 = module_0.Currency(str_2, str_0, int_0, currency_type_0, decimal_1, int_1)
        decimal_2 = currency_0.quantize(decimal_0)
        currency_1 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_2, int_1)
        money_0 = module_1.Money()
        money_1 = money_0.with_ccy(currency_1)
        money_2 = money_0.positive()
    except BaseException:
        pass

def test_case_64():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, none_money_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_1 = some_price_0.subtract(price_0)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_2 = module_1.Price()
        bool_0 = money_1.__lt__(money_1)
        bool_1 = price_0.__lt__(price_0)
        int_1 = -2115
        decimal_0 = module_2.Decimal()
        money_2 = some_money_0.add(money_1)
        bool_2 = money_1.as_boolean()
        bool_3 = price_2.gte(price_0)
        money_3 = some_money_0.positive()
        bool_4 = some_money_0.gt(money_0)
        bool_5 = price_2.__gt__(price_1)
        price_3 = some_price_0.positive()
        bool_6 = price_2.__le__(price_1)
        money_4 = none_money_0.subtract(money_1)
        price_4 = price_1.__neg__()
        money_5 = money_4.subtract(money_4)
        bool_7 = some_money_0.gte(money_2)
        bool_8 = money_5.lte(money_1)
        str_0 = None
        bool_9 = some_money_0.gt(money_2)
        str_1 = None
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        price_5 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_65():
    try:
        dict_0 = {}
        money_0 = module_1.Money()
        none_money_0 = module_1.NoneMoney(**dict_0)
        decimal_0 = module_2.Decimal(**dict_0)
        money_1 = money_0.floor_divide(decimal_0)
    except BaseException:
        pass

def test_case_66():
    try:
        float_0 = 1.0
        money_0 = module_1.Money()
        bool_0 = money_0.is_equal(float_0)
    except BaseException:
        pass

def test_case_67():
    try:
        money_0 = module_1.Money()
        float_0 = money_0.as_float()
    except BaseException:
        pass

def test_case_68():
    try:
        money_0 = module_1.Money()
        none_money_0 = module_1.NoneMoney()
        bool_0 = none_money_0.gt(money_0)
        decimal_0 = module_2.Decimal()
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.with_qty(decimal_0)
        money_1 = money_0.abs()
    except BaseException:
        pass

def test_case_69():
    try:
        money_0 = module_1.Money()
        str_0 = 'g@#'
        float_0 = money_0.__float__()
        int_0 = 968
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        bool_0 = money_0.__gt__(money_0)
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_1 = money_0.negative()
    except BaseException:
        pass

def test_case_70():
    try:
        money_0 = module_1.Money()
        float_0 = money_0.__float__()
        int_0 = 968
        currency_type_0 = module_0.CurrencyType.MONEY
        str_0 = '}l1'
        str_1 = None
        decimal_0 = module_2.Decimal()
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        optional_0 = None
        bool_0 = True
        money_1 = money_0.convert(currency_0, optional_0, bool_0)
    except BaseException:
        pass

def test_case_71():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.__bool__()
        some_price_0 = module_1.SomePrice()
    except BaseException:
        pass

def test_case_72():
    try:
        price_0 = module_1.Price()
        bytes_0 = b'\xb8\x96\x10\x9eO\x9c3\x94\x8d\\'
        price_1 = price_0.__mul__(bytes_0)
        price_2 = price_0.positive()
    except BaseException:
        pass

def test_case_73():
    try:
        price_0 = module_1.Price()
        price_1 = price_0.add(price_0)
    except BaseException:
        pass

def test_case_74():
    try:
        dict_0 = {}
        int_0 = 16
        none_price_0 = module_1.NonePrice(**dict_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [dict_0, int_0, int_0]
        some_price_0 = module_1.SomePrice(*list_0)
        money_0 = none_money_0.positive()
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
        money_1 = some_money_0.subtract(money_0)
        price_0 = some_price_0.positive()
        currency_type_0 = module_0.CurrencyType.MONEY
        price_1 = some_price_0.subtract(price_0)
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        price_2 = price_0.__add__(price_0)
        bool_0 = money_1.__lt__(money_1)
        bool_1 = price_0.__lt__(price_0)
        int_1 = -2115
        decimal_0 = module_2.Decimal()
        int_2 = -720
        money_2 = some_money_0.add(money_1)
        str_0 = 'olLf\r0\\'
        money_3 = money_2.divide(str_0)
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_2)
        none_money_1 = module_1.NoneMoney(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_75():
    try:
        none_price_0 = module_1.NonePrice()
        price_0 = module_1.Price()
        bool_0 = price_0.as_boolean()
    except BaseException:
        pass

def test_case_76():
    try:
        money_0 = module_1.Money()
        money_1 = money_0.scalar_subtract(money_0)
    except BaseException:
        pass

def test_case_77():
    try:
        money_0 = module_1.Money()
        var_0 = None
        money_1 = money_0.multiply(var_0)
    except BaseException:
        pass

def test_case_78():
    try:
        price_0 = module_1.Price()
        bytes_0 = b'\xb8\x96\x10\x9eO\x9c3\xcf\x8d\xac\\'
        price_1 = price_0.__mul__(bytes_0)
        price_2 = price_0.abs()
    except BaseException:
        pass

def test_case_79():
    try:
        money_0 = module_1.Money()
        money_1 = money_0.add(money_0)
    except BaseException:
        pass

def test_case_80():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.as_boolean()
    except BaseException:
        pass

def test_case_81():
    try:
        money_0 = None
        money_1 = module_1.Money()
        bool_0 = money_1.__lt__(money_0)
        bool_1 = money_1.__gt__(money_0)
        str_0 = 'EUR'
        currency_0 = module_0.Currency(str_0)
    except BaseException:
        pass

def test_case_82():
    try:
        dict_0 = {}
        price_0 = module_1.Price(**dict_0)
        price_1 = price_0.negative()
    except BaseException:
        pass