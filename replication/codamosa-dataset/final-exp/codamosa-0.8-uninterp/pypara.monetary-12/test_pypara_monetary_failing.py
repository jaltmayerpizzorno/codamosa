# Automatically generated by Pynguin.
import pypara.monetary as module_0
import decimal as module_1
import pypara.currencies as module_2
import builtins as module_3
import datetime as module_4

def test_case_0():
    try:
        str_0 = '\n    Provides an exception that a certain monetary operation can not be carried on.\n    '
        int_0 = -6337
        none_price_0 = module_0.NonePrice()
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__(int_0)
        list_0 = [var_0, none_price_0, var_0, int_0]
        price_0 = none_price_0.divide(list_0)
        date_0 = None
        none_money_1 = module_0.NoneMoney()
        money_1 = none_money_1.with_dov(date_0)
        str_1 = 'x_Ex]"<\'?U{/8xP%*G}5'
        dict_0 = {str_0: str_0, str_1: int_0}
        decimal_0 = module_1.Decimal(**dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -6337
        none_price_0 = module_0.NonePrice()
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__(int_0)
        int_1 = none_price_0.as_integer()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'vO\n\x0bJF)20'
        int_0 = -575
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        var_0 = price_0.__round__()
        list_0 = [var_0, var_0, var_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.negative()
        money_1 = money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'vO\n\x0bJF)20'
        int_0 = -575
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        list_0 = [int_0, int_0, int_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.negative()
        money_1 = money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1901.2
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(float_0)
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_5():
    try:
        currency_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.convert(currency_0)
        str_0 = 'CvADFRPQZ]\tMWtt'
        str_1 = 'I'
        int_0 = -818
        currency_type_0 = module_2.CurrencyType.MONEY
        list_0 = [int_0]
        decimal_0 = module_1.Decimal(*list_0)
        currency_1 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_1, currency_1)
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_6():
    try:
        currency_0 = None
        none_price_0 = module_0.NonePrice()
        currency_type_0 = module_2.CurrencyType.METAL
        price_0 = none_price_0.divide(currency_type_0)
        price_1 = none_price_0.convert(currency_0)
        int_0 = -1242
        var_0 = price_0.__round__(int_0)
        price_2 = price_1.__neg__()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_7():
    try:
        currency_0 = None
        none_price_0 = module_0.NonePrice()
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.round()
        money_1 = money_0.abs()
        price_0 = none_price_0.convert(currency_0)
        float_0 = price_0.__float__()
    except BaseException:
        pass

def test_case_8():
    try:
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.abs()
        bool_0 = price_1.__gt__(price_0)
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ':h55z!_RS]z!'
        list_0 = [str_0]
        currency_type_0 = module_2.CurrencyType.CRYPTO
        list_1 = []
        none_price_0 = module_0.NonePrice(*list_1)
        price_0 = none_price_0.floor_divide(currency_type_0)
        price_1 = price_0.scalar_subtract(list_0)
        currency_0 = None
        none_price_1 = module_0.NonePrice()
        price_2 = none_price_1.with_ccy(currency_0)
        str_1 = '\\.k7-I}'
        dict_0 = {str_1: str_1, str_1: none_price_1}
        some_price_0 = module_0.SomePrice(**dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -6337
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.divide(var_0)
        list_0 = []
        price_1 = module_0.Price(*list_0)
        price_2 = price_1.__mul__(int_0)
        price_3 = price_2.__pos__()
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -6337
        none_price_0 = module_0.NonePrice()
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        var_0 = money_0.__round__(int_0)
        list_0 = [var_0, none_price_0, var_0, int_0]
        price_0 = none_price_0.divide(list_0)
        bool_0 = none_price_0.as_boolean()
        float_0 = money_0.__float__()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        int_0 = -1328
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = []
        none_money_0 = module_0.NoneMoney(*list_0)
        int_0 = none_money_0.as_integer()
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'ETH'
        set_0 = {str_2}
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.multiply(set_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '(8|K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = '1JOfA#NCo,ZJ?'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        var_0 = None
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(var_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.gt(money_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        none_price_0 = module_0.NonePrice()
        price_1 = some_price_0.floor_divide(decimal_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = '$~Z-\\7t'
        int_0 = 375
        money_0 = module_0.Money()
        money_1 = money_0.__neg__()
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        some_price_0 = module_0.SomePrice(*list_0)
        some_price_1 = module_0.SomePrice(*list_0)
        some_price_2 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        price_1 = some_price_0.with_ccy(currency_0)
        bool_0 = some_money_0.lt(money_0)
        price_2 = some_price_0.floor_divide(decimal_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        none_price_0 = module_0.NonePrice()
        some_money_0 = module_0.SomeMoney(*list_0)
        var_0 = None
        money_0 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = module_3.dict()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_0 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        price_1 = price_0.positive()
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_0.__le__(price_0)
        decimal_1 = module_1.Decimal()
        str_1 = '}'
        int_0 = 435
        currency_type_0 = module_2.CurrencyType.CRYPTO
        int_1 = -782
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_1)
        bool_1 = None
        price_2 = some_price_0.convert(currency_0, date_0, bool_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        list_0 = [str_0, str_0, str_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        float_0 = some_money_0.as_float()
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_1 = module_3.dict()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.gt(money_0)
        price_0 = some_price_0.with_qty(decimal_0)
        price_1 = none_price_0.positive()
        some_price_1 = module_0.SomePrice(*list_0)
        bool_1 = price_0.__le__(price_0)
        money_1 = some_money_0.subtract(money_0)
        bool_2 = some_money_0.gte(money_0)
        money_2 = money_0.__mul__(money_0)
        some_price_2 = module_0.SomePrice(*list_0, **dict_1)
        bool_3 = price_0.gt(price_0)
        decimal_1 = module_1.Decimal()
        bool_4 = price_1.__lt__(price_0)
        money_3 = money_1.add(money_0)
        price_2 = none_price_0.subtract(price_0)
        bool_5 = money_1.__le__(money_3)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        float_1 = price_0.as_float()
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = None
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        none_price_0 = module_0.NonePrice()
        decimal_1 = module_1.Decimal()
        some_price_1 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.lt(money_0)
        bool_1 = some_money_0.is_equal(str_2)
        bool_2 = some_money_0.is_equal(int_0)
        bool_3 = some_price_0.is_equal(price_0)
        bool_4 = True
        price_1 = some_price_0.convert(currency_0, bool_4)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        some_price_0 = module_0.SomePrice(*list_0)
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        var_0 = None
        money_0 = some_money_0.divide(var_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_1 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        money_0 = price_0.times(price_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = price_0.with_qty(decimal_0)
        float_1 = price_1.as_float()
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '(8|K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = '1JOfA#NCo,ZJ?'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        decimal_1 = module_1.Decimal()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.with_qty(decimal_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than]or eq\nal to ``other``, and\n        2. :class:`IncompatibleCErrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = price_0.positive()
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_1 = price_0.__sub__(price_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.lte(money_0)
        bool_1 = some_money_0.lt(money_0)
        bool_2 = some_money_0.is_equal(str_2)
        str_3 = 'P'
        bool_3 = some_price_0.is_equal(str_3)
        price_2 = some_price_0.round(int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.abs()
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        money_1 = money_0.multiply(set_0)
        money_2 = money_1.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        price_0 = some_price_0.with_qty(decimal_0)
        float_0 = price_0.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_2)
        price_1 = some_price_1.add(price_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than]or eq\nal to ``other``, and\n        2. :class:`IncompatibleCErrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        float_0 = None
        str_3 = 'r/AemjIEFAK'
        int_0 = -134
        decimal_0 = module_1.Decimal()
        int_1 = -71
        currency_type_0 = module_2.CurrencyType.METAL
        decimal_1 = module_1.Decimal()
        int_2 = 366
        currency_0 = module_2.Currency(str_3, str_3, int_1, currency_type_0, decimal_1, int_2)
        decimal_2 = currency_0.quantize(decimal_0)
        currency_1 = module_2.Currency(str_0, str_3, int_0, currency_type_0, decimal_2, int_1)
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.with_ccy(currency_1)
        money_1 = money_0.__abs__()
        money_2 = money_1.__floordiv__(float_0)
        str_4 = 's~Z-\\7t'
        int_3 = 375
        currency_type_1 = module_2.CurrencyType.CRYPTO
        decimal_3 = module_1.Decimal()
        currency_2 = module_2.Currency(str_2, str_4, int_3, currency_type_1, decimal_3, int_3)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_2, currency_2)
        price_0 = module_0.Price()
        float_1 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        bool_0 = True
        price_1 = some_price_0.convert(currency_2, int_3, bool_0)
    except BaseException:
        pass

def test_case_35():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.negative()
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'HUF'
        str_3 = '$~Z-\\7t'
        int_0 = 375
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.as_boolean()
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        str_4 = 'VY-AzNjp3PZC('
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.divide(str_4)
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.lt(money_0)
        bool_1 = some_money_0.is_equal(str_2)
        none_price_1 = module_0.NonePrice()
        price_1 = none_price_0.subtract(price_0)
        bool_2 = some_price_0.is_equal(price_1)
        int_1 = -925
        currency_1 = module_2.Currency(str_2, str_2, int_0, currency_type_0, decimal_0, int_1)
        price_2 = some_price_0.convert(currency_1)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_1 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        price_1 = price_0.abs()
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = price_0.__pos__()
        price_2 = module_0.Price()
        int_1 = -2485
        currency_1 = module_2.Currency(str_0, str_2, int_0, currency_type_0, decimal_0, int_1)
        none_money_0 = module_0.NoneMoney(*list_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        int_1 = price_0.as_integer()
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_1 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        price_1 = price_0.add(price_0)
    except BaseException:
        pass

def test_case_42():
    try:
        decimal_0 = module_1.Decimal()
        price_0 = module_0.Price()
        price_1 = price_0.subtract(price_0)
    except BaseException:
        pass

def test_case_43():
    try:
        decimal_0 = module_1.Decimal()
        price_0 = module_0.Price()
        var_0 = price_0.__round__()
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = '(8|(K(  ik'
        float_0 = None
        str_1 = 'r/AemjIEFAK'
        int_0 = -134
        currency_type_0 = module_2.CurrencyType.METAL
        decimal_0 = module_1.Decimal()
        int_1 = -71
        currency_type_1 = module_2.CurrencyType.METAL
        decimal_1 = module_1.Decimal()
        int_2 = 366
        currency_0 = module_2.Currency(str_1, str_1, int_1, currency_type_1, decimal_1, int_2)
        decimal_2 = currency_0.quantize(decimal_0)
        currency_1 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_2, int_1)
        none_money_0 = module_0.NoneMoney()
        money_0 = module_0.Money()
        money_1 = money_0.__abs__()
        money_2 = money_1.__floordiv__(float_0)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_0 = money_1.__gt__(money_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_1 = none_money_0.gte(money_0)
        bool_2 = some_money_1.is_equal(str_1)
        money_2 = money_0.__neg__()
        bool_3 = some_price_0.is_equal(price_0)
        bool_4 = some_money_1.gte(money_0)
        bool_5 = some_money_0.gte(money_1)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than]or eq\nal to ``other``, and\n        2. :class:`IncompatibleCErrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        str_1 = ''
        int_0 = -412
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        decimal_0 = module_1.Decimal()
        str_2 = 'Ko~OhKRvS?IpQBpu\x0cS'
        str_3 = "dGADJg\x0blhi S\\'i"
        int_1 = 1921
        decimal_1 = module_1.Decimal()
        int_2 = 0
        currency_0 = module_2.Currency(str_2, str_3, int_1, currency_type_0, decimal_1, int_2)
        decimal_2 = currency_0.quantize(decimal_0)
        currency_1 = module_2.Currency(str_1, str_0, int_0, currency_type_0, decimal_2, int_1)
        price_0 = module_0.Price()
        price_1 = price_0.divide(currency_1)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_0 = money_1.__gt__(money_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        bool_1 = price_0.__le__(price_0)
        bool_2 = some_money_0.is_equal(some_money_0)
        decimal_1 = module_1.Decimal()
        bool_3 = some_money_0.gte(money_1)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = '(8|(K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than]or eq\nal to ``other``, and\n        2. :class:`IncompatibleCErrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.abs()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.scalar_add(money_0)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_*9'
        str_2 = 's~Z-\\7t'
        int_0 = 329
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        int_1 = price_0.__int__()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        monetary_operation_exception_0 = module_0.MonetaryOperationException(**dict_0)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        price_1 = price_0.__add__(price_0)
        money_0 = some_price_0.times(currency_0)
    except BaseException:
        pass

def test_case_51():
    try:
        str_0 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        tuple_0 = ()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        price_0 = some_price_0.scalar_add(tuple_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'O'
        decimal_0 = module_1.Decimal()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        bool_0 = some_money_0.is_equal(str_1)
        currency_0 = None
        money_0 = some_money_0.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = '(8|(K(  ik'
        decimal_0 = module_1.Decimal()
        list_0 = [str_0, str_0, str_0]
        some_money_0 = module_0.SomeMoney(*list_0)
        dict_0 = {}
        price_0 = module_0.Price()
        price_1 = price_0.floor_divide(dict_0)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = '(8|K(  ik'
        str_1 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_1, str_1: str_1, str_1: str_1, str_1: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_2 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_3 = '1JOfA#NCo,ZJ?'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        var_0 = None
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(var_0)
        none_money_0 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = 's~Z-\\7t'
        int_0 = 392
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = price_0.multiply(price_0)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.divide(var_0)
        money_1 = none_money_0.negative()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_2 = some_money_0.add(money_0)
        bool_0 = money_2.__gt__(money_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        money_3 = money_0.__neg__()
        bool_1 = some_price_0.is_equal(price_0)
        bool_2 = some_money_1.gte(money_0)
        price_1 = price_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_1 = module_3.dict()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.gt(money_0)
        price_0 = some_price_0.with_dov(date_0)
        some_price_1 = module_0.SomePrice(*list_0)
        str_1 = '6B};9'
        price_1 = some_price_1.floor_divide(str_1)
        decimal_0 = module_1.Decimal()
        money_1 = some_money_0.subtract(money_0)
        bool_1 = some_money_0.gte(money_0)
        some_price_2 = module_0.SomePrice(*list_0, **dict_1)
        str_2 = '\n    Defines a foreign exchange (FX) rate model.\n\n    Note that the constructor of this class is not safe: It does not check input. :method:`FXRate.of`, on the\n    other hand provides a safer way of creating :class:`FXRate` instances.\n\n    **Implementation Note:**\n\n    I wanted to use an immutable, compact object model with fast creation and property access. Options were\n    tweaked plain-vanilla Python class, NamedTuple and dataclasses.\n\n    NamedTuple has slightly slower property access, whereby immutable dataclasses are slow for creation.\n\n    Furthermore, as of the implementation of this class, mypy does not have proper dataclass support. Therefore,\n    I am sticking to NamedTuple implementation.\n\n    Last but not least, as objects are essentially tuples, indexed access to properties is possible and slightly\n    faster.\n\n    >>> import datetime\n    >>> from decimal import Decimal\n    >>> from pypara.currencies import Currencies\n    >>> rate = FXRate(Currencies["EUR"], Currencies["USD"], datetime.date.today(), Decimal("2"))\n    >>> ccy1, ccy2, date, value = rate\n    >>> ccy1 == Currencies["EUR"]\n    True\n    >>> ccy2 == Currencies["USD"]\n    True\n    >>> date == datetime.date.today()\n    True\n    >>> value == Decimal("2")\n    True\n    '
        str_3 = '03MXdBJ]7b!szp U'
        int_0 = -2016
        currency_type_0 = module_2.CurrencyType.CRYPTO
        currency_0 = module_2.Currency(str_2, str_3, int_0, currency_type_0, decimal_0, int_0)
        price_2 = price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = '*'
        int_0 = 364
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        float_0 = price_0.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_1.is_equal(str_1)
        bool_1 = some_price_0.is_equal(price_0)
        bool_2 = price_0.__ge__(price_0)
        bool_3 = some_money_0.gte(money_0)
        bool_4 = price_0.gt(price_0)
        str_2 = None
        currency_type_0 = None
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_59():
    try:
        str_0 = '\n        Applies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = 's~Z-\\7t'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        price_0 = module_0.Price()
        price_1 = price_0.with_ccy(currency_0)
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_price_1 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_0.__le__(price_0)
        bool_1 = some_money_0.is_equal(str_0)
        bool_2 = price_0.__ge__(price_0)
        money_0 = none_money_1.round()
        bool_3 = some_money_0.gte(money_0)
        price_1 = some_price_0.subtract(price_0)
    except BaseException:
        pass

def test_case_61():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        some_price_1 = None
        money_1 = none_price_0.times(some_price_1)
        bool_0 = price_0.lt(price_0)
        bool_1 = some_money_0.lt(money_1)
        bool_2 = some_money_0.is_equal(some_money_0)
        some_price_2 = module_0.SomePrice(**dict_0)
    except BaseException:
        pass

def test_case_62():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = 'w'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        decimal_1 = currency_0.quantize(decimal_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_1.is_equal(str_2)
        bool_1 = price_0.__gt__(price_0)
        bool_2 = some_money_1.gte(money_0)
        money_2 = money_1.subtract(money_0)
        bool_3 = none_money_0.lt(money_2)
        price_1 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_63():
    try:
        str_0 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        bool_0 = price_0.gte(price_0)
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_64():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.lt(money_0)
        bool_1 = some_money_0.is_equal(str_2)
        str_3 = 'make_quantizer'
        int_1 = 2
        currency_1 = module_2.Currency(str_3, str_1, int_1, currency_type_0, decimal_0, int_1)
        bool_2 = False
        price_1 = price_0.convert(currency_1, money_0, bool_2)
    except BaseException:
        pass

def test_case_65():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.lt(money_0)
        bool_1 = some_money_0.is_equal(str_2)
        bool_2 = some_price_0.is_equal(currency_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_3 = some_price_0.is_equal(some_money_1)
        price_1 = some_price_0.convert(currency_0, some_money_0)
    except BaseException:
        pass

def test_case_66():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = some_money_0.positive()
    except BaseException:
        pass

def test_case_67():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = some_money_0.round()
    except BaseException:
        pass

def test_case_68():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = 'i&'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        var_0 = None
        price_1 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_69():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = 'i&'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        bool_0 = price_0.lte(price_0)
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_1 = some_money_0.lt(money_0)
        money_1 = some_money_0.add(money_0)
        str_3 = 'ZR>@0^{6s\x0c){h"rK\x0c#^'
        int_1 = None
        currency_1 = module_2.Currency(str_1, str_3, int_1, currency_type_0, decimal_0, int_0)
        decimal_1 = currency_1.quantize(decimal_0)
        incompatible_currency_error_1 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_1 = module_0.Price()
        float_1 = price_0.__float__()
        some_price_1 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_70():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = some_money_0.with_ccy(currency_0)
        bool_0 = some_money_0.lt(money_0)
    except BaseException:
        pass

def test_case_71():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        var_0 = None
        bool_0 = some_money_0.is_equal(price_0)
        bool_1 = some_price_0.is_equal(dict_0)
        price_1 = some_price_0.multiply(var_0)
    except BaseException:
        pass

def test_case_72():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        str_3 = 'c'
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.divide(str_3)
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        str_4 = '$2 _^\n(sA-h@[fSp"+h'
        int_1 = -681
        currency_0 = module_2.Currency(str_1, str_4, int_1, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_1 = module_0.Price()
        float_0 = price_1.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        str_5 = ''
        str_6 = 'Ethereum Classic'
        str_7 = 'cqmT#%$[-\x0cD'
        str_8 = 'B(cvl'
        dict_1 = {str_5: float_0, str_6: str_2, str_7: none_price_0, str_8: str_1}
        none_money_0 = module_0.NoneMoney(**dict_1)
    except BaseException:
        pass

def test_case_73():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n      7 Note that::\n\n        1. Uadfined priwf objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when cympaking two defined price objects w]th different7        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        bool_0 = price_0.__le__(price_0)
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0, **dict_1)
        bool_1 = price_0.gt(price_0)
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        int_0 = 1572
        int_1 = -3555
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        price_1 = some_price_1.convert(currency_0, date_0)
    except BaseException:
        pass

def test_case_74():
    try:
        set_0 = set()
        list_0 = [set_0, set_0, set_0]
        dict_0 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_0)
        bool_0 = some_price_0.as_boolean()
    except BaseException:
        pass

def test_case_75():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_0.__le__(price_0)
        bool_1 = some_money_0.is_equal(str_0)
        money_0 = none_money_1.round()
        bool_2 = some_money_0.gte(money_0)
        price_1 = some_price_0.subtract(price_0)
    except BaseException:
        pass

def test_case_76():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        price_1 = price_0.__truediv__(float_0)
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.is_equal(str_1)
        str_2 = 'P'
        bool_1 = some_price_0.is_equal(str_2)
        price_2 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_77():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbKmL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.lt(money_0)
        bool_1 = some_money_0.is_equal(str_2)
        str_3 = 'P'
        bool_2 = some_price_0.is_equal(str_3)
        tuple_0 = (dict_0,)
        price_1 = price_0.__floordiv__(tuple_0)
        price_2 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_78():
    try:
        var_0 = None
        money_0 = module_0.Money()
        money_1 = money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_79():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.lt(money_0)
        bool_1 = some_money_0.is_equal(str_2)
        str_3 = 'P'
        bool_2 = some_price_0.is_equal(str_3)
        price_0 = some_price_0.abs()
    except BaseException:
        pass

def test_case_80():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = '\x0c|.Mo?V-'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = some_money_0.lt(money_0)
        bool_1 = some_money_0.is_equal(str_2)
        str_3 = 'P'
        bool_2 = price_0.__eq__(some_money_0)
        bool_3 = some_price_0.is_equal(str_3)
        bool_4 = some_price_0.is_equal(bool_1)
        some_price_1 = module_0.SomePrice(*list_0)
        price_1 = module_0.Price(**dict_0)
    except BaseException:
        pass

def test_case_81():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        list_1 = [int_0, incompatible_currency_error_0, some_price_0, str_0]
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.convert(currency_0, list_1)
        money_1 = some_money_0.add(money_0)
        bool_0 = some_money_0.lt(money_1)
    except BaseException:
        pass

def test_case_82():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        bool_0 = price_0.is_equal(list_0)
    except BaseException:
        pass

def test_case_83():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        money_0 = none_price_0.times(int_0)
        bool_0 = None
        price_1 = some_price_0.scalar_subtract(bool_0)
    except BaseException:
        pass

def test_case_84():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        bool_0 = money_1.__gt__(money_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        bool_1 = some_money_0.is_equal(str_1)
        bool_2 = some_money_0.gte(money_0)
        bool_3 = some_money_0.gte(money_1)
    except BaseException:
        pass

def test_case_85():
    try:
        var_0 = None
        money_0 = module_0.Money()
        money_1 = money_0.__truediv__(var_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_86():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        int_0 = 375
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        currency_0 = module_2.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_0)
        decimal_1 = currency_0.quantize(decimal_0)
        int_1 = some_money_0.as_integer()
    except BaseException:
        pass

def test_case_87():
    try:
        str_0 = '_NIVoz$tp{dh?'
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        bool_0 = some_price_0.gte(price_0)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_0 = some_money_0.with_dov(date_0)
        price_1 = module_0.Price()
        float_0 = price_1.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        bool_1 = some_money_0.gt(money_0)
    except BaseException:
        pass

def test_case_88():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        none_price_0 = module_0.NonePrice()
        list_1 = [some_money_0, some_money_0, dict_0]
        some_money_1 = module_0.SomeMoney(*list_1)
        str_1 = 'ETB'
        int_0 = 329
        currency_type_0 = module_2.CurrencyType.CRYPTO
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        money_0 = some_money_1.with_ccy(currency_0)
        money_1 = some_money_0.add(money_0)
    except BaseException:
        pass

def test_case_89():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        money_1 = money_0.multiply(set_0)
        money_2 = money_1.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 364
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.with_qty(decimal_0)
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        bool_0 = some_price_0.gte(price_0)
        none_money_1 = module_0.NoneMoney()
        price_1 = price_0.__floordiv__(var_0)
        money_3 = module_0.Money(**dict_1)
        bool_1 = money_3.__ge__(money_1)
        money_4 = none_money_1.divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_5 = some_money_0.add(money_4)
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        var_1 = currency_0.__repr__()
        decimal_1 = currency_0.quantize(decimal_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_2 = module_0.Price()
        float_0 = price_2.__float__()
        bool_2 = some_price_0.is_equal(dict_1)
        bool_3 = some_money_0.gte(money_2)
        bool_4 = price_1.gt(price_0)
        price_3 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_90():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        money_1 = money_0.multiply(set_0)
        money_2 = money_1.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 364
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        none_money_1 = module_0.NoneMoney()
        money_3 = none_money_1.divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_4 = money_2.with_dov(date_0)
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        var_1 = currency_0.__repr__()
        decimal_1 = currency_0.quantize(decimal_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_1 = module_0.Price()
        float_0 = price_1.__float__()
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_1.is_equal(str_2)
        bool_1 = some_price_0.is_equal(price_1)
        bool_2 = some_money_1.gte(money_3)
        bool_3 = price_1.gt(price_1)
        bool_4 = price_1.as_boolean()
    except BaseException:
        pass

def test_case_91():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        price_0 = none_price_0.round()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_1.__le__(price_1)
        str_1 = None
        price_2 = some_price_0.add(price_0)
        currency_type_0 = None
        str_2 = '+A'
        int_0 = 3
        int_1 = 1500
        currency_0 = module_2.Currency(str_2, str_1, int_0, currency_type_0, decimal_0, int_1)
        price_3 = some_price_1.convert(currency_0)
    except BaseException:
        pass

def test_case_92():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        money_1 = money_0.multiply(set_0)
        money_2 = money_1.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.with_qty(decimal_0)
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        bool_0 = some_price_0.gte(price_0)
        none_money_1 = module_0.NoneMoney()
        money_3 = module_0.Money(**dict_1)
        money_4 = money_3.__mul__(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_5 = some_money_0.add(money_4)
    except BaseException:
        pass

def test_case_93():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        money_1 = money_0.multiply(set_0)
        money_2 = money_1.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        var_0 = None
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(var_0)
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        bool_0 = some_price_0.gte(price_0)
        none_money_1 = module_0.NoneMoney()
        money_3 = module_0.Money(**dict_1)
        money_4 = none_money_1.divide(var_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_5 = money_3.scalar_add(var_0)
    except BaseException:
        pass

def test_case_94():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0, **dict_1)
        money_0 = some_money_1.with_dov(date_0)
        price_0 = module_0.Price(**dict_1)
        bool_0 = money_0.__le__(money_0)
    except BaseException:
        pass

def test_case_95():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        money_1 = money_0.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = '*'
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = none_price_0.scalar_subtract(some_money_0)
        price_1 = some_price_0.with_qty(decimal_0)
        float_0 = price_1.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_0 = price_1.__le__(price_1)
        bool_1 = some_money_1.is_equal(str_1)
        bool_2 = some_price_1.is_equal(money_0)
        bool_3 = some_money_1.gte(money_1)
        bool_4 = some_money_1.gte(money_1)
        price_2 = price_1.round()
        bool_5 = price_1.gt(price_0)
        date_1 = module_4.date(**dict_0)
    except BaseException:
        pass

def test_case_96():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        money_0 = module_0.Money()
        set_0 = set()
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.positive()
        money_2 = money_1.multiply(set_0)
        money_3 = money_2.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 364
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        var_0 = currency_0.__repr__()
        decimal_1 = currency_0.quantize(decimal_0)
        bool_0 = money_3.is_equal(list_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        bool_1 = none_money_0.is_equal(currency_type_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_2 = some_money_0.is_equal(str_2)
        money_4 = money_0.subtract(money_0)
    except BaseException:
        pass

def test_case_97():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
        date_0 = None
        set_0 = {date_0, str_0}
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.negative()
        money_1 = money_0.multiply(set_0)
        money_2 = money_1.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        money_3 = money_0.floor_divide(money_1)
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        money_4 = some_money_0.add(money_0)
        money_5 = some_money_0.with_dov(date_0)
        decimal_1 = module_1.Decimal()
        price_0 = module_0.Price()
        bool_0 = money_4.__le__(money_0)
        float_0 = price_0.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        some_money_2 = module_0.SomeMoney(*list_0)
        price_1 = price_0.__neg__()
        price_2 = price_0.with_dov(date_0)
        price_3 = price_2.add(price_1)
    except BaseException:
        pass

def test_case_98():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        money_1 = money_0.multiply(set_0)
        money_2 = money_1.with_dov(date_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        str_2 = '*'
        int_0 = 364
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
        var_0 = currency_0.__repr__()
        decimal_1 = currency_0.quantize(decimal_0)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        price_0 = some_price_0.with_qty(decimal_0)
        float_0 = price_0.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_price_0.is_equal(dict_1)
        price_1 = some_price_1.with_ccy(currency_0)
        bool_1 = price_0.__ge__(price_1)
    except BaseException:
        pass

def test_case_99():
    try:
        money_0 = module_0.Money()
        set_0 = set()
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.multiply(set_0)
    except BaseException:
        pass

def test_case_100():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_1 = module_3.dict()
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.gt(money_0)
        some_price_0 = module_0.SomePrice(*list_0)
        decimal_1 = module_1.Decimal()
        money_1 = some_money_0.subtract(money_0)
        bool_1 = some_money_0.gte(money_0)
        some_price_1 = module_0.SomePrice(*list_0, **dict_1)
        decimal_2 = module_1.Decimal()
        money_2 = money_1.add(money_0)
        int_0 = 1572
        currency_type_0 = module_2.CurrencyType.CRYPTO
        str_1 = '6Nb:J\x0b!qn~ B_C'
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_1, int_0)
        money_3 = money_2.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_101():
    try:
        none_money_0 = module_0.NoneMoney()
        currency_type_0 = module_2.CurrencyType.MONEY
        money_0 = module_0.Money()
        list_0 = [none_money_0]
        money_1 = none_money_0.multiply(list_0)
        money_2 = money_0.scalar_subtract(currency_type_0)
    except BaseException:
        pass

def test_case_102():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        price_0 = None
        price_1 = module_0.Price()
        bool_0 = price_1.__lt__(price_0)
        str_1 = '*'
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_0 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_2 = some_price_0.with_qty(decimal_0)
        float_0 = price_2.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_1 = price_2.__le__(price_2)
        bool_2 = some_money_1.is_equal(str_1)
        decimal_1 = module_1.Decimal()
        price_3 = price_2.__sub__(price_2)
    except BaseException:
        pass

def test_case_103():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lte(money_0)
        dict_1 = module_3.dict()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_1 = some_money_1.gt(money_0)
        price_0 = some_price_0.with_qty(decimal_0)
        price_1 = price_0.positive()
        some_price_1 = module_0.SomePrice(*list_0)
        bool_2 = price_0.__le__(price_0)
        money_1 = some_money_1.subtract(money_0)
        bool_3 = some_money_1.gte(money_0)
        some_price_2 = module_0.SomePrice(*list_0, **dict_1)
        bool_4 = price_0.gt(price_0)
        decimal_1 = module_1.Decimal()
        bool_5 = price_1.__lt__(price_0)
        money_2 = money_1.add(money_0)
        price_2 = none_price_0.with_qty(decimal_0)
        bool_6 = price_1.__lt__(price_2)
        money_3 = money_0.add(money_1)
        price_3 = price_1.__add__(price_2)
        price_4 = some_price_0.subtract(price_3)
    except BaseException:
        pass

def test_case_104():
    try:
        list_0 = []
        none_money_0 = module_0.NoneMoney(*list_0)
        bool_0 = False
        str_0 = 'UYU'
        str_1 = None
        dict_0 = {str_0: bool_0, str_1: str_0}
        money_0 = module_0.Money()
        money_1 = money_0.divide(dict_0)
    except BaseException:
        pass

def test_case_105():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        bool_0 = money_0.__ge__(money_0)
        str_1 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
        money_1 = money_0.__add__(money_0)
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        float_0 = price_0.__float__()
        some_price_1 = module_0.SomePrice(*list_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_1 = price_0.__le__(price_0)
        str_2 = None
        int_0 = 3484
        currency_type_0 = module_2.CurrencyType.CRYPTO
        int_1 = -2903
        currency_0 = module_2.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_1)
        price_1 = price_0.with_ccy(currency_0)
        bool_2 = price_0.__le__(price_1)
    except BaseException:
        pass

def test_case_106():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        money_0 = module_0.Money(**dict_1)
        bool_0 = money_0.as_boolean()
    except BaseException:
        pass

def test_case_107():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        float_0 = -195.18
        price_0 = none_price_0.round()
        price_1 = price_0.scalar_add(float_0)
        some_price_0 = module_0.SomePrice(*list_0)
        bool_0 = some_price_0.lte(price_1)
        some_price_1 = module_0.SomePrice(*list_0, **dict_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_2 = some_price_1.with_qty(decimal_0)
        bool_1 = price_2.__le__(price_2)
        some_money_1 = module_0.SomeMoney(*list_0, **dict_1)
        bool_2 = price_2.__lt__(price_2)
        money_0 = some_money_1.with_dov(date_0)
        price_3 = module_0.Price(**dict_1)
        bool_3 = money_0.__le__(money_0)
    except BaseException:
        pass

def test_case_108():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_0.__le__(price_0)
        bool_1 = some_money_0.is_equal(set_0)
        bool_2 = price_0.__ge__(price_0)
        money_0 = none_money_0.round()
        money_1 = money_0.__neg__()
        bool_3 = some_money_0.gte(money_1)
        bool_4 = price_0.gt(price_0)
        some_price_2 = module_0.SomePrice(*list_0)
        bool_5 = price_0.gt(price_0)
        int_0 = -948
        currency_type_0 = module_2.CurrencyType.MONEY
        int_1 = 360
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        price_1 = price_0.with_ccy(currency_0)
        bool_6 = price_1.gt(price_0)
    except BaseException:
        pass

def test_case_109():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.__add__(money_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_110():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_0.__le__(price_0)
        str_1 = '}y6$MVh'
        int_0 = 1657
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        decimal_1 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        price_1 = some_price_0.with_ccy(currency_0)
        money_1 = none_money_0.round()
        money_2 = some_money_0.subtract(money_1)
        bool_1 = price_0.gt(price_0)
        some_price_2 = module_0.SomePrice(*list_0)
        bool_2 = price_0.gt(price_0)
        bool_3 = price_0.__lt__(price_0)
        price_2 = price_0.__add__(price_1)
    except BaseException:
        pass

def test_case_111():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        dict_1 = {}
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_0.gt(price_0)
        str_1 = 'Currency code must contain only alphabetic characters'
        int_0 = -1476
        currency_type_0 = module_2.CurrencyType.CRYPTO
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = price_0.with_ccy(currency_0)
        bool_1 = price_1.__lt__(price_0)
    except BaseException:
        pass

def test_case_112():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_1 = {}
        bool_0 = money_0.__bool__()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_1 = price_0.__le__(price_0)
        bool_2 = some_money_0.is_equal(set_0)
        str_1 = '}6$MVh'
        int_0 = 1657
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        decimal_1 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        price_1 = some_price_0.with_ccy(currency_0)
        money_1 = none_money_0.round()
        money_2 = some_money_0.subtract(money_1)
        bool_3 = price_0.gt(price_0)
        some_price_2 = module_0.SomePrice(*list_0)
        bool_4 = price_0.gt(price_0)
        bool_5 = price_0.__lt__(price_0)
        currency_type_1 = module_2.CurrencyType.ALTERNATIVE
        str_2 = '}7x?.Zmv\\CI,'
        int_1 = -1377
        currency_1 = module_2.Currency(str_1, str_2, int_1, currency_type_1, decimal_0, int_0)
        bool_6 = some_money_0.gte(money_0)
        price_2 = some_price_2.subtract(price_1)
    except BaseException:
        pass

def test_case_113():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = module_0.Money()
        dict_1 = {}
        bool_0 = money_0.__bool__()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        str_1 = 'J~6wKCc@I:U\x0cG'
        int_0 = 1657
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        decimal_1 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        price_1 = some_price_0.with_ccy(currency_0)
        money_1 = none_money_0.round()
        money_2 = some_money_0.subtract(money_1)
        some_price_2 = module_0.SomePrice(*list_0)
        bool_1 = price_0.gt(price_0)
        bool_2 = price_0.__lt__(price_0)
        some_price_3 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_114():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_1 = module_3.dict()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_0.__le__(price_0)
        bool_1 = some_money_0.is_equal(set_0)
        str_1 = '}y6$MVh'
        decimal_1 = module_1.Decimal()
        money_1 = some_money_0.subtract(money_0)
        bool_2 = some_money_0.gte(money_0)
        some_price_2 = module_0.SomePrice(*list_0, **dict_1)
        bool_3 = price_0.gt(price_0)
        decimal_2 = module_1.Decimal()
        bool_4 = price_0.__lt__(price_0)
        money_2 = money_1.add(money_0)
        money_3 = money_1.__floordiv__(str_1)
        bool_5 = price_0.gt(price_0)
        price_1 = some_price_0.add(price_0)
    except BaseException:
        pass

def test_case_115():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_1 = module_3.dict()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_price_1 = module_0.SomePrice(*list_0)
        bool_0 = price_0.__le__(price_0)
        bool_1 = some_money_0.is_equal(set_0)
        str_1 = '}y6$MVh'
        int_0 = 1693
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        decimal_1 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_1, int_0)
        money_1 = module_0.Money()
        bool_2 = some_money_0.gte(money_0)
        some_price_2 = module_0.SomePrice(*list_0, **dict_1)
        bool_3 = price_0.gt(price_0)
        decimal_2 = module_1.Decimal()
        price_1 = price_0.with_qty(decimal_2)
        bool_4 = price_1.__lt__(price_0)
        money_2 = money_1.add(money_0)
    except BaseException:
        pass

def test_case_116():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
        date_0 = None
        set_0 = {str_0}
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_1 = module_3.dict()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.gt(money_0)
        int_0 = -154
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_1 = some_money_0.with_ccy(currency_0)
        price_0 = some_price_0.with_qty(decimal_0)
        price_1 = price_0.positive()
        some_price_1 = module_0.SomePrice(*list_0)
        bool_1 = price_0.__le__(price_0)
        bool_2 = some_money_0.is_equal(set_0)
        str_1 = '}y6$MVh'
        int_1 = 1675
        currency_type_1 = module_2.CurrencyType.ALTERNATIVE
        decimal_1 = module_1.Decimal()
        currency_1 = module_2.Currency(str_0, str_1, int_1, currency_type_1, decimal_1, int_1)
        money_2 = some_money_0.subtract(money_0)
        bool_3 = some_money_0.gte(money_0)
        some_price_2 = module_0.SomePrice(*list_0, **dict_1)
        bool_4 = price_0.gt(price_0)
        decimal_2 = module_1.Decimal()
        price_2 = price_0.with_qty(decimal_2)
        bool_5 = price_2.__lt__(price_0)
        money_3 = money_2.subtract(money_1)
    except BaseException:
        pass

def test_case_117():
    try:
        money_0 = module_0.Money()
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.abs()
    except BaseException:
        pass

def test_case_118():
    try:
        none_money_0 = module_0.NoneMoney()
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = none_money_0.scalar_add(none_price_0)
        dict_0 = module_3.dict()
        none_money_1 = module_0.NoneMoney()
        decimal_1 = module_1.Decimal()
        decimal_2 = module_1.Decimal()
        list_0 = []
        price_0 = module_0.Price(*list_0)
        price_1 = price_0.scalar_subtract(none_price_0)
    except BaseException:
        pass

def test_case_119():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.round()
    except BaseException:
        pass

def test_case_120():
    try:
        str_0 = 'MG/w'
        date_0 = None
        none_money_0 = module_0.NoneMoney()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        money_0 = module_0.Money()
        dict_1 = module_3.dict()
        some_price_0 = module_0.SomePrice(*list_0, **dict_1)
        none_money_1 = module_0.NoneMoney()
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        some_money_1 = module_0.SomeMoney(*list_0)
        bool_0 = money_0.lt(money_0)
        bool_1 = some_money_1.lte(money_0)
    except BaseException:
        pass

def test_case_121():
    try:
        var_0 = None
        money_0 = module_0.Money()
        money_1 = money_0.__add__(money_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        money_2 = money_0.__floordiv__(var_0)
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_122():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.__sub__(money_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        some_price_0 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_123():
    try:
        str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
        date_0 = None
        money_0 = module_0.Money()
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.with_dov(date_0)
        list_0 = [str_0, money_0]
        some_money_0 = module_0.SomeMoney(*list_0)
    except BaseException:
        pass

def test_case_124():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.positive()
    except BaseException:
        pass

def test_case_125():
    try:
        date_0 = None
        money_0 = module_0.Money()
        bool_0 = money_0.is_equal(date_0)
    except BaseException:
        pass