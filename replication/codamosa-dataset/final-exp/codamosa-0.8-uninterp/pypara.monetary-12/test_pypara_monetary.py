# Automatically generated by Pynguin.
import pypara.monetary as module_0
import pypara.currencies as module_1
import decimal as module_2
import builtins as module_3

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    list_0 = []
    none_money_0 = module_0.NoneMoney(*list_0)
    money_0 = none_money_0.scalar_add(bool_0)
    str_0 = ':\x0cr\\fK'
    int_0 = -721
    currency_type_0 = module_1.CurrencyType.MONEY
    decimal_0 = module_2.Decimal()
    int_1 = 1
    currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
    str_1 = '2Q]=m7=#b=I['
    incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0, str_1)
    none_price_0 = module_0.NonePrice()
    money_1 = none_price_0.times(incompatible_currency_error_0)
    money_2 = money_1.add(money_0)

def test_case_2():
    int_0 = -6337
    none_price_0 = module_0.NonePrice()
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.abs()
    var_0 = money_0.__round__(int_0)
    date_0 = None
    none_money_1 = module_0.NoneMoney()
    money_1 = none_money_1.with_dov(date_0)

def test_case_3():
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.negative()
    var_0 = None
    money_1 = money_0.__mul__(var_0)
    money_2 = none_money_0.subtract(money_1)

def test_case_4():
    var_0 = None
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.scalar_add(var_0)

def test_case_5():
    decimal_0 = None
    bool_0 = True
    none_price_0 = module_0.NonePrice()
    price_0 = none_price_0.negative()
    price_1 = price_0.__neg__()
    money_0 = price_1.times(bool_0)
    money_1 = money_0.with_qty(decimal_0)

def test_case_6():
    int_0 = -6337
    none_price_0 = module_0.NonePrice()
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.negative()
    var_0 = money_0.__round__(int_0)
    list_0 = [var_0, none_price_0, var_0, int_0]
    price_0 = none_price_0.divide(list_0)
    bool_0 = none_price_0.as_boolean()
    money_1 = money_0.negative()
    money_2 = money_1.__pos__()
    bool_1 = price_0.__ge__(price_0)

def test_case_7():
    decimal_0 = module_2.Decimal()
    none_price_0 = module_0.NonePrice()
    price_0 = none_price_0.with_qty(decimal_0)
    price_1 = price_0.floor_divide(decimal_0)
    bool_0 = price_0.__ge__(price_0)

def test_case_8():
    var_0 = None
    none_price_0 = module_0.NonePrice()
    price_0 = none_price_0.multiply(var_0)
    bool_0 = none_price_0.lt(price_0)
    price_1 = price_0.negative()

def test_case_9():
    int_0 = -6337
    none_price_0 = module_0.NonePrice()
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.negative()
    var_0 = money_0.__round__(int_0)
    money_1 = money_0.negative()

def test_case_10():
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.round()
    none_money_1 = module_0.NoneMoney()
    money_1 = money_0.__neg__()
    bool_0 = none_money_1.lte(money_0)

def test_case_11():
    int_0 = -6337
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.negative()
    var_0 = money_0.__round__(int_0)
    money_1 = money_0.negative()
    money_2 = money_1.positive()

def test_case_12():
    none_money_0 = module_0.NoneMoney()
    none_price_0 = module_0.NonePrice()
    price_0 = none_price_0.abs()

def test_case_13():
    int_0 = -6337
    none_price_0 = module_0.NonePrice()
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.negative()
    var_0 = money_0.__round__(int_0)
    list_0 = [var_0, none_price_0, var_0, int_0]
    price_0 = none_price_0.divide(list_0)
    money_1 = money_0.negative()
    bool_0 = price_0.__ge__(price_0)

def test_case_14():
    bool_0 = True
    list_0 = []
    none_money_0 = module_0.NoneMoney(*list_0)
    money_0 = none_money_0.scalar_add(bool_0)
    str_0 = ':\x0cr\\fK'
    currency_type_0 = module_1.CurrencyType.ALTERNATIVE
    money_1 = none_money_0.scalar_subtract(currency_type_0)
    int_0 = -721
    currency_type_1 = module_1.CurrencyType.MONEY
    decimal_0 = module_2.Decimal()
    int_1 = 1
    currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_1, decimal_0, int_1)
    str_1 = '2Q]<=m7=#b=I['
    incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0, str_1)
    none_price_0 = module_0.NonePrice()
    money_2 = money_0.negative()
    money_3 = money_2.add(money_0)

def test_case_15():
    str_0 = 'Lg&FE6%9['
    currency_type_0 = module_1.CurrencyType.MONEY
    decimal_0 = module_2.Decimal()
    int_0 = 365
    currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
    decimal_1 = module_2.Decimal()
    int_1 = 1
    int_2 = -3640
    currency_1 = module_1.Currency(str_0, str_0, int_2, currency_type_0, decimal_0, int_1)
    str_1 = 'v$?jz+Ly!\rn\t/u{v,pp '
    str_2 = None
    int_3 = -341
    currency_2 = module_1.Currency(str_1, str_2, int_1, currency_type_0, decimal_1, int_3)
    incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_2, currency_0)
    none_price_0 = module_0.NonePrice()
    dict_0 = {}
    none_money_0 = module_0.NoneMoney(**dict_0)
    money_0 = none_money_0.round(int_0)
    money_1 = money_0.convert(currency_2)
    money_2 = money_1.__floordiv__(none_price_0)
    money_3 = money_2.negative()
    money_4 = money_1.add(money_1)

def test_case_16():
    str_0 = 'i<\r\x0b(X80l^MQ'
    int_0 = -575
    currency_type_0 = module_1.CurrencyType.CRYPTO
    decimal_0 = module_2.Decimal()
    currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
    none_price_0 = module_0.NonePrice()
    price_0 = none_price_0.positive()
    var_0 = price_0.__round__()
    list_0 = [var_0, var_0, var_0]
    some_money_0 = module_0.SomeMoney(*list_0)
    money_0 = some_money_0.negative()
    money_1 = money_0.__sub__(money_0)

def test_case_17():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    decimal_0 = module_2.Decimal()
    var_0 = None
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.divide(var_0)
    some_money_0 = module_0.SomeMoney(*list_0)
    money_1 = some_money_0.add(money_0)
    price_0 = module_0.Price()
    float_0 = price_0.__float__()
    some_price_0 = module_0.SomePrice(*list_0)
    some_money_1 = module_0.SomeMoney(*list_0)
    money_2 = money_1.subtract(money_0)
    bool_0 = none_money_0.lt(money_0)

def test_case_18():
    int_0 = -6337
    none_price_0 = module_0.NonePrice()
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.negative()
    var_0 = money_0.__round__(int_0)
    list_0 = [var_0, none_price_0, var_0, int_0]
    price_0 = none_price_0.divide(list_0)
    date_0 = None
    none_money_1 = module_0.NoneMoney()
    price_1 = none_price_0.with_dov(date_0)
    price_2 = price_1.__neg__()
    bool_0 = price_0.__ge__(price_2)

def test_case_19():
    int_0 = -6337
    none_price_0 = module_0.NonePrice()
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.negative()
    var_0 = money_0.__round__(int_0)
    list_0 = [int_0, none_price_0, var_0, int_0]
    price_0 = none_price_0.divide(list_0)
    var_1 = money_0.__round__()
    bool_0 = none_price_0.as_boolean()
    money_1 = money_0.negative()
    money_2 = money_1.__pos__()
    bool_1 = price_0.__ge__(price_0)

def test_case_20():
    str_0 = 'i<\r\x0b(X80l^MQ'
    str_1 = 'vO\n\x0bJF)20'
    int_0 = -575
    currency_type_0 = module_1.CurrencyType.CRYPTO
    decimal_0 = module_2.Decimal()
    int_1 = -1619
    currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
    none_price_0 = module_0.NonePrice()
    price_0 = none_price_0.positive()
    var_0 = price_0.__round__()
    list_0 = [var_0, var_0, var_0]
    decimal_1 = module_2.Decimal()
    some_price_0 = module_0.SomePrice(*list_0)
    price_1 = some_price_0.with_qty(decimal_1)
    price_2 = some_price_0.floor_divide(decimal_1)
    price_3 = some_price_0.add(price_1)

def test_case_21():
    str_0 = 'vO\n\x0bJF)20'
    int_0 = -575
    currency_type_0 = module_1.CurrencyType.CRYPTO
    decimal_0 = module_2.Decimal()
    currency_0 = module_1.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
    list_0 = [int_0, int_0, int_0]
    some_money_0 = module_0.SomeMoney(*list_0)
    money_0 = some_money_0.negative()
    money_1 = money_0.__add__(money_0)

def test_case_22():
    dict_0 = None
    price_0 = None
    str_0 = 'Ex2uisO8\t'
    list_0 = [price_0, price_0, price_0]
    some_money_0 = module_0.SomeMoney(*list_0)
    money_0 = some_money_0.divide(str_0)
    bool_0 = True
    tuple_0 = (price_0, price_0, money_0, bool_0)
    list_1 = [dict_0, dict_0, tuple_0]
    some_money_1 = module_0.SomeMoney(*list_1)
    money_1 = some_money_1.add(money_0)

def test_case_23():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    decimal_0 = module_2.Decimal()
    var_0 = None
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.divide(var_0)
    some_money_0 = module_0.SomeMoney(*list_0)
    money_1 = some_money_0.add(money_0)
    bool_0 = money_1.__gt__(money_0)
    price_0 = module_0.Price()
    float_0 = price_0.__float__()
    float_1 = price_0.__float__()
    some_price_0 = module_0.SomePrice(*list_0)
    bool_1 = some_money_0.is_equal(bool_0)
    bool_2 = some_price_0.is_equal(price_0)
    bool_3 = price_0.__ge__(price_0)
    bool_4 = price_0.gt(price_0)
    bool_5 = price_0.lt(price_0)

def test_case_24():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
    date_0 = None
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.positive()
    money_1 = money_0.with_dov(date_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    str_1 = '*'
    decimal_0 = module_2.Decimal()
    dict_1 = {}
    some_price_0 = module_0.SomePrice(*list_0, **dict_1)
    none_money_1 = module_0.NoneMoney()
    bool_0 = money_1.is_equal(list_0)
    price_0 = some_price_0.with_qty(decimal_0)
    some_price_1 = module_0.SomePrice(*list_0)
    some_money_0 = module_0.SomeMoney(*list_0)
    bool_1 = some_money_0.is_equal(str_1)
    bool_2 = some_money_0.gte(money_1)
    bool_3 = price_0.gt(price_0)

def test_case_25():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    int_0 = 375
    decimal_0 = module_2.Decimal()
    price_0 = module_0.Price()
    float_0 = price_0.__float__()
    some_price_0 = module_0.SomePrice(*list_0)
    some_money_0 = module_0.SomeMoney(*list_0)
    none_price_0 = module_0.NonePrice()
    money_0 = none_price_0.times(int_0)
    bool_0 = some_money_0.lt(money_0)
    str_1 = 'P'
    bool_1 = some_price_0.is_equal(str_1)

def test_case_26():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
    date_0 = None
    set_0 = set()
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.positive()
    money_1 = money_0.multiply(set_0)
    money_2 = money_1.with_dov(date_0)
    dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    str_1 = '*'
    currency_type_0 = module_1.CurrencyType.CRYPTO
    decimal_0 = module_2.Decimal()
    dict_1 = {}
    some_price_0 = module_0.SomePrice(*list_0, **dict_1)
    none_money_1 = module_0.NoneMoney()
    bool_0 = none_money_0.is_equal(currency_type_0)
    price_0 = some_price_0.with_qty(decimal_0)
    some_price_1 = module_0.SomePrice(*list_0)
    some_money_0 = module_0.SomeMoney(*list_0)
    bool_1 = some_money_0.is_equal(str_1)
    bool_2 = some_money_0.gte(money_2)
    bool_3 = price_0.gt(price_0)
    int_0 = price_0.__int__()

def test_case_27():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    str_1 = 'b]bbK\tL\x0b/\nZwM[3\\49'
    str_2 = '*'
    int_0 = 375
    currency_type_0 = module_1.CurrencyType.CRYPTO
    decimal_0 = module_2.Decimal()
    currency_0 = module_1.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
    incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
    price_0 = module_0.Price()
    some_price_0 = module_0.SomePrice(*list_0)
    some_money_0 = module_0.SomeMoney(*list_0)
    none_price_0 = module_0.NonePrice()
    money_0 = none_price_0.times(int_0)
    bool_0 = some_money_0.lt(money_0)
    bool_1 = some_money_0.is_equal(str_2)
    str_3 = 'P'
    bool_2 = some_price_0.is_equal(str_3)
    bool_3 = price_0.gt(price_0)

def test_case_28():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``other`` price.\n\n        Note that::\n\n        1. Undefined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects with different\n        currencies.\n        '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    str_1 = " tES'x.\tc"
    str_2 = '*'
    int_0 = 375
    currency_type_0 = module_1.CurrencyType.CRYPTO
    decimal_0 = module_2.Decimal()
    currency_0 = module_1.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_0)
    incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
    price_0 = module_0.Price()
    float_0 = price_0.__float__()
    some_price_0 = module_0.SomePrice(*list_0)
    some_money_0 = module_0.SomeMoney(*list_0)
    none_price_0 = module_0.NonePrice()
    money_0 = none_price_0.times(int_0)
    bool_0 = some_money_0.lt(money_0)
    bool_1 = some_money_0.is_equal(str_2)
    str_3 = 'P'
    bool_2 = some_price_0.is_equal(str_3)
    price_1 = price_0.__abs__()

def test_case_29():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objects w]th different\n        currencies.\n        '
    date_0 = None
    none_money_0 = module_0.NoneMoney()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    decimal_0 = module_2.Decimal()
    dict_1 = {}
    some_price_0 = module_0.SomePrice(*list_0, **dict_1)
    none_money_1 = module_0.NoneMoney()
    price_0 = some_price_0.with_qty(decimal_0)
    bool_0 = price_0.__le__(price_0)
    some_price_1 = module_0.SomePrice(*list_0)
    some_money_0 = module_0.SomeMoney(*list_0, **dict_1)
    bool_1 = price_0.gt(price_0)
    bool_2 = price_0.__lt__(price_0)

def test_case_30():
    str_0 = 'b]bbK\tL\x0b/\nZwM[3\\4_)9'
    str_1 = '*'
    int_0 = 375
    currency_type_0 = module_1.CurrencyType.CRYPTO
    decimal_0 = module_2.Decimal()
    currency_0 = module_1.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
    incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
    price_0 = module_0.Price()
    float_0 = price_0.__float__()
    none_price_0 = module_0.NonePrice()
    bool_0 = price_0.__bool__()
    money_0 = none_price_0.times(int_0)

def test_case_31():
    str_0 = 'VH0'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    str_1 = '*'
    var_0 = None
    none_money_0 = module_0.NoneMoney()
    money_0 = none_money_0.divide(var_0)
    some_money_0 = module_0.SomeMoney(*list_0)
    money_1 = some_money_0.add(money_0)
    price_0 = module_0.Price()
    float_0 = price_0.__float__()
    some_price_0 = module_0.SomePrice(*list_0)
    some_money_1 = module_0.SomeMoney(*list_0)
    bool_0 = some_money_1.is_equal(str_1)
    bool_1 = some_money_1.gte(money_0)
    money_2 = money_1.subtract(money_0)

def test_case_32():
    str_0 = '\n        Aplies "less than or equal to" comparison against ``othes`` price.\n\n        Note that::\n\n        1. Undfined price objects are always less than or equal to ``other``, and\n        2. :class:`IncompatibleCurrencyError` is raised when comparing two defined price objec9s w]th differvnt\n        currencies.\n        '
    date_0 = None
    none_money_0 = module_0.NoneMoney()
    dict_0 = {str_0: str_0, str_0: str_0, str_0: date_0, str_0: str_0}
    list_0 = [dict_0, dict_0, dict_0]
    decimal_0 = module_2.Decimal()
    none_price_0 = module_0.NonePrice()
    money_0 = none_money_0.scalar_add(none_price_0)
    dict_1 = module_3.dict()
    some_price_0 = module_0.SomePrice(*list_0, **dict_1)
    none_money_1 = module_0.NoneMoney()
    some_money_0 = module_0.SomeMoney(*list_0)
    bool_0 = some_money_0.gt(money_0)
    price_0 = some_price_0.with_qty(decimal_0)
    price_1 = none_price_0.positive()
    some_price_1 = module_0.SomePrice(*list_0)
    bool_1 = price_0.__le__(price_0)
    bool_2 = none_money_0.lte(money_0)
    money_1 = some_money_0.subtract(money_0)
    bool_3 = some_money_0.gte(money_0)
    some_price_2 = module_0.SomePrice(*list_0, **dict_1)
    bool_4 = price_0.gt(price_0)
    decimal_1 = module_2.Decimal()
    bool_5 = price_1.__lt__(price_0)
    money_2 = money_1.add(money_0)
    price_2 = none_price_0.subtract(price_0)
    bool_6 = price_2.__ge__(price_1)
    price_3 = price_2.add(price_1)
    price_4 = some_price_0.subtract(price_1)
    price_5 = price_2.__sub__(price_1)