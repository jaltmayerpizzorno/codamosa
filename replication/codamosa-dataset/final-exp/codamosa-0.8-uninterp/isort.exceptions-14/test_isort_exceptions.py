# Automatically generated by Pynguin.
import isort.exceptions as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'A\nUX:H$BUg_wd(\x0b{Rti\r'
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_0)
    str_1 = 'The max length of an import line (used for wrapping long imports).'
    invalid_settings_path_0 = module_0.InvalidSettingsPath(str_1)
    str_2 = '.#.@;/KxC!r'
    list_0 = [str_1]
    exception_0 = module_1.Exception(*list_0)
    literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_2, exception_0)
    str_3 = 'j:S\n1\x0b7.'
    invalid_settings_path_1 = module_0.InvalidSettingsPath(str_3)
    file_skip_setting_0 = module_0.FileSkipSetting(str_1)

def test_case_2():
    str_0 = 'E40\tZ1'
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_0)
    missing_section_0 = module_0.MissingSection(str_0, str_0)
    existing_syntax_errors_0 = module_0.ExistingSyntaxErrors(str_0)

def test_case_3():
    str_0 = 'D+\n4'
    introduced_syntax_errors_0 = module_0.IntroducedSyntaxErrors(str_0)

def test_case_4():
    str_0 = "aK?\x0cFy\x0b}X'ylxq-?o#+"
    file_skip_comment_0 = module_0.FileSkipComment(str_0)

def test_case_5():
    i_sort_error_0 = module_0.ISortError()
    str_0 = 'Pi[Ulz^3V]E ]CJ{n,u'
    str_1 = '%zdmK\nfAcN\x0b5AFe G'
    formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_1)
    file_skip_setting_0 = module_0.FileSkipSetting(str_0)

def test_case_6():
    str_0 = "aK?\x0cFy\x0b}X'ylxq-?o#+"
    file_skip_comment_0 = module_0.FileSkipComment(str_0)
    formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_0)
    list_0 = [file_skip_comment_0, str_0, formatting_plugin_does_not_exist_0, str_0]
    exception_0 = module_1.Exception(*list_0)
    literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_0, exception_0)

def test_case_7():
    str_0 = None
    file_skip_setting_0 = module_0.FileSkipSetting(str_0)
    assignments_format_mismatch_0 = module_0.AssignmentsFormatMismatch(str_0)
    str_1 = 'R '
    file_skip_comment_0 = module_0.FileSkipComment(str_1)
    str_2 = 'Xf)C9'
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_2)
    str_3 = '--src'
    str_4 = '<'
    unsupported_encoding_0 = module_0.UnsupportedEncoding(str_4)
    invalid_settings_path_0 = module_0.InvalidSettingsPath(str_4)
    str_5 = 'BZQvKd1a=^'
    missing_section_0 = module_0.MissingSection(str_3, str_5)
    formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_3)

def test_case_8():
    str_0 = '+9<F6\\/f_P?'
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_0)
    dict_0 = {}
    unsupported_settings_0 = module_0.UnsupportedSettings(dict_0)

def test_case_9():
    str_0 = 'force_to_top'
    missing_section_0 = module_0.MissingSection(str_0, str_0)

def test_case_10():
    str_0 = 'test'
    str_1 = 'value'
    str_2 = 'source'
    str_3 = {str_1: str_0, str_2: str_0}
    str_4 = {str_0: str_3}
    unsupported_settings_0 = module_0.UnsupportedSettings(str_4)