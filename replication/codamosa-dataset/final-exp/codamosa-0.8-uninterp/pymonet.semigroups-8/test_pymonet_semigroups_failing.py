# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        int_0 = -435
        semigroup_0 = module_0.Semigroup(int_0)
        str_0 = 'q|'
        var_0 = semigroup_0.fold(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xb9F'
        all_0 = module_0.All(bytes_0)
        str_0 = '\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        '
        all_1 = module_0.All(str_0)
        all_2 = all_1.concat(all_0)
        bool_0 = True
        last_0 = module_0.Last(bool_0)
        str_1 = all_1.__str__()
        first_0 = module_0.First(last_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 92
        set_0 = set()
        one_0 = module_0.One(set_0)
        var_0 = one_0.concat(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xb9F'
        all_0 = module_0.All(bytes_0)
        str_0 = None
        all_1 = module_0.All(str_0)
        all_2 = all_1.concat(all_0)
        bool_0 = False
        last_0 = module_0.Last(bool_0)
        str_1 = all_1.__str__()
        first_0 = module_0.First(last_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        first_0 = module_0.First(bool_0)
        bytes_0 = b']\xbf'
        last_0 = module_0.Last(bytes_0)
        bytes_1 = None
        var_0 = first_0.concat(bytes_1)
        all_0 = module_0.All(last_0)
        str_0 = all_0.__str__()
        str_1 = last_0.__str__()
        str_2 = last_0.__str__()
        float_0 = 1332.3752
        bool_1 = False
        max_0 = module_0.Max(bool_1)
        bool_2 = True
        max_1 = module_0.Max(bool_2)
        var_1 = max_1.concat(max_0)
        one_0 = module_0.One(float_0)
        last_1 = module_0.Last(one_0)
    except BaseException:
        pass