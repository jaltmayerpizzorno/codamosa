# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_0 = 'k[)9\r\'bBphvGk"'
        style_0 = module_0.Style()
        list_0 = [style_0, register_0, register_1]
        style_1 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_1)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        style_0 = module_0.Style()
        register_1 = module_0.Register()
        str_0 = register_0.__call__()
        register_2 = module_0.Register()
        list_0 = [str_0]
        str_1 = register_2.__call__(*list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        register_2 = module_0.Register()
        list_0 = []
        style_0 = module_0.Style(*list_0)
        style_1 = module_0.Style()
        list_1 = [style_0, style_0, style_1]
        register_2.set_eightbit_call(list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "\n        This function is to handle calls such as `fg(42)`, `bg(102, 49, 42)`, `fg('red')`.\n        "
        str_1 = '!`Xm\n%'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_0: str_0}
        register_0 = module_0.Register()
        register_0.set_rgb_call(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_0.mute()
        register_1 = module_0.Register()
        register_2 = register_1.copy()
        register_3 = register_2.copy()
        register_4 = module_0.Register()
        register_0.unmute()
        register_4.unmute()
        dict_0 = register_3.as_dict()
        str_0 = "a-*4=wcp~U'\\|z"
        register_1.mute()
        dict_1 = {str_0: str_0, str_0: str_0}
        style_0 = module_0.Style(**dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_3 = module_0.Register()
        str_0 = ')Z|X\\+z1;vBd pl=e|'
        var_0 = register_0.__setattr__(str_0, style_0)
        register_4 = register_3.copy()
        register_5 = register_4.copy()
        register_6 = register_5.copy()
        str_1 = register_4.__call__()
        dict_0 = register_0.as_dict()
        str_2 = '3BxN}]5h'
        var_1 = register_4.as_namedtuple()
        style_1 = None
        var_2 = register_5.as_namedtuple()
        var_3 = register_4.__setattr__(str_2, style_1)
        register_6.set_eightbit_call(register_1)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        dict_0 = {}
        style_0 = module_0.Style(**dict_0)
        register_1 = module_0.Register()
        str_0 = register_1.__call__()
        register_2 = module_0.Register()
        register_0.mute()
        list_0 = [str_0]
        str_1 = register_0.__call__(**dict_0)
        str_2 = register_2.__call__(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_0 = '\x0b3i?q`<'
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        register_0.unmute()
        register_1.unmute()
        register_2 = register_0.copy()
        float_0 = 2120.76184
        list_0 = [style_0, style_0, style_0]
        style_1 = style_0.__new__(float_0, *list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        register_1 = module_0.Register()
        var_1 = register_1.as_namedtuple()
        str_0 = '\nThese are the default registers that sty provides out of the box.\n'
        register_0.mute()
        bool_0 = None
        str_1 = '3Qi$>cz#f'
        style_0 = module_0.Style()
        var_2 = register_0.__setattr__(str_1, style_0)
        str_2 = "/.>'#.\x0b%OCn1\x0bIu\nH"
        register_0.set_renderfunc(bool_0, str_2)
        str_3 = register_1.__call__()
        register_2 = register_0.copy()
        str_4 = None
        str_5 = '[TFpMC{HvoQ~'
        set_0 = None
        register_1.set_renderfunc(str_5, set_0)
        list_0 = [str_0]
        type_0 = None
        register_2.set_eightbit_call(type_0)
        dict_0 = {}
        str_6 = register_2.__call__(**dict_0)
        style_1 = module_0.Style(*list_0, **dict_0)
        register_3 = module_0.Register()
        var_3 = register_3.__setattr__(str_4, style_1)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        register_1 = module_0.Register()
        int_0 = 1680
        list_0 = [int_0]
        list_1 = [var_0, int_0]
        style_0 = module_0.Style(*list_1)
        str_0 = register_0.__call__(*list_0)
        register_2 = register_1.copy()
        register_3 = register_2.copy()
        register_3.unmute()
        str_1 = '\nThese are the default registers that sty provides out of the box.\n'
        register_0.mute()
        style_1 = module_0.Style()
        style_2 = style_1.__new__(str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        register_1 = module_0.Register()
        str_0 = '\rg)}NN{"sPDBt]'
        dict_0 = {}
        style_0 = module_0.Style(**dict_0)
        var_1 = register_0.__setattr__(str_0, style_0)
        var_2 = register_1.as_namedtuple()
        register_0.mute()
        str_1 = register_1.__call__()
        register_2 = register_1.copy()
        register_1.unmute()
        int_0 = -74
        register_0.set_rgb_call(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        register_1 = module_0.Register()
        var_1 = register_1.as_namedtuple()
        register_0.mute()
        bool_0 = None
        str_0 = '3Qi$>cz#f'
        style_0 = module_0.Style()
        var_2 = register_0.__setattr__(str_0, style_0)
        str_1 = "/.>'#.\x0b%OCn1\x0bIu\nH"
        register_0.set_renderfunc(bool_0, str_1)
        str_2 = register_1.__call__()
        register_2 = register_0.copy()
        str_3 = '[TFpMC{HvoQ~'
        set_0 = None
        register_1.set_renderfunc(str_3, set_0)
        type_0 = None
        register_2.set_eightbit_call(type_0)
        dict_0 = {}
        str_4 = register_2.__call__(**dict_0)
        register_2.set_rgb_call(type_0)
        int_0 = None
        str_5 = '\n        Use this method to unmute a previously muted register object.\n        '
        style_1 = style_0.__new__(int_0, value=str_5)
    except BaseException:
        pass