# Automatically generated by Pynguin.
import ansible.playbook.task as module_0
import ansible.playbook.block as module_1

def test_case_0():
    try:
        str_0 = ''
        set_0 = {str_0}
        complex_0 = None
        bytes_0 = b'+#\x08a\x01\xc7n\xe4\x02\xc1Jb'
        task_0 = module_0.Task()
        var_0 = task_0.load(set_0, complex_0, complex_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.get_first_parent_include()
        var_1 = task_0.serialize()
        str_0 = 'T#4Y8yw[S2\t<{'
        dict_0 = {str_0: task_0, task_0: task_0, task_0: str_0}
        var_2 = task_0.all_parents_static()
        var_3 = task_0.deserialize(dict_0)
        bytes_0 = b'g\xfa\xd6\xe0pBX\xc2'
        var_4 = task_0.load(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        task_0 = module_0.Task()
        var_0 = task_0.preprocess_data(task_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 729.0
        task_0 = module_0.Task()
        var_0 = task_0.post_validate(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 59
        str_0 = 'b8NW937(\x0cSAOP?i'
        task_0 = module_0.Task(str_0)
        task_1 = module_0.Task(int_0, task_0)
        int_1 = -73
        int_2 = 2170
        task_2 = module_0.Task(int_1, int_2)
        var_0 = task_2.post_validate(task_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Failure setting up repoquery: %s'
        task_0 = module_0.Task(str_0)
        var_0 = task_0.get_name()
        var_1 = task_0.get_vars()
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 0.0001
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
        task_0 = module_0.Task(dict_0)
        var_0 = task_0.serialize()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'f.'
        set_0 = {str_0}
        str_1 = 'args'
        list_0 = [str_1]
        tuple_0 = ()
        int_0 = -392
        block_0 = module_1.Block(list_0, tuple_0, int_0)
        var_0 = block_0.get_include_params()
        task_0 = module_0.Task(block_0)
        var_1 = task_0.get_include_params()
        var_2 = task_0.set_loader(set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'LuAY:~tdv@+X;k}Lm@B'
        bytes_0 = b'\x82!\xfa\n\xd1e\x07\xda\xbe\xe8DJ2\xfb\xa6\x98\x08\x93l'
        task_0 = module_0.Task()
        str_1 = 'action'
        str_2 = 'args'
        str_3 = 'msgC'
        str_4 = {str_3: str_2}
        var_0 = task_0.__repr__()
        str_5 = {str_3: task_0, str_1: str_1, str_2: str_4, str_0: bytes_0}
        var_1 = task_0.preprocess_data(str_5)
        set_0 = set()
        tuple_0 = (set_0, set_0)
        tuple_1 = (tuple_0, tuple_0)
        task_1 = module_0.Task(tuple_1)
        var_2 = task_1.all_parents_static()
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        task_0 = module_0.Task(bool_0)
        var_0 = task_0.get_first_parent_include()
    except BaseException:
        pass

def test_case_10():
    try:
        task_0 = module_0.Task()
        bytes_0 = b'U'
        task_1 = module_0.Task(task_0, bytes_0)
        var_0 = task_0.__repr__()
        var_1 = task_1.get_include_params()
        var_2 = task_1.get_first_parent_include()
        var_3 = task_1.copy()
        var_4 = task_1.get_vars()
        var_5 = task_1.serialize()
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = {}
        task_0 = module_0.Task()
        var_1 = task_0.preprocess_data(var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'm2Ft9_FFZ'
        task_0 = module_0.Task(str_0)
        var_0 = task_0.get_include_params()
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'c|E?N(c'
        bool_0 = False
        dict_0 = {str_0: str_0, str_0: bool_0}
        list_0 = []
        task_0 = module_0.Task(list_0)
        var_0 = task_0.preprocess_data(dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'o\xd3\x99\xeb\x0bqK\xb94\x0fa\x98\x04'
        task_0 = module_0.Task(bytes_0)
        var_0 = task_0.__repr__()
        task_1 = module_0.Task()
        var_1 = task_1.__repr__()
        str_0 = 't$ype'
        str_1 = 'name'
        str_2 = 'module_name'
        var_2 = task_1.get_vars()
        str_3 = '_module_args'
        str_4 = 'action'
        var_3 = task_1.get_include_params()
        str_5 = 'module_defaults'
        str_6 = 'V\x0cx9tRi'
        var_4 = task_1.get_include_params()
        str_7 = 'R'
        dict_0 = {str_4: str_7, task_1: str_6, str_1: var_0}
        var_5 = task_0.deserialize(dict_0)
        var_6 = task_1.get_include_params()
        var_7 = task_0.get_name()
        str_8 = 'shel'
        str_9 = "{'warn': 'False'}"
        str_10 = '=d'
        var_8 = task_1.get_first_parent_include()
        var_9 = task_1.get_vars()
        str_11 = {str_0: str_5, str_1: str_6, str_2: str_8, str_3: str_9, str_8: str_10, str_4: str_10}
        var_10 = task_1.serialize()
        var_11 = task_1.get_include_params()
        var_12 = task_1.preprocess_data(str_11)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'o\xd3\x99\xeb\x0bqK\xb94\x0fa\x98\x04'
        task_0 = module_0.Task(bytes_0)
        var_0 = task_0.__repr__()
        task_1 = module_0.Task()
        var_1 = task_1.__repr__()
        str_0 = 'name'
        var_2 = task_1.get_vars()
        str_1 = 'action'
        var_3 = task_1.get_include_params()
        str_2 = 'V\x0cx9tRi'
        var_4 = task_1.get_include_params()
        str_3 = 'R'
        dict_0 = {str_1: str_3, task_1: str_2, str_0: var_0}
        var_5 = task_0.deserialize(dict_0)
        var_6 = task_1.get_include_params()
        var_7 = task_1.get_first_parent_include()
        var_8 = task_1.get_vars()
        var_9 = task_0.serialize()
    except BaseException:
        pass