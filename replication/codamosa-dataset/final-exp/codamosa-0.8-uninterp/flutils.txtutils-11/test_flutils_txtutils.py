# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'R\\1QT~WZw7?R T9WpI!'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_2():
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=bool_0)

def test_case_3():
    str_0 = 'y1ZW\nr6}'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper()
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_4():
    int_0 = 2
    str_0 = ':.@NC6-,yr:Tb1eYN95B'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0, placeholder=str_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_5():
    int_0 = 0
    str_0 = ':.@NC6-,yr:Tb1eYN95B'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0, placeholder=str_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_6():
    str_0 = 'lV\nVVAd#1v }jEEu{L8'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_7():
    str_0 = '=jW-Pae Nw[-'
    bool_0 = True
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_8():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_9():
    int_0 = 273
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, bool_0, bool_0, bool_0, int_0)
    bool_1 = False
    bool_2 = None
    int_1 = 1644
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_1, bool_1, bool_2, bool_0, int_1)
    bool_3 = True
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(bool_3)
    str_0 = "Increase the version number from a version number string.\n\n    *New in version 0.3*\n\n    Args:\n        version (str): The version number to be bumped.\n        position (int, optional): The position (starting with zero) of the\n            version number component to be increased.  Defaults to: ``2``\n        pre_release (str, Optional): A value of ``a`` or ``alpha`` will\n            create or increase an alpha version number.  A value of ``b`` or\n            ``beta`` will create or increase a beta version number.\n\n    Raises:\n        ValueError: if the given ``version`` is an invalid version number.\n        ValueError: if the given ``position`` does not exist.\n        ValueError: if the given ``prerelease`` is not in:\n            ``a, alpha, b, beta``\n        ValueError: if trying to 'major' part, of a version number, to\n            a pre-release version.\n\n    :rtype:\n        :obj:`str`\n\n        * The increased version number.\n\n    Examples:\n        >>> from flutils.packages import bump_version\n        >>> bump_version('1.2.2')\n        '1.2.3'\n        >>> bump_version('1.2.3', position=1)\n        '1.3'\n        >>> bump_version('1.3.4', position=0)\n        '2.0'\n        >>> bump_version('1.2.3', prerelease='a')\n        '1.2.4a0'\n        >>> bump_version('1.2.4a0', pre_release='a')\n        '1.2.4a1'\n        >>> bump_version('1.2.4a1', pre_release='b')\n        '1.2.4b0'\n        >>> bump_version('1.2.4a1')\n        '1.2.4'\n        >>> bump_version('1.2.4b0')\n        '1.2.4'\n        >>> bump_version('2.1.3', position=1, pre_release='a')\n        '2.2a0'\n        >>> bump_version('1.2b0', position=2)\n        '1.2.1'\n\n    "
    str_1 = ansi_text_wrapper_2.fill(str_0)

def test_case_10():
    str_0 = 'yt`s@i'
    int_0 = 50987760
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0)
    str_1 = 'g$T9kkXKsbo1g>lAdd,t'
    list_0 = ansi_text_wrapper_0.wrap(str_1)
    list_1 = ansi_text_wrapper_0.wrap(str_0)
    str_2 = ''
    str_3 = "\nZk'BHDb}E\x0b`:5"
    list_2 = ansi_text_wrapper_0.wrap(str_3)
    str_4 = ansi_text_wrapper_0.fill(str_0)
    str_5 = 's+N3;Jam_&b2D'
    bool_0 = False
    bool_1 = True
    bool_2 = None
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_1, bool_0, bool_2)
    str_6 = ansi_text_wrapper_0.fill(str_5)
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(str_2, bool_0, placeholder=str_6)

def test_case_11():
    int_0 = -2569
    str_0 = "Check if the given ``obj`` has **ANY** of the given ``*attrs``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if any of the given ``*attrs`` exist on the given\n          ``obj``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_any_attrs\n        >>> has_any_attrs(dict(),'get','keys','items','values','something')\n        True\n    "
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)

def test_case_12():
    int_0 = -2569
    str_0 = 'The name of the cherry-picked module\tattribute; can be an empty strx'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(max_lines=int_0, placeholder=str_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)
    str_2 = 'The path: %r must be an absoluteTpath.  A path is consideredabsolute if it has both a root and(if the flaour allows) a drive.'
    str_3 = 'J!cEQe=b\x0bIh7V;'
    list_0 = ansi_text_wrapper_0.wrap(str_3)
    list_1 = ansi_text_wrapper_0.wrap(str_2)

def test_case_13():
    str_0 = '\x1b[38;5;2E9mfdobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)