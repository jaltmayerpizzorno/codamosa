# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        int_0 = 2280
        bytes_0 = b'UjEi\x08[]'
        var_0 = module_0.get_uname(int_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -109.7989
        distribution_files_0 = module_0.DistributionFiles(float_0)
        var_0 = distribution_files_0.process_dist_files()
        bytes_0 = b'\xf6\x10\xda]\xab!n;,L\xc4\x80\x8c\xef+z\x8e\x05\xbe'
        distribution_0 = module_0.Distribution(bytes_0)
        var_1 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '~m\x0b*a=tSoX=#s'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_facts()
        str_1 = 'qXdMFk\x0b$ijT_BRUIPP'
        distribution_1 = module_0.Distribution(str_1)
        var_1 = distribution_1.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'l/v=D\t)R=`Jm;krJC'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b"'w\xf2"
        distribution_0 = module_0.Distribution(bytes_0)
        distribution_1 = module_0.Distribution(distribution_0)
        var_0 = distribution_1.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '~v*z7RJY2u++'
        bytes_0 = b'\x93\xd8;W\xba\x04\xb8\x0c\x17/h'
        str_1 = ' 5\x0bN%qrR~\x0cKeCOq'
        distribution_files_0 = module_0.DistributionFiles(str_1)
        str_2 = '9n'
        list_0 = [str_2]
        int_0 = 533
        distribution_files_1 = module_0.DistributionFiles(int_0)
        var_0 = distribution_files_1.parse_distribution_file_Alpine(bytes_0, distribution_files_0, list_0, distribution_files_0)
        set_0 = {str_0, str_0, str_0, str_0}
        distribution_files_2 = module_0.DistributionFiles(set_0)
        distribution_0 = None
        float_0 = 4399.0
        distribution_files_3 = module_0.DistributionFiles(float_0)
        var_1 = distribution_files_3.parse_distribution_file_Flatcar(str_0, distribution_files_2, distribution_files_2, distribution_0)
        tuple_0 = ()
        distribution_1 = module_0.Distribution(tuple_0)
        var_2 = distribution_1.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_6():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        float_0 = -1124.0
        distribution_files_0 = module_0.DistributionFiles(float_0)
        var_0 = distribution_files_0.process_dist_files()
        distribution_1 = module_0.Distribution(distribution_0)
        var_1 = distribution_1.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'mcZ'
        distribution_fact_collector_0 = module_0.DistributionFactCollector(bytes_0)
        var_0 = distribution_fact_collector_0.collect()
        str_0 = 'C'
        var_1 = distribution_fact_collector_0.collect(str_0)
        float_0 = -882.3
        bytes_1 = b'\xc4'
        int_0 = 131
        str_1 = 'y+7]'
        list_0 = [int_0, str_0]
        distribution_files_0 = module_0.DistributionFiles(list_0)
        dict_0 = {float_0: bytes_0, str_1: str_0, distribution_files_0: str_0, bytes_1: distribution_files_0}
        distribution_0 = module_0.Distribution(dict_0)
        var_2 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_8():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        var_0 = distribution_fact_collector_0.collect()
        bool_0 = None
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        var_1 = distribution_fact_collector_0.collect(bool_0, tuple_1)
        str_0 = 'K1w`N;P<dW1?QRil8'
        set_0 = {str_0}
        distribution_0 = module_0.Distribution(set_0)
        var_2 = distribution_0.get_distribution_facts()
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        distribution_0 = module_0.Distribution(bool_0)
        var_0 = distribution_0.get_distribution_FreeBSD()
        var_1 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'|\xe99\x81\xcf\xf7'
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
        var_0 = module_0.get_uname(set_0)
    except BaseException:
        pass