# Automatically generated by Pynguin.
import sanic.response as module_0
import pathlib as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = None
    h_t_t_p_response_0 = module_0.html(str_0)

def test_case_2():
    callable_0 = None
    int_0 = -774
    var_0 = module_0.stream(callable_0, int_0)

def test_case_3():
    str_0 = 'Build a URL based on a view name and the values provided.\n\n        In order to build a URL, all request parameters must be supplied as\n        keyword arguments, and each parameter must pass the test for the\n        specified parameter type. If these conditions are not met, a\n        `URLBuildError` will be thrown.\n\n        Keyword arguments that are not request parameters will be included in\n        the output URL\'s query string.\n\n        There are several _special_ keyword arguments that will alter how the\n        URL will be returned:\n\n        1. **_anchor**: ``str`` - Adds an ``#anchor`` to the end\n        2. **_scheme**: ``str`` - Should be either ``"http"`` or ``"https"``,\n           default is ``"http"``\n        3. **_external**: ``bool`` - Whether to return the path or a full URL\n           with scheme and host\n        4. **_host**: ``str`` - Used when one or more hosts are defined for a\n           route to tell Sanic which to use\n           (only applies with ``_external=True``)\n        5. **_server**: ``str`` - If not using ``_host``, this will be used\n           for defining the hostname of the URL\n           (only applies with ``_external=True``),\n           defaults to ``app.config.SERVER_NAME``\n\n        If you want the PORT to appear in your URL, you should set it in:\n\n        .. code-block::\n\n            app.config.SERVER_NAME = "myserver:7777"\n\n        `See user guide re: routing\n        <https://sanicframework.org/guide/basics/routing.html#generating-a-url>`__\n\n        :param view_name: string referencing the view name\n        :param kwargs: keys and values that are used to build request\n            parameters and query string arguments.\n\n        :return: the built URL\n\n        Raises:\n            URLBuildError\n        '
    h_t_t_p_response_0 = module_0.html(str_0)
    bytes_0 = b'\xc4o9\x9bB\xca\xc3E\xdekF\xd3l\xdea'
    h_t_t_p_response_1 = module_0.empty()
    h_t_t_p_response_2 = module_0.raw(bytes_0, str_0)

def test_case_4():
    str_0 = 'i&o'
    h_t_t_p_response_0 = module_0.text(str_0)
    str_1 = '\rn `Yu~\rr:z'
    str_2 = '\x0cejT"?'
    str_3 = '/+'
    str_4 = None
    dict_0 = {str_1: str_2, str_3: str_4}
    h_t_t_p_response_1 = module_0.file(str_0, dict_0)
    base_h_t_t_p_response_0 = module_0.BaseHTTPResponse()

def test_case_5():
    callable_0 = None
    str_0 = 'Tka\t'
    int_0 = -1273
    none_type_0 = None
    str_1 = 'jHnq\x0b#a:>cO4'
    bytes_0 = b'\t\xd0\x7f|\x9bS\x91\xce?\x84-'
    streaming_h_t_t_p_response_0 = module_0.StreamingHTTPResponse(callable_0, int_0, none_type_0, str_1, bytes_0)
    var_0 = module_0.stream(callable_0, str_0)

def test_case_6():
    str_0 = None
    int_0 = 503
    h_t_t_p_response_0 = module_0.html(str_0, int_0)
    dict_0 = None
    pure_path_0 = module_1.PurePath()
    h_t_t_p_response_0.send(pure_path_0)
    str_1 = 'b\n0Y"T,$=q0&5$x!'
    str_2 = 'h%$M)U'
    var_0 = module_0.stream(str_2, int_0, dict_0, str_1, str_2)