# Automatically generated by Pynguin.
import mimesis.providers.choice as module_0

def test_case_0():
    try:
        choice_0 = module_0.Choice()
        bytes_0 = b'\xdf\x7f\x9e\xe4\x9b\x85\x9a\xee\x9c\x14'
        bool_0 = True
        var_0 = choice_0.__call__(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        choice_0 = module_0.Choice()
        dict_0 = {}
        tuple_0 = (dict_0,)
        bool_0 = True
        var_0 = choice_0.__call__(tuple_0, bool_0)
        bool_1 = None
        choice_1 = module_0.Choice()
        var_1 = choice_1.__call__(tuple_0, bool_1)
    except BaseException:
        pass

def test_case_2():
    try:
        choice_0 = module_0.Choice()
        var_0 = choice_0.__call__(choice_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '0We25N3B[@9\\a_}};k'
        str_1 = 'ycH?O\rK\x0cxe\tFygqRQ0Vc'
        dict_0 = {str_0: str_0, str_1: str_1}
        int_0 = None
        tuple_0 = None
        list_0 = [tuple_0]
        choice_0 = module_0.Choice(*list_0)
        var_0 = choice_0.__call__(dict_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        choice_0 = module_0.Choice()
        list_0 = [choice_0, choice_0, choice_0, choice_0]
        bool_0 = True
        var_0 = choice_0.__call__(list_0, bool_0)
        choice_1 = module_0.Choice()
        choice_2 = module_0.Choice(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        choice_0 = module_0.Choice()
        choice_1 = module_0.Choice()
        list_0 = []
        int_0 = -861
        bool_0 = False
        var_0 = choice_0.__call__(list_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'"\xcf\xb1\x9ai\xee2\xa1L\xf5O\xdb\x0f\x11\xfai'
        int_0 = -3380
        choice_0 = module_0.Choice()
        var_0 = choice_0.__call__(bytes_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        choice_0 = module_0.Choice()
        dict_0 = {}
        tuple_0 = (dict_0,)
        bool_0 = True
        var_0 = choice_0.__call__(tuple_0, bool_0)
        bytes_0 = b'\x02\xcc.i@\x13\xf3>w\x8d$"b?t\xb4'
        int_0 = 1951
        bool_1 = True
        var_1 = choice_0.__call__(bytes_0, int_0, bool_1)
    except BaseException:
        pass