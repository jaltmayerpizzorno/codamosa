# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1
import builtins as module_2
import collections.abc as module_3

def test_case_0():
    try:
        subscript_0 = None
        str_0 = 'collections.defaultdict'
        dict_0 = {}
        resolver_0 = module_0.Resolver(str_0, dict_0, str_0)
        a_s_t_0 = resolver_0.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_1():
    try:
        name_0 = module_1.Name()
        str_0 = 'ARq}'
        str_1 = ' M>,0=^'
        str_2 = 'YO$'
        dict_0 = {str_1: str_2, str_1: str_2}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Astn?2@`6w#s%'
        assign_0 = module_1.Assign()
        int_0 = 128
        bool_0 = True
        parser_0 = module_0.Parser(int_0, bool_0)
        parser_0.globals(str_0, assign_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Ax?a ke}'
        list_0 = []
        class_def_0 = module_1.ClassDef(*list_0)
        bool_0 = False
        int_0 = 706
        bool_1 = True
        str_1 = '['
        str_2 = 'f7X\t#E3@u0nq-*^W'
        dict_0 = {str_1: str_2}
        parser_0 = module_0.Parser(bool_0, int_0, bool_1, dict_0, dict_0, dict_0)
        parser_0.api(str_0, class_def_0, prefix=str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'yC&&6[rsKfV%p'
        list_0 = [str_0, str_0, str_0, str_0]
        str_1 = 'kJ'
        str_2 = '#!'
        bytes_0 = b'S\xca\x92'
        dict_0 = {str_1: list_0, str_1: str_1, str_2: bytes_0}
        arguments_0 = module_1.arguments(*list_0, **dict_0)
        expr_0 = module_1.expr(**dict_0)
        bool_0 = True
        dict_1 = {}
        parser_0 = module_0.Parser(bool_0, dict_1)
        parser_0.func_api(str_0, str_1, arguments_0, expr_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '&8\tCK`8K+|Z'
        int_0 = 0
        bool_0 = False
        dict_0 = {}
        parser_0 = module_0.Parser(int_0, bool_0, dict_0)
        bool_1 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Q\nsFB@\r2'
        list_0 = [str_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        int_0 = -2472
        bool_0 = True
        str_1 = 'G'
        str_2 = 'O]%'
        str_3 = ':tJsx8TYl209t;\nEQ'
        str_4 = 'a6D+(@$\x0c@R^/0T~'
        dict_0 = {str_1: str_2, str_3: str_4, str_2: str_1}
        parser_0 = module_0.Parser(int_0, bool_0, dict_0, dict_0)
        parser_0.api(str_0, function_def_0)
    except BaseException:
        pass

def test_case_7():
    try:
        iterable_0 = None
        str_0 = module_0.table(items=iterable_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '<nF09'
        list_0 = [str_0, str_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        bool_0 = False
        str_1 = '[VZ2-HJyJ; '
        str_2 = 'V#Y\x0bP1k]+NpCYeg%ya'
        str_3 = None
        dict_0 = {str_1: str_2, str_1: str_2, str_2: str_1, str_3: str_2}
        parser_0 = module_0.Parser(bool_0, dict_0)
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '}:b9\x0bU\x0c>_;9ku\x0c'
        list_0 = [str_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        str_1 = '^Fvbp|'
        str_2 = '1a\r^V\re,L^D+_"pz%\t'
        set_0 = {str_1, str_1, str_2, str_1}
        str_3 = ':'
        str_4 = '@g'
        dict_0 = {str_0: str_3, str_4: str_2}
        import_0 = module_1.Import(*list_0, **dict_0)
        str_5 = None
        dict_1 = {str_5: str_0}
        dict_2 = {str_2: set_0}
        parser_0 = module_0.Parser(dict_1, dict_2)
        parser_0.imports(str_3, import_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'uP'
        list_0 = []
        list_1 = [str_0, list_0, str_0, list_0, list_0, list_0]
        dict_0 = {str_0: list_1, str_0: list_0, str_0: str_0, str_0: str_0}
        function_def_0 = module_1.FunctionDef(*list_1, **dict_0)
        list_2 = [function_def_0, list_1, dict_0]
        bool_0 = True
        dict_1 = module_2.dict(**dict_0)
        parser_0 = module_0.Parser(bool_0, dict_1)
        parser_0.class_api(str_0, str_0, list_0, list_2)
        str_1 = ']'
        import_0 = module_1.Import(**dict_0)
        parser_0.imports(str_1, import_0)
    except BaseException:
        pass

def test_case_11():
    try:
        expr_0 = module_1.expr()
        str_0 = module_0.const_type(expr_0)
        str_1 = module_0.const_type(expr_0)
        bool_0 = False
        str_2 = ']'
        str_3 = "mEAeXm*5a#a='g6"
        str_4 = module_0.esc_underscore(str_3)
        list_0 = [str_1]
        constant_0 = module_1.Constant(*list_0)
        str_5 = 'typing.Counter'
        str_6 = 'U8'
        dict_0 = {str_2: str_2, str_1: str_5, str_6: str_5}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        str_7 = "&(<\nCi+'i'I&1`60Em"
        parser_0 = module_0.Parser(bool_0, dict_0)
        bool_1 = parser_0.is_public(str_7)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Mm**ff`O\x0bc'
        int_0 = 422
        str_1 = module_0.parent(str_0, level=int_0)
        bool_0 = False
        int_1 = 1798
        dict_0 = {}
        import_from_0 = module_1.ImportFrom()
        parser_0 = module_0.Parser(int_1, dict_0)
        parser_0.imports(str_1, import_from_0)
        parser_1 = module_0.Parser(bool_0, int_1, dict_0, dict_0, dict_0)
        parser_1.parse(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        module_x_var_0 = None
        bool_0 = True
        str_0 = 'JbNu5F^:z,X-m'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        str_1 = None
        int_0 = 1982
        dict_1 = {str_1: int_0}
        parser_0 = module_0.Parser(int_0, bool_0, dict_1, dict_0, dict_0)
        parser_0.load_docstring(str_1, module_x_var_0)
    except BaseException:
        pass

def test_case_14():
    try:
        subscript_0 = None
        list_0 = [subscript_0]
        name_0 = module_1.Name(*list_0)
        str_0 = '}&m\tRmCwe>'
        str_1 = 't(=i(3z)hWQ'
        str_2 = 'K['
        dict_0 = {str_0: str_1, str_2: str_2, str_0: str_0, str_0: str_1}
        str_3 = '='
        resolver_0 = module_0.Resolver(str_0, dict_0, str_3)
        a_s_t_0 = resolver_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'P'
        bool_0 = True
        int_0 = -3
        dict_0 = {str_0: int_0}
        dict_1 = {}
        parser_0 = module_0.Parser(bool_0, int_0, dict_0, dict_1, dict_1)
        str_1 = '5Q?Tz.\\'
        list_0 = []
        int_1 = -5606
        str_2 = module_0.parent(str_0, level=int_1)
        bool_1 = module_0.is_public_family(str_1)
        ann_assign_0 = module_1.AnnAssign()
        iterator_0 = None
        list_1 = [str_1, ann_assign_0, parser_0, iterator_0]
        parser_0.class_api(str_1, str_1, list_0, list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        list_0 = [str_0]
        str_1 = 'dict'
        dict_0 = {str_1: str_0, str_1: list_0}
        constant_0 = module_1.Constant(*list_0, **dict_0)
        str_2 = 'xd n2HBw'
        str_3 = 'Ku>\n?b+"^y#\ty0\x0c'
        name_0 = module_1.Name(*list_0, **dict_0)
        dict_1 = {}
        resolver_0 = module_0.Resolver(str_2, dict_1)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        dict_2 = {str_3: str_3}
        expr_0 = module_1.expr(**dict_2)
        str_4 = module_0.const_type(expr_0)
        str_5 = '~,sm+y\x0c"ztAVC'
        str_6 = None
        str_7 = 'L'
        dict_3 = {str_2: str_1, str_5: str_5, str_0: str_6, str_6: str_7}
        str_8 = '\\_'
        resolver_1 = module_0.Resolver(str_2, dict_3, str_8)
        a_s_t_1 = resolver_1.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_17():
    try:
        attribute_0 = module_1.Attribute()
        str_0 = '-'
        str_1 = 'Mab\niqtB)&7i5Xw'
        str_2 = '|6'
        dict_0 = {}
        str_3 = module_0.code(str_1)
        parser_0 = module_0.Parser(dict_0)
        var_0 = parser_0.__post_init__()
        dict_1 = {str_0: str_1, str_2: str_2}
        str_4 = '_m'
        bool_0 = module_0.is_public_family(str_4)
        str_5 = '/{'
        str_6 = 'y!\tzX1oR,\x0bv7z'
        bool_1 = module_0.is_magic(str_6)
        resolver_0 = module_0.Resolver(str_0, dict_1, str_5)
        subscript_0 = module_1.Subscript()
        arguments_0 = module_1.arguments()
        sequence_0 = module_3.Sequence()
    except BaseException:
        pass

def test_case_18():
    try:
        subscript_0 = None
        list_0 = [subscript_0]
        name_0 = module_1.Name(*list_0)
        str_0 = '}&m\tRmCwe>'
        str_1 = 't(=i(3z)hWQ'
        int_0 = 397
        bool_0 = True
        parser_0 = module_0.Parser(int_0, bool_0)
        str_2 = parser_0.compile()
        str_3 = 'F&H+\n+Jj\x0b]R*y{nx(j@C'
        dict_0 = {str_0: str_1, str_3: str_3, str_0: str_0, str_3: str_1}
        str_4 = '='
        resolver_0 = module_0.Resolver(str_0, dict_0, str_4)
        a_s_t_0 = resolver_0.visit_Name(name_0)
        str_5 = '(z=v Lp+&r'
        int_1 = 0
        bool_1 = False
        dict_1 = {str_4: str_4, str_4: str_1, str_1: str_4}
        parser_1 = module_0.Parser(int_1, bool_1, dict_1, dict_1)
        str_6 = '\nvGnjD9'
        parser_0.parse(str_5, str_6)
        str_7 = "nhI&'caS;Z'IBvl,{"
        str_8 = '<[v'
        str_9 = 'Gp5\x0b1'
        str_10 = '=tD99-_'
        dict_2 = {str_4: parser_1, str_9: str_9, str_5: parser_1, str_10: str_5}
        arguments_0 = module_1.arguments(*list_0, **dict_2)
        none_type_0 = None
        bool_2 = True
        parser_1.func_api(str_7, str_8, arguments_0, none_type_0, has_self=bool_1, cls_method=bool_2)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = False
        str_0 = '--no-link'
        expr_0 = module_1.expr()
        bool_1 = False
        str_1 = ''
        dict_0 = {str_0: str_1}
        dict_1 = {str_0: str_0, str_1: str_1, str_1: str_0}
        parser_0 = module_0.Parser(bool_1, dict_0, dict_1, dict_0)
        list_0 = []
        list_1 = [bool_0]
        dict_2 = {}
        subscript_0 = module_1.Subscript(*list_1, **dict_2)
        assign_0 = module_1.Assign(*list_1)
        float_0 = 1360.1704
        stmt_0 = None
        list_2 = [subscript_0, assign_0, float_0, stmt_0]
        str_2 = '\\^'
        str_3 = '7p'
        parser_0.class_api(str_2, str_3, list_0, list_2)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '5L(r#Yxlnj&X'
        int_0 = -295
        dict_0 = {str_0: int_0}
        str_1 = '_$%\tR1h'
        str_2 = module_0.code(str_1)
        str_3 = 'Pg4'
        bool_0 = module_0.is_public_family(str_3)
        dict_1 = {}
        str_4 = '*-+4'
        list_0 = [dict_1]
        import_0 = module_1.Import(*list_0)
        bool_1 = True
        constant_0 = module_1.Constant(*list_0)
        str_5 = ']i'
        resolver_0 = module_0.Resolver(str_5, dict_1)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        parser_0 = module_0.Parser(bool_1, dict_0, dict_1, dict_1)
        parser_0.imports(str_4, import_0)
        str_6 = 'KQsmB]N.'
        list_1 = [str_6, str_3]
        list_2 = [int_0, list_1]
        str_7 = "z}5i^:\\P2DP!l'a"
        str_8 = 'r{.@N"nI\x0bv;be;F'
        dict_2 = {str_7: dict_1, str_8: int_0, str_7: str_8}
        iterable_0 = module_3.Iterable(*list_2, **dict_2)
    except BaseException:
        pass