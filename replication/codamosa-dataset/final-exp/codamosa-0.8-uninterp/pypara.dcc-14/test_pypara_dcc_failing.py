# Automatically generated by Pynguin.
import pypara.dcc as module_0

def test_case_0():
    try:
        date_0 = None
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        decimal_0 = module_0.dcfc_act_365_a(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_0 = 'NI\\d'
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        str_1 = 'yiV'
        date_0 = None
        optional_1 = d_c_c_registry_machinery_1.find(str_1)
        str_2 = 'uSMoM6~:V~6R,vL('
        optional_2 = d_c_c_registry_machinery_1.find(str_2)
        decimal_0 = module_0.dcfc_act_act_icma(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_3():
    try:
        date_0 = None
        decimal_0 = module_0.dcfc_30_e_360(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_4():
    try:
        date_0 = None
        decimal_0 = module_0.dcfc_30_360_us(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_5():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_0 = 'NI\\d'
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
        str_1 = '\nR?\x0b<'
        str_2 = 'yN)pRC +0YQ#$>"\'x)I^'
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        date_0 = None
        optional_1 = d_c_c_registry_machinery_1.find(str_1)
        str_3 = 'uSMoM6~:V~6R,vL('
        optional_2 = d_c_c_registry_machinery_1.find(str_3)
        set_0 = {str_0, str_0}
        callable_0 = module_0.dcc(str_1, set_0)
        callable_1 = module_0.dcc(str_1, str_2)
        date_1 = None
        decimal_0 = module_0.dcfc_nl_365(date_0, date_1, date_0)
    except BaseException:
        pass

def test_case_6():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_0 = 'NI\\d'
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
        str_1 = 'yiV'
        date_0 = None
        optional_1 = d_c_c_registry_machinery_0.find(str_1)
        decimal_0 = module_0.dcfc_act_360(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_7():
    try:
        date_0 = None
        decimal_0 = module_0.dcfc_act_act(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_8():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_0 = 'NI\\d'
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
        str_1 = '\nR?\x0b<'
        str_2 = 'yN)pRC +0YQ#$>"\'x)I^'
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        date_0 = None
        optional_1 = d_c_c_registry_machinery_1.find(str_1)
        optional_2 = d_c_c_registry_machinery_1.find(str_0)
        set_0 = {str_0, str_0}
        callable_0 = module_0.dcc(str_1, set_0)
        callable_1 = module_0.dcc(str_1, str_2)
        date_1 = None
        decimal_0 = module_0.dcfc_30_360_isda(date_0, date_1, date_0)
    except BaseException:
        pass

def test_case_9():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_0 = 'NI\\d'
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
        str_1 = '\nR?\x0b<'
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        date_0 = None
        optional_1 = d_c_c_registry_machinery_1.find(str_1)
        str_2 = 'uSMoM6~:V~6R,vL('
        optional_2 = d_c_c_registry_machinery_1.find(str_2)
        set_0 = {str_0, str_0}
        callable_0 = module_0.dcc(str_1, set_0)
        decimal_0 = module_0.dcfc_act_365_f(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_10():
    try:
        date_0 = None
        decimal_0 = module_0.dcfc_30_360_german(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_11():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_0 = 'NI\\d'
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
        str_1 = '\nR?\x0b<'
        str_2 = 'yN)pRC +0YQ#$>"\'x)I^'
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        str_3 = 'yiV'
        date_0 = None
        optional_1 = d_c_c_registry_machinery_1.find(str_3)
        str_4 = 'uSMoM6~:V~6R,vL('
        optional_2 = d_c_c_registry_machinery_1.find(str_4)
        set_0 = {str_0, str_0}
        callable_0 = module_0.dcc(str_1, set_0)
        callable_1 = module_0.dcc(str_1, str_2)
        decimal_0 = module_0.dcfc_30_e_plus_360(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_12():
    try:
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        str_0 = 'NI\\d'
        optional_0 = d_c_c_registry_machinery_0.find(str_0)
        d_c_c_registry_machinery_1 = module_0.DCCRegistryMachinery()
        str_1 = 'yiV'
        date_0 = None
        optional_1 = d_c_c_registry_machinery_1.find(str_1)
        decimal_0 = module_0.dcfc_act_365_l(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'b:w)'
        date_0 = None
        list_0 = [date_0, date_0, str_0, date_0]
        d_c_c_0 = module_0.DCC(*list_0)
        decimal_0 = d_c_c_0.calculate_daily_fraction(date_0, date_0, date_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '?!M/!\t'
        str_1 = 'InitialBalances'
        d_c_c_registry_machinery_0 = module_0.DCCRegistryMachinery()
        optional_0 = d_c_c_registry_machinery_0.find(str_1)
        bool_0 = True
        list_0 = [bool_0, str_0, str_1, str_1]
        d_c_c_0 = module_0.DCC(*list_0)
        d_c_c_registry_machinery_0.register(d_c_c_0)
    except BaseException:
        pass