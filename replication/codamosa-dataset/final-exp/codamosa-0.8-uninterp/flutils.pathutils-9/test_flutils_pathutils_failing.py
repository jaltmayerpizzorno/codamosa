# Automatically generated by Pynguin.
import flutils.pathutils as module_0
import pathlib as module_1
import os as module_2

def test_case_0():
    try:
        str_0 = '~/tmp/*'
        module_0.chown(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = ''
        struct_group_0 = module_0.get_os_group(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'|\x93\xe68\x07\x84'
        generator_0 = module_0.find_paths(bytes_0)
        int_0 = -1341
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        struct_group_0 = module_0.get_os_group()
        str_0 = '/nguin'
        module_0.path_absent(str_0)
        generator_0 = module_0.find_paths(str_0)
        path_0 = module_0.normalize_path(str_0)
        path_1 = module_0.normalize_path(str_0)
        int_0 = -104
        path_2 = module_0.directory_present(str_0, int_0)
        int_1 = -1145
        module_0.chmod(str_0, int_1)
        int_2 = 2438
        struct_group_1 = module_0.get_os_group(int_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '/pynguin/\nI'
        path_0 = module_0.normalize_path(str_0)
        str_1 = module_0.exists_as(str_0)
        module_0.chown(str_0)
        struct_group_0 = module_0.get_os_group()
        path_1 = module_0.normalize_path(str_0)
        bytes_0 = b'\xb4\x7f\xf2\x86\xe7'
        path_2 = module_0.normalize_path(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '~/tmp/flutils'
        str_1 = '~/tmp/flutils/test_path'
        posix_path_0 = module_1.PosixPath()
        path_0 = module_0.directory_present(str_1, posix_path_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '/nguhvin'
        module_0.path_absent(str_0)
        path_like_0 = module_2.PathLike()
    except BaseException:
        pass

def test_case_7():
    try:
        posix_path_0 = module_1.PosixPath()
        dict_0 = {posix_path_0: posix_path_0, posix_path_0: posix_path_0}
        module_0.path_absent(posix_path_0)
        bool_0 = True
        path_0 = module_0.directory_present(posix_path_0, dict_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 255
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '~/tmp/*'
        module_0.chmod(str_0)
        path_0 = module_0.directory_present(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        float_0 = -314.63235
        set_0 = {float_0, float_0, float_0, float_0}
        struct_group_0 = module_0.get_os_group(set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        struct_group_0 = module_0.get_os_group()
        int_0 = -741
        str_0 = '~'
        str_1 = '~/tmp/*'
        module_0.chmod(str_1, int_0)
        bool_0 = True
        module_0.chown(str_1, bool_0)
        path_0 = module_0.directory_present(str_1, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        struct_passwd_0 = module_0.get_os_user(list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        struct_group_0 = module_0.get_os_group()
        str_0 = '/nguin'
        module_0.path_absent(str_0)
        module_0.chown(str_0)
        path_0 = module_0.normalize_path(str_0)
        int_0 = -104
        path_1 = module_0.directory_present(str_0, int_0)
        int_1 = -1145
        int_2 = -741
        str_1 = '~/tmp/*'
        module_0.chmod(str_1, int_1)
        str_2 = '/'
        bool_0 = True
        module_0.chown(str_1, bool_0)
        path_2 = module_0.directory_present(str_2, int_2, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '/dev'
        str_1 = module_0.exists_as(str_0)
        str_2 = '/dev/pts'
        str_3 = module_0.exists_as(str_2)
        str_4 = '/dev/sda'
        path_0 = module_0.normalize_path(str_2)
        str_5 = module_0.exists_as(str_4)
        str_6 = '/dev/tty'
        str_7 = module_0.exists_as(str_6)
        module_0.chmod(str_5)
    except BaseException:
        pass