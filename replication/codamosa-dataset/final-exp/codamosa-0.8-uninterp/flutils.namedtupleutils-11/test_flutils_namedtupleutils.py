# Automatically generated by Pynguin.
import types as module_0
import flutils.namedtupleutils as module_1
import collections as module_2

def test_case_0():
    pass

def test_case_1():
    simple_namespace_0 = module_0.SimpleNamespace()
    var_0 = module_1.to_namedtuple(simple_namespace_0)

def test_case_2():
    bool_0 = True
    complex_0 = None
    list_0 = [bool_0, complex_0, complex_0, complex_0]
    var_0 = module_1.to_namedtuple(list_0)

def test_case_3():
    int_0 = 1
    int_1 = 2
    var_0 = dict(a=int_0, b=int_1)
    var_1 = module_1.to_namedtuple(var_0)

def test_case_4():
    tuple_0 = ()
    var_0 = module_1.to_namedtuple(tuple_0)

def test_case_5():
    str_0 = 'a'
    int_0 = {str_0: str_0}
    var_0 = module_1.to_namedtuple(int_0)
    var_1 = module_1.to_namedtuple(var_0)

def test_case_6():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0]
    var_0 = module_1.to_namedtuple(list_0)
    simple_namespace_0 = module_0.SimpleNamespace()
    list_1 = [simple_namespace_0, dict_0]
    tuple_0 = (dict_0, list_0, simple_namespace_0, list_1)
    var_1 = module_1.to_namedtuple(tuple_0)
    list_2 = [var_1, dict_0]
    tuple_1 = (list_2, list_1)
    var_2 = module_1.to_namedtuple(tuple_1)

def test_case_7():
    str_0 = 'a'
    int_0 = -19
    int_1 = {str_0: int_0, int_0: str_0, str_0: int_0}
    var_0 = module_1.to_namedtuple(int_1)
    var_1 = module_1.to_namedtuple(var_0)

def test_case_8():
    ordered_dict_0 = module_2.OrderedDict()
    list_0 = [ordered_dict_0, ordered_dict_0]
    list_1 = [list_0, ordered_dict_0, ordered_dict_0, list_0]
    var_0 = module_1.to_namedtuple(list_1)