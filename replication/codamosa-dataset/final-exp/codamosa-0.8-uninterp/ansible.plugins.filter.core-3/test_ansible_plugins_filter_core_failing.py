# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0
import ansible.template as module_1
import ansible.errors as module_2

def test_case_0():
    try:
        filter_module_0 = None
        set_0 = {filter_module_0, filter_module_0}
        list_0 = [filter_module_0, filter_module_0, set_0]
        var_0 = module_0.to_nice_yaml(filter_module_0, set_0, *list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        filter_module_0 = None
        var_0 = module_0.to_nice_json(filter_module_0)
        set_0 = None
        str_0 = '6-VRbkad5,oQlh{'
        dict_0 = {str_0: set_0, str_0: str_0, str_0: str_0}
        var_1 = module_0.subelements(dict_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'aM'
        var_0 = module_0.to_datetime(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        str_0 = '(\\S+):\\n.*FREE DISTRIBUTION(\\n(\\S+)\\s+(\\w+)\\s+(\\d+)\\s+(\\d+).*)+'
        dict_1 = {str_0: dict_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.strftime(dict_0, dict_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '/usr/local/lib'
        list_0 = [str_0, str_0]
        var_0 = module_0.strftime(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 4347.064765188741
        str_0 = ''
        var_0 = module_0.quote(str_0)
        list_0 = [float_0, float_0]
        str_1 = ''
        int_0 = 17
        var_1 = module_0.subelements(list_0, str_1, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'posix_basic'
        set_0 = {str_0, str_0, str_0}
        float_0 = -542.0
        var_0 = module_0.regex_findall(set_0, float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -747
        bytes_0 = b'\xde\xba \xae\x15\xcby\x03I\xe2\xd1&\xf1c'
        var_0 = module_0.regex_search(int_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        set_0 = {bool_0, bool_0, bool_0}
        float_0 = 1304.0
        var_0 = module_0.regex_escape(set_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = -1382.0
        set_0 = {float_0, float_0}
        list_0 = [set_0, float_0]
        filter_module_0 = module_0.FilterModule()
        tuple_0 = (filter_module_0, filter_module_0)
        var_0 = module_0.rand(float_0, set_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '@-Ivu#i._H5%Jvl'
        list_0 = None
        var_0 = module_0.rand(str_0, list_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_undefined_0 = module_1.AnsibleUndefined()
        tuple_0 = ()
        ansible_undefined_1 = module_1.AnsibleUndefined(ansible_undefined_0, tuple_0)
        str_0 = 'r4_/0>Ffw#x.\x0cX'
        var_0 = module_0.get_hash(ansible_undefined_1, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        filter_module_0 = module_0.FilterModule()
        float_0 = 5122.7488
        tuple_0 = (float_0, filter_module_0)
        var_0 = module_0.get_hash(tuple_0)
        var_1 = filter_module_0.filters()
        tuple_1 = (bool_0,)
        var_2 = module_0.fileglob(tuple_1)
    except BaseException:
        pass

def test_case_13():
    try:
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_0 = 'a4N\\,'
        dict_0 = {str_0: filter_module_0, str_0: filter_module_0}
        var_1 = module_0.get_encrypted_password(dict_0, filter_module_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '/usr/sbin/lsdev -Cc processor'
        set_0 = set()
        var_0 = module_0.to_uuid(str_0, set_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'python'
        list_0 = [str_0, str_0]
        var_0 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        var_0 = module_0.comment(str_0)
        str_1 = 'erlang'
        var_1 = module_0.comment(str_0, str_1)
        str_2 = 'c'
        list_0 = [str_2, str_1, var_0]
        dict_0 = {str_2: list_0}
        var_2 = module_0.combine(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        set_0 = None
        dict_0 = {set_0: set_0, set_0: set_0, set_0: set_0, set_0: set_0}
        bool_0 = False
        list_0 = [bool_0, set_0]
        var_0 = module_0.extract(dict_0, bool_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 0.001
        var_0 = module_0.to_json(float_0)
        dict_0 = {float_0: float_0, var_0: var_0}
        bytes_0 = None
        var_1 = module_0.extract(float_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'aqd% \x0cTsRB%\x0bhY%3[k'
        float_0 = 1943.06384
        tuple_0 = None
        var_0 = module_0.do_groupby(str_0, float_0, tuple_0)
    except BaseException:
        pass

def test_case_20():
    try:
        set_0 = None
        str_0 = '6-VRbkad5,oQlh{'
        dict_0 = {str_0: set_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.subelements(dict_0, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = 4306.9038
        list_0 = [float_0]
        str_0 = '"x\x0cdb\x0c'
        int_0 = 8
        var_0 = module_0.subelements(list_0, str_0, int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        ansible_undefined_0 = module_1.AnsibleUndefined()
        async_iterator_0 = ansible_undefined_0.__aiter__()
        float_0 = 1136.72
        ansible_filter_error_0 = module_2.AnsibleFilterError(async_iterator_0, float_0)
        var_0 = module_0.subelements(ansible_filter_error_0, async_iterator_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\xac\xcb,\x05\x9e\xfc\xc0r\x90\xb0'
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(bytes_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'Tum)l[sK}UPJ\\$'
        str_1 = "D'Ssa.WR?g7)!x?B"
        set_0 = {str_0, str_1, str_1, str_0}
        complex_0 = None
        list_0 = [set_0, complex_0, str_1]
        var_0 = module_0.path_join(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        bytes_0 = b'\x97o\xc8R1'
        str_0 = '%Tkz<HuV\x0b\x0bXd5P,6n2{'
        var_0 = module_0.from_yaml_all(str_0)
        float_0 = 1934.0
        var_1 = module_0.regex_escape(float_0, bytes_0)
    except BaseException:
        pass

def test_case_26():
    try:
        list_0 = []
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(list_0)
        bytes_0 = b'\x97o\xc8R1'
        str_0 = '%Tkz<HuV\x0b\x0bXd5P,6n2{'
        var_1 = module_0.from_yaml_all(str_0)
        float_0 = 1934.0
        var_2 = module_0.regex_escape(float_0, bytes_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '>u5NL?Z\tj?=g2c]\x0bf'
        var_0 = module_0.fileglob(str_0)
        str_1 = '#'
        set_0 = {str_1}
        var_1 = module_0.regex_search(set_0, str_1)
        str_2 = '/proc/[0-9]*/comm'
        var_2 = module_0.list_of_dict_key_value_elements_to_dict(str_2)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '"*\x0ceGh&GjSIHQ\rBw~h'
        set_0 = {str_0}
        filter_module_0 = module_0.FilterModule()
        float_0 = -5050.36745
        var_0 = module_0.to_uuid(float_0)
        list_0 = [filter_module_0, set_0, filter_module_0]
        tuple_0 = ()
        var_1 = module_0.get_encrypted_password(list_0, tuple_0)
    except BaseException:
        pass

def test_case_29():
    try:
        ansible_undefined_0 = None
        var_0 = module_0.from_yaml(ansible_undefined_0)
        var_1 = module_0.combine()
        set_0 = None
        str_0 = '+cD'
        dict_0 = {str_0: set_0, str_0: var_1}
        bytes_0 = b'\xd84e\xa7{<\x8e\t7T'
        var_2 = module_0.flatten(dict_0, bytes_0)
        var_3 = module_0.subelements(dict_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        bool_0 = True
        tuple_0 = (bool_0,)
        bytes_0 = b'e,\xd0\t\xbcT4\x13\xa2<\xb4\xb0\xa9U\xad\xfes'
        str_0 = '{0} lockfile is held by another process'
        var_0 = module_0.regex_findall(tuple_0, bytes_0, str_0, str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        bytes_0 = b'\x06\xfdQq\x1b~\x12\xf0\xa8\x9f\x89\xbfx=\xd9\r\x9f\xe1'
        str_0 = '%h%qID8z?,Ys/'
        str_1 = ''
        dict_0 = {str_0: str_0, str_1: bytes_0}
        var_0 = module_0.to_yaml(bytes_0, **dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '^gP\x0bOE6(Cx2/6y'
        dict_0 = {str_0: str_0, str_0: str_0}
        tuple_0 = ()
        list_0 = [str_0, dict_0]
        var_0 = module_0.to_yaml(list_0)
        var_1 = module_0.rand(str_0, str_0, tuple_0)
        var_2 = module_0.regex_escape(var_1, dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        list_0 = None
        var_0 = module_0.to_json(list_0)
        filter_module_0 = module_0.FilterModule()
        var_1 = filter_module_0.filters()
        var_2 = filter_module_0.filters()
        int_0 = None
        var_3 = module_0.to_bool(int_0)
        var_4 = filter_module_0.filters()
    except BaseException:
        pass

def test_case_34():
    try:
        float_0 = 4306.9038
        list_0 = [float_0]
        int_0 = 8
        dict_0 = {}
        var_0 = module_0.mandatory(dict_0)
        var_1 = module_0.subelements(list_0, int_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'C?1.'
        var_0 = module_0.from_yaml(str_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bool_0 = True
        var_1 = module_0.dict_to_list_of_dict_key_value_elements(dict_0, bool_0)
        filter_module_0 = module_0.FilterModule(**dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '#'
        var_0 = module_0.to_bool(str_0)
        var_1 = filter_module_0.filters()
        ansible_undefined_0 = module_1.AnsibleUndefined(str_0)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        var_2 = module_0.path_join(async_iterator_0)
    except BaseException:
        pass

def test_case_37():
    try:
        dict_0 = {}
        str_0 = 'cQ'
        var_0 = module_0.path_join(str_0)
        str_1 = '(\\S+):\\n.*FREE DISTRIBUTION(\\n(\\S+)\\s+(\\w+)\\s+(\\d+)\\s+(\\d+).*)+'
        dict_1 = {str_1: dict_0, str_1: str_1, str_1: str_1}
        var_1 = module_0.strftime(dict_0, dict_1)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = None
        str_1 = '>e-F\\L1Z<'
        str_2 = 'BS+c]_]TkbqJR'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_2: str_1}
        list_0 = [dict_0]
        dict_1 = {str_1: dict_0}
        int_0 = 23
        var_0 = module_0.extract(dict_0, list_0, dict_1, int_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = '\twL\x0b'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0]
        var_0 = module_0.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = 'b7'
        var_0 = module_0.mandatory(str_0)
        str_1 = None
        var_1 = module_0.quote(str_1)
        var_2 = module_0.flatten(var_0)
        str_2 = ' Reurn a list of groups the usr belongs to '
        var_3 = module_0.regex_escape(str_0)
        var_4 = module_0.get_hash(str_0)
        filter_module_0 = module_0.FilterModule()
        dict_0 = {str_2: var_1, str_0: filter_module_0}
        var_5 = module_0.strftime(dict_0, dict_0)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'g\twL\x0bi'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = []
        var_0 = module_0.subelements(dict_0, list_0)
    except BaseException:
        pass

def test_case_42():
    try:
        float_0 = 1000.0
        var_0 = module_0.randomize_list(float_0)
        str_0 = 'b7'
        var_1 = module_0.mandatory(str_0)
        filter_module_0 = None
        list_0 = [filter_module_0]
        var_2 = module_0.combine(*list_0)
        float_1 = -454.0
        set_0 = {float_1}
        var_3 = module_0.flatten(set_0)
        str_1 = ' Return a list of groups the user belongs to '
        var_4 = module_0.to_nice_json(filter_module_0)
        tuple_0 = ()
        str_2 = 'h=H<gU.>-U1?z$\x0b!$B'
        dict_0 = {str_2: float_0, str_0: var_1, str_1: tuple_0}
        var_5 = module_0.randomize_list(tuple_0, dict_0)
        str_3 = 'R>fv!/!;$P%D)'
        var_6 = module_0.regex_escape(str_3)
        var_7 = module_0.get_hash(str_1)
        filter_module_1 = module_0.FilterModule()
        dict_1 = None
        var_8 = module_0.comment(dict_1)
    except BaseException:
        pass

def test_case_43():
    try:
        bool_0 = True
        str_0 = 'ig'
        dict_0 = {str_0: str_0}
        list_0 = [str_0, bool_0, str_0]
        var_0 = module_0.regex_search(str_0, dict_0, *list_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = '\twL\x0b%i'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0, dict_0]
        list_1 = [list_0, str_0]
        var_0 = module_0.combine(*list_1)
    except BaseException:
        pass

def test_case_45():
    try:
        str_0 = "']OY"
        str_1 = '>iu>R,/3To\x0bu'
        dict_0 = {str_0: str_0, str_1: str_0}
        var_0 = module_0.b64encode(dict_0)
        list_0 = [dict_0]
        bool_0 = False
        var_1 = module_0.list_of_dict_key_value_elements_to_dict(list_0, bool_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = 'r\nH8}yu60=|k&f/AG\\"\n'
        str_1 = []
        var_0 = module_0.subelements(str_1, str_0)
        str_2 = 'a'
        str_3 = 'b'
        str_4 = [str_2]
        str_5 = {str_3: str_4}
        str_6 = {str_2: str_5}
        str_7 = 'a.b.c'
        var_1 = module_0.subelements(str_6, str_7)
    except BaseException:
        pass

def test_case_47():
    try:
        var_0 = module_0.combine()
        set_0 = None
        str_0 = '6-VRbkad5,oQlh{'
        dict_0 = {str_0: set_0, str_0: var_0, str_0: var_0}
        var_1 = module_0.subelements(dict_0, str_0)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = 'name'
        str_1 = 'groups'
        str_2 = 'authorized'
        str_3 = 'alice'
        str_4 = 'wheel'
        str_5 = [str_4]
        str_6 = '/tmp/alice/onekey.pub'
        str_7 = [str_6]
        str_8 = {str_0: str_3, str_1: str_5, str_2: str_7}
        str_9 = [str_8]
        var_0 = module_0.subelements(str_9, str_1)
        str_10 = 'a'
        str_11 = 'b'
        str_12 = [str_10]
        str_13 = {str_11: str_12}
        str_14 = {str_10: str_13}
        str_15 = 'a.b.c'
        var_1 = module_0.subelements(str_14, str_15)
    except BaseException:
        pass

def test_case_49():
    try:
        str_0 = 'groups'
        str_1 = []
        var_0 = module_0.subelements(str_1, str_0)
        bool_0 = False
        int_0 = -2637
        list_0 = []
        str_2 = '6\\('
        var_1 = module_0.rand(bool_0, int_0, list_0, str_2)
    except BaseException:
        pass

def test_case_50():
    try:
        str_0 = '-+=,Dc`&F\x0b:jKyON'
        bool_0 = None
        int_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, str_0: int_0, bool_0: str_0}
        int_1 = -3235
        dict_1 = {}
        filter_module_0 = module_0.FilterModule()
        tuple_0 = (dict_1, filter_module_0, dict_1, filter_module_0)
        list_0 = [dict_0, str_0, int_1]
        tuple_1 = (dict_1, tuple_0, dict_1, list_0)
        var_0 = module_0.ternary(int_0, dict_0, int_1, tuple_1)
        dict_2 = {}
        var_1 = module_0.comment(str_0, bool_0, **dict_2)
    except BaseException:
        pass

def test_case_51():
    try:
        set_0 = set()
        bool_0 = True
        str_0 = None
        dict_0 = {bool_0: set_0, str_0: str_0, str_0: str_0}
        list_0 = [str_0, bool_0, set_0, str_0]
        tuple_0 = None
        tuple_1 = (str_0, dict_0, list_0, tuple_0)
        bool_1 = False
        str_1 = 'Ny-np'
        dict_1 = {str_1: dict_0}
        var_0 = module_0.regex_search(bool_1, str_1, **dict_1)
        float_0 = -1946.85214
        var_1 = module_0.ternary(set_0, bool_0, tuple_1, float_0)
        dict_2 = None
        var_2 = module_0.from_yaml(dict_2)
        var_3 = module_0.randomize_list(tuple_1, bool_0)
        var_4 = module_0.randomize_list(dict_2)
        filter_module_0 = module_0.FilterModule()
        str_2 = ''
        var_5 = module_0.ternary(list_0, list_0, str_2, dict_0)
        var_6 = module_0.b64encode(bool_0, filter_module_0)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = '\twLq\x0b'
        set_0 = set()
        list_0 = [set_0, set_0, str_0]
        var_0 = module_0.regex_escape(list_0)
        str_1 = '$&zZ>c((#0D8ZUb*]Q!'
        list_1 = [str_1]
        dict_0 = {}
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        var_1 = module_0.rand(list_1, set_0, dict_0, tuple_1)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = '\\5W])'
        str_1 = 'CA<wY@2A_f{vD'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1}
        var_0 = module_0.quote(dict_0)
        var_1 = module_0.combine()
        str_2 = '\rn;cpCZQDE'
        bytes_0 = b'\xd84e\xa7{<\x8e\t7T'
        var_2 = module_0.flatten(dict_0, bytes_0)
        int_0 = 503
        str_3 = "uy{x?m'j2q6 _9\ng"
        var_3 = module_0.rand(str_2, int_0, str_3)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = 'foo'
        ansible_undefined_0 = module_1.AnsibleUndefined()
        var_0 = module_0.mandatory(ansible_undefined_0, str_0)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = '\\"W] ZX4Q^\x0b,KNl'
        var_0 = module_0.regex_escape(str_0)
        var_1 = module_0.combine()
        list_0 = [var_1]
        str_1 = 'm4'
        ansible_undefined_0 = module_1.AnsibleUndefined(str_1)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        ansible_undefined_1 = module_1.AnsibleUndefined(str_0, list_0, str_1, async_iterator_0)
        var_2 = module_0.mandatory(ansible_undefined_1)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = 'nWh\x0cYw=hXhR{R'
        bytes_0 = b'\xe0\xfe\xe7\x8e\x80\xe4_o\x1f\xe7\x04\x93\xa1\xe0\xac'
        var_0 = module_0.to_uuid(str_0, bytes_0)
    except BaseException:
        pass

def test_case_57():
    try:
        str_0 = ''
        var_0 = module_0.comment(str_0)
        str_1 = 'erlang'
        var_1 = module_0.comment(str_0, str_1)
        str_2 = 'c'
        var_2 = module_0.comment(str_0, str_2)
        str_3 = 'cblock'
        var_3 = module_0.comment(str_0, str_3)
        str_4 = 'pm2'
        var_4 = module_0.comment(str_0, str_4)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = '*b'
        var_0 = module_0.regex_escape(str_0)
        str_1 = '1+2'
        var_1 = module_0.regex_escape(str_1)
        var_2 = module_0.regex_escape(str_0)
        int_0 = 2
        str_2 = '/(?P<path>ansible_collections/[^/]+/[^/]+/plugins/modules/.*)\\.(py|ps1)$'
        ansible_undefined_0 = module_1.AnsibleUndefined(str_2)
        dict_0 = None
        bool_0 = True
        list_0 = [var_2, ansible_undefined_0, bool_0, int_0]
        str_3 = 'I 4XxJX?gW'
        str_4 = 'b}'
        dict_1 = {str_1: dict_0, str_4: str_0, str_1: var_1, str_3: var_0}
        var_3 = module_0.regex_search(dict_0, bool_0, *list_0, **dict_1)
    except BaseException:
        pass