# Automatically generated by Pynguin.
import ansible.playbook.included_file as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    float_0 = 7323.2994
    int_0 = 4039
    set_0 = set()
    included_file_0 = module_0.IncludedFile(bool_0, float_0, int_0, set_0)

def test_case_2():
    tuple_0 = ()
    bytes_0 = b'M\xab\x89[\xf1L\x1d\xd2c\x1e\xca\x7f\xd9H\xa8'
    list_0 = [bytes_0]
    bool_0 = False
    str_0 = '\n---\nmodule: pip\nshort_description: Manages Python library dependencies\ndescription:\n     - "Manage Python library dependencies. To use this module, one of the following keys is required: C(name)\n       or C(requirements)."\nversion_added: "0.7"\noptions:\n  name:\n    description:\n      - The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.\n      - This can be a list (since 2.2) and contain version specifiers (since 2.7).\n    type: list\n    elements: str\n  version:\n    description:\n      - The version number to install of the Python library specified in the I(name) parameter.\n    type: str\n  requirements:\n    description:\n      - The path to a pip requirements file, which should be local to the remote system.\n        File can be specified as a relative path if using the chdir option.\n    type: str\n  virtualenv:\n    description:\n      - An optional path to a I(virtualenv) directory to install into.\n        It cannot be specified together with the \'executable\' parameter\n        (added in 2.1).\n        If the virtualenv does not exist, it will be created before installing\n        packages. The optional virtualenv_site_packages, virtualenv_command,\n        and virtualenv_python options affect the creation of the virtualenv.\n    type: path\n  virtualenv_site_packages:\n    description:\n      - Whether the virtual environment will inherit packages from the\n        global site-packages directory.  Note that if this setting is\n        changed on an already existing virtual environment it will not\n        have any effect, the environment must be deleted and newly\n        created.\n    type: bool\n    default: "no"\n    version_added: "1.0"\n  virtualenv_command:\n    description:\n      - The command or a pathname to the command to create the virtual\n        environment with. For example C(pyvenv), C(virtualenv),\n        C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv).\n    type: path\n    default: virtualenv\n    version_added: "1.1"\n  virtualenv_python:\n    description:\n      - The Python executable used for creating the virtual environment.\n        For example C(python3.5), C(python2.7). When not specified, the\n        Python version used to run the ansible module is used. This parameter\n        should not be used when C(virtualenv_command) is using C(pyvenv) or\n        the C(-m venv) module.\n    type: str\n    version_added: "2.0"\n  state:\n    description:\n      - The state of module\n      - The \'forcereinstall\' option is only available in Ansible 2.1 and above.\n    type: str\n    choices: [ absent, forcereinstall, latest, present ]\n    default: present\n  extra_args:\n    description:\n      - Extra arguments passed to pip.\n    type: str\n    version_added: "1.0"\n  editable:\n    description:\n      - Pass the editable flag.\n    type: bool\n    default: \'no\'\n    version_added: "2.0"\n  chdir:\n    description:\n      - cd into this directory before running the command\n    type: path\n    version_added: "1.3"\n  executable:\n    description:\n      - The explicit executable or pathname for the pip executable,\n        if different from the Ansible Python interpreter. For\n        example C(pip3.3), if there are both Python 2.7 and 3.3 installations\n        in the system and you want to run pip for the Python 3.3 installation.\n      - Mutually exclusive with I(virtualenv) (added in 2.1).\n      - Does not affect the Ansible Python interpreter.\n      - The setuptools package must be installed for both the Ansible Python interpreter\n        and for the version of Python specified by this option.\n    type: path\n    version_added: "1.3"\n  umask:\n    description:\n      - The system umask to apply before installing the pip package. This is\n        useful, for example, when installing on systems that have a very\n        restrictive umask by default (e.g., "0077") and you want to pip install\n        packages which are to be used by all users. Note that this requires you\n        to specify desired umask mode as an octal string, (e.g., "0022").\n    type: str\n    version_added: "2.1"\nextends_documentation_fragment:\n  -  action_common_attributes\nattributes:\n    check_mode:\n        support: full\n    diff_mode:\n        support: none\n    platform:\n        platforms: posix\nnotes:\n   - The virtualenv (U(http://www.virtualenv.org/)) must be\n     installed on the remote host if the virtualenv parameter is specified and\n     the virtualenv needs to be created.\n   - Although it executes using the Ansible Python interpreter, the pip module shells out to\n     run the actual pip command, so it can use any pip version you specify with I(executable).\n     By default, it uses the pip version for the Ansible Python interpreter. For example, pip3 on python 3, and pip2 or pip on python 2.\n   - The interpreter used by Ansible\n     (see :ref:`ansible_python_interpreter<ansible_python_interpreter>`)\n     requires the setuptools package, regardless of the version of pip set with\n     the I(executable) option.\nrequirements:\n- pip\n- virtualenv\n- setuptools\nauthor:\n- Matt Wright (@mattupstate)\n'
    included_file_0 = module_0.IncludedFile(bytes_0, list_0, bool_0, str_0)
    var_0 = included_file_0.add_host(tuple_0)

def test_case_3():
    bool_0 = False
    bytes_0 = b'\x17N2=\xe6e\xdf\xd6\xadP\xb4cy\xa2\xe7\x02\xc5'
    str_0 = 'Pizza Box'
    included_file_0 = module_0.IncludedFile(bool_0, bytes_0, str_0, str_0)
    var_0 = included_file_0.__repr__()