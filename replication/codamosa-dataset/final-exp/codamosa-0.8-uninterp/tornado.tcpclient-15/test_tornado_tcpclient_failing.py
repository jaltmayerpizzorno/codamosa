# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.ioloop as module_1
import socket as module_2
import tornado.netutil as module_3
import builtins as module_4
import _asyncio as module_5
import concurrent.futures._base as module_6

def test_case_0():
    try:
        list_0 = []
        bytes_0 = b'\x9de\xc3\x12\xb1Qa\xcd4\xcf\xbb\x96[\xd4\xc0y\x80\x00\t'
        list_1 = [list_0, bytes_0]
        connector_0 = module_0._Connector(list_0, list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        t_c_p_client_0 = module_0.TCPClient()
        str_0 = 'I\x0bxK'
        int_0 = 3083
        dict_0 = {int_0: t_c_p_client_0, t_c_p_client_0: int_0, str_0: str_0}
        tuple_0 = (dict_0,)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        connector_0 = module_0._Connector(list_0, i_o_loop_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -34.753
        socket_0 = module_2.socket()
        str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
        int_0 = -1721
        resolver_0 = module_3.Resolver()
        awaitable_0 = resolver_0.resolve(str_0, int_0)
        tuple_0 = (socket_0, awaitable_0)
        list_0 = [tuple_0]
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        float_1 = i_o_loop_0.time()
        connector_0 = module_0._Connector(list_0, i_o_loop_1)
        connector_0.set_timeout(float_0)
        future_0 = connector_0.start()
    except BaseException:
        pass

def test_case_3():
    try:
        socket_0 = module_2.socket()
        str_0 = ''
        int_0 = -1721
        resolver_0 = module_3.Resolver()
        t_c_p_client_0 = module_0.TCPClient()
        awaitable_0 = resolver_0.resolve(str_0, int_0)
        t_c_p_client_0.close()
        tuple_0 = (socket_0, awaitable_0)
        list_0 = [tuple_0]
        i_o_loop_0 = module_1.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        connector_0 = module_0._Connector(list_0, i_o_loop_1)
        object_0 = module_4.object()
        address_family_0 = module_2.AddressFamily.AF_UNSPEC
        future_0 = module_5.Future()
        connector_0.clear_timeout()
        connector_0.on_connect_done(str_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -34.72629018527558
        socket_0 = module_2.socket()
        str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
        t_c_p_client_0 = module_0.TCPClient()
        int_0 = -1721
        resolver_0 = module_3.Resolver()
        t_c_p_client_1 = module_0.TCPClient()
        t_c_p_client_1.close()
        t_c_p_client_2 = module_0.TCPClient(resolver_0)
        awaitable_0 = resolver_0.resolve(str_0, int_0)
        t_c_p_client_2.close()
        tuple_0 = (socket_0, awaitable_0)
        list_0 = [tuple_0]
        i_o_loop_0 = module_1.IOLoop()
        future_0 = module_6.Future()
        connector_0 = module_0._Connector(list_0, future_0)
        connector_0.close_streams()
        i_o_loop_1 = i_o_loop_0.instance()
        connector_0.on_timeout()
        connector_0.set_connect_timeout(float_0)
        connector_0.on_connect_timeout()
        connector_1 = module_0._Connector(list_0, i_o_loop_1)
        connector_0.set_timeout(float_0)
        object_0 = module_4.object()
        connector_0.on_connect_timeout()
        address_family_0 = module_2.AddressFamily.AF_UNIX
        future_1 = module_5.Future()
        connector_0.clear_timeout()
        connector_0.on_connect_done(object_0, address_family_0, tuple_0, future_1)
        str_1 = 'Supported locales: %s'
        connector_1.clear_timeouts()
        connector_1.clear_timeout()
        connector_1.on_connect_done(str_1, address_family_0, tuple_0, future_1)
    except BaseException:
        pass