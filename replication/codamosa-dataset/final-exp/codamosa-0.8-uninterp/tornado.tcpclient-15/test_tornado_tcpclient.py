# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import socket as module_1
import tornado.netutil as module_2
import tornado.ioloop as module_3
import concurrent.futures._base as module_4
import _asyncio as module_5
import tornado.iostream as module_6
import builtins as module_7

def test_case_0():
    pass

def test_case_1():
    t_c_p_client_0 = module_0.TCPClient()

def test_case_2():
    float_0 = -34.753
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    t_c_p_client_0 = module_0.TCPClient(resolver_0)
    i_o_loop_1 = i_o_loop_0.instance()
    connector_0 = module_0._Connector(list_0, i_o_loop_1)
    connector_0.set_timeout(float_0)
    connector_0.clear_timeouts()
    tuple_1 = connector_0.split(list_0)
    connector_0.on_timeout()

def test_case_3():
    t_c_p_client_0 = module_0.TCPClient()
    t_c_p_client_0.close()

def test_case_4():
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    int_0 = -1732
    resolver_0 = module_2.Resolver()
    t_c_p_client_0 = module_0.TCPClient(resolver_0)
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    t_c_p_client_0.close()
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    connector_0 = module_0._Connector(list_0, future_0)
    connector_0.close_streams()
    connector_0.on_timeout()
    connector_1 = module_0._Connector(list_0, i_o_loop_0)
    connector_0.on_connect_timeout()
    future_1 = module_5.Future()
    connector_0.clear_timeout()
    connector_1.clear_timeout()

def test_case_5():
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    connector_0 = module_0._Connector(list_0, i_o_loop_1)
    connector_0.on_timeout()

def test_case_6():
    float_0 = -34.753
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    connector_0 = module_0._Connector(list_0, i_o_loop_0)
    connector_0.set_timeout(float_0)
    connector_0.clear_timeout()
    connector_0.clear_timeouts()
    connector_0.clear_timeouts()

def test_case_7():
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    connector_0 = module_0._Connector(list_0, i_o_loop_1)
    connector_0.clear_timeouts()

def test_case_8():
    bytes_0 = b''
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    list_1 = []
    i_o_stream_0 = module_6.IOStream(socket_0, *list_1)
    future_0 = i_o_stream_0.write(bytes_0)
    connector_0 = module_0._Connector(list_0, future_0)
    connector_0.on_connect_timeout()
    connector_0.clear_timeouts()

def test_case_9():
    float_0 = -34.753
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    t_c_p_client_0 = module_0.TCPClient(resolver_0)
    i_o_loop_1 = i_o_loop_0.instance()
    connector_0 = module_0._Connector(list_0, i_o_loop_1)
    connector_0.set_timeout(float_0)
    connector_0.clear_timeout()
    connector_0.clear_timeouts()
    tuple_1 = connector_0.split(list_0)
    connector_0.set_connect_timeout(float_0)
    connector_0.on_timeout()

def test_case_10():
    float_0 = -34.753
    t_c_p_client_0 = module_0.TCPClient()
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    t_c_p_client_1 = module_0.TCPClient()
    t_c_p_client_1.close()
    t_c_p_client_2 = module_0.TCPClient(resolver_0)
    i_o_loop_1 = i_o_loop_0.instance()
    connector_0 = module_0._Connector(list_0, i_o_loop_1)
    connector_0.set_timeout(float_0)
    connector_0.clear_timeout()
    connector_0.close_streams()
    connector_0.set_connect_timeout(float_0)
    connector_0.clear_timeouts()
    tuple_1 = connector_0.split(list_0)
    connector_0.on_timeout()

def test_case_11():
    float_0 = -34.72629018527558
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    t_c_p_client_0 = module_0.TCPClient()
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    t_c_p_client_1 = module_0.TCPClient()
    t_c_p_client_1.close()
    t_c_p_client_2 = module_0.TCPClient(resolver_0)
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    t_c_p_client_2.close()
    tuple_0 = (socket_0, awaitable_0)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    i_o_loop_1 = i_o_loop_0.instance()
    connector_0 = module_0._Connector(list_0, i_o_loop_1)
    connector_0.set_timeout(float_0)
    object_0 = module_7.object()
    connector_0.on_connect_timeout()
    address_family_0 = module_1.AddressFamily.AF_UNIX
    future_1 = module_5.Future()
    connector_0.clear_timeout()
    connector_0.on_connect_done(object_0, address_family_0, tuple_0, future_1)
    str_1 = 'Supported locales: %s'
    connector_0.clear_timeouts()
    connector_0.clear_timeout()
    connector_0.on_connect_done(str_1, address_family_0, tuple_0, future_1)

def test_case_12():
    float_0 = -34.72629018527558
    socket_0 = module_1.socket()
    str_0 = 'Logs the current request.\n\n        Sort of deprecated since this functionality was moved to the\n        Application, but left in place for the benefit of existing apps\n        that have overridden this method.\n        '
    t_c_p_client_0 = module_0.TCPClient()
    int_0 = -1721
    resolver_0 = module_2.Resolver()
    t_c_p_client_1 = module_0.TCPClient()
    t_c_p_client_1.close()
    t_c_p_client_2 = module_0.TCPClient(resolver_0)
    awaitable_0 = resolver_0.resolve(str_0, int_0)
    t_c_p_client_2.close()
    awaitable_1 = resolver_0.resolve(str_0, int_0)
    tuple_0 = (socket_0, awaitable_1)
    list_0 = [tuple_0]
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    connector_0 = module_0._Connector(list_0, future_0)
    connector_0.close_streams()
    i_o_loop_1 = i_o_loop_0.instance()
    connector_0.on_timeout()
    connector_0.set_connect_timeout(float_0)
    connector_1 = module_0._Connector(list_0, i_o_loop_1)
    object_0 = module_7.object()
    connector_0.on_connect_timeout()
    address_family_0 = module_1.AddressFamily.AF_UNIX
    future_1 = module_5.Future()
    connector_0.clear_timeout()
    connector_0.clear_timeout()
    connector_0.on_connect_done(object_0, address_family_0, tuple_0, future_1)
    connector_0.on_timeout()
    connector_1.clear_timeouts()
    connector_1.clear_timeout()