# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    try:
        register_0 = module_0.Register()
        str_0 = ';'
        list_0 = [str_0, str_0, register_0, str_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        register_1 = module_0.Register()
        str_0 = None
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_3 = register_2.copy()
        register_4 = register_3.copy()
        register_4.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        register_0.set_rgb_call(register_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        register_3 = register_2.copy()
        register_4 = module_0.Register()
        register_3.mute()
        str_0 = 'mxk~Fo05kB'
        str_1 = ''
        list_0 = [register_3, str_1, str_0, register_3]
        style_0 = module_0.Style(*list_0)
        var_0 = register_2.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        register_1 = module_0.Register()
        str_0 = None
        style_0 = module_0.Style()
        var_1 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        str_0 = '!fT?w6p+m82^'
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        register_0.mute()
        dict_0 = register_0.as_dict()
        style_1 = module_0.Style()
        dict_1 = {}
        str_1 = register_0.__call__(**dict_1)
        var_1 = register_0.as_namedtuple()
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        var_0 = register_0.as_namedtuple()
        type_0 = None
        register_1 = module_0.Register()
        register_1.unmute()
        list_0 = [type_0]
        register_0.set_renderfunc(type_0, list_0)
        int_0 = 3195
        list_1 = [int_0, int_0]
        str_0 = register_0.__call__(*list_1)
        style_0 = module_0.Style()
        str_1 = register_0.__call__()
        register_0.set_eightbit_call(type_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'C y6zyRZ@CU'
        style_0 = module_0.Style()
        str_1 = "P+z[A'2,tzPH\n>h"
        dict_0 = {str_1: str_0}
        list_0 = [str_0, dict_0, str_0, str_1]
        style_1 = module_0.Style(*list_0)
        str_2 = '&nIO[-hns9D^+L'
        list_1 = [str_2]
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_3 = register_1.__call__(*list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        dict_0 = register_0.as_dict()
        register_1 = module_0.Register()
        register_2 = register_1.copy()
        register_3 = register_2.copy()
        register_4 = register_3.copy()
        register_4.mute()
        register_5 = module_0.Register()
        register_4.unmute()
        str_0 = '\x1b[48;2;'
        register_5.mute()
        register_5.unmute()
        str_1 = 'KN'
        list_0 = [str_0, str_0, str_1]
        dict_1 = register_5.as_dict()
        str_2 = register_5.__call__(*list_0)
        str_3 = register_5.__call__()
        register_6 = register_1.copy()
        var_0 = register_4.as_namedtuple()
        register_7 = module_0.Register()
        register_8 = register_6.copy()
        register_9 = module_0.Register()
        type_0 = None
        callable_0 = None
        register_8.set_renderfunc(type_0, callable_0)
        register_10 = register_3.copy()
        register_11 = register_1.copy()
        list_1 = [register_11, register_4, register_7]
        style_0 = module_0.Style(*list_1)
        str_4 = None
        var_1 = register_0.__setattr__(str_4, style_0)
    except BaseException:
        pass

def test_case_10():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        dict_0 = register_0.as_dict()
        type_0 = None
        str_0 = '3rH<A\n.^Rf)bq'
        register_0.set_renderfunc(type_0, str_0)
        type_1 = None
        register_0.set_rgb_call(type_1)
        register_1.set_rgb_call(type_1)
    except BaseException:
        pass

def test_case_11():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        str_0 = '!fT?w6p+m82^'
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        register_0.mute()
        register_1 = module_0.Register()
        dict_0 = register_0.as_dict()
        style_1 = module_0.Style()
        register_0.unmute()
        dict_1 = {}
        str_1 = register_0.__call__(**dict_1)
        var_1 = register_0.as_namedtuple()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "\\,7?G'"
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        list_0 = [str_0]
        style_0 = module_0.Style(*list_0)
        register_1 = module_0.Register()
        register_2 = module_0.Register()
        str_1 = '=z'
        list_1 = [style_0, style_0, register_1, var_0]
        style_1 = module_0.Style(*list_1)
        var_1 = register_1.__setattr__(str_1, style_1)
    except BaseException:
        pass

def test_case_13():
    try:
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        list_0 = []
        style_0 = module_0.Style(*list_0)
        register_1 = module_0.Register()
        register_2 = module_0.Register()
        str_0 = '=z'
        list_1 = [style_0, style_0, register_1, var_0]
        style_1 = module_0.Style(*list_1)
        var_1 = register_1.__setattr__(str_0, style_1)
    except BaseException:
        pass