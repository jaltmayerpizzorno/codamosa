# Automatically generated by Pynguin.
import sanic.utils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = 'g&oVd~>/,\x0bc(lgB\x0byi'
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '/d:PR;Y0Nh|]C5XJ'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '}I,*'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        path_0 = None
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b"\x7f'\x14'\xf6<\\\xf7K#PB\xf7I\xfbw"
        list_0 = [bytes_0, bytes_0]
        var_0 = module_0.load_module_from_file_location(bytes_0, *list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        path_0 = module_1.Path()
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '${PWD}/test_module.py'
        str_1 = 'test_module.py'
        var_0 = module_0.load_module_from_file_location(str_0)
        var_1 = str(var_0)
        list_0 = [var_0, var_1, var_1, str_0]
        dict_0 = {}
        var_2 = module_0.load_module_from_file_location(str_1, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'B4KhH-,P\x0b($v93'
        var_0 = module_0.load_module_from_file_location(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'on'
        bool_0 = module_0.str_to_bool(str_0)
        str_1 = ';n{:ylh5N8l?|?$3/\\%!'
        var_0 = module_0.load_module_from_file_location(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        path_0 = module_1.Path()
        str_0 = 'off'
        bool_0 = module_0.str_to_bool(str_0)
        bool_1 = module_0.str_to_bool(str_0)
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'sanic.conf.${some_env_var}.settings'
        str_1 = '/sanic/conf/from-environment/'
        var_0 = module_0.load_module_from_file_location(str_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'test/this/path/does/not/exist/test_configs.py'
        var_0 = module_0.load_module_from_file_location(str_0, str_0)
    except BaseException:
        pass