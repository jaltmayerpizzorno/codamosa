# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        bool_0 = True
        set_0 = set()
        dict_0 = {}
        var_0 = module_0.sanitize_keys(set_0, dict_0)
        dict_1 = {bool_0: bool_0, bool_0: bool_0}
        tuple_0 = (bool_0, dict_1)
        var_1 = module_0.remove_values(bool_0, tuple_0)
        var_2 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'ENY=P+\t:DAk 5qZ\nTI'
        dict_0 = {str_0: str_0}
        var_0 = module_0.env_fallback(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 0.5
        set_0 = {float_0, float_0, float_0, float_0}
        str_0 = 't=Y:'
        var_0 = module_0.sanitize_keys(set_0, str_0)
        list_0 = [var_0, float_0]
        var_1 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x1e\xe4\x17\x10\xa8\x04\xc2L\xac\xb7\xcb\xa1(aU\x8f'
        str_0 = 'QGx0'
        var_0 = module_0.set_fallbacks(bytes_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        int_0 = None
        var_0 = module_0.sanitize_keys(dict_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -1338
        str_0 = ''
        str_1 = 'Subsystem'
        str_2 = ''
        dict_0 = {str_1: int_0, str_2: str_2, str_0: str_1}
        str_3 = 'QD~a*N}qWxq\x0b"Y'
        tuple_0 = (dict_0, str_3)
        list_0 = [str_0, tuple_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ' Test env_fallback function '
        dict_0 = {str_0: str_0, str_0: str_0}
        bytes_0 = b'\xce'
        var_0 = module_0.sanitize_keys(dict_0, bytes_0)
        bool_0 = False
        var_1 = module_0.set_fallbacks(bytes_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        bytes_0 = b'\x10\xe1}\xe9H\x04\xbc^'
        var_0 = module_0.set_fallbacks(dict_0, bytes_0)
        float_0 = 0.5
        tuple_0 = ()
        var_1 = module_0.sanitize_keys(float_0, tuple_0, tuple_0)
        var_2 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 0.0001
        str_0 = 'NqX`};zo\t-^'
        str_1 = '--force-handlers'
        var_0 = module_0.remove_values(str_1, str_1)
        bool_0 = False
        list_0 = [bool_0, str_0, float_0, bool_0]
        dict_0 = {}
        list_1 = [str_0, dict_0, str_1, float_0, list_0]
        bytes_0 = b'\x10\xe1}\xe9H\x04\xbc^'
        var_1 = module_0.set_fallbacks(dict_0, bytes_0)
        float_1 = 0.5
        tuple_0 = ()
        var_2 = module_0.sanitize_keys(float_1, tuple_0, tuple_0)
        dict_1 = {str_0: list_1}
        var_3 = module_0.remove_values(dict_1, list_0)
        dict_2 = {str_1: list_1}
        var_4 = module_0.env_fallback(**dict_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '2>AgNo*@s'
        float_0 = 0.0001
        str_1 = 'NqX`};zo\t-^'
        str_2 = '--force-handlers'
        str_3 = 'i+Yt=*x\x0c2F\r'
        set_0 = {str_0, str_0}
        var_0 = module_0.remove_values(set_0, str_2)
        var_1 = module_0.remove_values(str_2, str_3)
        bool_0 = False
        list_0 = [bool_0, str_1, float_0, bool_0]
        dict_0 = {}
        list_1 = [str_3, str_1]
        bytes_0 = None
        tuple_0 = (bytes_0,)
        var_2 = module_0.remove_values(dict_0, tuple_0)
        str_4 = None
        var_3 = module_0.set_fallbacks(dict_0, str_4)
        var_4 = module_0.remove_values(list_0, list_1)
        list_2 = [float_0, list_0]
        tuple_1 = ()
        var_5 = module_0.sanitize_keys(float_0, tuple_1, tuple_1)
        dict_1 = {str_1: list_2}
        var_6 = module_0.sanitize_keys(dict_1, dict_0, dict_1)
        var_7 = module_0.remove_values(list_2, dict_1)
        var_8 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'a'
        str_1 = 'fallback'
        str_2 = '{*5K$+9\ta<BI'
        str_3 = 'FOO_BAR2'
        str_4 = (str_1, str_2, str_3)
        str_5 = {str_1: str_4}
        str_6 = {str_0: str_5}
        var_0 = {}
        var_1 = module_0.set_fallbacks(str_6, var_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'ANSIBLE_FOO'
        str_1 = 'Expected exception to be raised'
        var_0 = Exception(str_1)
        set_0 = {var_0, var_0}
        set_1 = set()
        list_0 = [set_0, set_1, str_0, str_0]
        var_1 = module_0.remove_values(set_0, list_0)
    except BaseException:
        pass