# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    try:
        bool_0 = True
        bytes_0 = b'\xed'
        maybe_0 = module_0.Maybe(bytes_0, bool_0)
        str_0 = '\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    '
        bool_1 = False
        maybe_1 = module_0.Maybe(str_0, bool_1)
        callable_0 = None
        var_0 = maybe_0.filter(callable_0)
        var_1 = maybe_1.filter(callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 278
        object_0 = module_1.object()
        str_0 = '\n        Return resolved Task with stored value argument.\n\n        :param value: value to store in Task\n        :type value: A\n        :returns: resolved Task\n        :rtype: Task[Function(_, resolve) -> A]\n        '
        float_0 = -210.489963
        bool_0 = True
        maybe_0 = module_0.Maybe(float_0, bool_0)
        var_0 = maybe_0.map(str_0)
        list_0 = [int_0, int_0, object_0]
        bool_1 = True
        maybe_1 = module_0.Maybe(list_0, bool_1)
        var_1 = maybe_1.to_box()
        callable_0 = None
        list_1 = []
        tuple_0 = (list_1,)
        bool_2 = False
        maybe_2 = module_0.Maybe(tuple_0, bool_2)
        var_2 = maybe_2.to_lazy()
        var_3 = maybe_0.to_box()
        var_4 = maybe_2.map(callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -948.47315
        maybe_0 = None
        list_0 = []
        object_0 = module_1.object(*list_0)
        bool_0 = True
        maybe_1 = module_0.Maybe(object_0, bool_0)
        var_0 = maybe_1.ap(maybe_0)
        dict_0 = {}
        bool_1 = False
        maybe_2 = module_0.Maybe(dict_0, bool_1)
        var_1 = maybe_2.bind(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'd2'
        dict_0 = {}
        bool_0 = False
        maybe_0 = module_0.Maybe(dict_0, bool_0)
        var_0 = maybe_0.ap(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 250.68003
        bool_0 = False
        int_0 = 63
        bool_1 = False
        maybe_0 = module_0.Maybe(int_0, bool_1)
        var_0 = maybe_0.to_either()
        maybe_1 = module_0.Maybe(float_0, bool_0)
        var_1 = maybe_1.to_either()
        var_2 = None
        bool_2 = False
        maybe_2 = module_0.Maybe(var_2, bool_2)
        var_3 = maybe_2.to_validation()
        bool_3 = True
        maybe_3 = module_0.Maybe(var_2, bool_3)
        var_4 = maybe_3.to_either()
        bool_4 = False
        bool_5 = True
        var_5 = maybe_1.to_lazy()
        maybe_4 = module_0.Maybe(var_2, bool_5)
        var_6 = maybe_4.bind(bool_3)
        maybe_5 = module_0.Maybe(var_2, bool_4)
        var_7 = maybe_2.to_box()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        bytes_0 = b'\xed\x8d'
        maybe_0 = module_0.Maybe(bytes_0, bool_0)
        str_0 = '\n    Return first argument.\n\n    :param value:\n    :type value: Any\n    :returns:\n    :rtype: Any\n    '
        bool_1 = False
        maybe_1 = module_0.Maybe(str_0, bool_1)
        var_0 = maybe_0.to_lazy()
        callable_0 = None
        var_1 = maybe_0.filter(callable_0)
        var_2 = maybe_1.filter(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = -437.42773
        dict_0 = {float_0: float_0, float_0: float_0}
        bool_0 = False
        int_0 = False
        bool_1 = False
        maybe_0 = module_0.Maybe(int_0, bool_1)
        var_0 = maybe_0.to_try()
        str_0 = '?U\x0cedB6'
        var_1 = None
        str_1 = ':8 (lveF&y\x0cW`56yiRB'
        tuple_0 = (str_0, var_1, str_1)
        tuple_1 = (tuple_0,)
        var_2 = maybe_0.get_or_else(tuple_1)
        maybe_1 = module_0.Maybe(dict_0, bool_0)
        bytes_0 = b"{?\xa6\x15'gBT\xbf\xedI(\r"
        list_0 = [maybe_1, dict_0, bytes_0]
        list_1 = [list_0]
        var_3 = maybe_1.to_box()
        str_2 = 'Maybe[T]'
        list_2 = [bool_0, list_0]
        tuple_2 = (list_2,)
        tuple_3 = (list_1, list_0, str_2, tuple_2)
        bytes_1 = b'p\x008\x9e\xfac\xaa\\\xc9\xa6'
        var_4 = maybe_1.to_box()
        var_5 = maybe_1.to_lazy()
        bool_2 = True
        maybe_2 = module_0.Maybe(bytes_1, bool_2)
        var_6 = maybe_2.map(tuple_3)
        bytes_2 = b''
        var_7 = maybe_1.map(bytes_2)
    except BaseException:
        pass