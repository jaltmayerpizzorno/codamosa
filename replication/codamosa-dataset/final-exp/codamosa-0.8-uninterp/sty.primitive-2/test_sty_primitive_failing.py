# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    try:
        str_0 = 'Style'
        list_0 = [str_0, str_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        dict_0 = {}
        register_2 = module_0.Register()
        int_0 = 1268
        list_0 = [int_0]
        str_0 = register_0.__call__(*list_0)
        style_0 = module_0.Style()
        style_1 = style_0.__new__(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '*tLc;HB'
        list_0 = [str_0]
        dict_0 = {str_0: str_0, str_0: str_0}
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        str_1 = register_1.__call__(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '3K$t"'
        str_1 = '\x1b[38;5;'
        str_2 = "'DOW@nXZsh09;}&/Q\x0b/"
        str_3 = '\n        You can call a register-object directly. A call like this ``fg(144)``\n        is a Eightbit-call. With this method you can define the render-type for such calls.\n\n        :param rendertype: The new rendertype that is used for Eightbit-calls.\n        '
        dict_0 = {str_0: str_1, str_1: str_2, str_0: str_3}
        register_0 = module_0.Register()
        register_0.set_eightbit_call(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        bytes_0 = b''
        register_1.set_rgb_call(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        tuple_0 = None
        bool_0 = None
        register_0.set_renderfunc(tuple_0, bool_0)
        register_1 = register_0.copy()
        register_2 = register_1.copy()
        style_0 = None
        list_0 = [style_0, style_0]
        dict_0 = {}
        style_1 = module_0.Style(**dict_0)
        style_2 = style_1.__new__(style_0, *list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        callable_0 = None
        register_0 = module_0.Register()
        register_0.set_renderfunc(dict_0, callable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        dict_0 = register_1.as_dict()
        dict_1 = register_1.as_dict()
        register_2 = register_0.copy()
        dict_2 = register_1.as_dict()
        str_0 = register_0.__call__()
        register_3 = module_0.Register()
        register_3.mute()
        int_0 = 208
        register_1.mute()
        var_0 = register_0.as_namedtuple()
        register_1.set_renderfunc(int_0, register_1)
        style_0 = module_0.Style()
        var_1 = register_0.as_namedtuple()
        register_1.unmute()
        var_2 = register_0.as_namedtuple()
        register_4 = register_3.copy()
        register_5 = register_4.copy()
        str_1 = "NKA\\'`omBr01xt1"
        var_3 = register_2.__setattr__(str_1, style_0)
        str_2 = '_s~\\#:{%e-j6hmd]W'
        register_6 = register_4.copy()
        var_4 = register_6.__setattr__(str_2, style_0)
        str_3 = None
        var_5 = register_0.__setattr__(str_3, style_0)
    except BaseException:
        pass

def test_case_8():
    try:
        register_0 = module_0.Register()
        type_0 = None
        str_0 = 'F<\x0bdGV'
        register_0.set_renderfunc(type_0, str_0)
        int_0 = None
        list_0 = [str_0, int_0, int_0, str_0]
        dict_0 = register_0.as_dict()
        dict_1 = {str_0: type_0}
        str_1 = register_0.__call__(*list_0, **dict_1)
        float_0 = 90.0
        register_0.set_renderfunc(type_0, float_0)
        register_0.set_eightbit_call(type_0)
        dict_2 = register_0.as_dict()
        register_1 = module_0.Register()
        register_1.unmute()
        register_1.set_eightbit_call(type_0)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        type_0 = None
        dict_0 = register_0.as_dict()
        str_0 = 'F<\x0bdGV'
        int_0 = None
        register_0.unmute()
        list_0 = [str_0, int_0, int_0, str_0]
        dict_1 = register_0.as_dict()
        dict_2 = {str_0: type_0}
        str_1 = register_0.__call__(*list_0, **dict_2)
        float_0 = 90.0
        register_1 = register_0.copy()
        register_1.set_renderfunc(type_0, float_0)
        register_2 = register_1.copy()
        register_2.set_rgb_call(type_0)
        style_0 = module_0.Style()
        var_0 = register_0.__setattr__(str_0, style_0)
        var_1 = register_0.__setattr__(str_0, style_0)
        register_0.set_eightbit_call(type_0)
    except BaseException:
        pass

def test_case_10():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        type_0 = None
        float_0 = 3462.8
        callable_0 = None
        register_0.set_renderfunc(type_0, callable_0)
        register_0.mute()
        var_0 = register_0.as_namedtuple()
        register_0.set_eightbit_call(type_0)
        register_0.set_eightbit_call(type_0)
        register_0.mute()
        str_0 = '7))C}JW}lBGZ'
        list_0 = [str_0, str_0, str_0]
        str_1 = register_0.__call__(*list_0)
        str_2 = register_0.__call__()
        register_0.set_renderfunc(type_0, callable_0)
        str_3 = 'kP~J&E#'
        style_0 = module_0.Style()
        var_1 = register_0.__setattr__(str_3, style_0)
        list_1 = [type_0]
        style_1 = module_0.Style(*list_1)
        register_0.set_renderfunc(type_0, callable_0)
        str_4 = register_0.__call__()
        register_0.mute()
        int_0 = 47
        tuple_0 = (float_0, str_3, int_0)
        register_1 = register_0.copy()
        register_0.set_renderfunc(type_0, tuple_0)
        dict_0 = register_0.as_dict()
        dict_1 = register_0.as_dict()
        register_2 = register_0.copy()
        var_2 = register_2.as_namedtuple()
    except BaseException:
        pass

def test_case_11():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        callable_0 = None
        dict_0 = register_1.as_dict()
        dict_1 = register_1.as_dict()
        register_1.set_renderfunc(register_1, callable_0)
        register_2 = register_0.copy()
        dict_2 = register_1.as_dict()
        str_0 = register_0.__call__()
        register_0.mute()
        str_1 = 'k3'
        int_0 = 3
        list_0 = [str_0, str_1, int_0]
        str_2 = register_2.__call__(*list_0)
        int_1 = 208
        register_1.mute()
        var_0 = register_0.as_namedtuple()
        register_1.set_renderfunc(int_1, register_1)
        style_0 = module_0.Style()
        var_1 = register_0.as_namedtuple()
        register_1.unmute()
        bool_0 = True
        list_1 = [bool_0, bool_0]
        var_2 = register_0.as_namedtuple()
        style_1 = module_0.Style(*list_1)
        register_3 = register_1.copy()
        register_4 = register_3.copy()
        register_4.set_renderfunc(bool_0, callable_0)
        str_3 = "NKA\\'`omBr01xt1"
        var_3 = register_2.__setattr__(str_3, style_1)
    except BaseException:
        pass

def test_case_12():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        callable_0 = None
        dict_0 = register_1.as_dict()
        dict_1 = register_1.as_dict()
        register_1.set_renderfunc(register_1, callable_0)
        register_2 = register_0.copy()
        dict_2 = register_1.as_dict()
        str_0 = register_0.__call__()
        register_3 = module_0.Register()
        register_3.mute()
        int_0 = 208
        register_1.mute()
        var_0 = register_0.as_namedtuple()
        register_1.set_renderfunc(int_0, register_1)
        style_0 = module_0.Style()
        var_1 = register_0.as_namedtuple()
        register_1.unmute()
        bool_0 = True
        list_0 = [style_0, bool_0, bool_0]
        var_2 = register_0.as_namedtuple()
        style_1 = module_0.Style(*list_0)
        register_4 = register_3.copy()
        register_5 = register_4.copy()
        register_5.set_renderfunc(bool_0, callable_0)
        str_1 = "NKA\\'`omBr01xt1"
        var_3 = register_2.__setattr__(str_1, style_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'tle'
        render_type_0 = module_1.RenderType()
        list_0 = [render_type_0, str_0, render_type_0]
        style_0 = module_0.Style(*list_0)
        register_0 = module_0.Register()
        str_1 = 'Va'
        var_0 = register_0.__setattr__(str_1, style_0)
    except BaseException:
        pass