# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '^'
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    str_0 = '\n    Example docstring.\n\n    The first paragraph is a short summary and is not indented.\n\n    The second paragraph starts with a blank line, and belongs to the\n    long description.  The long description starts immediately after the\n    second paragraph and extends up to the first blank line that precedes\n    the next paragraph (or the end of the docstring).\n    The second paragraph is indented to match the first line of the first\n    paragraph, and any subsequent paragraphs are similarly indented.  The\n    short summary ends at the first blank line.\n\n    Parameters\n    ----------\n    arg1 : int\n        Description of `arg1` (with type).\n\n    Returns\n    -------\n    int\n        Description of return value.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_4():
    str_0 = '\n.. deprecated:: 0.5\n   The interface is deprecated.'
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_5():
    str_0 = '\n        This function does something.\n        It does it by calling the function named `func`.\n\n        Parameters\n        ----------\n        arg_name\n            A parameter with a type.\n            And a second line.\n        arg2 : type, optional\n            A parameter with a type.\n            And a second line.\n\n        Returns\n        -------\n        return_name : type\n            A return value.\n            And a second line.\n\n        Raises\n        ------\n        ValueError\n           If things go wrong.\n        '
    numpydoc_parser_0 = module_0.NumpydocParser()
    section_0 = module_0.Section(str_0, str_0)
    var_0 = numpydoc_parser_0.add_section(section_0)
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_6():
    str_0 = ''
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = '\n    This is the short description.\n    This is the long description.\n\n    Parameters\n    ----------\n    a : type\n        description of a\n    b : type\n        description of b\n\n    Raises\n    ------\n    ValueError\n        description of a ValueError exception\n\n    Returns\n    ------\n    str\n        description of the return value\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '2fIC[~*mY\n\x0c'
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_9():
    str_0 = '\n    This is the short description.\n    This is the long description.\n\n    Parameters\n    ----------\n    a : type\n        description of a\n    b : type\n        description of b\n\n    Raises\n    ------\n    ValueError\n        description of a ValueError exception\n\n    Returns\n    -------\n    str\n        description of the return value\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_10():
    str_0 = '\n        This function does something.\n        It does it by calling the function named `func`.\n\n        Parameters\n        ----------\n        arg_name\n            A parameter with a type.\n            And a second line.\n        arg2 : type, optional\n            A parameter with a type.\n            And a second line.\n\n        Returns\n        -------\n        return_name : type\n            A return value.\n            And a second line.\n\n        Raises\n        ------\n        ValueError\n            If things go wrong.\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = '\n    Example docstring.\n\n    The first paragraph is a short summary and is not indented.\n\n    The second paragraph starts with a blank line, and belongs to the\n    long description.  The long description starts immediately after the\n    second paragraph and extends up to the first blank line that precedes\n    the next paragraph (or the end of the docstring).\n    The second paragraph is indented to match the first line of the first\n    paragraph, and any subsequent paragraphs are similarly indented.  The\n    short summary ends at the first blank line.\n\n    Parameters\n    ----------\n    arg1 : int\n        Description of `arg1` (with type).\n\n    Returns\n    ------\n    int\n        Description of return value.\n    '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_12():
    str_0 = '\n    Silly example docstring.\n\n    Very silly indeed. It even spans multiple lines.\n\n    Parameters\n    ----------\n    a : type\n        Paramness.\n\n    b : type, optional\n        More paramness, default is 42.\n\n    Returns\n    -------\n    int\n        Something silly, very silly indeed.\n    '
    docstring_0 = module_0.parse(str_0)