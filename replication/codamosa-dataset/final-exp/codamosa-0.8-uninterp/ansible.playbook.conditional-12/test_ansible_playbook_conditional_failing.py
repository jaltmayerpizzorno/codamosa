# Automatically generated by Pynguin.
import ansible.playbook.conditional as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        conditional_0 = module_0.Conditional()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '06'
        conditional_0 = module_0.Conditional(str_0)
        display_0 = module_1.Display()
        var_0 = conditional_0.evaluate_conditional(display_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        conditional_0 = module_0.Conditional(bool_0)
        str_0 = '\n    name: env\n    author: Jan-Piet Mens (@jpmens) <jpmens(at)gmail.com>\n    version_added: "0.9"\n    short_description: Read the value of environment variables\n    description:\n      - Allows you to query the environment variables available on the\n        controller when you invoked Ansible.\n    options:\n      _terms:\n        description:\n          - Environment variable or list of them to lookup the values for.\n        required: True\n    notes:\n      - The module returns an empty string if the environment variable is not\n        defined. This makes it impossible to differentiate between the case the\n        variable is not defined and the case the variable is defined but it\n        contains an empty string.\n      - The C(default) filter requires second parameter to be set to C(True)\n        in order to set a default value in the case the variable is not\n        defined (see examples).\n'
        var_0 = conditional_0.extract_defined_undefined(str_0)
        int_0 = 110
        var_1 = conditional_0.evaluate_conditional(int_0, conditional_0)
    except BaseException:
        pass