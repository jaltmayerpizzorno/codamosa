# Automatically generated by Pynguin.
import pytutils.trees as module_0

def test_case_0():
    try:
        str_0 = 'S,.K@9'
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tree_0 = module_0.Tree()
        var_0 = tree_0.__getitem__(tree_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = None
        list_0 = [int_0, int_0, int_0, int_0]
        int_1 = None
        var_0 = module_0.set_tree_node(int_0, list_0, int_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1583
        str_0 = 'byb4:'
        var_0 = module_0.set_tree_node(int_0, str_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        tree_0 = module_0.Tree(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n    Ensure string is decoded (eg unicode); convert using specified parameters if we have to.\n\n    :param str|bytes|bytesarray|memoryview s: string/bytes\n    :param str encoding: Decode using this encoding\n    :param str errors: How to handle errors\n    :return bytes|bytesarray|memoryview: Decoded string as bytes\n\n    :return: Encoded string\n    :rtype: bytes\n    '
        dict_0 = {}
        float_0 = -3397.0
        list_0 = []
        tree_0 = module_0.Tree(list_0)
        var_0 = tree_0.__setitem__(str_0, dict_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tree_0 = module_0.Tree()
        float_0 = 394.31
        bytes_0 = b'\x8c\n\xe6'
        var_0 = tree_0.__setitem__(float_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = module_0.tree()
        str_0 = 'foo'
        registry_tree_0 = module_0.RegistryTree()
        bytes_0 = b'}\xc1\xc6C\x82\xa7\x0fv'
        str_1 = 'Take a list of imports, and split it into regularized form.\n\n        This is meant to take regular import text, and convert it to\n        the forms that the rest of the converters prefer.\n        '
        set_0 = {str_0}
        tree_0 = module_0.Tree(bytes_0, str_1, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        str_0 = 'Igm;)4Q,TM'
        set_0 = {str_0}
        int_0 = 2233
        var_0 = module_0.get_tree_node(bool_0, str_0, set_0, int_0)
    except BaseException:
        pass