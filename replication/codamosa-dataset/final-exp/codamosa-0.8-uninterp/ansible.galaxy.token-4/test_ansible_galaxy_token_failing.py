# Automatically generated by Pynguin.
import ansible.galaxy.token as module_0

def test_case_0():
    try:
        keycloak_token_0 = module_0.KeycloakToken()
        var_0 = keycloak_token_0.headers()
    except BaseException:
        pass

def test_case_1():
    try:
        galaxy_token_0 = module_0.GalaxyToken()
        var_0 = galaxy_token_0.set(galaxy_token_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        basic_auth_token_0 = module_0.BasicAuthToken(list_0)
        basic_auth_token_1 = module_0.BasicAuthToken(bool_0)
        var_0 = basic_auth_token_1.headers()
        var_1 = basic_auth_token_1.headers()
        var_2 = basic_auth_token_1.get()
        keycloak_token_0 = module_0.KeycloakToken()
        galaxy_token_0 = module_0.GalaxyToken()
        var_3 = keycloak_token_0.get()
    except BaseException:
        pass

def test_case_3():
    try:
        keycloak_token_0 = module_0.KeycloakToken()
        dict_0 = {}
        no_token_sentinel_0 = module_0.NoTokenSentinel(**dict_0)
        basic_auth_token_0 = module_0.BasicAuthToken(dict_0)
        galaxy_token_0 = module_0.GalaxyToken()
        var_0 = galaxy_token_0.headers()
        basic_auth_token_1 = module_0.BasicAuthToken(basic_auth_token_0)
        var_1 = basic_auth_token_1.headers()
        bool_0 = True
        basic_auth_token_2 = module_0.BasicAuthToken(no_token_sentinel_0, bool_0)
        var_2 = basic_auth_token_2.headers()
        var_3 = galaxy_token_0.set(no_token_sentinel_0)
        galaxy_token_1 = module_0.GalaxyToken(dict_0)
        var_4 = galaxy_token_1.save()
        galaxy_token_2 = module_0.GalaxyToken()
        var_5 = keycloak_token_0.get()
    except BaseException:
        pass

def test_case_4():
    try:
        keycloak_token_0 = module_0.KeycloakToken()
        dict_0 = {}
        no_token_sentinel_0 = module_0.NoTokenSentinel(**dict_0)
        bytes_0 = b'\x87=\xb4\xcd~\xdel\x83\xda\xcc\x82'
        bytes_1 = b"\x0b\x11\xec?';\x7f\x85`\x01\xce"
        basic_auth_token_0 = module_0.BasicAuthToken(bytes_1)
        galaxy_token_0 = module_0.GalaxyToken(basic_auth_token_0)
        var_0 = galaxy_token_0.headers()
        float_0 = -1769.8
        basic_auth_token_1 = module_0.BasicAuthToken(basic_auth_token_0, float_0)
        var_1 = basic_auth_token_1.headers()
        basic_auth_token_2 = module_0.BasicAuthToken(bytes_0)
        var_2 = basic_auth_token_2.headers()
        var_3 = keycloak_token_0.headers()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 3415
        list_0 = [int_0, int_0, int_0, int_0, int_0, int_0]
        dict_0 = {}
        no_token_sentinel_0 = module_0.NoTokenSentinel(**dict_0)
        keycloak_token_0 = module_0.KeycloakToken(list_0)
        list_1 = [list_0, int_0, list_0, keycloak_token_0]
        bytes_0 = b'\x87=\xb4\xcd~\xdel\x83\xda\xcc\x82'
        bytes_1 = b"\x0b\x11\xec?';\x7f\x85`\x01\xce"
        basic_auth_token_0 = module_0.BasicAuthToken(bytes_1)
        galaxy_token_0 = module_0.GalaxyToken()
        tuple_0 = (keycloak_token_0, galaxy_token_0, keycloak_token_0)
        var_0 = no_token_sentinel_0.__new__(tuple_0, **dict_0)
        galaxy_token_1 = module_0.GalaxyToken(basic_auth_token_0)
        var_1 = galaxy_token_1.headers()
        float_0 = -1769.8
        basic_auth_token_1 = module_0.BasicAuthToken(basic_auth_token_0, float_0)
        var_2 = basic_auth_token_1.headers()
        basic_auth_token_2 = module_0.BasicAuthToken(bytes_0)
        var_3 = basic_auth_token_2.headers()
        basic_auth_token_3 = module_0.BasicAuthToken(list_1)
        var_4 = basic_auth_token_2.get()
        set_0 = {basic_auth_token_1}
        keycloak_token_1 = module_0.KeycloakToken(basic_auth_token_0, set_0, bytes_1, basic_auth_token_1)
        var_5 = keycloak_token_1.get()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'https://www.example.com'
        keycloak_token_0 = module_0.KeycloakToken(str_0, str_0)
        var_0 = keycloak_token_0.get()
    except BaseException:
        pass