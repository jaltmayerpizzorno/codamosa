# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'Z+/+<UTrK+CN!'
    distribution_0 = module_0.Distribution(str_0)
    var_0 = distribution_0.get_distribution_facts()

def test_case_2():
    int_0 = 865
    distribution_files_0 = module_0.DistributionFiles(int_0)

def test_case_3():
    float_0 = 0.953427
    tuple_0 = ()
    distribution_fact_collector_0 = module_0.DistributionFactCollector(tuple_0)
    distribution_fact_collector_1 = module_0.DistributionFactCollector(distribution_fact_collector_0)
    distribution_0 = module_0.Distribution(distribution_fact_collector_1)
    distribution_files_0 = module_0.DistributionFiles(float_0)
    distribution_fact_collector_2 = module_0.DistributionFactCollector()
    var_0 = distribution_fact_collector_2.collect()
    float_1 = None
    set_0 = None
    bool_0 = False
    var_1 = distribution_files_0.parse_distribution_file_Slackware(float_1, tuple_0, set_0, bool_0)

def test_case_4():
    var_0 = dict()
    distribution_files_0 = module_0.DistributionFiles(var_0)
    str_0 = '\nSlackware 14.2.0.0\n'
    str_1 = 'Slackware'
    str_2 = '14.2.0.0'
    var_1 = dict()
    var_2 = distribution_files_0.parse_distribution_file_Slackware(str_1, str_0, str_2, var_1)

def test_case_5():
    str_0 = 'No inventory was parsed, only implicit localhost is available'
    str_1 = '~L6E`aJf[bA%SYO|Zc'
    list_0 = [str_1, str_0, str_0, str_1, str_1]
    float_0 = 1751.9234
    bool_0 = False
    distribution_files_0 = None
    str_2 = 'j\rAg;sBC?\\|h+M\n}>w(%'
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    distribution_files_1 = module_0.DistributionFiles(distribution_fact_collector_0)
    var_0 = distribution_files_1.parse_distribution_file_Alpine(float_0, bool_0, distribution_files_0, str_2)
    bytes_0 = b'k\xca\xc4\xce\xbe\r\xeaA\t\x96\xba\x14\xc6\xc3\xdb\xf5\xde\xb9\x86'
    bool_1 = False
    dict_0 = {bool_1: bool_1, bool_1: bool_1}
    distribution_files_2 = module_0.DistributionFiles(dict_0)
    var_1 = distribution_files_2.parse_distribution_file_Debian(str_0, str_1, list_0, bytes_0)

def test_case_6():
    str_0 = '~L6E`aJf[bA%SYO|Zc'
    list_0 = [str_0, str_0, str_0]
    bytes_0 = b'k\xca\xc4\xce\xbe\r\xeaA\t\x96\xba\x14\xc6\xc3\xdb\xf5\xde\xb9\x86'
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0}
    distribution_files_0 = module_0.DistributionFiles(dict_0)
    var_0 = distribution_files_0.parse_distribution_file_Debian(str_0, str_0, list_0, bytes_0)

def test_case_7():
    distribution_fact_collector_0 = None
    str_0 = 'unicode_wrap'
    set_0 = {str_0}
    bytes_0 = b'`\x83\x95W\nZ\xfd'
    distribution_files_0 = module_0.DistributionFiles(bytes_0)
    var_0 = distribution_files_0.parse_distribution_file_Mandriva(distribution_fact_collector_0, str_0, distribution_fact_collector_0, set_0)

def test_case_8():
    int_0 = -934
    list_0 = [int_0, int_0, int_0]
    distribution_files_0 = None
    bool_0 = True
    distribution_files_1 = module_0.DistributionFiles(bool_0)
    var_0 = distribution_files_1.parse_distribution_file_Coreos(int_0, list_0, distribution_files_0, distribution_files_0)

def test_case_9():
    bytes_0 = b'\xb7 SRi\x06\xc8V\n\x85\x92\x03-\xad-'
    str_0 = '6'
    set_0 = set()
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    bool_0 = True
    distribution_files_0 = module_0.DistributionFiles(bool_0)
    var_0 = distribution_files_0.parse_distribution_file_Flatcar(bytes_0, str_0, set_0, distribution_fact_collector_0)

def test_case_10():
    bytes_0 = b'\x13\x84\xbfh\xde\x12\xa2\xd3;\xe4\x96\x98\x9e\x18\x90\x80'
    tuple_0 = (bytes_0,)
    str_0 = 'No matching task "%s" found. Note: --start-at-task can only follow static includes.'
    distribution_0 = None
    bytes_1 = b'\xde~\xeb\xc2k\x90>\x13\x96f\xcf\x03R`\xf6\x10\x93'
    distribution_files_0 = module_0.DistributionFiles(bytes_1)
    var_0 = distribution_files_0.parse_distribution_file_ClearLinux(str_0, distribution_0, str_0, tuple_0)

def test_case_11():
    bytes_0 = b''
    distribution_0 = module_0.Distribution(bytes_0)
    var_0 = distribution_0.get_distribution_FreeBSD()

def test_case_12():
    dict_0 = None
    list_0 = [dict_0, dict_0]
    distribution_0 = module_0.Distribution(list_0)
    var_0 = distribution_0.get_distribution_SMGL()
    var_1 = distribution_0.get_distribution_FreeBSD()

def test_case_13():
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    bytes_0 = b'\x13\x84\xbfh\xde\x12\xa2\xd3;\xe4\x96\x98\x9e\x18\x90\x80'
    tuple_0 = (bytes_0,)
    str_0 = 'No matching task "%s" found. Note: --start-at-task can only follow static includes.'
    distribution_0 = None
    bytes_1 = b'\xde~\xeb\xc2k\x90>\x13\x96f\xcf\x03R`\xf6\x10\x93'
    distribution_files_0 = module_0.DistributionFiles(bytes_1)
    var_0 = distribution_files_0.parse_distribution_file_ClearLinux(str_0, distribution_0, str_0, tuple_0)
    var_1 = distribution_fact_collector_0.collect()

def test_case_14():
    distribution_fact_collector_0 = module_0.DistributionFactCollector()
    bytes_0 = b'\x13\x84\xbfh\xde\x12\xa2\xd3;\xe4\x96\x98\x9e\x18\x90\x80'
    tuple_0 = (bytes_0,)
    str_0 = 'No matching task "%s" found. Note: --start-at-task can only follow static includes.'
    distribution_0 = None
    bytes_1 = b'\xd5VoYEZ\x8e\xc4'
    distribution_files_0 = module_0.DistributionFiles(bytes_1)
    var_0 = distribution_files_0.parse_distribution_file_ClearLinux(str_0, distribution_0, str_0, tuple_0)
    var_1 = distribution_fact_collector_0.collect(tuple_0)
    var_2 = distribution_fact_collector_0.collect()

def test_case_15():
    var_0 = dict()
    bytes_0 = b'\x18\xe0\x8c"F>\x81\xac\xe8'
    distribution_0 = module_0.Distribution(bytes_0)
    str_0 = 'flatcar'
    distribution_files_0 = module_0.DistributionFiles(str_0)
    bool_0 = True
    list_0 = [distribution_files_0]
    tuple_0 = (distribution_0, distribution_files_0, bool_0, list_0)
    set_0 = {str_0}
    str_1 = 'bullseye'
    float_0 = -1883.0
    distribution_files_1 = module_0.DistributionFiles(float_0)
    var_1 = distribution_files_1.parse_distribution_file_CentOS(tuple_0, set_0, str_1, distribution_0)

def test_case_16():
    float_0 = 1166.0841928922712
    distribution_files_0 = module_0.DistributionFiles(float_0)
    str_0 = '"sY:EE/0YYdw%sR>gRDI'
    list_0 = []
    var_0 = distribution_files_0.parse_distribution_file_NA(float_0, str_0, list_0, float_0)