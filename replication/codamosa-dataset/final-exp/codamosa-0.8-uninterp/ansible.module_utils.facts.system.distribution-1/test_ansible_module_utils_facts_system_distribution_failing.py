# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        float_0 = 802.4728
        distribution_fact_collector_0 = module_0.DistributionFactCollector(float_0)
        list_0 = [distribution_fact_collector_0, float_0]
        var_0 = module_0.get_uname(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        tuple_0 = ()
        distribution_files_0 = module_0.DistributionFiles(tuple_0)
        str_0 = 'FG[8\ru'
        distribution_0 = module_0.Distribution(str_0)
        distribution_files_1 = module_0.DistributionFiles(distribution_0)
        str_1 = '8RayV}='
        var_0 = distribution_files_0.parse_distribution_file_OpenWrt(str_0, str_0, str_1, distribution_files_0)
        var_1 = distribution_files_1.parse_distribution_file_NA(bytes_0, tuple_0, distribution_files_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b"'x\xce$\x01\xd61\x94"
        distribution_0 = None
        float_0 = -2839.90607
        float_1 = 4037.07132
        distribution_1 = module_0.Distribution(float_1)
        distribution_files_0 = module_0.DistributionFiles(distribution_1)
        distribution_files_1 = module_0.DistributionFiles(distribution_files_0)
        var_0 = distribution_files_1.parse_distribution_file_NA(bytes_0, distribution_0, distribution_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\te:QJf,'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1180.6
        distribution_files_0 = module_0.DistributionFiles(float_0)
        tuple_0 = ()
        str_0 = '"sY:EE/0YYdw%sR>gRDI'
        list_0 = []
        var_0 = distribution_files_0.parse_distribution_file_NA(float_0, str_0, list_0, float_0)
        distribution_0 = module_0.Distribution(distribution_files_0)
        set_0 = {tuple_0, distribution_0}
        var_1 = distribution_files_0.parse_distribution_file_Debian(float_0, tuple_0, set_0, float_0)
        var_2 = distribution_files_0.process_dist_files()
        var_3 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        distribution_0 = module_0.Distribution(bool_0)
        var_0 = distribution_0.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        distribution_0 = module_0.Distribution(bool_0)
        distribution_1 = module_0.Distribution(distribution_0)
        var_0 = distribution_1.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xc8\xb0\x14\xb1\x82\xffP\xd0\xf8yj{\x90V\n\xb18\xd9'
        bytes_1 = b'\xb14\xed\x97\x01#\x0b+\x14\xcat'
        bool_0 = True
        dict_0 = {bytes_1: bool_0, bytes_1: bool_0}
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_fact_collector_0.collect(distribution_0)
        var_1 = distribution_fact_collector_0.collect()
        distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
        var_2 = distribution_files_0.parse_distribution_file_Coreos(bytes_1, bool_0, dict_0, dict_0)
        distribution_1 = module_0.Distribution(bytes_0)
        var_3 = distribution_1.get_distribution_SMGL()
        bool_1 = True
        distribution_2 = module_0.Distribution(bool_1)
        var_4 = distribution_1.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'\xc8\xb0\x14\xb1\x82\xffP\xd0\xf8yj{\x90V\n\xb18\xd9'
        bytes_1 = b'\xb14\xed\x97\x01#\x0b+\x14\xcat'
        bool_0 = True
        dict_0 = {bytes_1: bool_0, bytes_1: bool_0}
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(bytes_0)
        var_0 = distribution_fact_collector_0.collect(distribution_0)
        var_1 = distribution_fact_collector_0.collect()
        distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
        var_2 = distribution_files_0.parse_distribution_file_Coreos(bytes_1, bool_0, dict_0, dict_0)
        distribution_1 = module_0.Distribution(bytes_0)
        var_3 = distribution_1.get_distribution_SMGL()
        float_0 = -2239.4
        list_0 = [dict_0, float_0, bytes_1]
        var_4 = distribution_fact_collector_0.collect(list_0)
        bool_1 = True
        distribution_2 = module_0.Distribution(bool_1)
        var_5 = distribution_2.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_9():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        list_0 = [distribution_fact_collector_0, distribution_fact_collector_0]
        list_1 = [list_0, distribution_fact_collector_0, list_0, distribution_fact_collector_0]
        distribution_files_0 = module_0.DistributionFiles(list_1)
        list_2 = [distribution_files_0]
        float_0 = -1026.4039
        var_0 = module_0.get_uname(list_2, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = None
        distribution_0 = module_0.Distribution(var_0)
        var_1 = distribution_0.get_distribution_facts()
        var_2 = distribution_0.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_11():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bytes_0 = b'\x13\x84\xbfh\xde\x12\xa2\xd3;\xe4\x96\x98\x9e\x18\x90\x80'
        tuple_0 = (bytes_0,)
        str_0 = 'No matching task "%s" found. Note: --start-at-task can only follow static includes.'
        distribution_0 = None
        bytes_1 = b'\xde~\xeb\xc2k\x90>\x13\x96f\xcf\x03R`\xf6\x10\x93'
        distribution_files_0 = module_0.DistributionFiles(bytes_1)
        var_0 = distribution_files_0.parse_distribution_file_ClearLinux(str_0, distribution_0, str_0, tuple_0)
        str_1 = 'i%obpd,X=Z(tqf'
        var_1 = distribution_fact_collector_0.collect(str_0, str_1)
        var_2 = distribution_fact_collector_0.collect(tuple_0)
        var_3 = distribution_fact_collector_0.collect()
        var_4 = distribution_0.get_distribution_FreeBSD()
    except BaseException:
        pass