# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    try:
        str_0 = 'let(x); x = 1'
        var_0 = module_0.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
        dict_0 = {}
        a_s_t_0 = module_2.AST()
        module_1.extend_tree(a_s_t_0, dict_0)
        keyword_0 = None
        str_1 = None
        str_2 = 'FM(62ywm#ls\rnN/_,'
        str_3 = 'XkZO)|%E86'
        dict_1 = {str_0: a_s_t_0, str_0: str_0, str_1: str_1, str_2: str_3}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    except BaseException:
        pass

def test_case_1():
    try:
        a_s_t_0 = module_2.AST()
        function_def_0 = module_2.FunctionDef()
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
        import_from_0 = None
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'extend(vars_)'
        var_0 = module_0.parse(str_0)
        str_1 = 'extend(vars__)'
        str_2 = "cZ8T5 (T(u;\nO4'\\Eu,3"
        dict_0 = {str_0: str_0, str_1: str_2, str_0: str_2}
        list_0 = [str_2]
        alias_0 = module_2.alias(*list_0)
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
        variables_replacer_1 = module_1.VariablesReplacer(dict_0)
        variables_replacer_2 = module_1.VariablesReplacer(dict_0)
        alias_2 = variables_replacer_2.visit_alias(alias_1)
        variables_replacer_3 = module_1.VariablesReplacer(dict_0)
        variables_replacer_4 = module_1.VariablesReplacer(dict_0)
        str_3 = 'x = 200'
        var_1 = {str_1: str_3}
        dict_1 = {str_1: str_1, str_3: str_3, str_1: var_0, str_1: str_1}
        a_s_t_0 = module_2.AST(**dict_1)
        iterable_0 = module_1.find_variables(a_s_t_0)
        module_1.extend_tree(var_0, var_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'let(x); x = 1'
        var_0 = module_0.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
        var_1 = list(iterable_0)
        import_from_0 = module_2.ImportFrom()
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'let(x); x = 1'
        var_0 = module_0.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
        var_1 = list(iterable_0)
        import_from_0 = module_2.ImportFrom()
        dict_0 = {}
        dict_1 = {}
        a_s_t_0 = module_2.AST(**dict_1)
        module_1.extend_tree(a_s_t_0, dict_0)
        alias_0 = module_2.alias()
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'extend(vars_)'
        var_0 = module_0.parse(str_0)
        module_1.extend_tree(var_0, var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'let(x); x= 1'
        var_0 = module_0.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
        var_1 = list(iterable_0)
        callable_0 = None
        snippet_0 = module_1.snippet(callable_0)
        dict_0 = {str_0: var_1, str_0: str_0}
        a_s_t_0 = module_2.AST(**dict_0)
        var_2 = module_0.dump(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'let(x); x3= 1'
        var_0 = module_0.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
        dict_0 = {str_0: str_0}
        dict_1 = {str_0: str_0, str_0: str_0}
        a_s_t_0 = module_2.AST(**dict_1)
        module_1.extend_tree(a_s_t_0, dict_0)
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        list_0 = [a_s_t_0, a_s_t_0, a_s_t_0]
        snippet_0 = module_1.snippet(list_0)
        list_1 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'extend(vars_)'
        var_0 = module_0.parse(str_0)
        module_1.let(var_0)
        module_1.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        name_0 = module_2.Name(**dict_0)
        str_0 = 'list'
        str_1 = '=?6@pOOM+i]X>?h'
        dict_1 = {str_0: str_0, str_1: str_0, str_1: str_0, str_1: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        name_1 = variables_replacer_0.visit_Name(name_0)
        str_2 = 'Compiling "{}"'
        list_0 = []
        str_3 = "D.'&P:&AxpeJDw"
        dict_2 = {str_3: list_0}
        a_s_t_0 = module_2.AST(*list_0, **dict_2)
        str_4 = None
        dict_3 = {str_2: str_2, str_2: a_s_t_0, str_2: str_2, str_4: str_4}
        variables_replacer_1 = module_1.VariablesReplacer(dict_3)
        name_2 = variables_replacer_1.visit_Name(name_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'extend(vars_)'
        var_0 = module_0.parse(str_0)
        str_1 = 'extend(vars__)'
        str_2 = 'x = 100'
        str_3 = "cZ8T5 (T(u;\nO4'\\Eu,3"
        dict_0 = {str_2: str_0, str_1: str_3, str_0: str_3}
        list_0 = [str_2]
        alias_0 = module_2.alias(*list_0)
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
        variables_replacer_1 = module_1.VariablesReplacer(dict_0)
        variables_replacer_2 = module_1.VariablesReplacer(dict_0)
        variables_replacer_3 = module_1.VariablesReplacer(dict_0)
        str_4 = 'x = 200'
        dict_1 = {str_1: str_1, str_4: str_4, str_1: var_0, str_1: str_1}
        a_s_t_0 = module_2.AST(**dict_1)
        iterable_0 = module_1.find_variables(a_s_t_0)
        module_1.extend_tree(var_0, iterable_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'extend(vars_)'
        var_0 = module_0.parse(str_0)
        function_def_0 = module_2.FunctionDef()
        a_s_t_0 = module_2.AST()
        str_1 = '(]~*4Y-2!:7T7i-;@'
        str_2 = "s3{'"
        str_3 = 'OW0r/o0oR+%:oKpYruU'
        dict_0 = {str_0: a_s_t_0, str_1: a_s_t_0, str_2: a_s_t_0, str_3: str_2}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        variables_replacer_1 = module_1.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
        str_4 = 'extend(vars__)'
        str_5 = "cZ8T5 (T(u;\nO4'\\Eu,3"
        dict_1 = {str_0: str_0, str_4: str_5, str_0: str_5}
        list_0 = [str_3]
        alias_0 = module_2.alias(*list_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
        alias_2 = variables_replacer_0.visit_alias(alias_0)
        variables_replacer_2 = module_1.VariablesReplacer(dict_1)
        variables_replacer_3 = module_1.VariablesReplacer(dict_1)
        alias_3 = variables_replacer_3.visit_alias(alias_2)
        variables_replacer_4 = module_1.VariablesReplacer(dict_1)
        dict_2 = {str_0: str_0}
        variables_replacer_5 = module_1.VariablesReplacer(dict_2)
        str_6 = 'x = 200'
        str_7 = 'X9'
        dict_3 = {str_7: str_7, str_6: str_6, str_4: var_0, str_4: str_4}
        a_s_t_1 = module_2.AST(**dict_3)
        iterable_0 = module_1.find_variables(a_s_t_1)
        module_1.extend_tree(var_0, str_1)
    except BaseException:
        pass