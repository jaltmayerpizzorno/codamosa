# Automatically generated by Pynguin.
import typed_ast.ast3 as module_0
import py_backwards.transformers.starred_unpacking as module_1
import typed_ast._ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = 'C([2, *range(10), 1])'
    var_0 = module_0.parse(str_0)
    starred_unpacking_transformer_0 = module_1.StarredUnpackingTransformer(var_0)
    var_1 = starred_unpacking_transformer_0.visit(var_0)

def test_case_2():
    str_0 = 'C([2, *rage( 0), ])'
    var_0 = module_0.parse(str_0)
    starred_unpacking_transformer_0 = module_1.StarredUnpackingTransformer(var_0)
    var_1 = starred_unpacking_transformer_0.visit(var_0)

def test_case_3():
    str_0 = "os.path.join('foo', 'bar', *args)"
    var_0 = module_0.parse(str_0)
    list_0 = None
    set_0 = {var_0, var_0, list_0}
    list_1 = [var_0, set_0, var_0]
    call_0 = module_2.Call(*list_1)
    str_1 = 'Compiles:\n        a: int = 10\n        b: int\n    To:\n        a = 10\n\n    '
    dict_0 = {str_1: var_0}
    a_s_t_0 = module_2.AST(**dict_0)
    starred_unpacking_transformer_0 = module_1.StarredUnpackingTransformer(a_s_t_0)
    call_1 = starred_unpacking_transformer_0.visit_Call(call_0)
    call_2 = starred_unpacking_transformer_0.visit_Call(call_0)
    a_s_t_1 = module_2.AST()
    starred_unpacking_transformer_1 = module_1.StarredUnpackingTransformer(a_s_t_1)
    call_3 = starred_unpacking_transformer_1.visit_Call(call_2)