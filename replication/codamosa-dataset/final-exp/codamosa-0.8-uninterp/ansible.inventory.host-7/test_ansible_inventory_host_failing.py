# Automatically generated by Pynguin.
import ansible.inventory.host as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        bool_0 = False
        host_0 = module_0.Host(bool_0)
        var_0 = host_0.__getstate__()
        host_1 = module_0.Host()
        var_1 = host_1.__repr__()
        var_2 = host_1.serialize()
        var_3 = host_0.__hash__()
    except BaseException:
        pass

def test_case_1():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__ne__(host_0)
        var_1 = host_0.get_name()
        host_1 = module_0.Host()
        var_2 = host_1.__str__()
        var_3 = host_0.__repr__()
        host_2 = module_0.Host()
        var_4 = host_2.serialize()
        var_5 = host_1.get_vars()
    except BaseException:
        pass

def test_case_2():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.__str__()
        var_1 = host_0.serialize()
        host_1 = module_0.Host()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        str_0 = 'V]I'
        host_0 = module_0.Host(dict_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'MyHost'
        host_0 = module_0.Host(str_0)
        group_0 = module_1.Group(str_0)
        str_1 = 'MyChildGroup'
        group_1 = module_1.Group(str_1)
        var_0 = host_0.add_group(group_0)
        var_1 = host_0.add_group(group_1)
        var_2 = host_0.remove_group(group_1)
        var_3 = host_0.remove_group(group_0)
        bool_0 = True
        var_4 = host_0.populate_ancestors(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -463.766
        float_1 = 2.0
        host_0 = module_0.Host(float_1)
        var_0 = host_0.add_group(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        host_0 = module_0.Host()
        var_0 = host_0.get_vars()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'w3&2A\x0ct'
        bool_0 = True
        host_0 = module_0.Host(str_0, bool_0)
        var_0 = host_0.get_magic_vars()
        var_1 = host_0.get_magic_vars()
        host_1 = module_0.Host(str_0)
        bytes_0 = b"\x94\x95\\Z\xd9\xf9\x14K\xf8\xd8\x85\xc1\xf9\xdd\x0c@'\x02\x8b"
        var_2 = host_1.populate_ancestors(bytes_0)
        var_3 = host_0.__str__()
        host_2 = module_0.Host()
        host_3 = module_0.Host()
        var_4 = host_3.get_magic_vars()
    except BaseException:
        pass