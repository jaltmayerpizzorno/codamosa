# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        bool_0 = True
        str_0 = '=\n=ST?\\yE*MO*y[1+\\'
        str_1 = 'path'
        unauthorized_0 = module_0.Unauthorized(str_0, str_1)
        header_not_found_0 = module_0.HeaderNotFound(unauthorized_0)
        invalid_range_type_0 = module_0.InvalidRangeType(bool_0, header_not_found_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -235
        bytes_0 = b'c\xc4\xd2\x7fd\x93\xee\xea\x89\xd2j\xf9\xa4\xa2\x96\xbf'
        float_0 = -1084.506168
        method_not_supported_0 = module_0.MethodNotSupported(int_0, bytes_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        header_not_found_0 = None
        int_0 = 1898
        payload_too_large_0 = module_0.PayloadTooLarge(int_0, header_not_found_0)
        py_file_error_0 = module_0.PyFileError(payload_too_large_0)
        load_file_exception_0 = module_0.LoadFileException(py_file_error_0)
        tuple_0 = (bool_0, header_not_found_0, load_file_exception_0)
        int_1 = 1004
        list_0 = [int_1, header_not_found_0, py_file_error_0]
        list_1 = [tuple_0]
        method_not_supported_0 = module_0.MethodNotSupported(int_1, list_0, list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1695
        str_0 = '%Li'
        var_0 = module_0.abort(int_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 8192
        sanic_exception_0 = module_0.SanicException(int_0)
        int_1 = 2700
        var_0 = module_0.abort(int_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 416
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        complex_0 = None
        sanic_exception_0 = module_0.SanicException(complex_0)
        str_0 = ' has not yet been registered to an app'
        not_found_0 = module_0.NotFound(str_0)
        set_0 = {complex_0}
        service_unavailable_0 = module_0.ServiceUnavailable(set_0)
        int_0 = 853
        file_not_found_0 = module_0.FileNotFound(not_found_0, service_unavailable_0, int_0)
        payload_too_large_0 = module_0.PayloadTooLarge(file_not_found_0, service_unavailable_0)
        unauthorized_0 = module_0.Unauthorized(payload_too_large_0, not_found_0)
        tuple_0 = (unauthorized_0,)
        header_not_found_0 = module_0.HeaderNotFound(tuple_0)
        str_1 = None
        bytes_0 = None
        bool_0 = False
        bytes_1 = b''
        u_r_l_build_error_0 = module_0.URLBuildError(bytes_0, bool_0, bytes_1)
        invalid_range_type_0 = module_0.InvalidRangeType(str_1, u_r_l_build_error_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'M'
        not_found_0 = module_0.NotFound(str_0)
        int_0 = 1184
        request_timeout_0 = module_0.RequestTimeout(not_found_0)
        unauthorized_0 = module_0.Unauthorized(int_0, request_timeout_0, int_0)
        int_1 = 853
        var_0 = module_0.abort(int_1)
    except BaseException:
        pass

def test_case_8():
    try:
        py_file_error_0 = None
        not_found_0 = module_0.NotFound(py_file_error_0)
        invalid_usage_0 = module_0.InvalidUsage(py_file_error_0, not_found_0)
        invalid_usage_1 = module_0.InvalidUsage(invalid_usage_0)
        bool_0 = True
        list_0 = [py_file_error_0, not_found_0]
        tuple_0 = None
        str_0 = '?]VA'
        dict_0 = {str_0: py_file_error_0}
        unauthorized_0 = module_0.Unauthorized(list_0, tuple_0, list_0, **dict_0)
        method_not_supported_0 = None
        list_1 = [invalid_usage_0, list_0, bool_0]
        u_r_l_build_error_0 = module_0.URLBuildError(method_not_supported_0, list_1)
        bytes_0 = b'P\xfd+:U|\xe4\xc5j\xb1\x99\xa23\x8a\x00\xe9\xf8\xd7]?'
        request_timeout_0 = module_0.RequestTimeout(bytes_0)
        sanic_exception_0 = module_0.SanicException(u_r_l_build_error_0, request_timeout_0)
        load_file_exception_0 = module_0.LoadFileException(sanic_exception_0)
        invalid_range_type_0 = module_0.InvalidRangeType(bool_0, load_file_exception_0)
    except BaseException:
        pass