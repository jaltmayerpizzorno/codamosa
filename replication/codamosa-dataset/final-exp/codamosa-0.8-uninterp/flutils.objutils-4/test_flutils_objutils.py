# Automatically generated by Pynguin.
import flutils.objutils as module_0

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'E\x95ii\xf2\xe4+\xffW\x9e\x07o\xd8/N\x81\xee\x97'
    bool_0 = module_0.has_any_attrs(bytes_0)

def test_case_2():
    float_0 = 119.9525
    str_0 = '|d\x0bvL-`\n'
    list_0 = [str_0]
    bool_0 = module_0.has_any_callables(float_0, *list_0)

def test_case_3():
    bool_0 = True
    bool_1 = module_0.has_any_callables(bool_0)

def test_case_4():
    float_0 = 2589.16
    bool_0 = module_0.has_callables(float_0)

def test_case_5():
    int_0 = -744
    str_0 = "Return a string describing the file type if it exists.\n\n    This function processes the given ``path`` with\n    :obj:`~flutils.normalize_path`.\n\n    Args:\n        path (:obj:`str`, :obj:`bytes` or :obj:`Path <pathlib.Path>`):\n            The path to check for existence.\n\n    :rtype:\n        :obj:`str`\n\n        * ``''`` (empty string): if the given ``path`` does NOT exist; or,\n          is a broken symbolic link; or, other errors (such as permission\n          errors) are propagated.\n        * ``'directory'``: if the given ``path`` points to a directory or\n          is a symbolic link pointing to a directory.\n        * ``'file'``: if the given ``path`` points to a regular file or is a\n          symbolic link pointing to a regular file.\n        * ``'block device'``: if the given ``path`` points to a block device or\n          is a symbolic link pointing to a block device.\n        * ``'char device'``: if the given ``path`` points to a character device\n          or is a symbolic link pointing to a character device.\n        * ``'FIFO'``: if the given ``path`` points to a FIFO or is a symbolic\n          link pointing to a FIFO.\n        * ``'socket'``: if the given ``path`` points to a Unix socket or is a\n          symbolic link pointing to a Unix socket.\n\n    Example:\n        >>> from flutils.pathutils import exists_as\n        >>> exists_as('~/tmp')\n        'directory'\n    "
    list_0 = [str_0, str_0, str_0]
    bool_0 = module_0.has_attrs(int_0, *list_0)

def test_case_6():
    str_0 = 'convert_escaped_utf8_literal'
    bool_0 = module_0.is_list_like(str_0)

def test_case_7():
    list_0 = []
    bool_0 = module_0.is_list_like(list_0)

def test_case_8():
    complex_0 = None
    str_0 = '__class__'
    list_0 = [str_0]
    bool_0 = module_0.has_callables(complex_0, *list_0)

def test_case_9():
    var_0 = dict()
    str_0 = 'values'
    str_1 = [str_0, str_0, str_0, str_0, str_0]
    bool_0 = module_0.has_any_callables(var_0, *str_1)