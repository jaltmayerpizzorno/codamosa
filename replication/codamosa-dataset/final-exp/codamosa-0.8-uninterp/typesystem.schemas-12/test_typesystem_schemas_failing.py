# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        str_0 = 'c48a .2t;'
        str_1 = 'maximum'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_0 = module_0.Schema()
        schema_definitions_1 = module_0.SchemaDefinitions()
        any_0 = schema_definitions_1.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        bool_0 = True
        reference_0 = module_0.Reference(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        validation_error_0 = None
        str_0 = '\n    Always matches.\n    '
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0]
        schema_definitions_0 = module_0.SchemaDefinitions(*list_0)
        schema_definitions_0.__delitem__(validation_error_0)
    except BaseException:
        pass

def test_case_3():
    try:
        schema_0 = module_0.Schema()
        schema_definitions_0 = module_0.SchemaDefinitions()
        list_0 = []
        str_0 = '+*$@\\6t8'
        dict_0 = {str_0: list_0}
        schema_1 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = None
        dict_0 = {}
        list_0 = [dict_0]
        schema_0 = module_0.Schema(*list_0)
        any_0 = schema_0.__getitem__(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 936
        reference_0 = module_0.Reference(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        bool_0 = True
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(reference_0, strict=bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'B\\qqY!${#08]@(P7Vnn'
        str_1 = 'qS\x0baYDZ_!tD9Hu\\xsh'
        dict_0 = {str_0: str_1, str_0: str_1, str_1: str_0, str_0: str_0}
        reference_0 = module_0.Reference(str_0, dict_0)
        dict_1 = None
        field_0 = module_1.Field()
        any_0 = field_0.get_default_value()
        list_0 = [dict_1, dict_1, any_0]
        schema_0 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        schema_0 = module_0.Schema()
        str_0 = '//Q%JJon;3olyH'
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        int_0 = schema_definitions_0.__len__()
        any_0 = schema_0.__getitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_9():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'test'
        reference_0 = module_0.Reference(str_0)
        reference_1 = {str_0: reference_0}
        object_0 = module_1.Object(properties=reference_1)
        module_0.set_definitions(object_0, schema_definitions_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = None
        schema_0 = module_0.Schema()
        str_0 = ' q7"C@MA'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        iterator_0 = None
        field_0 = None
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        module_0.set_definitions(field_0, schema_definitions_0)
        field_1 = module_1.Field()
        any_0 = field_1.get_default_value()
        schema_0 = module_0.Schema(**dict_0)
        str_0 = schema_0.__repr__()
        bool_0 = schema_0.__eq__(iterator_0)
        schema_1 = module_0.Schema()
        int_0 = schema_0.__len__()
        reference_0 = module_0.Reference(str_0)
        reference_1 = None
        any_1 = reference_0.serialize(reference_1)
        any_2 = reference_1.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "IY'#bIsl-7H{V=A&fyo"
        dict_0 = {}
        schema_0 = module_0.Schema(**dict_0)
        bool_0 = schema_0.__eq__(str_0)
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        iterator_0 = schema_definitions_0.__iter__()
        schema_definitions_1 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_1.__len__()
        list_0 = [bool_0]
        iterator_1 = schema_0.__iter__()
        schema_1 = module_0.Schema(*list_0)
        schema_2 = module_0.Schema()
        str_1 = schema_2.__repr__()
        bool_1 = True
        dict_1 = {bool_1: dict_0, str_0: schema_definitions_1, bool_1: schema_definitions_1}
        reference_0 = module_0.Reference(str_0, dict_1)
        bool_2 = False
        any_0 = reference_0.validate(bool_0, strict=bool_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "IY'#bIsl-7H{V=A&fyo"
        bool_0 = True
        field_0 = module_1.Field(allow_null=bool_0)
        any_0 = field_0.get_default_value()
        schema_definitions_0 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_0.__len__()
        list_0 = [bool_0]
        schema_0 = module_0.Schema(*list_0)
        module_0.set_definitions(field_0, schema_definitions_0)
        str_1 = schema_0.__repr__()
        bool_1 = schema_0.__eq__(field_0)
        schema_1 = module_0.Schema()
        schema_2 = module_0.Schema(*list_0)
        str_2 = schema_2.__repr__()
        dict_0 = {str_2: str_2, str_0: bool_0}
        schema_3 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "IY'#bIsl-7H{V=A&fyo"
        bool_0 = True
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__setitem__(str_0, str_0)
        field_0 = module_1.Field(allow_null=bool_0)
        dict_0 = {}
        schema_0 = module_0.Schema(**dict_0)
        bool_1 = schema_0.__eq__(str_0)
        reference_0 = module_0.Reference(str_0, **dict_0)
        any_0 = reference_0.serialize(schema_0)
        int_0 = schema_definitions_0.__len__()
        list_0 = [schema_definitions_0]
        schema_1 = module_0.Schema(*list_0)
        module_0.set_definitions(field_0, schema_definitions_0)
        bool_2 = schema_1.__eq__(schema_1)
        schema_definitions_0.__setitem__(str_0, int_0)
    except BaseException:
        pass