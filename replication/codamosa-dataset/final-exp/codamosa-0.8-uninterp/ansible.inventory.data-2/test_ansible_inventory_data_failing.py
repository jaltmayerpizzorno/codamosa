# Automatically generated by Pynguin.
import ansible.inventory.data as module_0
import ansible.inventory.group as module_1

def test_case_0():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        var_1 = inventory_data_0.serialize()
        inventory_data_1 = module_0.InventoryData()
        list_0 = [inventory_data_1]
        float_0 = 1895.52
        var_2 = inventory_data_1.add_host(list_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'>\xd6\xc2js9\x8c'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.deserialize(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        inventory_data_0 = module_0.InventoryData()
        inventory_data_1 = module_0.InventoryData()
        str_0 = '#|&'
        var_0 = inventory_data_1.add_host(str_0)
        var_1 = inventory_data_1.reconcile_inventory()
        float_0 = None
        inventory_data_2 = module_0.InventoryData()
        float_1 = 334.996304
        dict_0 = {float_1: var_1}
        var_2 = inventory_data_1.deserialize(dict_0)
        var_3 = inventory_data_2.remove_group(float_0)
        inventory_data_3 = module_0.InventoryData()
        var_4 = inventory_data_3.get_host(str_0)
        var_5 = inventory_data_0.serialize()
        var_6 = inventory_data_0.get_groups_dict()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '2w($\rAK=oZ{'
        set_0 = {str_0, str_0, str_0}
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.get_host(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1986.08
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_group(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        inventory_data_0 = module_0.InventoryData()
        dict_0 = {}
        var_0 = inventory_data_0.add_group(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        inventory_data_0 = module_0.InventoryData()
        bool_0 = True
        var_0 = inventory_data_0.add_host(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -892
        float_0 = 0.2
        inventory_data_0 = module_0.InventoryData()
        list_0 = [float_0, float_0]
        tuple_0 = (inventory_data_0, list_0)
        inventory_data_1 = module_0.InventoryData()
        var_0 = inventory_data_1.set_variable(int_0, float_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        inventory_data_0 = module_0.InventoryData()
        bool_0 = False
        var_0 = inventory_data_0.get_groups_dict()
        int_0 = 4
        var_1 = inventory_data_0.add_child(bool_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = None
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '#|&'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.reconcile_inventory()
        float_0 = None
        inventory_data_1 = module_0.InventoryData()
        str_1 = 'all'
        var_2 = inventory_data_0.add_child(str_1, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '#|&'
        var_0 = inventory_data_0.add_host(str_0)
        str_1 = '(kT'
        list_0 = [str_1, inventory_data_0, str_1]
        var_1 = inventory_data_0.add_host(str_1, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = '#|&'
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.reconcile_inventory()
        float_0 = None
        var_2 = inventory_data_0.remove_group(float_0)
        inventory_data_1 = module_0.InventoryData()
        inventory_data_2 = module_0.InventoryData()
        str_1 = 'Unable to split sysctl line (%s): %s'
        complex_0 = None
        var_3 = inventory_data_1.get_host(complex_0)
        int_0 = -2193
        var_4 = inventory_data_0.add_host(str_1, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = ']jLv'
        var_0 = inventory_data_0.remove_group(str_0)
        var_1 = inventory_data_0.add_host(str_0)
        inventory_data_1 = module_0.InventoryData()
        str_1 = '#|&'
        var_2 = inventory_data_1.add_host(str_1)
        var_3 = inventory_data_1.reconcile_inventory()
        inventory_data_2 = module_0.InventoryData()
        inventory_data_3 = module_0.InventoryData()
        str_2 = 'ungrouped'
        var_4 = inventory_data_0.remove_group(str_2)
        inventory_data_4 = module_0.InventoryData()
        var_5 = inventory_data_3.get_host(str_0)
        var_6 = inventory_data_4.get_groups_dict()
        var_7 = inventory_data_0.serialize()
        var_8 = inventory_data_0.get_groups_dict()
    except BaseException:
        pass

def test_case_14():
    try:
        group_0 = module_1.Group()
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_host(group_0)
        inventory_data_1 = module_0.InventoryData()
        dict_0 = {}
        str_0 = '?ITEe(dTZeH![[R6,N^'
        var_1 = inventory_data_0.add_host(dict_0, str_0)
    except BaseException:
        pass