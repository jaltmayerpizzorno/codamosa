# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        dict_0 = {}
        str_0 = 'wA]XjYGH'
        tuple_0 = (dict_0, str_0)
        either_0 = module_0.Either(tuple_0)
        bool_0 = False
        right_0 = module_0.Right(bool_0)
        var_0 = right_0.to_maybe()
        var_1 = None
        right_1 = module_0.Right(var_1)
        callable_0 = None
        var_2 = either_0.case(bool_0, callable_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 3
        left_0 = module_0.Left(int_0)
        int_1 = 1
        var_0 = lambda x: x + int_1
        var_1 = lambda x: x
        right_0 = module_0.Right(int_0)
        var_2 = lambda x: x + int_1
        var_3 = lambda x: x
        bytes_0 = b'\xd9\xad'
        bytes_1 = b'P\xea4c\x18\xe0\x1b5\xdc'
        var_4 = right_0.case(bytes_0, bytes_1)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        dict_0 = {}
        object_0 = module_1.object()
        either_0 = module_0.Either(var_0)
        bool_0 = either_0.__eq__(object_0)
        left_0 = module_0.Left(var_0)
        var_1 = left_0.to_validation()
        var_2 = left_0.to_validation()
        left_1 = module_0.Left(var_0)
        var_3 = left_0.map(dict_0)
        var_4 = None
        right_0 = module_0.Right(var_0)
        either_1 = module_0.Either(var_4)
        var_5 = either_0.ap(object_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        float_0 = -3042.120738
        either_0 = module_0.Either(float_0)
        var_0 = either_0.to_box()
        float_1 = 1206.5402
        object_0 = module_1.object()
        list_0 = [object_0, float_1]
        right_0 = module_0.Right(list_0)
        bool_0 = right_0.is_right()
        left_0 = module_0.Left(object_0)
        var_1 = None
        right_1 = module_0.Right(var_1)
        var_2 = left_0.to_maybe()
        either_1 = module_0.Either(right_1)
        bool_1 = left_0.is_left()
        right_2 = module_0.Right(float_1)
        var_3 = either_1.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        var_0 = None
        either_0 = module_0.Either(var_0)
        right_0 = module_0.Right(var_0)
        bool_0 = right_0.is_left()
        var_1 = either_0.to_lazy()
        var_2 = right_0.to_maybe()
        var_3 = None
        either_1 = module_0.Either(var_3)
        var_4 = either_1.to_try()
        callable_0 = None
        var_5 = either_1.case(callable_0, callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        object_0 = module_1.object()
        bool_0 = False
        right_0 = module_0.Right(bool_0)
        list_0 = [right_0, right_0, right_0]
        left_0 = module_0.Left(list_0)
        var_0 = left_0.ap(object_0)
        float_0 = -2571.9
        left_1 = module_0.Left(float_0)
        callable_0 = None
        var_1 = left_1.map(callable_0)
        var_2 = left_1.to_validation()
        object_1 = module_1.object()
        str_0 = ']1\\8EI,+\rL)c\x0bX'
        right_1 = module_0.Right(str_0)
        var_3 = right_1.bind(object_1)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = None
        tuple_0 = (list_0,)
        dict_0 = {tuple_0: list_0}
        left_0 = module_0.Left(dict_0)
        bool_0 = left_0.is_right()
        dict_1 = {}
        str_0 = 'uKE,Pwg'
        dict_2 = {str_0: dict_1}
        object_0 = module_1.object(**dict_2)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        int_0 = False
        right_0 = module_0.Right(var_0)
        var_1 = right_0.map(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        callable_0 = None
        int_0 = -952
        right_0 = module_0.Right(int_0)
        var_0 = right_0.bind(callable_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        bool_0 = False
        left_0 = module_0.Left(bool_0)
        bool_1 = left_0.is_left()
        list_0 = [dict_0, dict_0]
        right_0 = module_0.Right(dict_0)
        var_0 = right_0.to_validation()
        object_0 = module_1.object(*list_0)
    except BaseException:
        pass