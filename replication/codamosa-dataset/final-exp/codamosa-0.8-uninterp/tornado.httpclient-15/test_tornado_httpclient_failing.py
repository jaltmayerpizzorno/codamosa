# Automatically generated by Pynguin.
import tornado.httpclient as module_0
import ssl as module_1
import _io as module_2
import tornado.ioloop as module_3

def test_case_0():
    try:
        str_0 = 'IOStream is not idle; cannot convert to SSL'
        h_t_t_p_client_0 = module_0.HTTPClient()
        h_t_t_p_response_0 = h_t_t_p_client_0.fetch(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '/\\d1{Mm)\x0bFv'
        dict_0 = {str_0: str_0}
        h_t_t_p_client_0 = module_0.HTTPClient(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'March'
        int_0 = 999
        str_1 = ']LLDKRX@mU'
        dict_0 = {str_1: str_0}
        s_s_l_context_0 = module_1.SSLContext(**dict_0)
        list_0 = None
        bytes_0 = b'w\x94\x99\xbe\xf7\x89\tV\x95\xf1\x903\x99\x15\xfb\x1d\xbd'
        list_1 = None
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, int_0, s_s_l_context_0, str_0, dict_0, list_0, str_0, int_0, str_0, str_0, bytes_0, list_1, s_s_l_context_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        str_0 = 'Wr\n^vJL}M*SNG/(I\\k'
        bool_0 = True
        s_s_l_context_0 = module_1.SSLContext()
        list_0 = [s_s_l_context_0, dict_0, dict_0]
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, bool_0, list_0, str_0, str_0, str_0, str_0)
        int_0 = 2819
        none_type_0 = None
        h_t_t_p_response_0 = module_0.HTTPResponse(h_t_t_p_request_0, int_0, none_type_0)
        h_t_t_p_client_0 = module_0.HTTPClient(**dict_0)
        h_t_t_p_response_1 = h_t_t_p_client_0.fetch(h_t_t_p_request_0)
    except BaseException:
        pass

def test_case_4():
    try:
        module_0.main()
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.main()
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        str_0 = 'Wr\n^vJ}M|SNG/(I\\k'
        bool_0 = True
        s_s_l_context_0 = module_1.SSLContext()
        list_0 = [s_s_l_context_0, dict_0, dict_0]
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, bool_0, list_0, str_0, str_0, str_0, str_0)
        int_0 = 2819
        none_type_0 = None
        h_t_t_p_response_0 = module_0.HTTPResponse(h_t_t_p_request_0, int_0, none_type_0)
        h_t_t_p_client_0 = module_0.HTTPClient(h_t_t_p_response_0, **dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        str_0 = 'Wr\n^vJL}M*SNG/(I\\k'
        bool_0 = False
        s_s_l_context_0 = module_1.SSLContext()
        list_0 = [s_s_l_context_0, dict_0, dict_0]
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, bool_0, list_0, str_0, str_0, str_0, str_0)
        h_t_t_p_client_0 = module_0.HTTPClient(**dict_0)
        h_t_t_p_client_0.__del__()
        h_t_t_p_client_0.close()
        str_1 = 'IOStream is not idle; cannot convert to SSL'
        int_0 = -2927
        h_t_t_p_response_0 = module_0.HTTPResponse(h_t_t_p_request_0, int_0, str_1)
        h_t_t_p_response_0.rethrow()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -48
        str_0 = 'ResponseStartLine'
        h_t_t_p_client_error_0 = module_0.HTTPClientError(int_0, str_0)
        str_1 = 'IOStream is not idle; cannot convert to SSL'
        h_t_t_p_client_0 = module_0.HTTPClient()
        h_t_t_p_response_0 = h_t_t_p_client_0.fetch(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        str_0 = 'Wr\n^vJL}M*SNG/(I\\k'
        bool_0 = False
        h_t_t_p_client_0 = module_0.HTTPClient()
        s_s_l_context_0 = module_1.SSLContext()
        list_0 = [s_s_l_context_0, dict_0, dict_0]
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, bool_0, list_0, str_0, str_0, str_0, str_0)
        int_0 = 2819
        none_type_0 = None
        h_t_t_p_response_0 = module_0.HTTPResponse(h_t_t_p_request_0, int_0, none_type_0)
        h_t_t_p_client_1 = module_0.HTTPClient(**dict_0)
        h_t_t_p_client_1.__del__()
        h_t_t_p_client_1.close()
        h_t_t_p_client_2 = module_0.HTTPClient()
        str_1 = "G${,f2hB\\n6/hZ^'a"
        dict_1 = {str_1: bool_0}
        h_t_t_p_response_1 = h_t_t_p_client_2.fetch(h_t_t_p_request_0, **dict_1)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        str_0 = 'Wr\n^vJ}M|SNG/(I\\k'
        bool_0 = False
        s_s_l_context_0 = module_1.SSLContext()
        list_0 = [s_s_l_context_0, dict_0, dict_0]
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, bool_0, list_0, str_0, str_0, str_0, str_0)
        int_0 = 2819
        none_type_0 = None
        h_t_t_p_response_0 = module_0.HTTPResponse(h_t_t_p_request_0, int_0, none_type_0)
        h_t_t_p_client_0 = module_0.HTTPClient(**dict_0)
        h_t_t_p_client_0.__del__()
        h_t_t_p_client_0.close()
        h_t_t_p_response_0.rethrow()
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        str_0 = 'Wr\n^vJ}M|SNG/(I\\k'
        bool_0 = False
        s_s_l_context_0 = module_1.SSLContext()
        list_0 = [s_s_l_context_0, dict_0, dict_0]
        h_t_t_p_request_0 = module_0.HTTPRequest(str_0, bool_0, list_0, str_0, str_0, str_0, str_0)
        int_0 = 2819
        optional_0 = None
        bytes_i_o_0 = module_2.BytesIO(**dict_0)
        str_1 = 'dO8/a.2*Rc@i\r\x0cx"y(~ '
        float_0 = -1361.73
        dict_1 = {str_1: float_0}
        h_t_t_p_response_0 = module_0.HTTPResponse(h_t_t_p_request_0, int_0, optional_0, bytes_i_o_0, str_0, s_s_l_context_0, dict_1, float_0)
        h_t_t_p_client_0 = module_0.HTTPClient()
        h_t_t_p_client_0.__del__()
        h_t_t_p_client_0.close()
        int_1 = 1266
        h_t_t_p_client_error_0 = module_0.HTTPClientError(int_1, str_0, h_t_t_p_response_0)
        str_2 = h_t_t_p_client_error_0.__str__()
        list_1 = []
        h_t_t_p_client_1 = module_0.HTTPClient(list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        i_o_loop_0 = module_3.IOLoop()
        i_o_loop_0.make_current()
        async_h_t_t_p_client_0 = module_0.AsyncHTTPClient()
        async_h_t_t_p_client_0.close()
        str_0 = 'http://www.google.com'
        future_0 = async_h_t_t_p_client_0.fetch(str_0)
    except BaseException:
        pass