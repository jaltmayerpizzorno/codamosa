# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0
import collections as module_1

def test_case_0():
    try:
        bytes_0 = b'.\xe2\xb8\xe2g'
        bool_0 = True
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_0 = 'Generic'
        list_0 = [collector_not_found_error_0, bool_0, bytes_0]
        var_0 = module_0.collector_classes_from_gather_subset(bytes_0, bool_0, collector_not_found_error_0, str_0, list_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'FOHdeICOy_tYJmh'
        var_0 = module_0.collector_classes_from_gather_subset()
        var_1 = module_0.build_fact_id_to_collector_map(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
        dict_0 = {str_0: cycle_found_in_fact_deps_0}
        list_1 = [str_0]
        var_0 = module_0.find_unresolved_requires(dict_0, list_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xd0\xb3z\xe6'
        str_0 = 'FOHdeICOy_tYJmh'
        var_0 = module_0.collector_classes_from_gather_subset()
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps()
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        str_1 = '_9+'
        dict_0 = {str_0: cycle_found_in_fact_deps_0, str_1: collector_not_found_error_0, str_0: var_0}
        base_fact_collector_0 = module_0.BaseFactCollector(dict_0)
        var_1 = base_fact_collector_0.collect_with_namespace()
        cycle_found_in_fact_deps_1 = None
        dict_1 = None
        list_0 = [bytes_0, bytes_0, str_0, bytes_0]
        bool_0 = True
        base_fact_collector_1 = module_0.BaseFactCollector(list_0, bool_0)
        var_2 = base_fact_collector_1.collect_with_namespace(cycle_found_in_fact_deps_1, dict_1)
        str_2 = '#'
        base_fact_collector_2 = module_0.BaseFactCollector(str_2)
        int_0 = 3038
        str_3 = 'Unable to load metadata for %s'
        bool_1 = False
        tuple_0 = (int_0, bool_1, list_0, bool_1)
        bytes_1 = b'\x99\x06\xfbx\xbb[\x07 \x9f\\\t\x1b\xd1\xcd\xb8\x06\x1f'
        dict_2 = {str_3: var_2, str_2: dict_0, str_0: dict_0, str_1: bytes_1}
        var_3 = module_0.find_unresolved_requires(tuple_0, dict_2)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\xe5U\x13Y\xe6%(\x884'
        float_0 = 1999.53
        list_0 = [bytes_0, bytes_0, float_0, bytes_0]
        list_1 = [list_0, float_0]
        collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_1)
        str_0 = 'min'
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        base_fact_collector_0 = module_0.BaseFactCollector(unresolved_fact_dep_0, list_0)
        var_0 = module_0.resolve_requires(str_0, base_fact_collector_0)
    except BaseException:
        pass

def test_case_5():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        base_fact_collector_0 = module_0.BaseFactCollector()
        tuple_0 = (collector_not_found_error_0,)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        var_0 = module_0.get_collector_names(tuple_0, unresolved_fact_dep_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '4; Ek3,'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(*list_0)
        var_0 = module_0.get_collector_names(dict_0, cycle_found_in_fact_deps_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'FEKg"\'!cA |\\m[Zk`B'
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, unresolved_fact_dep_0: unresolved_fact_dep_0}
        var_0 = module_0.collector_classes_from_gather_subset()
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        var_1 = module_0.select_collector_classes(dict_0, collector_not_found_error_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "t3/d[p9eSK'80"
        str_1 = ''
        list_0 = []
        collector_not_found_error_0 = None
        bool_0 = True
        var_0 = module_0.collector_classes_from_gather_subset(collector_not_found_error_0, bool_0)
        collector_not_found_error_1 = module_0.CollectorNotFoundError()
        var_1 = module_0.collector_classes_from_gather_subset(list_0, collector_not_found_error_1)
        list_1 = [str_1, str_1]
        var_2 = module_0.resolve_requires(str_0, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = ()
        bytes_0 = b'?^\xd94:\xd6E\xa9\xb1\xc9\xfaQ\xc6\xf4'
        list_0 = [bytes_0, bytes_0]
        defaultdict_0 = module_1.defaultdict()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_1 = []
        float_0 = -1982.7311828917911
        base_fact_collector_0 = module_0.BaseFactCollector(list_1, float_0)
        int_0 = 663
        var_0 = module_0.resolve_requires(defaultdict_0, int_0)
        var_1 = base_fact_collector_0.collect_with_namespace(unresolved_fact_dep_0)
        var_2 = module_0.collector_classes_from_gather_subset(defaultdict_0, tuple_0, list_0)
        str_0 = 'min'
        list_2 = []
        var_3 = module_0.collector_classes_from_gather_subset(str_0, list_2, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'pPZDr$?|m`@qD_;'
        bytes_0 = b'?^\xd94:\xd6E\xa9+\xb1\xc9\xfaQ\xc6\xf4'
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_0 = [bytes_0]
        float_0 = -1990.0
        base_fact_collector_0 = module_0.BaseFactCollector(list_0, float_0)
        var_0 = base_fact_collector_0.collect_with_namespace(unresolved_fact_dep_0)
        set_0 = {base_fact_collector_0}
        var_1 = module_0.collector_classes_from_gather_subset(set_0, unresolved_fact_dep_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'i'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.tsort(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 100.0
        set_0 = {float_0}
        base_fact_collector_0 = module_0.BaseFactCollector(float_0, set_0)
        var_0 = base_fact_collector_0.collect_with_namespace()
        list_0 = [base_fact_collector_0, base_fact_collector_0]
        var_1 = module_0.collector_classes_from_gather_subset(list_0)
        dict_0 = {}
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(**dict_0)
        defaultdict_0 = None
        var_2 = base_fact_collector_0.collect_with_namespace()
        var_3 = module_0.find_unresolved_requires(defaultdict_0, defaultdict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        bytes_0 = b'2"\xce*s\xa7\xc1/V\xb2\x1d\x84O\xad\xc1\xc1\xa1\xee\xa5\x8f'
        list_0 = [bytes_0]
        defaultdict_0 = module_1.defaultdict()
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
        list_1 = [bytes_0]
        float_0 = -1990.52
        base_fact_collector_0 = module_0.BaseFactCollector(list_1, float_0)
        var_0 = base_fact_collector_0.collect_with_namespace(unresolved_fact_dep_0)
        var_1 = module_0.collector_classes_from_gather_subset(defaultdict_0, tuple_0, list_0)
        str_0 = 'J*G_'
        base_fact_collector_1 = None
        list_2 = [base_fact_collector_1]
        dict_0 = {base_fact_collector_0: list_2, base_fact_collector_1: list_2, float_0: str_0}
        var_2 = module_0.tsort(dict_0)
    except BaseException:
        pass