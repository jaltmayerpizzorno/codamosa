# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        set_0 = set()
        str_0 = 'jquF/'
        dict_0 = {str_0: set_0, str_0: set_0}
        var_0 = module_0.remove_values(set_0, dict_0)
        set_1 = set()
        str_1 = '-?TUow:\x0cARM'
        var_1 = module_0.set_fallbacks(set_1, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'R|D}J;Wic1qqP'
        bytes_0 = b'KZ\xeb\xb2\x0fc\xe6"\xcd'
        str_1 = "=fo|E594m6j\n'0c1&"
        dict_0 = {str_0: bytes_0, str_1: str_1, str_1: str_1, str_0: str_0}
        str_2 = 'O1.SL>e<UBwc'
        tuple_0 = (str_2,)
        var_0 = module_0.remove_values(dict_0, tuple_0)
        bool_0 = True
        list_0 = []
        var_1 = module_0.remove_values(dict_0, list_0)
        set_0 = {bool_0}
        str_3 = '>}p\x0b&d'
        var_2 = module_0.remove_values(tuple_0, str_3)
        int_0 = -231
        var_3 = module_0.remove_values(int_0, str_1)
        dict_1 = {bool_0: bool_0}
        var_4 = module_0.remove_values(set_0, dict_1)
        list_1 = [bool_0]
        var_5 = module_0.sanitize_keys(list_1, str_1)
        list_2 = [str_2, var_0, tuple_0, dict_1]
        var_6 = module_0.env_fallback(*list_2)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = None
        list_0 = [tuple_0]
        bytes_0 = b'\xf0\x90\xf7\xa5R?\xf35O\x82\x14\x91K\n+\x9c\x8bP'
        var_0 = module_0.sanitize_keys(list_0, bytes_0)
        bool_0 = False
        var_1 = module_0.set_fallbacks(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = None
        str_0 = "5a 'dk2KUjxY1!y\x0b.RP"
        var_0 = module_0.remove_values(bool_0, str_0)
        float_0 = 2169.564
        list_0 = [float_0, float_0]
        var_1 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Fail to remove /usr/sbin/policy-rc.d (after package manipulation)'
        str_1 = 'set-hostname'
        dict_0 = {str_0: str_1, str_0: str_0}
        dict_1 = {str_0: str_0, str_0: str_0, str_0: dict_0, str_0: dict_0}
        var_0 = module_0.set_fallbacks(dict_1, dict_1)
        list_0 = []
        list_1 = [list_0, list_0]
        var_1 = module_0.remove_values(list_0, list_1)
        str_2 = 'em]cj49\x0bUg3'
        bool_0 = True
        var_2 = module_0.set_fallbacks(str_2, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        set_0 = {bool_0}
        dict_0 = {bool_0: bool_0}
        var_0 = module_0.remove_values(set_0, dict_0)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = None
        str_0 = "5a 'dk2KUjxY1!y\x0b.RP"
        var_0 = module_0.remove_values(bool_0, str_0)
        float_0 = 2169.564
        list_0 = [str_0, float_0, float_0, var_0]
        var_1 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 60.0
        bytes_0 = b'\xd0\xa2{\x7f\x84\x06\x84\xa6s\xc2\xdd\xd5*\xefu'
        tuple_0 = (float_0, float_0)
        str_0 = '4(H\nEJ(luFj%X&Qk@V'
        list_0 = [tuple_0, tuple_0, bytes_0]
        var_0 = module_0.sanitize_keys(list_0, tuple_0)
        var_1 = module_0.sanitize_keys(tuple_0, str_0)
        var_2 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'R|D}J;Wwic1qP'
        bytes_0 = b'KZ\xeb\xb2\x0fc\xe6"\xcd'
        str_1 = "=fo|E594m6j\n'0c1&"
        dict_0 = {str_0: bytes_0, str_1: str_1}
        str_2 = 'O1.SL>e<UBwc'
        tuple_0 = (str_2,)
        var_0 = module_0.remove_values(dict_0, tuple_0)
        bool_0 = True
        set_0 = {bool_0}
        dict_1 = {bool_0: bool_0}
        var_1 = module_0.remove_values(set_0, dict_1)
        var_2 = module_0.sanitize_keys(dict_1, dict_0, dict_1)
        list_0 = None
        var_3 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'R|D}J;Wic1qqP'
        bytes_0 = b'KZ\xeb\xb2\x0fc\xe6"\xcd'
        str_1 = "=fo|E594m6j\n'0c1&"
        dict_0 = {str_0: bytes_0, str_1: str_1}
        str_2 = 'O1.SL>e<UBwc'
        tuple_0 = (str_2,)
        var_0 = module_0.remove_values(dict_0, tuple_0)
        bool_0 = True
        list_0 = []
        var_1 = module_0.remove_values(dict_0, list_0)
        set_0 = {bool_0}
        int_0 = -231
        var_2 = module_0.remove_values(int_0, str_1)
        dict_1 = {bool_0: bool_0}
        var_3 = module_0.remove_values(set_0, dict_1)
        list_1 = [bool_0]
        var_4 = module_0.sanitize_keys(list_1, str_1)
        var_5 = module_0.set_fallbacks(dict_1, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'a'
        str_1 = 'type'
        str_2 = 'int'
        str_3 = {str_1: str_2}
        str_4 = {str_0: str_3}
        int_0 = 1
        int_1 = {str_0: int_0}
        var_0 = module_0.set_fallbacks(str_4, int_1)
        var_1 = set()
        str_5 = 'fallback'
        var_2 = lambda : int_1
        var_3 = (var_2,)
        var_4 = {str_1: str_2, str_5: var_3}
        var_5 = {str_0: var_4}
        var_6 = {}
        var_7 = module_0.set_fallbacks(var_5, var_6)
    except BaseException:
        pass