# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        str_0 = '/ZyQ[t \ni>'
        bytes_0 = b'M\x06#\x93>\xfe<\xbc\xe3\x01\x98:\xa0\x13#\nx\x10h'
        str_1 = '3kALmvKeha5/}Bb'
        tuple_0 = (str_1,)
        validation_0 = module_0.Validation(bytes_0, tuple_0)
        validation_1 = module_0.Validation(validation_0, validation_0)
        list_0 = [str_0, str_0, str_0, str_0]
        set_0 = set()
        validation_2 = module_0.Validation(list_0, set_0)
        var_0 = validation_2.__eq__(validation_1)
        str_2 = '\n        Method executes a reducer function\n        on each element of the array, resulting in a single output value.\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A, B) -> A\n        :returns: A\n        '
        float_0 = -1508.0
        dict_0 = {str_2: str_2, str_2: str_2, str_2: str_2, float_0: str_2}
        validation_3 = module_0.Validation(str_2, dict_0)
        var_1 = validation_3.bind(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -1231
        bytes_0 = b'\x0b'
        dict_0 = {}
        validation_0 = module_0.Validation(bytes_0, dict_0)
        var_0 = validation_0.__str__()
        set_0 = set()
        validation_1 = module_0.Validation(int_0, set_0)
        str_0 = '9Jo9\x0cJh~!c88O\t J+'
        int_1 = 1557
        validation_2 = module_0.Validation(str_0, int_1)
        var_1 = validation_2.map(validation_1)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -4702
        bool_0 = True
        validation_0 = module_0.Validation(int_0, bool_0)
        var_0 = validation_0.is_success()
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 220.4999
        list_0 = [float_0, float_0, float_0]
        tuple_0 = (float_0, list_0, list_0)
        bool_0 = False
        int_0 = 320
        validation_0 = module_0.Validation(bool_0, int_0)
        var_0 = validation_0.bind(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        bytes_0 = b'\xb5\xb4'
        validation_0 = module_0.Validation(bool_0, bytes_0)
        bool_1 = False
        tuple_0 = (bool_1,)
        var_0 = validation_0.ap(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 36
        list_0 = [int_0, int_0, int_0]
        bytes_0 = b'\xf0\xd6\\\xe4\xa9>2[3\x13\x9a'
        validation_0 = module_0.Validation(list_0, bytes_0)
        tuple_0 = ()
        validation_1 = module_0.Validation(validation_0, tuple_0)
        var_0 = validation_1.to_either()
        bool_0 = True
        int_1 = 17
        validation_2 = module_0.Validation(bool_0, int_1)
        set_0 = set()
        var_1 = validation_2.__eq__(set_0)
        var_2 = validation_2.to_either()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n        Create not empty maybe.\n\n        :param mapper: value to store in Maybe\n        :type mapper: Any\n        :returns: Maybe[Any]\n        '
        int_0 = 1128
        float_0 = 1397.56
        validation_0 = module_0.Validation(int_0, float_0)
        set_0 = set()
        var_0 = validation_0.__eq__(set_0)
        validation_1 = module_0.Validation(str_0, validation_0)
        var_1 = validation_1.to_either()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        '
        bool_0 = False
        dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, bool_0: bool_0}
        validation_0 = module_0.Validation(str_0, dict_0)
        var_0 = validation_0.to_lazy()
        var_1 = validation_0.to_box()
        var_2 = validation_0.__str__()
        var_3 = validation_0.is_fail()
        str_1 = "{#'XR!Vf\\!"
        var_4 = validation_0.__str__()
        var_5 = validation_0.to_maybe()
        validation_1 = module_0.Validation(validation_0, str_1)
        var_6 = validation_1.to_try()
        var_7 = validation_0.is_success()
        var_8 = validation_1.to_try()
        var_9 = validation_1.is_success()
        int_0 = None
        var_10 = validation_0.__eq__(int_0)
        var_11 = validation_0.is_fail()
        var_12 = validation_1.bind(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        list_0 = []
        validation_0 = module_0.Validation(str_0, list_0)
        var_0 = validation_0.to_maybe()
        var_1 = validation_0.is_success()
        var_2 = validation_0.is_success()
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        tuple_0 = (bool_0,)
        int_0 = -1624
        validation_0 = module_0.Validation(tuple_0, int_0)
        var_0 = validation_0.to_maybe()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '0!1\r'
        float_0 = -2673.97583
        str_1 = '\n        Take filterer function, when monad is successfully call filterer with monad value.\n        When filterer returns True method returns copy of monad, othercase\n        not successfully Try with previous value.\n\n        :params filterer: function to apply on monad value\n        :type filterer: Function(A) -> Boolean\n        :returns: Try with previous value\n        :rtype: Try[A]\n        '
        set_0 = {float_0}
        list_0 = [str_1]
        validation_0 = module_0.Validation(set_0, list_0)
        bytes_0 = b'\xc0\xed\xe1'
        tuple_0 = (float_0, str_1, validation_0, bytes_0)
        validation_1 = module_0.Validation(str_0, tuple_0)
        var_0 = validation_1.to_box()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n        Transform Either to Box.\n\n        :returns: Box monad with previous value\n        :rtype: Box[A]\n        '
        complex_0 = None
        str_1 = 'o"se J\n'
        float_0 = 566.9
        set_0 = {complex_0, str_0, str_1}
        validation_0 = module_0.Validation(set_0, float_0)
        var_0 = validation_0.to_try()
    except BaseException:
        pass