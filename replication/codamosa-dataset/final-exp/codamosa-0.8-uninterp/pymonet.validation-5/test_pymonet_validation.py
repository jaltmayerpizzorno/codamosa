# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    pass

def test_case_1():
    float_0 = 5.1
    str_0 = 'L"-^$oA> ?@S.6w/D'
    validation_0 = module_0.Validation(float_0, str_0)

def test_case_2():
    bool_0 = True
    int_0 = -2231
    bool_1 = False
    validation_0 = module_0.Validation(int_0, bool_1)
    var_0 = validation_0.__eq__(bool_0)

def test_case_3():
    str_0 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        '
    list_0 = [str_0, str_0, str_0]
    bytes_0 = b'\xf7\t\xa9'
    validation_0 = module_0.Validation(list_0, bytes_0)
    var_0 = validation_0.__str__()

def test_case_4():
    int_0 = 2400
    int_1 = None
    str_0 = '<\r7{-s`d&Vb8&v'
    bool_0 = False
    validation_0 = module_0.Validation(str_0, bool_0)
    var_0 = validation_0.to_lazy()
    list_0 = [int_0]
    str_1 = '2jn16rlmE2VZ?IL\r_&'
    tuple_0 = (int_1, list_0, str_1)
    validation_1 = module_0.Validation(int_0, tuple_0)
    var_1 = validation_1.is_fail()
    float_0 = None
    validation_2 = module_0.Validation(float_0, str_1)
    dict_0 = {str_1: list_0, int_0: int_1}
    var_2 = validation_1.to_either()
    var_3 = validation_2.__eq__(dict_0)

def test_case_5():
    complex_0 = None
    int_0 = 944
    str_0 = '8}>_}T[@;VbKuO3rG?=w'
    validation_0 = module_0.Validation(int_0, str_0)
    var_0 = validation_0.__eq__(complex_0)
    int_1 = 372
    float_0 = None
    validation_1 = module_0.Validation(int_1, float_0)
    var_1 = validation_1.to_lazy()

def test_case_6():
    str_0 = '\n        :param semigroup: other semigroup to concat\n        :type semigroup: Last[B]\n        :returns: new Last with last value\n        :rtype: Last[A]\n        '
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: bool_0, str_0: bool_0, bool_0: bool_0}
    validation_0 = module_0.Validation(str_0, dict_0)
    var_0 = validation_0.to_lazy()
    var_1 = validation_0.__str__()
    var_2 = validation_0.is_fail()
    str_1 = "{#'XR!Vf\\!"
    var_3 = validation_0.__str__()
    var_4 = validation_0.to_maybe()
    validation_1 = module_0.Validation(validation_0, str_1)
    var_5 = validation_1.to_try()
    var_6 = validation_1.to_try()
    var_7 = validation_1.is_success()
    var_8 = validation_0.is_fail()
    var_9 = validation_1.to_lazy()
    var_10 = validation_0.to_maybe()
    var_11 = validation_1.to_either()
    validation_2 = module_0.Validation(validation_0, bool_0)
    list_0 = [var_8]
    var_12 = validation_1.to_try()
    bool_1 = True
    validation_3 = module_0.Validation(bool_1, list_0)
    var_13 = validation_3.__eq__(validation_3)