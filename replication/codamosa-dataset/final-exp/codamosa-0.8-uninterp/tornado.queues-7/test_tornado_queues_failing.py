# Automatically generated by Pynguin.
import tornado.queues as module_0

def test_case_0():
    try:
        int_0 = 149
        queue_full_0 = module_0.QueueFull()
        queue_0 = module_0.Queue(int_0)
        queue_iterator_0 = module_0._QueueIterator(queue_full_0)
        awaitable_0 = queue_iterator_0.__anext__()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -970
        queue_0 = module_0.Queue(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        queue_0 = module_0.Queue()
        var_0 = queue_0.get_nowait()
    except BaseException:
        pass

def test_case_3():
    try:
        queue_0 = module_0.Queue()
        bool_0 = queue_0.empty()
        var_0 = None
        queue_1 = module_0.Queue()
        queue_1.put_nowait(var_0)
        queue_2 = module_0.Queue()
        str_0 = queue_2.__str__()
        str_1 = queue_2.__str__()
        list_0 = [str_0]
        queue_iterator_0 = module_0._QueueIterator(list_0)
        queue_3 = module_0.Queue()
        var_1 = queue_1.__aiter__()
        awaitable_0 = queue_iterator_0.__anext__()
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -2324.7
        int_0 = 545
        queue_0 = module_0.Queue(int_0)
        awaitable_0 = queue_0.get(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        queue_0 = module_0.Queue()
        queue_0.task_done()
    except BaseException:
        pass

def test_case_6():
    try:
        queue_0 = module_0.Queue()
        awaitable_0 = queue_0.join()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Ev,$\\)1CT#rcEDoHmd'
        lifo_queue_0 = module_0.LifoQueue()
        dict_0 = {str_0: lifo_queue_0, str_0: str_0}
        queue_0 = module_0.Queue()
        str_1 = queue_0.__repr__()
        queue_empty_0 = module_0.QueueEmpty(**dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        queue_0 = module_0.Queue()
        list_0 = [queue_0]
        queue_iterator_0 = module_0._QueueIterator(list_0)
        bool_0 = queue_0.full()
        var_0 = None
        future_0 = queue_0.put(var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        lifo_queue_0 = module_0.LifoQueue()
        list_0 = []
        queue_empty_0 = module_0.QueueEmpty(*list_0)
        int_0 = None
        queue_0 = module_0.Queue(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = None
        queue_0 = module_0.Queue()
        queue_0.put_nowait(var_0)
        str_0 = queue_0.__str__()
        str_1 = queue_0.__str__()
        list_0 = [str_0, queue_0]
        queue_0.task_done()
        queue_iterator_0 = module_0._QueueIterator(list_0)
        dict_0 = None
        queue_empty_0 = module_0.QueueEmpty(**dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = None
        queue_0 = module_0.Queue()
        queue_0.put_nowait(var_0)
        var_1 = queue_0.get_nowait()
        lifo_queue_0 = module_0.LifoQueue()
        queue_iterator_0 = module_0._QueueIterator(lifo_queue_0)
        queue_1 = module_0.Queue()
        str_0 = queue_1.__str__()
        queue_0.put_nowait(var_1)
        str_1 = queue_1.__str__()
        queue_0.task_done()
        queue_1.task_done()
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 2
        queue_0 = module_0.Queue(int_0)
        int_1 = 1
        queue_0.put_nowait(int_1)
        queue_0.put_nowait(int_0)
        int_2 = 3
        queue_0.put_nowait(int_2)
    except BaseException:
        pass