# Automatically generated by Pynguin.
import dataclasses_json.core as module_0
import uuid as module_1
import decimal as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = '=^NX\x0bWB4)(c9aO,7%%T'
    extended_encoder_0 = module_0._ExtendedEncoder()
    extended_encoder_1 = module_0._ExtendedEncoder(check_circular=str_0, sort_keys=str_0)
    int_0 = 262
    list_0 = []
    extended_encoder_2 = module_0._ExtendedEncoder(skipkeys=int_0, ensure_ascii=list_0)
    str_1 = 'V&+|9~mXL1\x0c'
    dict_0 = {str_0: extended_encoder_0, str_1: str_1, str_1: extended_encoder_1, str_1: str_1}
    var_0 = extended_encoder_0.default(dict_0)

def test_case_2():
    str_0 = '=^NX\x0bWB4)(c9aO,7%%T'
    extended_encoder_0 = module_0._ExtendedEncoder()
    extended_encoder_1 = module_0._ExtendedEncoder(check_circular=str_0, sort_keys=str_0)
    var_0 = extended_encoder_1.default(str_0)

def test_case_3():
    extended_encoder_0 = module_0._ExtendedEncoder()
    str_0 = 'd4d4c7c4-a0a4-4bbb-8a1c-a65432ecc0bb'
    u_u_i_d_0 = module_1.UUID(str_0)
    var_0 = extended_encoder_0.default(u_u_i_d_0)

def test_case_4():
    str_0 = '=^NX\x0bWB4)(c9aO,7%%T'
    extended_encoder_0 = module_0._ExtendedEncoder()
    extended_encoder_1 = module_0._ExtendedEncoder(check_circular=str_0, sort_keys=str_0)
    bytes_0 = b'\xa5\xfa\xc54\x16\xa4\xfd\t \xadL\xb7\xe7\xab\xd8\xe7\xc1)\x99'
    var_0 = extended_encoder_1.default(bytes_0)
    float_0 = -1016.2707
    dict_0 = {}
    tuple_0 = (float_0, dict_0)
    set_0 = set()
    extended_encoder_2 = module_0._ExtendedEncoder(skipkeys=extended_encoder_1, check_circular=tuple_0, allow_nan=set_0)
    decimal_0 = module_2.Decimal()
    var_1 = extended_encoder_2.default(decimal_0)