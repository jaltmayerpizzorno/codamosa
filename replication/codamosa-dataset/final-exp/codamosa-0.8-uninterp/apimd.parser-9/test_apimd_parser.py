# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    str_0 = '#l!H7"v`fPDE<:S'
    bool_0 = module_0.is_public_family(str_0)

def test_case_1():
    str_0 = ''
    str_1 = module_0.parent(str_0)
    str_2 = '#l!H7"v`fPDE<:S'
    bool_0 = module_0.is_public_family(str_2)

def test_case_2():
    str_0 = '\rgKc\nX2YN<Fi'
    bool_0 = module_0.is_magic(str_0)
    int_0 = 1
    dict_0 = {}
    parser_0 = module_0.Parser(int_0, bool_0, dict_0)
    parser_0.parse(str_0, str_0)
    str_1 = module_0.code(str_0)

def test_case_3():
    str_0 = '\rgKc\nX2 N<Fi'
    bool_0 = module_0.is_magic(str_0)
    str_1 = '--toc'
    str_2 = module_0.code(str_1)

def test_case_4():
    str_0 = '#l'
    str_1 = '8xZ}70oRf?03'
    str_2 = module_0.esc_underscore(str_1)
    str_3 = ':S'
    dict_0 = {str_0: str_0, str_0: str_3}
    parser_0 = module_0.Parser()
    parser_1 = module_0.Parser(dict_0)

def test_case_5():
    str_0 = ''
    str_1 = module_0.doctest(str_0)

def test_case_6():
    str_0 = '65TT'
    str_1 = module_0.doctest(str_0)

def test_case_7():
    expr_0 = module_1.expr()
    str_0 = module_0.const_type(expr_0)

def test_case_8():
    import_0 = module_1.Import()
    list_0 = [import_0, import_0, import_0]
    subscript_0 = module_1.Subscript(*list_0)
    str_0 = '0^\x0c:S9\\0T1cRA'
    dict_0 = {}
    resolver_0 = module_0.Resolver(str_0, dict_0, str_0)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)

def test_case_9():
    bytes_0 = b'\xeb\xac\x17\x92\x18\xd8\xcf\xabHM\xe4'
    list_0 = [bytes_0]
    attribute_0 = module_1.Attribute(*list_0)
    str_0 = '20'
    str_1 = ',C:oZT'
    dict_0 = {str_0: str_1, str_0: str_1}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Attribute(attribute_0)

def test_case_10():
    parser_0 = module_0.Parser()
    var_0 = parser_0.__post_init__()

def test_case_11():
    str_0 = '^5Ue@c\t2L'
    list_0 = []
    stmt_0 = None
    list_1 = [stmt_0, stmt_0, stmt_0]
    bool_0 = False
    dict_0 = {str_0: str_0}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_12():
    bool_0 = True
    dict_0 = {}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0, dict_0)
    var_0 = parser_0.__post_init__()
    str_0 = parser_0.compile()

def test_case_13():
    int_0 = 515
    str_0 = '):-uim]]zowI$U1d'
    str_1 = '.]'
    str_2 = ';\x0b^V%'
    str_3 = ''
    str_4 = '<'
    dict_0 = {str_0: str_1, str_2: str_0, str_3: str_2, str_4: str_1}
    parser_0 = module_0.Parser(int_0, dict_0, dict_0)
    str_5 = parser_0.compile()

def test_case_14():
    str_0 = '\rgKc\nX2 N<Fi'
    bool_0 = module_0.is_magic(str_0)
    str_1 = '--toc'
    int_0 = 1
    dict_0 = {}
    parser_0 = module_0.Parser(int_0, bool_0, dict_0)
    parser_0.parse(str_0, str_1)
    dict_1 = {}
    list_0 = [dict_1]
    import_0 = module_1.Import(*list_0)
    str_2 = module_0.parent(str_1)
    str_3 = parser_0.compile()

def test_case_15():
    str_0 = '\rgKc\nX2YN<Fi'
    bool_0 = module_0.is_magic(str_0)
    str_1 = '--toc'
    int_0 = 1
    dict_0 = {}
    parser_0 = module_0.Parser(int_0, bool_0, dict_0)
    parser_0.parse(str_0, str_1)
    import_from_0 = module_1.ImportFrom()
    str_2 = None
    parser_0.imports(str_2, import_from_0)

def test_case_16():
    str_0 = "C2j1'"
    list_0 = [str_0]
    arguments_0 = module_1.arguments(*list_0)
    int_0 = -5359
    str_1 = 'D)<u#EEU-D_}~  I\t '
    str_2 = '@staticmethod'
    str_3 = 'H'
    int_1 = 1
    str_4 = ''
    dict_0 = {str_3: str_0, str_2: str_4, str_3: str_0, str_1: str_2}
    dict_1 = {str_0: int_0, str_1: int_1, str_3: int_0, str_0: int_1}
    str_5 = ')5DFt\rl'
    str_6 = 'module'
    dict_2 = {str_0: dict_1, str_5: str_5, str_6: int_1, str_0: int_0}
    int_2 = -27
    dict_3 = {str_5: int_2, str_5: int_2, str_3: int_2}
    parser_0 = module_0.Parser(dict_3, dict_0, dict_0, dict_0)
    assign_0 = module_1.Assign(*list_0, **dict_2)
    parser_0.globals(str_3, assign_0)

def test_case_17():
    function_def_0 = module_1.FunctionDef()
    str_0 = 'FH'
    assign_0 = None
    list_0 = [assign_0, function_def_0]
    name_0 = module_1.Name(*list_0)
    str_1 = '\rg'
    str_2 = 'F&%9C#g \x0br;{B>+I'
    import_from_0 = module_1.ImportFrom()
    str_3 = '3PvupU=2'
    expr_0 = None
    str_4 = module_0.const_type(expr_0)
    str_5 = 'wh##8X`K#Wb-0F'
    dict_0 = {str_1: str_0, str_2: str_1, str_0: str_0, str_0: str_5}
    resolver_0 = module_0.Resolver(str_0, dict_0, str_3)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    str_6 = module_0.code(str_2)

def test_case_18():
    str_0 = '\rgKc\nX2 N<Fi'
    bool_0 = module_0.is_magic(str_0)
    str_1 = '--toc'
    int_0 = 1
    dict_0 = {}
    parser_0 = module_0.Parser(int_0, bool_0, dict_0)
    parser_0.parse(str_0, str_1)
    dict_1 = {}
    list_0 = [dict_1]
    import_0 = module_1.Import(*list_0)
    str_2 = 'JU'
    constant_0 = module_1.Constant(*list_0)
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)
    str_3 = 'H`$H)6j.rKQ9.{rDB_[r'
    str_4 = '?T'
    dict_2 = {str_3: str_0, str_4: str_4, str_2: str_2}
    str_5 = parser_0.compile()
    name_0 = module_1.Name(*list_0)
    str_6 = '9@eKQ'
    resolver_1 = module_0.Resolver(str_6, dict_2)
    a_s_t_1 = resolver_1.visit_Name(name_0)
    import_from_0 = module_1.ImportFrom()
    parser_0.imports(str_1, import_from_0)

def test_case_19():
    str_0 = 'f^5Ue@c\t2L'
    list_0 = [str_0]
    constant_0 = module_1.Constant(*list_0)
    str_1 = "EQO^'?|v\x0ct#S74\nG?^q"
    str_2 = None
    str_3 = ';cZ'
    str_4 = '\re\x0bwwj\x0cl$WCD/E\t4b'
    dict_0 = {str_1: str_0, str_3: str_2, str_0: str_1, str_3: str_4}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)
    bool_0 = False
    dict_1 = {str_0: str_0}
    parser_0 = module_0.Parser(bool_0, dict_1, dict_1)

def test_case_20():
    str_0 = '\rgKc\nX2 N<Fi'
    bool_0 = module_0.is_magic(str_0)
    str_1 = '--toc'
    int_0 = 1
    dict_0 = {}
    parser_0 = module_0.Parser(int_0, bool_0, dict_0)
    parser_0.parse(str_0, str_1)
    dict_1 = {}
    list_0 = [dict_1]
    import_0 = module_1.Import(*list_0)
    str_2 = 'JU'
    int_1 = 576
    dict_2 = {str_2: int_1}
    str_3 = 'H`$H)6j.rKQ9.{rDB_[r'
    str_4 = '?T'
    dict_3 = {str_3: str_0, str_4: str_4, str_2: str_2}
    parser_1 = module_0.Parser(bool_0, dict_2, dict_0, dict_3)
    str_5 = parser_0.compile()
    name_0 = module_1.Name(*list_0)
    str_6 = '9@eKQ'
    resolver_0 = module_0.Resolver(str_6, dict_3)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    import_from_0 = module_1.ImportFrom()
    parser_0.imports(str_1, import_from_0)

def test_case_21():
    str_0 = '\rgKc\nX2 N<Fi'
    bool_0 = module_0.is_magic(str_0)
    str_1 = '--toc'
    dict_0 = {}
    dict_1 = {}
    list_0 = [dict_1]
    import_0 = module_1.Import(*list_0)
    int_0 = 576
    dict_2 = {str_1: int_0}
    parser_0 = module_0.Parser(bool_0, dict_2, dict_0, dict_0)
    ann_assign_0 = module_1.AnnAssign(*list_0)
    parser_0.globals(str_0, ann_assign_0)

def test_case_22():
    str_0 = ''
    list_0 = [str_0]
    arguments_0 = module_1.arguments(*list_0)
    str_1 = 'l|h?(^&i'
    str_2 = 'D)<u#EEU-D_}~  I\t '
    bool_0 = module_0.is_public_family(str_2)
    str_3 = '@staticmethod'
    bool_1 = module_0.is_magic(str_3)
    str_4 = module_0.code(str_2)
    str_5 = module_0.esc_underscore(str_3)
    list_1 = []
    stmt_0 = None
    list_2 = [stmt_0, stmt_0]
    dict_0 = {str_1: str_0, str_1: str_1, str_3: str_0, str_0: str_1, str_2: str_1}
    str_6 = 'qK\\p\r[f\t@Hqb'
    name_0 = module_1.Name(*list_0)
    resolver_0 = module_0.Resolver(str_1, dict_0, str_1)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    set_0 = {str_2, str_6}
    dict_1 = {str_2: set_0}
    parser_0 = module_0.Parser(dict_0, dict_0, dict_1)
    parser_0.class_api(str_2, str_2, list_1, list_2)
    str_7 = module_0.doctest(str_6)
    sequence_0 = None
    iterator_0 = module_0.walk_body(sequence_0)

def test_case_23():
    str_0 = "'IsFs>Ncwzj["
    module_x_var_0 = None
    str_1 = None
    str_2 = None
    str_3 = 'B`#Q\t\\'
    set_0 = {str_1, str_2, str_1, str_3}
    set_1 = set()
    dict_0 = {str_1: set_0, str_1: set_1}
    parser_0 = module_0.Parser(dict_0)
    parser_0.load_docstring(str_0, module_x_var_0)

def test_case_24():
    str_0 = '\rgKc\nX2 N<Fi'
    bool_0 = module_0.is_magic(str_0)
    str_1 = '--toc'
    dict_0 = {}
    dict_1 = {}
    list_0 = [dict_1]
    import_0 = module_1.Import(*list_0)
    str_2 = 'JU'
    int_0 = 576
    dict_2 = {str_2: int_0}
    str_3 = 'H`$H)6j.rKQ9.{rDB_[r'
    str_4 = 'L'
    str_5 = 'EDk'
    dict_3 = {str_3: str_0, str_2: str_2, str_4: str_5}
    parser_0 = module_0.Parser(bool_0, dict_2, dict_0, dict_3)
    parser_0.imports(str_1, import_0)

def test_case_25():
    str_0 = ''
    list_0 = [str_0]
    arguments_0 = module_1.arguments(*list_0)
    str_1 = 'l|h?(^&i'
    int_0 = -5359
    str_2 = 'D)<u#EEU-D_}~  I\t '
    bool_0 = module_0.is_public_family(str_2)
    str_3 = '@staticmethod'
    bool_1 = module_0.is_magic(str_3)
    str_4 = module_0.code(str_2)
    str_5 = module_0.esc_underscore(str_3)
    int_1 = 1
    list_1 = []
    stmt_0 = None
    list_2 = [stmt_0, stmt_0]
    str_6 = ''
    dict_0 = {str_1: str_0, str_1: str_6, str_3: str_0, str_0: str_6, str_2: str_1}
    str_7 = 'qK\\p\r[f\t@Hqb'
    name_0 = module_1.Name(*list_0)
    resolver_0 = module_0.Resolver(str_6, dict_0, str_6)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    dict_1 = {}
    parser_0 = module_0.Parser(dict_0, dict_0, dict_1)
    parser_0.class_api(str_2, str_2, list_1, list_2)
    dict_2 = {str_1: int_0, str_2: int_1, str_3: int_0, str_0: int_1}
    str_8 = module_0.doctest(str_7)
    dict_3 = {str_0: dict_2, str_4: str_4, str_3: int_1, str_0: int_0}
    parser_1 = module_0.Parser(dict_1)
    ann_assign_0 = module_1.AnnAssign(*list_0)
    parser_1.globals(str_1, ann_assign_0)
    str_9 = "<t>?!'ye[tE&n\x0bu"
    import_from_0 = module_1.ImportFrom(**dict_3)
    parser_0.imports(str_9, import_from_0)

def test_case_26():
    str_0 = 'l|h?(^&i'
    str_1 = 'D)<u#EEU-D_}~  I\t '
    str_2 = '\x0c'
    bool_0 = True
    dict_0 = {}
    dict_1 = {}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_1, dict_1, dict_1)
    str_3 = parser_0.compile()
    list_0 = []
    stmt_0 = None
    list_1 = [list_0, list_0]
    import_from_0 = module_1.ImportFrom(*list_1)
    parser_1 = module_0.Parser()
    parser_1.imports(str_2, import_from_0)
    list_2 = [stmt_0, stmt_0]
    str_4 = ''
    str_5 = None
    dict_2 = {str_2: str_5, str_0: str_4, str_5: str_5, str_1: str_0}
    str_6 = '$7$6+~F6Lkr'
    str_7 = 'qK\\p\r[f\t@HqUb'
    set_0 = {str_1, str_7}
    dict_3 = {str_6: set_0, str_2: set_0}
    parser_2 = module_0.Parser(dict_2, dict_2, dict_3)
    parser_2.class_api(str_1, str_1, list_0, list_2)
    parser_3 = module_0.Parser(dict_2, dict_2, dict_3, dict_2, dict_2)
    str_8 = parser_2.compile()
    str_9 = parser_2.compile()
    var_0 = parser_2.__repr__()
    str_10 = module_0.code(str_4)

def test_case_27():
    str_0 = 'os.path'
    bool_0 = module_0.is_public_family(str_0)
    str_1 = 'pathlib.Path'
    bool_1 = module_0.is_public_family(str_1)
    str_2 = 'os._Environ'
    bool_2 = module_0.is_public_family(str_2)
    str_3 = 'os.__parse'
    bool_3 = module_0.is_public_family(str_3)
    str_4 = 'os.'
    bool_4 = module_0.is_public_family(str_4)
    str_5 = '_io.TextIOBase'
    bool_5 = module_0.is_public_family(str_5)
    str_6 = '_io._IOBase'
    bool_6 = module_0.is_public_family(str_6)

def test_case_28():
    str_0 = 'os.path'
    bool_0 = module_0.is_public_family(str_0)
    str_1 = 'pathlib.Pa}h'
    str_2 = 'D}%\t<?V#JyszA5V,'
    str_3 = 'Z|/('
    module_x_var_0 = None
    bool_1 = True
    str_4 = '?1P3N[7^/\x0b:^'
    dict_0 = {str_3: str_0, str_4: str_1}
    str_5 = ' ]nh#r$LrDYeo=XH'
    set_0 = set()
    set_1 = set()
    dict_1 = {str_3: set_1, str_5: set_0, str_2: set_1}
    parser_0 = module_0.Parser(bool_1, dict_0, dict_1, dict_0, dict_0)
    parser_0.load_docstring(str_3, module_x_var_0)