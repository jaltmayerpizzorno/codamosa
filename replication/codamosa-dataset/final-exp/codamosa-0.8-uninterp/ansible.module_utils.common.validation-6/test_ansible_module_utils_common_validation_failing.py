# Automatically generated by Pynguin.
import ansible.module_utils.common.validation as module_0

def test_case_0():
    try:
        bytes_0 = b'\xbc\xc2\x1f\xeb\xa9\x06\xef\xd3\xa1U\xb6\xbe\x83-'
        list_0 = [bytes_0]
        var_0 = module_0.check_required_one_of(bytes_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'4\xbf\xc7|S3\xd9\x02'
        var_0 = module_0.safe_eval(bytes_0)
        str_0 = '8}z;;4WQ=UwL+'
        dict_0 = {}
        int_0 = None
        list_0 = []
        var_1 = module_0.check_required_by(int_0, dict_0, list_0)
        bool_0 = False
        var_2 = module_0.check_required_arguments(dict_0, dict_0)
        int_1 = None
        var_3 = module_0.check_required_if(int_1, bool_0, bool_0)
        bytes_1 = b'S\x1b\xe9\xed\xa6\xbdXV\xbd\x1e\x9b\xa8"\x9d\xde\xd1\xcf\x01\xf2\x87'
        var_4 = module_0.check_required_one_of(str_0, bytes_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "o w=Gv6kAt'Vt[\nVt\x0c%"
        var_0 = module_0.check_required_if(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{actgo}:eooting serve...'
        var_0 = module_0.check_type_path(str_0)
        int_0 = 257
        var_1 = module_0.check_type_float(int_0)
        var_2 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = None
        var_0 = module_0.check_type_list(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 2462
        var_0 = module_0.check_type_dict(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Hr'
        var_0 = module_0.check_type_bool(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        var_0 = module_0.check_type_bool(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\x0b^mX\r1`srnw\r0J'
        var_0 = module_0.check_type_int(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xfe0c\xe8\xedA\x16\xc5\xb2\x0f\x0e?\xe2'
        var_0 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xfd4\xd5\xc9\xbe\xaa\xbd\xfc\xe1\x13b'
        var_0 = module_0.check_type_bytes(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        var_0 = module_0.check_type_jsonarg(bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        int_0 = 14
        set_0 = {int_0}
        var_0 = module_0.check_required_by(dict_0, set_0)
        float_0 = -800.0
        var_1 = module_0.check_required_together(set_0, float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = None
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        var_0 = module_0.check_required_by(dict_0, dict_0)
        str_0 = ']!Rnu'
        dict_1 = {str_0: var_0}
        var_1 = module_0.check_type_dict(dict_1)
        int_0 = 258
        var_2 = module_0.check_type_bool(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xe1\xc4\x98Ln\xac\x18\x0e\x9a'
        var_0 = module_0.check_type_int(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '"str"=str,"str2"=str2,"str3"=str3'
        var_0 = module_0.check_type_dict(str_0)
        str_1 = "{'json_str':'json_str'}"
        var_1 = module_0.check_type_dict(str_1)
        bytes_0 = None
        var_2 = module_0.check_type_float(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = True
        var_0 = dict(required=bool_0)
        var_1 = dict(parameter1=var_0, parameter2=var_0)
        str_0 = 'test'
        var_2 = dict(parameter2=str_0)
        var_3 = module_0.check_required_arguments(var_1, var_2)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = 0.1
        str_0 = 'N:S-u\n9h1\\.E\n ]-'
        var_0 = module_0.check_type_float(float_0)
        str_1 = 'qyppj<$,['
        float_1 = -1051.0
        var_1 = module_0.check_required_together(str_0, str_1, float_1)
        set_0 = set()
        var_2 = module_0.check_missing_parameters(float_0, set_0)
        var_3 = module_0.check_type_dict(float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        var_0 = module_0.check_type_bits(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 1
        list_0 = [int_0]
        set_0 = {int_0}
        var_0 = module_0.check_missing_parameters(list_0, set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'chdir %s must be an absolute path for a Unix-aware remote node'
        bytes_0 = b'\x95\xd7A\xfb\xcc\x93\xc21\xf1k\x1b\x7ft'
        var_0 = module_0.check_required_one_of(bytes_0, bytes_0)
        var_1 = module_0.check_type_bytes(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bytes_0 = b' \x05\x88\xac\xeaC\xc4@\xd0'
        dict_0 = {}
        var_0 = module_0.safe_eval(dict_0)
        set_0 = {bytes_0}
        var_1 = module_0.check_type_str(set_0, dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = ' \x0b:Xk\rb6-L,Yc9GqD'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bool_0 = True
        var_0 = dict(required=bool_0)
        var_1 = dict(parameter1=var_0, parameter2=var_0)
        tuple_0 = ()
        list_0 = []
        str_0 = 'D:Y7L$Xe]N8R'
        var_2 = module_0.safe_eval(tuple_0, list_0, str_0)
        str_1 = 'test'
        var_3 = dict(parameter2=str_1)
        var_4 = module_0.check_required_arguments(list_0, var_3)
    except BaseException:
        pass

def test_case_24():
    try:
        set_0 = None
        str_0 = 'UrGo6YY(s'
        var_0 = module_0.check_required_together(set_0, str_0)
        str_1 = '{actgo}:eooting serve...'
        var_1 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = {}
        var_0 = module_0.check_required_arguments(dict_0, dict_0)
        str_0 = 'wM(!I'
        str_1 = '\x0c'
        var_1 = module_0.check_required_one_of(str_1, str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = -663
        int_1 = None
        dict_0 = {}
        bytes_0 = b'Z`<\x14\xa7\x9b\x7f\xe1+\xff\xa9\xbd\x7f\xf7\xb3W\x1d'
        int_2 = 138
        str_0 = '%6fGj\reu220T'
        tuple_0 = (int_2, dict_0, str_0)
        var_0 = module_0.check_type_raw(tuple_0)
        var_1 = module_0.check_required_together(dict_0, bytes_0)
        str_1 = ''
        tuple_1 = (int_1, int_0)
        var_2 = module_0.check_required_arguments(int_1, tuple_1)
        var_3 = module_0.check_type_dict(str_1)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b'k\xe8'
        list_0 = [bytes_0, bytes_0, bytes_0]
        tuple_0 = (list_0,)
        int_0 = -2150
        var_0 = module_0.check_required_if(tuple_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '8}z;;4WQ=QUwL+'
        str_1 = '.Fq)'
        str_2 = 'W'
        dict_0 = {str_0: str_1}
        tuple_0 = (str_1, str_2, dict_0)
        list_0 = [dict_0]
        var_0 = module_0.check_required_if(tuple_0, list_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = "o w=Gv6kAt'Vt[\nVt\x0c%"
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = '{actio}:eooting server...'
        var_0 = module_0.check_type_dict(str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        tuple_0 = None
        str_0 = '\rE\x0b/IGjK[?'
        list_0 = [tuple_0, str_0]
        str_1 = '8'
        var_0 = module_0.check_required_one_of(str_0, list_0, str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'state'
        str_1 = 'pot'
        str_2 = [str_1, str_0]
        var_0 = module_0.check_required_together(str_2, str_1)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'L-)"]@s1\r9@ZZ\tL+1**7'
        str_1 = {str_0: str_0}
        str_2 = 'key'
        str_3 = {str_2: str_1}
        var_0 = module_0.check_required_by(str_3, str_3)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'state'
        str_1 = 'present'
        bool_0 = True
        var_0 = [str_0, str_1, str_0, bool_0]
        var_1 = [var_0, str_0]
        str_2 = {str_0: str_1, str_1: str_1}
        var_2 = module_0.check_required_if(var_1, str_2)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'state'
        str_1 = 'present'
        str_2 = (str_0,)
        bool_0 = True
        var_0 = [str_0, str_1, str_2, bool_0]
        var_1 = [var_0, str_0]
        str_3 = '/'
        str_4 = {str_0: str_1, str_2: str_3}
        var_2 = module_0.check_required_if(var_1, str_4)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = 'c'
        int_0 = 1
        str_3 = [str_0, str_1, str_2]
        str_4 = [str_3]
        int_1 = 3
        int_2 = {str_0: int_0, str_1: int_1, str_2: int_1}
        var_0 = module_0.check_mutually_exclusive(str_4, int_2)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = 'L-)"]@s1\r9@ZZ\tL+1**7'
        str_1 = 'ZM!1'
        int_0 = 627
        var_0 = module_0.check_type_int(int_0)
        list_0 = []
        str_2 = [str_0]
        str_3 = {str_0: str_2}
        var_1 = module_0.check_mutually_exclusive(str_2, list_0)
        var_2 = module_0.check_required_by(str_3, str_3)
        str_4 = 'key'
        str_5 = {str_4: str_1}
        var_3 = module_0.check_required_by(str_5, str_5)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'reen'
        str_1 = (str_0,)
        bool_0 = False
        var_0 = module_0.safe_eval(bool_0)
        var_1 = [str_1, str_0, str_1, bool_0]
        var_2 = [var_1, var_1]
        str_2 = {str_1: str_0}
        var_3 = module_0.check_required_if(var_2, str_2)
    except BaseException:
        pass

def test_case_39():
    try:
        var_0 = dict()
        str_0 = 'param1'
        str_1 = 'p+aram2'
        str_2 = [str_0, str_1, str_0, str_1]
        var_1 = module_0.check_missing_parameters(var_0, str_2)
    except BaseException:
        pass

def test_case_40():
    try:
        str_0 = '"str"=str,"str2"=str ,"str3"=str3'
        var_0 = module_0.check_type_dict(str_0)
        str_1 = "{'json_strS:Xjsn_str'}"
        var_1 = module_0.check_type_dict(str_1)
        var_2 = module_0.check_type_jsonarg(str_1)
        str_2 = '[yT?lX8Mbya;E$)o*('
        var_3 = module_0.check_type_bytes(str_2)
    except BaseException:
        pass

def test_case_41():
    try:
        str_0 = 'vpc_id'
        str_1 = 'vpc_security_group_ids'
        str_2 = 'vpc_subnet_id'
        str_3 = 'vpc-29dc1548'
        str_4 = '868'
        str_5 = 'subnet-2b7e295f'
        str_6 = {str_0: str_3, str_1: str_4, str_2: str_5}
        str_7 = [str_0, str_1]
        str_8 = [str_0, str_2]
        str_9 = [str_7, str_8]
        str_10 = 'vpc'
        str_11 = [str_10]
        var_0 = module_0.check_required_together(str_9, str_6, str_11)
        str_12 = {str_1: str_4}
        var_1 = module_0.check_required_together(str_9, str_12, str_11)
    except BaseException:
        pass

def test_case_42():
    try:
        int_0 = 1
        var_0 = dict(param1=int_0, param2=int_0)
        str_0 = '-<e(U\n8^R[]a'
        var_1 = module_0.check_mutually_exclusive(str_0, var_0)
        str_1 = ''
        str_2 = 'param2'
        str_3 = [str_1, str_2]
        str_4 = [str_3]
        int_1 = 1
        int_2 = 2
        int_3 = 3
        var_2 = dict(param1=int_1, param2=int_2, param3=int_3)
        var_3 = module_0.check_mutually_exclusive(str_4, var_2)
        int_4 = 3
        var_4 = dict(param1=str_1, param2=str_2, param3=int_4)
        str_5 = 'param1'
        str_6 = 'param2'
        str_7 = [str_5, str_6]
        str_8 = [str_7]
        str_9 = 'key1'
        str_10 = 'key2'
        str_11 = [str_9, str_10]
        var_5 = module_0.check_mutually_exclusive(str_8, var_4, str_11)
    except BaseException:
        pass