# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        bool_0 = True
        int_0 = -251
        var_0 = module_0.unique(bool_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'Start module (%s)'
        dict_0 = {str_0: str_0}
        var_0 = module_0.symmetric_difference(str_0, dict_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = None
        str_0 = "v2dd'L@-\\e_0c "
        var_0 = module_0.intersect(tuple_0, tuple_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        bytes_0 = b'd'
        bytes_1 = b'D@\x01\x8b\xd8\xdem\xd6Q\x19'
        var_0 = module_0.max(bytes_0, bytes_1)
        int_0 = 1
        list_0 = [int_0]
        dict_0 = {str_0: int_0}
        var_1 = module_0.min(list_0, dict_0)
        bool_0 = True
        var_2 = module_0.logarithm(bool_0)
        str_1 = 'John'
        var_3 = {str_0: int_0, str_0: str_1}
        var_4 = {str_1: var_3, str_0: var_3}
        str_2 = 'xnn,/Q\t64lA%'
        var_5 = module_0.difference(list_0, str_2, str_0)
        str_3 = '\rr3diU%$}lA`^'
        var_6 = module_0.unique(str_3, str_1)
        var_7 = module_0.rekey_on_member(var_4, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 10
        bytes_0 = b'\xce2'
        var_0 = module_0.min(int_0, bytes_0)
        str_0 = 'fXRO)4{-cW(.-'
        var_1 = module_0.union(str_0, str_0, str_0)
        set_0 = {var_0, var_0}
        bool_0 = True
        var_2 = module_0.power(set_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = None
        dict_0 = None
        var_0 = module_0.min(bytes_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        var_0 = module_0.logarithm(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '4\x0c'
        filter_module_0 = None
        var_0 = module_0.power(str_0, filter_module_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = None
        var_0 = module_0.inversepower(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'91\x9b\xc6H\xca\x1f\x90Ba\x02\xade\xa5\r'
        list_0 = [bytes_0]
        bool_0 = True
        list_1 = [list_0]
        var_0 = module_0.unique(bool_0, list_1, bytes_0)
        var_1 = module_0.inversepower(list_1, list_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '1Q}Ul|Z-g}5kMp#'
        dict_0 = {str_0: str_0}
        var_0 = module_0.human_readable(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tuple_0 = None
        var_0 = module_0.human_to_bytes(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ' Unregisyer I file object from being monitored. '
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        tuple_0 = (dict_0, str_0, str_0)
        var_0 = module_0.rekey_on_member(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\n    name: host_group_vars\n    version_added: "2.4"\n    short_description: In charge of loading group_vars and host_vars\n    requirements:\n        - whitelist in configuration\n    description:\n        - Loads YAML vars into corresponding groups/hosts in group_vars/ and host_vars/ directories.\n        - Files are restricted by extension to one of .yaml, .json, .yml or no extension.\n        - Hidden (starting with \'.\') and backup (ending with \'~\') files and directories are ignored.\n        - Only applies to inventory sources that are existing paths.\n        - Starting in 2.10, this plugin requires whitelisting and is whitelisted by default.\n    options:\n      stage:\n        ini:\n          - key: stage\n            section: vars_host_group_vars\n        env:\n          - name: ANSIBLE_VARS_PLUGIN_STAGE\n      _valid_extensions:\n        default: [".yml", ".yaml", ".json"]\n        description:\n          - "Check all of these extensions when looking for \'variable\' files which should be YAML or JSON or vaulted versions of these."\n          - \'This affects vars_files, include_vars, inventory and vars plugins among others.\'\n        env:\n          - name: ANSIBLE_YAML_FILENAME_EXT\n        ini:\n          - key: yaml_valid_extensions\n            section: defaults\n        type: list\n    extends_documentation_fragment:\n      - vars_plugin_staging\n'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.rekey_on_member(dict_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 10
        var_0 = module_0.logarithm(int_0)
        int_1 = 1
        var_1 = module_0.logarithm(int_0)
        var_2 = module_0.logarithm(int_0, int_0)
        int_2 = 2
        var_3 = module_0.logarithm(int_1, int_2)
        bytes_0 = b'\x8e\xc7\xca\xc2\x11\x83\nN\xa1j\x1f\x84\xd2\x00\xcd\xdf'
        list_0 = []
        bytes_1 = b' \xb3'
        dict_0 = {}
        tuple_0 = (bytes_1, dict_0)
        var_4 = module_0.rekey_on_member(bytes_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 2.718281828459045
        str_0 = 'YWXg'
        var_0 = module_0.rekey_on_member(float_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        int_0 = -251
        dict_0 = {bool_0: int_0, int_0: int_0}
        list_0 = [bool_0, dict_0]
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        bytes_0 = b''
        var_1 = module_0.unique(list_0, dict_0, bytes_0, dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        bool_0 = True
        set_0 = set()
        str_0 = 'I'
        var_0 = module_0.difference(bool_0, set_0, str_0)
        list_1 = [list_0, list_0, dict_0]
        str_1 = '\\2\n|'
        var_1 = module_0.symmetric_difference(list_1, str_1, list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '6'
        str_1 = 'Start module (%s)'
        dict_0 = {str_1: str_0}
        str_2 = '-=u8^'
        var_0 = module_0.symmetric_difference(str_0, dict_0, str_2)
    except BaseException:
        pass

def test_case_19():
    try:
        tuple_0 = ()
        set_0 = {tuple_0}
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.difference(tuple_0, set_0, list_0)
        str_0 = '\n    name: host_group_vars\n    version_added: "2.4"\n    short_description: In charge of loading group_vars and host_vars\n    requirements:\n        - whitelist in configuration\n    description:\n        - Loads YAML vars into corresponding groups/hosts in group_vars/ and host_vars/ directories.\n        - Files are restricted by extension to one of .yaml, .json, .yml or no extension.\n        - Hidden (starting with \'.\') and backup (ending with \'~\') files and directories are ignored.\n        - Only applies to inventory sources that are existing paths.\n        - Starting in 2.10, this plugin requires whitelisting and is whitelisted by default.\n    options:\n      stage:\n        ini:\n          - key: stage\n            section: vars_host_group_vars\n        env:\n          - name: ANSIBLE_VARS_PLUGIN_STAGE\n      _valid_extensions:\n        default: [".yml", ".yaml", ".json"]\n        description:\n          - "Check all of these extensions when looking for \'variable\' files which should be YAML or JSON or vaulted versions of these."\n          - \'This affects vars_files, include_vars, inventory and vars plugins among others.\'\n        env:\n          - name: ANSIBLE_YAML_FILENAME_EXT\n        ini:\n          - key: yaml_valid_extensions\n            section: defaults\n        type: list\n    extends_documentation_fragment:\n      - vars_plugin_staging\n'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_1 = module_0.rekey_on_member(dict_0, dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'9\xd9\xfe'
        set_0 = {bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0}
        list_0 = [set_0]
        var_0 = module_0.symmetric_difference(set_0, list_0, list_0)
        str_0 = ')\x0bzp`]43{2'
        bool_0 = False
        var_1 = module_0.rekey_on_member(str_0, bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '\n    name: host_group_vars\n    version_added: "2.4"\n    short_description: In charge of loading group_vars and host_vars\n    requirements:\n        - whitelist in configuration\n    description:\n        - Loads YAML vars into corresponding groups/hosts in group_vars/ and host_vars/ directories.\n        - Files are restricted by extension to one of .yaml, .json, .yml or no extension.\n        - Hidden (starting with \'.\') and backup (ending with \'~\') files and directories are ignored.\n        - Only applies to inventory sources that are existing paths.\n        - Starting in 2.10, this plugin requires whitelisting and is whitelisted by default.\n    options:\n      stage:\n        ini:\n          - key: stage\n            section: vars_host_group_vars\n        env:\n          - name: ANSIBLE_VARS_PLUGIN_STAGE\n      _valid_extensions:\n        default: [".yml", ".yaml", ".json"]\n        description:\n          - "Check all of these extensions when looking for \'variable\' files which should be YAML or JSON or vaulted versions of these."\n          - \'This affects vars_files, include_vars, inventory and vars plugins among others.\'\n        env:\n          - name: ANSIBLE_YAML_FILENAME_EXT\n        ini:\n          - key: yaml_valid_extensions\n            section: defaults\n        type: list\n    extends_documentation_fragment:\n      - vars_plugin_staging\n'
        int_0 = 865
        str_1 = 'jsPAI5/~-IUX'
        list_0 = [str_0, str_0, str_0]
        var_0 = module_0.unique(str_1, list_0)
        int_1 = None
        str_2 = 'child_pid'
        dict_0 = {str_0: str_1, str_0: int_0, str_2: str_1}
        var_1 = module_0.rekey_on_member(int_1, dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bool_0 = False
        int_0 = -251
        dict_0 = {bool_0: int_0, int_0: int_0}
        list_0 = [bool_0, dict_0]
        bytes_0 = b''
        var_0 = module_0.unique(list_0, dict_0, bytes_0, dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\x0c"\xf77hI{'
        set_0 = {bytes_0}
        list_0 = [bytes_0, bytes_0, bytes_0, set_0]
        int_0 = -786
        bool_0 = False
        str_0 = '2gFr!T @j^zu\tOKM(\x0cp;'
        var_0 = module_0.unique(list_0, int_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = ''
        int_0 = 1
        str_1 = 'John'
        var_0 = {str_0: int_0}
        int_1 = 2
        var_1 = {str_1: int_1, str_1: str_1}
        var_2 = {str_1: var_0, str_0: var_1}
        var_3 = module_0.rekey_on_member(var_2, str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        bool_0 = False
        var_0 = module_0.logarithm(bool_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '}\rwKFl'
        bytes_0 = b'\x95'
        list_0 = [str_0, bytes_0]
        var_0 = module_0.human_readable(str_0, list_0, list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = ';2Zu'
        bool_0 = False
        var_0 = module_0.inversepower(str_0, bool_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 1266
        float_0 = 3647.0
        set_0 = {float_0}
        var_0 = module_0.human_to_bytes(int_0, set_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '>3G'
        int_0 = 805
        var_0 = {str_0: int_0}
        var_1 = {str_0: var_0, int_0: var_0}
        var_2 = module_0.rekey_on_member(var_1, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = -1044
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_0 = filter_module_0.filters()
        float_0 = 2903.951994
        var_1 = module_0.power(int_0, float_0)
    except BaseException:
        pass

def test_case_31():
    try:
        float_0 = 3561.1
        float_1 = -3066.768924
        str_0 = ''
        str_1 = '\n---\nmodule: group_by\nshort_description: Create Ansible groups based on facts\nextends_documentation_fragment:\n  - action_common_attributes\n  - action_common_attributes.conn\n  - action_common_attributes.flow\n  - action_core\ndescription:\n- Use facts to create ad-hoc groups that can be used later in a playbook.\n- This module is also supported for Windows targets.\nversion_added: "0.9"\noptions:\n  key:\n    description:\n    - The variables whose values will be used as groups.\n    type: str\n    required: true\n  parents:\n    description:\n    - The list of the parent groups.\n    type: list\n    default: all\n    version_added: "2.4"\nattributes:\n    action:\n      support: full\n    become:\n      support: none\n    bypass_host_loop:\n      support: full\n    bypass_task_loop:\n      support: none\n    check_mode:\n      details: While this makes no changes to target systems the \'in memory\' inventory will still be altered\n      support: partial\n    core:\n      details: While parts of this action are implemented in core, other parts are still available as normal plugins and can be partially overridden\n      support: partial\n    connection:\n        support: none\n    delegation:\n        support: none\n    diff_mode:\n      support: none\n    platform:\n        platforms: all\nnotes:\n- Spaces in group names are converted to dashes \'-\'.\n- Though this module does not change the remote host,\n  we do provide \'changed\' status as it can be useful\n  for those trying to track inventory changes.\nseealso:\n- module: ansible.builtin.add_host\nauthor:\n- Jeroen Hoekx (@jhoekx)\n'
        float_2 = None
        dict_0 = {str_0: float_0, str_0: float_0, str_1: str_0, str_0: float_2}
        dict_1 = {float_0: float_0, float_0: float_1, float_0: dict_0}
        list_0 = [str_0, float_0]
        list_1 = [str_0, str_0, dict_1, dict_1]
        var_0 = module_0.symmetric_difference(dict_1, list_0, list_1)
        str_2 = 'repoquery is required to use list= with this module. Please install the yum-utils package.'
        list_2 = [str_2, str_2, str_2, str_2]
        tuple_0 = None
        bool_0 = False
        var_1 = module_0.union(list_2, tuple_0, bool_0)
    except BaseException:
        pass