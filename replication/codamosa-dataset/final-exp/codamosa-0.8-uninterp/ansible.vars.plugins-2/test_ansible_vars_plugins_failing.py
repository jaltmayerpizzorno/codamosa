# Automatically generated by Pynguin.
import ansible.vars.plugins as module_0
import ansible.inventory.host as module_1

def test_case_0():
    try:
        var_0 = None
        var_1 = module_0.get_vars_from_path(var_0, var_0, var_0, var_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        float_0 = 1860.264351
        dict_0 = {bool_0: bool_0, float_0: float_0, float_0: float_0}
        var_0 = module_0.get_plugin_vars(bool_0, float_0, bool_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        list_0 = [dict_0, dict_0, dict_0]
        str_0 = 'y)BJ;>Mi'
        var_0 = module_0.get_vars_from_inventory_sources(list_0, str_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        tuple_0 = None
        bytes_0 = b'EN\xb7\x96\x99\xee\x12>\xddM\xcc>I\xbfz'
        str_0 = 'DEFAULT_TE<T_COMMAND'
        str_1 = "vf$ RI'Rzfqf"
        set_0 = {tuple_0}
        bytes_1 = b'\xabN\x8f'
        bool_1 = True
        var_0 = module_0.get_vars_from_inventory_sources(str_1, set_0, bytes_1, bool_1)
        bytes_2 = b'\xb0\xd9\xc5\x0e\xca&\xca$\x9a\xc1T'
        dict_0 = {str_0: bytes_0, tuple_0: bytes_0, bytes_0: list_0, str_0: list_0}
        var_1 = module_0.get_vars_from_path(str_0, bytes_2, list_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        list_0 = None
        bool_0 = False
        int_0 = -195
        var_0 = module_0.get_plugin_vars(tuple_0, list_0, bool_0, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 656000
        int_1 = -759
        dict_0 = {}
        int_2 = -914
        list_0 = [dict_0, int_2, int_1]
        var_0 = module_0.get_plugin_vars(int_1, int_0, list_0, dict_0)
        set_0 = {int_1, int_1}
        var_1 = module_0.get_vars_from_path(int_0, int_1, dict_0, set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 100.0
        str_0 = '/\n"2VM\x0cVj{kNi'
        str_1 = '\n    Perform forward DNS resolution on host, IP will give the same IP\n\n    Args:\n        host: String with either hostname, IPv4, or IPv6 address\n\n    Returns:\n        List of tuples containing address family and IP\n    '
        bytes_0 = b'\x91VY'
        var_0 = module_0.get_vars_from_inventory_sources(float_0, str_0, str_1, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ',yo\x0bmand'
        bool_0 = True
        tuple_0 = (str_0, bool_0)
        var_0 = module_0.get_vars_from_inventory_sources(str_0, str_0, tuple_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        host_0 = module_1.Host()
        int_0 = 1430
        list_0 = [host_0]
        dict_0 = {}
        var_0 = module_0.get_vars_from_path(int_0, int_0, list_0, dict_0)
    except BaseException:
        pass