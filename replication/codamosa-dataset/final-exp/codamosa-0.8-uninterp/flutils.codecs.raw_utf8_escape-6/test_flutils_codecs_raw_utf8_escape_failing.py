# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        str_0 = ''
        tuple_0 = module_0.encode(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.register()
        module_0.register()
        bytes_0 = b'qOp!0F\xc4"'
        list_0 = None
        user_string_0 = module_1.UserString(list_0)
        tuple_0 = module_0.encode(user_string_0)
        module_0.register()
        str_0 = 'is_package'
        tuple_1 = module_0.encode(str_0)
        set_0 = {bytes_0, bytes_0, str_0}
        user_string_1 = module_1.UserString(set_0)
        tuple_2 = module_0.encode(user_string_1, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        module_0.register()
        module_0.register()
        module_0.register()
        bytes_0 = b'qOp!0F\xc4"'
        list_0 = None
        user_string_0 = module_1.UserString(list_0)
        tuple_0 = module_0.encode(user_string_0)
        int_0 = 348
        str_0 = 'is_package'
        tuple_1 = module_0.encode(str_0)
        module_0.register()
        tuple_2 = (bytes_0, int_0)
        module_0.register()
        user_string_1 = module_1.UserString(tuple_2)
        tuple_3 = module_0.encode(user_string_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xc8BR\xcb\x1aZ\xe9\xd7\x80\x99[gr\x16#\xfa\xea\xee\x90\x9f'
        str_0 = 'B(:\n<Xu|:-19~)'
        module_0.register()
        int_0 = -1166
        tuple_0 = (str_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        tuple_1 = module_0.encode(user_string_0, str_0)
        str_1 = '\r~sPs%_WB9'
        tuple_2 = module_0.decode(bytes_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        module_0.register()
        bytes_0 = b'\xf9S\x9c\xc8:[jC\xdb\xc4'
        tuple_0 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        list_0 = []
        user_string_0 = module_1.UserString(list_0)
        tuple_0 = module_0.decode(bool_0, user_string_0)
    except BaseException:
        pass

def test_case_6():
    try:
        byte_string_0 = None
        tuple_0 = module_0.decode(byte_string_0)
    except BaseException:
        pass

def test_case_7():
    try:
        complex_0 = None
        str_0 = '#A'
        tuple_0 = module_0.encode(str_0)
        bytes_0 = b'|\xad\xfd\x17\xf5\xc9x'
        module_0.register()
        int_0 = 1102
        tuple_1 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_1)
        var_0 = user_string_0.isidentifier()
        tuple_2 = module_0.decode(complex_0, user_string_0)
    except BaseException:
        pass

def test_case_8():
    try:
        module_0.register()
        str_0 = 'invalid'
        var_0 = module_2.getencoder(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xb3H\x0cv\x0e1\xb9\t\xad\xfa\x05\x17'
        str_0 = 'Avg?gh893o#>W}'
        tuple_0 = module_0.encode(str_0)
        str_1 = "Convert any escaped Unicode literal hexadecimal character(s) to the\n    proper character(s).\n\n    This function will convert a string, that may contain escaped Unicode\n    literal hexadecimal characters, into a string with the proper characters.\n\n    Args:\n        text (:obj:`str`): The string that may have escaped Unicode\n            hexadecimal.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each escaped Unicode hexadecimal character converted\n            into the proper character.\n\n\n    The following Unicode literal formats are supported::\n\n        \\x31\n        \\u0031\n        \\U00000031\n\n    Examples:\n\n        Basic usage::\n\n            >>> from flutils.strutils import convert_escaped_unicode_literal\n            >>> a = '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n            >>> convert_escaped_unicode_literal(a)\n            '1.â˜… ðŸ›‘'\n\n        This function is intended for cases when the value of an environment\n        variable contains escaped Unicode literal characters that need to be\n        converted to proper characters::\n\n            $ export TEST='\\x31\\x2e\\u2605\\x20\\U0001f6d1'\n            $ python\n\n        ::\n\n            >>> import os\n            >>> from flutils.strutils import convert_escaped_unicode_literal\n            >>> a = os.getenv('TEST')\n            >>> a\n            '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n            >>> convert_escaped_unicode_literal(a)\n            '1.â˜… ðŸ›‘'\n\n    "
        module_0.register()
        int_0 = -1166
        tuple_1 = (str_1, int_0)
        user_string_0 = module_1.UserString(tuple_1)
        tuple_2 = module_0.encode(user_string_0, str_1)
        str_2 = '\r~sPs%_WB'
        tuple_3 = module_0.decode(bytes_0, str_2)
    except BaseException:
        pass