# Automatically generated by Pynguin.
import tornado.options as module_0
import builtins as module_1
import typing as module_2

def test_case_0():
    try:
        str_0 = 'nT|`^xXYf\t?H:9%4^0fN'
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '/input/tornado/options.py'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'mk<*3kaXZ3rS)J'
        module_0.print_help()
        str_1 = '-!\\q\x0c!=vzvQ?'
        option_parser_0.__setitem__(str_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'iTr_ zQYTj8\\?T&7\rW(n'
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        list_0 = [str_0, str_0]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '(!4?$\x0c"Qb&B0eB'
        option_parser_0 = module_0.OptionParser()
        set_0 = option_parser_0.groups()
        option_parser_0.__setitem__(str_0, option_parser_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_7():
    try:
        option_parser_0 = module_0.OptionParser()
        list_0 = option_parser_0.parse_command_line()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "I,R{JE/'C(NIwPS"
        list_0 = [str_0]
        option_parser_0 = module_0.OptionParser()
        list_1 = option_parser_0.parse_command_line(list_0)
        str_1 = '/input/tornado/options.py'
        module_0.parse_config_file(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        module_0.print_help()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ';.P'
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        str_1 = 'I3[,]&zU\\?e\r'
        mockable_0 = option_parser_0.mockable()
        any_0 = mockable_0.__getattr__(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ':Ro'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_1 = module_0.OptionParser()
        option_parser_2 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_2)
        option_parser_1.print_help()
        str_1 = 'UW'
        mockable_0.__delattr__(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'c!-e.gmL9}~j^$'
        option_0 = module_0._Option(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '852H3.gz'
        str_1 = ''
        list_0 = [str_1]
        type_0 = module_1.type(*list_0)
        option_0 = module_0._Option(str_1, type_0, str_1)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = -2840.595
        module_0.add_parse_callback(float_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        list_0 = option_parser_1.parse_command_line()
    except BaseException:
        pass

def test_case_16():
    try:
        text_i_o_0 = module_2.TextIO()
        module_0.print_help(text_i_o_0)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_17():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_parser_0.run_parse_callbacks()
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_18():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        str_0 = '/(favicon\\.ico)'
        option_0 = module_0._Option(str_0, str_0, str_0)
        option_0.set(option_parser_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '(!4?$\x0c"Qb&B0eB'
        none_type_0 = None
        module_0.define(str_0, none_type_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'k'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        str_1 = 'Extra {% end %} block'
        list_0 = [str_1, str_1]
        list_1 = option_parser_0.parse_command_line(list_0)
        mockable_0 = option_parser_0.mockable()
        str_2 = '{Z[rizD\x0bp*y}Vk/BJ^M1'
        option_parser_1 = module_0.OptionParser()
        iterable_0 = option_parser_1.items()
        option_parser_0.print_help()
        str_3 = None
        str_4 = 'XVnGj*~Mj y"um'
        iterable_1 = option_parser_1.items()
        bool_0 = False
        list_2 = module_0.parse_command_line(str_0, bool_0)
        str_5 = "-\x0c,B'&UruH( A"
        option_0 = module_0._Option(str_1, str_3, str_2, str_5, str_3, mockable_0)
        option_0.set(str_4)
    except BaseException:
        pass

def test_case_21():
    try:
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        str_0 = None
        option_parser_0.print_help()
        dict_0 = option_parser_0.group_dict(str_0)
        mockable_0 = module_0._Mockable(option_parser_0)
        str_1 = 'L)W)v'
        option_parser_0.define(str_1, str_0)
        iterator_1 = option_parser_0.__iter__()
        mockable_0.__setattr__(str_1, iterator_1)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = ''
        option_parser_0 = module_0.OptionParser()
        bool_0 = True
        option_parser_0.define(str_0, str_0, bool_0, str_0)
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        module_0.print_help()
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'pXNUU'
        option_parser_0 = module_0.OptionParser()
        any_0 = None
        optional_0 = None
        option_parser_0.define(str_0, any_0, optional_0)
        option_parser_0.__setattr__(str_0, str_0)
        str_1 = 'HTTP_'
        option_parser_0.__setattr__(str_1, option_parser_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'P]b((2s<c#_XI"'
        str_1 = '2^\t0\x0b(\r%4qFq 8LM'
        bool_0 = False
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        option_0 = module_0._Option(str_1, str_1, str_1, bool_0, str_1, mockable_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '4'
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_1 = module_0.OptionParser()
        iterable_0 = option_parser_1.items()
        option_parser_0.print_help()
        str_1 = 'XVnGj*~Mj y"um'
        bool_0 = False
        str_2 = 'Lb0X{>K\x0c0G|O"PS'
        option_parser_2 = module_0.OptionParser()
        mockable_0 = option_parser_2.mockable()
        option_0 = module_0._Option(str_2, str_1, bool_0, str_2, str_2, option_parser_0)
        any_0 = option_0.value()
        dict_1 = option_parser_2.as_dict()
        option_0.set(iterable_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '--'
        option_parser_0 = module_0.OptionParser()
        bool_0 = option_parser_0.__contains__(str_0)
        list_0 = [str_0, str_0]
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        option_parser_1 = module_0.OptionParser()
        iterator_0 = option_parser_1.__iter__()
        option_parser_1.add_parse_callback(iterator_0)
        option_parser_2 = module_0.OptionParser()
        option_parser_3 = module_0.OptionParser()
        iterable_0 = option_parser_3.items()
        option_parser_2.print_help()
        str_0 = '--assertion-generation'
        bool_0 = True
        list_0 = module_0.parse_command_line(str_0, bool_0)
    except BaseException:
        pass