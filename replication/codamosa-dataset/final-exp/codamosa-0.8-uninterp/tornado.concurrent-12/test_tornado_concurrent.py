# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import builtins as module_1
import concurrent.futures._base as module_2

def test_case_0():
    pass

def test_case_1():
    dict_0 = {}
    bool_0 = module_0.is_future(dict_0)
    dummy_executor_0 = module_0.DummyExecutor()
    dummy_executor_0.shutdown()
    list_0 = [dict_0, dict_0, dict_0]
    base_exception_0 = module_1.BaseException(*list_0)
    future_0 = dummy_executor_0.submit(base_exception_0)
    callable_0 = None
    str_0 = 'zH~.(iR'
    str_1 = ' Y\\HD+4_t\x0c\'}\'`S"'
    dict_1 = {str_0: dummy_executor_0, str_1: callable_0, str_1: dummy_executor_0, str_1: dummy_executor_0}
    future_1 = dummy_executor_0.submit(callable_0, **dict_1)

def test_case_2():
    list_0 = None
    dummy_executor_0 = module_0.DummyExecutor()
    future_0 = dummy_executor_0.submit(list_0)

def test_case_3():
    return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
    dummy_executor_0 = module_0.DummyExecutor()
    dummy_executor_0.shutdown()

def test_case_4():
    str_0 = 'Decodes an argument from the request.\n\n        The argument has been percent-decoded and is now a byte string.\n        By default, this method decodes the argument as utf-8 and returns\n        a unicode string, but this may be overridden in subclasses.\n\n        This method is used as a filter for both `get_argument()` and for\n        values extracted from the url and passed to `get()`/`post()`/etc.\n\n        The name of the argument is provided if known, but may be None\n        (e.g. for unnamed groups in the url regex).\n        '
    list_0 = [str_0]
    str_1 = ''
    str_2 = ''
    dict_0 = {str_0: list_0, str_0: list_0, str_1: str_0, str_2: list_0}
    callable_0 = module_0.run_on_executor(**dict_0)

def test_case_5():
    future_0 = module_2.Future()
    dict_0 = None
    module_0.future_set_result_unless_cancelled(future_0, dict_0)