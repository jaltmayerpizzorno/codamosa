# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import concurrent.futures._base as module_1
import builtins as module_2

def test_case_0():
    try:
        tuple_0 = None
        list_0 = [tuple_0, tuple_0, tuple_0]
        bytes_0 = b'\xfd`'
        list_1 = [list_0, bytes_0, tuple_0, tuple_0]
        callable_0 = module_0.run_on_executor(*list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_2():
    try:
        future_0 = module_1.Future()
        callable_0 = module_0.run_on_executor()
        module_0.future_add_done_callback(future_0, callable_0)
        dummy_executor_0 = module_0.DummyExecutor()
        future_1 = dummy_executor_0.submit(future_0)
        base_exception_0 = module_2.BaseException()
        dummy_executor_0.shutdown()
        future_2 = None
        module_0.chain_future(future_2, future_2)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = None
        dummy_executor_0 = module_0.DummyExecutor()
        future_0 = dummy_executor_0.submit(list_0)
        callable_0 = None
        module_0.future_add_done_callback(future_0, callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        future_0 = module_1.Future()
        bool_0 = True
        dict_0 = {}
        dummy_executor_0 = module_0.DummyExecutor(**dict_0)
        dummy_executor_0.shutdown(bool_0)
        future_1 = dummy_executor_0.submit(future_0)
        list_0 = []
        callable_0 = module_0.run_on_executor(*list_0)
        dict_1 = {}
        none_type_0 = None
        list_1 = [dict_0, list_0, list_0]
        tuple_0 = (dict_1, none_type_0, list_1)
        module_0.future_set_exc_info(future_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        future_0 = module_1.Future()
        callable_0 = module_0.run_on_executor()
        module_0.future_add_done_callback(future_0, callable_0)
        dummy_executor_0 = module_0.DummyExecutor()
        future_1 = dummy_executor_0.submit(future_0)
        list_0 = [future_1]
        callable_1 = module_0.run_on_executor(*list_0)
        base_exception_0 = module_2.BaseException()
        dummy_executor_0.shutdown()
        future_2 = None
        module_0.chain_future(future_2, future_2)
    except BaseException:
        pass

def test_case_6():
    try:
        future_0 = module_1.Future()
        list_0 = [future_0]
        callable_0 = module_0.run_on_executor(*list_0)
        module_0.future_add_done_callback(future_0, callable_0)
        callable_1 = module_0.run_on_executor()
        var_0 = None
        dummy_executor_0 = module_0.DummyExecutor()
        future_1 = dummy_executor_0.submit(future_0)
        list_1 = []
        callable_2 = module_0.run_on_executor(*list_1)
        module_0.future_set_result_unless_cancelled(future_0, var_0)
        dummy_executor_0.shutdown()
        future_2 = None
        module_0.chain_future(future_2, future_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'LW3~,[A4n52t\t#w'
        list_0 = [str_0, str_0, str_0]
        dict_0 = {str_0: str_0}
        callable_0 = module_0.run_on_executor(*list_0, **dict_0)
    except BaseException:
        pass