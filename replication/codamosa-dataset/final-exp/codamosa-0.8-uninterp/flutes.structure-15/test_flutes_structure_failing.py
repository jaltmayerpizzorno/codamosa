# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        bool_0 = None
        var_0 = module_0.no_map_instance(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'W@#['
        float_0 = -1063.0
        bytes_0 = b'\x80\xe1_X(\xa8\xf8\xc3\xa1\x14\x8b\xe6eX\xd5\xfc\x0f'
        var_0 = module_0.no_map_instance(bytes_0)
        var_1 = module_0.no_map_instance(float_0)
        dict_0 = {str_0: str_0, str_0: str_0}
        var_2 = module_0.no_map_instance(dict_0)
        var_3 = None
        str_1 = 'protocol'
        var_4 = module_0.no_map_instance(str_1)
        bytes_1 = b'\xb2'
        list_0 = [var_3, var_3, var_3]
        var_5 = module_0.map_structure(bytes_1, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '&|,^q6-{\x0c:=nt7i'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.map_structure(str_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = False
        var_0 = module_0.map_structure(bool_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "B2tc@',\tQox#D1"
        var_0 = module_0.map_structure_zip(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = None
        var_0 = module_0.map_structure_zip(dict_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        var_0 = None
        int_0 = -1910
        int_1 = None
        dict_0 = {var_0: int_0, var_0: int_1, var_0: int_1}
        list_0 = module_0.reverse_map(dict_0)
        bytes_0 = b'\xb4\xd9\xe9\x03\x05\xfa\xac\xe3\x0f\x90\x16'
        var_1 = module_0.map_structure(tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\xe5\xf0\xf2i\x07\xb3Z7\xac\x01\x96\x98J'
        set_0 = {bytes_0}
        var_0 = module_0.map_structure(set_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -781.398191
        complex_0 = None
        int_0 = 129
        tuple_0 = (complex_0, int_0)
        tuple_1 = (tuple_0,)
        var_0 = module_0.map_structure(float_0, tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b"*\xa5\x8d\x1a\xf9u\xab\xe9'\xccu,~\xcb\x00\xf44e"
        str_0 = '5&DfkcNJ|lX'
        var_0 = module_0.no_map_instance(str_0)
        str_1 = 'ceil_div'
        float_0 = 603.61849
        dict_0 = {float_0: bytes_0, float_0: float_0, str_1: bytes_0, var_0: float_0}
        module_0.register_no_map_class(bytes_0)
        set_0 = {var_0, str_0, float_0, str_1}
        var_1 = module_0.map_structure(dict_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xf9\xbf=\xda\xcf\xc1_\xee\xfd\x80z\xdc1"&\xea\x94\xbf\x07'
        str_0 = '5Dfk$cNJ|MlX'
        var_0 = module_0.no_map_instance(str_0)
        float_0 = 603.61849
        str_1 = '0.Jj'
        dict_0 = {str_1: bytes_0, var_0: float_0, float_0: var_0}
        var_1 = module_0.map_structure(str_1, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 2963.0
        tuple_0 = ()
        dict_0 = {float_0: float_0, tuple_0: tuple_0, float_0: tuple_0, tuple_0: float_0}
        tuple_1 = (dict_0,)
        var_0 = module_0.map_structure_zip(float_0, tuple_1)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'Wj\x8d:\xe2\xa0e\x1f\x1b\x83\xcd(\xa5\x0b\xf4W'
        var_0 = module_0.no_map_instance(bytes_0)
        int_0 = -1910
        str_0 = 'FCcXZJ'
        dict_0 = {}
        var_1 = module_0.map_structure(str_0, dict_0)
        str_1 = '-kbLO7H-9grJ'
        list_0 = None
        list_1 = [int_0, list_0]
        var_2 = module_0.map_structure(str_1, list_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "')|L^:H?aH"
        set_0 = {str_0, str_0, str_0, str_0}
        list_0 = [set_0, str_0, set_0, str_0]
        var_0 = module_0.map_structure_zip(set_0, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'\xf9\xbf=\xda\xcf\xc1_\xee\xfd\x80z\xdc1"&\xea\x94\xbf\x07'
        var_0 = module_0.no_map_instance(bytes_0)
        float_0 = 604.3274037286046
        dict_0 = {float_0: float_0, float_0: var_0}
        var_1 = None
        set_0 = set()
        var_2 = module_0.map_structure(set_0, set_0)
        list_0 = [dict_0, var_1, var_1, var_1]
        list_1 = [list_0]
        var_3 = module_0.map_structure_zip(list_1, list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        tuple_0 = ()
        bytes_0 = b'\x8b\x1f=\xc3\x10\xefq$\xc2'
        list_0 = [tuple_0, bytes_0]
        var_0 = module_0.map_structure(list_0, tuple_0)
        str_0 = '"qRO+8mS@Z<W&-t|EvC='
        module_0.register_no_map_class(str_0)
        var_1 = module_0.no_map_instance(bytes_0)
        float_0 = 604.3274037286046
        str_1 = '/l-T .\n\x0b'
        var_2 = module_0.no_map_instance(var_1)
        dict_0 = {bytes_0: str_1, float_0: float_0}
        set_0 = set()
        var_3 = module_0.map_structure(set_0, set_0)
        var_4 = module_0.map_structure_zip(dict_0, list_0)
        int_0 = -1450
        var_5 = module_0.map_structure_zip(dict_0, int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = None
        type_0 = None
        var_0 = None
        int_0 = -1353
        int_1 = 32768
        int_2 = 2086
        dict_0 = {var_0: int_0, var_0: int_1, var_0: int_2}
        list_0 = module_0.reverse_map(dict_0)
        module_0.register_no_map_class(type_0)
        dict_1 = {}
        list_1 = module_0.reverse_map(dict_1)
        set_0 = {bool_0, bool_0}
        list_2 = None
        module_0.register_no_map_class(type_0)
        tuple_0 = (list_2,)
        list_3 = [tuple_0]
        var_1 = module_0.map_structure_zip(set_0, list_3)
    except BaseException:
        pass