

# Generated at 2022-06-13 23:28:35.680021
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    """Test for method cnpj of class BrazilSpecProvider."""
    from mimesis.enums import Gender

    bp = BrazilSpecProvider()
    assert bp.cnpj() == '77.732.230/0001-70'
    


# Generated at 2022-06-13 23:28:48.001443
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    """Test if the random cpfs generated by the BrazilSpecProvider class are valid."""
    # CPFs to test
    valid_cpfs = ['001.137.297-40', '352.575.515-18', '726.081.401-34', '833.886.471-87', '092.062.187-00']

    brazil_provider = BrazilSpecProvider()

    for cpf in valid_cpfs:
        # Each digit in the CPF must be multiplied by its position's weight
        # Weight for the first nine digits
        weight_first_nine = [10, 9, 8, 7, 6, 5, 4, 3, 2]
        sum_first_nine = 0
        for index, digit in enumerate(cpf[:9]):
            sum_first_nine += int(digit) * weight_

# Generated at 2022-06-13 23:28:51.309875
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    from mimesis.providers.brazil import BrazilSpecProvider
    a = BrazilSpecProvider(seed=0)
    for i in range(10):
        print(a.cnpj(with_mask=False))

# Generated at 2022-06-13 23:28:56.197604
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    bsp = BrazilSpecProvider(seed=1234567890)
    assert bsp.cpf() == '001.137.297-40'
    assert bsp.cpf() == '001.137.297-40'
    assert bsp.cpf(with_mask=False) == '00113729740'
    assert bsp.cpf() == '001.137.297-40'
    assert bsp.cpf() == '001.137.297-40'



# Generated at 2022-06-13 23:28:58.277670
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    cpf=BrazilSpecProvider()
    assert len(cpf.cpf(False)) == 11

#Unit test for method cnpj of class BrazilSpecProvider

# Generated at 2022-06-13 23:29:03.193396
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    """Test for BrazilSpecProvider.cpf"""
    bsp = BrazilSpecProvider()
    assert len(bsp.cpf()) == 14
    assert bsp.cpf(with_mask=False)


# Generated at 2022-06-13 23:29:07.132372
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    provider = BrazilSpecProvider()
    cnpj = provider.cnpj()
    assert len(cnpj) == 18
    cnpj = provider.cnpj(with_mask=False)
    assert len(cnpj) == 14



# Generated at 2022-06-13 23:29:12.845642
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    #
    #Teste:
    #   1) Deve ser uma String
    #   2) Deve ter o tamanho de 14

    f = BrazilSpecProvider()
    g = f.cnpj()
    assert (isinstance(g, str))
    assert (len(g) == 14)


# Generated at 2022-06-13 23:29:15.345521
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    assert BrazilSpecProvider().cpf() != ''


# Generated at 2022-06-13 23:29:18.377607
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    from mimesis.builtins.brazil import BrazilSpecProvider
    bsp = BrazilSpecProvider()
    print(bsp.cpf(with_mask = True))


# Generated at 2022-06-13 23:29:28.125717
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    br = BrazilSpecProvider()
    cpf = br.cpf()
    assert len(cpf) == 14


# Generated at 2022-06-13 23:29:31.926392
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    provider = BrazilSpecProvider()

    assert provider.cnpj() == '77.732.230/0001-70'



# Generated at 2022-06-13 23:29:37.054082
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf(): 
    from mimesis import Generic

    seed_ = Generic('en').text.seed()
    brazil_ = BrazilSpecProvider(seed=seed_)
    # Need to use cpf length more than 11
    assert len(brazil_.cpf(False)) > 11



# Generated at 2022-06-13 23:29:45.697890
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    from unittest import TestCase

    class TestBrazilSpecProvider(TestCase):

        def setUp(self):
            self.provider = BrazilSpecProvider()

        def test_cpf(self):
            cpf = self.provider.cpf()
            self.assertEqual(len(cpf), 14)

        def test_cpf_with_mask(self):
            cpf = self.provider.cpf(with_mask=False)
            self.assertEqual(len(cpf), 11)
    return TestBrazilSpecProvider()


# Generated at 2022-06-13 23:29:54.711144
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():

    from mimesis.providers import BrazilSpecProvider
    from mimesis.providers.person import Person

    br_spec = BrazilSpecProvider()
    br_spec.seed(42)

    person = Person('pt-br')
    person.seed(42)

    assert '09.114.761/0001-40' == br_spec.cnpj()
    assert '13.061.901/0001-48' == person.company_identifier()


# Generated at 2022-06-13 23:29:56.971980
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    assert BrazilSpecProvider().cpf() == '009.839.594-08'


# Generated at 2022-06-13 23:29:59.867343
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    provider = BrazilSpecProvider
    print(provider.cnpj(provider))


# Generated at 2022-06-13 23:30:04.699888
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    provider = BrazilSpecProvider()
    cnpjs = []
    for _ in range(5):
        cnpjs.append(provider.cnpj(with_mask=False))
    assert len(set(cnpjs)) == len(cnpjs)


# Generated at 2022-06-13 23:30:14.813722
# Unit test for method cnpj of class BrazilSpecProvider

# Generated at 2022-06-13 23:30:18.979595
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    cpf = BrazilSpecProvider().cnpj(with_mask=True)

    assert cpf[2] == '.'
    assert cpf[6] == '.'
    assert cpf[10] == '/'
    assert cpf[15] == '-'

# Generated at 2022-06-13 23:30:35.523621
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    test_cpf = BrazilSpecProvider().cpf()
    print(test_cpf)


# Generated at 2022-06-13 23:30:38.056252
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    provider = BrazilSpecProvider()
    # provider.bind(0000)
    print(provider.cpf())


# Generated at 2022-06-13 23:30:43.982469
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    b = BrazilSpecProvider()
    b.seed(1)
    assert b.cnpj() == "42.814.716/0001-90"
    assert b.cnpj(with_mask=False) == "42814716000190"


# Generated at 2022-06-13 23:30:46.244592
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    bsp = BrazilSpecProvider(seed=1)
    cpf = bsp.cpf()
    assert cpf == "370.411.286-89"


# Generated at 2022-06-13 23:30:48.467787
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    assert cnpj() in ['77.732.230/0001-70']

# Generated at 2022-06-13 23:30:54.798550
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14
    cpf_without_mask = cpf.split('.')[0] + cpf.split('.')[1] + cpf.split('.')[2].split('-')[0] + cpf.split('.')[2].split('-')[1]
    assert len(cpf_without_mask) == 11


# Generated at 2022-06-13 23:30:58.287474
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    """Test method BrazilSpecProvider.cnpj()"""
    myBrazilSpecProvider = BrazilSpecProvider(seed=None)
    cnpjNumber = myBrazilSpecProvider.cnpj()

    # Verify if the cnpj has a mask.
    assert len(cnpjNumber) == 18


# Generated at 2022-06-13 23:31:08.795837
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    
    assert len(BrazilSpecProvider().cpf()) == 14
    assert len(BrazilSpecProvider().cpf()) == len(set(BrazilSpecProvider().cpf()))
    assert len(set(BrazilSpecProvider().cpf().split('.'))) == 2
    assert len(set(BrazilSpecProvider().cpf().split('-'))) == 2
    assert len(set(BrazilSpecProvider().cpf().split('.')[0])) == 14
    assert len(set(BrazilSpecProvider().cpf().split('.')[0])) == 14
    assert int(BrazilSpecProvider().cpf().split('.')[0]) > 100
    assert int(BrazilSpecProvider().cpf().split('.')[0]) < 999
    assert int(BrazilSpecProvider().cpf().split('.')[1]) > 100

# Generated at 2022-06-13 23:31:12.205108
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    assert len(cpf) == 14


# Generated at 2022-06-13 23:31:14.966822
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    cpf = BrazilSpecProvider()
    cpf1 = cpf.cpf()
    assert isinstance(cpf1, str)


# Generated at 2022-06-13 23:31:30.936347
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    """Test cnpj of BrazilSpecProvider"""
    from doctest import testmod
    testmod()

# Generated at 2022-06-13 23:31:39.539573
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    # Arrange
    import re

    # Act
    cnpj = BrazilSpecProvider().cnpj()
    # Assert
    assert type(cnpj) is str
    assert len(cnpj) == 18
    assert re.compile(r'\d\d\.\d\d\d\.\d\d\d\/\d\d\d\d\-\d\d').match(cnpj) is not None


# Generated at 2022-06-13 23:31:44.256560
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    """Test method cpf of class BrazilSpecProvider."""
    from re import match
    from nose.tools import assert_equal
    from .data.valid_cpf import CPF
    provider = BrazilSpecProvider()
    for _ in range(1000):
        cpf = provider.cpf()
        assert_equal(len(cpf), 14)
        assert_equal(bool(match(CPF, cpf)), True)


# Generated at 2022-06-13 23:31:48.502776
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():

    from mimesis.providers.person import Person

    person = Person('pt-br')
    cpf = person.cpf()

    assert(9 < len(cpf) < 13)


# Generated at 2022-06-13 23:32:00.472318
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    provider = BrazilSpecProvider()
    cnpj_sem_mascara = provider.cnpj()
    assert len(cnpj_sem_mascara) == 14
    assert cnpj_sem_mascara.isdigit()
    cnpj_com_mascara = provider.cnpj(with_mask=True)
    assert len(cnpj_com_mascara) == 18
    assert "." in cnpj_com_mascara
    assert "-" in cnpj_com_mascara
    assert "/" in cnpj_com_mascara
    cnpj_invalido_sem_mascara_1 = provider.cnpj(with_mask=False)

# Generated at 2022-06-13 23:32:10.001629
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    from mimesis import BrazilSpecProvider
    from mimesis.enums import Gender

    bsp = BrazilSpecProvider()

    case_1 = bsp.cpf()
    assert case_1

    case_2 = bsp.cpf(with_mask=False)
    assert case_2

    case_3 = bsp.cpf(with_mask=None)
    assert case_3

    case_4 = bsp.cpf(with_mask=1)
    assert case_4

    case_5 = bsp.cpf(with_mask=0)
    assert case_5


# Generated at 2022-06-13 23:32:12.917544
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    cnpjvalue = BrazilSpecProvider()
    expectedtype = '13.222.691/0001-91'
    assert cnpjvalue.cnpj() == expectedtype


# Generated at 2022-06-13 23:32:15.614004
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    bsp = BrazilSpecProvider(seed=100)
    for i in range(10):
        print(bsp.cpf())


# Generated at 2022-06-13 23:32:17.279059
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    data = BrazilSpecProvider().cnpj()
    assert len(data) is 18

# Generated at 2022-06-13 23:32:26.516736
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    from faker import Faker
    from faker.providers import BaseProvider
    from mimesis.providers.brazil import BrazilSpecProvider
    fake = Faker()
    fake.add_provider(BrazilSpecProvider)

    # initialize cnpj generator
    cnpj = fake.cnpj()

    # Look like a cnpj
    assert len(cnpj) == 18
    cnpj_list = cnpj.split('.')
    assert len(cnpj_list) == 3

    # Validate cnpj
    cnpj_mask = cnpj_list[0] + cnpj_list[1] + cnpj_list[2]
    cnpj_mask_list = cnpj_mask.split('/')
    cnpj_mask = cnpj_mask_

# Generated at 2022-06-13 23:33:18.308303
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    bsp = BrazilSpecProvider()
    cpf = bsp.cpf()
    assert len(cpf) == 14
    assert cpf[3] == '.' and cpf[7] == '.' and cpf[11] == '-'
    for cpf_i in range(0, 10):
        cpf = bsp.cpf()
        assert len(cpf) == 14
        assert cpf[3] == '.' and cpf[7] == '.' and cpf[11] == '-'
    cpf = bsp.cpf(False)
    assert len(cpf) == 11
    assert cpf[3] != '.' and cpf[7] != '.' and cpf[11] != '-'


# Generated at 2022-06-13 23:33:23.070671
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    bsp = BrazilSpecProvider(seed=42)
    assert bsp.cpf() == "035.859.049-20"
    assert bsp.cpf() == "945.621.731-86"
    assert bsp.cpf(with_mask=False) == "94562173186"



# Generated at 2022-06-13 23:33:25.745621
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    provider = BrazilSpecProvider()
    cpf = provider.cpf()
    print(cpf)
    assert len(cpf) == 14



# Generated at 2022-06-13 23:33:32.805763
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    brazil_provider = BrazilSpecProvider()
    cpf = brazil_provider.cpf()

    assert len(cpf) == 14
    assert cpf[3] == '.'
    assert cpf[7] == '.'
    assert cpf[11] == '-'


# Generated at 2022-06-13 23:33:41.336090
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    # unit test for cpf of BrazilSpecProvider()
    brazil = BrazilSpecProvider()

    CPF = brazil.cpf()
    assert len(CPF) == 14

    CPF_WITHOUT_MASK = brazil.cpf(with_mask=False)
    # cpf with the mask
    assert len(CPF_WITHOUT_MASK) == 11


# Generated at 2022-06-13 23:33:48.654467
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    brazilSpecProvider = BrazilSpecProvider()
    cnpj1 = brazilSpecProvider.cnpj(with_mask=True)
    print("cnpj1 = " + str(cnpj1))

    cnpj2 = brazilSpecProvider.cnpj(with_mask=False)
    print("cnpj2 = " + str(cnpj2))


# Generated at 2022-06-13 23:33:53.859207
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    brazil = BrazilSpecProvider()
    ret1 = brazil.cpf(with_mask=False)
    assert ret1 == '90439752637'
    ret2 = brazil.cpf(with_mask=True)
    assert ret2 == '904.397.526-37'


# Generated at 2022-06-13 23:33:56.772357
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    b = BrazilSpecProvider()
    print(b.cpf())

# Generated at 2022-06-13 23:34:02.175321
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    """Unit test for method BrazilSpecProvider.cpf."""
    b = BrazilSpecProvider()
    assert len(b.cpf()) == 14
    assert b.cpf()[3] == "."
    assert b.cpf()[7] == "."
    assert b.cpf()[11] == "-"
    assert len(b.cpf(with_mask=False)) == 11


# Generated at 2022-06-13 23:34:07.844213
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    provider = BrazilSpecProvider()
    cnpj = provider.cnpj()
    assert len(cnpj) == 18
    assert cnpj[2] == '.'
    assert cnpj[6] == '.'
    assert cnpj[10] == '/'
    assert cnpj[15] == '-'

    # this test case is based on the example given in the documentation
    seed = 'c0ad5854-a3b1-4616-a7bc-a0a468556b2a'
    provider = BrazilSpecProvider(seed)
    cnpj = provider.cnpj(with_mask=True)
    assert cnpj == '22.974.971/0001-51'
    cnpj = provider.cnpj(with_mask=False)

# Generated at 2022-06-13 23:35:50.295237
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    p = BrazilSpecProvider()
    cpf_list = []
    for i in range(100):
        cpf = p.cpf(with_mask=False)
        assert (len(cpf) == 11)
        assert (cpf not in cpf_list)
        cpf_list.append(cpf)


# Generated at 2022-06-13 23:35:54.408970
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    bsp = BrazilSpecProvider()
    assert len(bsp.cpf(False)) == 11
    assert set(bsp.cpf(False)) <= {str(i) for i in range(10)}
    assert len(bsp.cpf()) == 14
    assert set(bsp.cpf()) <= {str(i) for i in range(10)} | {'.', '-'}


# Generated at 2022-06-13 23:35:56.641118
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    brazil_provider = BrazilSpecProvider(seed=42)
    assert brazil_provider.cnpj() == '24.918.596/0001-25'


# Generated at 2022-06-13 23:35:57.581881
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    bsp = BrazilSpecProvider()
    print(bsp.cnpj())

# Generated at 2022-06-13 23:36:02.349402
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    """Test method cnpj of class BrazilSpecProvider."""
    b = BrazilSpecProvider()
    assert len(b.cnpj()) == 18
    assert b.cnpj(False) == '87732230000170'
    assert b.cnpj() == '77.732.230/0001-70'

# Generated at 2022-06-13 23:36:17.381840
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    import re
    from mimesis.enums import Gender
    from mimesis.providers.person import Person
    from mimesis.providers import BrazilSpecProvider

    brazil_provider = BrazilSpecProvider()

    assert re.match(r'\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}', brazil_provider.cnpj())
    assert re.match(r'\d{14}', brazil_provider.cnpj(with_mask=False))

    person = Person('pt-br')
    assert re.match(r'\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}', person.cnpj())

# Generated at 2022-06-13 23:36:23.213733
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    brazil = BrazilSpecProvider()
    result = brazil.cnpj()
    result_with_mask = brazil.cnpj(with_mask=True)
    assert isinstance(result, str)
    assert isinstance(result_with_mask, str)
    assert len(result) == 14
    assert len(result_with_mask) == 18


# Generated at 2022-06-13 23:36:39.208368
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    from mimesis.enums import Gender
    from mimesis.providers.person.en import Person
    provider = BrazilSpecProvider()
    for test in range(10):
        with_mask = provider.random.choice([True, False])
        cnpj = provider.cnpj(with_mask=with_mask)
        assert len(cnpj) == 14 or len(cnpj) == 18
        assert cnpj.replace('.', '').replace('-', '').replace('/', '').isdigit()


# Generated at 2022-06-13 23:36:42.318904
# Unit test for method cpf of class BrazilSpecProvider
def test_BrazilSpecProvider_cpf():
    # arrange
    brazil = BrazilSpecProvider()

    # act
    result = brazil.cpf()

    # assert
    assert(14 <= len(result) <= 18)
    assert(result[3] == ".")
    assert(result[7] == ".")
    assert(result[11] == "-")



# Generated at 2022-06-13 23:36:48.454485
# Unit test for method cnpj of class BrazilSpecProvider
def test_BrazilSpecProvider_cnpj():
    provider = BrazilSpecProvider()
    special_dict = provider.cnpj()

    assert special_dict == '77.732.230/0001-70' or '82.550.109/0001-11' or '21.935.282/0001-91' or '91.827.593/0001-64'
