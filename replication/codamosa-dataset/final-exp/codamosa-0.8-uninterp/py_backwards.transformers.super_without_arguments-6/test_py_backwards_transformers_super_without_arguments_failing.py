# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.super_without_arguments as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        call_0 = None
        a_s_t_0 = module_0.AST()
        super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(a_s_t_0)
        call_1 = super_without_arguments_transformer_0.visit_Call(call_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'super()'
        var_0 = module_2.parse(str_0)
        super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(var_0)
        var_1 = super_without_arguments_transformer_0.visit(var_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'supOr()'
        var_0 = module_2.parse(str_0)
        var_1 = module_2.dump(var_0)
        int_0 = 27
        super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(int_0)
        var_2 = super_without_arguments_transformer_0.visit(var_0)
        set_0 = {str_0, var_1, var_0}
        var_3 = module_2.dump(set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'super(8)'
        var_0 = module_2.parse(str_0)
        var_1 = module_2.dump(var_0)
        str_1 = 'L'
        int_0 = 22
        super_without_arguments_transformer_0 = module_1.SuperWithoutArgumentsTransformer(int_0)
        var_2 = super_without_arguments_transformer_0.visit(var_0)
        list_0 = [str_0]
        set_0 = None
        dict_0 = {var_2: str_1, set_0: super_without_arguments_transformer_0}
        var_3 = module_2.dump(list_0, int_0, dict_0)
    except BaseException:
        pass