# Automatically generated by Pynguin.
import tornado.util as module_0
import builtins as module_1

def test_case_0():
    try:
        object_dict_0 = module_0.ObjectDict()
        var_0 = object_dict_0.y
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'h\tKbq'
        object_dict_0 = module_0.ObjectDict()
        object_dict_0.__setattr__(str_0, str_0)
        timeout_error_0 = module_0.TimeoutError()
        str_1 = '5\nito)<Z'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        any_0 = object_dict_0.__getattr__(str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xc6u'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_1 = gzip_decompressor_0.decompress(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '8hLah7o\x0cLGG/WK'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        str_0 = '1'
        dict_0 = {str_0: bool_0}
        bool_1 = True
        module_0.exec_in(bool_0, dict_0, bool_1)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        sequence_0 = None
        str_0 = '\x0bmC'
        str_1 = '0'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: sequence_0, str_1: str_1}
        tuple_0 = (list_0, sequence_0, dict_0)
        var_0 = module_0.raise_exc_info(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'datetime'
        any_0 = module_0.import_object(str_0)
        any_1 = module_0.import_object(str_0)
        object_dict_0 = module_0.ObjectDict()
        list_0 = [any_0]
        base_exception_0 = module_1.BaseException(*list_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        callable_0 = None
        str_1 = 'VK;,i'
        arg_replacer_0 = module_0.ArgReplacer(callable_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        configurable_0 = module_0.Configurable()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'VWt0z"!(Be=acedqcOT\\'
        arg_replacer_0 = module_0.ArgReplacer(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 0
        float_0 = -2421.56
        tuple_0 = (int_0, float_0)
        var_0 = module_0.timedelta_to_seconds(tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'tornado.missing_module'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        timeout_error_0 = module_0.TimeoutError()
        str_0 = 'datetime'
        any_0 = module_0.import_object(str_0)
        str_1 = 'Appends the given handlers to our handler list.\n\n        Host patterns are processed sequentially in the order they were\n        added. All matching patterns will be considered.\n        '
        str_2 = 'e:ak\\ML'
        dict_0 = {str_1: timeout_error_0, str_2: str_1, str_0: str_0}
        none_type_0 = None
        module_0.exec_in(str_0, dict_0, none_type_0)
        var_0 = module_0.doctests()
        str_3 = 'collections.deque'
        any_1 = module_0.import_object(str_3)
        str_4 = 'tornado.missing_module'
        any_2 = module_0.import_object(str_4)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'ecay'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        var_0 = module_0.raise_exc_info(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Override to returns a list of CSS files required by this module.\n\n        If the return values are relative paths, they will be passed to\n        `Reques\\Handler.static<qrl`; otherwise they will be used as-is.\n        '
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = None
        var_1 = lambda x, y=1, z=2, **kwargs: var_0
        str_0 = 'x'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        int_0 = 0
        int_1 = 1
        int_2 = (int_1,)
        var_2 = {}
        tuple_0 = arg_replacer_0.replace(int_0, int_2, var_2)
        var_3 = lambda x, y=1, z=2, **kwargs: var_0
        str_1 = 'y'
        arg_replacer_1 = module_0.ArgReplacer(var_3, str_1)
        set_0 = set()
        str_2 = ''
        list_0 = []
        str_3 = '(8mG\n6s@MZ%A'
        dict_0 = {str_2: list_0, str_3: var_3}
        any_0 = arg_replacer_0.get_old_value(set_0, dict_0)
        int_3 = (int_1,)
        var_4 = {}
        tuple_1 = arg_replacer_1.replace(int_0, int_3, var_4)
        bytes_0 = None
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_1 = gzip_decompressor_0.decompress(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = None
        var_1 = lambda x, y=1, z=2, **kwargs: var_0
        str_0 = ''
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        int_0 = 0
        int_1 = 1
        int_2 = (int_1,)
        var_2 = {}
        tuple_0 = arg_replacer_0.replace(int_0, int_2, var_2)
        var_3 = lambda x, y=1, z=2, **kwargs: var_0
        str_1 = 'y'
        arg_replacer_1 = module_0.ArgReplacer(var_3, str_1)
        set_0 = set()
        str_2 = ''
        list_0 = []
        str_3 = '(8mG\n6s@MZ%A'
        dict_0 = {str_2: list_0, str_3: var_3}
        any_0 = arg_replacer_0.get_old_value(set_0, dict_0)
        object_dict_0 = module_0.ObjectDict()
        str_4 = 'Zcu^u2@_h&bq@VU(B\\pu'
        object_dict_0.__setattr__(str_4, str_3)
        callable_0 = None
        str_5 = 'X.]\x0bo*i'
        arg_replacer_2 = module_0.ArgReplacer(callable_0, str_5)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = None
        var_1 = lambda x, y=1, z=2, **kwargs: var_0
        str_0 = 'x'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        int_0 = 0
        int_1 = 1
        int_2 = (int_1,)
        var_2 = {}
        tuple_0 = arg_replacer_0.replace(int_0, int_2, var_2)
        var_3 = lambda x, y=1, z=2, **kwargs: var_0
        arg_replacer_1 = module_0.ArgReplacer(var_3, str_0)
        set_0 = {arg_replacer_0}
        str_1 = ''
        list_0 = []
        str_2 = '(8mG\n6s@MZ%A'
        dict_0 = {str_1: list_0, str_2: var_3}
        any_0 = arg_replacer_0.get_old_value(set_0, dict_0)
    except BaseException:
        pass