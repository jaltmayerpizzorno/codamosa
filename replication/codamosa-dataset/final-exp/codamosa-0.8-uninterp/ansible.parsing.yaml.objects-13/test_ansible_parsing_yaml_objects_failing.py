# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xcf\xaf\xd2?\xa6D\xa8?[R#4\xa4,\x92\xa4\xcd'
        str_0 = 'P(>Bi>='
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        tuple_0 = None
        var_0 = ansible_vault_encrypted_unicode_0.__add__(tuple_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.istitle()
        var_2 = ansible_vault_encrypted_unicode_1.__str__()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        float_0 = -372.227774
        var_3 = ansible_vault_encrypted_unicode_2.__int__(float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = None
        bytes_0 = b'\x12\xeaLA\x9a\x9e\xf7\x03\x9a'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        str_0 = '`p7B(1S'
        str_1 = '}#$s\n ?S;DndqXF0\x0bJ\rn'
        str_2 = None
        dict_0 = {str_0: ansible_vault_encrypted_unicode_0, str_1: ansible_vault_encrypted_unicode_0, str_2: str_0, str_2: ansible_vault_encrypted_unicode_0}
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 51.987
        list_0 = [float_0, float_0]
        bytes_0 = b'\t\xad(8Aet\xebb\x050c\xfa\x1f\x1a'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mod__(list_0)
        str_0 = 'E;<wUhmYG3\x0b$'
        str_1 = '0a\n='
        ansible_sequence_0 = module_0.AnsibleSequence()
        str_2 = 'Could not find group %s in inventory'
        dict_0 = {str_0: str_1, str_2: str_1, str_0: str_1, str_2: float_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_1 = ansible_vault_encrypted_unicode_1.rpartition(ansible_sequence_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'p"t9\x0bN0G'
        str_1 = ''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.expandtabs(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = None
        list_0 = [str_0, str_0, str_0, str_0]
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.isascii()
        str_1 = '?PZ1[@_~2B3( _5FzMf'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_1 = ansible_vault_encrypted_unicode_1.casefold()
        var_2 = ansible_vault_encrypted_unicode_1.__gt__(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '--reject-with'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        set_0 = {ansible_vault_encrypted_unicode_0}
        var_0 = ansible_vault_encrypted_unicode_0.join(set_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 513.0
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.ljust(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'W-\tH\\e'
        list_0 = [str_0, str_0, str_0]
        bool_0 = False
        list_1 = [bool_0, bool_0, bool_0, bool_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.rjust(str_0, *list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'(\xadq'
        list_0 = [bytes_0, bytes_0, bytes_0]
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate(*list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        int_0 = 1256
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\xa9\x0c\xbc\x80[\xb6mm\xf8'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        bool_0 = True
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(bool_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_0.lstrip()
        float_0 = 0.001
        set_0 = set()
        var_2 = ansible_vault_encrypted_unicode_0.rindex(float_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_sequence_0 = module_0.AnsibleSequence()
        str_0 = 'BA~"N9-n\n=svzG'
        dict_0 = {str_0: ansible_unicode_0, str_0: ansible_unicode_0}
        int_0 = -2775
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.startswith(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalpha()
        int_0 = 3171
        var_1 = ansible_vault_encrypted_unicode_0.__ge__(int_0)
    except BaseException:
        pass

def test_case_16():
    try:
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        dict_0 = {}
        var_0 = ansible_vault_encrypted_unicode_0.isspace()
        var_1 = ansible_vault_encrypted_unicode_0.replace(dict_0, dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        bytes_0 = b'\xb4\xeb\xa2-X\x1e\xaf\xf2W'
        var_0 = ansible_vault_encrypted_unicode_0.find(bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.swapcase()
        str_0 = "*YdCc&fBO-<~B>'EA<?8"
        dict_0 = {str_0: ansible_sequence_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_1 = ansible_vault_encrypted_unicode_0.__radd__(ansible_mapping_0)
        str_1 = 'ppc8560'
        var_2 = ansible_vault_encrypted_unicode_0.__radd__(str_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_1.__repr__()
        int_0 = 3009
        var_4 = ansible_vault_encrypted_unicode_0.__lt__(int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\x8fBbZ\xdf4z\xe7'
        float_0 = -2137.41642
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_2 = ansible_vault_encrypted_unicode_0.__add__(ansible_mapping_0)
        dict_0 = {}
        ansible_mapping_1 = module_0.AnsibleMapping()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_0.istitle()
        var_4 = ansible_vault_encrypted_unicode_0.upper()
        var_5 = ansible_vault_encrypted_unicode_1.lower()
        var_6 = ansible_vault_encrypted_unicode_1.isspace()
        var_7 = ansible_vault_encrypted_unicode_1.replace(dict_0, dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'Nla#FLdd(&]'
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        set_0 = {str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        var_1 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        str_0 = 'sTU\x0bz'
        str_1 = '{'
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        dict_2 = None
        list_0 = [dict_0, dict_2, dict_0, str_1]
        var_0 = ansible_vault_encrypted_unicode_0.center(dict_2, *list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'H`3|c9>~4E"6D'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        str_1 = 'qHk.$y~IWMowA'
        var_1 = ansible_vault_encrypted_unicode_0.index(str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\x8fBb\x98Z\xdf4z\xe7'
        str_0 = 'is_printable'
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(str_0)
        bytes_1 = b'cmpX-F\x08\x7f\x95'
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(bytes_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_2 = ansible_vault_encrypted_unicode_1.isdigit()
        var_3 = ansible_vault_encrypted_unicode_1.split()
        var_4 = ansible_vault_encrypted_unicode_1.isprintable()
        int_0 = 3009
        list_0 = [str_0, int_0, str_0]
        var_5 = ansible_vault_encrypted_unicode_1.format(*list_0)
        var_6 = ansible_vault_encrypted_unicode_1.rsplit()
        var_7 = ansible_vault_encrypted_unicode_1.__ge__(str_0)
        str_1 = '9'
        var_8 = ansible_vault_encrypted_unicode_1.partition(str_1)
        set_0 = set()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_9 = ansible_vault_encrypted_unicode_1.__add__(ansible_mapping_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_10 = ansible_vault_encrypted_unicode_2.casefold()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_unicode_1 = module_0.AnsibleUnicode()
        list_1 = [bytes_0, ansible_unicode_1]
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        tuple_0 = ()
        var_11 = ansible_vault_encrypted_unicode_2.replace(ansible_vault_encrypted_unicode_2, tuple_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '%WoiFWOJ<=}#Z'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdigit()
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_0.title()
        dict_0 = {ansible_vault_encrypted_unicode_0: ansible_vault_encrypted_unicode_0}
        var_3 = ansible_vault_encrypted_unicode_0.__ne__(ansible_vault_encrypted_unicode_0)
        set_0 = None
        set_1 = None
        list_0 = []
        var_4 = ansible_vault_encrypted_unicode_0.__eq__(list_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        str_1 = '/>P!!Smw+c96['
        dict_1 = {str_0: ansible_vault_encrypted_unicode_0, str_0: var_3, str_1: set_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_1)
        tuple_0 = (set_1, ansible_unicode_0, ansible_mapping_0)
        list_1 = [var_1, tuple_0, set_1]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_5 = ansible_vault_encrypted_unicode_1.find(ansible_vault_encrypted_unicode_0, dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = "\r]'at&\rzN="
        str_1 = "N39:a&a<'XR-.TiXmX-"
        str_2 = 'p#^]B'
        dict_0 = {str_1: str_0, str_2: str_2, str_2: str_0, str_0: str_1}
        str_3 = 'True\n'
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_2)
        var_0 = ansible_vault_encrypted_unicode_1.__gt__(ansible_vault_encrypted_unicode_0)
        dict_1 = {str_0: dict_0, str_3: dict_0}
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_1)
    except BaseException:
        pass

def test_case_26():
    try:
        bytes_0 = b'hello world'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        int_0 = -50
        list_0 = []
        str_0 = '\r{m'
        dict_0 = {str_0: bytes_0}
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0, **dict_0)
        str_1 = '2neMM\x0cDyx/E;~ =+'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_1.replace(int_0, ansible_vault_encrypted_unicode_0, ansible_sequence_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b'bm\xc2\xaa6\xe4D\xb7\xa7~`'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.rfind(ansible_vault_encrypted_unicode_1, bytes_0)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'\x8fBb\x98Z\xdf4z\xe7'
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_unicode_1 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__add__(ansible_unicode_0)
        str_0 = 'is_printable'
        ansible_unicode_2 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_2)
        var_1 = ansible_vault_encrypted_unicode_2.__gt__(str_0)
        bytes_1 = b'mpX-F\x08\x7f\x95'
        var_2 = ansible_vault_encrypted_unicode_2.__reversed__()
        var_3 = ansible_vault_encrypted_unicode_2.__ne__(bytes_1)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_4 = ansible_vault_encrypted_unicode_3.isdigit()
        var_5 = ansible_vault_encrypted_unicode_3.split()
        var_6 = ansible_vault_encrypted_unicode_3.isprintable()
        var_7 = ansible_vault_encrypted_unicode_3.rsplit()
        var_8 = ansible_vault_encrypted_unicode_3.__ge__(str_0)
        str_1 = '9'
        var_9 = ansible_vault_encrypted_unicode_3.partition(str_1)
        set_0 = set()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_10 = ansible_vault_encrypted_unicode_3.__add__(ansible_mapping_0)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_11 = ansible_vault_encrypted_unicode_4.casefold()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_5 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_3)
        ansible_unicode_3 = module_0.AnsibleUnicode()
        var_12 = ansible_vault_encrypted_unicode_5.__eq__(ansible_vault_encrypted_unicode_2)
        tuple_0 = ()
        var_13 = ansible_vault_encrypted_unicode_4.replace(ansible_vault_encrypted_unicode_4, tuple_0)
    except BaseException:
        pass