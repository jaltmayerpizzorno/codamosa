# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0
import pathlib as module_1
import builtins as module_2

def test_case_0():
    try:
        str_0 = '\n        Retrieve a `Route` object containg the details about how to handle\n        a response for a given request\n\n        :param request: the incoming request object\n        :type request: Request\n        :return: details needed for handling the request and returning the\n            correct response\n        :rtype: Tuple[ Route, RouteHandler, Dict[str, Any]]\n        '
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.static(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(route_mixin_0, route_mixin_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '%aunXa*fDVk~Kv|fh++\r'
        str_1 = 'RHK<6:PZK "C[:~\x0c#Pa'
        route_mixin_0 = module_0.RouteMixin()
        dict_0 = {str_1: str_0, str_0: str_0, str_1: route_mixin_0, str_1: str_1}
        var_0 = route_mixin_0.add_websocket_route(str_1, str_1, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ';O=pA-ERaw|VFMn1,gZ$'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'recv_buffer'
        route_mixin_0 = module_0.RouteMixin()
        str_1 = 'L_7O?H2c\rb,'
        bool_0 = True
        pure_path_0 = module_1.PurePath()
        var_0 = route_mixin_0.add_route(str_1, str_0, bool_0, pure_path_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -4472
        str_0 = 'rc'
        bool_0 = True
        list_0 = [int_0]
        str_1 = '. qfHgeaM:'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.post(str_1)
        route_mixin_1 = module_0.RouteMixin(*list_0)
        var_1 = route_mixin_1.patch(str_0)
        pure_path_0 = module_1.PurePath()
        tuple_0 = (pure_path_0,)
        var_2 = route_mixin_0.add_route(tuple_0, str_1, str_1, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        route_mixin_0 = module_0.RouteMixin(**dict_0)
        str_0 = '[$D?~mNeMW'
        bool_0 = True
        int_0 = -3850
        str_1 = 'NkG`pWd+Lf\t5Mi3yLe'
        var_0 = route_mixin_0.patch(str_0, str_1, int_0, str_1)
        str_2 = 'keep-alive'
        str_3 = 'rdz#8\nWrN~OTM\r'
        float_0 = -463.5
        tuple_0 = (float_0,)
        var_1 = route_mixin_0.add_route(str_2, str_3, tuple_0, str_2, bool_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '$H9U$X&))eO3AD'
        list_0 = []
        str_1 = '\n        Get the Length of the blueprint group object.\n\n        :return: Length of Blueprint group object\n        '
        str_2 = 'handler'
        str_3 = "pc\r'@"
        dict_0 = {str_1: list_0, str_1: str_1, str_2: str_3, str_3: str_2}
        route_mixin_0 = module_0.RouteMixin(*list_0, **dict_0)
        var_0 = route_mixin_0.get(str_0)
        float_0 = 1212.84
        var_1 = route_mixin_0.add_websocket_route(float_0, str_0, dict_0, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '%aunXa*fDVk~Kv|fh++\r'
        str_1 = 'RHK<6:PZK "C[:~\x0c#Pa'
        route_mixin_0 = module_0.RouteMixin()
        dict_0 = {str_1: str_0, str_0: str_0, str_1: route_mixin_0, str_1: str_1}
        bool_0 = False
        var_0 = route_mixin_0.post(str_1, bool_0)
        var_1 = route_mixin_0.add_websocket_route(str_1, str_1, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'L*|GT{*0M\r3'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.put(str_0)
        int_0 = 739
        var_1 = route_mixin_0.add_websocket_route(int_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = None
        dict_0 = {}
        list_0 = [dict_0]
        tuple_0 = ()
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.static(bytes_0, bytes_0, list_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ';O=pA-ERa#|VFn1,gZ$'
        route_mixin_0 = module_0.RouteMixin()
        dict_0 = {str_0: route_mixin_0}
        var_0 = route_mixin_0.add_route(dict_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        pure_path_0 = module_1.PurePath()
        str_0 = '\n        Method for attaching middleware to specific routes. This is mainly an\n        internal tool for use by Blueprints to attach middleware to only its\n        specfic routes. But, it could be used in a more generalized fashion.\n\n        :param middleware: the middleware to execute\n        :param route_names: a list of the names of the endpoints\n        :type route_names: Iterable[str]\n        :param attach_to: whether to attach to request or response,\n            defaults to "request"\n        :type attach_to: str, optional\n        '
        list_0 = [pure_path_0, pure_path_0, pure_path_0]
        route_mixin_0 = module_0.RouteMixin(*list_0)
        var_0 = route_mixin_0.patch(str_0)
        str_1 = '_name'
        route_mixin_1 = module_0.RouteMixin()
        var_1 = route_mixin_1.add_websocket_route(pure_path_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        str_0 = ''
        optional_0 = None
        bool_0 = True
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(set_0, str_0, str_0, optional_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '\n        Tun the class Blueprint Group into an Iterable item\n        '
        str_1 = 'request_handler'
        set_0 = {str_0, str_0, str_0, str_0}
        str_2 = ''
        bool_0 = False
        bool_1 = False
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.route(str_2, str_2, bool_0, bool_1)
        bool_2 = True
        str_3 = 'generic'
        str_4 = 'V,hR'
        str_5 = 'J}<IT8\x0c0y O8y(7Z'
        dict_0 = {str_0: bool_2, str_1: set_0, str_4: str_0, str_5: bool_2}
        route_mixin_1 = module_0.RouteMixin(**dict_0)
        var_1 = route_mixin_1.head(str_3, str_1, bool_2)
        var_2 = route_mixin_0.patch(str_4, str_5, bool_0)
        bytes_0 = b',\xf6\xb8h\xe8\xd8\x00\xb6\x15r\xcfo\x0c\xd2\x11l'
        int_0 = -401
        var_3 = route_mixin_0.patch(str_1, bytes_0, int_0)
        float_0 = 4142.8685
        str_6 = '/1}u8ZL:&Y}\x0c%Y:-Iht'
        var_4 = route_mixin_0.add_route(float_0, str_6, str_2)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        dict_0 = {}
        str_0 = '[$D?~mNeMW'
        list_0 = []
        route_mixin_0 = module_0.RouteMixin(*list_0)
        var_0 = route_mixin_0.post(str_0)
        bool_1 = False
        int_0 = -3850
        route_mixin_1 = module_0.RouteMixin()
        var_1 = route_mixin_1.delete(str_0, bool_1, int_0, str_0)
        str_1 = 'NkG`pWd+Lf\t5Mi3yLe'
        list_1 = []
        list_2 = module_2.list()
        route_mixin_2 = module_0.RouteMixin(*list_1, **dict_0)
        var_2 = route_mixin_2.head(str_1, str_0, bool_0, bool_1)
        route_mixin_3 = module_0.RouteMixin(*list_2)
        str_2 = 'Cannot finalize signals outside of event loop'
        int_1 = -2586
        var_3 = route_mixin_3.patch(str_0, str_2, int_1)
        str_3 = '.E.d1EDr3'
        str_4 = 'M\\%'
        var_4 = route_mixin_0.add_route(str_3, str_4, dict_0, str_3)
    except BaseException:
        pass