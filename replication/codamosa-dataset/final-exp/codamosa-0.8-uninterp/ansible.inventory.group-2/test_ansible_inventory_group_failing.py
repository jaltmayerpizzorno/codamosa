# Automatically generated by Pynguin.
import ansible.inventory.group as module_0

def test_case_0():
    try:
        group_0 = module_0.Group()
        var_0 = module_0.to_safe_group_name(group_0)
    except BaseException:
        pass

def test_case_1():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__str__()
        var_1 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_2():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__getstate__()
        list_0 = []
        var_1 = group_0.set_variable(group_0, list_0)
        var_2 = group_0.get_hosts()
        var_3 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_3():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.serialize()
        str_0 = "N2Ux'1mc.]]Le@.@bz"
        var_1 = group_0.__setstate__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_5():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.get_hosts()
        var_1 = group_0.get_hosts()
        list_0 = []
        var_2 = group_0.set_variable(group_0, list_0)
        group_1 = module_0.Group()
        var_3 = group_0.add_host(group_1)
    except BaseException:
        pass

def test_case_6():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        var_0 = group_1.clear_hosts_cache()
        var_1 = group_1.get_descendants()
        var_2 = group_1.serialize()
        bytes_0 = b'\xf9\xd3\xa3M4\xaa\xed\xf66\xf7'
        var_3 = group_0.set_priority(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = None
        list_0 = []
        str_0 = 'sha512_crypt'
        group_0 = module_0.Group(list_0)
        var_0 = group_0.set_variable(str_0, float_0)
        group_1 = module_0.Group()
        var_1 = group_1.__getstate__()
        group_2 = module_0.Group()
        var_2 = group_1.add_child_group(group_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'test_grp'
        str_1 = 'test-grp'
        var_0 = module_0.to_safe_group_name(str_0)
        bool_0 = True
        var_1 = module_0.to_safe_group_name(str_1, bool_0)
        var_2 = module_0.to_safe_group_name(str_1, bool_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'g2'
        group_0 = module_0.Group(str_0)
        str_1 = 'g3'
        group_1 = module_0.Group(str_1)
        str_2 = 'g4'
        group_2 = module_0.Group(str_2)
        str_3 = 'V'
        group_3 = module_0.Group(str_3)
        var_0 = group_2.add_child_group(group_0)
        var_1 = group_0.add_child_group(group_1)
        var_2 = group_3.add_child_group(group_2)
        bool_0 = True
        var_3 = group_1.get_descendants()
        var_4 = str_3 % var_3
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Group D'
        group_0 = module_0.Group(str_0)
        group_1 = module_0.Group(str_0)
        str_1 = 'Group C'
        group_2 = module_0.Group(str_1)
        var_0 = group_0.add_child_group(group_1)
        var_1 = group_0.add_child_group(group_1)
        var_2 = group_2.add_child_group(group_0)
        bytes_0 = b"{\x98\n'\xa9T\xc3\xf1\xd6\x1a\xe5\xc05\xd5"
        var_3 = group_1.add_child_group(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'Group D'
        group_0 = module_0.Group(str_0)
        str_1 = 'Group E'
        group_1 = module_0.Group(str_1)
        str_2 = 'Group C'
        var_0 = group_1.serialize()
        group_2 = module_0.Group(str_2)
        var_1 = group_0.add_child_group(group_1)
        var_2 = group_2.add_child_group(group_1)
        var_3 = group_1.add_child_group(group_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\n    Assert correct beaviour of the method add_child_grup\n    '
        str_1 = 'Groupl~ D'
        group_0 = module_0.Group(str_1)
        str_2 = 'Group E'
        group_1 = module_0.Group(str_2)
        str_3 = 'Group B'
        group_2 = module_0.Group(str_3)
        group_3 = module_0.Group(str_3)
        str_4 = 'Group F'
        group_4 = module_0.Group(str_4)
        var_0 = group_2.add_child_group(group_0)
        var_1 = group_2.add_child_group(group_1)
        var_2 = group_3.add_child_group(group_1)
        var_3 = group_0.get_ancestors()
        var_4 = group_1.remove_host(group_0)
        list_0 = [str_0, str_3]
        var_5 = group_1.add_child_group(list_0)
    except BaseException:
        pass