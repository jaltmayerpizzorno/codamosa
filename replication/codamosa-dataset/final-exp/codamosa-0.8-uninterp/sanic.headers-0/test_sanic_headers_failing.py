# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        float_0 = -4752.345058095701
        optional_0 = module_0.parse_forwarded(float_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -4750.8285
        optional_0 = module_0.parse_xforwarded(float_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ot'
        dict_0 = {}
        tuple_0 = (str_0, dict_0)
        dict_1 = module_0.fwd_normalize(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        iterable_0 = None
        dict_0 = module_0.fwd_normalize(iterable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = None
        tuple_0 = module_0.parse_host(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 401
        str_0 = 'Wa:77ptF6'
        str_1 = '8:|R'
        dict_0 = {str_0: int_0, str_0: int_0, str_1: str_1}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\nT;SpT7*%l'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = module_0.fwd_normalize(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'by'
        str_1 = '1.1.1.1'
        str_2 = 'yH(y\x0bq;W\x0c_1(Q )\x0c_"'
        tuple_0 = module_0.parse_content_header(str_2)
        str_3 = (str_0, str_1)
        str_4 = 'http'
        int_0 = 10
        dict_0 = {}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
        str_5 = 'host'
        str_6 = 'google.com'
        str_7 = (str_5, str_6)
        str_8 = ';299wKNJx'
        str_9 = (str_8, str_4)
        str_10 = [str_3, str_3, str_7, str_9]
        dict_1 = module_0.fwd_normalize(str_10)
        str_11 = 'for'
        str_12 = '_token'
        str_13 = (str_11, str_12)
        str_14 = (str_13, str_4)
        str_15 = (str_8, str_10)
        str_16 = '~}%eI]pQFW4Gal`=]'
        tuple_1 = module_0.parse_host(str_16)
        str_17 = [str_13, str_4, str_14, str_15]
        dict_2 = module_0.fwd_normalize(str_17)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'by'
        str_1 = (str_0, str_0)
        str_2 = 'http'
        str_3 = (str_2, str_2)
        str_4 = 'host'
        str_5 = (str_4, str_3)
        str_6 = '80'
        str_7 = (str_0, str_6)
        str_8 = [str_1, str_3, str_5, str_7]
        dict_0 = module_0.fwd_normalize(str_8)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '80'
        str_1 = (str_0, str_0)
        str_2 = 'for'
        str_3 = '_token'
        str_4 = (str_2, str_3)
        str_5 = (str_4, str_1)
        str_6 = (str_4, str_0)
        str_7 = [str_4, str_2, str_5, str_6]
        dict_0 = module_0.fwd_normalize(str_7)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'by'
        str_1 = 'yH(y\x0bq;W\x0c_1(Q )\x0c_"'
        tuple_0 = module_0.parse_content_header(str_1)
        str_2 = (str_0, str_0)
        str_3 = 'pot'
        tuple_1 = module_0.parse_host(str_3)
        str_4 = 'google.com'
        str_5 = (str_3, str_4)
        str_6 = [str_5, str_2, tuple_1, str_2, str_5]
        dict_0 = module_0.fwd_normalize(str_6)
        str_7 = None
        tuple_2 = module_0.parse_host(str_7)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'unknown'
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'localhost'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = '[::1]'
        tuple_1 = module_0.parse_host(str_1)
        str_2 = '[::1]:8080'
        tuple_2 = module_0.parse_host(str_2)
        str_3 = ':Nj)'
        tuple_3 = module_0.parse_host(str_3)
        float_0 = 1898.72997
        float_1 = 482.302
        optional_0 = module_0.parse_forwarded(float_0, float_1)
    except BaseException:
        pass