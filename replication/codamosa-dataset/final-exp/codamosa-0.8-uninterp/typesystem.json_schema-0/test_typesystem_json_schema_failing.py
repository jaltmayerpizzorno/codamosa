# Automatically generated by Pynguin.
import typesystem.json_schema as module_0
import typesystem.schemas as module_1
import typesystem.fields as module_2

def test_case_0():
    try:
        str_0 = 'templates'
        bool_0 = True
        set_0 = None
        field_0 = module_0.from_json_schema(bool_0, set_0)
        dict_0 = {str_0: str_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_1 = module_0.if_then_else_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        schema_definitions_0 = module_1.SchemaDefinitions()
        str_0 = 'r,Ok\x0c'
        bool_0 = True
        field_0 = module_0.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'const'
        str_1 = 'test const'
        str_2 = {str_0: str_1}
        field_0 = module_0.const_from_json_schema(str_2, str_2)
        any_0 = field_0.validate(str_1)
        str_3 = 'test const2'
        any_1 = field_0.validate(str_3)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        bool_0 = True
        dict_0 = {tuple_0: tuple_0, tuple_0: tuple_0}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        validation_result_0 = field_0.validate_or_error(tuple_0, strict=bool_0)
        dict_1 = {tuple_0: validation_result_0, field_0: field_0}
        field_1 = module_0.all_of_from_json_schema(dict_1, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        schema_definitions_0 = None
        field_0 = module_0.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        type_0 = None
        var_0 = module_0.to_json_schema(type_0)
    except BaseException:
        pass

def test_case_6():
    try:
        field_0 = module_2.Field()
        var_0 = module_0.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_7():
    try:
        type_0 = None
        bytes_0 = b'u\xc8hP\xde\xb6'
        var_0 = module_0.to_json_schema(type_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'if'
        str_1 = 'then'
        dict_0 = {str_0: str_1}
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.from_json_schema(dict_0, schema_definitions_0)
        var_0 = module_0.to_json_schema(field_0, dict_0)
        any_0 = module_2.Any()
        schema_definitions_1 = module_1.SchemaDefinitions()
        field_1 = module_0.type_from_json_schema(dict_0, schema_definitions_1)
        var_1 = module_0.to_json_schema(field_1)
        field_2 = module_0.ref_from_json_schema(dict_0, schema_definitions_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'allOf'
        str_1 = '$ref'
        str_2 = {str_1: str_1}
        str_3 = 'type'
        str_4 = 'minimum'
        str_5 = 'maximum'
        str_6 = 'number'
        int_0 = 5
        int_1 = 10
        var_0 = {str_3: str_6, str_4: int_0, str_5: int_1}
        var_1 = [str_2, var_0]
        var_2 = {str_0: var_1}
        str_7 = 'item1'
        str_8 = 'minLength'
        str_9 = 'string'
        int_2 = 2
        var_3 = {str_3: str_9, str_8: int_2}
        var_4 = {str_7: var_3}
        field_0 = module_0.all_of_from_json_schema(var_2, var_4)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'type'
        str_1 = 'string'
        str_2 = {str_0: str_1}
        str_3 = {str_0: str_2}
        field_0 = module_0.from_json_schema(str_3)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'type'
        str_1 = {str_0: str_0}
        field_0 = module_0.from_json_schema(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'if'
        str_1 = 'thn'
        str_2 = 'else'
        str_3 = 'type'
        str_4 = 'integer'
        str_5 = {str_3: str_4}
        str_6 = 'OWl+0>jvoRm=l:'
        int_0 = 1
        var_0 = {str_3: str_4, str_6: int_0}
        any_0 = module_2.Any()
        var_1 = {str_0: str_5, str_1: var_0, str_2: any_0}
        var_2 = None
        field_0 = module_0.if_then_else_from_json_schema(var_1, var_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'if'
        str_1 = 'then'
        str_2 = 'default'
        str_3 = 'http://json-schema.org/draft-07/schema#'
        str_4 = 'string'
        str_5 = {str_1: str_4}
        str_6 = 'minLength'
        int_0 = 3
        int_1 = {str_6: int_0}
        str_7 = 'default string'
        var_0 = {str_2: str_3, str_0: str_5, str_1: int_1, str_2: str_7}
        var_1 = None
        field_0 = module_0.if_then_else_from_json_schema(var_0, var_1)
        any_0 = field_0.validate(var_1)
        str_8 = 'integer'
        int_2 = 1
        var_2 = {str_2: str_3, str_0: str_8, str_1: int_1, str_2: int_2}
        field_1 = module_0.if_then_else_from_json_schema(var_2, var_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'if'
        str_1 = 'then'
        str_2 = 'else'
        str_3 = '\x0c*cVyP\\-Xn./a yMrw'
        str_4 = 'inte4gjr'
        str_5 = {str_3: str_4}
        int_0 = 1
        var_0 = {str_3: str_4, str_2: int_0}
        any_0 = module_2.Any()
        var_1 = {str_0: str_5, str_1: var_0, str_2: any_0}
        var_2 = None
        field_0 = module_0.if_then_else_from_json_schema(var_1, var_2)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        choice_0 = module_2.Choice()
        var_0 = module_0.to_json_schema(choice_0)
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        schema_definitions_0 = module_1.SchemaDefinitions()
        field_0 = module_0.type_from_json_schema(dict_0, schema_definitions_0)
        schema_definitions_1 = module_1.SchemaDefinitions(*list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'if'
        reference_0 = module_1.Reference(str_0)
        var_0 = module_0.to_json_schema(reference_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 4
        string_0 = module_2.String(max_length=int_0, min_length=int_0)
        schema_definitions_0 = module_1.SchemaDefinitions()
        str_0 = 'definitions'
        str_1 = 'minLength'
        schema_definitions_0.__setitem__(str_0, str_1)
        var_0 = module_0.to_json_schema(schema_definitions_0)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = None
        list_0 = [dict_0]
        const_0 = module_2.Const(list_0)
        var_0 = module_0.to_json_schema(const_0)
        str_0 = 'Did not match any valid type.'
        var_1 = None
        str_1 = '\t[i\tkPP\r*r,\x0b;/*\rf!H'
        dict_1 = {str_0: var_1, str_1: var_1}
        schema_definitions_0 = module_1.SchemaDefinitions(**dict_1)
        field_0 = module_0.const_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass