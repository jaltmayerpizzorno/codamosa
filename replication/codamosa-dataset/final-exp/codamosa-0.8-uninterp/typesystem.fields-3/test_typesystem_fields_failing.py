# Automatically generated by Pynguin.
import typesystem.fields as module_0
import decimal as module_1

def test_case_0():
    try:
        integer_0 = None
        bool_0 = False
        field_0 = module_0.Field()
        validation_result_0 = field_0.validate_or_error(integer_0, strict=bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        str_0 = 'Hk|hhIIPT7vKh<M'
        field_0 = module_0.Field(title=str_0, description=str_0)
        dict_1 = {str_0: field_0, str_0: field_0}
        any_0 = field_0.serialize(field_0)
        object_0 = module_0.Object(properties=dict_1, **dict_0)
        any_1 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(boolean_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        string_0 = module_0.String()
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        var_0 = None
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, max_length=var_0, min_length=var_0, pattern=var_0, format=var_0)
        any_0 = string_0.validate(var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 3379.684
        number_0 = module_0.Number(multiple_of=float_0)
        any_0 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 3386.9864799785105
        number_0 = module_0.Number(maximum=float_0, exclusive_maximum=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        date_time_0 = None
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(date_time_0)
    except BaseException:
        pass

def test_case_8():
    try:
        array_0 = module_0.Array()
        any_0 = array_0.validate(array_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        str_0 = 'Hk|hhIIPT7vKh<M'
        any_0 = module_0.Any(title=str_0, default=str_0)
        any_1 = any_0.validate(dict_0)
        field_0 = module_0.Field(title=str_0, description=str_0)
        dict_1 = {str_0: field_0, str_0: field_0}
        int_0 = 739
        object_0 = module_0.Object(pattern_properties=dict_1, additional_properties=field_0, min_properties=int_0, max_properties=int_0)
        any_2 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = None
        int_0 = None
        text_0 = module_0.Text()
        bool_0 = False
        const_0 = module_0.Const(int_0)
        any_0 = const_0.validate(int_0, bool_0)
        number_0 = module_0.Number(maximum=int_0)
        bool_1 = False
        any_1 = number_0.validate(dict_0, strict=bool_1)
    except BaseException:
        pass

def test_case_11():
    try:
        integer_0 = module_0.Integer()
        bytes_0 = None
        const_0 = module_0.Const(integer_0)
        any_0 = const_0.validate(bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        field_0 = module_0.Field(title=str_0)
        str_1 = 'Matched more than one type.'
        bool_0 = True
        field_1 = module_0.Field(description=str_1, default=str_1, allow_null=bool_0)
        union_0 = field_1.__or__(field_0)
        any_0 = field_0.validate(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        field_0 = module_0.Field()
        any_0 = field_0.get_default_value()
        union_0 = field_0.__or__(field_0)
        time_0 = module_0.Time()
        bool_0 = True
        bool_1 = None
        const_0 = module_0.Const(bool_1)
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_1, pattern=const_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'Hk9|+hhIIYPT7vKh<M'
        int_0 = 756
        string_0 = module_0.String(min_length=int_0, pattern=str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        time_0 = module_0.Time(**dict_0)
        float_0 = -647.75539
        float_1 = module_0.Float(maximum=time_0, exclusive_minimum=float_0, **dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 3382.087622969469
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'Hk|hhIIPT7vKh<M'
        field_0 = module_0.Field(title=str_0, description=str_0)
        dict_0 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        dict_0 = {}
        bool_0 = False
        field_0 = module_0.Field(allow_null=bool_0)
        int_0 = None
        array_0 = module_0.Array(field_0, int_0, int_0, **dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        date_0 = module_0.Date()
        field_0 = module_0.Field()
        field_1 = module_0.Field()
        time_0 = module_0.Time()
        dict_0 = {}
        array_0 = module_0.Array(field_0, field_1, time_0, **dict_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        array_0 = module_0.Array(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        bool_0 = True
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '+XMz['
        str_1 = None
        field_0 = module_0.Field(title=str_0, description=str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        dict_0 = {}
        bool_0 = False
        str_0 = 'j'
        string_0 = module_0.String(trim_whitespace=bool_0, format=str_0)
        any_0 = string_0.validate(dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = 2584.271686337736
        str_0 = '<w^J~jr'
        number_0 = module_0.Number(maximum=float_0, exclusive_maximum=float_0, precision=str_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '>I=[@8^aDRwW'
        float_0 = -54.4336
        number_0 = module_0.Number(minimum=float_0, maximum=float_0, exclusive_minimum=float_0, multiple_of=float_0)
        bool_0 = True
        any_0 = number_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_26():
    try:
        integer_0 = module_0.Integer()
        float_0 = -54.4336
        number_0 = module_0.Number(minimum=float_0, exclusive_maximum=float_0)
        bool_0 = True
        array_0 = module_0.Array(number_0, bool_0)
        any_0 = array_0.serialize(integer_0)
    except BaseException:
        pass

def test_case_27():
    try:
        list_0 = []
        field_0 = module_0.Field(default=list_0)
        union_0 = module_0.Union(list_0)
        any_0 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_28():
    try:
        list_0 = []
        field_0 = module_0.Field(default=list_0)
        union_0 = field_0.__or__(field_0)
        any_0 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_29():
    try:
        field_0 = module_0.Field()
        any_0 = field_0.get_default_value()
        union_0 = field_0.__or__(field_0)
        any_1 = union_0.validate(any_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'Hk9|+hhIIPT7vKh<M'
        field_0 = module_0.Field(title=str_0, description=str_0)
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        int_0 = 779
        list_0 = [str_0, dict_0]
        object_0 = module_0.Object(min_properties=int_0, max_properties=int_0, required=list_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = 2152
        object_0 = module_0.Object(max_properties=int_0, required=int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '=\rz=l)'
        dict_0 = {}
        object_0 = module_0.Object(required=str_0, **dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        float_0 = 3386.9864799785105
        str_0 = '. N1TF'
        number_0 = module_0.Number(exclusive_maximum=float_0, precision=str_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = False
        field_0 = module_0.Field()
        float_0 = 3387.45
        number_0 = module_0.Number(maximum=float_0, exclusive_minimum=float_0)
        any_0 = number_0.validate(bool_0)
    except BaseException:
        pass

def test_case_35():
    try:
        union_0 = None
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(union_0)
    except BaseException:
        pass

def test_case_36():
    try:
        union_0 = None
        choice_0 = module_0.Choice()
        array_0 = module_0.Array()
        any_0 = array_0.serialize(union_0)
        any_1 = choice_0.validate(union_0)
    except BaseException:
        pass

def test_case_37():
    try:
        decimal_0 = module_1.Decimal()
        float_0 = 3387.45
        number_0 = module_0.Number(minimum=decimal_0, exclusive_maximum=float_0)
        str_0 = None
        field_0 = module_0.Field(title=str_0, description=str_0)
    except BaseException:
        pass

def test_case_38():
    try:
        float_0 = 3361.8600745623457
        number_0 = module_0.Number(exclusive_maximum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'a'
        str_1 = (str_0, str_0)
        str_2 = (str_0, str_0)
        float_0 = module_0.Float()
        str_3 = [str_1, str_1, str_2]
        choice_0 = module_0.Choice(choices=str_3)
        str_4 = 'a'
        any_0 = choice_0.validate(str_4)
        string_0 = module_0.String()
        array_0 = module_0.Array()
        any_1 = array_0.serialize(any_0)
        list_0 = [str_3, str_2, any_1, any_0]
        int_0 = 2568
        number_0 = module_0.Number(exclusive_maximum=list_0, multiple_of=int_0)
    except BaseException:
        pass

def test_case_40():
    try:
        dict_0 = {}
        float_0 = 3386.984915187207
        number_0 = module_0.Number()
        any_0 = number_0.validate(float_0)
        bool_0 = True
        text_0 = module_0.Text(**dict_0)
        string_0 = module_0.String(trim_whitespace=bool_0, max_length=text_0, **dict_0)
    except BaseException:
        pass

def test_case_41():
    try:
        dict_0 = {}
        bool_0 = True
        list_0 = [dict_0, bool_0, dict_0, bool_0]
        decimal_0 = module_0.Decimal(multiple_of=list_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '"EHT l^'
        string_0 = module_0.String(pattern=str_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'F'
        int_0 = -1877
        choice_0 = module_0.Choice()
        str_1 = '4!E\x0b\nRZ8_mg`q;"'
        bool_0 = False
        string_0 = module_0.String(allow_blank=bool_0, max_length=int_0, format=str_0)
        any_0 = string_0.validate(str_1)
    except BaseException:
        pass

def test_case_44():
    try:
        float_0 = 3386.9864799785105
        number_0 = module_0.Number(maximum=float_0, exclusive_minimum=float_0, exclusive_maximum=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_45():
    try:
        float_0 = None
        number_0 = module_0.Number(minimum=float_0, exclusive_minimum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_46():
    try:
        int_0 = -2593
        bool_0 = True
        bool_1 = False
        field_0 = None
        str_0 = '@KQsx!*\x0cI'
        field_1 = module_0.Field(description=str_0)
        str_1 = '0ffs[rH)l]bap!'
        bool_2 = True
        field_2 = module_0.Field(description=str_1, allow_null=bool_2)
        union_0 = field_2.__or__(field_1)
        any_0 = union_0.validate(field_0, bool_0)
        field_3 = module_0.Field(default=int_0, allow_null=bool_1)
        any_1 = field_3.validate(bool_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = 'oGC+|lp8Q;H%+LM'
        str_1 = 'bJK9Kz'
        field_0 = module_0.Field(title=str_0, description=str_1)
        bool_0 = field_0.has_default()
        str_2 = 'Lc$f*0(GD?M'
        any_0 = field_0.get_default_value()
        int_0 = 696
        bool_1 = True
        string_0 = module_0.String(trim_whitespace=bool_1, max_length=int_0, pattern=str_1)
        any_1 = string_0.validate(str_2)
    except BaseException:
        pass

def test_case_48():
    try:
        bytes_0 = b'8\x92\x95\xe5:j\x81\xb2\xd7\xf3\xf9\xdf\xc2\tgg\xb9\x8c'
        str_0 = '[ OA!tx=2nulw?.>VF'
        bool_0 = False
        field_0 = module_0.Field(description=str_0, allow_null=bool_0)
        dict_0 = {}
        array_0 = module_0.Array(field_0, field_0, bool_0, **dict_0)
        any_0 = array_0.serialize(bytes_0)
        float_0 = 3386.99
        number_0 = module_0.Number(minimum=float_0, maximum=float_0, exclusive_maximum=float_0, multiple_of=float_0)
        any_1 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_49():
    try:
        string_0 = module_0.String()
        boolean_0 = module_0.Boolean()
        integer_0 = module_0.Integer()
        var_0 = [string_0, boolean_0, integer_0]
        union_0 = module_0.Union(var_0)
        str_0 = 'Zest'
        any_0 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_50():
    try:
        dict_0 = {}
        bool_0 = False
        decimal_0 = module_1.Decimal(**dict_0)
        float_0 = module_0.Float(maximum=decimal_0)
        str_0 = 'j'
        int_0 = 180
        string_0 = module_0.String(trim_whitespace=bool_0, min_length=int_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_51():
    try:
        float_0 = 3386.9864799785105
        number_0 = module_0.Number(maximum=float_0, exclusive_maximum=float_0)
        int_0 = 5218
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_52():
    try:
        float_0 = -54.4336
        array_0 = module_0.Array()
        number_0 = module_0.Number(minimum=float_0, maximum=float_0, exclusive_minimum=float_0, exclusive_maximum=float_0)
        int_0 = -427
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = ''
        int_0 = None
        number_0 = module_0.Number(exclusive_minimum=int_0, precision=str_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_54():
    try:
        float_0 = 3386.9864799785105
        decimal_0 = module_0.Decimal(exclusive_minimum=float_0)
        bytes_0 = b'\x0c\x19\x8f\x04\x944'
        any_0 = decimal_0.serialize(bytes_0)
    except BaseException:
        pass

def test_case_55():
    try:
        bytes_0 = b'J-\xa3\x0b)\xa6\xb5\xfbO\xf8\xb2\x05+\x0b2\x11'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        dict_0 = {}
        array_0 = module_0.Array(list_0, **dict_0)
    except BaseException:
        pass

def test_case_56():
    try:
        float_0 = 2869.976
        number_0 = module_0.Number(minimum=float_0, maximum=float_0)
        object_0 = module_0.Object()
        any_0 = object_0.validate(float_0)
    except BaseException:
        pass

def test_case_57():
    try:
        float_0 = None
        bool_0 = False
        dict_0 = {}
        array_0 = module_0.Array(float_0, **dict_0)
        any_0 = array_0.validate(float_0, strict=bool_0)
    except BaseException:
        pass

def test_case_58():
    try:
        date_0 = module_0.Date()
        dict_0 = {}
        str_0 = "'^@8o[(q\r"
        field_0 = module_0.Field(title=str_0, description=str_0)
        str_1 = 'F'
        bool_0 = True
        int_0 = -1877
        string_0 = module_0.String(trim_whitespace=bool_0, min_length=int_0, format=str_0)
        any_0 = field_0.serialize(field_0)
        any_1 = string_0.validate(str_1)
        dict_1 = {str_0: field_0, str_1: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_1, additional_properties=field_0, max_properties=int_0, required=dict_0, **dict_0)
        any_2 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_59():
    try:
        list_0 = []
        string_0 = module_0.String(min_length=list_0)
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = 'a'
        str_1 = 'o'
        str_2 = (str_0, str_0)
        str_3 = 'C'
        str_4 = (str_3, str_3)
        str_5 = [str_2, str_2, str_4]
        choice_0 = module_0.Choice(choices=str_5)
        str_6 = 'a'
        any_0 = choice_0.validate(str_6)
        bool_0 = False
        field_0 = module_0.Field(allow_null=bool_0)
        dict_0 = {str_4: field_0, str_1: field_0}
        time_0 = module_0.Time()
        object_0 = module_0.Object(pattern_properties=dict_0, property_names=field_0, min_properties=time_0)
    except BaseException:
        pass

def test_case_61():
    try:
        float_0 = 3387.45
        list_0 = []
        dict_0 = {}
        union_0 = module_0.Union(list_0, **dict_0)
        text_0 = module_0.Text()
        array_0 = module_0.Array(**dict_0)
        int_0 = 696
        number_0 = module_0.Number(exclusive_minimum=float_0, **dict_0)
        number_1 = module_0.Number(minimum=int_0, exclusive_maximum=int_0, precision=number_0)
        string_0 = module_0.String(format=number_1)
    except BaseException:
        pass

def test_case_62():
    try:
        float_0 = 3435.5734649640312
        float_1 = 3379.6844624424793
        number_0 = module_0.Number(multiple_of=float_1)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_63():
    try:
        dict_0 = {}
        tuple_0 = ()
        array_0 = module_0.Array(tuple_0, **dict_0)
        str_0 = 'i!0=dUGD2&qX\tM\\`,'
        bool_0 = False
        field_0 = module_0.Field(description=str_0, allow_null=bool_0)
        object_0 = module_0.Object(property_names=field_0, max_properties=tuple_0, **dict_0)
    except BaseException:
        pass

def test_case_64():
    try:
        float_0 = -54.88776248294774
        int_0 = 4
        dict_0 = {}
        number_0 = module_0.Number(multiple_of=int_0, **dict_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_65():
    try:
        integer_0 = module_0.Integer()
        decimal_0 = module_0.Decimal(minimum=integer_0)
    except BaseException:
        pass

def test_case_66():
    try:
        float_0 = None
        int_0 = 9
        decimal_0 = module_0.Decimal(exclusive_maximum=int_0)
        const_0 = module_0.Const(float_0)
        any_0 = const_0.validate(int_0)
    except BaseException:
        pass

def test_case_67():
    try:
        str_0 = 'field_id'
        bool_0 = False
        string_0 = module_0.String(allow_blank=bool_0, pattern=str_0)
        any_0 = string_0.validate(str_0, strict=bool_0)
        field_0 = module_0.Field(allow_null=bool_0)
        bool_1 = field_0.has_default()
        str_1 = '_=J`+zD/`G'
        list_0 = [field_0]
        tuple_0 = None
        decimal_0 = module_0.Decimal(minimum=tuple_0)
        str_2 = '\rX^"\nk=l3"xop/UX\ng)'
        dict_0 = {str_1: decimal_0, str_1: str_0, str_2: list_0, str_0: field_0}
        union_0 = module_0.Union(list_0, **dict_0)
    except BaseException:
        pass

def test_case_68():
    try:
        dict_0 = {}
        str_0 = '-}b4B'
        field_0 = module_0.Field(description=str_0, default=str_0)
        date_0 = module_0.Date()
        const_0 = module_0.Const(str_0)
        object_0 = module_0.Object(min_properties=date_0, required=const_0, **dict_0)
    except BaseException:
        pass

def test_case_69():
    try:
        date_0 = module_0.Date()
        float_0 = -54.4336
        number_0 = module_0.Number(minimum=float_0, maximum=float_0, exclusive_minimum=float_0)
        int_0 = 5218
        bool_0 = True
        any_0 = number_0.validate(int_0, strict=bool_0)
    except BaseException:
        pass

def test_case_70():
    try:
        float_0 = 3386.9864799785105
        const_0 = module_0.Const(float_0)
        int_0 = 4
        number_0 = module_0.Number(exclusive_maximum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_71():
    try:
        int_0 = None
        tuple_0 = ()
        object_0 = module_0.Object(required=tuple_0)
        bool_0 = False
        any_0 = object_0.validate(int_0, strict=bool_0)
    except BaseException:
        pass

def test_case_72():
    try:
        str_0 = 'JZp#'
        field_0 = None
        str_1 = '\n    Must match exactly one of the sub-items.\n\n    You\'ll almost always want to just use `Union` instead of this, which is an\n    "anyOf" test.\n    '
        dict_0 = {str_0: field_0, str_1: field_0}
        object_0 = module_0.Object(properties=dict_0, additional_properties=field_0)
    except BaseException:
        pass

def test_case_73():
    try:
        dict_0 = None
        int_0 = None
        object_0 = module_0.Object(max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_74():
    try:
        dict_0 = {}
        str_0 = 'HkHhhIILT7Kh<M'
        field_0 = module_0.Field(title=str_0, description=str_0)
        object_0 = module_0.Object(additional_properties=field_0)
        str_1 = 'BZ07<d'
        field_1 = module_0.Field(description=str_1, default=str_1)
        union_0 = field_0.__or__(field_1)
        float_0 = -2982.2061
        number_0 = module_0.Number(exclusive_minimum=union_0, multiple_of=float_0, **dict_0)
    except BaseException:
        pass

def test_case_75():
    try:
        dict_0 = {}
        str_0 = 'Hk9|+hhIIYPT7vKh<M'
        field_0 = module_0.Field(title=str_0, description=str_0)
        int_0 = 756
        object_0 = module_0.Object(additional_properties=field_0, min_properties=int_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_76():
    try:
        str_0 = ''
        str_1 = {str_0: str_0}
        string_0 = module_0.String()
        object_0 = module_0.Object(properties=string_0)
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_77():
    try:
        date_0 = module_0.Date()
        dict_0 = {}
        str_0 = '/\nq+Cgox\x0c>XW@\r]/'
        list_0 = []
        dict_1 = {}
        union_0 = module_0.Union(list_0, **dict_1)
        integer_0 = module_0.Integer(precision=str_0)
        text_0 = module_0.Text(**dict_1)
        int_0 = 2756
        field_0 = None
        str_1 = 'Ov&[)AcGn$"(OVo< '
        str_2 = 'wnvZO6'
        dict_2 = {str_0: field_0, str_1: field_0, str_2: field_0, str_1: field_0}
        object_0 = module_0.Object(pattern_properties=dict_2, property_names=field_0, min_properties=int_0, **dict_0)
    except BaseException:
        pass

def test_case_78():
    try:
        dict_0 = {}
        str_0 = 'Hk|hhIIPT7vKh<M'
        field_0 = module_0.Field(title=str_0, description=str_0)
        dict_1 = {str_0: field_0, str_0: field_0}
        bool_0 = False
        object_0 = module_0.Object(additional_properties=bool_0, property_names=field_0, **dict_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_79():
    try:
        dict_0 = {}
        str_0 = 'Hk|hhIIPT7vKh<M'
        field_0 = module_0.Field(title=str_0, description=str_0)
        dict_1 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(properties=dict_1, **dict_0)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_80():
    try:
        array_0 = module_0.Array()
        str_0 = ''
        str_1 = {str_0: array_0, str_0: str_0, array_0: str_0}
        string_0 = module_0.String()
        object_0 = module_0.Object(properties=string_0)
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_81():
    try:
        dict_0 = {}
        str_0 = '2k,hhqIPT7vuh<M'
        field_0 = module_0.Field(title=str_0, description=str_0)
        dict_1 = {str_0: field_0}
        int_0 = 738
        object_0 = module_0.Object(pattern_properties=dict_1, **dict_0)
        str_1 = None
        str_2 = 'Sd'
        decimal_0 = module_0.Decimal(minimum=int_0, maximum=int_0)
        dict_2 = {str_2: dict_1, str_1: object_0, str_1: field_0, str_2: decimal_0}
        any_0 = object_0.validate(dict_2)
    except BaseException:
        pass

def test_case_82():
    try:
        str_0 = ''
        str_1 = {str_0: str_0}
        string_0 = module_0.String()
        string_1 = {str_0: string_0}
        object_0 = module_0.Object(properties=string_1)
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_83():
    try:
        dict_0 = {}
        bytes_0 = None
        float_0 = -3345.505867
        object_0 = module_0.Object(properties=bytes_0, additional_properties=float_0, **dict_0)
    except BaseException:
        pass

def test_case_84():
    try:
        str_0 = None
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0)
    except BaseException:
        pass

def test_case_85():
    try:
        string_0 = None
        float_0 = 3069.1
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0, float_0: float_0}
        decimal_0 = module_0.Decimal(exclusive_minimum=float_0, exclusive_maximum=float_0, precision=dict_0)
        any_0 = decimal_0.serialize(string_0)
        str_0 = '38'
        field_0 = module_0.Field(title=str_0)
        list_0 = [field_0, field_0, field_0]
        union_0 = module_0.Union(list_0)
        bool_0 = False
        field_1 = module_0.Field(default=bool_0, allow_null=bool_0)
        float_1 = 4406.58172
        int_0 = 432
        object_0 = module_0.Object(additional_properties=bool_0, property_names=field_1, min_properties=float_1, max_properties=int_0)
    except BaseException:
        pass

def test_case_86():
    try:
        str_0 = 'date'
        string_0 = module_0.String(format=str_0)
        str_1 = '2019-04-06'
        any_0 = string_0.serialize(str_1)
    except BaseException:
        pass

def test_case_87():
    try:
        boolean_0 = module_0.Boolean()
        integer_0 = module_0.Integer()
        var_0 = [boolean_0, integer_0]
        union_0 = module_0.Union(var_0)
        float_0 = -1919.7924220114498
        any_0 = union_0.validate(float_0)
    except BaseException:
        pass

def test_case_88():
    try:
        string_0 = module_0.String()
        boolean_0 = module_0.Boolean()
        integer_0 = module_0.Integer()
        var_0 = [boolean_0, integer_0, integer_0]
        union_0 = module_0.Union(var_0)
        str_0 = 't}\x0cSt'
        any_0 = union_0.validate(str_0)
    except BaseException:
        pass

def test_case_89():
    try:
        str_0 = 'c@'
        bool_0 = True
        field_0 = module_0.Field(description=str_0, default=str_0, allow_null=bool_0)
        bool_1 = False
        field_1 = module_0.Field(default=field_0, allow_null=bool_1)
        bool_2 = field_1.has_default()
        string_0 = module_0.String()
        bool_3 = False
        int_0 = 2272
        integer_0 = module_0.Integer(minimum=bool_3, maximum=int_0)
        dict_0 = {}
        array_0 = module_0.Array(field_0, integer_0, int_0, **dict_0)
        boolean_0 = module_0.Boolean()
        array_1 = module_0.Array(field_0, bool_3, int_0, int_0, int_0, bool_2)
        any_0 = array_1.serialize(boolean_0)
    except BaseException:
        pass

def test_case_90():
    try:
        dict_0 = {}
        tuple_0 = ()
        array_0 = module_0.Array(tuple_0, **dict_0)
        str_0 = '*X5tlP\x0cn\x0cV '
        field_0 = module_0.Field(description=str_0)
        list_0 = [field_0]
        union_0 = module_0.Union(list_0)
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_91():
    try:
        str_0 = ''
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        time_0 = module_0.Time()
        object_0 = module_0.Object(additional_properties=time_0)
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_92():
    try:
        int_0 = None
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(int_0)
        string_0 = module_0.String()
        any_1 = string_0.validate(int_0, strict=bool_0)
    except BaseException:
        pass

def test_case_93():
    try:
        str_0 = ''
        bool_0 = True
        boolean_0 = module_0.Boolean(description=str_0, allow_null=bool_0)
        any_0 = boolean_0.validate(str_0)
        str_1 = 'y";3w %p}y?wg\\<yoX'
        str_2 = 'uc\x0bJ.sLeI~W\x0b%,:}\n'
        str_3 = 'KB'
        field_0 = module_0.Field(title=str_2, description=str_3)
        any_1 = field_0.serialize(boolean_0)
        field_1 = module_0.Field(description=str_1)
        bool_1 = field_1.has_default()
        bool_2 = False
        any_2 = boolean_0.validate(any_0)
        bool_3 = False
        string_0 = module_0.String(allow_blank=bool_3)
        any_3 = string_0.validate(bool_2)
    except BaseException:
        pass

def test_case_94():
    try:
        str_0 = '2'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        time_0 = module_0.Time()
        object_0 = module_0.Object(additional_properties=time_0)
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_95():
    try:
        int_0 = 1
        int_1 = 3
        integer_0 = module_0.Integer()
        str_0 = '2'
        integer_1 = module_0.Integer()
        str_1 = ''
        integer_2 = module_0.Integer()
        array_0 = module_0.Array(integer_2)
        var_0 = [int_0, str_0, int_1, str_1]
        any_0 = array_0.validate(var_0)
    except BaseException:
        pass

def test_case_96():
    try:
        bool_0 = True
        var_0 = None
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, max_length=var_0, min_length=var_0, pattern=var_0, format=var_0)
        str_0 = 'abc'
        any_0 = string_0.validate(str_0)
        any_1 = string_0.validate(var_0)
        str_1 = ''
        any_2 = string_0.validate(str_1, strict=bool_0)
        any_3 = string_0.validate(var_0, strict=bool_0)
    except BaseException:
        pass

def test_case_97():
    try:
        str_0 = 'eu'
        str_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        time_0 = module_0.Time()
        bool_0 = False
        int_0 = None
        object_0 = module_0.Object(additional_properties=bool_0, max_properties=int_0)
        bool_1 = False
        any_0 = object_0.validate(str_1, strict=bool_1)
    except BaseException:
        pass

def test_case_98():
    try:
        var_0 = None
        int_0 = -6
        bool_0 = True
        array_0 = module_0.Array(var_0, bool_0, int_0, var_0, var_0, bool_0)
        var_1 = [bool_0, int_0, int_0, int_0, int_0]
        any_0 = array_0.validate(var_1, strict=bool_0)
    except BaseException:
        pass

def test_case_99():
    try:
        str_0 = 'a'
        str_1 = 'b'
        boolean_0 = module_0.Boolean()
        integer_0 = module_0.Integer()
        var_0 = {str_0: boolean_0, str_1: integer_0}
        str_2 = 'c'
        boolean_1 = module_0.Boolean()
        boolean_2 = {str_2: boolean_1}
        bool_0 = False
        var_1 = None
        var_2 = None
        var_3 = None
        str_3 = 'd'
        bool_1 = True
        int_0 = 3
        bool_2 = False
        var_4 = {str_0: bool_1, str_1: int_0, str_2: bool_2, str_3: bool_2}
        object_0 = module_0.Object(properties=var_0, pattern_properties=boolean_2, additional_properties=bool_0, min_properties=var_1, max_properties=var_2, required=var_3)
        any_0 = object_0.validate(var_4, strict=bool_2)
    except BaseException:
        pass

def test_case_100():
    try:
        str_0 = 'a'
        str_1 = 'b'
        boolean_0 = module_0.Boolean()
        integer_0 = module_0.Integer()
        var_0 = {str_0: boolean_0, str_1: integer_0}
        str_2 = 'c'
        boolean_1 = module_0.Boolean()
        boolean_2 = {str_2: boolean_1}
        bool_0 = False
        var_1 = None
        var_2 = None
        var_3 = None
        bool_1 = False
        object_0 = module_0.Object(properties=var_0, pattern_properties=boolean_2, additional_properties=bool_0, min_properties=var_1, max_properties=var_2, required=var_3)
        any_0 = object_0.validate(boolean_2, strict=bool_1)
    except BaseException:
        pass

def test_case_101():
    try:
        var_0 = None
        int_0 = 16
        bool_0 = False
        array_0 = module_0.Array(var_0, bool_0, int_0, var_0, var_0, bool_0)
        var_1 = [bool_0, int_0, int_0, int_0, int_0]
        any_0 = array_0.validate(var_1, strict=bool_0)
    except BaseException:
        pass

def test_case_102():
    try:
        time_0 = module_0.Time()
        int_0 = 16
        bool_0 = False
        array_0 = module_0.Array(time_0, bool_0, int_0, time_0, time_0, bool_0)
    except BaseException:
        pass

def test_case_103():
    try:
        text_0 = module_0.Text()
        str_0 = 'J6f(_F,n21XZ iY)3;Ju'
        list_0 = [str_0]
        decimal_0 = module_1.Decimal()
        tuple_0 = (list_0, decimal_0, decimal_0)
        choice_0 = module_0.Choice(choices=tuple_0)
    except BaseException:
        pass