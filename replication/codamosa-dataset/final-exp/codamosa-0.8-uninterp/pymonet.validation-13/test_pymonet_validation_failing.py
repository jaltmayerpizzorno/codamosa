# Automatically generated by Pynguin.
import pymonet.validation as module_0

def test_case_0():
    try:
        bool_0 = False
        set_0 = {bool_0}
        validation_0 = module_0.Validation(set_0, set_0)
        var_0 = validation_0.__eq__(validation_0)
        var_1 = validation_0.is_fail()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1627
        str_0 = 'Maybe[None]'
        validation_0 = module_0.Validation(int_0, str_0)
        var_0 = validation_0.__str__()
        int_1 = -4730
        tuple_0 = ()
        validation_1 = module_0.Validation(int_1, tuple_0)
        var_1 = validation_1.__str__()
        var_2 = validation_0.is_success()
        dict_0 = {}
        var_3 = validation_0.bind(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2059.28
        int_0 = -2293
        validation_0 = module_0.Validation(int_0, float_0)
        var_0 = validation_0.__str__()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "@\x0b'&-;[$;XvIBL"
        bool_0 = True
        validation_0 = module_0.Validation(str_0, bool_0)
        bytes_0 = b'\xe0'
        str_1 = 'W'
        validation_1 = module_0.Validation(bytes_0, str_1)
        var_0 = validation_1.to_either()
        var_1 = validation_0.to_maybe()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '25oI%o*)G,~\\'
        bool_0 = False
        validation_0 = module_0.Validation(str_0, bool_0)
        var_0 = validation_0.is_fail()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '`Yym\tin@'
        bool_0 = True
        validation_0 = module_0.Validation(str_0, bool_0)
        str_1 = '\n        :param constructor_fn: function to call during fold method call\n        :type constructor_fn: Function() -> A\n        '
        list_0 = [str_0, str_1]
        tuple_0 = (validation_0, bool_0, list_0)
        var_0 = validation_0.__eq__(tuple_0)
        float_0 = None
        var_1 = validation_0.map(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\xa6nJT|'
        str_0 = ''
        validation_0 = module_0.Validation(bytes_0, bytes_0)
        var_0 = validation_0.ap(str_0)
    except BaseException:
        pass