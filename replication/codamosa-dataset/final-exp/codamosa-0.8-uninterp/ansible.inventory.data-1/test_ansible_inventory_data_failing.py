# Automatically generated by Pynguin.
import ansible.inventory.data as module_0
import ansible.inventory.group as module_1
import ansible.inventory.host as module_2

def test_case_0():
    try:
        inventory_data_0 = module_0.InventoryData()
        float_0 = -322.9216
        var_0 = inventory_data_0.deserialize(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'test_group'
        var_0 = inventory_data_0.add_group(str_0)
        var_1 = inventory_data_0.add_group(str_0)
        str_1 = 'test_group_2'
        group_0 = module_1.Group(str_1)
        var_2 = inventory_data_0.add_group(group_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = None
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_group(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        inventory_data_0 = module_0.InventoryData()
        set_0 = {inventory_data_0, inventory_data_0}
        int_0 = 1159
        var_0 = inventory_data_0.add_host(set_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        list_0 = []
        str_0 = 'co%CfA=#Cf'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_host(list_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_host(list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 2085
        list_0 = []
        bool_0 = True
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.set_variable(int_0, list_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b''
        str_0 = ' FRYK9U'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.add_child(bytes_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        str_0 = '~f[(\rMAgpzN\n.";_;b'
        var_1 = inventory_data_0.get_host(str_0)
        inventory_data_1 = module_0.InventoryData()
        var_2 = inventory_data_1.get_groups_dict()
        inventory_data_2 = module_0.InventoryData()
        var_3 = inventory_data_0.serialize()
        var_4 = inventory_data_1.get_groups_dict()
        set_0 = None
        var_5 = inventory_data_0.add_host(str_0, set_0)
        var_6 = inventory_data_0.serialize()
        str_1 = 'ungrouped'
        var_7 = inventory_data_2.remove_host(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'lcalos'
        str_1 = 'all'
        var_0 = inventory_data_0.add_host(str_0, str_1)
        str_2 = 'bar'
        var_1 = inventory_data_0.reconcile_inventory()
        str_3 = 'T$]'
        var_2 = inventory_data_0.add_group(str_3)
        str_4 = "Ed'fq.0a?=PK"
        var_3 = inventory_data_0.remove_group(str_4)
        var_4 = str_4.groups[str_2]
    except BaseException:
        pass

def test_case_10():
    try:
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.reconcile_inventory()
        var_1 = inventory_data_0.serialize()
        str_0 = '~f[(\rMAgpzN\n.";_;b'
        var_2 = inventory_data_0.get_host(str_0)
        inventory_data_1 = module_0.InventoryData()
        var_3 = inventory_data_1.get_groups_dict()
        var_4 = inventory_data_1.reconcile_inventory()
        bytes_0 = None
        dict_0 = {inventory_data_0: bytes_0, var_0: var_4, var_2: str_0}
        var_5 = inventory_data_0.deserialize(dict_0)
        inventory_data_2 = module_0.InventoryData()
        int_0 = -4557
        var_6 = inventory_data_0.serialize()
        var_7 = inventory_data_0.remove_group(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'groupA'
        var_0 = inventory_data_0.add_group(str_0)
        str_1 = 'groupB'
        var_1 = inventory_data_0.add_group(str_1)
        str_2 = 'mips64r6el'
        float_0 = -459.2
        var_2 = inventory_data_0.add_host(str_2, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'all'
        inventory_data_0 = module_0.InventoryData()
        var_0 = inventory_data_0.remove_group(str_0)
        bool_0 = True
        bytes_0 = b'\\\xc1C#\x06\xb9\x1c'
        inventory_data_1 = module_0.InventoryData()
        var_1 = inventory_data_1.add_child(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'host_a'
        host_0 = module_2.Host(str_0)
        host_1 = module_2.Host(str_0)
        var_0 = inventory_data_0.add_host(str_0)
        var_1 = inventory_data_0.add_host(str_0)
        str_1 = 'group_a'
        var_2 = inventory_data_0.add_group(str_1)
        var_3 = inventory_data_0.remove_host(host_0)
        var_4 = inventory_data_0.add_host(str_0)
        var_5 = inventory_data_0.add_child(str_1, str_0)
        var_6 = inventory_data_0.remove_host(host_0)
    except BaseException:
        pass

def test_case_14():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'host_a'
        str_1 = 'host_b'
        host_0 = module_2.Host(str_1)
        var_0 = inventory_data_0.add_host(str_1)
        str_2 = 'group_a'
        var_1 = inventory_data_0.add_group(str_2)
        var_2 = inventory_data_0.reconcile_inventory()
        var_3 = inventory_data_0.add_child(str_2, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'group_a'
        var_0 = inventory_data_0.add_group(str_0)
        var_1 = inventory_data_0.reconcile_inventory()
        var_2 = inventory_data_0.add_host(str_0)
        var_3 = inventory_data_0.reconcile_inventory()
        var_4 = inventory_data_0.add_
    except BaseException:
        pass

def test_case_16():
    try:
        inventory_data_0 = module_0.InventoryData()
        str_0 = 'all'
        var_0 = inventory_data_0.add_host(str_0, str_0)
        var_1 = inventory_data_0.reconcile_inventory()
    except BaseException:
        pass