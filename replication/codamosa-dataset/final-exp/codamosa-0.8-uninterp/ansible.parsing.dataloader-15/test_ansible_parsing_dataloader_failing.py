# Automatically generated by Pynguin.
import ansible.parsing.dataloader as module_0

def test_case_0():
    try:
        dict_0 = {}
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.load(dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        data_loader_0 = module_0.DataLoader()
        dict_0 = {data_loader_0: data_loader_0}
        var_0 = data_loader_0.load_from_file(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        data_loader_0 = module_0.DataLoader()
        list_0 = []
        var_0 = data_loader_0.is_executable(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '~/esging/roes/test/tasks/main.yml'
        var_0 = data_loader_0.path_dwim_relative_stack(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'+\x877w\xec\xf5\xdb\x9e'
        str_0 = 'Sg~726^V2$UI$_D5'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.path_dwim_relative_stack(bytes_0, bytes_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = "T'pwQ$sVJ':"
        dict_0 = None
        data_loader_1 = module_0.DataLoader()
        var_0 = data_loader_1.path_dwim_relative_stack(data_loader_0, str_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = 'BV}H'
        var_0 = data_loader_0.get_real_file(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        data_loader_0 = module_0.DataLoader()
        set_0 = {data_loader_0}
        bool_0 = True
        var_0 = data_loader_0.get_real_file(set_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = None
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.set_basedir(bytes_0)
        str_0 = ' @%\n%>=~'
        bool_0 = False
        var_1 = data_loader_0.load(str_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = 'sbnaOX6ur8FNK>M\nATh'
        var_0 = data_loader_0.path_dwim_relative_stack(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '.'
        var_0 = data_loader_0.find_vars_files(str_0, str_0)
        data_loader_1 = module_0.DataLoader()
        tuple_0 = ()
        data_loader_2 = module_0.DataLoader()
        var_1 = data_loader_2.get_real_file(tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        data_loader_0 = module_0.DataLoader()
        bool_0 = False
        str_0 = None
        list_0 = []
        var_0 = data_loader_0.path_dwim_relative_stack(bool_0, str_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '~mU.* 5KOE#!s'
        var_0 = data_loader_0.get_real_file(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = {}
        int_0 = None
        data_loader_0 = module_0.DataLoader()
        str_0 = 'u1!&*\'c-XV+"-/'
        var_0 = data_loader_0.set_vault_secrets(str_0)
        var_1 = data_loader_0.get_basedir()
        bool_0 = False
        tuple_0 = (bool_0,)
        complex_0 = None
        tuple_1 = (bool_0, tuple_0, complex_0, int_0)
        var_2 = data_loader_0.set_vault_secrets(tuple_1)
        data_loader_1 = module_0.DataLoader()
        var_3 = data_loader_1.load_from_file(dict_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '.'
        var_0 = data_loader_0.load_from_file(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '.'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_real_file(str_0)
    except BaseException:
        pass