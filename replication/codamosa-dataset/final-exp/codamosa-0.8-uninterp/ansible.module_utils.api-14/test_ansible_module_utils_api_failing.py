# Automatically generated by Pynguin.
import ansible.module_utils.api as module_0

def test_case_0():
    try:
        float_0 = -2155.1
        set_0 = {float_0, float_0, float_0, float_0}
        var_0 = module_0.generate_jittered_backoff(set_0)
        dict_0 = {}
        var_1 = module_0.rate_limit_argument_spec(dict_0)
        bool_0 = True
        var_2 = module_0.rate_limit_argument_spec()
        str_0 = 'Abstract base class for version numbering classes.  Just provides\n    constructor (__init__) and reproducer (__repr__), because those\n    seem to be the same for all version numbering classes; and route\n    rich comparisons to _cmp.\n    '
        var_3 = module_0.generate_jittered_backoff(float_0, bool_0, str_0)
        bytes_0 = b'\xa2Q\xacy\x95%w\xe7\xdf\x02\x12sI{\xe7\xf9\xb201\xb1'
        var_4 = module_0.basic_auth_argument_spec()
        var_5 = module_0.retry_argument_spec()
        float_1 = 1000.0
        bool_1 = None
        tuple_0 = (float_1, bool_1, bytes_0)
        var_6 = module_0.rate_limit_argument_spec(tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.generate_jittered_backoff()
        str_0 = '\n^R#2'
        var_1 = module_0.retry_argument_spec(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = module_0.generate_jittered_backoff()
        bool_0 = True
        list_0 = [bool_0, bool_0]
        var_1 = module_0.generate_jittered_backoff(bool_0, list_0)
        float_0 = 2949.94964
        list_1 = [float_0]
        var_2 = module_0.generate_jittered_backoff(list_1)
        float_1 = -1644.0
        var_3 = module_0.basic_auth_argument_spec(float_1)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x03\x18\x1d\x1c\xf9\xfc\xee\xbd\xad'
        int_0 = 200
        var_0 = module_0.retry()
        var_1 = module_0.rate_limit(bytes_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = None
        bool_0 = False
        var_0 = module_0.rate_limit(bool_0, tuple_0)
        var_1 = module_0.retry_argument_spec(tuple_0)
        var_2 = module_0.rate_limit()
    except BaseException:
        pass