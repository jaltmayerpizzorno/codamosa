# Automatically generated by Pynguin.
import ansible.module_utils.common.dict_transformations as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 758
    var_0 = module_0.snake_dict_to_camel_dict(int_0)

def test_case_2():
    str_0 = '&#D[A%d_J'
    var_0 = module_0.snake_dict_to_camel_dict(str_0)
    dict_0 = {str_0: str_0, str_0: str_0}
    var_1 = module_0.snake_dict_to_camel_dict(dict_0)
    var_2 = module_0.snake_dict_to_camel_dict(dict_0, var_1)

def test_case_3():
    int_0 = -3399
    bool_0 = None
    var_0 = module_0.snake_dict_to_camel_dict(bool_0)
    list_0 = [int_0]
    list_1 = [list_0, list_0, int_0]
    bytes_0 = None
    var_1 = module_0.dict_merge(list_1, bytes_0)

def test_case_4():
    str_0 = 'MTTEnpoint'
    str_1 = {str_0: str_0}
    var_0 = module_0.camel_dict_to_snake_dict(str_1, str_1)

def test_case_5():
    var_0 = object()
    int_0 = 1
    var_1 = dict(camel=var_0)
    var_2 = dict(CamelSub=int_0)
    var_3 = dict(CamelCase=int_0, CamelCaseCamel=var_2)
    var_4 = dict(camel=var_0)
    var_5 = module_0.camel_dict_to_snake_dict(var_3)

def test_case_6():
    str_0 = ']Ro"$('
    list_0 = [str_0, str_0]
    var_0 = module_0.dict_merge(str_0, list_0)

def test_case_7():
    bool_0 = True
    dict_0 = {bool_0: bool_0}
    var_0 = module_0.dict_merge(dict_0, dict_0)

def test_case_8():
    str_0 = 'a'
    str_1 = 'b'
    str_2 = 'x'
    str_3 = 'y'
    str_4 = 'z'
    int_0 = 2
    int_1 = 3
    int_2 = {str_2: int_1, str_3: int_0, str_4: int_1}
    int_3 = {str_0: int_2, str_1: int_0}
    str_5 = 'c'
    str_6 = 'w'
    int_4 = 10
    int_5 = {str_6: int_4}
    int_6 = 20
    int_7 = {str_0: int_5, str_1: int_6, str_5: int_1}
    var_0 = module_0.dict_merge(int_3, int_7)

def test_case_9():
    var_0 = {}
    var_1 = module_0.recursive_diff(var_0, var_0)

def test_case_10():
    var_0 = dict()
    var_1 = dict()
    var_2 = module_0.recursive_diff(var_0, var_1)
    int_0 = 1234
    var_3 = dict(abcd=int_0)
    var_4 = dict(abcd=int_0)
    var_5 = module_0.recursive_diff(var_3, var_4)
    int_1 = 4321
    var_6 = dict(abcd=int_1)
    var_7 = dict(abcd=int_0)
    var_8 = module_0.recursive_diff(var_6, var_7)
    var_9 = dict(abcd=int_0)
    var_10 = var_7

def test_case_11():
    var_0 = object()
    int_0 = 1
    str_0 = 'camel'
    str_1 = [str_0]
    var_1 = dict(camel=var_0)
    var_2 = dict(Camel=var_0, camel=str_1, CamelDict=var_1)
    var_3 = dict(CamelSub=var_2)
    var_4 = dict(CamelCase=int_0, CamelCaseCamel=var_3)
    dict_0 = {var_0: int_0, str_0: var_2}
    var_5 = module_0.recursive_diff(dict_0, dict_0)
    str_2 = [str_0]
    var_6 = dict(camel=var_0)
    var_7 = dict(Camel=var_0, camel=str_2, camel_dict=var_6)
    var_8 = dict(camel_sub=var_7)
    var_9 = dict(camel_case=int_0, camel_case_camel=var_8)
    var_10 = module_0.camel_dict_to_snake_dict(var_4)

def test_case_12():
    str_0 = 'X'
    str_1 = 'z'
    str_2 = 'x'
    str_3 = 'y'
    int_0 = 1
    int_1 = 2
    int_2 = {str_2: int_0, str_3: int_1}
    int_3 = 3
    int_4 = {str_0: int_2, str_1: int_3}
    int_5 = {str_2: int_0, str_3: int_1}
    int_6 = 4
    int_7 = {str_0: int_5, str_1: int_6}
    var_0 = module_0.recursive_diff(int_4, int_7)
    int_8 = {str_2: int_0, str_3: int_1}
    int_9 = {str_0: int_8, str_1: int_3}
    int_10 = {str_3: int_1}
    int_11 = {str_0: int_10, str_1: int_3}
    var_1 = module_0.recursive_diff(int_9, int_11)

def test_case_13():
    var_0 = dict()
    var_1 = dict()
    var_2 = module_0.recursive_diff(var_0, var_1)
    int_0 = 1234
    var_3 = dict(abcd=var_1)
    var_4 = dict(abcd=int_0)
    var_5 = module_0.recursive_diff(var_3, var_4)
    int_1 = 4321
    var_6 = dict(abcd=int_1)
    var_7 = dict(abcd=int_0)
    var_8 = module_0.recursive_diff(var_6, var_7)
    var_9 = dict(abcd=int_0)
    var_10 = var_7

def test_case_14():
    str_0 = 'track_submodules'
    str_1 = '|G/'
    int_0 = None
    bool_0 = False
    var_0 = module_0.dict_merge(int_0, bool_0)
    var_1 = module_0.snake_dict_to_camel_dict(str_1)
    dict_0 = {str_0: str_0, str_0: str_0}
    var_2 = module_0.snake_dict_to_camel_dict(dict_0)
    var_3 = module_0.camel_dict_to_snake_dict(dict_0)
    var_4 = module_0.snake_dict_to_camel_dict(dict_0, var_2)
    dict_1 = {}
    var_5 = module_0.recursive_diff(dict_1, dict_0)

def test_case_15():
    str_0 = 'k.Mey1'
    str_1 = 'key2'
    str_2 = 'value1'
    str_3 = 'value2'
    str_4 = {str_0: str_2, str_1: str_3}
    str_5 = 'key3'
    str_6 = 'value3'
    str_7 = {str_0: str_2, str_5: str_6}
    var_0 = module_0.recursive_diff(str_4, str_7)

def test_case_16():
    str_0 = '\ngreeting'
    str_1 = 'recursive'
    str_2 = 'hello'
    str_3 = {str_0: str_2}
    str_4 = {str_0: str_2, str_1: str_3}
    str_5 = {str_0: str_2, str_1: str_4}
    str_6 = 'hi'
    str_7 = {str_0: str_2}
    str_8 = {str_0: str_6, str_1: str_7}
    str_9 = {str_0: str_6, str_1: str_8}
    var_0 = module_0.dict_merge(str_5, str_9)

def test_case_17():
    bool_0 = False
    set_0 = {bool_0, bool_0, bool_0}
    tuple_0 = None
    var_0 = module_0.dict_merge(set_0, tuple_0)
    var_1 = object()
    int_0 = 1
    str_0 = 'camel'
    str_1 = [str_0]
    var_2 = dict(camel=var_1)
    var_3 = dict(CamelCase=int_0, CamelCaseCamel=var_2)
    list_0 = [var_2, str_1, var_2, var_0]
    var_4 = module_0.snake_dict_to_camel_dict(list_0)
    var_5 = dict(Camel=var_1, camel=var_2, camel_dict=var_4)
    var_6 = dict(camel_case=int_0, camel_case_camel=str_0)
    var_7 = module_0.camel_dict_to_snake_dict(var_5, var_5)

def test_case_18():
    str_0 = 'List'
    str_1 = 'HTTPEndpoint'
    str_2 = 'Tags'
    str_3 = 'Location'
    str_4 = 'Tag'
    int_0 = 1
    int_1 = {str_4: int_0}
    str_5 = 'HTTPResponse'
    str_6 = '200'
    str_7 = {str_5: str_6}
    str_8 = 'CamelCase'
    str_9 = 'True'
    str_10 = {str_8: str_9}
    str_11 = 'a'
    str_12 = {str_3: str_11}
    var_0 = [int_1, str_7, str_10, str_12]
    var_1 = {str_4: int_0, str_1: str_11}
    str_13 = 'b'
    var_2 = {str_0: var_0, str_1: str_11, str_2: var_1, str_3: str_13}
    bool_0 = True
    var_3 = module_0.camel_dict_to_snake_dict(var_2, bool_0, str_2)