# Automatically generated by Pynguin.
import cookiecutter.prompt as module_0
import json as module_1

def test_case_0():
    try:
        str_0 = '&7Yj,\x0b\\y" \x0cK'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.read_user_variable(str_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = -666.36
        list_0 = [float_0, float_0, float_0, float_0]
        var_0 = module_0.read_user_yes_no(float_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '>d\x0bDOa?J qx.Ly?'
        var_0 = module_0.read_repo_password(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2566
        var_0 = module_0.read_user_choice(int_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = None
        var_0 = module_0.process_json(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'foo_bar_dict'
        var_0 = module_0.read_user_dict(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = None
        set_0 = {int_0, int_0, int_0, int_0}
        list_0 = [int_0, set_0, set_0, set_0]
        var_0 = module_0.render_variable(int_0, set_0, list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 3
        str_0 = ''
        bool_0 = False
        bool_1 = False
        tuple_0 = (bool_0, bool_1)
        bytes_0 = b'\xac\xd5]$;E'
        var_0 = module_0.prompt_choice_for_config(int_0, str_0, bool_0, tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        str_1 = 'o513\x0cVE+)'
        dict_0 = None
        list_0 = []
        var_0 = module_0.prompt_choice_for_config(str_0, str_1, dict_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 1
        str_0 = ''
        var_0 = module_0.prompt_for_config(int_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'br7^gHKHk'
        float_0 = 1324.5703
        int_0 = -398
        float_1 = 1248.6
        tuple_0 = (int_0, float_1)
        bytes_0 = b'\xdc'
        list_0 = [str_0, float_1]
        var_0 = module_0.prompt_choice_for_config(float_0, tuple_0, bytes_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        list_0 = [bool_0]
        str_0 = 'I3V}pD\\&bOw"j_PAcj{'
        tuple_0 = (list_0, str_0, bool_0)
        str_1 = 'e =f9?C'
        str_2 = '<;1rTEpY-Q'
        float_0 = 536.9
        var_0 = module_0.prompt_choice_for_config(str_1, str_2, float_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'test'
        str_1 = None
        strict_environment_0 = None
        var_0 = module_0.render_variable(str_1, strict_environment_0, str_1)
        var_1 = module_0.read_user_dict(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 344
        str_0 = 'Hook script failed (exit status: {})'
        str_1 = None
        dict_0 = {str_1: int_0, str_0: int_0}
        dict_1 = {str_1: int_0}
        var_0 = module_0.render_variable(int_0, dict_0, dict_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        list_0 = [bool_0]
        bool_1 = False
        var_0 = module_0.read_user_choice(bool_1, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        var_0 = module_0.read_user_dict(dict_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 1970
        float_0 = 1568.739509
        dict_0 = {}
        float_1 = -2693.7
        var_0 = module_0.render_variable(float_0, dict_0, float_1)
        set_0 = {int_0}
        var_1 = module_0.prompt_for_config(set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        list_0 = []
        str_0 = 'I3V}pD\\&bOw"j_PAcj{'
        tuple_0 = (list_0, str_0, bool_0)
        str_1 = 'e =f9?C'
        str_2 = '<;1rTEpY-Q'
        float_0 = 536.9
        var_0 = module_0.prompt_choice_for_config(str_1, str_2, float_0, tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '{"test1": "test2", "test3": [{"test4": "test5"}]}'
        var_0 = module_0.process_json(str_0)
        var_1 = module_1.dumps(str_0)
        var_2 = module_0.process_json(var_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '{"test1": "test2", "test3": [{"test4": "test5"}]}'
        str_1 = 'test5'
        str_2 = {str_0: str_1}
        var_0 = module_0.process_json(str_0)
        var_1 = module_0.process_json(str_2)
    except BaseException:
        pass