# Automatically generated by Pynguin.
import typesystem.fields as module_0
import decimal as module_1
import re as module_2

def test_case_0():
    try:
        float_0 = 1435.28
        field_0 = module_0.Field()
        validation_result_0 = field_0.validate_or_error(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'regex'
        choice_0 = module_0.Choice()
        field_0 = module_0.Field(default=str_0)
        any_0 = field_0.serialize(choice_0)
        any_1 = choice_0.validate(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        integer_0 = module_0.Integer()
        any_0 = integer_0.validate(integer_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        int_0 = 1285
        str_0 = "6'u0Nt_.$Lq"
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, max_length=int_0, min_length=int_0, format=str_0)
        any_0 = string_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        integer_0 = module_0.Integer()
        string_0 = module_0.String()
        var_0 = [integer_0, string_0, string_0]
        union_0 = module_0.Union(var_0)
        any_0 = union_0.validate(integer_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '3\no\t|nIc'
        bool_0 = True
        int_0 = 3080
        number_0 = module_0.Number(exclusive_minimum=int_0)
        any_0 = number_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 34
        integer_0 = module_0.Integer(exclusive_minimum=int_0, multiple_of=int_0)
        any_0 = integer_0.validate(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 1495.1
        bool_0 = False
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '|n\tE\x0b\nrm>X#'
        bool_0 = True
        bool_1 = False
        boolean_0 = module_0.Boolean(allow_null=bool_1)
        any_0 = boolean_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'q@Tn.o.er/u97<9^'
        field_0 = module_0.Field()
        boolean_0 = module_0.Boolean(description=str_0)
        any_0 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1065
        const_0 = None
        dict_0 = {}
        object_0 = module_0.Object(properties=const_0, min_properties=int_0, max_properties=int_0, required=dict_0)
        any_0 = object_0.validate(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -1574
        array_0 = module_0.Array(int_0, int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 1065
        array_0 = module_0.Array()
        any_0 = array_0.validate(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        text_0 = module_0.Text()
        list_0 = []
        union_0 = module_0.Union(list_0)
        any_0 = union_0.validate(text_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        list_0 = [bool_0]
        str_0 = 'f'
        dict_0 = {str_0: bool_0, str_0: bool_0}
        const_0 = module_0.Const(list_0, **dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        decimal_0 = module_1.Decimal()
        date_0 = module_0.Date()
        str_0 = "\nXAEgTA&I!_#'D"
        bool_0 = True
        bool_1 = False
        int_0 = 1044
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_1, max_length=int_0, min_length=int_0, format=str_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        int_0 = 1
        string_0 = module_0.String(trim_whitespace=bool_0, min_length=int_0)
        str_0 = 'Hntvzk!`M-\t[sZco-'
        field_0 = module_0.Field(description=str_0)
        any_0 = field_0.serialize(bool_0)
        any_1 = string_0.validate(str_0, strict=bool_0)
        any_2 = string_0.validate(bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        date_time_0 = module_0.DateTime()
        str_0 = 'no_match'
        field_0 = module_0.Field(title=str_0)
        dict_0 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(properties=dict_0)
        dict_1 = {}
        integer_0 = module_0.Integer(exclusive_maximum=object_0, precision=str_0, **dict_1)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 9
        number_0 = module_0.Number(maximum=int_0, multiple_of=int_0)
        any_0 = number_0.validate(int_0)
        integer_0 = module_0.Integer(maximum=int_0, exclusive_minimum=int_0)
        time_0 = None
        any_1 = integer_0.validate(time_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        int_0 = -2229
        integer_0 = module_0.Integer(minimum=int_0)
        string_0 = module_0.String(max_length=int_0)
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(bool_0)
        var_0 = [integer_0]
        array_0 = module_0.Array(var_0, string_0, int_0, int_0, bool_0)
        dict_0 = {array_0: var_0, bool_0: var_0, int_0: integer_0}
        dict_1 = {int_0: integer_0, string_0: int_0, array_0: array_0, int_0: dict_0}
        any_1 = array_0.validate(dict_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '3\nos\t|n'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(properties=dict_0, additional_properties=field_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '3\no\t|nIc'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        optional_0 = None
        optional_1 = None
        dict_0 = {}
        time_0 = module_0.Time()
        bool_0 = True
        field_0 = module_0.Field(default=optional_0, allow_null=bool_0)
        object_0 = module_0.Object(properties=optional_0, min_properties=optional_1, **dict_0)
        str_0 = 'Must be a boolean.'
        list_0 = [str_0, time_0]
        int_0 = 397
        array_0 = module_0.Array(list_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 579
        list_0 = [int_0]
        field_0 = module_0.Field()
        array_0 = module_0.Array(field_0)
        any_0 = array_0.validate(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'xql~#XiN"\n5W&HyT;D\x0br'
        text_0 = None
        tuple_0 = (str_0, text_0)
        field_0 = module_0.Field()
        dict_0 = {field_0: field_0}
        const_0 = module_0.Const(dict_0)
        any_0 = const_0.validate(tuple_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1065
        const_0 = None
        dict_0 = {}
        object_0 = module_0.Object(properties=const_0, min_properties=int_0, max_properties=int_0, required=dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_27():
    try:
        text_0 = module_0.Text()
        date_time_0 = module_0.DateTime()
        field_0 = module_0.Field(default=date_time_0)
        int_0 = 4201
        list_0 = [date_time_0]
        string_0 = module_0.String(min_length=int_0, pattern=list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 183
        integer_0 = module_0.Integer(multiple_of=int_0)
        str_0 = ''
        any_0 = integer_0.validate(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        text_0 = module_0.Text()
        bytes_0 = b'\x92\x8c\xdd\xd3\x99\xa4\xdf\xf5\xbd\x99\x85%@'
        date_time_0 = module_0.DateTime()
        decimal_0 = module_1.Decimal()
        number_0 = module_0.Number(maximum=decimal_0, exclusive_minimum=decimal_0, multiple_of=decimal_0)
        dict_0 = {date_time_0: bytes_0, date_time_0: date_time_0, number_0: bytes_0}
        string_0 = module_0.String(min_length=dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        validation_error_0 = None
        bool_0 = True
        int_0 = 1285
        str_0 = "6'u0Nt_.$Lq"
        string_0 = module_0.String(allow_blank=bool_0, trim_whitespace=bool_0, max_length=int_0, min_length=int_0, format=str_0)
        any_0 = string_0.validate(validation_error_0)
        decimal_0 = module_0.Decimal(minimum=int_0)
        field_0 = module_0.Field(title=str_0, default=decimal_0)
        array_0 = module_0.Array(field_0, int_0, int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        int_0 = -3403
        str_0 = 'S{i$wTj!6R|FH3'
        integer_0 = module_0.Integer(exclusive_minimum=int_0, precision=str_0, multiple_of=int_0)
        field_0 = module_0.Field(default=integer_0)
        str_1 = None
        bool_0 = False
        boolean_0 = module_0.Boolean(description=str_1, default=field_0, allow_null=bool_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = ''
        int_0 = 539
        dict_0 = {}
        string_0 = module_0.String(max_length=int_0, pattern=str_0, format=str_0, **dict_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 579
        field_0 = module_0.Field()
        array_0 = module_0.Array(field_0)
        decimal_0 = module_0.Decimal(multiple_of=int_0)
        any_0 = decimal_0.serialize(int_0)
        any_1 = array_0.serialize(int_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bytes_0 = None
        bool_0 = True
        array_0 = module_0.Array()
        object_0 = None
        any_0 = array_0.serialize(object_0)
        any_1 = array_0.validate(bytes_0, strict=bool_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bool_0 = True
        int_0 = -2229
        integer_0 = module_0.Integer(minimum=int_0)
        string_0 = module_0.String(max_length=int_0)
        var_0 = [integer_0]
        array_0 = module_0.Array(var_0, string_0, int_0, int_0, bool_0)
        any_0 = integer_0.validate(bool_0)
    except BaseException:
        pass

def test_case_36():
    try:
        optional_0 = None
        optional_1 = None
        dict_0 = {}
        time_0 = module_0.Time()
        str_0 = '8z]1&'
        field_0 = module_0.Field(title=str_0, default=dict_0)
        bool_0 = True
        field_1 = module_0.Field(default=optional_0, allow_null=bool_0)
        union_0 = field_1.__or__(field_0)
        any_0 = union_0.validate(optional_0)
        object_0 = module_0.Object(properties=optional_0, min_properties=optional_1, **dict_0)
        str_1 = 'Must be a boolean.'
        list_0 = [str_1, time_0]
        int_0 = 397
        bool_1 = False
        array_0 = module_0.Array(list_0, int_0, bool_1)
    except BaseException:
        pass

def test_case_37():
    try:
        integer_0 = module_0.Integer()
        string_0 = module_0.String()
        var_0 = [integer_0, string_0]
        union_0 = module_0.Union(var_0)
        int_0 = -4237
        any_0 = union_0.validate(int_0)
        integer_1 = module_0.Integer()
        string_1 = module_0.String()
        string_2 = module_0.String()
        var_1 = None
        any_1 = union_0.validate(var_1)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = -3403
        str_0 = 'S{i$wTj!6R|FH3'
        integer_0 = module_0.Integer(exclusive_minimum=int_0, precision=str_0, multiple_of=int_0)
        field_0 = module_0.Field(default=integer_0)
        field_1 = module_0.Field()
        list_0 = [field_0, field_0, field_1, field_0]
        union_0 = module_0.Union(list_0)
        field_2 = module_0.Field(description=str_0, default=str_0)
        union_1 = module_0.Union(list_0)
        array_0 = module_0.Array(union_1)
        bytes_0 = b'm\xf5XRZ\x9c\xa1\xdc\xbb\xdb\xf1\xdf\x1do\x1c\xc3\x87xu'
        list_1 = [field_1, list_0, bytes_0, field_1]
        object_0 = module_0.Object(max_properties=int_0, required=list_1)
    except BaseException:
        pass

def test_case_39():
    try:
        int_0 = 1041
        const_0 = None
        dict_0 = {const_0: int_0, const_0: int_0}
        object_0 = module_0.Object(properties=const_0, min_properties=int_0, max_properties=int_0, required=dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        int_0 = 168
        const_0 = None
        dict_0 = {}
        object_0 = module_0.Object(properties=const_0, min_properties=int_0, max_properties=int_0, required=dict_0)
        any_0 = object_0.validate(const_0)
    except BaseException:
        pass

def test_case_41():
    try:
        date_time_0 = module_0.DateTime()
        str_0 = 'no_match'
        field_0 = module_0.Field(title=str_0)
        dict_0 = {str_0: field_0, str_0: field_0}
        boolean_0 = module_0.Boolean(default=dict_0)
        decimal_0 = module_1.Decimal()
        decimal_1 = module_1.Decimal()
        decimal_2 = module_0.Decimal(minimum=decimal_0, exclusive_minimum=decimal_0, precision=str_0, multiple_of=decimal_1)
        boolean_1 = module_0.Boolean()
        str_1 = "S'4Q`+`'hhcLAc'lQY"
        bool_0 = False
        boolean_2 = module_0.Boolean(title=str_1, allow_null=bool_0)
        str_2 = None
        str_3 = "'t\\4Ws&EZ.8O"
        boolean_3 = module_0.Boolean(title=str_2, default=str_3)
    except BaseException:
        pass

def test_case_42():
    try:
        float_0 = 448.8733391259989
        number_0 = module_0.Number(exclusive_minimum=float_0, multiple_of=float_0)
        int_0 = 572
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_43():
    try:
        integer_0 = module_0.Integer()
        dict_0 = None
        any_0 = integer_0.validate(dict_0)
    except BaseException:
        pass

def test_case_44():
    try:
        bytes_0 = None
        bool_0 = True
        array_0 = module_0.Array()
        any_0 = array_0.validate(bytes_0, strict=bool_0)
    except BaseException:
        pass

def test_case_45():
    try:
        int_0 = 1074
        field_0 = module_0.Field()
        array_0 = module_0.Array()
        const_0 = None
        dict_0 = {}
        object_0 = module_0.Object(properties=const_0, min_properties=int_0, max_properties=int_0, required=dict_0)
        int_1 = 1901
        date_time_0 = module_0.DateTime()
        string_0 = module_0.String(max_length=int_1, format=date_time_0)
    except BaseException:
        pass

def test_case_46():
    try:
        field_0 = module_0.Field()
        bytes_0 = b'm\xf5XRZ\x9c\xa1\xdc\xbb\xdb\xf1\xdf\x1do\x1c\xc3\x87xu'
        boolean_0 = module_0.Boolean()
        list_0 = None
        bool_0 = False
        boolean_1 = module_0.Boolean(default=bytes_0, allow_null=bool_0)
        any_0 = boolean_1.validate(list_0)
    except BaseException:
        pass

def test_case_47():
    try:
        decimal_0 = module_1.Decimal()
        integer_0 = module_0.Integer(minimum=decimal_0)
        date_0 = module_0.Date()
        bool_0 = True
        int_0 = -1311
        str_0 = "M<'uU}a]TsiU})"
        string_0 = module_0.String(max_length=int_0, format=str_0)
        string_1 = module_0.String(trim_whitespace=bool_0, max_length=string_0)
    except BaseException:
        pass

def test_case_48():
    try:
        integer_0 = module_0.Integer()
        str_0 = "6'u0Nt_.$Lq"
        bool_0 = None
        string_0 = module_0.String(allow_blank=bool_0, format=str_0)
        any_0 = string_0.validate(bool_0)
    except BaseException:
        pass

def test_case_49():
    try:
        int_0 = 1065
        number_0 = module_0.Number(maximum=int_0, exclusive_maximum=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_50():
    try:
        float_0 = None
        decimal_0 = module_0.Decimal(minimum=float_0, exclusive_minimum=float_0)
        number_0 = module_0.Number(exclusive_minimum=float_0, multiple_of=float_0)
        bool_0 = True
        any_0 = decimal_0.serialize(float_0)
        any_1 = number_0.validate(float_0, strict=bool_0)
    except BaseException:
        pass

def test_case_51():
    try:
        date_time_0 = module_0.DateTime()
        float_0 = 5810.52
        str_0 = ''
        field_0 = module_0.Field(description=str_0)
        int_0 = 2703
        object_0 = module_0.Object(additional_properties=float_0, property_names=field_0, min_properties=int_0)
    except BaseException:
        pass

def test_case_52():
    try:
        int_0 = 1080
        const_0 = None
        dict_0 = {}
        object_0 = module_0.Object(properties=const_0, min_properties=int_0, max_properties=int_0, required=dict_0)
        field_0 = module_0.Field()
        str_0 = 'l(B'
        field_1 = module_0.Field(description=str_0, default=str_0)
        union_0 = field_1.__or__(field_0)
        str_1 = '=0jkK\ru\\`Aj^\r1<'
        str_2 = 'hASx02'
        dict_1 = {str_1: field_1, str_2: field_1, str_2: dict_0, str_1: dict_0}
        bool_0 = False
        object_1 = module_0.Object(properties=dict_1, additional_properties=field_1, property_names=field_0, max_properties=int_0, required=bool_0)
    except BaseException:
        pass

def test_case_53():
    try:
        int_0 = -3112
        const_0 = None
        dict_0 = {}
        object_0 = module_0.Object(properties=const_0, min_properties=int_0, max_properties=int_0, required=dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_54():
    try:
        str_0 = 'r+jpk4V.;'
        const_0 = module_0.Const(str_0)
        bool_0 = False
        any_0 = module_0.Any(title=str_0, default=const_0, allow_null=bool_0)
        set_0 = {any_0, bool_0}
        float_0 = 442.237
        decimal_0 = module_0.Decimal(exclusive_minimum=set_0, exclusive_maximum=float_0, precision=str_0, multiple_of=float_0)
    except BaseException:
        pass

def test_case_55():
    try:
        int_0 = 121
        bool_0 = False
        str_0 = ''
        number_0 = module_0.Number(minimum=int_0, precision=str_0, multiple_of=int_0)
        any_0 = number_0.validate(int_0, strict=bool_0)
    except BaseException:
        pass

def test_case_56():
    try:
        dict_0 = {}
        date_0 = module_0.Date(**dict_0)
        str_0 = '4gl%{0^2gq@!G'
        field_0 = module_0.Field(title=str_0)
        str_1 = None
        dict_1 = {str_0: field_0, str_1: field_0, str_1: field_0}
        object_0 = module_0.Object(properties=dict_1, property_names=field_0)
    except BaseException:
        pass

def test_case_57():
    try:
        field_0 = module_0.Field()
        bool_0 = True
        text_0 = None
        string_0 = module_0.String(trim_whitespace=bool_0, min_length=text_0)
        date_time_0 = module_0.DateTime()
        object_0 = module_0.Object(max_properties=date_time_0)
    except BaseException:
        pass

def test_case_58():
    try:
        str_0 = '3\no\t|nc'
        field_0 = module_0.Field()
        float_0 = -1942.13
        decimal_0 = module_0.Decimal(minimum=float_0)
        str_1 = '\n    Must match exactly one of the sub-items.\n\n    You\'ll almost always want to just use `Union` instead of this, which is an\n    "anyOf" test.\n    '
        any_0 = module_0.Any()
        list_0 = [str_0, any_0, str_1]
        object_0 = module_0.Object(min_properties=list_0)
    except BaseException:
        pass

def test_case_59():
    try:
        str_0 = '3\no\t|nc'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0}
        int_0 = -226
        string_0 = module_0.String(max_length=int_0, min_length=int_0)
        int_1 = 1085
        object_0 = module_0.Object(additional_properties=field_0, property_names=field_0, max_properties=int_1)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = '\n\tnf'
        int_0 = 589
        dict_0 = {}
        string_0 = module_0.String(max_length=int_0, pattern=str_0, format=str_0, **dict_0)
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_61():
    try:
        int_0 = 3031
        field_0 = module_0.Field()
        str_0 = None
        str_1 = ''
        dict_0 = {str_0: field_0, str_1: field_0}
        str_2 = ''
        bool_0 = False
        field_1 = module_0.Field(title=str_2, description=str_2, allow_null=bool_0)
        none_type_0 = None
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_1, property_names=none_type_0, min_properties=int_0)
    except BaseException:
        pass

def test_case_62():
    try:
        str_0 = '3\nos\t|n'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0}
        validation_error_0 = None
        object_0 = module_0.Object(additional_properties=field_0, max_properties=validation_error_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_63():
    try:
        choice_0 = module_0.Choice()
        var_0 = None
        any_0 = choice_0.validate(var_0)
    except BaseException:
        pass

def test_case_64():
    try:
        var_0 = None
        none_type_0 = None
        str_0 = '4YjS'
        dict_0 = {}
        time_0 = module_0.Time(**dict_0)
        decimal_0 = module_0.Decimal(maximum=var_0, exclusive_minimum=none_type_0, precision=str_0, multiple_of=time_0)
    except BaseException:
        pass

def test_case_65():
    try:
        dict_0 = {}
        str_0 = 'A;62=%#UsN'
        field_0 = module_0.Field()
        sequence_0 = None
        bool_0 = False
        any_0 = module_0.Any(default=dict_0, allow_null=bool_0)
        bool_1 = False
        any_1 = any_0.validate(sequence_0, bool_1)
        date_time_0 = module_0.DateTime()
        decimal_0 = module_0.Decimal(maximum=date_time_0, precision=str_0)
    except BaseException:
        pass

def test_case_66():
    try:
        dict_0 = {}
        str_0 = '3\nos\t|n'
        field_0 = module_0.Field()
        dict_1 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        list_0 = [dict_1, field_0, field_0]
        date_time_0 = module_0.DateTime()
        tuple_0 = (list_0, dict_0, date_time_0)
        choice_0 = module_0.Choice(choices=tuple_0, **dict_0)
    except BaseException:
        pass

def test_case_67():
    try:
        optional_0 = None
        const_0 = module_0.Const(optional_0)
        int_0 = 3329
        bool_0 = False
        str_0 = '85SZ)\tq1'
        string_0 = module_0.String(allow_blank=bool_0, max_length=int_0, min_length=int_0, format=str_0)
        any_0 = const_0.validate(str_0)
    except BaseException:
        pass

def test_case_68():
    try:
        str_0 = 'Definition for {key!r} has already been set.'
        field_0 = None
        dict_0 = {str_0: field_0}
        int_0 = -1081
        object_0 = module_0.Object(pattern_properties=dict_0, required=int_0)
    except BaseException:
        pass

def test_case_69():
    try:
        str_0 = 'Name'
        str_1 = 'Email'
        bool_0 = True
        string_0 = module_0.String(allow_blank=bool_0)
        any_0 = string_0.serialize(bool_0)
        str_2 = 'datetime'
        string_1 = module_0.String(format=str_2)
        str_3 = '2020-06-13T16:00:00Z'
        any_1 = string_1.serialize(str_3)
    except BaseException:
        pass

def test_case_70():
    try:
        int_0 = 5
        int_1 = 123
        number_0 = module_0.Number(maximum=int_0, exclusive_maximum=int_1)
        any_0 = number_0.validate(int_1)
    except BaseException:
        pass

def test_case_71():
    try:
        int_0 = 10
        int_1 = 20
        int_2 = 5
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_1, exclusive_minimum=int_1, exclusive_maximum=int_0, multiple_of=int_2)
        any_0 = integer_0.validate(int_2)
    except BaseException:
        pass

def test_case_72():
    try:
        str_0 = 'name'
        str_1 = 'age'
        str_2 = 'job'
        bool_0 = True
        string_0 = module_0.String()
        int_0 = 10
        integer_0 = module_0.Integer(maximum=int_0)
        string_1 = module_0.String()
        var_0 = {str_0: string_0, str_1: integer_0, str_2: string_1}
        int_1 = 2
        int_2 = 4
        bool_1 = False
        str_3 = [str_0, str_1]
        object_0 = module_0.Object(properties=var_0, additional_properties=bool_1, min_properties=int_1, max_properties=int_2, required=str_3)
        str_4 = 'a'
        str_5 = 'c'
        var_1 = {str_0: str_4, str_1: bool_0, str_1: str_5}
        any_0 = object_0.validate(var_1)
    except BaseException:
        pass

def test_case_73():
    try:
        object_0 = module_0.Object()
        str_0 = 'a '
        str_1 = {str_0: str_0, object_0: str_0}
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_74():
    try:
        field_0 = module_0.Field()
        bool_0 = field_0.has_default()
        integer_0 = module_0.Integer()
        dict_0 = None
        str_0 = 'qQ'
        dict_1 = {str_0: dict_0}
        dict_2 = {}
        date_0 = module_0.Date()
        str_1 = 'w$qH*h\x0cBkM\nu&0*&{EQ'
        object_0 = module_0.Object(properties=dict_2, additional_properties=date_0, required=str_1)
        any_0 = object_0.validate(dict_1)
    except BaseException:
        pass

def test_case_75():
    try:
        str_0 = 'name'
        str_1 = 'age'
        bool_0 = True
        string_0 = module_0.String()
        int_0 = 10
        integer_0 = module_0.Integer(maximum=int_0)
        string_1 = module_0.String()
        var_0 = {str_0: string_0, str_1: integer_0, str_0: string_1}
        int_1 = 2
        int_2 = 4
        bool_1 = False
        str_2 = [str_0, str_1]
        object_0 = module_0.Object(properties=var_0, additional_properties=bool_1, min_properties=int_1, max_properties=int_2, required=str_2)
        str_3 = 'b'
        str_4 = 'a'
        str_5 = 'c'
        var_1 = {str_0: str_4, str_1: bool_0, str_3: str_5}
        any_0 = object_0.validate(var_1)
    except BaseException:
        pass

def test_case_76():
    try:
        integer_0 = module_0.Integer()
        int_0 = 3714
        integer_1 = module_0.Integer(minimum=int_0, exclusive_minimum=int_0)
        any_0 = integer_1.validate(int_0)
    except BaseException:
        pass

def test_case_77():
    try:
        int_0 = 5
        int_1 = 123
        number_0 = module_0.Number(maximum=int_0, exclusive_maximum=int_1)
        any_0 = number_0.validate(int_0)
        any_1 = number_0.validate(int_1)
    except BaseException:
        pass

def test_case_78():
    try:
        int_0 = 5
        string_0 = module_0.String(max_length=int_0)
        str_0 = ')j|nEsKlaLg94cadG'
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_79():
    try:
        bool_0 = True
        int_0 = -2229
        integer_0 = module_0.Integer(minimum=int_0)
        string_0 = module_0.String(max_length=int_0)
        var_0 = [integer_0]
        array_0 = module_0.Array(var_0, string_0, int_0, int_0, bool_0)
        any_0 = array_0.validate(var_0)
    except BaseException:
        pass

def test_case_80():
    try:
        bool_0 = False
        int_0 = -2229
        integer_0 = module_0.Integer(minimum=int_0)
        string_0 = module_0.String(max_length=int_0)
        var_0 = [integer_0]
        array_0 = module_0.Array(var_0, string_0, int_0, int_0, bool_0)
        any_0 = array_0.validate(var_0)
    except BaseException:
        pass

def test_case_81():
    try:
        text_0 = module_0.Text()
        str_0 = '6Q(,\n\t{ iRX'
        float_0 = 1653.91
        number_0 = module_0.Number(minimum=text_0, exclusive_minimum=float_0, precision=str_0)
    except BaseException:
        pass

def test_case_82():
    try:
        float_0 = 1495.1
        integer_0 = module_0.Integer(multiple_of=float_0)
        any_0 = integer_0.validate(float_0)
    except BaseException:
        pass

def test_case_83():
    try:
        float_0 = -1669.41
        str_0 = ':_l4_3%\x0c(g10#m>y'
        decimal_0 = module_0.Decimal(maximum=float_0, precision=str_0, multiple_of=float_0)
        const_0 = module_0.Const(float_0)
        error_0 = module_2.error(decimal_0, const_0)
        bool_0 = False
        boolean_0 = module_0.Boolean(default=error_0, allow_null=bool_0)
        list_0 = [boolean_0, const_0]
        field_0 = module_0.Field()
        int_0 = -385
        array_0 = module_0.Array(field_0, field_0, int_0)
        any_0 = array_0.validate(list_0, strict=bool_0)
    except BaseException:
        pass

def test_case_84():
    try:
        int_0 = 27
        integer_0 = module_0.Integer(multiple_of=int_0)
        float_0 = -836.0
        bool_0 = True
        any_0 = integer_0.validate(float_0, strict=bool_0)
    except BaseException:
        pass

def test_case_85():
    try:
        str_0 = '*<-OxxC27{9R/'
        int_0 = -4561
        integer_0 = module_0.Integer(maximum=int_0)
        int_1 = 53
        bool_0 = True
        object_0 = module_0.Object(properties=integer_0, additional_properties=bool_0, min_properties=int_0, max_properties=int_1, required=str_0)
        str_1 = {str_0: str_0, str_0: str_0, str_0: int_0}
        any_0 = object_0.validate(str_1)
    except BaseException:
        pass

def test_case_86():
    try:
        bool_0 = True
        int_0 = -2229
        integer_0 = module_0.Integer(minimum=int_0)
        string_0 = module_0.String(max_length=int_0)
        var_0 = [integer_0]
        int_1 = None
        array_0 = module_0.Array(var_0, string_0, int_1, int_0, bool_0)
        any_0 = integer_0.validate(array_0)
    except BaseException:
        pass

def test_case_87():
    try:
        str_0 = 'mmvd^fnE_Ko4Pm%~&'
        bool_0 = False
        str_1 = 'date'
        string_0 = module_0.String(format=str_1)
        any_0 = string_0.validate(str_1)
    except BaseException:
        pass

def test_case_88():
    try:
        integer_0 = module_0.Integer()
        float_0 = module_0.Float()
        var_0 = [integer_0, float_0]
        union_0 = module_0.Union(var_0)
        float_1 = 1.45
        any_0 = union_0.validate(float_1)
        integer_1 = module_0.Integer()
        float_2 = module_0.Float()
        union_1 = module_0.Union(float_1)
    except BaseException:
        pass