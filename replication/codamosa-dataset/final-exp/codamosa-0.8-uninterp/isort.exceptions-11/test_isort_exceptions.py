# Automatically generated by Pynguin.
import isort.exceptions as module_0
import pathlib as module_1
import builtins as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = None
    str_1 = None
    file_skip_comment_0 = module_0.FileSkipComment(str_1)
    str_2 = "\n\nDoes not match isort's strict single line formatting requirement for assignment sorting:\n\n{variable_name} = {value}\n{variable_name2} = {value2}\n...\n\n"
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_2)
    invalid_settings_path_0 = module_0.InvalidSettingsPath(str_0)
    path_0 = module_1.Path()
    assignments_format_mismatch_0 = module_0.AssignmentsFormatMismatch(str_0)
    unsupported_encoding_0 = module_0.UnsupportedEncoding(path_0)

def test_case_2():
    str_0 = 'lexicographical'
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_0)
    existing_syntax_errors_0 = module_0.ExistingSyntaxErrors(str_0)
    str_1 = "#2]'e3ojE"
    exception_0 = None
    literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_1, exception_0)
    file_skip_setting_0 = module_0.FileSkipSetting(str_1)

def test_case_3():
    str_0 = '# isort: on\n'
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_0)
    introduced_syntax_errors_0 = module_0.IntroducedSyntaxErrors(str_0)

def test_case_4():
    str_0 = 'nq(1w#qD5u}*DpB<yApd'
    file_skip_comment_0 = module_0.FileSkipComment(str_0)

def test_case_5():
    type_0 = None
    str_0 = 'KV0g'
    assignments_format_mismatch_0 = module_0.AssignmentsFormatMismatch(str_0)
    str_1 = '}Z:\x0bo&'
    existing_syntax_errors_0 = module_0.ExistingSyntaxErrors(str_1)
    str_2 = ''
    file_skip_comment_0 = module_0.FileSkipComment(str_2)
    literal_sort_type_mismatch_0 = module_0.LiteralSortTypeMismatch(type_0, type_0)
    str_3 = 'soD\r^9i}jLru'
    formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_3)
    existing_syntax_errors_1 = module_0.ExistingSyntaxErrors(str_3)
    str_4 = 'H{|9F=Y6aUu7"\n\rh'
    file_skipped_0 = module_0.FileSkipped(str_4, str_2)
    assignments_format_mismatch_1 = module_0.AssignmentsFormatMismatch(str_2)

def test_case_6():
    str_0 = '\\&K~n1apmfC&2;'
    exception_0 = module_2.Exception()
    literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_0, exception_0)
    introduced_syntax_errors_0 = module_0.IntroducedSyntaxErrors(str_0)

def test_case_7():
    str_0 = '\x0coo'
    str_1 = 'value'
    str_2 = 'source'
    str_3 = 'r'
    str_4 = 'mock'
    str_5 = {str_1: str_3, str_2: str_4}
    str_6 = {str_0: str_5}
    unsupported_settings_0 = module_0.UnsupportedSettings(str_6)

def test_case_8():
    str_0 = '%d:FbVq\nPB\nW}|z6A8U\n'
    unsupported_encoding_0 = module_0.UnsupportedEncoding(str_0)

def test_case_9():
    str_0 = "R|h'Xcd"
    file_skip_comment_0 = module_0.FileSkipComment(str_0)
    str_1 = '"xyoX-P\'&k\''
    missing_section_0 = module_0.MissingSection(str_0, str_1)