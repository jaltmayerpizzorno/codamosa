# Automatically generated by Pynguin.
import ansible.cli.console as module_0

def test_case_0():
    try:
        float_0 = None
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        float_0 = 28.89
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        float_1 = 203.626496
        var_0 = console_c_l_i_0.do_timeout(float_1)
        var_1 = console_c_l_i_0.post_process_args(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '-{1'
        set_0 = None
        list_0 = [str_0, set_0, set_0, str_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.get_names()
        var_1 = console_c_l_i_0.do_cd(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Try to convert an IP address to packed binary form\n\n        Supports IPv4 addresses on all platforms and IPv6 on platforms with IPv6\n        support.\n        '
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.set_prompt()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'machdep'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.list_modules()
        var_1 = console_c_l_i_0.default(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'machdep'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        str_1 = '9n;v'
        var_0 = console_c_l_i_0.default(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 725
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        set_0 = {console_c_l_i_0}
        var_0 = console_c_l_i_0.do_timeout(set_0)
        dict_0 = {}
        var_1 = console_c_l_i_0.do_verbosity(dict_0)
        str_0 = 'QYu\tx7QE%'
        str_1 = "f9`j0'V.BJoF-C5(6C6?"
        bytes_0 = b'\xad\x04L'
        var_2 = console_c_l_i_0.complete_cd(str_0, str_0, str_1, bytes_0)
        var_3 = console_c_l_i_0.cmdloop()
        str_2 = 'cC%ky*C%\rP$q,'
        var_4 = console_c_l_i_0.default(str_2)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "qvS.sFWG''I)\ne+ycDw)"
        int_0 = 396
        bytes_0 = b'\x8c\xfb\xe4Sw\x97\xcf\x08Q\x14h\xe3'
        bool_0 = True
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_diff(bool_0)
        int_1 = -271
        console_c_l_i_1 = module_0.ConsoleCLI(int_1)
        var_1 = console_c_l_i_1.get_names()
        bool_1 = False
        var_2 = console_c_l_i_1.do_become_method(bool_1)
        console_c_l_i_2 = module_0.ConsoleCLI(bytes_0)
        var_3 = console_c_l_i_2.do_verbosity(int_0)
        var_4 = console_c_l_i_2.emptyline()
        list_0 = [str_0, str_0, str_0, str_0]
        console_c_l_i_3 = module_0.ConsoleCLI(list_0)
        var_5 = console_c_l_i_3.list_modules()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'x9ez\x0cMD|qv-!'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_cd(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b"7j\xeb\xdd\xddz'\xf6\x9b*\x87\x01Y(\x82WW*"
        bool_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_cd(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'g$j\rhJp'
        int_0 = 232
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_list(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        str_0 = 'Dir::Etc::sourcelist'
        set_0 = {str_0}
        list_0 = [set_0, set_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        str_1 = ''
        var_0 = console_c_l_i_0.do_become(str_1)
        var_1 = console_c_l_i_0.module_args(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'nos%B'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.init_parser()
        int_0 = -1041
        dict_0 = {}
        tuple_0 = (int_0, dict_0)
        console_c_l_i_1 = module_0.ConsoleCLI(tuple_0)
        var_1 = console_c_l_i_1.do_verbosity(str_0)
        var_2 = console_c_l_i_1.do_become(tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'chgrp'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_become(console_c_l_i_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 1318
        str_0 = '\n'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        list_0 = []
        var_0 = console_c_l_i_0.run()
        var_1 = console_c_l_i_0.do_remote_user(list_0)
        var_2 = console_c_l_i_0.do_diff(int_0)
        str_1 = '\rK|tus:4j'
        var_3 = console_c_l_i_0.do_verbosity(str_1)
        bytes_0 = b'\xb9\xbd\xaa\x06\xee\xe5\x0e\xd8'
        str_2 = 'aix'
        console_c_l_i_1 = module_0.ConsoleCLI(str_2)
        var_4 = console_c_l_i_1.do_list(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\xad\x04L'
        str_0 = '"`>{6 \tLJ2\nB'
        str_1 = '\n'
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_0.do_timeout(console_c_l_i_0)
        list_0 = [str_0, var_0]
        var_1 = console_c_l_i_0.run()
        var_2 = console_c_l_i_0.do_remote_user(list_0)
        str_2 = 'of\x0cUX:dHL>t}",`w'
        var_3 = console_c_l_i_0.run()
        var_4 = console_c_l_i_0.default(str_2)
        str_3 = ':0K-h|tusr4&'
        var_5 = console_c_l_i_0.helpdefault(str_1)
        var_6 = console_c_l_i_0.do_verbosity(str_3)
        str_4 = '_&{5.}+!~'
        console_c_l_i_1 = module_0.ConsoleCLI(str_4)
        var_7 = console_c_l_i_1.do_list(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'\x17\xed\n\xab\xb1\x9e\xe7v\xcbs\xc9\xe6\xec\xa6\x9e\xfd'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        console_c_l_i_0 = module_0.ConsoleCLI(dict_0)
        var_0 = console_c_l_i_0.do_become_user(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '/'
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = []
        float_0 = 28.89
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        console_c_l_i_1 = module_0.ConsoleCLI(dict_0)
        var_0 = console_c_l_i_0.do_become_method(list_0)
        int_0 = 3351
        console_c_l_i_2 = module_0.ConsoleCLI(int_0)
        var_1 = console_c_l_i_1.do_cd(float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b"7j\xeb\xdd\xddz'\xf6\x9b*\x87\x01Y(\x82WW*"
        bool_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        int_0 = -2244
        bool_1 = True
        tuple_0 = (bool_1,)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        var_0 = console_c_l_i_1.do_become_method(int_0)
        console_c_l_i_2 = module_0.ConsoleCLI(list_0)
        var_1 = console_c_l_i_2.do_cd(bool_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = True
        str_0 = 'machdep'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_check(bool_0)
        str_1 = '9n;v'
        var_1 = console_c_l_i_0.default(str_1)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        str_0 = 'machdep'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_check(bool_0)
        str_1 = '9n;v'
        var_1 = console_c_l_i_0.default(str_1)
    except BaseException:
        pass

def test_case_21():
    try:
        complex_0 = None
        str_0 = 'nos%B'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.init_parser()
        set_0 = {complex_0, complex_0, complex_0, complex_0}
        float_0 = 45.364623
        str_1 = None
        int_0 = 1749
        list_0 = [complex_0, set_0, float_0, float_0]
        tuple_0 = (int_0, set_0, str_1, list_0)
        console_c_l_i_1 = module_0.ConsoleCLI(tuple_0)
        var_1 = console_c_l_i_1.do_timeout(complex_0)
        var_2 = console_c_l_i_1.list_modules()
    except BaseException:
        pass

def test_case_22():
    try:
        list_0 = []
        float_0 = 28.89
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        float_1 = 203.626496
        var_0 = console_c_l_i_0.do_timeout(float_1)
        bytes_0 = b'\x8d\xc7\x06D]\x98p\xce\xae\x98\xbf\xa4s\xcaM\xf65\xc5'
        var_1 = console_c_l_i_0.do_exit(bytes_0)
        var_2 = console_c_l_i_0.post_process_args(list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        float_0 = 1558.33
        str_0 = '(l'
        str_1 = 'b83gf3\t^uYc 3[QNI;jM'
        str_2 = 'ncbf5\tR`iceBF\\U;8/pl'
        console_c_l_i_0 = module_0.ConsoleCLI(str_2)
        dict_0 = {str_2: float_0}
        var_0 = console_c_l_i_0.do_verbosity(dict_0)
        var_1 = console_c_l_i_0.complete_cd(float_0, str_0, str_1, str_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '/'
        float_0 = 28.89
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        float_1 = 203.626496
        var_0 = console_c_l_i_0.do_timeout(float_1)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        bool_0 = False
        int_0 = 135
        var_1 = console_c_l_i_0.completedefault(bool_0, str_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'Pw'
        float_0 = -975.8711
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        var_0 = console_c_l_i_1.list_modules()
        var_1 = console_c_l_i_0.module_args(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = True
        tuple_0 = (bool_0,)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        set_0 = None
        var_0 = console_c_l_i_1.do_shell(set_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '-{1'
        bool_0 = False
        float_0 = -2648.0722
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.do_diff(bool_0)
        set_0 = None
        list_0 = [str_0, set_0, set_0, str_0]
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        var_1 = console_c_l_i_1.get_names()
        str_1 = 'x9ez\x0cMD|qv-!'
        console_c_l_i_2 = module_0.ConsoleCLI(str_1)
        var_2 = console_c_l_i_2.do_cd(str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 725
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        set_0 = {console_c_l_i_0}
        var_0 = console_c_l_i_0.do_timeout(set_0)
        bool_0 = False
        var_1 = console_c_l_i_0.do_become_user(bool_0)
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = b"7j\xeb\xdd\xddz'\xf6\x9b*\x87\x01Y(\x82WW*"
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        bool_0 = False
        tuple_0 = (bool_0,)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        console_c_l_i_2 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_2.do_forks(list_0)
    except BaseException:
        pass

def test_case_30():
    try:
        float_0 = 28.96701736213746
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        int_0 = -1940
        var_0 = console_c_l_i_0.helpdefault(int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = '/'
        set_0 = {str_0}
        console_c_l_i_0 = module_0.ConsoleCLI(set_0)
        int_0 = -781
        var_0 = console_c_l_i_0.do_timeout(int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 725
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        bool_0 = True
        var_0 = console_c_l_i_0.do_forks(bool_0)
    except BaseException:
        pass

def test_case_33():
    try:
        int_0 = 725
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        float_0 = -300.117
        var_0 = console_c_l_i_0.do_forks(float_0)
        set_0 = {console_c_l_i_0}
        var_1 = console_c_l_i_0.do_timeout(set_0)
        str_0 = 'QYu\tx7QE%'
        str_1 = "f9`j0'V.BJoF-C5(6C6?"
        bytes_0 = b'\xadL'
        var_2 = console_c_l_i_0.complete_cd(str_0, str_0, str_1, bytes_0)
        var_3 = console_c_l_i_0.cmdloop()
        str_2 = 'cC%ky*C%\rP$q,'
        var_4 = console_c_l_i_0.default(str_2)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = '"'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_timeout(console_c_l_i_0)
        var_1 = console_c_l_i_0.run()
        int_0 = -987
        var_2 = console_c_l_i_0.do_shell(int_0)
    except BaseException:
        pass

def test_case_35():
    try:
        bytes_0 = b"\x19'\x8d|\xc7\xf0u\xb9\xe3\xd7j"
        str_0 = '"'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_timeout(console_c_l_i_0)
        var_1 = console_c_l_i_0.run()
        str_1 = '1e'
        var_2 = console_c_l_i_0.run()
        var_3 = console_c_l_i_0.do_diff(console_c_l_i_0)
        var_4 = console_c_l_i_0.default(str_1)
        str_2 = '?:\rxK|tus:4j'
        var_5 = console_c_l_i_0.helpdefault(str_0)
        str_3 = 'Xqr*ld=gaM'
        dict_0 = {str_0: str_3}
        dict_1 = {var_5: var_2, bytes_0: console_c_l_i_0, var_5: dict_0}
        var_6 = console_c_l_i_0.complete_cd(dict_1, str_0, dict_0, bytes_0)
        var_7 = console_c_l_i_0.do_verbosity(str_2)
        var_8 = console_c_l_i_0.helpdefault(str_0)
        str_4 = '%s (%s) is not a text_type'
        list_0 = []
        var_9 = console_c_l_i_0.complete_cd(str_3, str_4, str_0, list_0)
        set_0 = set()
        int_0 = None
        var_10 = console_c_l_i_0.do_check(int_0)
        var_11 = console_c_l_i_0.do_cd(set_0)
        var_12 = console_c_l_i_0.run()
        var_13 = console_c_l_i_0.default(str_0)
        tuple_0 = (str_2,)
        bytes_1 = b'\xb9\xe5\xa4\xc0\xf3\x9c\xa9\xc4\x1c\xf6\x9cI\x8f\xd9?'
        var_14 = console_c_l_i_0.do_diff(tuple_0)
        var_15 = console_c_l_i_0.do_list(bytes_1)
        set_1 = {var_14, var_0}
        var_16 = console_c_l_i_0.do_cd(set_1)
    except BaseException:
        pass