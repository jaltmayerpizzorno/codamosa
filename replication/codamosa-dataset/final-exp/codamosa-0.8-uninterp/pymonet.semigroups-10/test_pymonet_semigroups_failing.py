# Automatically generated by Pynguin.
import pymonet.semigroups as module_0

def test_case_0():
    try:
        str_0 = '\n    Data type for storage any type of data\n    '
        map_0 = module_0.Map(str_0)
        min_0 = module_0.Min(map_0)
        min_1 = module_0.Min(min_0)
        str_1 = min_1.__str__()
        set_0 = set()
        one_0 = module_0.One(set_0)
        last_0 = module_0.Last(one_0)
        int_0 = -1685
        all_0 = module_0.All(min_1)
        semigroup_0 = module_0.Semigroup(all_0)
        bool_0 = semigroup_0.__eq__(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = None
        first_0 = module_0.First(tuple_0)
        semigroup_0 = module_0.Semigroup(first_0)
        var_0 = semigroup_0.fold(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        first_0 = None
        int_0 = -581
        min_0 = module_0.Min(int_0)
        float_0 = -34.5755
        map_0 = module_0.Map(float_0)
        sum_0 = module_0.Sum(map_0)
        max_0 = module_0.Max(sum_0)
        str_0 = max_0.__str__()
        var_0 = min_0.concat(first_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = None
        sum_0 = module_0.Sum(set_0)
        sum_1 = sum_0.concat(sum_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '=S'
        list_0 = [str_0, str_0]
        all_0 = module_0.All(list_0)
        float_0 = 844.858228
        all_1 = module_0.All(float_0)
        all_2 = all_1.concat(all_0)
        tuple_0 = (all_2,)
        sum_0 = module_0.Sum(tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '_c\t43u3ipl"QFA,mu:'
        set_0 = {str_0, str_0}
        first_0 = module_0.First(set_0)
        str_1 = first_0.__str__()
        bytes_0 = b'\x00\xa8'
        list_0 = [bytes_0, bytes_0, bytes_0, str_0]
        bool_0 = True
        tuple_0 = (list_0, bool_0)
        str_2 = '^"+ J <^B'
        map_0 = module_0.Map(str_2)
        one_0 = module_0.One(map_0)
        var_0 = one_0.concat(tuple_0)
        max_0 = module_0.Max(list_0)
        map_1 = module_0.Map(max_0)
        str_3 = map_1.__str__()
        max_1 = module_0.Max(bytes_0)
        str_4 = one_0.__str__()
        var_1 = max_1.concat(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = None
        list_0 = []
        one_0 = module_0.One(list_0)
        var_0 = one_0.concat(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bytes_0 = b'\x06v\xe5\xaal\x97\x95\xb1Y\x13\x1a'
        bytes_1 = b'\x80\xa2\xaf\x82\xe9z\x10\xe2(\xf6\xa2\xbd+?.'
        first_0 = module_0.First(bytes_1)
        all_0 = module_0.All(first_0)
        str_0 = first_0.__str__()
        int_0 = 2443
        set_0 = {bytes_0}
        last_0 = module_0.Last(set_0)
        var_0 = last_0.concat(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -1725.72761
        set_0 = {float_0, float_0}
        map_0 = module_0.Map(set_0)
        first_0 = module_0.First(map_0)
        bool_0 = None
        first_1 = module_0.First(bool_0)
        list_0 = []
        map_1 = module_0.Map(list_0)
        str_0 = 'J\x0bHJ8DA\x0b\\0'
        sum_0 = module_0.Sum(str_0)
        min_0 = module_0.Min(sum_0)
        var_0 = first_1.concat(min_0)
        str_1 = first_1.__str__()
        one_0 = module_0.One(str_0)
        str_2 = sum_0.__str__()
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xd9j\r\xf2\x83\x06\xeb\x7f\xfd \x0f@?\x8b'
        one_0 = module_0.One(bytes_0)
        last_0 = module_0.Last(one_0)
        str_0 = last_0.__str__()
        str_1 = '\n    Data type for storage any type of data\n    '
        bool_0 = False
        sum_0 = module_0.Sum(bool_0)
        var_0 = last_0.concat(sum_0)
        all_0 = module_0.All(str_1)
        all_1 = all_0.concat(all_0)
    except BaseException:
        pass

def test_case_10():
    try:
        first_0 = None
        dict_0 = {first_0: first_0, first_0: first_0, first_0: first_0}
        map_0 = module_0.Map(dict_0)
        str_0 = '|;T6'
        last_0 = module_0.Last(str_0)
        var_0 = map_0.concat(last_0)
    except BaseException:
        pass

def test_case_11():
    try:
        one_0 = None
        max_0 = module_0.Max(one_0)
        last_0 = module_0.Last(max_0)
        str_0 = 'CN(N~(N'
        max_1 = module_0.Max(str_0)
        var_0 = max_1.concat(last_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'V41u` t(fB.'
        sum_0 = module_0.Sum(str_0)
        int_0 = 1571
        semigroup_0 = module_0.Semigroup(sum_0)
        all_0 = module_0.All(int_0)
        int_1 = -5788
        last_0 = module_0.Last(int_1)
        float_0 = 1006.0
        all_1 = module_0.All(float_0)
        str_1 = '8ct3d8\n'
        one_0 = module_0.One(str_1)
        var_0 = last_0.concat(one_0)
        max_0 = module_0.Max(all_1)
        str_2 = max_0.__str__()
        str_3 = 'o:V~^ 6"'
        min_0 = module_0.Min(str_3)
        var_1 = min_0.concat(sum_0)
        sum_1 = module_0.Sum(min_0)
        bool_0 = False
        max_1 = module_0.Max(bool_0)
        sum_2 = module_0.Sum(max_1)
        str_4 = '\tLs?v/\x0cu~}\x0cy4w#KV5'
        tuple_0 = (str_4,)
        sum_3 = module_0.Sum(tuple_0)
        sum_4 = sum_3.concat(sum_2)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        dict_0 = {}
        map_0 = module_0.Map(dict_0)
        var_0 = map_0.concat(bool_0)
        str_0 = '|;T6'
        last_0 = module_0.Last(str_0)
        set_0 = set()
        semigroup_0 = module_0.Semigroup(set_0)
        all_0 = module_0.All(semigroup_0)
        all_1 = all_0.concat(all_0)
        bytes_0 = b''
        min_0 = module_0.Min(dict_0)
        var_1 = min_0.concat(bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'V41u` t(fB.'
        sum_0 = module_0.Sum(str_0)
        int_0 = 1571
        all_0 = module_0.All(int_0)
        float_0 = 1970.53517
        all_1 = module_0.All(float_0)
        all_2 = all_1.concat(all_0)
        int_1 = -5788
        last_0 = module_0.Last(int_1)
        all_3 = all_0.concat(all_2)
        float_1 = 1006.0
        all_4 = module_0.All(float_1)
        all_5 = all_4.concat(all_3)
        max_0 = module_0.Max(all_5)
        str_1 = max_0.__str__()
        min_0 = module_0.Min(str_1)
        var_0 = min_0.concat(sum_0)
        sum_1 = module_0.Sum(min_0)
        bool_0 = False
        max_1 = module_0.Max(bool_0)
        sum_2 = module_0.Sum(max_1)
        str_2 = '\tLs?v/\x0cu~}\x0cy4w#KV5'
        tuple_0 = (str_2,)
        sum_3 = module_0.Sum(tuple_0)
        sum_4 = sum_3.concat(sum_2)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        max_0 = module_0.Max(bool_0)
        int_0 = True
        map_0 = module_0.Map(int_0)
        str_0 = max_0.__str__()
        str_1 = "hGr\t+S8`P'v/"
        semigroup_0 = module_0.Semigroup(str_1)
        var_0 = max_0.concat(map_0)
        first_0 = module_0.First(int_0)
        all_0 = module_0.All(first_0)
        bool_1 = True
        all_1 = module_0.All(bool_1)
        all_2 = all_1.concat(all_0)
        str_2 = all_2.__str__()
        str_3 = first_0.__str__()
    except BaseException:
        pass