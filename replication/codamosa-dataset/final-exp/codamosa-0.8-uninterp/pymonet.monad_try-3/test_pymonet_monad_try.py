# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    pass

def test_case_1():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)

def test_case_2():
    tuple_0 = ()
    bool_0 = False
    float_0 = 439.8
    try_0 = module_0.Try(float_0, bool_0)
    dict_0 = {}
    bool_1 = True
    try_1 = module_0.Try(dict_0, bool_1)
    bool_2 = try_1.__eq__(try_0)
    bool_3 = False
    str_0 = 'e6y'
    bytes_0 = b'S{\xf3'
    bool_4 = True
    try_2 = module_0.Try(bytes_0, bool_4)
    bool_5 = try_2.__eq__(str_0)
    try_3 = module_0.Try(bool_0, bool_3)
    var_0 = try_3.bind(tuple_0)

def test_case_3():
    bytes_0 = b'\xdcY\xbf\xf9'
    str_0 = "ENm'W"
    bool_0 = False
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.map(bytes_0)
    str_1 = ' ^~K)=&pQ7`W{\ntJ(Ua"'
    list_0 = [str_1, str_1, str_1, str_1]
    bool_1 = False
    try_1 = module_0.Try(list_0, bool_1)
    str_2 = try_1.__str__()

def test_case_4():
    str_0 = '?8'
    float_0 = -3170.674817
    tuple_0 = (str_0, float_0)
    str_1 = 'Lazy[fn={}, value={}, is_evaluated={}]'
    bool_0 = False
    try_0 = module_0.Try(str_1, bool_0)
    var_0 = try_0.bind(tuple_0)

def test_case_5():
    bytes_0 = b'\xc1\t\x08t\xb7I\xb6\x05\xe44'
    set_0 = set()
    bool_0 = False
    try_0 = module_0.Try(set_0, bool_0)
    var_0 = try_0.on_success(bytes_0)

def test_case_6():
    bytes_0 = b'\xbf\\\x82'
    list_0 = [bytes_0, bytes_0, bytes_0]
    bytes_1 = b'nu\xa1\x15\x0f\xd6\xf1\xaeg\xeb\xee\x04\xf66;\xb3\xfe\x8a'
    bool_0 = True
    try_0 = module_0.Try(bytes_1, bool_0)
    var_0 = try_0.on_fail(list_0)

def test_case_7():
    bool_0 = True
    int_0 = -2277
    tuple_0 = (int_0,)
    bool_1 = False
    try_0 = module_0.Try(tuple_0, bool_1)
    var_0 = try_0.get_or_else(bool_0)
    str_0 = '=#Jg\txJ'
    float_0 = -664.0
    bool_2 = True
    bytes_0 = b'\xb89\xcaH\xae\\\xc3Y:/P\x91\n\xef\x87'
    try_1 = module_0.Try(str_0, bool_2)
    var_1 = try_1.on_fail(bytes_0)
    try_2 = module_0.Try(float_0, bool_2)
    var_2 = try_2.on_fail(str_0)
    str_1 = try_2.__str__()

def test_case_8():
    bool_0 = True
    str_0 = '@&@>Ds+'
    set_0 = {str_0}
    int_0 = 263
    float_0 = 17.0
    str_1 = '=b&R\r\n,<?j)kvp{P>K'
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.get_or_else(str_1)
    tuple_0 = (int_0, str_0, float_0)
    bool_1 = False
    str_2 = '\x0baC#'
    int_1 = -156
    try_1 = module_0.Try(int_1, bool_0)
    var_1 = try_1.on_fail(str_2)
    try_2 = module_0.Try(tuple_0, bool_1)
    var_2 = try_2.on_success(tuple_0)
    bool_2 = False
    try_3 = module_0.Try(set_0, bool_2)
    var_3 = try_3.filter(bool_0)
    list_0 = [try_3]
    var_4 = try_3.bind(list_0)
    var_5 = try_2.get()
    bool_3 = False
    try_4 = module_0.Try(set_0, bool_3)
    bool_4 = try_4.__eq__(try_4)
    str_3 = try_3.__str__()
    str_4 = try_1.__str__()
    str_5 = '\n    Return increased by 1 argument.\n\n    :param value:\n    :type value: Int\n    :returns:\n    :rtype: Int\n    '
    var_6 = try_1.get_or_else(str_5)
    var_7 = try_2.map(try_2)