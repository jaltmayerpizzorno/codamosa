# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        int_0 = 2880
        str_0 = 'k,Wt\\!'
        str_1 = module_0.strip_html(str_0)
        str_2 = module_0.prettify(str_0)
        str_3 = module_0.roman_encode(int_0)
        str_4 = '..J_1'
        int_1 = module_0.roman_decode(str_4)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '((?<=\\S)\\+(?=\\S)|(?<=\\S)\\+\\s|\\s\\+(?=\\S)|(?<=\\S)-(?=\\S)|(?<=\\S)-\\s|\\s-(?=\\S)|(?<=\\S)/(?=\\S)|(?<=\\S)/\\s|\\s/(?=\\S)|(?<=\\S)\\*(?=\\S)|(?<=\\S)\\*\\s|\\s\\*(?=\\S)|(?<=\\S)=(?=\\S)|(?<=\\S)=\\s|\\s=(?=\\S)|\\s"[^"]+"(?=[^\\s?.:!,;])|(?<=\\S)"[^"]+"\\s|(?<=\\S)"[^"]+"(?=[^\\s?.:!,;])|\\s\\([^)]+\\)(?=[^\\s?.:!,;])|(?<=\\S)\\([^)]+\\)\\s|(?<=\\S)(\\([^)]+\\))(?=[^\\s?.:!,;]))'
        str_1 = module_0.compress(str_0)
        str_2 = ";N%'k,iWu9]\x0c'2/6 )"
        str_3 = '4[}'
        str_4 = module_0.snake_case_to_camel(str_2, str_3)
        str_5 = 'O`Q<w'
        str_6 = module_0.shuffle(str_3)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_7 = module_0.strip_margin(str_5)
        str_8 = 'o'
        str_9 = 'of7)4T,Dz %#g$\\_'
        str_10 = module_0.slugify(str_9)
        str_11 = module_0.prettify(str_8)
        str_12 = module_0.strip_html(str_3)
        str_13 = '\n    Returns the number of words contained into the given string.\n\n    This method is smart, it does consider only sequence of one or more letter and/or numbers\n    as "words", so a string like this: "! @ # % ... []" will return zero!\n    Moreover it is aware of punctuation, so the count for a string like "one,two,three.stop"\n    will be 4 not 1 (even if there are no spaces in the string).\n\n    *Examples:*\n\n    >>> words_count(\'hello world\') # returns 2\n    >>> words_count(\'one,two,three.stop\') # returns 4\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: Number of words.\n    '
        str_14 = module_0.prettify(str_13)
        int_0 = 4002
        str_15 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'a17b1x\t3MV'
        str_1 = module_0.slugify(str_0)
        str_2 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'o{[8sqkwxuxws -}a'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'ThiYIsACame$StringTest'
        str_1 = ''
        str_2 = module_0.prettify(str_1)
        str_3 = module_0.strip_html(str_0)
        int_0 = module_0.roman_decode(str_2)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'sqZ`A}kI1[l'
        str_1 = module_0.strip_margin(str_0)
        str_2 = '\n    Checks if the string is a palindrome (https://en.wikipedia.org/wiki/Palindrome).\n\n    *Examples:*\n\n    >>> is_palindrome(\'LOL\') # returns true\n    >>> is_palindrome(\'Lol\') # returns false\n    >>> is_palindrome(\'Lol\', ignore_case=True) # returns true\n    >>> is_palindrome(\'ROTFL\') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param ignore_spaces: False if white spaces matter (default), true otherwise.\n    :type ignore_spaces: bool\n    :param ignore_case: False if char case matters (default), true otherwise.\n    :type ignore_case: bool\n    :return: True if the string is a palindrome (like "otto", or "i topi non avevano nipoti" if strict=False),    False otherwise\n    '
        str_3 = module_0.decompress(str_2, str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        str_1 = 'secure_random_hex'
        int_0 = 551
        str_2 = module_0.compress(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'PV&YRHpQ'
        str_1 = module_0.strip_html(str_0)
        int_0 = 1133
        str_2 = module_0.compress(str_1, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ':N?g+DI%\rynRW<[F9'
        str_1 = module_0.compress(str_0)
        str_2 = None
        bool_0 = module_0.booleanize(str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = "/-L'/FCD0gzz@oy"
        int_0 = None
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '!fI6~IMZD\tE]\nHH'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = ">)bSq='L,J/.\x0c.1i*K"
        str_3 = module_0.decompress(str_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = None
        str_1 = '=/-Gy;UVcAT_Kl4|_k#'
        var_0 = module_0.camel_case_to_snake(str_1)
        str_2 = module_0.prettify(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 746.25171
        var_0 = module_0.camel_case_to_snake(float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        bool_0 = False
        str_1 = None
        str_2 = module_0.snake_case_to_camel(str_0, bool_0, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'qfs'
        str_1 = module_0.shuffle(str_0)
        dict_0 = None
        string_formatter_0 = module_0.__StringFormatter(dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = None
        str_1 = module_0.asciify(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        str_1 = module_0.slugify(str_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'o{[8sqkwxuxws -}a'
        bool_0 = module_0.booleanize(str_0)
        str_1 = "euFY>D.\r$'-Y0v"
        int_0 = module_0.roman_decode(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = "L\rB [+(As\x0b}VMs$fh'9"
        str_1 = module_0.reverse(str_0)
        str_2 = module_0.prettify(str_1)
        str_3 = None
        str_4 = module_0.strip_margin(str_3)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = "EN%'k,iWu9]\x0c'2/6 )"
        str_1 = '4[}'
        str_2 = module_0.snake_case_to_camel(str_0, str_1)
        str_3 = 'O`Q<w'
        str_4 = module_0.shuffle(str_1)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_5 = module_0.strip_margin(str_3)
        str_6 = 'y'
        str_7 = '\t]Ab?_0DbtAg!P'
        str_8 = 'of7)4T,Dz %#g$\\_'
        str_9 = module_0.slugify(str_8)
        str_10 = module_0.strip_html(str_7)
        str_11 = module_0.prettify(str_6)
        str_12 = module_0.strip_html(str_1)
        str_13 = '795Q#tXw6\r}'
        str_14 = module_0.prettify(str_13)
        int_0 = 2894
        str_15 = module_0.roman_encode(int_0)
        int_1 = -23
        str_16 = module_0.roman_encode(int_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '^f+'
        str_1 = 'vwlJp?KHwZg-Cm'
        str_2 = module_0.prettify(str_1)
        str_3 = module_0.shuffle(str_0)
        var_0 = module_0.camel_case_to_snake(str_0)
        str_4 = None
        str_5 = module_0.shuffle(str_4)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '5wJf]6R}Ibz&RYLe'
        int_0 = -1485
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '((?<=\\S)\\+(?=\\S)|(?<=\\S)\\+\\s|\\s\\+(?=\\S)|(?<=\\S)-(?=\\S)|(?<=\\S)-\\s|\\s-(?=\\S)|(?<=\\S)/(?=\\S)|(?<=\\S)/\\s|\\s/(?=\\S)|(?<=\\S)\\*(?=\\S)|(?<=\\S)\\*\\s|\\s\\*(?=\\S)|(?<=\\S)=(?=\\S)|(?<=\\S)=\\s|\\s=(?=\\S)|\\s"[^"]+"(?=[^\\s?.:!,;])|(?<=\\S)"[^"]+"\\s|(?<=\\S)"[^"]+"(?=[^\\s?.:!,;])|\\s\\([^)]+\\)(?=[^\\s?.:!,;])|(?<=\\S)\\([^)]+\\)\\s|(?<=\\S)(\\([^)]+\\))(?=[^\\s?.:!,;]))'
        str_1 = module_0.compress(str_0)
        str_2 = 'RIGHT_SPACE'
        str_3 = '\n    Checks if the given string represents a valid ISBN (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn(\'9780312498580\') # returns true\n    >>> is_isbn(\'1506715214\') # returns true\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens ("-") in the string (default), false otherwise.\n    :return: True if valid ISBN (10 or 13), false otherwise.\n    '
        str_4 = module_0.snake_case_to_camel(str_2, str_3)
        str_5 = module_0.shuffle(str_2)
        str_6 = 'GZ\\r&e)^<,Y>%+4|n|2a'
        str_7 = module_0.strip_margin(str_6)
        str_8 = '^([a-z]+\\d*_[a-z\\d_]*|_+[a-z\\d]+[a-z\\d_]*)$'
        str_9 = module_0.slugify(str_8, str_4)
        str_10 = module_0.prettify(str_2)
        str_11 = None
        str_12 = module_0.strip_html(str_11)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'it is 10:00 p.m., http://www.google.it/test and my e-mail is m.rossi@gmail.com'
        string_formatter_0 = module_0.__StringFormatter(str_0)
        str_1 = string_formatter_0.format()
        str_2 = module_0.prettify(str_1)
        bool_0 = True
        str_3 = module_0.strip_html(str_2, bool_0)
        str_4 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
        str_5 = module_0.prettify(str_4)
        int_0 = 3999
        str_6 = module_0.roman_encode(int_0)
        str_7 = '[t?4p*X\\4k2`'
        str_8 = module_0.asciify(str_7)
        str_9 = 'tY'
        int_1 = module_0.roman_decode(str_9)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'gvn'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = 'yes'
        str_3 = module_0.prettify(str_2)
        str_4 = None
        str_5 = module_0.compress(str_4)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = None
        str_1 = module_0.reverse(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '((?<=\\S)\\+(?=\\S)|(?<=\\S)\\+\\s|\\s\\+(?=\\S)|(?<=\\S)-(?=\\S)|(?<=\\S)-\\s|\\s-(?=\\S)|(?<=\\S)/(?=\\S)|(?<=\\S)/\\s|\\s/(?=\\S)|(?<=\\S)\\*(?=\\S)|(?<=\\S)\\*\\s|\\s\\*(?=\\S)|(?<=\\S)=(?=\\S)|(?<=\\S)=\\s|\\s=(?=\\S)|\\s"[^"]+"(?=[^\\s?.:!,;])|(?<=\\S)"[^"]+"\\s|(?<=\\S)"[^"]+"(?=[^\\s?.:!,;])|\\s\\([^)]+\\)(?=[^\\s?.:!,;])|(?<=\\S)\\([^)]+\\)\\s|(?<=\\S)(\\([^)]+\\))(?=[^\\s?.:!,;]))'
        str_1 = module_0.compress(str_0)
        int_0 = 2876
        str_2 = "EN%'k,iWu9]\x0c'2/6 )"
        str_3 = '4[}'
        str_4 = module_0.snake_case_to_camel(str_2, str_3)
        str_5 = 'O`Q<w'
        str_6 = module_0.shuffle(str_3)
        str_7 = module_0.strip_margin(str_5)
        str_8 = 'yes'
        str_9 = module_0.decompress(str_1)
        str_10 = module_0.strip_html(str_6)
        str_11 = module_0.prettify(str_8)
        str_12 = module_0.roman_encode(int_0)
        str_13 = module_0.asciify(str_2)
        str_14 = '0Zi(arV( %a6'
        str_15 = module_0.prettify(str_14)
        int_1 = module_0.roman_decode(str_8)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = '0a!]'
        int_0 = 4821
        str_1 = module_0.compress(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'x'
        str_1 = module_0.snake_case_to_camel(str_0)
        str_2 = 'xx'
        str_3 = module_0.snake_case_to_camel(str_2)
        str_4 = 'some_text'
        str_5 = module_0.snake_case_to_camel(str_4)
        bool_0 = False
        str_6 = module_0.snake_case_to_camel(str_4, bool_0)
        str_7 = module_0.snake_case_to_camel(str_3, bool_0)
        str_8 = module_0.asciify(str_1)
        str_9 = module_0.snake_case_to_camel(str_2, bool_0, str_1)
    except BaseException:
        pass