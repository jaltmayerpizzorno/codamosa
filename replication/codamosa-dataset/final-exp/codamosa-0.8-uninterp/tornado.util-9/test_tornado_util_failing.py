# Automatically generated by Pynguin.
import tornado.util as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = '[S.!G/0'
        object_dict_0 = module_0.ObjectDict()
        any_0 = object_dict_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'%\x19\x08\xaa\xa4'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_1 = gzip_decompressor_0.decompress(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        str_0 = 'tornado.missing_module'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 's_oXp'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'tornado.missing_module'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        str_0 = '26W*D1LV>,fVPhZ'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: list_0}
        module_0.exec_in(list_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '^Z<\r4/F~zMuE'
        dict_0 = {str_0: str_0}
        module_0.exec_in(str_0, dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        object_dict_0 = module_0.ObjectDict()
        float_0 = 179.1
        tuple_0 = (object_dict_0, float_0)
        var_0 = module_0.raise_exc_info(tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '#'
        var_0 = module_0.raise_exc_info(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = None
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        list_0 = [optional_0, base_exception_0, optional_0]
        configurable_0 = module_0.Configurable(*list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = True
        str_0 = 'TEya|4gN,'
        arg_replacer_0 = module_0.ArgReplacer(bool_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        var_0 = module_0.doctests()
        str_0 = ''
        list_0 = []
        object_dict_0 = module_0.ObjectDict(*list_0)
        object_dict_0.__setattr__(str_0, object_dict_0)
        var_1 = module_0.timedelta_to_seconds(object_dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'hn@J\\P+\\6b V'
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        object_dict_0 = module_0.ObjectDict()
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        gzip_decompressor_0 = module_0.GzipDecompressor()
        gzip_decompressor_1 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_1.flush()
        sequence_0 = None
        str_0 = '1'
        str_1 = 'A\x0cAgUeHU}\tGM?oo)'
        dict_0 = {str_0: object_dict_0, str_1: str_0, str_0: optional_0}
        tuple_0 = (bytes_0, sequence_0, dict_0)
        var_0 = module_0.raise_exc_info(tuple_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'Zf&\\#mi976]{af'
        str_1 = module_0.re_unescape(str_0)
        str_2 = '+\x0b`GC1Yk:'
        int_0 = -304
        arg_replacer_0 = module_0.ArgReplacer(int_0, str_2)
    except BaseException:
        pass