# Automatically generated by Pynguin.
import httpie.uploads as module_0
import httpie.cli.dicts as module_1
import requests.models as module_2
import requests_toolbelt.multipart.encoder as module_3
import typing as module_4

def test_case_0():
    try:
        str_0 = '--style'
        callable_0 = None
        int_0 = 30
        multipart_encoder_0 = None
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        var_0 = module_0.prepare_request_body(str_0, callable_0, int_0, chunked_multipart_upload_stream_0)
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        multipart_request_data_dict_0 = module_1.MultipartRequestDataDict(**dict_0)
        tuple_0 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0)
        str_1 = '\rrH/qv7H\x0ci=L2qV1Wqp,'
        tuple_1 = module_0.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_1, str_0)
        multipart_request_data_dict_1 = module_1.MultipartRequestDataDict()
        multipart_request_data_dict_2 = None
        var_1 = module_0.prepare_request_body(str_1, multipart_request_data_dict_2, tuple_1)
        prepared_request_0 = module_2.PreparedRequest()
        set_0 = {var_0, int_0}
        multipart_encoder_1 = module_3.MultipartEncoder(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        prepared_request_0 = module_2.PreparedRequest()
        bool_0 = True
        var_0 = module_0.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        multipart_request_data_dict_0 = module_1.MultipartRequestDataDict(**dict_0)
        bool_0 = False
        multipart_encoder_0 = module_3.MultipartEncoder(multipart_request_data_dict_0, bool_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        multipart_encoder_1 = module_3.MultipartEncoder(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        multipart_request_data_dict_0 = module_1.MultipartRequestDataDict(**dict_0)
        bool_0 = False
        multipart_encoder_0 = module_3.MultipartEncoder(multipart_request_data_dict_0, bool_0)
        chunked_multipart_upload_stream_0 = module_0.ChunkedMultipartUploadStream(multipart_encoder_0)
        i_o_0 = module_4.IO()
        var_0 = i_o_0.read()
        list_0 = [var_0, var_0, var_0, var_0]
        var_1 = module_0.prepare_request_body(multipart_encoder_0, list_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        multipart_encoder_1 = module_3.MultipartEncoder(iterable_0)
    except BaseException:
        pass