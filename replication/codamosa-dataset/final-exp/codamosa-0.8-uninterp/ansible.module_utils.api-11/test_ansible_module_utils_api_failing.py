# Automatically generated by Pynguin.
import ansible.module_utils.api as module_0

def test_case_0():
    try:
        str_0 = '}'
        var_0 = module_0.rate_limit_argument_spec(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.rate_limit()
        var_1 = module_0.rate_limit()
        str_0 = 'z;)$v%v'
        tuple_0 = None
        var_2 = module_0.retry_with_delays_and_condition(tuple_0)
        var_3 = module_0.retry_argument_spec(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        complex_0 = None
        var_0 = module_0.retry_argument_spec()
        set_0 = {complex_0, complex_0}
        var_1 = module_0.retry_never(set_0)
        list_0 = [complex_0, complex_0, complex_0]
        var_2 = module_0.basic_auth_argument_spec(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.rate_limit_argument_spec()
        var_1 = module_0.basic_auth_argument_spec()
        dict_0 = {}
        list_0 = [var_1, dict_0]
        var_2 = module_0.rate_limit(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        bool_1 = False
        var_0 = module_0.retry_with_delays_and_condition(bool_0, bool_1)
        var_1 = module_0.rate_limit()
        var_2 = module_0.basic_auth_argument_spec()
        var_3 = module_0.basic_auth_argument_spec()
        var_4 = module_0.generate_jittered_backoff(bool_1)
        list_0 = [var_4, bool_1]
        var_5 = module_0.retry_with_delays_and_condition(list_0)
        var_6 = module_0.retry_argument_spec()
        var_7 = module_0.retry_argument_spec()
        str_0 = 'tYeJ<B`h`m'
        set_0 = {str_0, var_1}
        var_8 = module_0.retry(set_0)
        var_9 = module_0.basic_auth_argument_spec(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        bool_1 = True
        var_0 = module_0.retry_with_delays_and_condition(bool_0, bool_1)
        var_1 = module_0.rate_limit()
        var_2 = module_0.basic_auth_argument_spec()
        var_3 = module_0.basic_auth_argument_spec()
        var_4 = module_0.generate_jittered_backoff(bool_1)
        list_0 = [var_4, bool_1]
        var_5 = module_0.retry_with_delays_and_condition(list_0)
        var_6 = module_0.retry_argument_spec()
        var_7 = module_0.retry_argument_spec()
        str_0 = 'tYeJ<B`h`m'
        set_0 = {str_0, var_1}
        var_8 = module_0.retry(set_0)
        var_9 = module_0.basic_auth_argument_spec(list_0)
    except BaseException:
        pass