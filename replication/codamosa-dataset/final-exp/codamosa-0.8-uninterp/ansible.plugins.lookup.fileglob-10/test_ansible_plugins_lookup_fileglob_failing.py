# Automatically generated by Pynguin.
import ansible.plugins.lookup.fileglob as module_0

def test_case_0():
    try:
        str_0 = 'KDE neon'
        set_0 = {str_0, str_0}
        str_1 = '}'
        dict_0 = {}
        lookup_module_0 = module_0.LookupModule(dict_0)
        var_0 = lookup_module_0.run(set_0, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\nB3;6(D\x0cT^\tBB:E'
        float_0 = -1835.88149
        lookup_module_0 = module_0.LookupModule(float_0)
        var_0 = lookup_module_0.run(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '0m?ma='
        str_1 = '\nname: sh\nshort_description: "POSIX shell (/bin/sh)"\nversion_added: historical\ndescription:\n  - This shell plugin is the one you want to use on most Unix systems, it is the most compatible and widely installed shell.\nextends_documentation_fragment:\n  - shell_common\n'
        list_0 = []
        str_2 = '/v3'
        dict_0 = {str_0: str_0}
        lookup_module_0 = module_0.LookupModule(dict_0)
        var_0 = lookup_module_0.run(list_0, str_2)
        dict_1 = {str_1: str_1, str_1: str_1, str_1: str_1}
        var_1 = lookup_module_0.run(str_2, **dict_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'ansible_search_path'
        str_1 = '\\(upstart (.*)\\)'
        str_2 = {str_0: str_1}
        lookup_module_0 = module_0.LookupModule()
        bool_0 = False
        lookup_module_1 = module_0.LookupModule(bool_0)
        var_0 = lookup_module_0.run(str_1, str_2)
    except BaseException:
        pass