# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0
import docstring_parser.common as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = '?'
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_3():
    str_0 = ':}>3'
    section_0 = module_0.Section(str_0, str_0)
    numpydoc_parser_0 = module_0.NumpydocParser()
    var_0 = numpydoc_parser_0.add_section(section_0)

def test_case_4():
    str_0 = 'Loads the requested sample from the list of currently available\n        testing samples.\n\n        Parameters\n        ==========\n        p1 : str\n            parameter 1\n        p2 : str, optional\n            parameter 2\n\n        Returns\n        =======\n        tuple\n            (param1, param2)\n        '
    docstring_0 = module_0.parse(str_0)

def test_case_5():
    str_0 = "\n                Function description\n\n                Parameters\n                ----------\n                a : int                    a number.\n                b : str, optional\n                    a string.\n\n                Raises\n                ------\n                VaueEror\n                    If a is negative or b is too long.\n\n                Returns\n                -------\n                result\n                   The result of the calculation.\n\n                Example\n                -------\n                >>> print(test_function(1, 'a'))\n                "
    docstring_0 = module_0.parse(str_0)
    str_1 = ''
    docstring_1 = module_0.parse(str_1)

def test_case_6():
    str_0 = '.. deprecated:: 1.2.3\n    This is deprecated\n'
    section_0 = module_0.Section(str_0, str_0)
    docstring_0 = module_0.parse(str_0)

def test_case_7():
    str_0 = '\n    Short description\n    \n    Long description\n    \n    Parameters\n    ----------\n    alpha : int\n        description of alpha\n       \n    beta : str\n        description of beta\n    \n    gamma : str, optional\n        description of gamma\n    \n    Attributes\n    ----------\n    attr1 : str\n        attribute 1\n    \n    attr2 : str\n        attribute 2\n    \n    Returns\n    -------\n    str\n        return description\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = "\n                Function description\n\n                Parameters\n                ----------\n                a : int\n                    a number.\n                b : str, optional\n                    a string.\n\n                Raises\n                ------\n                ValueError\n                    If a is negative or b is too long.\n\n                Returns\n                -------\n                result\n                    The result of the calculation.\n\n                Example\n                -------\n                >>> print(test_function(1, 'a'))\n                "
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    str_0 = 'deprecated'
    str_1 = 'deprecation'
    deprecation_section_0 = module_0.DeprecationSection(str_0, str_1)
    var_0 = deprecation_section_0.key
    var_1 = [var_0]
    str_2 = 'Some message\nnext line'
    str_3 = '0.0.3'
    docstring_deprecated_0 = module_1.DocstringDeprecated(var_1, str_2, str_3)
    iterable_0 = deprecation_section_0.parse(str_1)
    var_2 = list(iterable_0)
    str_4 = 'IbI522)n"Sly'
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_5 = 'q[]n'
    iterable_1 = deprecation_section_0.parse(str_5)
    docstring_0 = numpydoc_parser_0.parse(str_4)

def test_case_10():
    str_0 = '\n    Short description\n    \n    Long description\n    \n    Parameters\n    ----------\n    alpha : int\n        description of alpha\n       \n    beta : str\n        description of beta\n    \n    gamma : str, optional\n        descriptios of gamma\n    \n    Attributes\n    --------d-\n    attr1 : str\n        attribute 1\n    \n    attr2 : str\n        attribute 2\n    \n    Returns\n    -------\n    str\n        return description\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = "\n    Short description.\n\n    Long description.\n\n    Parameters\n    ----------\n    arg1 : str\n        arg1 description.\n    arg2 : type (optional)\n        arg2 description.\n        Default is 'default'.\n    arg3, optional\n        arg3 description.\n        Default is 1.\n    arg4 : :class:`Class`\n        arg4 description.\n\n    Keyword Arguments\n    -----------------\n    karg1 : bool\n        karg1 description.\n\n    Returns\n    -------\n    str\n        return description.\n    "
    docstring_0 = numpydoc_parser_0.parse(str_0)
    var_0 = docstring_0.meta
    var_1 = len(var_0)