# Automatically generated by Pynguin.
import flutils.codecs.raw_utf8_escape as module_0
import collections as module_1
import codecs as module_2

def test_case_0():
    try:
        str_0 = None
        tuple_0 = module_0.encode(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.register()
        module_0.register()
        bytes_0 = b'\x03\x10\x86\xc9\xc1n\xb4\x98'
        int_0 = -1664
        tuple_0 = (bytes_0, int_0)
        user_string_0 = module_1.UserString(tuple_0)
        tuple_1 = module_0.encode(user_string_0)
    except BaseException:
        pass

def test_case_2():
    try:
        module_0.register()
        module_0.register()
        bytes_0 = b's\x9c\xb9@w\x12\xd72\xb9YJB\xcf\xe9\xbe?'
        tuple_0 = module_0.decode(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        module_0.register()
        module_0.register()
        bytes_0 = b''
        str_0 = ''
        str_1 = '=xtx0"PeM`L@'
        str_2 = 'J9:L"I'
        dict_0 = {str_0: bytes_0, str_0: str_0, str_1: bytes_0, str_2: str_0}
        user_string_0 = module_1.UserString(dict_0)
        tuple_0 = module_0.decode(bytes_0, user_string_0)
        str_3 = 'pre_txt'
        module_0.register()
        tuple_1 = module_0.encode(str_3)
        str_4 = '-,]et$S#DB'
        tuple_2 = module_0.encode(str_3)
        tuple_3 = module_0.encode(str_4, str_3)
        str_5 = ''
        module_0.register()
        tuple_4 = module_0.encode(str_5, str_5)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 481.0
        tuple_0 = module_0.decode(float_0)
    except BaseException:
        pass

def test_case_5():
    try:
        module_0.register()
        tuple_0 = None
        module_0.register()
        tuple_1 = module_0.decode(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        module_0.register()
        str_0 = 'eutf8h'
        var_0 = module_2.getdecoder(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        module_0.register()
        str_0 = '_To.'
        int_0 = 24
        tuple_0 = (str_0, int_0)
        tuple_1 = module_0.decode(tuple_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        byte_string_0 = None
        str_0 = "Convert the given ``text`` into a string of escaped UTF8 hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped UTF8 hexadecimal.\n\n    Example:\n        >>> from flutils.strutils import as_literal_utf8\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_escaped_utf8_literal(t)\n        '\\\\x31\\\\x2e\\\\xe2\\\\x98\\\\x85\\\\x20\\\\xf0\\\\x9f\\\\x9b\n        \\\\x91'\n    "
        tuple_0 = module_0.encode(str_0)
        tuple_1 = module_0.decode(byte_string_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        module_0.register()
        module_0.register()
        bytes_0 = b'@Nf\xcb'
        user_string_0 = module_1.UserString(bytes_0)
        tuple_0 = module_0.encode(user_string_0, user_string_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'E<LV#PjguX2'
        tuple_0 = module_0.encode(str_0)
        module_0.register()
        tuple_1 = module_0.encode(str_0, str_0)
        bytes_0 = b'\xf3L'
        tuple_2 = module_0.decode(bytes_0, str_0)
    except BaseException:
        pass