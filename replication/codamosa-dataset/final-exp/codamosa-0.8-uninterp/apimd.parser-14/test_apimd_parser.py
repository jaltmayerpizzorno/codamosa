# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1
import builtins as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = '\r=$Ck,LzN'
    int_0 = -2617
    str_1 = module_0.parent(str_0, level=int_0)

def test_case_2():
    str_0 = 'Y."iL\tQO3o%TuTCMZ]=@'
    bool_0 = module_0.is_public_family(str_0)

def test_case_3():
    str_0 = 'r768D'
    list_0 = []
    bool_0 = False
    str_1 = None
    str_2 = 'Gw'
    dict_0 = {str_1: str_2, str_2: str_2}
    dict_1 = None
    parser_0 = module_0.Parser(bool_0, bool_0, dict_1, dict_0, dict_0)
    expr_0 = module_1.expr()
    list_1 = [expr_0, expr_0, expr_0]
    parser_0.class_api(str_0, str_2, list_1, list_0)

def test_case_4():
    str_0 = 'typing.ContextManager'
    str_1 = module_0.esc_underscore(str_0)

def test_case_5():
    str_0 = '\n    class Foo(object, metaclass=abc.ABCMeta):\n        '
    str_1 = module_0.doctest(str_0)

def test_case_6():
    expr_0 = None
    str_0 = module_0.const_type(expr_0)

def test_case_7():
    str_0 = '+3>F'
    expr_0 = module_1.expr()
    int_0 = -3136
    str_1 = '+(wk$6L0\x0b'
    dict_0 = {str_1: str_1, str_1: str_1}
    parser_0 = module_0.Parser(int_0, dict_0)
    str_2 = parser_0.resolve(str_0, expr_0)

def test_case_8():
    str_0 = 'Unit test for method visit_Subscript of class Resolver.'
    list_0 = [str_0]
    subscript_0 = module_1.Subscript(*list_0)
    str_1 = '\n$pb!0=JEg2I'
    dict_0 = {}
    resolver_0 = module_0.Resolver(str_1, dict_0, str_0)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)

def test_case_9():
    parser_0 = module_0.Parser()

def test_case_10():
    str_0 = 'r768D'
    list_0 = []
    list_1 = []
    bool_0 = False
    dict_0 = {str_0: str_0, str_0: str_0}
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    parser_0.class_api(str_0, str_0, list_0, list_1)

def test_case_11():
    str_0 = 'ah'
    str_1 = 'va[SYD#<FS=6iUL66%\x0c'
    set_0 = {str_1}
    dict_0 = {str_1: set_0, str_1: set_0, str_1: set_0, str_1: set_0}
    parser_0 = module_0.Parser(dict_0)
    parser_0.parse(str_0, str_0)

def test_case_12():
    str_0 = 'V!])`X0U=J9^ReVl'
    ann_assign_0 = None
    list_0 = [str_0, ann_assign_0]
    ann_assign_1 = module_1.AnnAssign(*list_0)
    dict_0 = {}
    parser_0 = module_0.Parser(dict_0)
    parser_0.globals(str_0, ann_assign_1)

def test_case_13():
    parser_0 = module_0.Parser()
    str_0 = parser_0.compile()

def test_case_14():
    bool_0 = False
    str_0 = '.FJK:;?Gai7vh~DVC%'
    str_1 = 'Kv'
    parser_0 = module_0.Parser(bool_0)
    parser_0.parse(str_0, str_1)
    str_2 = parser_0.compile()

def test_case_15():
    int_0 = 0
    bool_0 = False
    str_0 = 'S$i'
    str_1 = 'y\x0cw743fa^eu3qkO_G'
    str_2 = None
    str_3 = '-}^_'
    str_4 = 'ab'
    str_5 = '6:FOVRF\rF&~1'
    dict_0 = {str_0: str_1, str_1: str_2, str_3: str_1, str_4: str_5}
    parser_0 = module_0.Parser(int_0, bool_0, dict_0, dict_0)
    str_6 = parser_0.compile()

def test_case_16():
    parser_0 = module_0.Parser()
    str_0 = '5_Ls6~lYjS_\x0cn|Fw$g5'
    bool_0 = module_0.is_public_family(str_0)
    str_1 = '0}<Qzf]'
    import_from_0 = module_1.ImportFrom()
    parser_0.imports(str_1, import_from_0)
    str_2 = parser_0.compile()

def test_case_17():
    str_0 = 'w\rrn7/T09<qWwoe1'
    parser_0 = module_0.Parser()
    module_x_var_0 = None
    parser_0.load_docstring(str_0, module_x_var_0)

def test_case_18():
    str_0 = 'o'
    list_0 = [str_0, str_0]
    assign_0 = module_1.Assign(*list_0)
    str_1 = "g,Ow'A=vPas"
    str_2 = '%<IJ3\ri\t'
    constant_0 = module_1.Constant(*list_0)
    str_3 = '\x0c%3'
    dict_0 = {str_0: str_2, str_0: str_3}
    resolver_0 = module_0.Resolver(str_0, dict_0)
    a_s_t_0 = resolver_0.visit_Constant(constant_0)
    str_4 = 'OHn}$*UKGi^p\tJU\n+_KI'
    str_5 = 'r%dCiUgX1H&{\x0cccO'
    str_6 = '2f(\'wI"!\t*-B*CW$`V'
    dict_1 = {str_1: str_1, str_2: str_1, str_4: str_5, str_5: str_6}
    parser_0 = module_0.Parser(dict_1)
    parser_0.globals(str_0, assign_0)

def test_case_19():
    str_0 = '`J'
    list_0 = [str_0]
    assign_0 = module_1.Assign(*list_0)
    str_1 = ''
    str_2 = 'le'
    dict_0 = {str_1: str_2}
    parser_0 = module_0.Parser(dict_0, dict_0)
    parser_0.globals(str_0, assign_0)

def test_case_20():
    str_0 = '0moiczrN:;~0Q'
    list_0 = [str_0, str_0, str_0]
    dict_0 = module_2.dict()
    bool_0 = None
    parser_0 = module_0.Parser(bool_0, dict_0, dict_0)
    list_1 = []
    int_0 = None
    resolver_0 = module_0.Resolver(str_0, dict_0)
    dict_1 = {str_0: int_0, str_0: int_0}
    list_2 = [int_0, resolver_0, dict_1, list_0]
    parser_0.class_api(str_0, str_0, list_1, list_2)

def test_case_21():
    list_0 = []
    str_0 = 'Gw'
    dict_0 = {}
    bool_0 = False
    parser_0 = module_0.Parser(bool_0, dict_0)
    list_1 = [list_0]
    list_2 = [list_1, parser_0]
    str_1 = 'uy!buS=@/G]u!Ya{D_*n'
    dict_1 = {str_1: parser_0, str_0: list_1}
    assign_0 = module_1.Assign(*list_2, **dict_1)
    parser_0.globals(str_0, assign_0)

def test_case_22():
    list_0 = []
    str_0 = 'a*'
    bool_0 = module_0.is_public_family(str_0)
    bool_1 = False
    str_1 = 'Gw'
    dict_0 = {str_0: str_1, str_1: str_1}
    dict_1 = None
    parser_0 = module_0.Parser(bool_1, bool_1, dict_1, dict_0, dict_0)
    expr_0 = module_1.expr()
    bool_2 = True
    parser_1 = module_0.Parser(bool_2, dict_1, dict_0)
    str_2 = None
    list_1 = [bool_0, list_0]
    import_from_0 = module_1.ImportFrom(*list_1)
    bool_3 = True
    str_3 = "\x0b_{_.X\x0bzty15W1Zs'*)"
    set_0 = {str_1}
    str_4 = '~mR$k>o-V\\\rLsJ\\'
    dict_2 = {str_3: set_0, str_0: set_0, str_4: set_0}
    parser_2 = module_0.Parser(bool_3, bool_1, dict_0, dict_2, dict_0)
    parser_2.imports(str_2, import_from_0)

def test_case_23():
    str_0 = ''
    str_1 = module_0.code(str_0)
    str_2 = module_0.esc_underscore(str_0)
    str_3 = module_0.code(str_1)
    str_4 = '`vgte?ZQrPGQ>'
    str_5 = 'g&jF6,N5u#\\FJm\th'
    str_6 = module_0.code(str_5)
    str_7 = 'typing.ItemsView'
    str_8 = ' I/#J,'
    str_9 = '[#mJT\n\\0:uLb]QBg'
    import_from_0 = module_1.ImportFrom()
    str_10 = '.qI~r-DeQb'
    str_11 = 'L{k*0'
    dict_0 = {str_11: str_1, str_10: str_7, str_11: str_4}
    parser_0 = module_0.Parser(dict_0)
    str_12 = module_0.doctest(str_4)
    list_0 = [str_0, str_0]
    assign_0 = module_1.Assign(*list_0)
    var_0 = parser_0.__repr__()
    name_0 = module_1.Name(*list_0)
    resolver_0 = module_0.Resolver(str_9, dict_0)
    a_s_t_0 = resolver_0.visit_Name(name_0)
    str_13 = 'G~}(DX[#MB/bm+vHm!'
    parser_0.globals(str_13, assign_0)
    str_14 = module_0.doctest(str_8)
    name_1 = module_1.Name()
    str_15 = parser_0.compile()

def test_case_24():
    int_0 = None
    dict_0 = {}
    str_0 = "pj`63C['*9^y!|\rN#D<"
    str_1 = '\\\\mLP\\j9BjSw\rUv^a(M('
    str_2 = '[7d3'
    dict_1 = {str_0: str_1, str_0: str_2, str_0: str_0, str_2: str_0}
    dict_2 = {}
    parser_0 = module_0.Parser(int_0, dict_0, dict_1, dict_2, dict_1)
    expr_0 = None
    str_3 = module_0.const_type(expr_0)
    module_x_var_0 = None
    parser_0.load_docstring(str_2, module_x_var_0)

def test_case_25():
    str_0 = 'Unit test for method visit_Subscript of class Resolver.'
    list_0 = [str_0]
    subscript_0 = module_1.Subscript(*list_0)
    str_1 = 'lK'
    str_2 = '_<C~m'
    dict_0 = {str_0: str_0, str_2: subscript_0, str_1: str_0}
    expr_0 = module_1.expr(**dict_0)
    str_3 = 'kC'
    int_0 = -2262
    dict_1 = {str_3: int_0, str_0: int_0}
    str_4 = 'Z;'
    str_5 = '^'
    str_6 = "_\tjO\tfuBwP av_xE'"
    str_7 = module_0.esc_underscore(str_6)
    dict_2 = {str_1: str_4, str_5: str_6}
    dict_3 = {}
    parser_0 = module_0.Parser(dict_1, dict_2, dict_2, dict_3, dict_2, dict_2)
    str_8 = parser_0.resolve(str_0, expr_0)
    expr_1 = module_1.expr()
    list_1 = [expr_1, expr_1, expr_1]
    list_2 = []
    bool_0 = False
    int_1 = -2221
    bool_1 = True
    str_9 = 'O'
    str_10 = 'typing.MutableSet'
    dict_4 = {str_0: str_0, str_9: str_10, str_0: str_10}
    parser_1 = module_0.Parser(bool_0, int_1, bool_1, dict_4, dict_4, dict_4)
    parser_1.class_api(str_1, str_0, list_1, list_2)
    str_11 = '\n$pb!0=JEg2I'
    resolver_0 = module_0.Resolver(str_11, dict_2, str_0)
    a_s_t_0 = resolver_0.visit_Subscript(subscript_0)