# Automatically generated by Pynguin.
import apimd.parser as module_0
import ast as module_1

def test_case_0():
    try:
        str_0 = '%[\tu'
        str_1 = module_0.code(str_0)
        str_2 = '`J'
        list_0 = []
        assign_0 = module_1.Assign(*list_0)
        str_3 = '}V'
        str_4 = 'le'
        dict_0 = {str_4: str_4, str_3: str_3}
        parser_0 = module_0.Parser(dict_0, dict_0)
        parser_0.globals(str_2, assign_0)
    except BaseException:
        pass

def test_case_1():
    try:
        constant_0 = module_1.Constant()
        str_0 = 'LKa-||^jf*/u~B\n%\x0bgT9'
        str_1 = 'Enums'
        str_2 = '_,qPsdH#:'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_1: str_2}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
    except BaseException:
        pass

def test_case_2():
    try:
        name_0 = module_1.Name()
        str_0 = 'a'
        sequence_0 = None
        iterator_0 = module_0.walk_body(sequence_0)
        str_1 = 'typing.re.Match'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_1, str_0: str_0}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_3():
    try:
        expr_0 = None
        str_0 = 'O%Msc\r'
        dict_0 = None
        resolver_0 = module_0.Resolver(str_0, dict_0, str_0)
        list_0 = [expr_0, resolver_0, resolver_0]
        dict_1 = {str_0: expr_0}
        attribute_0 = module_1.Attribute(*list_0, **dict_1)
        a_s_t_0 = resolver_0.visit_Attribute(attribute_0)
        subscript_0 = module_1.Subscript()
        a_s_t_1 = resolver_0.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_4():
    try:
        parser_0 = module_0.Parser()
        dict_0 = {}
        str_0 = 'X^7\\Z'
        str_1 = 'X~<q$Mm\tey\\17\rM\tdv3'
        dict_1 = {str_1: dict_0}
        import_0 = module_1.Import(**dict_1)
        parser_0.imports(str_0, import_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '1wT-[xd'
        import_from_0 = None
        parser_0 = module_0.Parser()
        parser_0.imports(str_0, import_from_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '1'
        ann_assign_0 = module_1.AnnAssign()
        int_0 = 2157
        parser_0 = module_0.Parser(int_0)
        parser_0.globals(str_0, ann_assign_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '`J'
        list_0 = []
        assign_0 = module_1.Assign(*list_0)
        str_1 = '}V'
        str_2 = 'le'
        dict_0 = {str_1: str_2}
        parser_0 = module_0.Parser(dict_0, dict_0)
        parser_0.globals(str_0, assign_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "~Ck^Y&pGY9(t7|['92HO"
        function_def_0 = module_1.FunctionDef()
        int_0 = -1047
        str_1 = '_8l[o%K^'
        int_1 = -1822
        int_2 = -3205
        dict_0 = {str_1: int_1, str_1: int_2}
        str_2 = '^>hZm2M\x0cg d*M$# '
        str_3 = 'eE'
        set_0 = {str_3}
        dict_1 = {str_2: set_0, str_3: set_0, str_1: set_0}
        dict_2 = {}
        parser_0 = module_0.Parser(int_0, dict_0, dict_1, dict_2)
        parser_0.api(str_0, function_def_0)
    except BaseException:
        pass

def test_case_9():
    try:
        parser_0 = module_0.Parser()
        str_0 = '5_Ls6~lYjS_\x0cn|Fw$g5'
        bool_0 = module_0.is_public_family(str_0)
        str_1 = '0}<Qzf]'
        import_from_0 = module_1.ImportFrom()
        parser_0.imports(str_1, import_from_0)
        str_2 = parser_0.compile()
        list_0 = []
        str_3 = 'tJ'
        str_4 = 'st'
        arguments_0 = module_1.arguments(*list_0)
        async_function_def_0 = module_1.AsyncFunctionDef()
        bool_1 = False
        dict_0 = {}
        parser_1 = module_0.Parser(bool_1, dict_0)
        parser_1.func_api(str_3, str_4, arguments_0, async_function_def_0, has_self=bool_0, cls_method=bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '2Q$d$)A,W!3*\n'
        bool_0 = True
        bool_1 = False
        parser_0 = module_0.Parser(bool_0, bool_1)
        bool_2 = parser_0.is_public(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'r|cX"s&h'
        bool_0 = True
        int_0 = -545
        str_1 = '\x0c'
        dict_0 = {str_0: int_0, str_1: int_0, str_0: int_0}
        dict_1 = {}
        str_2 = 'typing.TypeVar'
        str_3 = '\x0cDN[Uvlv(Kav\rj|[tO'
        str_4 = module_0.code(str_3)
        str_5 = module_0.doctest(str_2)
        parser_0 = module_0.Parser(bool_0, dict_0, dict_1, dict_1)
        var_0 = parser_0.__post_init__()
        str_6 = None
        list_0 = [str_6, str_6]
        dict_2 = {}
        ann_assign_0 = module_1.AnnAssign(*list_0, **dict_2)
        str_7 = None
        str_8 = '.O>eNH#8[4w'
        str_9 = ':4\n%vIBU`ZQwPZG@\tK['
        dict_3 = {str_7: str_7, str_7: str_8, str_7: str_7, str_9: str_9}
        str_10 = '*wKnq VOx*'
        str_11 = module_0.doctest(str_10)
        parser_1 = module_0.Parser(dict_3, dict_3, dict_3)
        arguments_0 = module_1.arguments(*list_0)
        expr_0 = module_1.expr(*list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "/?oPmZ'k8C$"
        str_1 = '#8b6M\\#D%\t%Y(?@3v'
        list_0 = [str_0, str_0]
        str_2 = 'LN)]W}BD/x|NnC'
        str_3 = '~\'Wj?\n1N3MdP"[9s7I{'
        dict_0 = {str_2: str_0, str_1: str_0, str_3: str_3}
        arguments_0 = module_1.arguments(*list_0, **dict_0)
        bool_0 = None
        bool_1 = None
        dict_1 = {str_0: str_0}
        parser_0 = module_0.Parser(dict_1, dict_1)
        parser_0.func_api(str_0, str_1, arguments_0, bool_0, has_self=bool_1, cls_method=bool_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'c\nl\to'
        list_0 = [str_0]
        function_def_0 = module_1.FunctionDef(*list_0)
        bool_0 = True
        str_1 = 'm'
        str_2 = 'Nz0oz~J&:jh|}J;I'
        str_3 = '{\nuptMZXg73FK\r1KmS'
        str_4 = 'DM'
        str_5 = ' &meXz<vr\r1Bv:'
        str_6 = None
        dict_0 = {str_2: str_4, str_5: str_6, str_2: str_5, str_2: str_2}
        parser_0 = module_0.Parser(dict_0)
        var_0 = parser_0.__repr__()
        dict_1 = {str_1: str_5, str_3: str_0, str_1: str_4, str_1: str_1, str_2: str_0, str_0: str_0}
        parser_1 = module_0.Parser(bool_0, bool_0, dict_1, dict_1)
        parser_1.api(str_0, function_def_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = []
        expr_0 = module_1.expr()
        expr_1 = module_1.expr(*list_0)
        str_0 = module_0.const_type(expr_1)
        str_1 = 'QvIPW'
        bool_0 = module_0.is_magic(str_1)
        int_0 = -140
        str_2 = '|#%))i`*\x0bJ:ny=v'
        str_3 = 'e^\nvC.DTniu-'
        list_1 = [bool_0, str_3, int_0]
        arguments_0 = module_1.arguments(*list_1)
        dict_0 = {str_1: arguments_0}
        str_4 = '{uf7M$Mdlzs)Y:]eBi$'
        str_5 = None
        dict_1 = {str_4: str_4, str_5: str_0}
        resolver_0 = module_0.Resolver(str_2, dict_1, str_1)
        expr_2 = module_1.expr(**dict_0)
        bool_1 = True
        bool_2 = None
        bool_3 = False
        parser_0 = module_0.Parser(bool_3)
        parser_0.func_api(str_2, str_2, arguments_0, expr_2, has_self=bool_1, cls_method=bool_2)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'r|cX"s&h'
        str_1 = ''
        str_2 = module_0.code(str_1)
        str_3 = module_0.doctest(str_0)
        bool_0 = True
        int_0 = -545
        str_4 = '`LA.te?ZQ5PGQ>'
        dict_0 = {str_3: int_0, str_4: int_0, str_3: int_0}
        str_5 = ' I/#J,'
        str_6 = module_0.doctest(str_4)
        list_0 = [str_3, str_3]
        dict_1 = {}
        str_7 = '.O>eNH#8[4w'
        str_8 = '*wKnq VOx*'
        str_9 = module_0.doctest(str_8)
        int_1 = 0
        set_0 = {str_3, str_5, str_0}
        str_10 = ''
        function_def_0 = module_1.FunctionDef(*list_0, **dict_1)
        str_11 = '$'
        str_12 = 'SS6{nn>D/HnmfW\n.1&S>'
        set_1 = set()
        dict_2 = {str_11: set_0, str_12: set_1, str_4: set_1, str_7: set_1}
        parser_0 = module_0.Parser(bool_0, int_1, dict_0, dict_2)
        parser_0.api(str_10, function_def_0, prefix=str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 636
        int_1 = 1
        parser_0 = module_0.Parser(int_1)
        list_0 = [int_1, int_0]
        constant_0 = module_1.Constant(*list_0)
        str_0 = 'le'
        dict_0 = {}
        resolver_0 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        str_1 = parser_0.compile()
        bool_0 = False
        str_2 = '69t_xs'
        str_3 = '#DZc{5~;:]QAzy/\x0b'
        dict_1 = {}
        str_4 = 'LP\\.PCw{su\rNv'
        str_5 = module_0.esc_underscore(str_4)
        str_6 = '&h'
        dict_2 = {str_6: parser_0, str_3: str_6, str_2: dict_1, str_6: str_6}
        expr_0 = module_1.expr(**dict_2)
        str_7 = module_0.const_type(expr_0)
        list_1 = [bool_0]
        assign_0 = module_1.Assign(*list_1, **dict_2)
        parser_0.globals(str_2, assign_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '{\\wHj|<d_IoJ0e9<;'
        str_1 = 'nrE|yj27N=nOW{4N'
        list_0 = [str_0]
        constant_0 = module_1.Constant(*list_0)
        dict_0 = {str_1: str_0, str_1: str_0}
        resolver_0 = module_0.Resolver(str_1, dict_0)
        resolver_1 = module_0.Resolver(str_0, dict_0)
        a_s_t_0 = resolver_0.visit_Constant(constant_0)
        str_2 = '--toc'
        dict_1 = {str_1: str_2, str_1: str_2, str_0: str_1, str_1: str_1}
        resolver_2 = module_0.Resolver(str_0, dict_1)
        subscript_0 = module_1.Subscript()
        a_s_t_1 = resolver_1.visit_Subscript(subscript_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        str_1 = module_0.code(str_0)
        str_2 = module_0.doctest(str_1)
        str_3 = '`vgte?ZQrPGQ>'
        str_4 = 'g&jF6,N5u#\\FJm\th'
        str_5 = module_0.code(str_4)
        str_6 = 'typing.ItemsView'
        import_from_0 = module_1.ImportFrom()
        str_7 = '.14X7@<PeX~JTRL'
        dict_0 = {str_4: str_1, str_7: str_6, str_4: str_3}
        parser_0 = module_0.Parser(dict_0)
        str_8 = module_0.doctest(str_3)
        list_0 = [str_2, str_2]
        assign_0 = module_1.Assign(*list_0)
        name_0 = module_1.Name()
        str_9 = '^3'
        import_from_1 = module_1.ImportFrom(*list_0)
        parser_0.imports(str_9, import_from_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '.FJK:;?Gai7vh~DVC%'
        str_1 = module_0.esc_underscore(str_0)
        str_2 = 'Qv'
        bool_0 = False
        list_0 = [bool_0, str_0]
        str_3 = '$v1\ti'
        str_4 = 'output to a specific directory'
        str_5 = 'typing.Union'
        str_6 = ''
        str_7 = '\x0ca}0-&Wm'
        str_8 = '$+UBg9JTWJ%:'
        str_9 = '.py'
        str_10 = '\nGB>z.$oV'
        str_11 = 'EoGT(-^u(#\x0bF\\y/'
        str_12 = None
        dict_0 = {str_10: str_7, str_11: str_5, str_12: str_4, str_4: str_6}
        resolver_0 = module_0.Resolver(str_9, dict_0, str_1)
        dict_1 = {str_3: resolver_0, str_8: str_5, str_9: resolver_0, str_7: str_8}
        name_0 = module_1.Name(*list_0, **dict_1)
        str_13 = 'IWaj!$@LUGC^'
        dict_2 = {str_1: str_2, str_0: str_2, str_2: str_13, str_1: str_0}
        resolver_1 = module_0.Resolver(str_2, dict_2)
        a_s_t_0 = resolver_1.visit_Name(name_0)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = []
        bool_0 = False
        str_0 = 'Gw'
        str_1 = '\r.,b+M>E^c\\Hn'
        str_2 = '&+n\n='
        dict_0 = {str_2: list_0}
        function_def_0 = module_1.FunctionDef(**dict_0)
        str_3 = 'J1XAAWv_'
        list_1 = [bool_0, dict_0, function_def_0]
        import_from_0 = module_1.ImportFrom(*list_1)
        str_4 = 'gY0'
        str_5 = 'q\\\nfzV,b?'
        dict_1 = {str_1: str_4, str_1: str_5}
        set_0 = {str_0}
        str_6 = '-v'
        str_7 = ',C_t'
        dict_2 = {str_4: set_0, str_6: set_0, str_7: set_0}
        parser_0 = module_0.Parser(bool_0, dict_1, dict_2)
        parser_0.imports(str_3, import_from_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        str_0 = '*8'
        str_1 = None
        str_2 = '_n<i\x0c{4'
        bool_1 = module_0.is_public_family(str_2)
        list_0 = [str_1, str_2, bool_0, str_0]
        expr_0 = module_1.expr(*list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'vI5=8JL\x0c%b8ru[#"~'
        list_0 = [str_0]
        str_1 = 'TO(S'
        import_0 = module_1.Import(*list_0)
        bool_0 = True
        int_0 = -1766
        bool_1 = True
        str_2 = 'I\x0c;lES]"%@%c#'
        int_1 = 1898
        str_3 = "5Kks\rS`j'C;khGCp~"
        str_4 = '><c4d\\0'
        int_2 = 3056
        dict_0 = {str_2: int_1, str_3: int_1, str_4: int_2}
        dict_1 = {}
        parser_0 = module_0.Parser(bool_0, int_0, bool_1, dict_0, dict_1, dict_1)
        parser_0.imports(str_1, import_0)
    except BaseException:
        pass