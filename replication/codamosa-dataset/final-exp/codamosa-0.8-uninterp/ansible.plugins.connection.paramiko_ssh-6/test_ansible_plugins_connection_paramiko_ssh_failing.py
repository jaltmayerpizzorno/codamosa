# Automatically generated by Pynguin.
import ansible.plugins.connection.paramiko_ssh as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        str_0 = 'E:\\agLA4w\\\x0cgXYV)@:'
        my_add_policy_0 = module_0.MyAddPolicy(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        bool_0 = False
        int_0 = 1698
        connection_0 = module_0.Connection(tuple_0, bool_0, int_0)
        var_0 = connection_0.fetch_file(connection_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        set_0 = None
        list_0 = [set_0, set_0, set_0, set_0]
        str_0 = 'ansible_become_method'
        connection_0 = module_0.Connection(list_0, str_0, list_0)
        var_0 = connection_0.close()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0c\x0c1q.$O'
        str_1 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_0}
        int_0 = 32
        set_0 = {str_0, int_0}
        str_2 = '8 Lw\n<'
        list_0 = [dict_0, str_2, set_0]
        dict_1 = {}
        connection_0 = module_0.Connection(set_0, str_2, *list_0, **dict_1)
        var_0 = connection_0.reset()
        bool_0 = False
        dict_2 = {bool_0: bool_0}
        list_1 = [list_0]
        float_0 = None
        int_1 = 126
        connection_1 = module_0.Connection(float_0, bool_0, int_1)
        connection_2 = module_0.Connection(int_0, dict_2, *list_0)
        var_1 = connection_2.put_file(list_1, connection_1)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = 1328.9049885038546
        str_0 = '<K\x0c'
        bool_0 = True
        str_1 = 'XnN+XeGLF#jul5T>'
        bytes_0 = b'Y\xc3x\xbdq\x1a|\xe2\x17\x84\xb5\x80\x89\xfc\r3'
        str_2 = 'p'
        dict_0 = {str_0: float_0, str_0: str_0, str_2: float_0}
        connection_0 = module_0.Connection(bytes_0, dict_0, dict_0)
        var_0 = connection_0.exec_command(float_0, bool_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        str_0 = '3'
        list_0 = [bool_0, str_0, bool_0, str_0]
        connection_0 = module_0.Connection(bool_0, str_0, *list_0)
        str_1 = None
        bool_1 = True
        int_0 = -974
        str_2 = '\x0c^a%o5O</'
        tuple_0 = None
        tuple_1 = (int_0, str_2, tuple_0)
        display_0 = module_1.Display(tuple_1)
        my_add_policy_0 = module_0.MyAddPolicy(display_0, connection_0)
        var_0 = my_add_policy_0.missing_host_key(str_1, bool_0, bool_1)
    except BaseException:
        pass