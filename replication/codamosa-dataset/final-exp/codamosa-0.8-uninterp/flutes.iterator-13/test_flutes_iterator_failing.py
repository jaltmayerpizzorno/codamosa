# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 2317
        list_0 = []
        var_0 = module_0.scanr(int_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b',F$I'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__len__()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 4
        iterator_0 = module_0.take(int_0, int_0)
        list_0 = [iterator_0, iterator_0, iterator_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2189
        bytes_0 = b'N\xb7\xd0H'
        list_0 = [int_0, int_0]
        bool_0 = False
        map_list_0 = module_0.MapList(list_0, bool_0)
        var_0 = map_list_0.__getitem__(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        tuple_0 = ()
        int_0 = 11738
        dict_0 = {int_0: tuple_0, int_0: int_0, int_0: tuple_0, tuple_0: int_0}
        map_list_0 = module_0.MapList(int_0, dict_0)
        int_1 = map_list_0.__len__()
        lazy_list_0 = module_0.LazyList(dict_0)
        var_0 = list(lazy_list_0)
        list_0 = None
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = None
        int_0 = -202
        list_0 = [int_0]
        iterator_0 = module_0.chunk(int_0, list_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        complex_0 = None
        str_0 = 'a'
        lazy_list_0 = module_0.LazyList(str_0)
        var_0 = lazy_list_0.__getitem__(complex_0)
    except BaseException:
        pass

def test_case_8():
    try:
        complex_0 = None
        set_0 = {complex_0, complex_0, complex_0, complex_0}
        str_0 = 'NE0c>nfto=7'
        map_list_0 = module_0.MapList(str_0, set_0)
        iterator_0 = map_list_0.__iter__()
        iterator_1 = module_0.split_by(set_0, criterion=iterator_0)
        str_1 = '7&F+'
        list_0 = [str_1, str_1, str_1, str_1]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        range_0 = module_0.Range(*list_0)
        int_0 = range_0.__len__()
        iterator_0 = module_0.split_by(list_0)
        list_1 = [range_0]
        lazy_list_0 = module_0.LazyList(list_1)
        range_1 = module_0.Range()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'rb'
        str_1 = '?C61My\x0c{!){}ug\x0b*UyJL'
        var_0 = module_0.scanr(str_0, str_1)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 1
        list_0 = [int_0]
        float_0 = 812.794875606233
        iterator_0 = module_0.take(int_0, float_0)
        iterator_1 = module_0.chunk(int_0, list_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = 4998
        list_0 = [int_0]
        float_0 = 848.0
        iterator_0 = module_0.take(int_0, float_0)
        iterator_1 = module_0.chunk(int_0, list_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        var_0 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 1
        list_0 = [int_0]
        float_0 = 848.0
        iterator_0 = module_0.take(int_0, float_0)
        int_1 = -202
        str_0 = 'V\n\n0`_W9+X2\\EQJwx'
        iterator_1 = module_0.drop(int_1, str_0)
        bytes_0 = b'u'
        iterator_2 = module_0.drop_until(iterator_0, bytes_0)
        iterator_3 = module_0.chunk(int_0, list_0)
        int_2 = 2317
        str_1 = 'map_async'
        list_1 = [str_1]
        set_0 = set()
        map_list_0 = module_0.MapList(int_2, set_0)
        iterator_4 = map_list_0.__iter__()
        str_2 = '\n=]I.Psu^pHd~\x0b'
        var_0 = module_0.scanr(iterator_4, str_2, *list_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        bytes_0 = b'\xb3\x1bw7\x95.\xf2>\xc5\xdc\x00\x1d\x0fZ\xa4\x89XQ'
        bool_1 = True
        map_list_0 = module_0.MapList(bytes_0, bool_1)
        var_0 = map_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 1
        float_0 = 848.0
        bool_0 = None
        list_0 = [float_0, int_0]
        range_0 = module_0.Range(*list_0)
        iterator_0 = range_0.__iter__()
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 0
        int_1 = -2
        int_2 = -3
        bool_0 = True
        list_0 = [int_2, int_0, bool_0]
        range_0 = module_0.Range(*list_0)
        int_3 = range_0.__next__()
        str_0 = 'jpHd%HcS'
        list_1 = [int_1]
        range_1 = module_0.Range(*list_1)
        var_0 = range_1.__getitem__(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = 1
        list_0 = []
        float_0 = -2359.043
        iterator_0 = module_0.take(int_0, float_0)
        bytes_0 = b'j\xa1\xdazm\x08G\xc1+'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__iter__()
        bytes_1 = b'u'
        iterator_1 = module_0.drop_until(iterator_0, bytes_1)
        iterator_2 = module_0.chunk(int_0, list_0)
        lazy_list_1 = module_0.LazyList(iterator_2)
        var_1 = lazy_list_1.__getitem__(float_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 5017
        int_1 = 1
        iterable_0 = None
        iterator_0 = module_0.drop(int_1, iterable_0)
        float_0 = 834.0117620700984
        iterable_1 = None
        str_0 = 'w8?jR\x0bTHG)Uz2'
        iterator_1 = module_0.split_by(iterable_1, criterion=str_0)
        iterator_2 = module_0.drop(int_0, iterable_0)
        bytes_0 = b'j\xa1\xdazm\x08\xecG\xc1+'
        lazy_list_0 = module_0.LazyList(bytes_0)
        var_0 = lazy_list_0.__iter__()
        range_0 = None
        str_1 = 'map_async'
        list_0 = [str_1]
        bool_0 = True
        iterator_3 = module_0.split_by(iterable_1, bool_0)
        tuple_0 = (iterator_3,)
        str_2 = "2kKDkxE':R@_,D>L:LI"
        map_list_0 = module_0.MapList(tuple_0, str_2)
        iterator_4 = map_list_0.__iter__()
        tuple_1 = (tuple_0, iterator_4, range_0)
        str_3 = 'reverse_map'
        dict_0 = {str_3: bool_0, str_1: iterator_3, str_0: int_0}
        bytes_1 = b'\x17\xd2\xa3\x83L\xd7w'
        set_0 = {var_0, float_0, bytes_1}
        tuple_2 = (dict_0, set_0)
        list_1 = [iterator_1, tuple_2, str_2, str_3]
        var_1 = module_0.scanr(list_0, tuple_1, *list_1)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 5
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = ' Split by: '
        bool_0 = False
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        int_0 = 10
        var_1 = range(int_0)
        var_2 = lambda x: x % int_0 == bool_0
        iterator_1 = module_0.split_by(var_1, criterion=var_2)
        var_3 = list(iterator_1)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -30
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 0
        iterator_0 = module_0.take(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 56
        var_0 = range(int_0)
        lazy_list_0 = module_0.LazyList(var_0)
        var_1 = list(lazy_list_0)
        set_0 = set()
        var_2 = lazy_list_0.__getitem__(set_0)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 3
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0, int_0]
        lazy_list_0 = module_0.LazyList(list_0)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        iterator_0 = module_0.split_by(lazy_list_1, bool_0)
        iterator_1 = None
        var_0 = module_0.scanl(iterator_0, iterator_1)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 0
        int_1 = 5
        int_2 = 1000000
        var_0 = range(int_2)
        iterator_0 = module_0.drop(int_1, var_0)
        var_1 = list(iterator_0)[int_0]
        var_2 = range(int_2)
        var_3 = list(iterator_0)[int_0]
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = -1443
        int_1 = 5
        int_2 = 1000000
        var_0 = range(int_2)
        iterator_0 = module_0.drop(int_1, var_0)
        var_1 = list(iterator_0)[int_0]
        int_3 = 1000
        var_2 = range(int_3)
        iterator_1 = module_0.drop(int_0, var_2)
        var_3 = list(iterator_1)[int_0]
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 5
        iterator_0 = module_0.drop(int_0, int_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass