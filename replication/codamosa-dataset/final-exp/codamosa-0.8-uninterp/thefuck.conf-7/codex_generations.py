

# Generated at 2022-06-14 08:31:58.116634
# Unit test for method init of class Settings
def test_Settings_init():
    import re
    from datetime import date
    from .logs import exception

    sys.modules.pop('settings', None)

    # create settings file
    settings_path = settings._get_user_dir_path().joinpath('settings.py')
    with settings_path.open(mode='w') as settings_file:
        settings_file.write('# -*- coding: utf-8 -*-\n')
        settings_file.write('# Generated by The Fuck %s settings file\n' %
                            date.today().isoformat())
        settings_file.write('# thefuck supports environment variables.\n')
        settings_file.write('# To use this, prefix the fuck command with TF_ALIAS.\n')

# Generated at 2022-06-14 08:32:10.433568
# Unit test for method init of class Settings
def test_Settings_init():
    from types import ModuleType
    from mock import patch

    def _test_init(test_file, test_env, test_args, expect_file={}, expect_env={}, expect_args={}):
        if test_file == None:
            test_file = {}
        if test_env == None:
            test_env = {}
        if test_args == None:
            test_args = {}
        if expect_file == None:
            expect_file = {}
        if expect_env == None:
            expect_env = {}
        if expect_args == None:
            expect_args = {}


# Generated at 2022-06-14 08:32:12.587317
# Unit test for method init of class Settings
def test_Settings_init():
    assert settings.init(args=None).user_dir == Path('~/.config/thefuck')


# Generated at 2022-06-14 08:32:14.811736
# Unit test for method init of class Settings
def test_Settings_init():
    # settings.init()
    assert settings.confirmation_method == 'prompt-toolkit'

# Generated at 2022-06-14 08:32:26.821650
# Unit test for method init of class Settings
def test_Settings_init():
    assert settings.require_confirmation == True
    assert settings.use_alt_sudo == True
    assert settings.alt_sudo_cmd == u'sudo'
    assert settings.suggestion_timeout == 5
    assert settings.wait_slow_command == 15
    assert settings.history_limit == 100000
    assert settings.repeat == 1
    assert settings.wait_command == 3
    assert settings.num_close_matches == 3
    assert settings.no_colors == False
    assert settings.debug == False
    assert settings.alter_history == True
    assert settings.instant_mode == False
    assert settings.slow_commands == ['((sleep|time) ', 'time ', '(^(|.*/))nice ']

# Generated at 2022-06-14 08:32:36.265976
# Unit test for method init of class Settings
def test_Settings_init():
    import os
    import sys
    import tempfile
    from mock import patch, mock_open
    sys.argv = ['thefuck']
    settings.init()
    assert settings['require_confirmation'] == True
    sys.argv = ['thefuck', '--yes']
    settings.init()
    assert settings['require_confirmation'] == False
    sys.argv = ['thefuck']
    settings.init()
    assert settings['require_confirmation'] == True
    sys.argv = ['thefuck', '--debug']
    settings.init()
    assert settings['debug'] == True
    sys.argv = ['thefuck', '--repeat']
    settings.init()
    assert settings['repeat'] == True

    fd, path = tempfile.mkstemp()

# Generated at 2022-06-14 08:32:44.296525
# Unit test for method init of class Settings
def test_Settings_init():
    import tests.test_settings
    import sys
    sys.modules['thefuck.settings'] = tests.test_settings
    settings.init(None)
    assert settings.require_confirmation == const.DEFAULT_SETTINGS['require_confirmation']
    assert hasattr(settings, 'some_setting')
    assert settings.some_setting == 'some_value'
    assert settings.priority['some_rule'] == 1
    assert 'history_limit' in settings
    assert settings.history_limit == 3
    assert 'wait_command' in settings
    assert settings.wait_command == 1
    assert 'wait_slow_command' in settings
    assert settings.wait_slow_command == 1
    assert 'num_close_matches' in settings
    assert settings.num_close_matches == 3
    assert 'instant_mode'

# Generated at 2022-06-14 08:32:56.180762
# Unit test for method init of class Settings
def test_Settings_init():
    settings.init('')
    assert isinstance(settings.user_dir, Path)
    assert isinstance(settings.rules, list)
    assert isinstance(settings.exclude_rules, list)
    assert isinstance(settings.wait_command, int)
    assert isinstance(settings.wait_slow_command, int)
    assert isinstance(settings.history_limit, int)
    assert isinstance(settings.num_close_matches, int)
    assert isinstance(settings.alter_history, bool)
    assert isinstance(settings.instant_mode, bool)
    assert isinstance(settings.command_not_found, str)
    assert isinstance(settings.priority, dict)
    assert isinstance(settings.slow_commands, list)

# Generated at 2022-06-14 08:33:07.552579
# Unit test for method init of class Settings
def test_Settings_init():
    settings._setup_user_dir = lambda: 'user_dir'
    settings._init_settings_file = lambda: None

    settings._settings_from_file = lambda: 'settings_from_file'
    settings._settings_from_env = lambda: 'settings_from_env'
    settings._settings_from_args = lambda: 'settings_from_args'

    settings.init()

    assert settings.user_dir == 'user_dir'
    assert settings == dict(const.DEFAULT_SETTINGS,
                            user_dir='user_dir',
                            **'settings_from_file',
                            **'settings_from_env',
                            **'settings_from_args')


# Generated at 2022-06-14 08:33:14.432069
# Unit test for method init of class Settings
def test_Settings_init():
    args = mock.MagicMock()
    args.yes = True
    args.debug = True
    args.repeat = False
    settings.update(const.DEFAULT_SETTINGS)

    settings.init(args)

    assert not settings.require_confirmation
    assert settings.debug
    assert settings.repeat is False
    assert settings.alter_history is True
    assert settings.priority == {}
    assert const.DEFAULT_RULES == settings.rules

# Generated at 2022-06-14 08:33:50.346481
# Unit test for method init of class Settings
def test_Settings_init():

    import tempfile
    import shutil

    import thefuck as tf


# Generated at 2022-06-14 08:33:57.238945
# Unit test for method init of class Settings
def test_Settings_init():
    """Unit test for method init of class Settings"""
    import mock
    mock_args = mock.MagicMock()
    mock_args.config = None
    mock_args.debug = False
    mock_args.yes = False
    mock_args.repeat = None
    mock_args.help = False
    mock_args.version = False
    os.environ['THEFUCK_REQUIRE_CONFIRMATION'] = 'False'
    os.environ['THEFUCK_RULES'] = 'some_rules:some_other_rules:DEFAULT_RULES'
    os.environ['THEFUCK_PRIORITY'] = 'some_rules=1:some_other_rules=2'
    os.environ['THEFUCK_WAIT_COMMAND'] = '1'

# Generated at 2022-06-14 08:34:08.804737
# Unit test for method init of class Settings
def test_Settings_init():
    from .env import set_env
    from .config import set_settings_file, restore_settings_file
    from .system import TemporaryDirectory
    from .utils import get_all_executables
    from .logs import capture_logs

    with TemporaryDirectory() as tmp_dir:
        # Test settings.py
        set_settings_file(tmp_dir)
        with open(os.path.join(tmp_dir, 'settings.py'), 'w') as f:
            f.write('require_confirmation = False')
        settings.init()
        assert not settings.require_confirmation

        # Test env
        with set_env(PATH='/bin:/usr/bin:/usr/local/bin'):
            settings.init()
            assert settings.search_path == '/bin:/usr/bin:/usr/local/bin'



# Generated at 2022-06-14 08:34:19.201031
# Unit test for method init of class Settings
def test_Settings_init():
    from .logs import _logger
    import mock

    settings = Settings()
    settings._init_settings_file = mock.Mock()
    settings._setup_user_dir = mock.Mock()
    settings._settings_from_file = mock.Mock()
    settings._settings_from_env = mock.Mock()
    settings._settings_from_args = mock.Mock()

    settings.init()

    settings._init_settings_file.assert_called_once_with()
    settings._setup_user_dir.assert_called_once_with()
    settings._settings_from_file.assert_called_once_with()
    settings._settings_from_env.assert_called_once_with()
    settings._settings_from_args.assert_called_once_with()


# Generated at 2022-06-14 08:34:32.312722
# Unit test for method init of class Settings
def test_Settings_init():
    import mock
    import builtins
    builtins.__dict__['__builtins__']['ENVIRON'] = {'THEFUCK_REQUIRE_CONFIRMATION': 'True'}
    builtins.__dict__['__builtins__']['SETTINGS'] = {'require_confirmation': True}
    with mock.patch('thefuck.settings.Settings._setup_user_dir'):
        with mock.patch('thefuck.settings.Settings._init_settings_file'):
            with mock.patch('thefuck.settings.Settings._settings_from_env') as mock_settings_from_env:
                with mock.patch('thefuck.settings.Settings._settings_from_args') as mock_settings_from_args:
                    settings.init()
                    assert settings.require_confirmation == True
    assert mock

# Generated at 2022-06-14 08:34:44.843502
# Unit test for method init of class Settings
def test_Settings_init():
    test_args = argparse.Namespace(yes=True, debug=True, repeat=1)
    test_env = {
        'THEFUCK_REQUIRE_CONFIRMATION': 'false',
        'THEFUCK_DEBUG': 'true',
        'THEFUCK_WAIT_COMMAND': '1',
        'THEFUCK_RULES': ':DEFAULT_RULES'
    }

    settings.init(test_args)

    # Tests that only default settings are in settings
    assert settings == const.DEFAULT_SETTINGS
    settings.init()

    # Tests that settings from env are in settings
    os.environ.update(test_env)
    settings.init()
    assert settings['require_confirmation'] == (not test_args.yes)

    # Tests that settings from args are in

# Generated at 2022-06-14 08:34:53.824839
# Unit test for method init of class Settings
def test_Settings_init():
    from .logs import exception
    from .const import SETTINGS_HEADER, DEFAULT_SETTINGS, ENV_TO_ATTR
    from .system import Path
    from .utils import memoize, memoize_with_expiry

    settings_path = settings._get_user_dir_path().joinpath('settings.py')

    memoize = memoize
    memoize_with_expiry = memoize_with_expiry

    with settings_path.open(mode='r') as settings_file:
        assert settings_file.read() == SETTINGS_HEADER
        for setting in DEFAULT_SETTINGS.items():
            assert settings_file.readline() == u'# {} = {}\n'.format(*setting)


# Generated at 2022-06-14 08:34:58.087523
# Unit test for method init of class Settings
def test_Settings_init():
    settings.init(args=['yes'])
    settings.init(args=['debug'])
    settings.init(args=['repeat'])
    settings.init(args=['repeat', 'debug'])

# Generated at 2022-06-14 08:35:08.536103
# Unit test for method init of class Settings
def test_Settings_init():
    # TODO: mock `sys.exc_info`.
    # TODO: test `_init_settings_file`
    import mock
    from os.path import join
    from tempfile import TemporaryDirectory

    settings = Settings({'foo': 'bar'})
    tmp_dir = TemporaryDirectory()
    settings._get_user_dir_path = mock.Mock(return_value=Path(tmp_dir.name))
    settings._init_settings_file = mock.Mock()
    settings._settings_from_env = mock.Mock(return_value={'foo': 'baz'})
    settings._settings_from_args = mock.Mock(return_value={'foo': 'qux'})

    settings.init()


# Generated at 2022-06-14 08:35:18.654715
# Unit test for method init of class Settings
def test_Settings_init():
    def load_source(name, fname):
        return {'wait_command': 1, 'debug': False, 'exclude_rules': ['i']}

    # old value
    old_settings_file = settings.user_dir.joinpath('settings.py')
    old_val = open(settings.user_dir.joinpath('settings.py')).read()
    old_val = old_val.split('\n')

    # new value
    new_settings_file = settings.user_dir.joinpath('settings.py')
    new_val = open(settings.user_dir.joinpath('settings.py')).read()
    new_val = new_val.split('\n')

    # test
    settings.init()
    assert new_val != old_val
    assert settings.wait_command == 1
   

# Generated at 2022-06-14 08:36:15.976248
# Unit test for method init of class Settings
def test_Settings_init():
    from .logs import exception
    from .config import Path

    def test_func(self, *_):
        """Mock for function `load_source`."""
        self.update({'key': 'value'})

    settings._init_settings_file = lambda: None
    settings.init = lambda *_: None
    settings.update = lambda d: None
    settings._settings_from_env = lambda: {'key2': 'value2'}
    settings._settings_from_args = lambda *_: {'key3': 'value3'}
    settings.user_dir = Path('~/.config/thefuck')
    settings._get_user_dir_path = lambda: Path('~/.config/thefuck')
    settings.user_dir.joinpath = lambda p: 'thefuck/settings.py'
    settings._

# Generated at 2022-06-14 08:36:30.121229
# Unit test for method init of class Settings
def test_Settings_init():
    # Scenario: User config resource not exists

    # Given settings object and environment variables
    from thefuck import const
    import sys
    import os
    import shutil
    from warnings import warn
    from six import StringIO
    from thefuck.logs import exception
    from thefuck.settings import Settings
    old_user_dir = os.environ.get('XDG_CONFIG_HOME', '~/.config')
    os.environ['XDG_CONFIG_HOME'] = '~/user_config'
    settings = Settings()
    warn_msg = StringIO()
    warn_old = warn
    warn = lambda msg, *args: warn_msg.write(text_type(msg))

    # When user config resource not exists and call Init method
    def exception_old(*args):
        pass
        # print args


# Generated at 2022-06-14 08:36:38.638673
# Unit test for method init of class Settings
def test_Settings_init():
    from .logs import exception
    from .logs import clear

    from .config import settings
    from .config import const
    from .tests.utils import CustomObject
    from .tests.utils import DummyArgs

    old_function = exception
    exception_logs = []
    clear()

    def exception(msg, *args):
        exception_logs.append(msg)


# Generated at 2022-06-14 08:36:40.679799
# Unit test for method init of class Settings
def test_Settings_init():
    settings.init()

    assert(settings['alter_history'])
    assert(settings['priority'])
    assert(settings['rules'])

# Generated at 2022-06-14 08:36:46.057217
# Unit test for method init of class Settings
def test_Settings_init():
    """Unit test for method init of class Settings."""
    settings.init()
    assert settings['require_confirmation'] == True
    assert settings['priority'] == const.DEFAULT_PRIORITY
    assert settings['rules'] == const.DEFAULT_RULES



# Generated at 2022-06-14 08:36:53.200018
# Unit test for method init of class Settings
def test_Settings_init():
    settings.init()
    assert settings.get('confirm') == 'simple'
    settings.init(args=type('', (), {'yes': True})())
    assert settings.get('confirm') is False
    settings.init(args=type('', (), {'debug': True})())
    assert settings.get('debug') is True
    settings.init(args=type('', (), {'repeat': 1})())
    assert settings.get('repeat') == 1
    settings.init(args=type('', (), {'yes': True, 'repeat': 1})())
    assert settings.get('confirm') is False
    assert settings.get('repeat') == 1

# Generated at 2022-06-14 08:37:06.384398
# Unit test for method init of class Settings
def test_Settings_init():
    args = []
    settings.init(args)
    assert settings.user_dir == settings._get_user_dir_path()
    assert settings['require_confirmation'] == True
    assert settings['no_colors'] == False
    assert settings['debug'] == False
    assert settings['wait_command'] == 1
    assert settings['wait_slow_command'] == 15
    assert settings['alter_history'] == False
    assert settings['instant_mode'] == False
    assert settings['history_limit'] == None
    assert settings['rules'] == const.DEFAULT_RULES
    assert settings['exclude_rules'] == []
    assert settings['priority'] == {}
    assert settings['slow_commands'] == []
    assert settings['excluded_search_path_prefixes'] == []

# Generated at 2022-06-14 08:37:20.151825
# Unit test for method init of class Settings
def test_Settings_init():
    """
    Settings.init() should use default settings when settings.py does not exist
    """

    # Setup
    class Args(object):
        def __init__(self, rule_name):
            self.rule_name = rule_name

    from tempfile import TemporaryDirectory
    from shutil import rmtree
    from os import environ

    with TemporaryDirectory() as temp_dir:
        # 1. settings.py doesn't exist
        environ['XDG_CONFIG_HOME'] = temp_dir
        settings.init()

        # 2. settings.py exists
        with open(os.path.join(temp_dir, 'settings.py'), 'w') as settings_py:
            settings_py.write('rules = ["echo"]')
        settings.init()

        # 3. Command line args

# Generated at 2022-06-14 08:37:24.031950
# Unit test for method init of class Settings
def test_Settings_init():
    settings = Settings()
    settings.init()
    strings = ['slow_commands', 'excluded_search_path_prefixes']
    for key in strings:
        assert isinstance(settings.get(key), tuple)

# Generated at 2022-06-14 08:37:37.899876
# Unit test for method init of class Settings
def test_Settings_init():
    from .logs import exception
    from .utils import get_closest

    settings.init()
    assert settings.user_dir and settings.user_dir.is_dir()
    assert settings.user_dir.joinpath('rules').is_dir()
    assert settings.user_dir.joinpath('settings.py').is_file()
    assert settings.num_close_matches == \
           const.DEFAULT_SETTINGS['num_close_matches']
    assert settings.require_confirmation == \
           const.DEFAULT_SETTINGS['require_confirmation']
    assert settings.get_closest == get_closest
    assert settings.log_exception == exception

    with os.environ.copy():
        os.environ['THEFUCK_DEBUG'] = 'true'
        os.environ

# Generated at 2022-06-14 08:39:19.927495
# Unit test for method init of class Settings
def test_Settings_init():
    global settings
    result = Settings()
    result.init()
    assert result == settings


# Generated at 2022-06-14 08:39:32.746037
# Unit test for method init of class Settings
def test_Settings_init():
    import platform
    import socket
    import time
    import random
    import string

    random_string = ''.join(random.choice(string.ascii_uppercase) for _ in range(6))
    test_settings = Settings()
    test_settings._settings_from_file = lambda: {
        'wait_slow_command': 0.0000001,
        'num_close_matches': 200,
    }

# Generated at 2022-06-14 08:39:46.167557
# Unit test for method init of class Settings
def test_Settings_init():
    from .logs import exception
    from .utils import get_all_executables

    original_exception = exception
    exception_call_times = 0
    def exception_mock(message, exception_info):
        global exception_call_times
        exception_call_times += 1
        original_exception(message, exception_info)

    settings.init()
    expected_settings_from_file = const.DEFAULT_SETTINGS
    assert settings.get('rules') == expected_settings_from_file['rules']
    assert settings.get('slow_commands') == expected_settings_from_file['slow_commands']
    assert settings['require_confirmation'] == expected_settings_from_file['require_confirmation']
    assert settings['history_limit'] == expected_settings_from_file['history_limit']
   

# Generated at 2022-06-14 08:39:57.976096
# Unit test for method init of class Settings
def test_Settings_init():
    settings_test = Settings()
    assert settings_test.init()  == settings['require_confirmation']
    assert settings_test.init()  == settings['no_colors']
    assert settings_test.init()  == settings['alter_history']
    assert settings_test.init()  == settings['wait_command']
    assert settings_test.init()  == settings['history_limit']
    assert settings_test.init()  == settings['wait_slow_command']
    assert settings_test.init()  == settings['rules']
    assert settings_test.init()  == settings['debug']
    assert settings_test.init()  == settings['require_confirmation']
    assert settings_test.init()  == settings['repeat']
    assert settings_test.init()  == settings['no_colors']
    assert settings_

# Generated at 2022-06-14 08:40:00.203455
# Unit test for method init of class Settings
def test_Settings_init():
    settings = Settings()
    settings.init()
    assert settings['require_confirmation'] == True


# Generated at 2022-06-14 08:40:13.297178
# Unit test for method init of class Settings
def test_Settings_init():
    # add some environment variables
    os.environ['TF_ALTER_HISTORY'] = 'true'
    os.environ['TF_SLOW_COMMANDS'] = 'sed:grep'
    os.environ['TF_EXCLUDED_SEARCH_PATH_PREFIXES'] = '/mypath'
    os.environ['TF_WAIT_SLOW_COMMAND'] = '4'
    os.environ['TF_NO_COLORS'] = 'true'
    os.environ['TF_PRIORITY'] = 'ssh=3:cd=1'
    os.environ['TF_RULES'] = 'DEFAULT_RULES:pwd'
    os.environ['TF_EXCLUDE_RULES'] = 'vim'

# Generated at 2022-06-14 08:40:23.146794
# Unit test for method init of class Settings
def test_Settings_init():
    from .logs import exception
    from .utils import get_all_executables

    args = lambda v: lambda s: setattr(s, v, None)
    all_executables = get_all_executables()

    for executable in all_executables:
        if executable == 'python':
            continue
        with exception(new_log_file=executable + '.log'):
            s = Settings()
            s.init(args(executable))
            assert s['python3'] == executable
            assert s['slow_commands'] == ['(?i)python$']
            assert s['rules'] == ['git_push', 'git_pull']

# Generated at 2022-06-14 08:40:34.676697
# Unit test for method init of class Settings
def test_Settings_init():
    args = type('', (), {'yes': True})

    path = Settings._get_user_dir_path('known-path')
    mock_setup_user_dir = MagicMock()

# Generated at 2022-06-14 08:40:48.038516
# Unit test for method init of class Settings
def test_Settings_init():
    import sys
    import mock
    from .logs import exception

    Settings.init(settings, mock.Mock(yes=True, debug=True, repeat=1))
    # Fill settings with values from settings.py and env
    assert settings.user_dir == Path('.thefuck')
    assert settings.require_confirmation == False
    assert settings.debug == True
    assert settings.repeat == 1
    # Fix wrong loading from settings.py
    assert settings.require_confirmation == False
    assert settings.debug == True

    with mock.patch.dict(sys.modules, {'settings': mock.Mock(require_confirmation=True)}):
        Settings.init(settings)

    # Fix wrong loading from settings.py
    assert settings.require_confirmation == False
    assert settings.debug == True


# Generated at 2022-06-14 08:40:58.594878
# Unit test for method init of class Settings
def test_Settings_init():
    global settings
    settings = Settings({})
    settings.init()

    assert settings['rules'] == const.DEFAULT_RULES
    assert settings['priority'] == {'pwd': 100}
    assert settings['require_confirmation'] is False
    assert settings['wait_command'] == 0.1
    assert settings['no_colors'] is False
    assert settings['debug'] is False
    assert settings['alter_history'] is True
    assert settings['instant_mode'] is False
    assert settings['slow_commands'] == []
    assert settings['history_limit'] == None
    assert settings['wait_slow_command'] == 10
    assert settings['excluded_search_path_prefixes'] == []
    assert settings['exclude_rules'] == []
    assert settings['num_close_matches'] == 3
    assert settings