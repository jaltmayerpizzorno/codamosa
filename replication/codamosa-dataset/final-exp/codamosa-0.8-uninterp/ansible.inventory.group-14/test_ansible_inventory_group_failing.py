# Automatically generated by Pynguin.
import ansible.inventory.group as module_0

def test_case_0():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__repr__()
        var_1 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_1():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__getstate__()
        str_0 = ''
        var_1 = group_0.add_child_group(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = 'WYXfT'
        group_0 = module_0.Group(str_0)
        var_0 = group_0.get_ancestors()
        group_1 = module_0.Group()
        var_1 = group_1.__setstate__(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\x10\x82n\xd4c\xea?\r\x98\xa88\xc6\xad\x9a'
        group_0 = module_0.Group()
        var_0 = group_0.add_child_group(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.add_child_group(group_0)
    except BaseException:
        pass

def test_case_5():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_6():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__str__()
        str_0 = '\n    This class wraps the parsing and validation of the optional metadata\n    within each Role (meta/main.yml).\n    '
        tuple_0 = None
        var_1 = group_0.set_variable(str_0, tuple_0)
        var_2 = group_0.add_child_group(group_0)
    except BaseException:
        pass

def test_case_7():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.get_vars()
        var_1 = group_0.__str__()
        str_0 = '!HO@LPx7BY'
        var_2 = group_0.set_priority(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.set_priority(group_0)
        var_1 = group_0.get_name()
        bool_0 = True
        var_2 = group_0.clear_hosts_cache()
        var_3 = group_0.add_host(bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__str__()
        group_1 = module_0.Group()
        var_1 = group_1.__repr__()
        var_2 = group_0.add_child_group(group_1)
        list_0 = [group_1, group_1, var_0]
        var_3 = group_0.get_hosts()
        var_4 = group_0.add_host(list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__str__()
        group_1 = module_0.Group()
        str_0 = '\n    This class wraps the parsing and validation of the optional metadata\n    within each Role (meta/main.yml).\n    '
        tuple_0 = None
        var_1 = group_0.set_variable(str_0, tuple_0)
        var_2 = group_0.add_child_group(group_1)
        var_3 = group_1.serialize()
        var_4 = group_1.get_hosts()
        complex_0 = None
        var_5 = group_0.add_host(complex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__str__()
        group_1 = module_0.Group()
        str_0 = '\n    Ths class wraps the arsing and validation of the optional metadata\n    within each Rle (mea/main.yml).\n    '
        tuple_0 = None
        var_1 = group_0.set_variable(str_0, tuple_0)
        var_2 = group_0.add_child_group(group_1)
        var_3 = group_0.get_hosts()
        var_4 = group_0.__getstate__()
        var_5 = group_1.clear_hosts_cache()
        str_1 = 's2v[]d@v96i4F|Bqy7'
        group_2 = module_0.Group(str_1)
        var_6 = group_2.add_host(group_0)
    except BaseException:
        pass

def test_case_12():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__str__()
        group_1 = module_0.Group()
        str_0 = '\n    Ths class wraps the arsing and validation of the optional metadata\n    within each Rle (mea/main.yml).\n    '
        tuple_0 = None
        var_1 = group_0.set_variable(str_0, tuple_0)
        var_2 = group_0.add_child_group(group_1)
        var_3 = group_0.get_hosts()
        var_4 = group_0.__getstate__()
        var_5 = group_0.add_child_group(group_1)
        str_1 = 's2v[]d@v96i4F|Bqy7'
        group_2 = module_0.Group(str_1)
        var_6 = group_2.add_host(group_0)
    except BaseException:
        pass

def test_case_13():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__str__()
        group_1 = module_0.Group()
        var_1 = group_1.add_child_group(group_0)
        str_0 = '\n    Ths class wraps the arsing and validation of the optional metadata\n    within each Rle (mea/main.yml).\n    '
        tuple_0 = None
        var_2 = group_0.set_variable(str_0, tuple_0)
        var_3 = group_0.add_child_group(group_1)
    except BaseException:
        pass

def test_case_14():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        str_0 = '\n    Ths class wraps the arsing and validation of the optional metadata    within each Rle (mea/main.yml).\n    '
        tuple_0 = None
        var_0 = group_0.set_variable(str_0, tuple_0)
        str_1 = 'xy\\,%-M\t1u'
        dict_0 = {str_0: var_0, str_0: group_0, str_1: group_1}
        var_1 = group_1.deserialize(dict_0)
        var_2 = group_0.add_child_group(group_1)
        group_2 = module_0.Group()
        var_3 = group_2.add_child_group(group_0)
        var_4 = group_2.get_hosts()
        var_5 = group_0.get_name()
        var_6 = group_0.__getstate__()
        var_7 = group_0.serialize()
        int_0 = 956
        group_3 = module_0.Group()
        var_8 = group_0.add_host(int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        str_0 = '\n    Ths class wraps the arsing and validation of the optional metadata    within each Rle (mea/main.yml).\n    '
        tuple_0 = None
        var_0 = group_0.set_variable(str_0, tuple_0)
        str_1 = 'xy\\,%-M\t1u'
        dict_0 = {str_0: var_0, str_0: group_0, str_1: group_1}
        var_1 = group_1.deserialize(dict_0)
        var_2 = group_0.add_child_group(group_1)
        var_3 = group_0.__getstate__()
        group_2 = module_0.Group()
        var_4 = group_2.add_child_group(group_0)
        var_5 = group_1.clear_hosts_cache()
        var_6 = group_0.get_hosts()
        var_7 = group_0.get_name()
        var_8 = group_0.__getstate__()
        str_2 = 's2v[]d@v96i4F|Bqy7'
        group_3 = module_0.Group(str_2)
        var_9 = group_1.add_host(group_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'test_group'
        group_0 = module_0.Group(str_0)
        str_1 = 'test1'
        str_2 = 'bar'
        str_3 = 'a'
        str_4 = 'b'
        str_5 = '1'
        str_6 = '2'
        str_7 = {str_3: str_5, str_4: str_6}
        var_0 = group_0.set_variable(str_1, str_7)
        var_1 = group_0.set_variable(str_1, str_2)
        str_8 = {str_3: str_5}
        var_2 = group_0.set_variable(str_1, str_8)
        str_9 = 'test2'
        var_3 = group_0.set_variable(str_9, str_6)
        var_4 = group_0.set
    except BaseException:
        pass

def test_case_17():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        str_0 = 'lmOfb~?SC\r9N`P?<#'
        tuple_0 = None
        var_0 = group_0.set_variable(str_0, tuple_0)
        str_1 = '7y\\,6-M\t1u'
        var_1 = group_0.__str__()
        dict_0 = {str_0: var_0, str_0: group_0, str_1: group_1}
        var_2 = group_1.clear_hosts_cache()
        var_3 = group_1.deserialize(dict_0)
        var_4 = group_1.set_priority(dict_0)
        var_5 = group_0.add_child_group(group_1)
        group_2 = module_0.Group()
        var_6 = group_2.add_child_group(group_1)
        var_7 = group_2.get_hosts()
        var_8 = group_1.get_name()
        var_9 = group_1.__getstate__()
        var_10 = group_2.serialize()
        var_11 = group_2.get_vars()
        group_3 = module_0.Group()
        var_12 = group_0.add_host(tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        group_0 = module_0.Group()
        group_1 = module_0.Group()
        str_0 = 'lmOfb~?SC\r9N`P?<#'
        tuple_0 = None
        var_0 = group_0.set_variable(str_0, tuple_0)
        float_0 = 694.2
        var_1 = group_0.remove_host(group_1)
        var_2 = group_0.set_variable(str_0, float_0)
        str_1 = '7y\\,6-M\t1u'
        var_3 = group_0.__str__()
        dict_0 = {str_0: var_0, str_0: group_0, str_1: group_1}
        var_4 = group_1.clear_hosts_cache()
        var_5 = group_1.deserialize(dict_0)
        var_6 = group_1.set_priority(dict_0)
        var_7 = group_0.add_child_group(group_1)
        group_2 = module_0.Group()
        bool_0 = False
        var_8 = group_1.set_variable(bool_0, dict_0)
        var_9 = group_2.add_child_group(group_0)
        var_10 = group_0.get_hosts()
        var_11 = group_0.get_name()
        var_12 = group_2.serialize()
        group_3 = module_0.Group()
        var_13 = group_3.get_vars()
        group_4 = module_0.Group()
        var_14 = group_0.add_host(group_0)
    except BaseException:
        pass

def test_case_19():
    try:
        group_0 = module_0.Group()
        var_0 = group_0.__repr__()
        group_1 = module_0.Group()
        group_2 = module_0.Group()
        str_0 = 'lmOfb~?SC\r9N`P?<#'
        tuple_0 = None
        var_1 = group_1.set_variable(str_0, tuple_0)
        var_2 = group_1.remove_host(group_2)
        var_3 = group_1.__str__()
        list_0 = [group_1]
        var_4 = group_1.set_priority(list_0)
        dict_0 = {str_0: var_1, str_0: group_1, str_0: group_2}
        var_5 = group_2.clear_hosts_cache()
        var_6 = group_2.deserialize(dict_0)
        var_7 = group_0.get_vars()
        var_8 = group_2.set_priority(dict_0)
        var_9 = group_1.add_child_group(group_2)
        group_3 = module_0.Group()
        bool_0 = False
        var_10 = group_2.set_variable(bool_0, dict_0)
        var_11 = group_3.add_child_group(group_1)
        var_12 = group_0.add_child_group(group_3)
        var_13 = group_2.get_hosts()
        group_4 = module_0.Group()
        var_14 = group_4.get_name()
        group_5 = module_0.Group()
        var_15 = group_5.__getstate__()
        var_16 = group_4.serialize()
        group_6 = module_0.Group()
        var_17 = group_6.get_vars()
        group_7 = module_0.Group()
        var_18 = group_7.add_host(tuple_0)
    except BaseException:
        pass