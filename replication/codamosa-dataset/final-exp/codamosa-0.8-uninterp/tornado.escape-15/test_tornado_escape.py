# Automatically generated by Pynguin.
import tornado.escape as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'squeeze'
    str_1 = module_0.xhtml_unescape(str_0)

def test_case_2():
    float_0 = 1262.64434
    str_0 = module_0.json_encode(float_0)

def test_case_3():
    str_0 = ''
    str_1 = module_0.url_escape(str_0)

def test_case_4():
    str_0 = '`{8'
    var_0 = module_0.url_unescape(str_0)

def test_case_5():
    bytes_0 = b'hj\xe5\x84\xf9\xdc\xa1]\xf0\xb8O1FC^\xe6'
    str_0 = module_0.url_escape(bytes_0)

def test_case_6():
    bool_0 = False
    str_0 = ''
    bool_1 = True
    dict_0 = module_0.parse_qs_bytes(str_0, bool_1)
    any_0 = module_0.recursive_unicode(bool_0)

def test_case_7():
    str_0 = 'i like this photo http://example.com/p/123 this is the end'
    str_1 = module_0.linkify(str_0)

def test_case_8():
    str_0 = 'L}VrZ'
    bool_0 = False
    str_1 = module_0.url_escape(str_0, bool_0)

def test_case_9():
    str_0 = '8_vi"^7CXoErj'
    str_1 = module_0.linkify(str_0)

def test_case_10():
    str_0 = "Coordinate producer and consumer coroutines.\n\n    If maxsize is 0 (the default) the queue size is unbounded.\n\n    .. testcode::\n\n        from tornado import gen\n        from tornado.ioloop import IOLoop\n        from tornado.queues import Queue\n\n        q = Queue(maxsize=2)\n\n        async def consumer():\n            async for item in q:\n                try:\n                    print('Doing work on %s' % item)\n                    await gen.sleep(0.01)\n                finally:\n                    q.task_done()\n\n        async def producer():\n            for item in range(5):\n                await q.put(item)\n                print('Put %s' % item)\n\n        async def main():\n            # Start consumer without waiting (since it never finishes).\n            IOLoop.current().spawn_callback(consumer)\n            await producer()     # Wait for producer to put all tasks.\n            await q.join()       # Wait for consumer to finish all tasks.\n            print('Done')\n\n        IOLoop.current().run_sync(main)\n\n    .. testoutput::\n\n        Put 0\n        Put 1\n        Doing work on 0\n        Put 2\n        Doing work on 1\n        Put 3\n        Doing work on 2\n        Put 4\n        Doing work on 3\n        Doing work on 4\n        Done\n\n\n    In versions of Python without native coroutines (before 3.5),\n    ``consumer()`` could be written as::\n\n        @gen.coroutine\n        def consumer():\n            while True:\n                item = yield q.get()\n                try:\n                    print('Doing work on %s' % item)\n                    yield gen.sleep(0.01)\n                finally:\n                    q.task_done()\n\n    .. versionchanged:: 4.3\n       Added ``async for`` support in Python 3.5.\n\n    "
    dict_0 = module_0.parse_qs_bytes(str_0)
    str_1 = '/htJtDsU7f'
    bool_0 = True
    optional_0 = module_0.to_unicode(str_1)
    var_0 = module_0.url_unescape(str_1, str_1, bool_0)
    any_0 = module_0.recursive_unicode(dict_0)

def test_case_11():
    str_0 = 'Hello https://tornadoweb.org! www.example.com www.example.com'
    str_1 = module_0.linkify(str_0)

def test_case_12():
    str_0 = 'www.example.com'
    str_1 = module_0.linkify(str_0)
    str_2 = 'http://www.example.com'
    str_3 = module_0.linkify(str_2)
    str_4 = 'https://example.com'
    str_5 = module_0.linkify(str_4)
    str_6 = 'mailto:foo@example.com'
    str_7 = module_0.linkify(str_6)
    str_8 = 'user@host'
    str_9 = module_0.linkify(str_8)
    str_10 = module_0.linkify(str_6)
    bool_0 = False
    list_0 = [str_9, str_4, str_8]
    str_11 = module_0.linkify(str_1, str_2, bool_0, list_0)

def test_case_13():
    str_0 = 'Hel)o ,ttps://tornadoweb.org! www.examle.com www.example.com'
    str_1 = module_0.linkify(str_0)

def test_case_14():
    str_0 = 'i like this photo http://example.com/p/123'
    str_1 = module_0.linkify(str_0)
    bool_0 = True
    bool_1 = None
    str_2 = "k=O}|dL(R76'"
    list_0 = [str_2]
    str_3 = module_0.linkify(str_1, bool_0, bool_1, list_0)

def test_case_15():
    str_0 = 'something like www.google.com or https://www.google.com or www.yahoo.com/more/or/less or http://127.0.0.1:8888'
    str_1 = module_0.linkify(str_0)
    str_2 = module_0.linkify(str_0)
    var_0 = print(str_2)
    bool_0 = True
    str_3 = module_0.linkify(str_1, bool_0)

def test_case_16():
    str_0 = 'hello <a href="http://tornadoweb.org" class="foo">http://tornadoweb.org</a>'
    bool_0 = True
    str_1 = module_0.linkify(str_0, bool_0)
    str_2 = module_0.xhtml_unescape(str_1)

def test_case_17():
    str_0 = 'http://google.com'
    bool_0 = False
    str_1 = "L;7+sf9i\r=fGF'lX"
    list_0 = [str_1, str_1]
    optional_0 = module_0.utf8(str_0)
    any_0 = module_0.recursive_unicode(str_0)
    str_2 = module_0.json_encode(list_0)
    str_3 = module_0.linkify(str_2, bool_0, str_2)
    dict_0 = module_0.parse_qs_bytes(str_3)
    var_0 = module_0.url_unescape(str_3)
    str_4 = module_0.xhtml_unescape(str_3)
    bool_1 = True
    dict_1 = module_0.parse_qs_bytes(str_1, bool_1)
    str_5 = module_0.linkify(str_0, str_0)

def test_case_18():
    int_0 = 1
    bytes_0 = b'1'
    any_0 = module_0.recursive_unicode(bytes_0)
    bytes_1 = b'123'
    var_0 = [int_0, bytes_1]
    any_1 = module_0.recursive_unicode(var_0)
    var_1 = (int_0, bytes_1)
    any_2 = module_0.recursive_unicode(var_1)