# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        class_def_0 = module_0.ClassDef()
        callable_0 = None
        module_1.extend(callable_0)
        snippet_0 = module_1.snippet(callable_0)
        str_0 = None
        function_def_0 = None
        str_1 = 'pathlib2'
        dict_0 = {str_0: str_0, str_1: str_1}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    except BaseException:
        pass

def test_case_1():
    try:
        except_handler_0 = module_0.ExceptHandler()
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        list_0 = [except_handler_1, except_handler_1]
        alias_0 = module_0.alias(*list_0)
        str_0 = "'n:SQ`N"
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_1 = module_1.VariablesReplacer(dict_1)
        alias_1 = variables_replacer_1.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_2():
    try:
        import_from_0 = module_0.ImportFrom()
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        snippet_0 = module_1.snippet(dict_0)
        alias_0 = module_0.alias()
        str_0 = 'getcwdu'
        str_1 = '/y~og=D=1\x0c`\\7P='
        str_2 = '#iX.'
        dict_1 = {str_0: str_1, str_2: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\nlet(x)\nx += 1\nlet(y)\ny -= 2\nz = x + y\n'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
        var_1 = list(iterable_0)
        except_handler_0 = None
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'six'
        str_1 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_1}
        variables_replacer_0 = None
        list_0 = [variables_replacer_0]
        snippet_0 = module_1.snippet(list_0)
        list_1 = snippet_0.get_body(**dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'enable debug output'
        module_1.let(str_0)
        str_1 = 'extend(p)\nextend(q)'
        var_0 = module_2.parse(str_1)
        module_1.extend_tree(var_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        import_from_0 = None
        module_1.extend(import_from_0)
        str_0 = 'Mp-'
        str_1 = '{}.{}'
        list_0 = [str_1]
        alias_0 = module_0.alias(*list_0)
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
        str_2 = None
        dict_1 = {str_0: str_0, str_0: str_0, str_2: str_0}
        variables_replacer_1 = module_1.VariablesReplacer(dict_1)
        alias_2 = variables_replacer_1.visit_alias(alias_1)
        dict_2 = {str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_2 = module_1.VariablesReplacer(dict_2)
        attribute_0 = None
        attribute_1 = variables_replacer_2.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '4ax\x0b2c'
        dict_0 = {str_0: str_0}
        function_def_0 = module_0.FunctionDef(**dict_0)
        str_1 = 'tkCommonDialog'
        a_s_t_0 = module_0.AST(**dict_0)
        str_2 = '{]QtTaJ%!%S'
        dict_1 = {str_0: a_s_t_0, str_2: str_1}
        module_1.extend_tree(a_s_t_0, dict_1)
        except_handler_0 = module_0.ExceptHandler()
        str_3 = None
        list_0 = [str_0, str_2]
        import_from_0 = module_0.ImportFrom(*list_0)
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        variables_replacer_1 = module_1.VariablesReplacer(dict_1)
        import_from_2 = variables_replacer_1.visit_ImportFrom(import_from_1)
        dict_2 = {str_3: str_1, str_1: a_s_t_0}
        variables_replacer_2 = module_1.VariablesReplacer(dict_2)
        except_handler_1 = variables_replacer_2.visit_ExceptHandler(except_handler_0)
        class_def_0 = None
        class_def_1 = variables_replacer_2.visit_ClassDef(class_def_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'extend(p)\nextend(q)'
        var_0 = module_2.parse(str_0)
        module_1.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        a_s_t_0 = module_0.AST()
        str_0 = '\nlet(x)\nxW+= 1\nlJt(y)\ny -= 2\nz = x + y\n'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
        var_1 = list(var_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'exgtend(p)\nextend(q)'
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        var_0 = module_2.parse(str_0)
        module_1.extend_tree(var_0, str_0)
    except BaseException:
        pass