# Automatically generated by Pynguin.
import tornado.netutil as module_0
import socket as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 8829
    list_0 = module_0.bind_sockets(int_0)

def test_case_2():
    str_0 = 'localhost'
    socket_0 = module_0.bind_unix_socket(str_0)
    var_0 = socket_0.__enter__()

def test_case_3():
    str_0 = ' ^'
    bool_0 = module_0.is_valid_ip(str_0)

def test_case_4():
    dict_0 = {}
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)

def test_case_5():
    dict_0 = {}
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
    s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)

def test_case_6():
    socket_0 = module_1.socket()
    dict_0 = {}
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
    s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0)

def test_case_7():
    str_0 = '127.0.0.1.2'
    bool_0 = module_0.is_valid_ip(str_0)
    str_1 = ''
    bool_1 = module_0.is_valid_ip(str_1)
    str_2 = 'localhost'
    bool_2 = module_0.is_valid_ip(str_2)
    str_3 = '::1'
    bool_3 = module_0.is_valid_ip(str_3)
    str_4 = '2001:db8:85a3:0:0:8a2e:370:7334'
    bool_4 = module_0.is_valid_ip(str_4)

def test_case_8():
    address_family_0 = module_1.AddressFamily.AF_ALG
    list_0 = [address_family_0, address_family_0]
    override_resolver_0 = module_0.OverrideResolver(*list_0)

def test_case_9():
    str_0 = 'localhost'
    int_0 = 1055
    list_0 = module_0.bind_sockets(int_0, str_0)

def test_case_10():
    str_0 = 'localhost'
    socket_0 = module_0.bind_unix_socket(str_0)
    var_0 = socket_0.__enter__()
    int_0 = None
    list_0 = module_0.bind_sockets(int_0, str_0)