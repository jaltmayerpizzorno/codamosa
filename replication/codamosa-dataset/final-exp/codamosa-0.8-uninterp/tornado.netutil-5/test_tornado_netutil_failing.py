# Automatically generated by Pynguin.
import tornado.netutil as module_0
import socket as module_1

def test_case_0():
    try:
        int_0 = 8810
        list_0 = module_0.bind_sockets(int_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 8829
        list_0 = module_0.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '(D'
        bool_0 = module_0.is_valid_ip(str_0)
        socket_0 = module_0.bind_unix_socket(str_0)
        override_resolver_0 = module_0.OverrideResolver()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '=5"'
        socket_0 = module_0.bind_unix_socket(str_0)
        callable_0 = module_0.add_accept_handler(socket_0, socket_0)
    except BaseException:
        pass

def test_case_4():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'u-\r'
        socket_0 = module_0.bind_unix_socket(str_0)
        dict_0 = {}
        resolver_0 = module_0.Resolver()
        resolver_0.close()
        blocking_resolver_0 = module_0.BlockingResolver(**dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '*yL{v+w|8\\Bd0.s%{byi'
        str_1 = '(D'
        bool_0 = module_0.is_valid_ip(str_1)
        resolver_0 = module_0.Resolver()
        resolver_0.close()
        socket_0 = module_0.bind_unix_socket(str_0)
        override_resolver_0 = module_0.OverrideResolver()
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        blocking_resolver_0 = module_0.BlockingResolver(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        threaded_resolver_0 = module_0.ThreadedResolver()
    except BaseException:
        pass

def test_case_9():
    try:
        s_s_l_context_0 = None
        s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
    except BaseException:
        pass

def test_case_10():
    try:
        socket_0 = None
        str_0 = 'A}PO)vwo'
        dict_0 = {str_0: str_0}
        dict_1 = {}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0, str_0, **dict_1)
    except BaseException:
        pass

def test_case_11():
    try:
        resolver_0 = module_0.Resolver()
        str_0 = None
        int_0 = 0
        awaitable_0 = resolver_0.resolve(str_0, int_0)
        str_1 = None
        socket_0 = module_0.bind_unix_socket(str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Applications use this interface to write their responses.\n\n    .. versionadded:: 4.0\n    '
        bool_0 = module_0.is_valid_ip(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = -263
        str_0 = ''
        address_family_0 = module_1.AddressFamily.AF_INET
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0)
    except BaseException:
        pass

def test_case_14():
    try:
        socket_0 = module_1.socket()
        dict_0 = {}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
        str_0 = '\x00'
        bool_0 = module_0.is_valid_ip(str_0)
        int_0 = 1055
        str_1 = 'v3:8kZi1r '
        int_1 = None
        list_0 = module_0.bind_sockets(int_0, str_1, int_1)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = -2996
        str_0 = None
        address_family_0 = module_1.AddressFamily.AF_BLUETOOTH
        int_1 = 1333
        bool_0 = True
        list_0 = module_0.bind_sockets(int_0, str_0, address_family_0, int_1, int_0, bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        socket_0 = None
        list_0 = [socket_0]
        list_1 = [list_0, socket_0]
        override_resolver_0 = module_0.OverrideResolver(*list_1)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'google.com'
        str_1 = '3fo\x0b_)/P\x0c2\x0caa^76h'
        bool_0 = module_0.is_valid_ip(str_1)
        int_0 = 7
        list_0 = module_0.bind_sockets(int_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        socket_0 = module_1.socket()
        dict_0 = {}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
        str_0 = 'n=\\Ps9P3D7\nE<C'
        int_0 = -2206
        address_family_0 = module_1.AddressFamily.AF_ECONET
        list_0 = [dict_0, s_s_l_socket_0]
        override_resolver_0 = module_0.OverrideResolver(*list_0)
        awaitable_0 = override_resolver_0.resolve(str_0, int_0, address_family_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 8769
        str_0 = 'cert_reqs'
        socket_0 = module_0.bind_unix_socket(str_0)
        dict_0 = {str_0: str_0}
        str_1 = 'o\x0c\n!#x?B)qa1y'
        str_2 = 'Basque'
        dict_1 = {str_1: str_0, str_0: dict_0, str_0: str_0, str_0: str_0, str_1: int_0, str_2: str_2}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0, str_0, **dict_1)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'localhost'
        socket_0 = module_0.bind_unix_socket(str_0)
        set_0 = set()
        var_0 = socket_0.makefile(set_0)
        dict_0 = {}
        s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, dict_0)
        int_0 = None
        list_0 = module_0.bind_sockets(int_0, str_0)
        str_1 = 'jcS`biM^<&yIv'
        bool_0 = module_0.is_valid_ip(str_1)
        str_2 = 'google.com'
        bool_1 = module_0.is_valid_ip(str_2)
        str_3 = '.'
        socket_1 = module_0.bind_unix_socket(str_3)
    except BaseException:
        pass