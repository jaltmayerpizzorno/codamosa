# Automatically generated by Pynguin.
import argparse as module_0
import httpie.client as module_1
import pathlib as module_2
import httpie.cli.dicts as module_3

def test_case_0():
    try:
        namespace_0 = module_0.Namespace()
        request_headers_dict_0 = module_1.make_default_headers(namespace_0)
    except BaseException:
        pass

def test_case_1():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_1.make_send_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_2():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_1.make_send_kwargs_mergeable_from_env(namespace_0)
    except BaseException:
        pass

def test_case_3():
    try:
        namespace_0 = module_0.Namespace()
        dict_0 = module_1.make_request_kwargs(namespace_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'v>|D'
        bool_0 = False
        session_0 = module_1.build_requests_session(bool_0, str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'http://httpbin.org/ip'
        str_1 = module_1.ensure_path_as_is(str_0, str_0)
        int_0 = 0
        int_1 = 1
        var_0 = int_0 + int_1
        var_1 = print(var_0)
        var_2 = print(int_1)
        var_3 = print(int_1)
        dict_0 = {}
        namespace_0 = module_0.Namespace(**dict_0)
        path_0 = module_2.Path()
        iterable_0 = module_1.collect_messages(namespace_0, path_0)
        request_headers_dict_0 = module_3.RequestHeadersDict(iterable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        session_0 = module_1.build_requests_session(bool_0)
        str_0 = '.,cLs?o`lSBV+'
        complex_0 = None
        str_1 = '://'
        str_2 = '5y^8'
        dict_0 = {str_0: complex_0, str_1: session_0, str_2: session_0, str_1: str_0}
        request_headers_dict_0 = module_3.RequestHeadersDict(**dict_0)
        request_headers_dict_1 = module_1.finalize_headers(request_headers_dict_0)
    except BaseException:
        pass