# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    pass

def test_case_1():
    var_0 = module_0.get_all_plugin_loaders()

def test_case_2():
    bool_0 = False
    list_0 = [bool_0, bool_0]
    dict_0 = {}
    plugin_path_context_0 = module_0.PluginPathContext(list_0, dict_0)
    plugin_load_context_0 = module_0.PluginLoadContext()
    var_0 = plugin_load_context_0.redirect(plugin_path_context_0)
    list_1 = None
    str_0 = 'c6s\n3LcY'
    var_1 = module_0.get_shell_plugin(list_1, str_0)

def test_case_3():
    plugin_load_context_0 = None
    str_0 = 'n+'
    var_0 = module_0.get_shell_plugin(plugin_load_context_0, str_0)

def test_case_4():
    tuple_0 = ()
    bool_0 = True
    bool_1 = False
    plugin_loader_0 = module_0.PluginLoader(tuple_0, bool_0, tuple_0, bool_1)
    var_0 = plugin_loader_0.__getstate__()
    str_0 = 'K p\\fe`lBC~,\x0bW'
    float_0 = 2910.0
    var_1 = plugin_loader_0.has_plugin(str_0, float_0)

def test_case_5():
    float_0 = None
    var_0 = module_0.add_all_plugin_dirs(float_0)

def test_case_6():
    str_0 = 'action'
    str_1 = '/path/to/action/1'
    str_2 = [str_1, str_0]
    var_0 = module_0.add_dirs_to_loader(str_0, str_2)
    str_3 = 'cache'
    str_4 = '/path/to/cache/1'
    str_5 = '/path/to/cache/2'
    str_6 = [str_4, str_5]
    var_1 = module_0.add_dirs_to_loader(str_3, str_6)

def test_case_7():
    bool_0 = True
    str_0 = '/>r?'
    float_0 = -2707.654658
    bool_1 = False
    str_1 = '\\Y=*%~DX'
    set_0 = {float_0, bool_0}
    plugin_path_context_0 = module_0.PluginPathContext(set_0, bool_1)
    tuple_0 = (bool_1, str_1, plugin_path_context_0)
    plugin_loader_0 = None
    tuple_1 = (float_0, tuple_0, plugin_path_context_0, plugin_loader_0)
    bool_2 = True
    list_0 = [set_0, plugin_loader_0]
    float_1 = 2965.0
    plugin_loader_1 = module_0.PluginLoader(tuple_1, bool_2, float_0, list_0, float_1)
    var_0 = plugin_loader_1.add_directory(str_0)

def test_case_8():
    var_0 = module_0.get_all_plugin_loaders()
    str_0 = 'cmd'
    var_1 = module_0.get_shell_plugin(str_0)

def test_case_9():
    bool_0 = False
    bytes_0 = b'H\xad'
    var_0 = module_0.get_shell_plugin(bool_0, bytes_0)

def test_case_10():
    set_0 = set()
    str_0 = 'pYYlWh!MvK'
    dict_0 = {}
    plugin_load_context_0 = module_0.PluginLoadContext()
    set_1 = None
    str_1 = 'JL<f'
    tuple_0 = (plugin_load_context_0, set_1, str_1, plugin_load_context_0)
    plugin_loader_0 = module_0.PluginLoader(str_0, str_1, dict_0, tuple_0)
    var_0 = plugin_loader_0.has_plugin(set_0)

def test_case_11():
    plugin_load_context_0 = module_0.PluginLoadContext()
    var_0 = module_0.get_all_plugin_loaders()
    str_0 = '64J|yJkgb@P&"jO'
    list_0 = [plugin_load_context_0, str_0]
    set_0 = {plugin_load_context_0, str_0, str_0, plugin_load_context_0}
    plugin_path_context_0 = module_0.PluginPathContext(list_0, set_0)
    str_1 = "\nattributes:\n    async:\n      support: none\n    become:\n      support: none\n    bypass_task_loop:\n      description: These tasks ignore the C(loop) and C(with_) keywords\n    core:\n      description: This is a 'core engine' feature and is not implemented like most task actions, so it is not overridable in any way via the plugin system.\n      support: full\n    connection:\n      support: none\n    ignore_conditional:\n      support: none\n      description: The action is not subject to conditional execution so it will ignore the C(when:) keyword\n    platform:\n      support: full\n      platforms: all\n    until:\n      description: Denotes if this action objeys until/retry/poll keywords\n      support: full\n    tags:\n      description: Allows for the 'tags' keyword to control the selection of this action for execution\n      support: full\n"
    plugin_path_context_1 = module_0.PluginPathContext(plugin_path_context_0, str_1)
    int_0 = -512
    plugin_path_context_2 = module_0.PluginPathContext(plugin_path_context_1, int_0)
    str_2 = '7y",WvO# t*H(Lr(S%z'
    dict_0 = {str_2: str_2}
    bool_0 = False
    int_1 = 304
    set_1 = set()
    str_3 = 'n77bu/'
    float_0 = 777.9
    jinja2_loader_0 = module_0.Jinja2Loader(str_3, float_0, set_0, plugin_load_context_0)
    bytes_0 = b'[\x8a\xd1'
    dict_1 = {int_1: int_1, int_1: set_1, int_1: set_1, bool_0: int_1}
    plugin_loader_0 = module_0.PluginLoader(bool_0, int_1, set_1, bytes_0, dict_1)
    var_1 = plugin_loader_0.__setstate__(dict_0)

def test_case_12():
    plugin_load_context_0 = None
    set_0 = {plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0}
    var_0 = module_0.get_all_plugin_loaders()
    int_0 = -1600
    var_1 = module_0.get_all_plugin_loaders()
    plugin_path_context_0 = module_0.PluginPathContext(int_0, plugin_load_context_0)
    bool_0 = False
    bytes_0 = b'\xd0\xa2\x19\x92g\x84o\xc2\x15\xa9\xf2.'
    plugin_loader_0 = module_0.PluginLoader(plugin_path_context_0, set_0, bool_0, bytes_0)
    var_2 = plugin_loader_0.__getstate__()
    bool_1 = False
    bytes_1 = b'H\xad'
    var_3 = module_0.get_shell_plugin(bool_1, bytes_1)
    str_0 = '/pynguin/shell_plugins/windows'
    var_4 = module_0.get_shell_plugin(plugin_load_context_0, str_0)

def test_case_13():
    bool_0 = False
    list_0 = [bool_0]
    bool_1 = False
    set_0 = set()
    str_0 = 'K-q"}Xo6z+1`@:0[xyx!'
    str_1 = 'Failed to %s: %s %s'
    plugin_load_context_0 = module_0.PluginLoadContext()
    str_2 = 's\n,l=W!['
    int_0 = 902
    str_3 = '\rB'
    jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, str_2, int_0, str_3)
    plugin_path_context_0 = module_0.PluginPathContext(jinja2_loader_0, jinja2_loader_0)
    str_4 = '/usr/share/ansible/plugins/doc_fragments/windows'
    str_5 = '%'
    jinja2_loader_1 = module_0.Jinja2Loader(plugin_path_context_0, set_0, str_4, str_5)
    var_0 = jinja2_loader_1.all()
    dict_0 = {str_0: str_0, str_1: bool_1}
    int_1 = -838
    tuple_0 = (list_0, dict_0, int_1)
    str_6 = 't'
    plugin_path_context_1 = module_0.PluginPathContext(tuple_0, str_6)
    var_1 = plugin_load_context_0.nope(plugin_path_context_1)

def test_case_14():
    plugin_load_context_0 = None
    str_0 = '_>lDvmH~4'
    var_0 = module_0.get_shell_plugin(plugin_load_context_0, str_0)

def test_case_15():
    plugin_load_context_0 = module_0.PluginLoadContext()
    var_0 = plugin_load_context_0.deprecation_warnings
    var_1 = print(var_0)
    str_0 = 'name'
    str_1 = 'warning_text'
    str_2 = 'text'
    str_3 = {str_1: str_2}
    str_4 = 'collection'
    var_2 = plugin_load_context_0.record_deprecation(str_0, str_3, str_4)
    var_3 = plugin_load_context_0.deprecation_warnings
    var_4 = print(var_3)
    str_5 = 'removal_version'
    str_6 = '2.0'
    str_7 = {str_1: str_2, str_5: str_6}
    var_5 = plugin_load_context_0.record_deprecation(str_0, str_7, str_4)
    var_6 = plugin_load_context_0.deprecation_warnings
    var_7 = print(var_6)
    str_8 = 'removal_date'
    str_9 = '2020-02-02'
    str_10 = {str_1: str_2, str_5: str_6, str_8: str_9}
    var_8 = plugin_load_context_0.record_deprecation(str_0, str_10, str_4)
    var_9 = plugin_load_context_0.deprecation_warnings
    var_10 = print(var_9)

def test_case_16():
    str_0 = 'ModuleUtil'
    str_1 = 'ansible.utils'
    var_0 = dict()
    bool_0 = False
    var_1 = None
    plugin_loader_0 = module_0.PluginLoader(str_0, str_1, bool_0, var_0)
    var_2 = plugin_loader_0.get_with_context(str_1)