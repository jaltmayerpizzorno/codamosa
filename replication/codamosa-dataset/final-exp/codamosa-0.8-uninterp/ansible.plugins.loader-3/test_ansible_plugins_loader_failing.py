# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        plugin_load_context_0 = None
        set_0 = {plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0}
        var_0 = module_0.add_dirs_to_loader(plugin_load_context_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        int_0 = -1568
        var_1 = module_0.get_shell_plugin(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        str_0 = '/input/ansible/plugins/shell/windows'
        list_0 = []
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(bool_0, str_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = 'w9P$'
        str_1 = "6Ay'"
        str_2 = ';"7aW79|\x0bs{\r-td:y'
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'z\t\xb74\xa9\xa1*kH\x1e\xa7\xeb\xf3\xf0\x11.)'
        plugin_loader_0 = module_0.PluginLoader(str_1, str_2, plugin_load_context_0, bytes_0)
        str_3 = 'String to encrypt:'
        var_1 = plugin_loader_0.has_plugin(str_3)
        float_0 = 100.0
        list_0 = [plugin_loader_0, str_1, str_1, var_1]
        str_4 = "K{uP\tK)|]\\b-rX'5[>C"
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, str_1, list_0, str_4)
        plugin_path_context_0 = module_0.PluginPathContext(float_0, jinja2_loader_0)
        bool_0 = False
        bool_1 = False
        str_5 = 'Idf2]5?'
        var_2 = plugin_load_context_0.resolve(bool_0, bool_1, bytes_0, str_5)
        str_6 = '*;_nSTT'
        str_7 = 'L'
        str_8 = ''
        dict_0 = {str_6: str_0, str_2: plugin_loader_0, str_7: str_7, str_8: plugin_loader_0}
        var_3 = module_0.add_all_plugin_dirs(dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'a\x0c}2Hjpn_vf9'
        var_0 = module_0.get_shell_plugin(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1594
        jinja2_loader_0 = None
        float_0 = None
        bytes_0 = b'\xb5\x91#\xfb\x0e\x8c+k.'
        jinja2_loader_1 = module_0.Jinja2Loader(jinja2_loader_0, int_0, float_0, bytes_0)
        var_0 = jinja2_loader_1.all()
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -1549
        var_0 = module_0.get_shell_plugin(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = 'w9P$'
        str_1 = "6Ay'"
        str_2 = ';"7aW79|\x0bs{\r-td:y'
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'z\t\xb74\xa9\xa1*kH\x1e\xa7\xeb\xf3\xf0\x11.)'
        plugin_loader_0 = module_0.PluginLoader(str_1, str_2, plugin_load_context_0, bytes_0)
        str_3 = 'jNqqlIY5i?'
        var_1 = plugin_loader_0.has_plugin(str_3)
        float_0 = 100.0
        list_0 = [plugin_loader_0, str_1, str_1, var_1]
        str_4 = "K{uP\tK)|]\\b-rX'5[>C"
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, str_1, list_0, str_4)
        plugin_path_context_0 = module_0.PluginPathContext(float_0, jinja2_loader_0)
        str_5 = '*;_nSTT'
        str_6 = 'L'
        str_7 = ''
        dict_0 = {str_5: str_0, str_2: plugin_loader_0, str_6: str_6, str_7: plugin_loader_0}
        var_2 = module_0.add_all_plugin_dirs(dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'ansible.legacy.plugins.filter.tests'
        str_1 = 'FilterModule'
        str_2 = 'filter_plugins'
        plugin_loader_0 = module_0.PluginLoader(str_0, str_1, str_2, str_1)
        str_3 = 'Ansible.legacy.plugins.filter.tests.test'
        var_0 = plugin_loader_0.find_plugin(str_3)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = 'dzNZdmcQ"\nk.dOR^g:&('
        list_0 = [str_0, var_0, str_0]
        int_0 = -4040
        bytes_0 = b'\x05\x13 \xc3\xd0\xa8\xa3\xbe'
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_1 = '--depth=1'
        str_2 = '/pynguin/shell_plugins/windows'
        plugin_loader_0 = module_0.PluginLoader(bytes_0, plugin_load_context_0, str_1, str_2)
        var_1 = plugin_loader_0.find_plugin_with_context(str_0, list_0, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        plugin_load_context_0 = None
        bool_0 = False
        str_0 = '+'
        dict_0 = {str_0: plugin_load_context_0, str_0: bool_0}
        bytes_0 = b''
        float_0 = 60.0
        bool_1 = False
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, float_0, str_0, bool_1)
        var_0 = jinja2_loader_0.find_plugin(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 0.0
        bytes_0 = b'\xb0\xf2\xe0\xc5\xad\xfe\xf2\x8c\xb0\x17\xef\x05/\xad\xa7]\xa9\xbeY\x18'
        get_with_context_result_0 = None
        set_0 = {bytes_0}
        plugin_path_context_0 = module_0.PluginPathContext(get_with_context_result_0, set_0)
        dict_0 = {bytes_0: plugin_path_context_0}
        str_0 = 'Ar[Ji9Z%7'
        list_0 = [get_with_context_result_0]
        bool_0 = True
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, set_0, list_0, bool_0, float_0)
        jinja2_loader_1 = module_0.Jinja2Loader(bytes_0, plugin_path_context_0, dict_0, jinja2_loader_0, bool_0)
        int_0 = 7
        tuple_0 = (dict_0, jinja2_loader_0)
        plugin_loader_0 = module_0.PluginLoader(float_0, tuple_0, plugin_path_context_0, set_0)
        bool_1 = True
        str_1 = None
        plugin_loader_1 = module_0.PluginLoader(plugin_loader_0, get_with_context_result_0, bool_1, jinja2_loader_1, str_1)
        plugin_loader_2 = module_0.PluginLoader(jinja2_loader_1, int_0, bytes_0, plugin_loader_1)
        str_2 = 'h"'
        bytes_1 = b'\x8b\xcb\xef\x03\xc9\x9aa\x9c\x1b\x93\xaf\xee\xbe\xc6\x9b28\xd2\x04'
        float_1 = -1773.36659
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.resolve(plugin_loader_2, str_2, bytes_1, float_1)
        str_3 = "\n'U3EZG.pI"
        str_4 = 'B'
        str_5 = ''
        dict_1 = {str_4: dict_0, str_5: bytes_0}
        var_1 = jinja2_loader_0.get(str_3, *list_0, **dict_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'x\rO^?0D,\r?z/l\\}sVQqx'
        list_0 = [str_0, str_0]
        bool_0 = True
        int_0 = -436
        dict_0 = {bool_0: bool_0}
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, int_0, str_0, int_0, dict_0)
        var_0 = jinja2_loader_0.all(*list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        int_0 = 8998
        bytes_0 = b'\xb9\xa6\x07'
        plugin_load_context_0 = module_0.PluginLoadContext()
        dict_0 = {int_0: plugin_load_context_0}
        str_0 = 't'
        list_0 = [str_0]
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, dict_0, plugin_load_context_0, int_0, list_0)
        var_0 = plugin_loader_0.format_paths(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        tuple_0 = ()
        list_0 = []
        str_0 = 'lH'
        list_1 = [str_0, str_0]
        bool_0 = True
        str_1 = "MtBh(X#^7qhZk\x0c'zh5F"
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, list_1, bool_0, str_1)
        var_0 = jinja2_loader_0.get(tuple_0, *list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = b'4*|B\x9c\x03t;xm)'
        dict_0 = None
        float_0 = -282.88206
        var_0 = plugin_load_context_0.record_deprecation(bytes_0, dict_0, float_0)
        plugin_load_context_1 = None
        var_1 = module_0.get_all_plugin_loaders()
        var_2 = module_0.add_all_plugin_dirs(plugin_load_context_1)
        str_0 = 'a'
        var_3 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        tuple_0 = ()
        plugin_load_context_0 = module_0.PluginLoadContext()
        bytes_0 = None
        var_0 = plugin_load_context_0.redirect(bytes_0)
        str_0 = "yZ XY6xt`5QM'd4B$"
        bool_0 = False
        str_1 = 'Gr>?'
        plugin_load_context_1 = module_0.PluginLoadContext()
        str_2 = '=,SB\n'
        dict_0 = {str_0: bool_0, str_2: plugin_load_context_1}
        plugin_loader_0 = module_0.PluginLoader(str_0, bool_0, str_1, plugin_load_context_1, dict_0)
        var_1 = plugin_loader_0.find_plugin_with_context(tuple_0, plugin_load_context_0)
    except BaseException:
        pass

def test_case_18():
    try:
        plugin_load_context_0 = None
        str_0 = '5XY{"2j&RDY'
        bool_0 = False
        bytes_0 = b'H\xb8\xad'
        var_0 = module_0.get_shell_plugin(bool_0, bytes_0)
        list_0 = [plugin_load_context_0, str_0]
        plugin_path_context_0 = module_0.PluginPathContext(plugin_load_context_0, list_0)
        str_1 = '+e<Ou-r/\\;fm'
        float_0 = 2663.272
        set_0 = {bytes_0, plugin_path_context_0}
        plugin_loader_0 = module_0.PluginLoader(str_1, float_0, bool_0, set_0)
        var_1 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = 'mp`V2~Z%@DsVfgl.Tq'
        var_1 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        plugin_load_context_0 = None
        set_0 = {plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0}
        var_0 = module_0.get_all_plugin_loaders()
        int_0 = -1600
        plugin_path_context_0 = module_0.PluginPathContext(int_0, plugin_load_context_0)
        bool_0 = False
        bytes_0 = b'\xd0\xa2\x19\x92g\x84o\xc2\x15\xa9\xf2.'
        plugin_loader_0 = module_0.PluginLoader(plugin_path_context_0, set_0, bool_0, bytes_0)
        var_1 = plugin_loader_0.__getstate__()
        bool_1 = False
        bytes_1 = b'H\xad'
        var_2 = module_0.get_shell_plugin(bool_1, bytes_1)
        str_0 = None
        tuple_0 = (str_0,)
        var_3 = module_0.add_dirs_to_loader(tuple_0, bool_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'iUk6MjHm,,Ozg'
        tuple_0 = ()
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_loader_0 = module_0.PluginLoader(tuple_0, plugin_load_context_0, tuple_0, plugin_load_context_0)
        var_0 = plugin_loader_0.has_plugin(str_0)
        var_1 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_22():
    try:
        plugin_load_context_0 = None
        set_0 = {plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0}
        bytes_0 = b'\xa8^\xbd\xa8\x87\xb0\xcd\x9a\x1d\xc7\x7fT\x9b\xdf\x19\x14\xa8v'
        bool_0 = False
        float_0 = 1432.129
        int_0 = -1602
        str_0 = None
        str_1 = '/pynguin/Gr>?/windows'
        dict_0 = {str_0: bool_0, str_1: bool_0}
        str_2 = '/pynguin/Gr>?/windows'
        plugin_path_context_0 = module_0.PluginPathContext(str_2, float_0)
        plugin_loader_0 = module_0.PluginLoader(bool_0, plugin_load_context_0, dict_0, bool_0, plugin_path_context_0)
        tuple_0 = ()
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_path_context_0, tuple_0, tuple_0, plugin_loader_0)
        jinja2_loader_1 = module_0.Jinja2Loader(int_0, plugin_loader_0, jinja2_loader_0, set_0)
        list_0 = [plugin_load_context_0, plugin_path_context_0, str_2, str_0]
        plugin_loader_1 = module_0.PluginLoader(bool_0, float_0, set_0, jinja2_loader_1, list_0)
        var_0 = plugin_loader_1.format_paths(bytes_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'sslacert'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'cannot read configuration file'
        plugin_load_context_0 = module_0.PluginLoadContext()
        complex_0 = None
        list_0 = [str_0, plugin_load_context_0, complex_0]
        dict_0 = {plugin_load_context_0: plugin_load_context_0, plugin_load_context_0: list_0}
        str_1 = '/root/.ansible/plugins/doc_fragments/windows'
        var_0 = plugin_load_context_0.record_deprecation(list_0, dict_0, str_1)
        list_1 = [var_0, list_0, var_0]
        bool_0 = False
        plugin_loader_0 = module_0.PluginLoader(list_1, plugin_load_context_0, bool_0, list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        plugin_load_context_0 = None
        set_0 = {plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0, plugin_load_context_0}
        var_0 = module_0.get_all_plugin_loaders()
        str_0 = '5XY{"2j&RDY'
        list_0 = [plugin_load_context_0]
        display_0 = module_1.Display()
        int_0 = -3371
        bool_0 = False
        plugin_loader_0 = module_0.PluginLoader(display_0, display_0, set_0, int_0, bool_0, display_0)
        var_1 = plugin_loader_0.has_plugin(str_0, list_0)
        bytes_0 = b'5'
        str_1 = 'i$,5`#Dc1G'
        dict_0 = {}
        tuple_0 = ()
        bool_1 = True
        plugin_loader_1 = module_0.PluginLoader(str_1, dict_0, tuple_0, bool_1, plugin_loader_0)
        var_2 = plugin_loader_1.add_directory(bytes_0)
        var_3 = plugin_loader_0.all()
        bytes_1 = b'\x8c\xf9\xc9\x0f\x80\xd6\xc0'
        list_1 = [plugin_loader_0, var_2]
        str_2 = '<!iHF)[nX_tQ'
        jinja2_loader_0 = module_0.Jinja2Loader(tuple_0, list_1, set_0, set_0, str_2)
        var_4 = jinja2_loader_0.find_plugin(bytes_1)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'ActionModule'
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_1 = ';N\t9Hn['
        float_0 = 41.11871
        set_0 = {float_0}
        bool_0 = True
        int_0 = 10240
        plugin_path_context_0 = module_0.PluginPathContext(bool_0, int_0)
        dict_0 = {bool_0: plugin_load_context_0}
        list_0 = [plugin_path_context_0]
        tuple_0 = (int_0, str_0, dict_0, list_0)
        jinja2_loader_0 = module_0.Jinja2Loader(float_0, set_0, plugin_path_context_0, tuple_0)
        int_1 = 1099
        int_2 = -510
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, plugin_load_context_0, str_1, jinja2_loader_0, int_1, int_2)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_27():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_path_context_0 = None
        str_0 = '[G/!0fW\t\r1[6(rk{}o_-'
        str_1 = ' hba-port'
        int_0 = 2142
        bytes_0 = b"vP\xa3\xbbEU\xd6\xbc'\x17w\x95\xc9"
        tuple_0 = (bytes_0,)
        str_2 = '11TZIA-TKV>xqV\nZ#J~\x0b'
        list_0 = []
        set_0 = {str_2, int_0, int_0}
        plugin_loader_0 = module_0.PluginLoader(int_0, tuple_0, str_2, list_0, set_0)
        var_0 = plugin_loader_0.find_plugin_with_context(plugin_load_context_0, plugin_path_context_0, str_0, str_1)
    except BaseException:
        pass