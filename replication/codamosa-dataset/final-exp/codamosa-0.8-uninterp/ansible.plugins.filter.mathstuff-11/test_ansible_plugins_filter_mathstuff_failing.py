# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        str_0 = "1%<a/['L\rA.\tPfh$%ez"
        int_0 = None
        var_0 = module_0.unique(str_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2206.29
        set_0 = {float_0}
        var_0 = module_0.unique(float_0, set_0, float_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2206.29
        set_0 = {float_0, float_0, float_0}
        float_1 = 0.0
        var_0 = module_0.unique(float_0, set_0, float_1, float_1)
        str_0 = "K^Xx$bCoS'OmE3_"
        list_0 = None
        var_1 = module_0.max(list_0, str_0)
        str_1 = 'tif)\x0b5r$R+hKQ\n7mX'
        str_2 = 'D#|`eJG~yVV9Q'
        str_3 = '\tH.\x0csM0VsY\t:^9'
        var_2 = module_0.difference(str_1, str_2, str_3)
        var_3 = module_0.unique(str_0, str_0)
        str_4 = "#'5 NKv_X?E!IC"
        list_1 = [var_0, str_4, str_4, str_4]
        tuple_0 = (set_0,)
        var_4 = module_0.rekey_on_member(list_1, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1780
        dict_0 = {}
        bool_0 = True
        int_1 = 668
        tuple_0 = (bool_0, int_1)
        tuple_1 = (dict_0, tuple_0)
        var_0 = module_0.symmetric_difference(int_0, tuple_1, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        var_0 = module_0.min(bool_0, bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1175.559116
        str_0 = '}%*u5q,Xx?UBy>#U^l>S'
        str_1 = ' Called to initiate the connect to the remote device\n    '
        dict_0 = {str_0: float_0, str_1: float_0}
        var_0 = module_0.power(float_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -776
        var_0 = module_0.inversepower(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'kh'
        str_1 = 'Downloaded'
        str_2 = '<}DZ$j\r\x0c6*82?p'
        dict_0 = {str_0: str_0, str_1: str_0, str_0: str_1, str_2: str_1}
        var_0 = module_0.inversepower(dict_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = None
        complex_0 = None
        list_0 = [float_0, complex_0]
        filter_module_0 = None
        bytes_0 = b'\xcd\x1f;\xb4-\x80'
        var_0 = module_0.human_readable(list_0, filter_module_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        str_0 = '\x0b5qPm6 '
        str_1 = '~c\rV_!'
        dict_0 = {str_0: bool_0, str_0: str_0, str_1: bool_0}
        set_0 = {str_0, bool_0, str_0}
        var_0 = module_0.human_readable(bool_0, dict_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\xc8\xe6O\x1b_{\x17v\xfab\xa4\xa5\xcbs\xcd@'
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.human_to_bytes(bytes_0, filter_module_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '!e1'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = [str_1, str_0]
        var_0 = module_0.rekey_on_member(str_2, str_2)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'J]^T\roxZZI9Rtd^},9'
        dict_0 = {str_0: str_0, str_0: str_0}
        var_0 = module_0.rekey_on_member(dict_0, dict_0)
    except BaseException:
        pass

def test_case_13():
    try:
        dict_0 = None
        str_0 = ''
        dict_1 = None
        filter_module_0 = module_0.FilterModule()
        bool_0 = True
        bytes_0 = b''
        list_0 = [str_0, filter_module_0, dict_0]
        tuple_0 = (dict_1, bytes_0, list_0)
        var_0 = module_0.rekey_on_member(filter_module_0, bool_0, tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 2206.29
        set_0 = {float_0, float_0}
        float_1 = 0.0
        var_0 = module_0.unique(float_0, set_0, float_1, float_1)
        bytes_0 = b'\xdd\x8a.\x83=u\xad\xb1\x92Cj\xff\xb6\x0f\x9b'
        str_0 = "K^Xx$bCoS'OmE3_"
        var_1 = module_0.rekey_on_member(bytes_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '(w'
        set_0 = {str_0, str_0, str_0, filter_module_0}
        str_1 = 'D3T$nL'
        str_2 = 'Mzz<t'
        dict_0 = {str_0: set_0, str_0: set_0, str_1: str_1, str_2: str_0}
        var_0 = module_0.difference(filter_module_0, str_0, dict_0)
        filter_module_1 = None
        var_1 = module_0.inversepower(filter_module_1)
    except BaseException:
        pass

def test_case_16():
    try:
        dict_0 = None
        str_0 = '\x0b94n7y\r-]u\tvFtx{~V"I'
        bytes_0 = b'\xa6\xf1\xf2b\x1e\xcf\x86B\xca\x81\x7f=H\x81\x00\xe4L[\xc9'
        bytes_1 = b';j7\xec\xd4\x12\xa3\xa1\x03\x93#G\xe7\xb5\xaa\x81'
        str_1 = 'j~xO~%Hd'
        list_0 = [dict_0, str_0, bytes_1, str_1]
        var_0 = module_0.union(bytes_0, bytes_1, list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'0\xe6\xb0\x9a\x9d)\r\xc5\x19\x0c'
        bool_0 = False
        var_0 = module_0.union(bytes_0, bool_0, bool_0)
    except BaseException:
        pass

def test_case_18():
    try:
        filter_module_0 = module_0.FilterModule()
        float_0 = 1000.0
        int_0 = 520
        var_0 = module_0.power(float_0, int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\xe6j\x85\x17\xc4r+\xb7F\xda\xd7E|\t^I\xc8'
        str_0 = 't]{-Q-w'
        var_0 = module_0.max(bytes_0, str_0)
        list_0 = [bytes_0, var_0, var_0]
        str_1 = 'csharp_utils_module'
        str_2 = '[9;JGPCQ4}]'
        set_0 = {str_1, str_1, str_0}
        dict_0 = {}
        tuple_0 = (set_0, list_0, list_0, dict_0)
        var_1 = module_0.unique(str_2, tuple_0, str_2)
        float_0 = -461.612277
        var_2 = module_0.rekey_on_member(float_0, set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'e\xe0\x98\x1f\x0b;\x92'
        str_0 = "rAU6no\x0cw\x0c''Xh:9Jc-:N"
        var_0 = module_0.max(bytes_0, str_0)
        tuple_0 = ()
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        dict_1 = {var_0: tuple_0, bytes_0: bytes_0, var_0: filter_module_0}
        filter_module_1 = module_0.FilterModule()
        tuple_1 = (tuple_0, dict_1, filter_module_1)
        str_1 = "Mq<+=i'wOD&|<"
        float_0 = 2579.871
        var_1 = module_0.intersect(float_0, str_1, bytes_0)
        var_2 = module_0.unique(str_0, tuple_1, str_1)
        str_2 = 'key1'
        float_1 = -128.44136145540935
        str_3 = '(f; t5sl\n-'
        dict_2 = {str_2: float_1, str_3: float_1, str_3: float_1}
        var_3 = module_0.min(float_1, dict_2)
        str_4 = 'kx\\\r'
        float_2 = 607.8047758434703
        tuple_2 = ()
        var_4 = module_0.unique(float_2, tuple_2)
        str_5 = 'value1'
        str_6 = 'val9e2'
        str_7 = {str_2: str_5, str_4: str_6}
        str_8 = 'or SY\t@/Z!`X#\rbA{?'
        str_9 = {str_2: str_5, str_4: str_8}
        str_10 = [str_7, str_9]
        str_11 = 'key1'
        var_5 = module_0.rekey_on_member(str_10, str_11)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = 2206.29
        set_0 = {float_0, float_0}
        float_1 = 0.0
        var_0 = module_0.unique(float_0, set_0, float_1, float_1)
        str_0 = '|87\r^61o<,?p]'
        filter_module_0 = module_0.FilterModule()
        bool_0 = False
        list_0 = [str_0, bool_0, bool_0]
        var_1 = module_0.symmetric_difference(list_0, filter_module_0, set_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'H\t;sgh{*'
        var_0 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\xe6j\x85\x17\xc4r+\xb7F\xda\xd7E|\t^I\xc8'
        str_0 = 't]{-Q-w'
        list_0 = [bytes_0, bytes_0]
        dict_0 = {str_0: list_0}
        list_1 = []
        var_0 = module_0.intersect(list_0, dict_0, list_1)
        var_1 = module_0.max(bytes_0, str_0)
        list_2 = [bytes_0, var_1, var_1]
        str_1 = "#'5 NKv_X?EIC"
        var_2 = module_0.rekey_on_member(list_2, str_1)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = 2206.29
        set_0 = {float_0, float_0}
        float_1 = 0.0
        var_0 = module_0.unique(float_0, set_0, float_1, float_1)
        var_1 = module_0.logarithm(float_1)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = 2206.29
        set_0 = {float_0, float_0}
        float_1 = 0.0
        var_0 = module_0.unique(float_0, set_0, float_1, float_1)
        str_0 = "K^Xx$bCoS'OmE3_"
        str_1 = 'Zt\\M\x0c)16IgKS6wHz;'
        var_1 = module_0.unique(str_0, str_1)
        int_0 = 1529
        str_2 = 'j'
        list_0 = [float_0, str_2]
        var_2 = module_0.difference(int_0, set_0, list_0)
        str_3 = "#'5 NKv_X?E!IC"
        list_1 = [var_0, str_3, str_3, str_3]
        tuple_0 = (set_0,)
        var_3 = module_0.rekey_on_member(list_1, tuple_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 4
        int_1 = 10
        var_0 = module_0.logarithm(int_0, int_1)
        str_0 = 'hello'
        var_1 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'key1'
        str_1 = 'key2'
        str_2 = 'value1'
        str_3 = 'value2'
        str_4 = {str_0: str_2, str_1: str_3, str_1: str_3}
        str_5 = [str_4, str_2]
        var_0 = module_0.rekey_on_member(str_5, str_1)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'key1'
        str_1 = 'key2'
        str_2 = 'value1'
        str_3 = 'value2'
        str_4 = {str_0: str_2, str_1: str_3}
        str_5 = 'value3'
        str_6 = '2value4'
        str_7 = {str_0: str_5, str_1: str_6}
        str_8 = [str_4, str_7]
        str_9 = 'CQ*_'
        var_0 = module_0.rekey_on_member(str_8, str_9)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'key1'
        str_1 = ',Ikey2'
        str_2 = 'value1'
        str_3 = {str_1: str_1, str_0: str_2, str_1: str_2}
        str_4 = [str_3, str_3]
        var_0 = module_0.rekey_on_member(str_4, str_1)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'key1'
        float_0 = -104.776
        dict_0 = {str_0: float_0, str_0: float_0, str_0: float_0}
        var_0 = module_0.min(float_0, dict_0)
        float_1 = 608.0
        filter_module_0 = module_0.FilterModule()
        tuple_0 = ()
        var_1 = module_0.unique(float_1, tuple_0)
        bool_0 = False
        var_2 = module_0.inversepower(dict_0, bool_0)
    except BaseException:
        pass

def test_case_31():
    try:
        float_0 = 0.1
        int_0 = 1378
        var_0 = module_0.human_to_bytes(float_0, int_0)
    except BaseException:
        pass

def test_case_32():
    try:
        bytes_0 = b'e\xe0\x98\x1f\x0b;\x92'
        str_0 = "rAU6no\x0cw\x0c''Xh:9Jc-:N"
        var_0 = module_0.max(bytes_0, str_0)
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        float_0 = 2.718281828459045
        int_0 = -4072
        list_0 = [str_0, dict_0, int_0, float_0]
        bool_0 = False
        var_1 = module_0.unique(float_0, list_0, bool_0)
    except BaseException:
        pass