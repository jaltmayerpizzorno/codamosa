# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1
import builtins as module_2

def test_case_0():
    try:
        list_0 = []
        schema_definitions_0 = module_0.SchemaDefinitions()
        any_0 = schema_definitions_0.__getitem__(list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xbd\x81L\xcaE'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_definitions_0.__delitem__(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        schema_definitions_0 = None
        dict_0 = {}
        schema_0 = module_0.Schema(**dict_0)
        bool_0 = schema_0.__eq__(schema_definitions_0)
        str_0 = 'g~2pvu5qGT3-~gkbsDo:'
        str_1 = 'L>8)'
        dict_1 = {str_0: str_0, str_0: str_0, str_1: str_0}
        schema_1 = module_0.Schema(**dict_1)
    except BaseException:
        pass

def test_case_3():
    try:
        schema_0 = module_0.Schema()
        str_0 = '[(|?QVvzT^}u'
        reference_0 = module_0.Reference(str_0)
        any_0 = schema_0.__getitem__(reference_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        set_0 = set()
        reference_0 = module_0.Reference(tuple_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '[(|?QVvzT^}u'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(reference_0)
    except BaseException:
        pass

def test_case_6():
    try:
        schema_0 = module_0.Schema()
        str_0 = '{vI$G'
        dict_0 = {str_0: str_0, str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        int_0 = schema_0.__len__()
        bool_0 = schema_0.__eq__(schema_definitions_0)
        list_0 = [schema_0, str_0]
        schema_1 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(schema_0)
    except BaseException:
        pass

def test_case_8():
    try:
        schema_0 = module_0.Schema()
        str_0 = '{vI$G'
        dict_0 = {str_0: str_0, str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        dict_1 = {}
        list_0 = [dict_1]
        schema_1 = module_0.Schema(*list_0)
        field_0 = module_1.Field()
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_definitions_0.__setitem__(str_0, schema_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ':'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        str_0 = '='
        set_0 = {str_0, str_0, str_0, str_0}
        reference_0 = module_0.Reference(str_0, set_0)
        any_0 = reference_0.validate(bool_0, strict=bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        schema_0 = module_0.Schema()
        str_0 = '{vI$G'
        dict_0 = {str_0: str_0, str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        int_0 = schema_0.__len__()
        dict_1 = {}
        list_0 = [dict_1]
        str_1 = 'Sa=28\r\r\x0ci*M:%vLf!'
        bool_0 = False
        field_0 = module_1.Field(description=str_1, allow_null=bool_0)
        schema_1 = module_0.Schema(*list_0)
        int_1 = schema_1.__len__()
        field_1 = module_1.Field()
        module_0.set_definitions(field_1, schema_definitions_0)
        type_0 = module_2.type(*list_0)
        bool_1 = False
        field_2 = module_1.Field(default=int_0, allow_null=bool_1)
        field_3 = module_1.Field(description=str_1)
        module_0.set_definitions(field_0, schema_definitions_0)
        schema_2 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        iterator_0 = None
        str_0 = '},-KT\r9/wX7'
        reference_0 = module_0.Reference(str_0)
        bool_0 = True
        any_0 = reference_0.validate(iterator_0, strict=bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(schema_0)
        str_0 = '{vI$G'
        dict_0 = {str_0: str_0, str_0: schema_0, str_0: str_0}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        str_1 = schema_0.__repr__()
        int_0 = schema_0.__len__()
        dict_1 = {str_0: schema_definitions_0, int_0: schema_definitions_0}
        list_0 = [dict_1]
        str_2 = '\n`nLg'
        bool_1 = False
        field_0 = module_1.Field(description=str_2, allow_null=bool_1)
        schema_1 = module_0.Schema(*list_0)
        schema_2 = module_0.Schema()
        bool_2 = schema_2.__eq__(int_0)
        field_1 = module_1.Field()
        schema_definitions_1 = module_0.SchemaDefinitions(*list_0)
        module_0.set_definitions(field_1, schema_definitions_0)
        dict_2 = {}
        schema_3 = module_0.Schema(**dict_2)
        reference_0 = module_0.Reference(str_0, dict_1, **dict_2)
        any_0 = reference_0.validate(schema_2)
    except BaseException:
        pass

def test_case_14():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        iterator_0 = schema_definitions_0.__iter__()
        tuple_0 = (iterator_0,)
        list_0 = [tuple_0, dict_0, dict_0, iterator_0]
        schema_metaclass_0 = module_0.SchemaMetaclass(*list_0)
    except BaseException:
        pass