# Automatically generated by Pynguin.
import ansible.playbook.role.requirement as module_0

def test_case_0():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        str_0 = '\n# NOTE: Before 2.3, option \'dest\', \'destfile\' or \'name\' was used instead of \'path\'\n- name: Ensure SELinux is set to enforcing mode\n  ansible.builtin.lineinfile:\n    path: /etc/selinux/config\n    regexp: \'^SELINUX=\'\n    line: SELINUX=enforcing\n\n- name: Make sure group wheel is not in the sudoers configuration\n  ansible.builtin.lineinfile:\n    path: /etc/sudoers\n    state: absent\n    regexp: \'^%wheel\'\n\n- name: Replace a localhost entry with our own\n  ansible.builtin.lineinfile:\n    path: /etc/hosts\n    regexp: \'^127\\.0\\.0\\.1\'\n    line: 127.0.0.1 localhost\n    owner: root\n    group: root\n    mode: \'0644\'\n\n- name: Replace a localhost entry searching for a literal string to avoid escaping\n  lineinfile:\n    path: /etc/hosts\n    search_string: \'127.0.0.1\'\n    line: 127.0.0.1 localhost\n    owner: root\n    group: root\n    mode: \'0644\'\n\n- name: Ensure the default Apache port is 8080\n  ansible.builtin.lineinfile:\n    path: /etc/httpd/conf/httpd.conf\n    regexp: \'^Listen \'\n    insertafter: \'^#Listen \'\n    line: Listen 8080\n\n- name: Ensure php extension matches new pattern\n  lineinfile:\n    path: /etc/httpd/conf/httpd.conf\n    search_string: \'<FilesMatch ".php[45]?$">\'\n    insertafter: \'^\\t<Location \\/>\\n\'\n    line: \'        <FilesMatch ".php[34]?$">\'\n\n- name: Ensure we have our own comment added to /etc/services\n  ansible.builtin.lineinfile:\n    path: /etc/services\n    regexp: \'^# port for http\'\n    insertbefore: \'^www.*80/tcp\'\n    line: \'# port for http by default\'\n\n- name: Add a line to a file if the file does not exist, without passing regexp\n  ansible.builtin.lineinfile:\n    path: /tmp/testfile\n    line: 192.168.1.99 foo.lab.net foo\n    create: yes\n\n# NOTE: Yaml requires escaping backslashes in double quotes but not in single quotes\n- name: Ensure the JBoss memory settings are exactly as needed\n  ansible.builtin.lineinfile:\n    path: /opt/jboss-as/bin/standalone.conf\n    regexp: \'^(.*)Xms(\\d+)m(.*)$\'\n    line: \'\\1Xms${xms}m\\3\'\n    backrefs: yes\n\n# NOTE: Fully quoted because of the \': \' on the line. See the Gotchas in the YAML docs.\n- name: Validate the sudoers file before saving\n  ansible.builtin.lineinfile:\n    path: /etc/sudoers\n    state: present\n    regexp: \'^%ADMIN ALL=\'\n    line: \'%ADMIN ALL=(ALL) NOPASSWD: ALL\'\n    validate: /usr/sbin/visudo -cf %s\n\n# See https://docs.python.org/3/library/re.html for further details on syntax\n- name: Use backrefs with alternative group syntax to avoid conflicts with variable values\n  ansible.builtin.lineinfile:\n    path: /tmp/config\n    regexp: ^(host=).*\n    line: \\g<1>{{ hostname }}\n    backrefs: yes\n'
        var_0 = role_requirement_0.role_yaml_parse(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        dict_0 = {role_requirement_0: role_requirement_0, role_requirement_0: role_requirement_0}
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        str_0 = '/8/5RiEe\x0c&)wk"\tYH@r'
        var_1 = role_requirement_0.role_yaml_parse(str_0)
        role_requirement_1 = module_0.RoleRequirement()
        var_2 = role_requirement_1.repo_url_to_role_name(str_0)
        role_requirement_2 = module_0.RoleRequirement()
        var_3 = role_requirement_2.repo_url_to_role_name(role_requirement_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'https://github.com/org/nombre.git'
        list_0 = [str_0]
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bool_0 = True
        role_requirement_0 = module_0.RoleRequirement()
        var_0 = role_requirement_0.role_yaml_parse(bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        list_0 = [role_requirement_0, role_requirement_0]
        role_requirement_1 = module_0.RoleRequirement()
        var_0 = role_requirement_1.scm_archive_role(list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        int_0 = 990
        str_0 = ' Config command line class '
        var_0 = role_requirement_0.repo_url_to_role_name(str_0)
        str_1 = ']!y+|@x'
        var_1 = role_requirement_0.role_yaml_parse(str_1)
        tuple_0 = (int_0,)
        role_requirement_1 = module_0.RoleRequirement()
        var_2 = role_requirement_0.role_yaml_parse(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        role_requirement_0 = module_0.RoleRequirement()
        dict_0 = {role_requirement_0: role_requirement_0, role_requirement_0: role_requirement_0}
        var_0 = role_requirement_0.role_yaml_parse(dict_0)
        role_requirement_1 = module_0.RoleRequirement()
        str_0 = '/8/5RiEe\x0c&)wk".?~@r'
        var_1 = role_requirement_0.role_yaml_parse(str_0)
        bytes_0 = b'\xf2{\xe5\x9f&\xc8\xcd\xe9B\xa5\xa6"\xde\xd0!O'
        str_1 = 'ev,,i;FyDz'
        var_2 = role_requirement_0.role_yaml_parse(str_1)
        str_2 = ''
        list_0 = [str_2, var_2, bytes_0]
        var_3 = role_requirement_0.role_yaml_parse(list_0)
    except BaseException:
        pass