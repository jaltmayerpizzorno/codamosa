# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.ioloop as module_1
import _asyncio as module_2
import socket as module_3

def test_case_0():
    try:
        list_0 = []
        bool_0 = True
        connector_0 = module_0._Connector(list_0, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        i_o_loop_0 = module_1.IOLoop()
        future_0 = module_2.Future()
        var_0 = []
        var_1 = None
        future_1 = module_2.Future()
        var_2 = (var_1, future_1)
        var_3 = lambda x, y: var_2
        connector_0 = module_0._Connector(var_0, var_3)
    except BaseException:
        pass

def test_case_2():
    try:
        i_o_loop_0 = module_1.IOLoop()
        future_0 = module_2.Future()
        var_0 = []
        var_1 = None
        future_1 = module_2.Future()
        var_2 = (var_1, future_1)
        var_3 = lambda x, y: var_2
        awaitable_0 = None
        tuple_0 = (var_0, awaitable_0)
        list_0 = [tuple_0, tuple_0]
        callable_0 = None
        connector_0 = module_0._Connector(list_0, callable_0)
        float_0 = None
        future_2 = connector_0.start(float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        i_o_loop_0 = module_1.IOLoop()
        future_0 = module_2.Future()
        var_0 = []
        future_1 = module_2.Future()
        var_1 = lambda x, y: future_0
        awaitable_0 = None
        tuple_0 = (var_0, awaitable_0)
        list_0 = [tuple_0, tuple_0]
        callable_0 = None
        connector_0 = module_0._Connector(list_0, callable_0)
        list_1 = None
        connector_1 = module_0._Connector(list_0, callable_0)
        connector_1.try_connect(list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        i_o_loop_0 = module_1.IOLoop()
        future_0 = module_2.Future()
        t_c_p_client_0 = module_0.TCPClient()
        awaitable_0 = None
        tuple_0 = (t_c_p_client_0, awaitable_0)
        list_0 = [tuple_0]
        var_0 = lambda x, y: future_0
        callable_0 = None
        iterator_0 = None
        address_family_0 = module_3.AddressFamily.AF_WANPIPE
        str_0 = 'callback'
        t_c_p_client_1 = module_0.TCPClient()
        dict_0 = {}
        str_1 = ''
        connector_0 = module_0._Connector(list_0, callable_0)
        tuple_1 = (str_0, dict_0, str_1)
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_1, future_0)
    except BaseException:
        pass

def test_case_5():
    try:
        i_o_loop_0 = module_1.IOLoop()
        future_0 = module_2.Future()
        var_0 = None
        t_c_p_client_0 = module_0.TCPClient()
        awaitable_0 = None
        tuple_0 = (t_c_p_client_0, awaitable_0)
        t_c_p_client_0.close()
        var_1 = lambda x, y: future_0
        awaitable_1 = None
        tuple_1 = (var_0, awaitable_1)
        list_0 = [tuple_1, tuple_1, tuple_1, tuple_1]
        callable_0 = None
        connector_0 = module_0._Connector(list_0, callable_0)
        connector_1 = module_0._Connector(list_0, callable_0)
        iterator_0 = None
        address_family_0 = module_3.AddressFamily.AF_WANPIPE
        connector_0.on_connect_timeout()
        t_c_p_client_1 = module_0.TCPClient()
        connector_1.on_timeout()
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_1, future_0)
        connector_1.on_connect_done(iterator_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_6():
    try:
        i_o_loop_0 = module_1.IOLoop()
        future_0 = module_2.Future()
        var_0 = None
        t_c_p_client_0 = module_0.TCPClient()
        awaitable_0 = None
        tuple_0 = (t_c_p_client_0, awaitable_0)
        list_0 = [tuple_0]
        int_0 = 2986
        connector_0 = module_0._Connector(list_0, int_0)
        float_0 = 87.0
        connector_0.set_timeout(float_0)
        connector_0.clear_timeout()
        var_1 = lambda x, y: future_0
        connector_0.on_timeout()
        awaitable_1 = None
        tuple_1 = (var_0, awaitable_1)
        list_1 = [tuple_1, tuple_1, tuple_1, tuple_1]
        callable_0 = None
        connector_1 = module_0._Connector(list_1, callable_0)
        connector_1.clear_timeouts()
        connector_1.close_streams()
        connector_2 = module_0._Connector(list_1, callable_0)
        t_c_p_client_1 = module_0.TCPClient()
        iterator_0 = None
        address_family_0 = module_3.AddressFamily.AF_WANPIPE
        str_0 = 'callback'
        connector_1.on_connect_timeout()
        t_c_p_client_2 = module_0.TCPClient()
        dict_0 = {}
        connector_2.on_timeout()
        str_1 = ''
        tuple_2 = (str_0, dict_0, str_1)
        connector_1.on_connect_done(iterator_0, address_family_0, tuple_2, future_0)
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_2, future_0)
    except BaseException:
        pass