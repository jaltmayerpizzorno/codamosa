# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.netutil as module_1
import socket as module_2
import tornado.ioloop as module_3
import _asyncio as module_4

def test_case_0():
    pass

def test_case_1():
    t_c_p_client_0 = module_0.TCPClient()

def test_case_2():
    resolver_0 = module_1.Resolver()
    t_c_p_client_0 = module_0.TCPClient(resolver_0)

def test_case_3():
    t_c_p_client_0 = module_0.TCPClient()
    t_c_p_client_0.close()

def test_case_4():
    address_family_0 = module_2.AddressFamily.AF_BRIDGE
    t_c_p_client_0 = module_0.TCPClient(address_family_0)
    t_c_p_client_0.close()

def test_case_5():
    i_o_loop_0 = module_3.IOLoop()
    var_0 = []
    i_o_loop_0.stop()
    awaitable_0 = None
    tuple_0 = (var_0, awaitable_0)
    list_0 = [tuple_0, tuple_0]
    bytes_0 = b'\xf9\xe3A\xfa\xca\xb3{\x9fMe\x1f\xb5\xd0\xd6\xe3\xacqNX'
    connector_0 = module_0._Connector(list_0, bytes_0)
    connector_0.on_connect_timeout()

def test_case_6():
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    var_0 = []
    future_1 = module_4.Future()
    var_1 = lambda x, y: future_0
    awaitable_0 = None
    tuple_0 = (var_0, awaitable_0)
    list_0 = [tuple_0, tuple_0]
    callable_0 = None
    connector_0 = module_0._Connector(list_0, callable_0)
    connector_1 = module_0._Connector(list_0, callable_0)
    float_0 = 322.74541
    connector_1.set_timeout(float_0)

def test_case_7():
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    var_0 = None
    var_1 = lambda x, y: future_0
    awaitable_0 = None
    tuple_0 = (var_0, awaitable_0)
    list_0 = [tuple_0, tuple_0]
    callable_0 = None
    connector_0 = module_0._Connector(list_0, callable_0)
    connector_0.clear_timeouts()
    connector_1 = module_0._Connector(list_0, callable_0)
    connector_0.clear_timeout()
    connector_1.on_timeout()

def test_case_8():
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    var_0 = []
    var_1 = None
    future_1 = module_4.Future()
    var_2 = (var_1, future_1)
    var_3 = lambda x, y: var_2
    awaitable_0 = None
    tuple_0 = (var_0, awaitable_0)
    list_0 = [tuple_0, tuple_0]
    callable_0 = None
    connector_0 = module_0._Connector(list_0, callable_0)
    connector_1 = module_0._Connector(list_0, callable_0)
    float_0 = -939.7814
    connector_1.set_connect_timeout(float_0)
    connector_2 = module_0._Connector(list_0, callable_0)
    connector_3 = module_0._Connector(list_0, callable_0)
    connector_3.on_connect_timeout()

def test_case_9():
    i_o_loop_0 = module_3.IOLoop()
    var_0 = []
    future_0 = module_4.Future()
    awaitable_0 = None
    t_c_p_client_0 = module_0.TCPClient()
    tuple_0 = (var_0, awaitable_0)
    list_0 = [tuple_0, tuple_0]
    callable_0 = None
    connector_0 = module_0._Connector(list_0, callable_0)
    connector_1 = module_0._Connector(list_0, callable_0)
    connector_0.clear_timeouts()
    connector_0.close_streams()

def test_case_10():
    i_o_loop_0 = module_3.IOLoop()
    t_c_p_client_0 = module_0.TCPClient()
    t_c_p_client_0.close()
    future_0 = module_4.Future()
    var_0 = lambda x, y: future_0
    awaitable_0 = None
    tuple_0 = (var_0, awaitable_0)
    list_0 = [tuple_0]
    callable_0 = None
    connector_0 = module_0._Connector(list_0, callable_0)
    connector_1 = module_0._Connector(list_0, callable_0)
    connector_2 = module_0._Connector(list_0, callable_0)
    float_0 = -1343.222132
    connector_0.set_timeout(float_0)
    connector_0.on_connect_timeout()
    connector_0.close_streams()
    connector_0.clear_timeouts()

def test_case_11():
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    var_0 = []
    var_1 = None
    future_1 = module_4.Future()
    var_2 = (var_1, future_1)
    var_3 = lambda x, y: var_2
    awaitable_0 = None
    tuple_0 = (var_0, awaitable_0)
    list_0 = [tuple_0, tuple_0]
    callable_0 = None
    connector_0 = module_0._Connector(list_0, callable_0)
    connector_1 = module_0._Connector(list_0, callable_0)
    connector_2 = module_0._Connector(list_0, callable_0)
    connector_2.on_connect_timeout()
    connector_2.close_streams()
    connector_2.on_connect_timeout()

def test_case_12():
    t_c_p_client_0 = module_0.TCPClient()
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    t_c_p_client_1 = module_0.TCPClient()
    awaitable_0 = None
    tuple_0 = (t_c_p_client_1, awaitable_0)
    list_0 = [tuple_0]
    int_0 = 2986
    t_c_p_client_1.close()
    connector_0 = module_0._Connector(list_0, int_0)
    connector_0.clear_timeout()
    connector_0.on_timeout()
    connector_0.clear_timeouts()
    connector_0.clear_timeouts()
    connector_0.close_streams()
    iterator_0 = None
    address_family_0 = module_2.AddressFamily.AF_WANPIPE
    connector_0.on_connect_timeout()
    dict_0 = {}
    connector_0.on_timeout()
    str_0 = ''
    tuple_1 = (str_0, dict_0, str_0)
    connector_0.on_connect_done(iterator_0, address_family_0, tuple_1, future_0)

def test_case_13():
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    var_0 = None
    t_c_p_client_0 = module_0.TCPClient()
    awaitable_0 = None
    tuple_0 = (t_c_p_client_0, awaitable_0)
    list_0 = [tuple_0]
    int_0 = 2986
    t_c_p_client_0.close()
    str_0 = 'BCaF36i.5%-\x0cMayR*=P7'
    connector_0 = module_0._Connector(list_0, str_0)
    connector_0.close_streams()
    connector_1 = module_0._Connector(list_0, int_0)
    connector_1.clear_timeout()
    var_1 = lambda x, y: future_0
    connector_1.on_timeout()
    connector_1.on_timeout()
    awaitable_1 = None
    tuple_1 = (var_0, awaitable_1)
    list_1 = [tuple_0, tuple_1, tuple_1, tuple_1]
    callable_0 = None
    connector_2 = module_0._Connector(list_1, callable_0)
    float_0 = 1282.52
    connector_2.set_timeout(float_0)
    connector_2.clear_timeouts()
    connector_2.close_streams()
    connector_3 = module_0._Connector(list_1, callable_0)
    iterator_0 = None
    address_family_0 = module_2.AddressFamily.AF_WANPIPE
    str_1 = 'callback'
    connector_2.on_connect_timeout()
    dict_0 = {}
    connector_1.on_timeout()
    str_2 = 'BHRn ##Q3s/".o_C'
    tuple_2 = (str_1, dict_0, str_2)
    connector_2.on_connect_done(iterator_0, address_family_0, tuple_2, future_0)

def test_case_14():
    i_o_loop_0 = module_3.IOLoop()
    future_0 = module_4.Future()
    var_0 = None
    t_c_p_client_0 = module_0.TCPClient()
    awaitable_0 = None
    tuple_0 = (t_c_p_client_0, awaitable_0)
    list_0 = [tuple_0]
    int_0 = 2986
    t_c_p_client_0.close()
    connector_0 = module_0._Connector(list_0, int_0)
    connector_0.clear_timeout()
    connector_0.on_timeout()
    awaitable_1 = None
    tuple_1 = (var_0, awaitable_1)
    float_0 = 2693.59
    connector_0.set_timeout(float_0)
    connector_0.set_connect_timeout(float_0)
    list_1 = [tuple_1, tuple_1, tuple_1, tuple_1]
    callable_0 = None
    connector_0.clear_timeout()
    connector_1 = module_0._Connector(list_1, callable_0)
    connector_1.clear_timeouts()
    connector_1.close_streams()
    connector_2 = module_0._Connector(list_1, callable_0)
    iterator_0 = None
    address_family_0 = module_2.AddressFamily.AF_WANPIPE
    str_0 = 'callback'
    connector_1.on_connect_timeout()
    dict_0 = {awaitable_1: list_0}
    connector_2.on_timeout()
    connector_0.clear_timeouts()
    str_1 = ''
    tuple_2 = (str_0, dict_0, str_1)
    connector_1.on_connect_done(iterator_0, address_family_0, tuple_2, future_0)
    connector_0.on_connect_timeout()