# Automatically generated by Pynguin.
import ansible.cli.console as module_0
import ansible.utils.display as module_1

def test_case_0():
    try:
        str_0 = '1!:F>H34BS'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_timeout(str_0)
        var_1 = console_c_l_i_0.get_names()
        set_0 = {console_c_l_i_0}
        var_2 = console_c_l_i_0.do_list(set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1217
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.list_modules()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 493
        bytes_0 = b'\x160\xf8\x03\xbd\xabZdV\xbb\xf2D\xfc\xc7"w\xd4\\\xf8\xee'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.do_shell(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '${6n"w6v,k$'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.default(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        console_c_l_i_0 = module_0.ConsoleCLI(bool_0)
        var_0 = console_c_l_i_0.emptyline()
        str_0 = '<S}|dJ'
        str_1 = 'installed passlib version %s not supported'
        console_c_l_i_1 = module_0.ConsoleCLI(str_1)
        var_1 = console_c_l_i_1.do_forks(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'\x83N\xe7\x8e="T^v'
        float_0 = 1.0
        float_1 = -352.0778
        int_0 = 7
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        float_2 = -492.5
        var_0 = console_c_l_i_1.do_forks(float_2)
        console_c_l_i_2 = module_0.ConsoleCLI(int_0)
        var_1 = console_c_l_i_1.do_check(bytes_0)
        console_c_l_i_3 = module_0.ConsoleCLI(float_1)
        var_2 = console_c_l_i_1.emptyline()
        var_3 = console_c_l_i_2.get_names()
        console_c_l_i_4 = module_0.ConsoleCLI(float_0)
        var_4 = console_c_l_i_4.default(console_c_l_i_4)
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = None
        int_0 = -3076
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_list(set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = None
        bytes_0 = None
        bytes_1 = b'/HU\x81\x98\x18\xc4\x15\xd3\xa2\xecU\xee\xabv\x1a\xc9T%'
        int_0 = -661
        dict_0 = {bytes_0: bytes_1, int_0: bytes_1, bytes_0: int_0, bytes_1: bytes_0}
        tuple_1 = (bytes_0, dict_0)
        list_0 = [tuple_1, tuple_1, bytes_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_become(tuple_0)
        str_0 = 'Ru3.qV(wsLK\n;?K|MYk/'
        console_c_l_i_1 = module_0.ConsoleCLI(str_0)
        tuple_2 = None
        var_1 = console_c_l_i_1.do_cd(tuple_2)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '1!:F>H34BS'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_timeout(str_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        int_0 = -4191
        console_c_l_i_2 = module_0.ConsoleCLI(int_0)
        var_1 = console_c_l_i_0.do_become(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'C\xdc\xd84'
        float_0 = 1479.944082
        bytes_1 = b'\t\xff\xc7%\xf4G\x9f'
        dict_0 = {bytes_1: float_0, float_0: float_0, float_0: float_0, bytes_1: float_0}
        str_0 = "q)x'!NF{oq"
        int_0 = 329
        tuple_0 = (dict_0, str_0, int_0)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        bytes_2 = b'\xd3\xff\x8e\t\x81\xa7\xb2\x17'
        tuple_1 = (bytes_1, console_c_l_i_0, bytes_2, str_0)
        list_0 = [float_0, bytes_0, float_0]
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_1.do_remote_user(tuple_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '.<k_Z=H;VN'
        float_0 = -4179.2153
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.do_become_user(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'd'
        bool_0 = False
        dict_0 = {str_0: str_0, str_0: str_0}
        console_c_l_i_0 = module_0.ConsoleCLI(dict_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        var_0 = console_c_l_i_1.do_timeout(bool_0)
        console_c_l_i_2 = module_0.ConsoleCLI(str_0)
        float_0 = 1731.7
        tuple_0 = (float_0,)
        bytes_0 = b'\xcc\xac\x1a<w\xb2\x9c\xde\xf8\x1d'
        var_1 = console_c_l_i_1.do_become_method(bytes_0)
        var_2 = console_c_l_i_0.do_cd(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 1519.201062
        float_1 = -26.7917
        console_c_l_i_0 = module_0.ConsoleCLI(float_1)
        var_0 = console_c_l_i_0.helpdefault(float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\r\x14\x99\x0cIl\xb3\x11\xa7Y\xb92\x99'
        int_0 = 434
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_timeout(bytes_0)
        bool_0 = False
        str_0 = 'E;q E8h6@cDjhs%t,['
        bool_1 = True
        dict_0 = {console_c_l_i_0: bytes_0, bool_0: var_0}
        var_1 = console_c_l_i_0.completedefault(bool_1, str_0, dict_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'i~0hv'
        str_1 = "$'i,VB7"
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        var_0 = console_c_l_i_0.module_args(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '[ Kg>sa=Fo*y#9IQtSz:'
        int_0 = 227
        str_1 = 'epny'
        console_c_l_i_0 = module_0.ConsoleCLI(str_1)
        tuple_0 = (console_c_l_i_0,)
        console_c_l_i_1 = module_0.ConsoleCLI(tuple_0)
        var_0 = console_c_l_i_1.do_timeout(int_0)
        float_0 = -375.65
        console_c_l_i_2 = module_0.ConsoleCLI(float_0)
        var_1 = console_c_l_i_2.do_cd(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'Ru3.qV(wsLK\n;?K|MYk/'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        tuple_0 = None
        var_0 = console_c_l_i_0.do_cd(tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -5666.7
        tuple_0 = ()
        bool_0 = True
        bytes_0 = b'\x1f0\xb0-\xf60B\xcc\xe2\x88\xfc"\xfe\x15\xd2\x96s\xbc'
        dict_0 = {tuple_0: bool_0, tuple_0: bool_0, tuple_0: bytes_0, tuple_0: bytes_0}
        console_c_l_i_0 = module_0.ConsoleCLI(dict_0)
        var_0 = console_c_l_i_0.do_timeout(float_0)
        bytes_1 = b'\xa6\xca\xea\xe2A^\xd9h\xc1T\x91\x9e\x86D\xb2\x04`!'
        int_0 = 434
        console_c_l_i_1 = module_0.ConsoleCLI(int_0)
        var_1 = console_c_l_i_1.do_timeout(bytes_1)
        int_1 = 90
        console_c_l_i_2 = module_0.ConsoleCLI(int_1)
        int_2 = 421
        str_0 = 'sftp'
        console_c_l_i_3 = module_0.ConsoleCLI(str_0)
        var_2 = console_c_l_i_2.do_diff(int_2)
        var_3 = console_c_l_i_3.do_become_user(int_2)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'd'
        bool_0 = False
        dict_0 = {str_0: str_0, str_0: str_0}
        console_c_l_i_0 = module_0.ConsoleCLI(dict_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        var_0 = console_c_l_i_1.do_timeout(bool_0)
        console_c_l_i_2 = module_0.ConsoleCLI(str_0)
        var_1 = console_c_l_i_2.get_names()
        float_0 = 1731.7
        tuple_0 = (float_0,)
        var_2 = console_c_l_i_0.do_cd(tuple_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '1!:F>H34BS'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_timeout(str_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        bool_0 = False
        var_1 = console_c_l_i_0.do_become_user(bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = -352.0778
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.do_check(float_0)
        str_0 = 'Check mutually exclusive terms against argument parameters\n\n    Accepts a single list or list of lists that are groups of terms that should be\n    mutually exclusive with one another\n\n    :arg terms: List of mutually exclusive parameters\n    :arg parameters: DiGtionary of parameters\n    :kwarg options_context: List of strings of parent key names if ``terms`` are\n        in a sub spec.\n\n    :returns: Empty list or raises :class:`TypeError` if the check fails.\n    '
        console_c_l_i_1 = module_0.ConsoleCLI(str_0)
        var_1 = console_c_l_i_1.emptyline()
        var_2 = console_c_l_i_1.get_names()
        complex_0 = None
        var_3 = console_c_l_i_0.do_diff(complex_0)
        bytes_0 = b'\xa1L\x89\ro\x14)\x1e\x07\xbd\xdd6\x82\xb1'
        var_4 = console_c_l_i_1.do_become_user(bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        bool_1 = True
        console_c_l_i_0 = module_0.ConsoleCLI(bool_1)
        var_0 = console_c_l_i_0.do_verbosity(bool_0)
        float_0 = 1.0
        str_0 = 'groups'
        bytes_0 = None
        console_c_l_i_1 = module_0.ConsoleCLI(float_0)
        var_1 = console_c_l_i_1.do_forks(bytes_0)
        list_0 = [str_0]
        console_c_l_i_2 = module_0.ConsoleCLI(list_0)
        var_2 = console_c_l_i_2.run()
        var_3 = console_c_l_i_1.do_check(float_0)
        var_4 = console_c_l_i_2.emptyline()
        var_5 = console_c_l_i_1.emptyline()
        var_6 = console_c_l_i_1.get_names()
        var_7 = console_c_l_i_2.default(list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = -352.0778
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        bool_0 = True
        bytes_0 = b'\xd9&\x8d\xf6Y)\xb7p\xf7\x97yd\xb9_\x02\xbd\xff}'
        console_c_l_i_1 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_1.do_forks(bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'groups'
        bytes_0 = None
        float_0 = -351.99615473491104
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.do_forks(bytes_0)
        list_0 = [str_0]
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        var_1 = console_c_l_i_1.run()
        console_c_l_i_2 = module_0.ConsoleCLI(str_0)
        var_2 = console_c_l_i_0.emptyline()
        var_3 = console_c_l_i_0.get_names()
        var_4 = console_c_l_i_1.default(str_0, str_0)
        set_0 = {console_c_l_i_0, var_4, float_0, float_0}
        tuple_0 = None
        tuple_1 = (set_0, bytes_0, tuple_0)
        var_5 = console_c_l_i_1.do_shell(tuple_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'groups'
        list_0 = [str_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.run()
        set_0 = set()
        tuple_0 = (set_0, str_0)
        var_1 = console_c_l_i_0.do_remote_user(tuple_0)
        var_2 = console_c_l_i_0.cmdloop()
        var_3 = console_c_l_i_0.get_names()
        var_4 = console_c_l_i_0.do_timeout(console_c_l_i_0)
        str_1 = "Jw8':Us"
        bytes_0 = b')\xa7#;\x85\xcbZ\x96_\x84\xbcd'
        var_5 = console_c_l_i_0.complete_cd(list_0, str_1, str_1, bytes_0)
        var_6 = console_c_l_i_0.default(str_0, str_0)
        var_7 = console_c_l_i_0.do_become_method(set_0)
        bytes_1 = b'hE\xca\x1a\xf4\x19\xb5\xeb\xacHqn'
        var_8 = console_c_l_i_0.do_verbosity(bytes_1)
        str_2 = 'Fail with custom messae '
        var_9 = console_c_l_i_0.completedefault(tuple_0, str_2, str_2, console_c_l_i_0)
        var_10 = console_c_l_i_0.emptyline()
        var_11 = console_c_l_i_0.helpdefault(bytes_1)
        tuple_1 = ()
        var_12 = console_c_l_i_0.do_cd(tuple_1)
        bool_0 = True
        int_0 = -1534
        display_0 = module_1.Display()
        var_13 = console_c_l_i_0.helpdefault(display_0)
        var_14 = console_c_l_i_0.do_become(bool_0)
        var_15 = console_c_l_i_0.do_become_user(int_0)
        var_16 = console_c_l_i_0.do_list(str_0)
        float_0 = 224.71
        console_c_l_i_1 = module_0.ConsoleCLI(float_0)
        var_17 = console_c_l_i_1.helpdefault(set_0)
    except BaseException:
        pass