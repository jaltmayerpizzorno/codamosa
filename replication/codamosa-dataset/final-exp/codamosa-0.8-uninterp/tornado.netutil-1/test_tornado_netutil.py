# Automatically generated by Pynguin.
import tornado.netutil as module_0
import ssl as module_1
import socket as module_2

def test_case_0():
    pass

def test_case_1():
    str_0 = '/tmp/logs.sock'
    socket_0 = module_0.bind_unix_socket(str_0)
    var_0 = socket_0.close()

def test_case_2():
    str_0 = ']% &'
    bool_0 = module_0.is_valid_ip(str_0)

def test_case_3():
    resolver_0 = module_0.Resolver()
    resolver_0.close()
    str_0 = '>Ib3u82o%\\,J$qTo'
    resolver_0.close()
    resolver_0.close()
    int_0 = -2086
    resolver_0.close()
    address_family_0 = None
    awaitable_0 = resolver_0.resolve(str_0, int_0, address_family_0)
    str_1 = 'R-\'l"}jfp'
    int_1 = 659
    socket_0 = module_0.bind_unix_socket(str_1, int_1)
    awaitable_1 = resolver_0.resolve(str_0, int_0)

def test_case_4():
    str_0 = '\tpW\\bvL'
    resolver_0 = module_0.Resolver()
    resolver_0.close()
    bool_0 = module_0.is_valid_ip(str_0)
    int_0 = 54
    list_0 = module_0.bind_sockets(int_0)

def test_case_5():
    list_0 = []
    s_s_l_context_0 = module_1.SSLContext(*list_0)
    s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)

def test_case_6():
    int_0 = 8088
    list_0 = module_0.bind_sockets(int_0)

def test_case_7():
    default_executor_resolver_0 = module_0.DefaultExecutorResolver()
    str_0 = 'Partition the ``addrinfo`` list by address family.\n\n        Returns two lists.  The first list contains the first entry from\n        ``addrinfo`` and all others with the same family, and the\n        second list contains all other addresses (normally one list will\n        be AF_INET and the other AF_INET6, although non-standard resolvers\n        may return additional families).\n        '
    int_0 = 1523
    list_0 = default_executor_resolver_0.resolve(str_0, int_0)
    address_family_0 = module_2.AddressFamily.AF_BLUETOOTH
    str_1 = '%=)y\t7WHxG4n;'
    int_1 = 12
    int_2 = 334
    dict_0 = {}
    s_s_l_context_0 = module_0.ssl_options_to_context(dict_0)
    list_1 = default_executor_resolver_0.resolve(str_1, int_2, address_family_0)
    bool_0 = module_0.is_valid_ip(str_1)
    s_s_l_context_1 = module_0.ssl_options_to_context(s_s_l_context_0)
    list_2 = default_executor_resolver_0.resolve(str_1, int_1)
    socket_0 = module_0.bind_unix_socket(str_1)
    s_s_l_socket_0 = module_0.ssl_wrap_socket(socket_0, s_s_l_context_0, str_1)
    int_3 = 0
    list_3 = module_0.bind_sockets(int_3)