# Automatically generated by Pynguin.
import tornado.ioloop as module_0
import tornado.netutil as module_1
import ssl as module_2
import socket as module_3

def test_case_0():
    try:
        i_o_loop_0 = module_0.IOLoop()
        list_0 = [i_o_loop_0, i_o_loop_0]
        str_0 = 'u\tF{G\x0c\x0b3m#g(\nt`oDxmf'
        socket_0 = module_1.bind_unix_socket(str_0)
        socket_1 = module_1.bind_unix_socket(str_0)
        list_1 = [socket_1, socket_1]
        callable_0 = module_1.add_accept_handler(socket_0, list_1)
        resolver_0 = module_1.Resolver(*list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        executor_resolver_0 = module_1.ExecutorResolver()
    except BaseException:
        pass

def test_case_2():
    try:
        blocking_resolver_0 = module_1.BlockingResolver()
    except BaseException:
        pass

def test_case_3():
    try:
        threaded_resolver_0 = module_1.ThreadedResolver()
    except BaseException:
        pass

def test_case_4():
    try:
        threaded_resolver_0 = module_1.ThreadedResolver()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'static_hash_cache'
        str_1 = '+'
        int_0 = 4654
        socket_0 = module_1.bind_unix_socket(str_1, int_0, int_0)
        list_0 = [str_0, str_0]
        override_resolver_0 = module_1.OverrideResolver(*list_0)
        str_2 = 'Future[IOStream]'
        dict_0 = {str_0: override_resolver_0, str_2: int_0, str_1: str_2}
        s_s_l_socket_0 = module_1.ssl_wrap_socket(socket_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        s_s_l_context_0 = module_1.ssl_options_to_context(dict_0)
        blocking_resolver_0 = module_1.BlockingResolver()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'sk_SK'
        socket_0 = module_1.bind_unix_socket(str_0)
        dict_0 = {}
        s_s_l_socket_0 = module_1.ssl_wrap_socket(socket_0, dict_0, str_0)
        blocking_resolver_0 = module_1.BlockingResolver()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'Runs the ``callback`` at the absolute time designated by ``when``.\n\n        ``when`` must be a number using the same reference point as\n        `IOLoop.time`.\n\n        Returns an opaque handle that may be passed to `remove_timeout`\n        to cancel.  Note that unlike the `asyncio` method of the same\n        name, the returned object does not have a ``cancel()`` method.\n\n        See `add_timeout` for comments on thread-safety and subclassing.\n\n        .. versionadded:: 4.0\n        '
        int_0 = -3392
        socket_0 = module_1.bind_unix_socket(str_0, int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        default_executor_resolver_0 = module_1.DefaultExecutorResolver()
        str_0 = '%=)y\t7WHxG4n;'
        bool_0 = module_1.is_valid_ip(str_0)
        dict_0 = {}
        s_s_l_context_0 = module_2.SSLContext(**dict_0)
        s_s_l_context_1 = None
        s_s_l_context_2 = module_1.ssl_options_to_context(s_s_l_context_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'Fetches the given URL auth an OAuth2 access token.\n\n        If the request is a POST, ``post_args`` should be provided. Query\n        string arguments should be given as keyword arguments.\n\n        Example usage:\n\n        ..testcode::\n\n            class MainHandler(tornado.web.RequestHandler,\n                              tornado.auth.FacebookGraphMixin):\n                @tornado.web.authenticated\n                async def get(self):\n                    new_entry = await self.oauth2_request(\n                        "https://graph.facebook.com/me/feed",\n                        post_args={"message": "I am posting from my Tornado{application!"},\n                        access_token=self.current_user["access_token"])\n\n                    if not new_entry:\n                        # Call failed; perhaps missing permission?\n                        self.authorize_redirect()\n                        return\n                    self.finish("Posted a message!")\n\n        .. testoutput::\n           :hide:\n\n        .. versionadded:: 4.3\n\n        .. versionchanged::: 6.0\n\n           The ``callback`` argument was removed. Use the returned awaitable object instead.\n        '
        str_1 = '/McC'
        str_2 = 'he_IL'
        dict_0 = {str_1: str_1, str_1: str_0, str_2: str_2}
        s_s_l_context_0 = module_1.ssl_options_to_context(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        resolver_0 = module_1.Resolver()
        resolver_0.close()
        resolver_0.close()
        resolver_0.close()
        int_0 = -2086
        resolver_0.close()
        str_0 = None
        awaitable_0 = resolver_0.resolve(str_0, int_0)
        str_1 = '2M5?W69-d/Yk'
        int_1 = -3909
        awaitable_1 = resolver_0.resolve(str_1, int_1)
        bool_0 = module_1.is_valid_ip(str_0)
        dict_0 = {}
        override_resolver_0 = module_1.OverrideResolver(**dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        resolver_0 = module_1.Resolver()
        default_executor_resolver_0 = module_1.DefaultExecutorResolver()
        str_0 = '%=)y\t7WHxG4n;'
        bool_0 = module_1.is_valid_ip(str_0)
        int_0 = 12
        dict_0 = {str_0: default_executor_resolver_0}
        s_s_l_context_0 = module_2.SSLContext(**dict_0)
        s_s_l_context_1 = module_1.ssl_options_to_context(s_s_l_context_0)
        str_1 = 'TUh}KX.<\tQWy[3Te]'
        int_1 = 729
        list_0 = default_executor_resolver_0.resolve(str_1, int_1)
        int_2 = -413
        list_1 = module_1.bind_sockets(int_0, str_0, int_2, int_1, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 8088
        list_0 = module_1.bind_sockets(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        default_executor_resolver_0 = module_1.DefaultExecutorResolver()
        str_0 = '%=)y\t7WHxG4n;'
        int_0 = 12
        dict_0 = {str_0: default_executor_resolver_0, str_0: int_0, str_0: default_executor_resolver_0}
        s_s_l_context_0 = module_2.SSLContext(**dict_0)
        s_s_l_context_1 = module_1.ssl_options_to_context(s_s_l_context_0)
        list_0 = default_executor_resolver_0.resolve(str_0, int_0)
        int_1 = 1433
        str_1 = ''
        list_1 = default_executor_resolver_0.resolve(str_1, int_0)
        int_2 = None
        list_2 = module_1.bind_sockets(int_2, str_1, int_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '05'
        int_0 = None
        list_0 = module_1.bind_sockets(int_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '05'
        bool_0 = module_1.is_valid_ip(str_0)
        int_0 = None
        list_0 = module_1.bind_sockets(int_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        default_executor_resolver_0 = module_1.DefaultExecutorResolver()
        str_0 = '%=)y\t7WHxG4n;'
        int_0 = 334
        address_family_0 = module_3.AddressFamily.AF_BRIDGE
        dict_0 = {}
        s_s_l_context_0 = module_1.ssl_options_to_context(dict_0)
        list_0 = default_executor_resolver_0.resolve(str_0, int_0, address_family_0)
        bool_0 = module_1.is_valid_ip(str_0)
        str_1 = '1'
        int_1 = 1433
        int_2 = -1006
        bool_1 = True
        list_1 = module_1.bind_sockets(int_2, str_1, address_family_0, int_1, int_0, bool_1)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -1017
        str_0 = '%=)y\t7WHxG4n;'
        dict_0 = {}
        s_s_l_context_0 = module_1.ssl_options_to_context(dict_0)
        bool_0 = module_1.is_valid_ip(str_0)
        list_0 = [int_0, s_s_l_context_0]
        override_resolver_0 = module_1.OverrideResolver(*list_0)
        override_resolver_0.close()
    except BaseException:
        pass

def test_case_19():
    try:
        dict_0 = {}
        resolver_0 = module_1.Resolver(**dict_0)
        resolver_0.close()
        str_0 = '%=)y\t7WHxG4n;'
        resolver_1 = module_1.Resolver()
        dict_1 = {}
        s_s_l_context_0 = module_1.ssl_options_to_context(dict_1)
        bool_0 = module_1.is_valid_ip(str_0)
        s_s_l_context_1 = module_2.SSLContext(**dict_0)
        s_s_l_context_2 = module_1.ssl_options_to_context(s_s_l_context_1)
        default_executor_resolver_0 = module_1.DefaultExecutorResolver(**dict_0)
        str_1 = 'A!!'
        socket_0 = module_1.bind_unix_socket(str_1)
        str_2 = 'Converts a websocket agreed_parameters set to keyword arguments\n        for our compressor objects.\n        '
        bool_1 = module_1.is_valid_ip(str_2)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        i_o_loop_0 = module_0.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        i_o_loop_2 = i_o_loop_1.instance()
        optional_0 = i_o_loop_2.current(bool_0)
        dict_0 = {optional_0: bool_0, i_o_loop_1: i_o_loop_0, i_o_loop_0: i_o_loop_0}
        list_0 = [dict_0, optional_0]
        threaded_resolver_0 = module_1.ThreadedResolver()
        str_0 = '-Fu\x0bS'
        int_0 = None
        override_resolver_0 = module_1.OverrideResolver(*list_0)
        awaitable_0 = override_resolver_0.resolve(str_0, int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        default_executor_resolver_0 = module_1.DefaultExecutorResolver()
        str_0 = '%=)y\t7WHxG4n;'
        int_0 = 12
        int_1 = -1728
        int_2 = 3127
        socket_0 = module_1.bind_unix_socket(str_0, int_1, int_2)
        list_0 = []
        s_s_l_context_0 = module_2.SSLContext(*list_0)
        s_s_l_socket_0 = module_1.ssl_wrap_socket(socket_0, s_s_l_context_0)
        bool_0 = module_1.is_valid_ip(str_0)
        dict_0 = {str_0: default_executor_resolver_0}
        s_s_l_context_1 = module_2.SSLContext(**dict_0)
        s_s_l_context_2 = module_1.ssl_options_to_context(s_s_l_context_1)
        list_1 = default_executor_resolver_0.resolve(str_0, int_0)
        i_o_loop_0 = module_0.IOLoop(*list_0)
        executor_resolver_0 = module_1.ExecutorResolver()
        var_0 = s_s_l_context_2.wrap_bio(i_o_loop_0, executor_resolver_0)
    except BaseException:
        pass