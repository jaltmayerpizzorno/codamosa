# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        int_0 = None
        str_0 = 'Requested URL {} not found'
        str_1 = None
        dict_0 = {str_0: int_0, str_0: int_0, str_1: int_0}
        optional_0 = module_0.parse_forwarded(int_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = None
        list_0 = [float_0, float_0]
        optional_0 = module_0.parse_xforwarded(list_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '84BY?e5B'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = "s;w$'"
        dict_0 = {str_1: str_1, str_0: str_0, str_0: str_0, str_1: str_1}
        tuple_1 = (str_1, dict_0)
        str_2 = module_0.fwd_normalize_address(str_0)
        dict_1 = module_0.fwd_normalize(tuple_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 1532
        bytes_0 = b'\xfe\x9a\xc7\x15@f`\xf8\x17\x17f\xeb\xed|\xfd\xf2\xd2'
        bytes_1 = module_0.format_http1_response(int_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'IWF"Ww5xNP\\&5'
        int_0 = 429
        str_1 = 'p9Qc9SvSe&Wz^E:Z'
        int_1 = -1375
        dict_0 = {str_0: int_0, str_0: str_0, str_0: str_0, str_1: int_1}
        dict_1 = module_0.fwd_normalize(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'for'
        str_1 = (str_0, str_0)
        str_2 = (str_1, str_1)
        str_3 = (str_0, str_2)
        var_0 = [str_1, str_1, str_2, str_2, str_3, str_3]
        dict_0 = module_0.fwd_normalize(var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'for'
        str_1 = (str_0, str_0)
        str_2 = (str_0, str_1)
        var_0 = [str_1, str_1, str_1, str_1, str_2, str_2]
        dict_0 = module_0.fwd_normalize(var_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = set()
        dict_0 = module_0.fwd_normalize(set_0)
        int_0 = -155
        str_0 = '\n#LRzbtMr3_GOK*PQ#@"'
        tuple_0 = module_0.parse_host(str_0)
        bytes_0 = module_0.format_http1_response(int_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'unknown'
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'for'
        str_1 = '\\,;HWk\n(ee4'
        str_2 = (str_1, str_1)
        str_3 = 'proto'
        tuple_0 = module_0.parse_content_header(str_1)
        str_4 = (str_3, str_3)
        int_0 = 1234
        var_0 = (str_0, int_0)
        str_5 = 'path'
        str_6 = 'FooBar'
        str_7 = (str_5, str_6)
        var_1 = [str_2, str_2, str_2, str_4, var_0, str_7]
        dict_0 = module_0.fwd_normalize(var_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'for'
        str_1 = '::1'
        str_2 = (str_0, str_1)
        str_3 = (str_2, str_1)
        str_4 = 'https'
        str_5 = (str_2, str_4)
        str_6 = 'foo.com'
        str_7 = (str_6, str_6)
        int_0 = 1234
        var_0 = (str_0, int_0)
        str_8 = 'FooBar'
        str_9 = (str_5, str_8)
        var_1 = [str_2, str_3, str_5, str_7, var_0, str_9]
        dict_0 = module_0.fwd_normalize(var_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '[::1]:80'
        tuple_0 = module_0.parse_host(str_0)
        str_1 = ':80'
        tuple_1 = module_0.parse_host(str_1)
        str_2 = '[::1]'
        tuple_2 = module_0.parse_host(str_2)
        str_3 = '[::1'
        tuple_3 = module_0.parse_host(str_3)
        str_4 = ''
        tuple_4 = module_0.parse_host(str_4)
        str_5 = '['
        tuple_5 = module_0.parse_host(str_5)
        str_6 = '[]:80'
        tuple_6 = module_0.parse_host(str_6)
        str_7 = 'IP'
        str_8 = "/]d[Y+C'GFnXs>"
        optional_0 = module_0.parse_xforwarded(str_7, str_8)
    except BaseException:
        pass