# Automatically generated by Pynguin.
import flutils.pathutils as module_0
import pathlib as module_1

def test_case_0():
    try:
        bytes_0 = b'\x90p\xb8\xbc'
        module_0.chmod(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '5+Yi(%@K'
        path_0 = module_0.directory_present(str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'P'
        struct_group_0 = module_0.get_os_group(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'The given gid: %r, is not a valid gid for this operating system.'
        str_1 = 'placeholder too large for max width'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_1}
        tuple_0 = (dict_0,)
        tuple_1 = (tuple_0,)
        struct_passwd_0 = module_0.get_os_user(tuple_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '~/tmp/flutils.tests.osutils.txt'
        module_0.chown(str_0)
        str_1 = '~/tmp/**'
        module_0.chown(str_1)
        str_2 = '~/tmp/*'
        str_3 = 'foo'
        str_4 = 'bar'
        module_0.chown(str_2, str_3, str_4)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b''
        module_0.chown(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        posix_path_0 = module_1.PosixPath(*list_0)
        path_0 = module_0.directory_present(posix_path_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '/pynguin'
        module_0.chmod(str_0)
        module_0.path_absent(str_0)
        struct_group_0 = module_0.get_os_group(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'chown'
        module_0.path_absent(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        struct_passwd_0 = module_0.get_os_user()
        bytes_0 = b''
        struct_passwd_1 = module_0.get_os_user()
        generator_0 = module_0.find_paths(bytes_0)
        module_0.path_absent(bytes_0)
        path_0 = module_0.normalize_path(bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -2648
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = -4981
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        struct_passwd_0 = module_0.get_os_user()
        struct_passwd_1 = module_0.get_os_user()
        int_0 = 2651
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        struct_group_0 = module_0.get_os_group()
        posix_path_0 = module_1.PosixPath()
        struct_group_1 = module_0.get_os_group(posix_path_0)
    except BaseException:
        pass

def test_case_14():
    try:
        struct_group_0 = module_0.get_os_group()
        struct_passwd_0 = module_0.get_os_user()
        struct_passwd_1 = module_0.get_os_user()
        str_0 = "/pynguin/_Y_\x0c<1,HO}Ic'"
        module_0.path_absent(str_0)
        path_0 = module_0.directory_present(str_0)
        str_1 = module_0.exists_as(str_0)
        struct_passwd_2 = module_0.get_os_user()
        module_0.path_absent(str_0)
        path_1 = module_0.normalize_path(str_0)
        generator_0 = module_0.find_paths(str_0)
        struct_passwd_3 = module_0.get_os_user()
        str_2 = ' Cannot be a builtin name.'
        path_2 = module_0.directory_present(str_2, str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '~/tmp/test_dir_present'
        path_0 = module_0.directory_present(str_0)
        var_0 = path_0.exists()
        var_1 = path_0.is_dir()
        var_2 = path_0.is_file()
        str_1 = '~/tmp/test_dir<present/test_path1/test_path2'
        path_1 = module_0.directory_present(str_1)
        str_2 = 'TEST FAIL 1'
        var_3 = print(str_2)
        str_3 = '~/tmp/test_dir_present/test_path1/*'
        path_2 = module_0.directory_present(str_3)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '/bin'
        str_1 = module_0.exists_as(str_0)
        str_2 = '/bin/bash'
        str_3 = module_0.exists_as(str_2)
        str_4 = '/dev/sda'
        str_5 = module_0.exists_as(str_4)
        str_6 = '/dev/tty'
        str_7 = module_0.exists_as(str_6)
        str_8 = "F$iQDmU7#rnXV'l4E"
        str_9 = module_0.exists_as(str_8)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '/pynguin'
        module_0.chmod(str_0)
        module_0.path_absent(str_0)
        none_type_0 = None
        path_0 = module_0.directory_present(str_0, none_type_0)
        module_0.chown(str_0)
        struct_passwd_0 = module_0.get_os_user()
        int_0 = -1708
        str_1 = 'uo'
        path_1 = module_0.directory_present(str_0, int_0, str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '/pynguin'
        module_0.chmod(str_0)
        module_0.path_absent(str_0)
        path_0 = module_0.normalize_path(str_0)
        module_0.chown(str_0)
        int_0 = -1708
        str_1 = 'aDf2\\I<HoV"u,Y~'
        var_0 = path_0.touch()
        path_1 = module_0.directory_present(str_0, int_0, str_1)
    except BaseException:
        pass