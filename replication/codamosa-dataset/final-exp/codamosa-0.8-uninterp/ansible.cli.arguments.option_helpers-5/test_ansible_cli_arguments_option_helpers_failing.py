# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    try:
        str_0 = '=\ngY'
        dict_0 = None
        float_0 = 178.994896
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(dict_0, float_0)
        bytes_0 = b'\x10\x02Z=\x1b\xe0\x02\x9c'
        prepend_list_action_0 = module_0.PrependListAction(bytes_0, str_0)
        var_0 = sorting_help_formatter_0.add_arguments(prepend_list_action_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        set_0 = None
        int_0 = 30
        list_0 = [int_0]
        str_0 = '/OG'
        ansible_version_0 = module_0.AnsibleVersion(bytes_0, set_0, int_0, list_0, str_0)
        var_0 = ansible_version_0.__call__(str_0, set_0, list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -1801.2906855552353
        set_0 = set()
        unrecognized_argument_0 = None
        str_0 = ''
        prepend_list_action_0 = module_0.PrependListAction(set_0, unrecognized_argument_0, str_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 460.5096
        var_0 = module_0.maybe_unfrack_path(float_0)
        var_1 = module_0.version()
        str_0 = '\x0bb+'
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(float_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x0c\x97\x8e.`\x10\x9ds\x1a@\xae\xdb\xf8'
        var_0 = module_0.add_basedir_options(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Could not find the shell plugin required (%s).'
        prepend_list_action_0 = None
        var_0 = module_0.unfrack_path()
        dict_0 = {str_0: prepend_list_action_0, str_0: prepend_list_action_0, prepend_list_action_0: prepend_list_action_0, prepend_list_action_0: str_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(dict_0)
        var_1 = module_0.add_basedir_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 2759.108
        str_0 = 'GW2r uc`!/'
        float_1 = 0.2
        str_1 = 'i\\L=8Vht\x0c('
        ansible_version_0 = module_0.AnsibleVersion(str_0, float_1, str_1)
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(dict_0)
        var_0 = module_0.add_runas_prompt_options(sorting_help_formatter_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 1164.93
        list_0 = [float_0]
        bool_0 = False
        var_0 = module_0.add_runas_prompt_options(list_0, bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = -1300.0
        var_0 = module_0.add_runtask_options(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = False
        var_0 = module_0.add_tasknoplay_options(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'xb\x812\xb0\xaf\xa6\xca<\x83qy\xdf\xbe'
        prepend_list_action_0 = None
        float_0 = -871.592015
        bool_0 = False
        str_0 = '\n*u!8S|.'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(bytes_0, prepend_list_action_0, float_0, bool_0, str_0)
        ansible_version_0 = None
        complex_0 = None
        prepend_list_action_1 = module_0.PrependListAction(ansible_version_0, float_0, complex_0)
        float_1 = -1006.3617
        float_2 = 2.0
        int_0 = -2604
        tuple_0 = (float_1, unrecognized_argument_0, float_2, int_0)
        set_0 = {str_0, bool_0, float_1}
        ansible_version_1 = module_0.AnsibleVersion(prepend_list_action_0, float_1, str_0)
        var_0 = unrecognized_argument_0.__call__(tuple_0, set_0, ansible_version_1)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ' Md|!tSHy'
        int_0 = -1981
        list_0 = [int_0]
        sorting_help_formatter_0 = None
        str_1 = '\n    This is a AIX Group manipulation class.\n\n    This overrides the following methods from the generic class:-\n      - group_del()\n      - group_add()\n      - group_mod()\n    '
        argument_parser_0 = module_1.ArgumentParser(list_0, sorting_help_formatter_0, str_1)
        var_0 = module_0.add_runas_options(argument_parser_0)
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(int_0)
        sorting_help_formatter_2 = module_0.SortingHelpFormatter(str_0, sorting_help_formatter_1)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = module_0.version()
        var_1 = module_0.unfrack_path()
        int_0 = 228
        tuple_0 = ()
        bytes_0 = b'\xb0\xf5\x0c\xb4\x96i\n|\xb2\xd6\xdc\x03'
        bool_0 = False
        str_0 = ']ePM\nk@'
        float_0 = -2036.0
        unrecognized_argument_0 = module_0.UnrecognizedArgument(int_0, float_0, tuple_0)
        int_1 = -1690
        prepend_list_action_0 = module_0.PrependListAction(tuple_0, bytes_0, bool_0, str_0, unrecognized_argument_0, int_1)
    except BaseException:
        pass

def test_case_13():
    try:
        argument_parser_0 = module_1.ArgumentParser()
        var_0 = module_0.add_module_options(argument_parser_0)
        str_0 = '-M'
        str_1 = ''
        bool_0 = False
        bytes_0 = None
        var_1 = module_0.maybe_unfrack_path(bytes_0)
        dict_0 = {str_0: argument_parser_0, str_1: str_0, bool_0: bool_0, bool_0: var_0}
        var_2 = argument_parser_0.parse_args(dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        argument_parser_0 = module_1.ArgumentParser()
        var_0 = module_0.add_vault_options(argument_parser_0)
        str_0 = '--vault-id'
        str_1 = '*'
        str_2 = [str_0, str_1]
        set_0 = set()
        list_0 = [str_2, argument_parser_0]
        var_1 = module_0.version(list_0)
        str_3 = '--vault-password-file'
        str_4 = '*'
        str_5 = [str_3, str_4]
        var_2 = argument_parser_0.parse_args(str_5)
        dict_0 = {}
        var_3 = module_0.create_base_parser(dict_0)
        namespace_0 = module_1.Namespace(**dict_0)
        var_4 = argument_parser_0.parse_args(dict_0, namespace_0)
        float_0 = -3863.2
        str_6 = 'I^'
        unrecognized_argument_0 = module_0.UnrecognizedArgument(namespace_0, float_0, str_6)
        list_1 = [unrecognized_argument_0, var_1, set_0, var_1]
        sorting_help_formatter_0 = module_0.SortingHelpFormatter(list_1)
        var_5 = namespace_0.__repr__()
        var_6 = sorting_help_formatter_0.add_arguments(dict_0)
        bytes_0 = b'\xa4\x9d\x06\xd2,\xa6\xe5=\xbb\x83\x01\x036\x03'
        dict_1 = {}
        sorting_help_formatter_1 = module_0.SortingHelpFormatter(bytes_0, dict_1, namespace_0)
    except BaseException:
        pass