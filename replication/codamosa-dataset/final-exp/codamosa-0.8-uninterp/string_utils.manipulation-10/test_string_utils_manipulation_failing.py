# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    try:
        int_0 = 5165
        str_0 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        str_0 = 'iu%T(Cb?J'
        str_1 = module_0.roman_encode(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '*?)*[a-z\\d]$'
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'DINERS_CLUB'
        str_1 = module_0.shuffle(str_0)
        list_0 = []
        string_compressor_0 = module_0.__StringCompressor(*list_0)
        str_2 = None
        roman_numbers_0 = module_0.__RomanNumbers(*list_0)
        str_3 = module_0.decompress(str_2)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = 'PDtK8n!'
        str_3 = module_0.slugify(str_2)
        str_4 = '*'
        int_0 = 1738
        str_5 = module_0.compress(str_4, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        roman_numbers_0 = module_0.__RomanNumbers()
        str_0 = 'H%,@-UeST\nlwJ&U7G\rf^'
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.decompress(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ', '
        str_1 = module_0.shuffle(str_0)
        str_2 = 'fGc4*081^@{\'2r"aT@r'
        str_3 = module_0.snake_case_to_camel(str_2)
        str_4 = 'i[>Y4]!QVdmu'
        str_5 = module_0.decompress(str_4)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        string_formatter_0 = module_0.__StringFormatter(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'{r"\xc9\xfe)\xb8@\x1eg\x1d$\xe5j'
        var_0 = module_0.camel_case_to_snake(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        string_compressor_0 = module_0.__StringCompressor()
        str_0 = ";ABx'Q4VS)"
        str_1 = module_0.slugify(str_0)
        dict_0 = {str_0: str_0}
        roman_numbers_0 = module_0.__RomanNumbers(**dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '!\nO2'
        str_1 = module_0.strip_html(str_0)
        str_2 = 'A.S:TY'
        str_3 = module_0.asciify(str_2)
        roman_numbers_0 = module_0.__RomanNumbers()
        str_4 = None
        str_5 = module_0.asciify(str_4)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'm.ybD]re,6c*VSSS'
        roman_numbers_0 = module_0.__RomanNumbers()
        str_1 = module_0.asciify(str_0)
        str_2 = None
        str_3 = module_0.slugify(str_2)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        string_compressor_0 = module_0.__StringCompressor()
        str_1 = module_0.strip_margin(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        int_0 = -117
        str_2 = 'l\n$@suXT_\r'
        str_3 = module_0.compress(str_2)
        int_1 = 17
        str_4 = module_0.roman_encode(int_1)
        str_5 = module_0.roman_encode(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'e6.5'
        str_1 = module_0.compress(str_0)
        bool_0 = False
        str_2 = module_0.snake_case_to_camel(str_1, bool_0)
        str_3 = 'De5X\n#5##U*xUx'
        int_0 = module_0.roman_decode(str_3)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'ThisIsACamelStringTest'
        var_0 = module_0.camel_case_to_snake(str_0)
        str_1 = '-'
        str_2 = 'NP'
        str_3 = module_0.snake_case_to_camel(str_2, str_1)
        str_4 = ''
        str_5 = module_0.snake_case_to_camel(str_4)
        str_6 = 'g0^Og15'
        str_7 = module_0.snake_case_to_camel(str_6)
        str_8 = None
        bool_0 = False
        str_9 = module_0.snake_case_to_camel(str_8, bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = '0Ib'
        str_3 = module_0.prettify(str_2)
        bool_0 = module_0.booleanize(str_3)
        str_4 = '2U<wC^&\x0bxe#h'
        roman_numbers_0 = module_0.__RomanNumbers()
        str_5 = module_0.prettify(str_4)
        str_6 = module_0.asciify(str_0)
        int_0 = module_0.roman_decode(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = 'PDtK8n!'
        str_3 = module_0.slugify(str_2)
        bool_0 = True
        str_4 = '9585|mm<j\x0c'
        str_5 = module_0.strip_html(str_4, bool_0)
        str_6 = module_0.decompress(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = ''
        var_0 = module_0.camel_case_to_snake(str_0)
        str_1 = None
        str_2 = "'3:t*FhZe,;r^fzwo5~_"
        str_3 = module_0.compress(str_2)
        str_4 = module_0.reverse(str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = 'PDtK8n!'
        str_3 = module_0.slugify(str_2)
        str_4 = 'F.}Lz;OHXy *'
        bool_0 = True
        str_5 = module_0.strip_html(str_4, bool_0)
        int_0 = -117
        str_6 = '(hQH'
        str_7 = module_0.compress(str_6, str_0, int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = '0Ib'
        bool_0 = True
        str_3 = module_0.strip_html(str_2, bool_0)
        str_4 = ']'
        str_5 = ' $w'
        int_0 = 1586
        str_6 = module_0.compress(str_4, str_5, int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = None
        str_1 = module_0.shuffle(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 895
        str_0 = module_0.roman_encode(int_0)
        str_1 = '&y$ar'
        str_2 = '{~f=A1\nW\x0c/\rt6f'
        str_3 = module_0.reverse(str_1)
        bool_0 = True
        str_4 = module_0.strip_html(str_1, bool_0)
        str_5 = module_0.asciify(str_2)
        str_6 = module_0.shuffle(str_5)
        str_7 = None
        bool_1 = module_0.booleanize(str_7)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'i_am_a_snake'
        bool_0 = True
        str_1 = module_0.snake_case_to_camel(str_0, bool_0)
        dict_0 = None
        var_0 = module_0.camel_case_to_snake(dict_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = ''
        str_1 = module_0.prettify(str_0)
        str_2 = module_0.asciify(str_1)
        str_3 = '0\n'
        bool_0 = False
        str_4 = module_0.strip_html(str_3, bool_0)
        str_5 = None
        str_6 = module_0.strip_html(str_5)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = None
        str_0 = 'hx]G\x0blE>5]-71v0'
        str_1 = module_0.slugify(str_0, str_0)
        str_2 = '%sb)]luh`?t\\MFfW^'
        str_3 = module_0.strip_margin(str_2)
        str_4 = 'b!1NLH,'
        str_5 = module_0.asciify(str_4)
        str_6 = 'tU$$@q13k'
        str_7 = module_0.compress(str_5, str_6, int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '2\x0c'
        str_1 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
        str_2 = module_0.prettify(str_1)
        str_3 = module_0.roman_encode(str_0)
    except BaseException:
        pass