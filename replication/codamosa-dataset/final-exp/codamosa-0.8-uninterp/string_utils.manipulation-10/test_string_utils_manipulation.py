# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 2672
    str_0 = module_0.roman_encode(int_0)

def test_case_2():
    str_0 = '^{}$'
    str_1 = module_0.compress(str_0)

def test_case_3():
    str_0 = 'i!BVFRyiQ'
    str_1 = module_0.prettify(str_0)

def test_case_4():
    str_0 = '\n    Checks if the given string represents a valid ISBN 10 (International Standard Book Number).\n    By default hyphens in the string are ignored, so digits can be separated in different ways, by calling this\n    function with `normalize=False` only digit-only strings will pass the validation.\n\n    *Examples:*\n\n    >>> is_isbn_10(\'1506715214\') # returns true\n    >>> is_isbn_10(\'150-6715214\') # returns true\n    >>> is_isbn_10(\'150-6715214\', normalize=False) # returns false\n\n    :param input_string: String to check.\n    :param normalize: True to ignore hyphens ("-") in the string (default), false otherwise.\n    :return: True if valid ISBN 10, false otherwise.\n    '
    str_1 = module_0.prettify(str_0)

def test_case_5():
    str_0 = '63/'
    str_1 = module_0.reverse(str_0)

def test_case_6():
    str_0 = 'ThisIsACamelStringTest'
    var_0 = module_0.camel_case_to_snake(str_0)
    var_1 = module_0.camel_case_to_snake(str_0)
    var_2 = module_0.camel_case_to_snake(str_0)
    var_3 = module_0.camel_case_to_snake(str_0)

def test_case_7():
    str_0 = '{)O:3]-[~q|(A0SQD~'
    str_1 = module_0.snake_case_to_camel(str_0, str_0)

def test_case_8():
    str_0 = "X'c'>?"
    bool_0 = False
    str_1 = module_0.strip_html(str_0, bool_0)

def test_case_9():
    str_0 = '_fD|4w@L\x0bY}ZyzM({'
    bool_0 = module_0.booleanize(str_0)

def test_case_10():
    str_0 = 'Expected "str", received "{}"'
    str_1 = module_0.strip_margin(str_0)

def test_case_11():
    str_0 = '{2'
    str_1 = '>C]wWTbM*}Py'
    bool_0 = True
    str_2 = module_0.strip_html(str_1, bool_0)
    str_3 = module_0.prettify(str_0)
    int_0 = 2672
    str_4 = module_0.roman_encode(int_0)

def test_case_12():
    str_0 = 'ThisIsACamelStringTest'
    var_0 = module_0.camel_case_to_snake(str_0)
    str_1 = ''
    var_1 = module_0.camel_case_to_snake(str_1)
    str_2 = '!'
    var_2 = module_0.camel_case_to_snake(str_0, str_2)

def test_case_13():
    str_0 = ''
    str_1 = module_0.prettify(str_0)
    str_2 = module_0.asciify(str_1)
    str_3 = 'l\n$@suXT_\r'
    str_4 = module_0.compress(str_3)
    int_0 = 17
    str_5 = module_0.roman_encode(int_0)
    int_1 = module_0.roman_decode(str_5)

def test_case_14():
    int_0 = 2699
    str_0 = module_0.roman_encode(int_0)

def test_case_15():
    str_0 = '!n{\n<HUgCZZ=jK,\tR@N'
    str_1 = '?RX-LUANU'
    str_2 = module_0.snake_case_to_camel(str_1)
    str_3 = module_0.snake_case_to_camel(str_0)
    str_4 = '2'
    dict_0 = {}
    roman_numbers_0 = module_0.__RomanNumbers(**dict_0)
    str_5 = module_0.prettify(str_4)
    int_0 = 2659
    str_6 = module_0.roman_encode(int_0)

def test_case_16():
    str_0 = ''
    str_1 = module_0.prettify(str_0)
    str_2 = module_0.asciify(str_1)
    str_3 = '0\n'
    bool_0 = False
    str_4 = module_0.strip_html(str_3, bool_0)
    str_5 = 'l\n$@suXT_\r'
    str_6 = module_0.compress(str_5)
    int_0 = 1061
    str_7 = module_0.roman_encode(int_0)
    int_1 = module_0.roman_decode(str_7)

def test_case_17():
    int_0 = 2684
    str_0 = module_0.roman_encode(int_0)

def test_case_18():
    str_0 = '6W`*[\\EQ'
    str_1 = module_0.compress(str_0)
    str_2 = module_0.decompress(str_1)
    str_3 = 'reverse'
    str_4 = module_0.strip_margin(str_0)
    var_0 = module_0.camel_case_to_snake(str_3)
    str_5 = module_0.asciify(str_0)

def test_case_19():
    str_0 = '|9#rNL}'
    str_1 = '\'\\QgM/n-mn0/\'$/l^l"'
    bool_0 = True
    str_2 = '0Ib'
    str_3 = ')r'
    bool_1 = module_0.booleanize(str_0)
    str_4 = module_0.asciify(str_2)
    str_5 = 'Z'
    str_6 = module_0.strip_html(str_5)
    str_7 = module_0.snake_case_to_camel(str_1, bool_0, str_3)
    str_8 = 'zLEfh2'
    str_9 = module_0.asciify(str_8)
    str_10 = '^4\\d{12}(?:\\d{3})?$'
    str_11 = module_0.shuffle(str_10)
    str_12 = module_0.compress(str_1)
    int_0 = 47
    str_13 = module_0.roman_encode(int_0)
    int_1 = module_0.roman_decode(str_13)

def test_case_20():
    str_0 = '  a  b   c   d e-mail@email.it    www.mysite.com  '
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()
    str_2 = 'a.   b.     c & d.'
    string_formatter_1 = module_0.__StringFormatter(str_2)
    str_3 = string_formatter_1.format()
    str_4 = 'one  two/three,four;five six/seven'
    string_formatter_2 = module_0.__StringFormatter(str_4)
    str_5 = string_formatter_2.format()
    str_6 = '   www.mysite.com '
    string_formatter_3 = module_0.__StringFormatter(str_6)
    str_7 = string_formatter_3.format()
    str_8 = 'https://www.mysite.com'
    string_formatter_4 = module_0.__StringFormatter(str_8)
    str_9 = string_formatter_4.format()