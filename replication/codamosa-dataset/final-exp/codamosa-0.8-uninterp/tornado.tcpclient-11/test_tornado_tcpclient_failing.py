# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.netutil as module_1
import tornado.ioloop as module_2
import socket as module_3
import tornado.iostream as module_4
import ssl as module_5
import concurrent.futures._base as module_6

def test_case_0():
    try:
        list_0 = []
        int_0 = 1598
        connector_0 = module_0._Connector(list_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        resolver_0 = module_1.Resolver()
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        i_o_loop_0 = module_2.IOLoop()
        tuple_0 = (i_o_loop_0, t_c_p_client_0)
        list_0 = [tuple_0]
        str_0 = 'pGw'
        address_family_0 = module_3.AddressFamily.AF_UNIX
        bool_0 = False
        connector_0 = module_0._Connector(list_0, bool_0)
        connector_0.clear_timeouts()
        future_0 = None
        connector_1 = module_0._Connector(list_0, str_0)
        connector_1.on_connect_done(str_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_2():
    try:
        resolver_0 = module_1.Resolver()
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        t_c_p_client_0.close()
        i_o_loop_0 = module_2.IOLoop()
        tuple_0 = (i_o_loop_0, t_c_p_client_0)
        list_0 = [tuple_0]
        int_0 = 2925
        str_0 = 'pGw'
        dict_0 = {str_0: int_0, int_0: tuple_0, str_0: t_c_p_client_0}
        connector_0 = module_0._Connector(list_0, int_0)
        connector_1 = module_0._Connector(list_0, dict_0)
        connector_1.on_timeout()
        connector_1.on_connect_timeout()
        address_family_0 = module_3.AddressFamily.AF_INET
        connector_0.clear_timeouts()
        iterator_0 = None
        bytes_0 = b'V\x16'
        socket_0 = module_3.socket()
        i_o_stream_0 = module_4.IOStream(socket_0)
        future_0 = i_o_stream_0.write(bytes_0)
        connector_1.on_connect_done(iterator_0, address_family_0, tuple_0, future_0)
        future_1 = None
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_0, future_1)
    except BaseException:
        pass

def test_case_3():
    try:
        i_o_loop_0 = module_2.IOLoop()
        t_c_p_client_0 = module_0.TCPClient()
        tuple_0 = (i_o_loop_0, t_c_p_client_0)
        list_0 = [tuple_0, tuple_0]
        s_s_l_context_0 = module_5.SSLContext()
        connector_0 = module_0._Connector(list_0, s_s_l_context_0)
        future_0 = connector_0.start()
    except BaseException:
        pass

def test_case_4():
    try:
        resolver_0 = module_1.Resolver()
        i_o_loop_0 = module_2.IOLoop()
        t_c_p_client_0 = module_0.TCPClient()
        tuple_0 = (i_o_loop_0, t_c_p_client_0)
        list_0 = [tuple_0]
        address_family_0 = module_3.AddressFamily.AF_INET
        connector_0 = module_0._Connector(list_0, resolver_0)
        future_0 = None
        connector_0.on_connect_done(t_c_p_client_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_5():
    try:
        resolver_0 = module_1.Resolver()
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        i_o_loop_0 = module_2.IOLoop()
        t_c_p_client_1 = module_0.TCPClient()
        tuple_0 = (i_o_loop_0, t_c_p_client_1)
        list_0 = [tuple_0]
        float_0 = -460.05
        dict_0 = {}
        s_s_l_context_0 = module_5.SSLContext(**dict_0)
        connector_0 = module_0._Connector(list_0, s_s_l_context_0)
        connector_0.set_timeout(float_0)
        str_0 = 'pGw'
        address_family_0 = module_3.AddressFamily.AF_INET
        bool_0 = True
        connector_1 = module_0._Connector(list_0, bool_0)
        connector_1.clear_timeouts()
        future_0 = None
        connector_1.on_connect_done(str_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_6():
    try:
        i_o_loop_0 = module_2.IOLoop()
        t_c_p_client_0 = module_0.TCPClient()
        t_c_p_client_0.close()
        t_c_p_client_1 = module_0.TCPClient()
        executor_0 = module_6.Executor()
        i_o_loop_0.set_default_executor(executor_0)
        tuple_0 = (i_o_loop_0, t_c_p_client_1)
        list_0 = [tuple_0, tuple_0]
        connector_0 = module_0._Connector(list_0, t_c_p_client_0)
        connector_0.on_connect_timeout()
        t_c_p_client_1.close()
        tuple_1 = connector_0.split(list_0)
        connector_0.on_connect_timeout()
        t_c_p_client_0.close()
        iterator_0 = None
        callable_0 = None
        connector_1 = module_0._Connector(list_0, callable_0)
        connector_0.try_connect(iterator_0)
    except BaseException:
        pass

def test_case_7():
    try:
        i_o_loop_0 = module_2.IOLoop()
        t_c_p_client_0 = module_0.TCPClient()
        tuple_0 = (i_o_loop_0, t_c_p_client_0)
        list_0 = [tuple_0, tuple_0]
        connector_0 = module_0._Connector(list_0, i_o_loop_0)
        connector_0.on_connect_timeout()
        connector_0.on_timeout()
        t_c_p_client_0.close()
        iterator_0 = None
        callable_0 = None
        connector_1 = module_0._Connector(list_0, callable_0)
        connector_0.clear_timeouts()
        connector_1.try_connect(iterator_0)
    except BaseException:
        pass

def test_case_8():
    try:
        resolver_0 = module_1.Resolver()
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        i_o_loop_0 = module_2.IOLoop()
        t_c_p_client_1 = module_0.TCPClient()
        tuple_0 = (i_o_loop_0, t_c_p_client_1)
        list_0 = [tuple_0]
        int_0 = 2901
        str_0 = 'pGw'
        dict_0 = {str_0: int_0, int_0: tuple_0, str_0: t_c_p_client_1}
        connector_0 = module_0._Connector(list_0, dict_0)
        connector_0.on_timeout()
        connector_0.on_connect_timeout()
        float_0 = 2009.345561
        connector_0.set_timeout(float_0)
        address_family_0 = module_3.AddressFamily.AF_INET
        connector_0.clear_timeouts()
        future_0 = None
        connector_1 = module_0._Connector(list_0, str_0)
        connector_1.on_connect_done(str_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_9():
    try:
        resolver_0 = module_1.Resolver()
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        i_o_loop_0 = module_2.IOLoop()
        t_c_p_client_1 = module_0.TCPClient()
        tuple_0 = (i_o_loop_0, t_c_p_client_1)
        list_0 = [tuple_0]
        int_0 = 2901
        str_0 = 'pGw'
        dict_0 = {str_0: int_0, int_0: tuple_0, str_0: t_c_p_client_1}
        connector_0 = module_0._Connector(list_0, int_0)
        connector_1 = module_0._Connector(list_0, dict_0)
        connector_1.on_timeout()
        connector_1.on_connect_timeout()
        connector_0.clear_timeouts()
        float_0 = 2009.345561
        connector_0.set_timeout(float_0)
        address_family_0 = module_3.AddressFamily.AF_INET
        connector_2 = module_0._Connector(list_0, resolver_0)
        connector_0.clear_timeout()
        future_0 = None
        connector_2.on_connect_done(t_c_p_client_1, address_family_0, tuple_0, future_0)
    except BaseException:
        pass

def test_case_10():
    try:
        resolver_0 = module_1.Resolver()
        t_c_p_client_0 = module_0.TCPClient(resolver_0)
        i_o_loop_0 = module_2.IOLoop()
        t_c_p_client_1 = module_0.TCPClient()
        tuple_0 = (i_o_loop_0, t_c_p_client_1)
        list_0 = [tuple_0]
        int_0 = 2901
        str_0 = 'pGw'
        dict_0 = {str_0: int_0, int_0: tuple_0, str_0: t_c_p_client_1}
        connector_0 = module_0._Connector(list_0, int_0)
        connector_1 = module_0._Connector(list_0, dict_0)
        connector_1.on_timeout()
        connector_1.on_connect_timeout()
        float_0 = 2009.345561
        connector_0.set_timeout(float_0)
        address_family_0 = module_3.AddressFamily.AF_INET
        bool_0 = False
        callable_0 = None
        connector_2 = module_0._Connector(list_0, callable_0)
        connector_0.clear_timeout()
        memoryview_0 = None
        socket_0 = module_3.socket()
        i_o_stream_0 = module_4.IOStream(socket_0)
        future_0 = i_o_stream_0.write(memoryview_0)
        connector_1.on_connect_done(bool_0, address_family_0, tuple_0, future_0)
    except BaseException:
        pass