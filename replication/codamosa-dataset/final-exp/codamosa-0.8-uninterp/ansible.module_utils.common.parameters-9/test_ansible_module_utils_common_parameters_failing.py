# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        var_0 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0]
        str_0 = '<Lv@@Puy,5f(b'
        str_1 = 'P>`30&'
        bool_1 = False
        dict_0 = {str_0: str_0, str_1: bool_1}
        var_0 = module_0.env_fallback(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '?!TQ#($[9GdGX4=e\x0c{'
        list_0 = None
        var_0 = module_0.set_fallbacks(str_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Xp&C'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = [str_0, str_0]
        list_1 = [dict_0, str_0, str_0]
        var_0 = module_0.sanitize_keys(list_0, list_1)
        float_0 = 1704.7093
        var_1 = module_0.set_fallbacks(dict_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        float_0 = -574.0
        float_1 = -948.0
        var_0 = module_0.remove_values(float_0, float_1)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0, bool_0: bool_0}
        var_0 = module_0.remove_values(bool_0, dict_0)
        float_0 = 763.9973
        bytes_0 = b'\x0c\xa4\x82\x14U\x1a\xbdX6P\x03\x1b \xa7?U\xc5u\x9d'
        set_0 = set()
        tuple_0 = (bool_0, float_0, bytes_0, set_0)
        int_0 = -3509
        list_0 = [tuple_0, var_0, int_0, bool_0]
        var_1 = module_0.remove_values(list_0, set_0)
        list_1 = [bytes_0, dict_0]
        var_2 = module_0.remove_values(list_1, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'XpC'
        bytes_0 = b'\xd0\xfa\x0f\xa4'
        var_0 = module_0.remove_values(bytes_0, bytes_0)
        list_0 = [str_0, str_0]
        var_1 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'a'
        str_1 = 'type'
        str_2 = 'fallback'
        str_3 = 'str'
        str_4 = 'env'
        str_5 = 'A'
        str_6 = (str_4, str_5)
        str_7 = {str_1: str_3, str_2: str_6}
        str_8 = {str_0: str_7}
        var_0 = {}
        var_1 = module_0.set_fallbacks(str_8, var_0)
    except BaseException:
        pass