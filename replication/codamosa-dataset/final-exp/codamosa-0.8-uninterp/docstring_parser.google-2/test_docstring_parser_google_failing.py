# Automatically generated by Pynguin.
import docstring_parser.google as module_0

def test_case_0():
    try:
        section_0 = None
        google_parser_0 = module_0.GoogleParser()
        var_0 = google_parser_0.add_section(section_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\x13~^\t\x1e\xcd\xe9$\xa6Jl\x9f\x9c\xa5'
        google_parser_0 = module_0.GoogleParser(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        google_parser_0 = module_0.GoogleParser()
        list_0 = [google_parser_0, google_parser_0, google_parser_0]
        section_0 = module_0.Section(*list_0)
        var_0 = google_parser_0.add_section(section_0)
        section_1 = module_0.Section()
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        set_0 = set()
        google_parser_0 = module_0.GoogleParser(list_0, set_0)
        google_parser_1 = module_0.GoogleParser(google_parser_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n    This is a short description.\n\n    This is a long description.\n    It has multiple lines.\n    It explains the function in detail.\n\n    Args:\n        arg1 (int): Description of arg1.\n        arg2 (list[int]): Description of arg2.\n\n    Returns:\n        Description of return.\n\n    Raises:\n        TypeError: On invalid argument.\n\n    Example:\n    >>> hello()\n    "world"\n    '
        google_parser_0 = module_0.GoogleParser()
        docstring_0 = google_parser_0.parse(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '"""This is a docstring with everything in it.\n'
        str_1 = ''
        var_0 = str_0 + str_1
        str_2 = 'Args:\n'
        var_1 = var_0 + str_2
        str_3 = '    a: Parameter a.\n'
        var_2 = var_1 + str_3
        str_4 = '    b: Parameter b.\n'
        var_3 = var_2 + str_4
        var_4 = var_3 + str_1
        str_5 = 'Returns:\n'
        var_5 = var_4 + str_5
        str_6 = '    int: returns sum.\n'
        var_6 = var_5 + str_6
        var_7 = var_6 + str_1
        str_7 = 'Raises:\n'
        var_8 = var_7 + str_7
        str_8 = '    ValueError: if values a or b are out of bound.\n'
        var_9 = var_8 + str_8
        var_10 = var_9 + str_1
        str_9 = 'Examples:H'
        var_11 = var_10 + str_9
        str_10 = '    >>> sum(1, 2)\n'
        var_12 = var_11 + str_10
        str_11 = '    3\n'
        var_13 = var_12 + str_11
        str_12 = '"""\n'
        var_14 = var_13 + str_12
        google_parser_0 = module_0.GoogleParser()
        docstring_0 = google_parser_0.parse(var_14)
    except BaseException:
        pass