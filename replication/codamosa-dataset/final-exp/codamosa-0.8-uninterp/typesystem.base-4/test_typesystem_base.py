# Automatically generated by Pynguin.
import typesystem.base as module_0

def test_case_0():
    int_0 = 100
    position_0 = module_0.Position(int_0, int_0, int_0)
    var_0 = position_0 == position_0

def test_case_1():
    int_0 = 0
    validation_result_0 = module_0.ValidationResult()
    position_0 = module_0.Position(int_0, int_0, int_0)
    str_0 = position_0.__repr__()

def test_case_2():
    int_0 = 5765
    str_0 = 'g\tCJkK'
    message_0 = module_0.Message(text=str_0, key=str_0)
    position_0 = module_0.Position(int_0, int_0, int_0)

def test_case_3():
    str_0 = None
    float_0 = 953.0
    message_0 = module_0.Message(text=str_0, code=str_0, position=float_0)
    list_0 = [message_0, message_0]
    int_0 = 4636
    int_1 = -1733
    position_0 = module_0.Position(int_0, int_0, int_1)
    bool_0 = position_0.__eq__(list_0)

def test_case_4():
    int_0 = 5761
    str_0 = 'g\tCJkK'
    message_0 = module_0.Message(text=str_0, key=str_0)
    bool_0 = message_0.__eq__(message_0)
    position_0 = module_0.Position(int_0, int_0, int_0)

def test_case_5():
    int_0 = 2
    int_1 = 3
    int_2 = 1
    position_0 = module_0.Position(int_0, int_1, int_2)
    str_0 = position_0.__repr__()
    str_1 = None
    position_1 = None
    str_2 = '.xwMHMDtB7l\tl'
    base_error_0 = module_0.BaseError(text=str_2, code=str_1)
    list_0 = base_error_0.messages()
    message_0 = module_0.Message(text=str_1, code=str_1, key=str_1, start_position=position_1)
    list_1 = [message_0, message_0, message_0]
    base_error_1 = module_0.BaseError(messages=list_1)
    list_2 = base_error_1.messages()
    int_3 = base_error_0.__hash__()

def test_case_6():
    int_0 = 4
    int_1 = -3767
    position_0 = module_0.Position(int_1, int_1, int_1)
    bool_0 = position_0.__eq__(int_0)

def test_case_7():
    str_0 = 'Q|D?\x0c.O<tx'
    list_0 = []
    int_0 = -1123
    str_1 = 'integer'
    int_1 = -712
    int_2 = 334
    position_0 = module_0.Position(int_2, int_0, int_0)
    bool_0 = position_0.__eq__(int_2)
    position_1 = module_0.Position(int_1, int_2, int_2)
    str_2 = position_1.__repr__()
    message_0 = module_0.Message(text=str_1, key=int_0, position=position_1)
    int_3 = 371
    position_2 = module_0.Position(int_0, int_3, int_0)
    message_1 = module_0.Message(text=str_0, code=str_0, index=list_0, start_position=position_2)
    int_4 = message_1.__hash__()

def test_case_8():
    int_0 = 8
    validation_result_0 = module_0.ValidationResult(value=int_0)
    var_0 = iter(validation_result_0)
    var_1 = list(var_0)
    str_0 = 'Sycm?d#}E'
    message_0 = module_0.Message(text=str_0, key=str_0)
    str_1 = message_0.__repr__()

def test_case_9():
    int_0 = 8
    validation_result_0 = module_0.ValidationResult(value=int_0)
    var_0 = iter(validation_result_0)
    var_1 = list(var_0)

def test_case_10():
    str_0 = 'C@Kk0\x0b'
    none_type_0 = None
    int_0 = 535
    int_1 = None
    position_0 = module_0.Position(int_0, int_1, int_1)
    message_0 = module_0.Message(text=str_0, code=str_0, index=none_type_0, start_position=position_0, end_position=position_0)
    list_0 = [message_0]
    message_1 = module_0.Message(text=str_0, start_position=list_0)
    list_1 = [message_1, message_0, message_1]
    str_1 = '&SB3]Z!$h}v-tM'
    base_error_0 = module_0.BaseError(text=str_1)
    bool_0 = base_error_0.__eq__(list_1)

def test_case_11():
    int_0 = 2906
    validation_result_0 = module_0.ValidationResult()
    int_1 = None
    str_0 = validation_result_0.__repr__()
    validation_error_0 = None
    str_1 = 'yZ`'
    int_2 = -19
    validation_result_1 = module_0.ValidationResult(error=validation_error_0)
    bool_0 = validation_result_0.__bool__()
    iterator_0 = validation_result_1.__iter__()
    position_0 = module_0.Position(int_0, int_1, int_2)
    str_2 = 'Must be less than {exclusive_maximum}.'
    message_0 = module_0.Message(text=str_2, code=str_2, start_position=position_0)
    bool_1 = message_0.__eq__(validation_result_0)
    str_3 = message_0.__repr__()
    int_3 = -315
    str_4 = validation_result_0.__repr__()
    bool_2 = position_0.__eq__(message_0)
    int_4 = -394
    position_1 = module_0.Position(int_0, int_3, int_4)
    int_5 = message_0.__hash__()
    base_error_0 = module_0.BaseError(text=str_1)
    str_5 = position_0.__repr__()
    iterator_1 = base_error_0.__iter__()
    list_0 = base_error_0.messages(add_prefix=int_4)

def test_case_12():
    str_0 = 'y]W\rBG4'
    int_0 = None
    position_0 = module_0.Position(int_0, int_0, int_0)
    bool_0 = position_0.__eq__(int_0)
    message_0 = module_0.Message(text=str_0, code=str_0, start_position=position_0, end_position=position_0)
    message_1 = module_0.Message(text=str_0, code=str_0, key=str_0, position=position_0)
    list_0 = [message_0, message_1]
    base_error_0 = module_0.BaseError(messages=list_0)
    int_1 = base_error_0.__len__()
    int_2 = 4314
    int_3 = 1975
    position_1 = module_0.Position(int_2, int_2, int_3)
    str_1 = message_0.__repr__()
    str_2 = position_1.__repr__()
    bool_1 = message_1.__eq__(int_2)
    parse_error_0 = module_0.ParseError(text=str_2)
    message_2 = module_0.Message(text=str_2, code=str_2, index=str_2)
    validation_result_0 = module_0.ValidationResult()
    bool_2 = message_1.__eq__(message_1)
    int_4 = base_error_0.__hash__()
    bool_3 = validation_result_0.__bool__()
    str_3 = base_error_0.__str__()

def test_case_13():
    str_0 = 'a&kU/L%L7E;e^\t529?i;'
    int_0 = 4314
    int_1 = 1975
    position_0 = module_0.Position(int_0, int_0, int_1)
    message_0 = module_0.Message(text=str_0, key=str_0, position=position_0)
    str_1 = message_0.__repr__()
    str_2 = position_0.__repr__()
    iterator_0 = None
    dict_0 = {}
    str_3 = position_0.__repr__()
    base_error_0 = module_0.BaseError(text=dict_0)
    bool_0 = base_error_0.__eq__(iterator_0)
    str_4 = 'unique_items'
    int_2 = -12
    int_3 = 1
    position_1 = module_0.Position(int_2, int_3, int_2)
    parse_error_0 = module_0.ParseError(text=str_4)
    message_1 = module_0.Message(text=str_4, code=str_4, index=str_4)
    int_4 = message_1.__hash__()
    validation_result_0 = module_0.ValidationResult()
    iterator_1 = validation_result_0.__iter__()
    message_2 = module_0.Message(text=str_4, key=int_3, start_position=position_0)
    str_5 = 'boolean'
    validation_result_1 = module_0.ValidationResult()
    validation_result_2 = module_0.ValidationResult()
    str_6 = validation_result_2.__repr__()
    base_error_1 = module_0.BaseError(text=str_6, key=str_3, position=position_0)
    str_7 = base_error_1.__str__()
    base_error_2 = module_0.BaseError(text=str_5)
    int_5 = base_error_1.__hash__()

def test_case_14():
    str_0 = 'a'
    str_1 = 'c'
    str_2 = 'k'
    message_0 = module_0.Message(text=str_0, code=str_1, key=str_2)
    message_1 = module_0.Message(text=str_0, code=str_1, key=str_2)
    message_2 = module_0.Message(text=str_0)
    var_0 = message_2 == str_0
    str_3 = 'k1'
    message_3 = module_0.Message(text=str_0, key=str_3)
    str_4 = 'k2'
    message_4 = module_0.Message(text=str_0, key=str_4)
    var_1 = message_3 == message_4
    message_5 = module_0.Message(text=str_0, code=str_1)
    int_0 = 1
    position_0 = module_0.Position(int_0, int_0, int_0)
    message_6 = module_0.Message(text=str_0, code=str_1, position=position_0)
    var_2 = message_5 == message_6
    message_7 = module_0.Message(text=str_0, code=str_1)
    position_1 = module_0.Position(int_0, int_0, int_0)
    position_2 = module_0.Position(int_0, int_0, int_0)
    message_8 = module_0.Message(text=str_0, code=str_1, start_position=position_1, end_position=position_2)
    var_3 = message_7 == message_8

def test_case_15():
    int_0 = 100
    position_0 = module_0.Position(int_0, int_0, int_0)
    var_0 = position_0 == position_0
    int_1 = 0
    position_1 = module_0.Position(int_1, int_1, int_1)
    var_1 = position_0 == position_1

def test_case_16():
    int_0 = 1
    int_1 = 2
    int_2 = 3
    position_0 = module_0.Position(int_0, int_1, int_2)
    position_1 = module_0.Position(int_0, int_1, int_2)
    var_0 = position_0 == position_1
    position_2 = module_0.Position(int_0, int_1, int_2)
    int_3 = 4
    position_3 = module_0.Position(int_0, int_3, int_2)
    var_1 = position_2 != position_3
    position_4 = module_0.Position(int_0, int_1, int_2)
    position_5 = module_0.Position(int_3, int_1, int_2)
    var_2 = position_4 != position_5
    position_6 = module_0.Position(int_0, int_1, int_2)
    position_7 = module_0.Position(int_0, int_1, int_3)
    var_3 = position_6 != position_7