# Automatically generated by Pynguin.
import ansible.playbook.role.include as module_0

def test_case_0():
    try:
        role_include_0 = module_0.RoleInclude()
        var_0 = role_include_0.load(role_include_0, role_include_0, role_include_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'X9\n= 3PUPx1AZ2[y_3'
        float_0 = -3330.063634
        bytes_0 = b'2\xe2oR\xce\xd9\x1f\xe9\x9d\x95'
        role_include_0 = module_0.RoleInclude()
        var_0 = role_include_0.load(str_0, float_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        dict_1 = {dict_0: dict_0, dict_0: dict_0, dict_0: dict_0}
        str_0 = '"collections" is not templatable, but we found: %s, it will not be templated and will be used "as is".'
        str_1 = 'G&g,rp4U*CP'
        bytes_0 = b'\xec\xaa+'
        dict_2 = {}
        str_2 = '9m\n60vP\\#N44j?8'
        role_include_0 = module_0.RoleInclude(bytes_0, dict_2, str_2)
        var_0 = role_include_0.load(dict_1, role_include_0, str_1, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '{action}: validating reboot'
        str_1 = '\n---\nmodule: add_host\nshort_description: Add a host (and alternatively a group) to the ansible-playbook in-memory inventory\ndescription:\n- Use variables to create new hosts and groups in inventory for use in later plays of the same playbook.\n- Takes variables so you can define the new hosts more fully.\n- This module is also supported for Windows targets.\nversion_added: "0.9"\noptions:\n  name:\n    description:\n    - The hostname/ip of the host to add to the inventory, can include a colon and a port number.\n    type: str\n    required: true\n    aliases: [ host, hostname ]\n  groups:\n    description:\n    - The groups to add the hostname to.\n    type: list\n    aliases: [ group, groupname ]\nextends_documentation_fragment:\n  - action_common_attributes\n  - action_common_attributes.conn\n  - action_common_attributes.flow\n  - action_core\nattributes:\n    action:\n        support: full\n    core:\n      details: While parts of this action are implemented in core, other parts are still available as normal plugins and can be partially overridden\n      support: partial\n    become:\n      support: none\n    bypass_host_loop:\n        support: full\n    bypass_task_loop:\n        support: none\n    check_mode:\n        details: While this makes no changes to target systems the \'in memory\' inventory will still be altered\n        support: partial\n    connection:\n        support: none\n    delegation:\n        support: none\n    diff_mode:\n        support: none\n    platform:\n        platforms: all\nnotes:\n- The alias C(host) of the parameter C(name) is only available on Ansible 2.4 and newer.\n- Since Ansible 2.4, the C(inventory_dir) variable is now set to C(None) instead of the \'global inventory source\',\n  because you can now have multiple sources.  An example was added that shows how to partially restore the previous behaviour.\n- Though this module does not change the remote host, we do provide \'changed\' status as it can be useful for those trying to track inventory changes.\n- The hosts added will not bypass the ``--limit`` from the command line, so both of those need to be in agreement to make them available as play targets.\n  They are still available from hostvars and for delegation as a normal part of the inventory.\nseealso:\n- module: ansible.builtin.group_by\nauthor:\n- Ansible Core Team\n- Seth Vidal (@skvidal)\n'
        list_0 = []
        str_2 = None
        bytes_0 = b'\xfb\xc5\x06\x0e\xed'
        role_include_0 = module_0.RoleInclude(str_1)
        tuple_0 = (str_2, bytes_0)
        bool_0 = True
        role_include_1 = module_0.RoleInclude(bool_0, str_0)
        tuple_1 = (role_include_1,)
        role_include_2 = module_0.RoleInclude(tuple_1)
        int_0 = 161
        int_1 = -1052
        role_include_3 = module_0.RoleInclude(int_1, bool_0)
        dict_0 = {role_include_2: role_include_1}
        bool_1 = True
        bool_2 = None
        role_include_4 = module_0.RoleInclude(str_1, bool_1, bool_2)
        role_include_5 = module_0.RoleInclude(role_include_2, int_0, dict_0, int_0)
        var_0 = role_include_5.load(str_1, list_0, tuple_0)
    except BaseException:
        pass