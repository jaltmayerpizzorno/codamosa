# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    pass

def test_case_1():
    tuple_0 = ()
    lazy_list_0 = module_0.LazyList(tuple_0)
    var_0 = lazy_list_0.__iter__()

def test_case_2():
    int_0 = 1
    int_1 = 3
    int_2 = [int_0, int_0, int_1]
    lazy_list_0 = module_0.LazyList(int_2)
    var_0 = list(lazy_list_0)
    var_1 = list(lazy_list_0)

def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0, bool_0]
    range_0 = module_0.Range(*list_0)
    int_0 = range_0.__len__()
    int_1 = -2948
    var_0 = range_0.__getitem__(int_1)
    int_2 = 5
    var_1 = range(int_2)

def test_case_4():
    int_0 = 5
    bool_0 = True
    list_0 = [int_0]
    range_0 = module_0.Range(*list_0)
    int_1 = range_0.__next__()
    float_0 = -2634.47257
    map_list_0 = module_0.MapList(bool_0, float_0)
    iterator_0 = module_0.split_by(map_list_0)

def test_case_5():
    dict_0 = {}
    iterator_0 = module_0.split_by(dict_0)
    set_0 = {iterator_0}
    map_list_0 = module_0.MapList(iterator_0, set_0)

def test_case_6():
    int_0 = -646
    str_0 = 'FU9ZN#N~[H~"y'
    iterator_0 = module_0.take(int_0, str_0)
    iterator_1 = module_0.chunk(int_0, iterator_0)
    dict_0 = {str_0: iterator_1}
    map_list_0 = module_0.MapList(iterator_1, dict_0)
    int_1 = map_list_0.__len__()

def test_case_7():
    var_0 = lambda s, x: x + s
    str_0 = 'a'
    str_1 = 'b'
    str_2 = 'c'
    str_3 = 'd'
    str_4 = [str_0, str_1, str_2, str_3]
    var_1 = module_0.scanl(var_0, str_4)
    var_2 = list(var_1)

def test_case_8():
    int_0 = 5
    int_1 = 1000000
    var_0 = range(int_1)
    iterator_0 = module_0.take(int_0, var_0)
    var_1 = list(iterator_0)
    var_2 = len(var_1)

def test_case_9():
    int_0 = 3
    int_1 = -1
    var_0 = range(int_1)
    iterator_0 = module_0.drop(int_0, var_0)
    iterator_1 = module_0.take(int_0, iterator_0)
    var_1 = list(iterator_1)
    int_2 = 4
    var_2 = range(int_1)
    iterator_2 = module_0.drop(int_2, var_2)
    iterator_3 = module_0.take(int_0, iterator_2)
    var_3 = list(iterator_0)
    int_3 = 2
    var_4 = range(int_1)
    iterator_4 = module_0.drop(int_3, var_4)
    var_5 = list(iterator_4)
    var_6 = range(int_3, int_1)
    var_7 = list(var_6)

def test_case_10():
    int_0 = 5
    var_0 = range(int_0)
    iterator_0 = module_0.drop(int_0, var_0)
    var_1 = list(iterator_0)

def test_case_11():
    int_0 = 3
    int_1 = 10
    var_0 = range(int_1)
    int_2 = 7
    var_1 = range(int_2)
    iterator_0 = module_0.chunk(int_0, var_1)
    var_2 = list(iterator_0)
    int_3 = -3
    var_3 = range(int_3)

def test_case_12():
    int_0 = 3
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.chunk(int_0, var_0)
    var_1 = list(iterator_0)
    int_2 = 7
    var_2 = range(int_2)
    iterator_1 = module_0.chunk(int_0, var_2)
    var_3 = list(iterator_1)
    var_4 = list(iterator_1)
    iterator_2 = module_0.chunk(int_0, var_1)
    int_3 = -1
    var_5 = range(int_3)
    var_6 = list(iterator_2)
    int_4 = -3
    var_7 = range(int_4)
    iterator_3 = module_0.chunk(int_0, var_7)
    var_8 = list(iterator_3)

def test_case_13():
    var_0 = lambda x: x * x
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = 4
    int_4 = 5
    int_5 = [int_0, int_1, int_2, int_3, int_4]
    map_list_0 = module_0.MapList(var_0, int_5)
    int_6 = 0
    var_1 = map_list_0[int_6:int_1]
    var_2 = map_list_0[:int_1]
    var_3 = map_list_0[int_0:]
    var_4 = map_list_0[:]
    var_5 = map_list_0[int_6:int_1:int_1]
    var_6 = map_list_0[::int_1]

def test_case_14():
    int_0 = 9
    var_0 = range(int_0, int_0)
    map_list_0 = None
    sequence_0 = None
    map_list_1 = module_0.MapList(map_list_0, sequence_0)
    bytes_0 = b'\x83\xac\xe7&\xf6.\xfc\xc9\xad\xba\x00\xd8\x98\x906,\xab"\xd8'
    tuple_0 = (map_list_1, bytes_0)
    lazy_list_0 = module_0.LazyList(tuple_0)
    var_1 = lazy_list_0.__iter__()
    var_2 = list(var_1)
    var_3 = range(int_0)
    iterator_0 = module_0.drop_until(var_3, var_3)

def test_case_15():
    int_0 = 0
    var_0 = range(int_0)
    iterator_0 = module_0.drop_until(int_0, var_0)
    var_1 = list(iterator_0)

def test_case_16():
    bool_0 = True
    str_0 = ' '
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
    var_0 = list(iterator_0)
    bool_1 = True
    iterator_1 = module_0.split_by(str_0, bool_1, separator=str_0)
    var_1 = lambda x: x == str_0
    var_2 = list(iterator_0)

def test_case_17():
    str_0 = ' Split by: '
    bool_0 = True
    str_1 = ' '
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_1)
    var_0 = list(iterator_0)
    bool_1 = False
    iterator_1 = module_0.split_by(str_0, bool_1, separator=str_1)
    var_1 = list(iterator_1)
    iterator_2 = module_0.split_by(str_0, bool_0, criterion=iterator_0)
    var_2 = list(str_1)

def test_case_18():
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = [int_0, int_1, int_2]
    lazy_list_0 = module_0.LazyList(int_3)
    var_0 = list(lazy_list_0)
    var_1 = lazy_list_0.__iter__()
    var_2 = slice(int_0, int_2)
    var_3 = lazy_list_0.__getitem__(var_2)
    var_4 = lazy_list_0.__len__()