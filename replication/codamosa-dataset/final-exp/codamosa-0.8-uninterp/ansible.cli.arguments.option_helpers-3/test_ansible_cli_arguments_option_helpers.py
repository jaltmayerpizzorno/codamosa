# Automatically generated by Pynguin.
import ansible.cli.arguments.option_helpers as module_0
import argparse as module_1

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    int_0 = -747
    str_0 = '0:i<3:m'
    tuple_0 = (bool_0, int_0, str_0)
    bytes_0 = None
    unrecognized_argument_0 = module_0.UnrecognizedArgument(tuple_0, bytes_0, bytes_0)
    namespace_0 = module_1.Namespace()
    str_1 = '[~M'
    var_0 = module_0.ensure_value(namespace_0, str_1, namespace_0)

def test_case_2():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_module_options(argument_parser_0)
    str_0 = ''
    str_1 = '-M'
    str_2 = '/path/to/module'
    str_3 = [str_1, str_2]
    var_1 = argument_parser_0.parse_args(str_3)
    str_4 = [str_2, str_0]
    namespace_0 = module_1.Namespace()

def test_case_3():
    namespace_0 = module_1.Namespace()
    str_0 = '[~M'
    var_0 = module_0.ensure_value(namespace_0, str_0, namespace_0)

def test_case_4():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_meta_options(argument_parser_0)
    list_0 = None
    var_1 = module_0.maybe_unfrack_path(list_0)

def test_case_5():
    var_0 = module_0.version()

def test_case_6():
    str_0 = 'ANSIBLE'
    str_1 = 'usage: %(prog)s [options]'
    str_2 = 'description'
    str_3 = 'epilog'
    var_0 = module_0.create_base_parser(str_0, str_1, str_2, str_3)
    var_1 = module_0.add_async_options(var_0)

def test_case_7():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_check_options(argument_parser_0)

def test_case_8():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_connect_options(argument_parser_0)
    var_1 = argument_parser_0.print_help()
    var_2 = []
    var_3 = argument_parser_0.parse_args(var_2)

def test_case_9():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_meta_options(argument_parser_0)

def test_case_10():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_module_options(argument_parser_0)
    str_0 = 'default'
    str_1 = ''
    str_2 = '/path/to/module'
    var_1 = argument_parser_0.parse_args(str_0)
    str_3 = [str_2, str_1]
    namespace_0 = module_1.Namespace()

def test_case_11():
    var_0 = module_0.unfrack_path()

def test_case_12():
    str_0 = 'ansible-console'
    var_0 = module_0.create_base_parser(str_0)
    var_1 = module_0.add_basedir_options(var_0)

def test_case_13():
    str_0 = 'ansible-test'
    argument_parser_0 = module_1.ArgumentParser(str_0)
    var_0 = module_0.add_runas_prompt_options(argument_parser_0)
    str_1 = '-K'
    str_2 = [str_1]
    var_1 = argument_parser_0.parse_args(str_2)
    str_3 = '--become-password-file'
    str_4 = '~/test'
    str_5 = [str_3, str_4]
    var_2 = argument_parser_0.parse_args(str_5)

def test_case_14():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_vault_options(argument_parser_0)
    str_0 = '--vault-id'
    str_1 = 'test-id'
    str_2 = '--ask-vault-password'
    str_3 = '--vault-password-file'
    str_4 = 'test-file'
    str_5 = [str_0, str_1, str_2, str_3, str_4]
    var_1 = argument_parser_0.parse_args(str_5)

def test_case_15():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_vault_options(argument_parser_0)
    str_0 = '--vault-id'
    str_1 = 'tst-id'
    str_2 = '--ask-vault-password'
    str_3 = '--vault-password-file'
    str_4 = 'test-file'
    str_5 = [str_0, str_1, str_2, str_3, str_4]
    var_1 = module_0.add_inventory_options(argument_parser_0)
    var_2 = argument_parser_0.parse_args(str_5)

def test_case_16():
    var_0 = module_0.version()
    bool_0 = True
    var_1 = module_0.version(bool_0)

def test_case_17():
    argument_parser_0 = module_1.ArgumentParser()
    var_0 = module_0.add_tasknoplay_options(argument_parser_0)
    str_0 = '--task-timeout'
    str_1 = '2'
    str_2 = [str_0, str_1]
    var_1 = argument_parser_0.parse_known_args(str_2)

def test_case_18():
    namespace_0 = module_1.Namespace()
    str_0 = 'bar1'
    var_0 = module_0.ensure_value(namespace_0, str_0, str_0)
    var_1 = module_0.ensure_value(namespace_0, str_0, str_0)

def test_case_19():
    namespace_0 = module_1.Namespace()
    str_0 = '[~h8M'
    var_0 = module_0.ensure_value(namespace_0, str_0, namespace_0)
    var_1 = module_0.version()
    float_0 = 2.0
    list_0 = None
    str_1 = 'G'
    argument_parser_0 = module_1.ArgumentParser(namespace_0, str_1)
    dict_0 = {list_0: var_0, var_1: float_0, argument_parser_0: var_0, float_0: var_0}
    int_0 = 530
    set_0 = {int_0}
    bool_0 = None
    sorting_help_formatter_0 = module_0.SortingHelpFormatter(bool_0)
    list_1 = [bool_0]
    str_2 = 'oWGt8&Y6~IA^K+/5v(Dh'
    tuple_0 = (str_2,)
    list_2 = [list_1, float_0]
    bytes_0 = b'\xa0l\x92>\x9bh\x8e\x98\xbft\x13|\xdb\xb7a'
    prepend_list_action_0 = module_0.PrependListAction(set_0, bytes_0)
    str_3 = '-Command'
    dict_1 = {str_0: argument_parser_0, str_1: tuple_0, str_3: list_2}
    argument_parser_1 = module_1.ArgumentParser(prepend_list_action_0, prepend_list_action_0, argument_parser_0, bool_0)
    bool_1 = True
    ansible_version_0 = module_0.AnsibleVersion(str_2, tuple_0, bool_1)
    var_2 = ansible_version_0.__call__(argument_parser_1, tuple_0, argument_parser_0)
    sorting_help_formatter_1 = module_0.SortingHelpFormatter(list_2)
    prepend_list_action_1 = module_0.PrependListAction(dict_1, dict_1, ansible_version_0, dict_1, sorting_help_formatter_1, tuple_0)
    bool_2 = True
    argument_parser_2 = module_1.ArgumentParser(list_0, dict_0, bool_2, argument_parser_1)
    unrecognized_argument_0 = module_0.UnrecognizedArgument(argument_parser_2, list_1)
    prepend_list_action_2 = module_0.PrependListAction(int_0, prepend_list_action_1, float_0, unrecognized_argument_0)