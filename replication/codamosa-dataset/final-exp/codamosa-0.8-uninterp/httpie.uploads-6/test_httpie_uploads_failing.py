# Automatically generated by Pynguin.
import typing as module_0
import httpie.uploads as module_1
import requests_toolbelt.multipart.encoder as module_2
import requests.models as module_3
import httpie.cli.dicts as module_4

def test_case_0():
    try:
        i_o_0 = module_0.IO()
        str_0 = 'x'
        set_0 = {i_o_0}
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(str_0, set_0)
        var_0 = i_o_0.__enter__()
        multipart_encoder_0 = module_2.MultipartEncoder(chunked_upload_stream_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\xa7jN)\xcb\x7f0\xdf\xd2\xb3G(\xe3G\x15\x96'
        str_0 = 'Q9P}'
        var_0 = module_1.prepare_request_body(bytes_0, str_0, str_0)
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = True
        var_1 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        prepared_request_0 = module_3.PreparedRequest()
        bool_0 = True
        var_0 = module_1.compress_request(prepared_request_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        i_o_0 = module_0.IO()
        dict_0 = {}
        multipart_encoder_0 = module_2.MultipartEncoder(dict_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        int_0 = 130
        multipart_encoder_1 = module_2.MultipartEncoder(chunked_multipart_upload_stream_0, int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        multipart_encoder_0 = module_2.MultipartEncoder(dict_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        callable_0 = None
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(chunked_multipart_upload_stream_0, callable_0)
        prepared_request_0 = module_3.PreparedRequest()
        var_0 = module_1.prepare_request_body(multipart_encoder_0, prepared_request_0)
        var_1 = multipart_encoder_0.to_string()
    except BaseException:
        pass

def test_case_5():
    try:
        request_data_dict_0 = module_4.RequestDataDict()
        callable_0 = None
        str_0 = None
        multipart_request_data_dict_0 = module_4.MultipartRequestDataDict()
        tuple_0 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        str_1 = None
        dict_0 = {str_0: str_0, str_1: str_0}
        multipart_encoder_0 = module_2.MultipartEncoder(dict_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_0 = chunked_multipart_upload_stream_0.__iter__()
        var_0 = module_1.prepare_request_body(multipart_encoder_0, callable_0)
        tuple_1 = (multipart_encoder_0, str_1)
        var_1 = module_1.prepare_request_body(str_0, callable_0, tuple_1)
        multipart_request_data_dict_1 = module_4.MultipartRequestDataDict()
        chunked_multipart_upload_stream_1 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        iterable_1 = chunked_multipart_upload_stream_0.__iter__()
        iterable_2 = chunked_multipart_upload_stream_1.__iter__()
        tuple_2 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        tuple_3 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        int_0 = 586
        int_1 = -446
        list_0 = [multipart_request_data_dict_1, callable_0, int_1]
        var_2 = module_1.prepare_request_body(request_data_dict_0, callable_0, int_0, request_data_dict_0, list_0)
        var_3 = module_1.prepare_request_body(multipart_encoder_0, callable_0, int_0, multipart_encoder_0, list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'Jm~*sHhj$ {r:V$'
        str_1 = "J'}"
        iterable_0 = None
        int_0 = 1761
        chunked_upload_stream_0 = module_1.ChunkedUploadStream(iterable_0, int_0)
        request_data_dict_0 = module_4.RequestDataDict()
        callable_0 = None
        var_0 = module_1.prepare_request_body(request_data_dict_0, callable_0, int_0)
        bool_0 = False
        tuple_0 = (chunked_upload_stream_0, int_0, request_data_dict_0, bool_0)
        multipart_encoder_0 = None
        tuple_1 = (multipart_encoder_0, str_1)
        chunked_upload_stream_1 = module_1.ChunkedUploadStream(tuple_0, tuple_1)
        dict_0 = {str_0: str_0, str_1: str_0}
        request_data_dict_1 = module_4.RequestDataDict(**dict_0)
        chunked_multipart_upload_stream_0 = module_1.ChunkedMultipartUploadStream(multipart_encoder_0)
        multipart_encoder_1 = module_2.MultipartEncoder(request_data_dict_1, dict_0)
        chunked_multipart_upload_stream_1 = module_1.ChunkedMultipartUploadStream(multipart_encoder_1)
        multipart_request_data_dict_0 = module_4.MultipartRequestDataDict()
        tuple_2 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0, str_0, str_0)
        iterable_1 = chunked_multipart_upload_stream_1.__iter__()
        tuple_3 = module_1.get_multipart_data_and_content_type(multipart_request_data_dict_0)
        float_0 = -126.30933
        var_1 = module_1.prepare_request_body(request_data_dict_1, callable_0)
        set_0 = {tuple_2, chunked_multipart_upload_stream_1, chunked_multipart_upload_stream_0, float_0}
        multipart_encoder_2 = module_2.MultipartEncoder(set_0)
    except BaseException:
        pass