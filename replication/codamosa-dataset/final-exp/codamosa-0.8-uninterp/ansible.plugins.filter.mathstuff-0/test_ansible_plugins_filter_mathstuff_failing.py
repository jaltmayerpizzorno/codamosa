# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        str_0 = '0d'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {}
        var_0 = module_0.unique(str_0, filter_module_0, filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -1402
        str_0 = 'vBLV!&$BRCqQa\rEeer!'
        float_0 = 0.1
        var_0 = module_0.difference(int_0, str_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        filter_module_0 = module_0.FilterModule()
        list_0 = None
        var_0 = module_0.symmetric_difference(filter_module_0, filter_module_0, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        filter_module_0 = module_0.FilterModule()
        int_0 = None
        list_0 = [int_0]
        var_0 = module_0.symmetric_difference(int_0, filter_module_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        str_0 = ' ^ task is: %s'
        var_0 = module_0.min(filter_module_0, str_0)
        dict_1 = {filter_module_0: dict_0, str_0: filter_module_0}
        int_0 = 100
        str_1 = '\nQ2<BNE2'
        var_1 = module_0.union(dict_1, int_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        complex_0 = None
        bool_0 = None
        dict_0 = {}
        var_0 = module_0.union(complex_0, bool_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        set_0 = None
        bool_0 = False
        var_0 = module_0.min(set_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\x0b",Ha3+AP'
        set_0 = set()
        var_0 = module_0.max(str_0, set_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        var_0 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = None
        str_0 = '0d'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {}
        var_0 = module_0.unique(str_0, str_0, filter_module_0, dict_0)
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        var_1 = module_0.power(bytes_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'aH'
        var_0 = module_0.inversepower(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        complex_0 = None
        float_0 = 1005.6253629115175
        var_0 = module_0.inversepower(complex_0, float_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '""'
        bytes_0 = b'\xf7\xe6\xe0\xd7\xe7\xa6c%L1#>FEm'
        dict_0 = {}
        list_0 = [str_0, bytes_0, bytes_0, dict_0]
        str_1 = '+%F7?C4E\tx~?Q:_e('
        var_0 = module_0.human_readable(list_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '\x0c"T};'
        var_0 = module_0.human_to_bytes(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        filter_module_0 = module_0.FilterModule()
        bool_0 = True
        list_0 = [filter_module_0, bool_0]
        str_0 = 'o*\r>d!amvB\r'
        var_0 = module_0.max(list_0, str_0)
        filter_module_1 = module_0.FilterModule()
        float_0 = 1045.279334
        bool_1 = False
        var_1 = filter_module_1.filters()
        var_2 = module_0.human_to_bytes(float_0, bool_1)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = None
        list_0 = [bytes_0, bytes_0]
        list_1 = []
        var_0 = module_0.rekey_on_member(list_0, list_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\\nAD5e2$\rH"'
        dict_0 = {}
        dict_1 = {str_0: dict_0}
        float_0 = -4572.8942
        var_0 = module_0.rekey_on_member(dict_1, float_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bytes_0 = b'\xd0x\xda\xf1\xdcDA'
        int_0 = 988
        list_0 = [bytes_0]
        list_1 = [bytes_0, bytes_0, bytes_0, list_0]
        float_0 = 1005.2578680298744
        int_1 = 63
        var_0 = module_0.union(int_1, list_1, list_1)
        var_1 = module_0.inversepower(int_0, float_0)
        dict_0 = {}
        var_2 = module_0.difference(list_0, dict_0, list_0)
        str_0 = '5,Z+aQlCyejlA3X}~<'
        list_2 = [float_0, str_0, float_0]
        var_3 = module_0.rekey_on_member(bytes_0, str_0, list_2)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'backup'
        int_0 = 11
        var_0 = module_0.rekey_on_member(str_0, int_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'L\t%\n?f%"%lk:"]'
        set_0 = {str_0, str_0, str_0, str_0}
        bytes_0 = b'*'
        str_1 = 'nAD5e 2 $\rH"'
        dict_0 = {str_1: bytes_0}
        var_0 = module_0.intersect(set_0, bytes_0, dict_0)
        dict_1 = {str_1: var_0}
        float_0 = 308.11058468323284
        var_1 = module_0.rekey_on_member(dict_1, float_0)
    except BaseException:
        pass

def test_case_20():
    try:
        list_0 = None
        int_0 = 2682
        str_0 = '%s, ignored'
        list_1 = [str_0, list_0, int_0, int_0]
        filter_module_0 = None
        var_0 = module_0.union(str_0, list_1, filter_module_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        dict_0 = {bool_0: bool_0}
        var_0 = module_0.logarithm(bool_0, dict_0)
    except BaseException:
        pass

def test_case_22():
    try:
        bytes_0 = b'\x83\xb4\xb0\xe4'
        list_0 = [bytes_0, bytes_0, bytes_0]
        str_0 = 'VGH\\~2WwVEV'
        float_0 = -3625.8
        dict_0 = {str_0: float_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.max(list_0, dict_0)
        filter_module_0 = module_0.FilterModule()
        int_0 = 2067
        float_1 = -3740.4891
        var_1 = module_0.rekey_on_member(int_0, float_1)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\xd0x\xda\xf1\xed\xdcDA'
        list_0 = [bytes_0]
        list_1 = [bytes_0, bytes_0, list_0]
        complex_0 = None
        float_0 = 1004.6
        int_0 = 63
        var_0 = module_0.union(int_0, list_1, list_1)
        var_1 = module_0.inversepower(complex_0, float_0)
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        str_0 = 'qAIfZ'
        var_0 = module_0.rekey_on_member(dict_0, str_0)
        int_0 = 1353
        str_1 = 'Ol;r'
        dict_1 = {str_1: var_0, str_0: int_0}
        list_0 = []
        filter_module_0 = module_0.FilterModule(*list_0)
        var_1 = module_0.rekey_on_member(dict_1, filter_module_0)
    except BaseException:
        pass

def test_case_25():
    try:
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        float_0 = 512.0
        int_0 = 4861
        str_0 = '90"V(Cnh\'fruo_\r*c'
        var_0 = module_0.intersect(float_0, int_0, str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        bool_0 = None
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        dict_0 = {bool_0: bool_0, filter_module_0: bool_0, bool_0: filter_module_0}
        list_0 = [filter_module_0, dict_0]
        list_1 = [list_0, dict_0, list_0, filter_module_0]
        bool_1 = True
        str_0 = 'II{w;AKSoAQ'
        var_1 = module_0.human_readable(bool_1, str_0)
        list_2 = [filter_module_0]
        list_3 = [filter_module_0, list_2, list_2]
        var_2 = module_0.symmetric_difference(bool_0, list_1, list_3)
        filter_module_1 = module_0.FilterModule()
        dict_1 = {filter_module_1: filter_module_1, filter_module_1: filter_module_1, filter_module_1: filter_module_1, filter_module_1: filter_module_1}
        bool_2 = True
        var_3 = module_0.logarithm(dict_1, bool_2)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 18
        bytes_0 = b'#\xb7\x88D\xf5\xb7g'
        list_0 = [int_0, int_0]
        var_0 = module_0.difference(int_0, bytes_0, list_0)
        str_0 = None
        list_1 = [str_0, str_0, str_0, str_0]
        int_1 = -1871
        var_1 = module_0.difference(str_0, list_1, int_1)
    except BaseException:
        pass

def test_case_28():
    try:
        bytes_0 = b'\xd0x\xda\xf1\xdcDA'
        int_0 = 998
        var_0 = module_0.inversepower(int_0)
        list_0 = [bytes_0]
        bool_0 = False
        var_1 = module_0.max(bool_0, list_0)
        dict_0 = {}
        var_2 = module_0.difference(list_0, dict_0, list_0)
        float_0 = -66.06738
        var_3 = module_0.power(float_0, float_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '0d'
        filter_module_0 = module_0.FilterModule()
        dict_0 = {str_0: str_0}
        var_0 = module_0.unique(str_0, str_0, filter_module_0, dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = "A&>'kJ"
        float_0 = 534.0884
        var_0 = module_0.human_readable(float_0, str_0, float_0)
    except BaseException:
        pass

def test_case_31():
    try:
        set_0 = None
        list_0 = [set_0, set_0]
        list_1 = [set_0, set_0, list_0, list_0]
        var_0 = module_0.difference(set_0, list_0, list_1)
        float_0 = None
        bytes_0 = None
        var_1 = module_0.unique(float_0, list_0, bytes_0)
        bytes_1 = b'\xd0x\xda\xf1\xdcDA'
        int_0 = 988
        var_2 = module_0.inversepower(int_0)
        list_2 = []
        int_1 = -2003
        bytes_2 = b'f\x88\x0e'
        dict_0 = {int_1: list_2}
        var_3 = module_0.difference(int_1, bytes_2, dict_0)
        list_3 = [bytes_1, bytes_1, bytes_2, list_2]
        float_1 = 1004.6
        int_2 = 63
        var_4 = module_0.union(int_2, list_3, list_3)
        var_5 = module_0.inversepower(int_0, float_1)
        var_6 = module_0.human_to_bytes(bytes_2)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'foo'
        str_1 = 'a'
        int_0 = 3
        int_1 = {str_1: int_0, str_1: int_0}
        int_2 = {str_0: int_1, str_1: int_1, str_0: int_1}
        str_2 = 'error'
        var_0 = module_0.rekey_on_member(int_2, str_1, str_2)
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = False
        bytes_0 = b'\xf0\xe1\xe7r\x1c\xbb\x0c]\xc4\x17\xbb\xa5%\x03\x95Y\x98\x10'
        int_0 = 180
        tuple_0 = (int_0,)
        var_0 = module_0.unique(bool_0, bytes_0, bool_0, tuple_0)
    except BaseException:
        pass

def test_case_34():
    try:
        int_0 = 64
        int_1 = 4
        var_0 = module_0.logarithm(int_0, int_1)
        int_2 = 122
        int_3 = 10
        var_1 = module_0.logarithm(int_2, int_3)
        int_4 = 5
        var_2 = round(var_1, int_4)
        str_0 = 'test'
        var_3 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 's'
        str_1 = 'service_enable not implemented on target platform'
        int_0 = 1
        int_1 = 10
        int_2 = {str_0: int_0, str_1: int_1}
        bool_0 = False
        int_3 = -1470
        tuple_0 = (bool_0, int_3)
        list_0 = [str_1, tuple_0, str_0, int_2, bool_0, str_1]
        var_0 = module_0.inversepower(int_1)
        str_2 = ''
        var_1 = module_0.unique(list_0, str_2)
        int_4 = 175
        str_3 = 'baz'
        int_5 = {str_0: int_1, str_1: int_4}
        int_6 = {str_1: int_2, str_3: int_5, str_3: int_2}
        str_4 = 'error'
        var_2 = module_0.rekey_on_member(int_6, int_5, str_4)
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = 's'
        str_1 = 'service_enable not implemented on target platform'
        float_0 = 1742.8
        var_0 = module_0.max(float_0, str_1)
        bool_0 = True
        int_0 = -1470
        tuple_0 = (bool_0, int_0)
        list_0 = [str_1, tuple_0, bool_0, str_1]
        float_1 = -10.0
        str_2 = '!TZd:HW'
        var_1 = module_0.min(float_1, str_2)
        str_3 = ''
        var_2 = module_0.unique(list_0, str_3)
        int_1 = {}
        int_2 = 10
        var_3 = module_0.logarithm(int_2)
        var_4 = module_0.rekey_on_member(int_1, str_0)
        filter_module_0 = module_0.FilterModule()
        bool_1 = False
        var_5 = module_0.inversepower(filter_module_0, bool_1)
    except BaseException:
        pass