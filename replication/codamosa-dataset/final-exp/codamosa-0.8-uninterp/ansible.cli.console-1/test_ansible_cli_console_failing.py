# Automatically generated by Pynguin.
import ansible.cli.console as module_0

def test_case_0():
    try:
        float_0 = -1874.11226
        bytes_0 = b'v'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.do_become_user(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'groups'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_shell(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '"on_missing" must be a string and one of "error", "warn" or "skip", not %s'
        bytes_0 = b'KJ\x85\x80\xdd\xd7\xfa'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.list_modules()
        str_1 = ']<\x0bwQY.BQt0\tc~<<'
        var_1 = console_c_l_i_0.emptyline()
        console_c_l_i_1 = module_0.ConsoleCLI(str_1)
        var_2 = console_c_l_i_1.do_shell(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xb41\x02\x9c\x9d\xe1\x97\xe8\x97\xaf\xa2\x10H\xfev\xab'
        int_0 = -1438
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        var_0 = console_c_l_i_0.do_forks(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        console_c_l_i_0 = module_0.ConsoleCLI(bool_0)
        var_0 = console_c_l_i_0.do_check(console_c_l_i_0)
        var_1 = console_c_l_i_0.do_cd(console_c_l_i_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        str_0 = 'lB|\nQhOKBJK'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_list(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'KJ\x85\x80\xdd\xd7\xfa'
        tuple_0 = ()
        set_0 = {tuple_0}
        console_c_l_i_0 = module_0.ConsoleCLI(set_0)
        var_0 = console_c_l_i_0.do_become(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 0.0001
        float_1 = -2884.0
        int_0 = None
        bool_0 = True
        str_0 = 'DEFAULT_LOG_PATH'
        dict_0 = {float_1: float_0, float_0: float_1, bool_0: str_0}
        tuple_0 = (float_1, bool_0, dict_0, str_0)
        console_c_l_i_0 = module_0.ConsoleCLI(tuple_0)
        var_0 = console_c_l_i_0.do_become_user(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        set_0 = None
        set_1 = {set_0, set_0, set_0}
        console_c_l_i_0 = module_0.ConsoleCLI(set_1)
        int_0 = 725
        var_0 = console_c_l_i_0.helpdefault(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'WKY\tC5A9'
        str_1 = ''
        bool_0 = True
        int_0 = 500
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.complete_cd(str_1, str_1, bool_0, int_0)
        float_0 = -1574.504
        console_c_l_i_1 = module_0.ConsoleCLI(float_0)
        set_0 = {console_c_l_i_1, console_c_l_i_1}
        list_0 = [set_0]
        console_c_l_i_2 = module_0.ConsoleCLI(list_0)
        var_1 = console_c_l_i_2.do_become(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '&liJ:/ u@)*!+P,fzl'
        str_1 = 'kW6Fii{W[_<`:}=M\\A'
        list_0 = [str_0, str_1]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.run()
        set_0 = {str_0, console_c_l_i_0, var_0}
        bool_0 = True
        bytes_0 = None
        var_1 = console_c_l_i_0.completedefault(set_0, bool_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'gro\nps'
        console_c_l_i_0 = module_0.ConsoleCLI(str_0)
        var_0 = console_c_l_i_0.do_timeout(str_0)
        bytes_0 = b'\xda\xcd\xd6\xc7\x84\xcbW\x9c?\xe4\x9d'
        var_1 = console_c_l_i_0.do_verbosity(bytes_0)
        var_2 = console_c_l_i_0.module_args(console_c_l_i_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'KJ\x85\x80\xdd\xd7\xfa'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.list_modules()
        var_1 = console_c_l_i_0.do_remote_user(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = None
        int_0 = 1592
        console_c_l_i_0 = module_0.ConsoleCLI(int_0)
        console_c_l_i_1 = module_0.ConsoleCLI(console_c_l_i_0)
        var_0 = console_c_l_i_1.do_cd(float_0)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = -514.683
        set_0 = {float_0, float_0}
        bytes_0 = b'C\xdcZ/'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        bytes_1 = b'\xdf'
        dict_0 = {bytes_1: bytes_1}
        console_c_l_i_1 = module_0.ConsoleCLI(dict_0)
        str_0 = ''
        var_0 = console_c_l_i_1.do_become_method(str_0)
        var_1 = console_c_l_i_1.default(set_0, console_c_l_i_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '&liJ:/ u@)*!+P,fzl'
        str_1 = 'kW6Fii{W[_<`:}=M\\A'
        list_0 = [str_0, str_1]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.emptyline()
        var_1 = console_c_l_i_0.run()
        set_0 = None
        var_2 = console_c_l_i_0.do_timeout(set_0)
        bool_0 = None
        var_3 = console_c_l_i_0.do_shell(bool_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'\xf8\xbf\x89\xf5\xe4\x16_H\x82\xf1\x96\xd6#\xbb\xfa'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        dict_0 = None
        var_0 = console_c_l_i_0.do_verbosity(dict_0)
        var_1 = console_c_l_i_0.list_modules()
        str_0 = ']<\x0bwQY.BQt0\tc~<<'
        bool_0 = False
        list_0 = [str_0, console_c_l_i_0]
        console_c_l_i_1 = module_0.ConsoleCLI(list_0)
        var_2 = console_c_l_i_1.do_shell(bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '"on_missing" must be a string and one of "error", "warn" or "skip", not %s'
        bytes_0 = b'\xfdJ\x85\x80\xdd\x8b\xfa'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.list_modules()
        set_0 = set()
        list_0 = []
        var_1 = console_c_l_i_0.do_forks(list_0)
        var_2 = console_c_l_i_0.do_verbosity(set_0)
        str_1 = ']<\x0bwQY.BQt0\tc~<<'
        console_c_l_i_1 = module_0.ConsoleCLI(str_1)
        dict_0 = {}
        var_3 = console_c_l_i_1.do_remote_user(dict_0)
        var_4 = console_c_l_i_1.do_shell(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 1525.7605
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        str_0 = '7\\58'
        var_0 = console_c_l_i_0.do_cd(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bytes_0 = b'\xda\xcd\xd6\xc7\x84\xcbW\x9c?\xe4i\x9d'
        float_0 = -760.97174
        list_0 = [bytes_0, bytes_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_verbosity(float_0)
        var_1 = console_c_l_i_0.do_shell(list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        set_0 = {bool_0, bool_0, bool_0}
        float_0 = 1290.107
        console_c_l_i_0 = module_0.ConsoleCLI(float_0)
        var_0 = console_c_l_i_0.do_check(set_0)
        float_1 = -1287.84
        int_0 = 2371
        console_c_l_i_1 = module_0.ConsoleCLI(int_0)
        console_c_l_i_2 = module_0.ConsoleCLI(console_c_l_i_1)
        var_1 = console_c_l_i_2.do_timeout(float_1)
        str_0 = 'gro\nps'
        console_c_l_i_3 = module_0.ConsoleCLI(str_0)
        var_2 = console_c_l_i_3.do_shell(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '&liJ:/ u@*!+,fzl'
        str_1 = 'k6Fi{W[_<`:}=\\A'
        list_0 = [str_0, str_1]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_verbosity(str_1)
        var_1 = console_c_l_i_0.run()
        dict_0 = {str_0: str_0}
        str_2 = 'z\x0c>@a'
        var_2 = console_c_l_i_0.default(str_2)
        console_c_l_i_1 = module_0.ConsoleCLI(dict_0)
        var_3 = console_c_l_i_1.do_check(str_0)
        var_4 = console_c_l_i_0.do_list(list_0)
        tuple_0 = ()
        var_5 = console_c_l_i_1.do_shell(tuple_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '&liJ:/ u@)*!+P,fzl'
        list_0 = [str_0, str_0]
        console_c_l_i_0 = module_0.ConsoleCLI(list_0)
        var_0 = console_c_l_i_0.do_verbosity(str_0)
        var_1 = console_c_l_i_0.run()
        dict_0 = {str_0: str_0}
        console_c_l_i_1 = module_0.ConsoleCLI(dict_0)
        console_c_l_i_2 = module_0.ConsoleCLI(str_0)
        set_0 = None
        var_2 = console_c_l_i_2.do_check(set_0)
        bool_0 = True
        var_3 = console_c_l_i_1.do_forks(bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '&liJ:/ u@)*!+P,fzl'
        bytes_0 = b'J)@g'
        console_c_l_i_0 = module_0.ConsoleCLI(bytes_0)
        var_0 = console_c_l_i_0.list_modules()
        console_c_l_i_1 = module_0.ConsoleCLI(bytes_0)
        str_1 = 'k6Fi{W[_<`:}=\\A'
        list_0 = [str_0, str_1]
        console_c_l_i_2 = module_0.ConsoleCLI(list_0)
        var_1 = console_c_l_i_2.do_verbosity(str_1)
        var_2 = console_c_l_i_2.run()
        dict_0 = {str_0: str_0}
        console_c_l_i_3 = module_0.ConsoleCLI(dict_0)
        int_0 = None
        set_0 = set()
        str_2 = '2F'
        str_3 = '&liJ:/ u@)*!+P,fzl'
        var_3 = console_c_l_i_2.completedefault(set_0, str_2, str_3, dict_0)
        var_4 = console_c_l_i_3.do_forks(int_0)
        dict_1 = {int_0: str_1, str_1: str_1}
        var_5 = console_c_l_i_3.do_shell(dict_1)
    except BaseException:
        pass