# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        float_0 = -1972.2123069751121
        str_0 = '=3op>Y|,47;\x0cx'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.rsplit()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_1 = ansible_vault_encrypted_unicode_1.__hash__()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_2 = ansible_vault_encrypted_unicode_2.is_encrypted()
        var_3 = ansible_vault_encrypted_unicode_1.__int__()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'xK{;hhU\n0-\\L\nN'
        int_0 = -177
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(str_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_1 = ansible_vault_encrypted_unicode_0.__gt__(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = None
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.isspace()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_2 = ansible_vault_encrypted_unicode_1.__contains__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0bkj|+4LlR\nM`I'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_0 = ansible_vault_encrypted_unicode_0.__radd__(ansible_sequence_0)
        list_0 = None
        list_1 = []
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_1.replace(list_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2694
        str_0 = '\x0b^?% $.q.*j$Ffp'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.zfill(int_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [ansible_sequence_0, ansible_sequence_0, ansible_sequence_0, ansible_sequence_0]
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_1 = ansible_vault_encrypted_unicode_2.__radd__(ansible_unicode_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        bool_0 = True
        var_2 = ansible_vault_encrypted_unicode_3.__contains__(bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0]
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(list_1)
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        str_0 = '0GelPY|.^P\r^O'
        str_1 = '\ti?e'
        int_0 = -177
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_2 = ansible_vault_encrypted_unicode_1.rpartition(str_1)
        var_3 = ansible_vault_encrypted_unicode_0.__ge__(str_0)
        list_2 = []
        tuple_0 = (list_2,)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_4 = ansible_vault_encrypted_unicode_2.strip()
        str_2 = '3NGtR'
        var_5 = ansible_vault_encrypted_unicode_1.__ne__(str_2)
        str_3 = 'K)Kp3YI<6hGlZz'
        var_6 = ansible_vault_encrypted_unicode_0.__mul__(str_3)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mod__(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '>-=zX['
        str_1 = 'Ew1AnQ|0KNJ\x0bJ'
        list_0 = [str_0, str_0]
        bytes_0 = b"\xc6u\xc7\xfb'\x1e\xab\x11\xbc\xf0N\x0c\xd5\xa7u\xef"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdecimal()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_1 = ansible_vault_encrypted_unicode_1.__rmod__(str_1)
        list_1 = [str_0]
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_base_y_a_m_l_object_0 = None
        var_2 = ansible_vault_encrypted_unicode_2.expandtabs(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_8():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_0 = 'k`y/{iEZEnBJE7}W$)M'
        str_1 = 'UV.\x0c\x0c\x0cUH'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.count(ansible_mapping_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [ansible_unicode_0, ansible_unicode_0]
        float_0 = -69.5587
        list_1 = []
        ansible_mapping_0 = module_0.AnsibleMapping(*list_1)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.find(list_0, float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        str_0 = '*y($;^k}h H\x0b<>+v'
        str_1 = 'xK{;hhU\n0-\\L\nN'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(str_1)
        str_2 = 'pbrun'
        var_1 = ansible_vault_encrypted_unicode_0.__ne__(str_2)
        tuple_0 = ()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_2 = ansible_vault_encrypted_unicode_0.swapcase()
        var_3 = ansible_vault_encrypted_unicode_1.__eq__(tuple_0)
        var_4 = ansible_vault_encrypted_unicode_1.isdecimal()
        float_0 = None
        var_5 = ansible_vault_encrypted_unicode_0.__add__(float_0)
        dict_0 = {str_1: list_0}
        var_6 = ansible_vault_encrypted_unicode_1.partition(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        list_0 = None
        list_1 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.replace(list_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -1012
        float_0 = 1452.51
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        float_1 = None
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_1.replace(int_0, ansible_vault_encrypted_unicode_0, float_1)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = -1423.31477
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [ansible_unicode_0, float_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.isdecimal()
        int_0 = 301
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_1 = ansible_vault_encrypted_unicode_2.strip()
        var_2 = ansible_vault_encrypted_unicode_2.rfind(float_0, ansible_unicode_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'fbW5Oq4G"\x0cp%=gb'
        float_0 = -2477.8
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.rindex(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.swapcase()
        var_1 = ansible_vault_encrypted_unicode_0.split()
        list_0 = []
        var_2 = ansible_vault_encrypted_unicode_0.rjust(list_0, *list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        int_0 = -2488
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.startswith(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = -2055.2379
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(float_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '^'
        bool_0 = False
        ansible_unicode_0 = module_0.AnsibleUnicode()
        str_1 = 'L'
        dict_0 = {str_0: ansible_unicode_0, str_1: str_1}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.splitlines()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.center(bool_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_2 = ansible_vault_encrypted_unicode_1.count(ansible_base_y_a_m_l_object_0)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 1833
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.index(int_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -1012
        float_0 = 1452.51
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        set_0 = {int_0, int_0, int_0, int_0}
        str_0 = 'ep\x0cSURt'
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_1.join(str_0)
        list_0 = [int_0, set_0, set_0, int_0]
        ansible_sequence_1 = module_0.AnsibleSequence(*list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        list_0 = []
        str_0 = '/etc/skel'
        tuple_0 = None
        dict_0 = {str_0: str_0, tuple_0: tuple_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.ljust(ansible_mapping_0, *list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        bytes_0 = b'\xdf\xcac!'
        str_0 = 'None'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(bytes_0)
        ansible_sequence_0 = module_0.AnsibleSequence()
        float_0 = 37.0
        list_0 = [float_0, float_0]
        bool_0 = True
        tuple_0 = (bool_0,)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_1.__contains__(ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_2 = ansible_vault_encrypted_unicode_2.__float__()
    except BaseException:
        pass

def test_case_24():
    try:
        dict_0 = {}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_25():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        bytes_0 = b'\xaa%[f\x81H\xd5\xd675\xae\xa6\x96'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(ansible_mapping_0)
    except BaseException:
        pass

def test_case_26():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        int_0 = -180
        var_0 = ansible_vault_encrypted_unicode_0.__le__(int_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bytes_0 = b'\x96\xe8\xe0\xe7K\x01\xe68Y\xe2\x97\xec'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '4%{'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalnum()
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        list_0 = [ansible_vault_encrypted_unicode_1]
        ansible_unicode_0 = module_0.AnsibleUnicode(*list_0)
        bool_1 = False
        int_0 = 2080
        set_0 = set()
        str_1 = 'NDEkje>kq+['
        str_2 = 'Sc6]oj\\H!I\teUPtX?ML`'
        str_3 = ':G<ce&m#XO9N^+\x0cV?f5W'
        dict_0 = {str_1: int_0, str_2: bool_1, str_3: str_3}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        bool_2 = True
        bytes_0 = b'0\xe1\xb0|\xd6Z\xab\xc3\xa71^'
        tuple_0 = (bool_2, bytes_0, bytes_0)
        tuple_1 = (int_0, set_0, ansible_mapping_0, tuple_0)
        int_1 = 1975
        tuple_2 = (tuple_1, int_1, bool_2)
        var_1 = ansible_vault_encrypted_unicode_1.endswith(bool_1, int_0, tuple_2)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '*y($;^k}h H\x0b<>+v'
        set_0 = set()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.join(set_0)
        str_1 = 'xK{;hhU;S\n0-\\L\nN'
        int_0 = -177
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_1 = ansible_vault_encrypted_unicode_1.rpartition(str_1)
        var_2 = ansible_vault_encrypted_unicode_1.upper()
        str_2 = '3NGt:'
        var_3 = ansible_vault_encrypted_unicode_1.__ne__(str_2)
        tuple_0 = ()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_4 = ansible_vault_encrypted_unicode_1.swapcase()
        var_5 = ansible_vault_encrypted_unicode_2.isdecimal()
        float_0 = None
        var_6 = ansible_vault_encrypted_unicode_1.__add__(float_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_7 = ansible_vault_encrypted_unicode_0.count(ansible_vault_encrypted_unicode_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_30():
    try:
        list_0 = []
        str_0 = '*y($;^k}h H\x0b<>+v'
        bytes_0 = b'\xaf'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.expandtabs()
        list_1 = [list_0, list_0, list_0]
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_1.__eq__(list_1)
        set_0 = set()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_2.join(set_0)
        str_1 = '\ti?e'
        int_0 = -177
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_3 = ansible_vault_encrypted_unicode_3.rpartition(str_1)
        list_2 = []
        tuple_0 = (list_2,)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_4 = ansible_vault_encrypted_unicode_4.strip()
        str_2 = '3NGt:'
        var_5 = ansible_vault_encrypted_unicode_3.__ne__(str_2)
        tuple_1 = ()
        ansible_vault_encrypted_unicode_5 = module_0.AnsibleVaultEncryptedUnicode(tuple_1)
        var_6 = ansible_vault_encrypted_unicode_3.swapcase()
        var_7 = ansible_vault_encrypted_unicode_5.isdecimal()
        float_0 = None
        var_8 = ansible_vault_encrypted_unicode_3.__add__(float_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_9 = ansible_vault_encrypted_unicode_2.rfind(ansible_vault_encrypted_unicode_4, ansible_mapping_0)
    except BaseException:
        pass

def test_case_31():
    try:
        list_0 = []
        str_0 = '*y($;^k}h H\x0b<>+v'
        bytes_0 = b'\xaf'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.expandtabs()
        list_1 = [list_0, list_0, list_0]
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_1.__eq__(list_1)
        set_0 = set()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_2.join(set_0)
        str_1 = '0GelPY|.^P\r^O'
        dict_0 = {str_0: list_0, str_0: list_0, str_1: list_0, str_0: str_1}
        str_2 = '\ti?e'
        int_0 = -177
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_3 = ansible_vault_encrypted_unicode_3.rpartition(str_2)
        list_2 = []
        tuple_0 = (list_2,)
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_4 = ansible_vault_encrypted_unicode_4.strip()
        str_3 = '3NGt:'
        var_5 = ansible_vault_encrypted_unicode_3.__ne__(str_3)
        tuple_1 = ()
        ansible_vault_encrypted_unicode_5 = module_0.AnsibleVaultEncryptedUnicode(tuple_1)
        var_6 = ansible_vault_encrypted_unicode_3.swapcase()
        float_0 = 0.0
        ansible_vault_encrypted_unicode_6 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_7 = ansible_vault_encrypted_unicode_4.find(ansible_vault_encrypted_unicode_6)
        var_8 = ansible_vault_encrypted_unicode_5.isdecimal()
        float_1 = None
        var_9 = ansible_vault_encrypted_unicode_3.__add__(float_1)
        list_3 = [str_3]
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        var_10 = ansible_vault_encrypted_unicode_3.rfind(list_3, ansible_mapping_0)
    except BaseException:
        pass

def test_case_32():
    try:
        int_0 = 2728
        str_0 = 'oY-b6=fzeKu'
        ansible_mapping_0 = module_0.AnsibleMapping()
        tuple_0 = None
        set_0 = {tuple_0, int_0, tuple_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(str_0)
    except BaseException:
        pass