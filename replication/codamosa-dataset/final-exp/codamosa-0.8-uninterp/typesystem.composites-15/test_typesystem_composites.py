# Automatically generated by Pynguin.
import typesystem.composites as module_0
import typesystem.fields as module_1

def test_case_0():
    pass

def test_case_1():
    list_0 = []
    one_of_0 = module_0.OneOf(list_0)

def test_case_2():
    any_0 = module_1.Any()
    any_1 = [any_0]
    one_of_0 = module_0.OneOf(any_1)
    str_0 = 'toto'
    any_2 = one_of_0.validate(str_0)

def test_case_3():
    field_0 = module_1.Field()
    list_0 = [field_0, field_0, field_0, field_0]
    all_of_0 = module_0.AllOf(list_0)

def test_case_4():
    field_0 = None
    not_0 = module_0.Not(field_0)

def test_case_5():
    str_0 = ' [sparse]'
    field_0 = module_1.Field(title=str_0, default=str_0)
    any_0 = field_0.serialize(str_0)
    if_then_else_0 = module_0.IfThenElse(field_0, field_0)

def test_case_6():
    any_0 = module_1.Any()
    if_then_else_0 = module_0.IfThenElse(any_0, any_0, any_0)
    int_0 = 123
    any_1 = if_then_else_0.validate(int_0)

def test_case_7():
    field_0 = module_1.Field()
    not_0 = module_0.Not(field_0)
    if_then_else_0 = module_0.IfThenElse(field_0)