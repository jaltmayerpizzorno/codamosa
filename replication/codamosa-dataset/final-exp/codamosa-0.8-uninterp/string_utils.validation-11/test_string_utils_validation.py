# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    str_0 = '\nG,t?_0q\\X: `F\nInt4'
    bool_0 = module_0.is_pangram(str_0)

def test_case_1():
    str_0 = 'jQJ\x0c-u(u?3qxClSE'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)

def test_case_2():
    str_0 = '978-0312498580'
    bool_0 = module_0.is_isbn(str_0)

def test_case_3():
    str_0 = 'vbsdhj;,k$Hrj'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_0 = i_s_b_n_checker_0.is_isbn_13()

def test_case_4():
    str_0 = '\nG,t?_0q\\X: `F\nInt4'
    bool_0 = module_0.is_isbn(str_0)
    bool_1 = module_0.is_pangram(str_0)

def test_case_5():
    str_0 = 'db[+)g/l}{'
    bool_0 = module_0.is_isbn_10(str_0)

def test_case_6():
    str_0 = '.dkiFvog\x0b}%'
    bool_0 = module_0.is_integer(str_0)
    float_0 = 346.633
    bool_1 = module_0.is_email(float_0)

def test_case_7():
    set_0 = set()
    bool_0 = module_0.is_json(set_0)
    str_0 = 'is_ip_v4'
    bool_1 = module_0.is_integer(str_0)
    str_1 = '.D'
    bool_2 = module_0.is_decimal(str_1)

def test_case_8():
    str_0 = '978-0312498580'
    bool_0 = module_0.is_url(str_0)

def test_case_9():
    str_0 = '{"name": "Peter"}'
    bool_0 = module_0.is_json(str_0)
    bool_1 = module_0.is_url(str_0)
    bool_2 = module_0.is_url(bool_0)

def test_case_10():
    str_0 = '"Abc\\@def"@example.com'
    bool_0 = module_0.is_email(str_0)

def test_case_11():
    float_0 = 346.633
    bool_0 = module_0.is_email(float_0)

def test_case_12():
    str_0 = 'pz2\t2(Di|F{A[f}.'
    bool_0 = module_0.is_email(str_0)

def test_case_13():
    str_0 = 'J[\tyP:Hk~BU4x'
    bool_0 = module_0.is_credit_card(str_0)

def test_case_14():
    float_0 = 6196.000401
    bool_0 = module_0.is_credit_card(float_0)

def test_case_15():
    str_0 = '4111111111111111'
    bool_0 = module_0.is_credit_card(str_0)
    str_1 = '12345678901234567'
    bool_1 = module_0.is_credit_card(str_1)
    str_2 = 'VISA'
    bool_2 = module_0.is_credit_card(str_0, str_2)
    str_3 = 'MASTERCARD'
    bool_3 = module_0.is_credit_card(str_0, str_3)
    str_4 = ''
    bool_4 = module_0.is_credit_card(str_4, str_2)
    var_0 = None
    bool_5 = module_0.is_credit_card(var_0, str_2)

def test_case_16():
    str_0 = '_Zs5qg4gR,sL-[B'
    bool_0 = module_0.is_slug(str_0)
    str_1 = '^3[47]\\d{13}$'
    bool_1 = module_0.is_camel_case(bool_0)
    bool_2 = module_0.is_number(str_1)

def test_case_17():
    dict_0 = {}
    bool_0 = module_0.is_snake_case(dict_0)

def test_case_18():
    str_0 = 'R'
    bool_0 = module_0.is_snake_case(str_0, str_0)
    str_1 = '\\'
    bool_1 = module_0.is_snake_case(str_1)
    bool_2 = module_0.is_uuid(str_1)
    bool_3 = module_0.is_camel_case(str_0)
    bool_4 = module_0.is_url(str_0)
    int_0 = module_0.words_count(str_1)
    str_2 = '7"r<e_!T!U'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    bool_5 = i_s_b_n_checker_0.is_isbn_10()
    bool_6 = module_0.is_uuid(str_0)

def test_case_19():
    str_0 = '978-0312498580'
    bool_0 = module_0.is_json(str_0)

def test_case_20():
    int_0 = 108
    bool_0 = module_0.is_camel_case(int_0)
    bool_1 = module_0.is_string(int_0)
    bool_2 = module_0.is_palindrome(int_0, bool_1)
    str_0 = 'o\x0bw|q>FI'
    bool_3 = module_0.is_decimal(str_0)
    bool_4 = module_0.is_uuid(bool_2)

def test_case_21():
    dict_0 = {}
    bool_0 = module_0.is_ip(dict_0)

def test_case_22():
    str_0 = '"'
    str_1 = '|6"_8T/ClSkRA?+IZJJ'
    list_0 = []
    bool_0 = module_0.is_json(list_0)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    bool_1 = module_0.is_palindrome(str_0)

def test_case_23():
    int_0 = None
    bool_0 = module_0.is_isogram(int_0)
    str_0 = 'Li@@vnD:];\rA\rK'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
    bool_1 = i_s_b_n_checker_0.is_isbn_13()
    bool_2 = i_s_b_n_checker_0.is_isbn_10()
    bool_3 = i_s_b_n_checker_0.is_isbn_13()
    bool_4 = i_s_b_n_checker_0.is_isbn_13()
    bool_5 = i_s_b_n_checker_0.is_isbn_13()
    bool_6 = module_0.is_palindrome(str_0)
    dict_0 = {bool_4: bool_1, i_s_b_n_checker_0: bool_2}
    bool_7 = i_s_b_n_checker_0.is_isbn_13()
    bool_8 = module_0.is_isogram(dict_0)

def test_case_24():
    str_0 = 'pz2\t2(Di|F{A[f}.'
    str_1 = ''
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
    tuple_0 = (str_0, i_s_b_n_checker_0)
    bool_0 = module_0.is_pangram(tuple_0)

def test_case_25():
    str_0 = '+'
    bool_0 = module_0.is_isogram(str_0)

def test_case_26():
    str_0 = '#sdz\\\tspx'
    bool_0 = False
    bool_1 = module_0.is_slug(str_0)
    bool_2 = module_0.is_isbn(str_0, bool_0)

def test_case_27():
    float_0 = None
    bool_0 = module_0.is_slug(float_0)

def test_case_28():
    str_0 = '^([a-z\\d]{0,4}:){7}[a-z\\d]{0,4}$'
    bool_0 = module_0.contains_html(str_0)

def test_case_29():
    str_0 = 'random_string'
    bool_0 = module_0.contains_html(str_0)
    str_1 = '*&gtklIMBeH8dO@g'
    str_2 = "\x0b23s'cVr,<"
    bool_1 = module_0.is_isbn_10(str_2)
    bool_2 = module_0.is_isbn_13(str_1)

def test_case_30():
    bool_0 = True
    bool_1 = module_0.is_json(bool_0)

def test_case_31():
    str_0 = '127.0.0.1'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = '127.0.0.'
    bool_1 = module_0.is_ip_v4(str_1)

def test_case_32():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip(str_0)
    str_1 = '2001:db8:85a3:0000:0000:8a2e:370:7334'
    bool_1 = module_0.is_ip(str_1)
    str_2 = '1.2.3'
    bool_2 = module_0.is_ip(str_2)

def test_case_33():
    str_0 = ''
    bool_0 = module_0.is_isogram(str_0)

def test_case_34():
    dict_0 = {}
    bool_0 = module_0.is_ip_v4(dict_0)
    str_0 = 'X'
    bool_1 = module_0.is_ip(bool_0)
    bool_2 = module_0.is_snake_case(bool_0, str_0)
    bool_3 = module_0.is_url(dict_0)
    str_1 = '=ZygK\x0c7jFbuW'
    str_2 = 'K95Y\t}'
    bool_4 = module_0.is_isbn(str_2, bool_0)
    int_0 = module_0.words_count(str_1)
    bool_5 = module_0.is_isbn_13(str_1)
    int_1 = module_0.words_count(str_1)
    str_3 = 'rAWzPcyXp~'
    bool_6 = module_0.is_ip(str_3)
    bool_7 = module_0.is_camel_case(dict_0)
    bool_8 = module_0.is_pangram(str_3)
    bool_9 = module_0.is_pangram(bool_8)
    bool_10 = module_0.is_email(bool_8)
    bool_11 = module_0.is_json(bool_8)
    bool_12 = module_0.is_snake_case(str_3)
    bool_13 = True
    bool_14 = module_0.is_palindrome(str_3, bool_10, bool_13)
    bool_15 = module_0.is_credit_card(int_0)
    str_4 = 'qCP'
    bool_16 = module_0.is_ip_v6(bool_6)
    bool_17 = module_0.is_full_string(str_3)
    bool_18 = module_0.is_snake_case(bool_12)
    str_5 = 'z'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_5)
    bool_19 = module_0.is_ip(bool_9)
    bool_20 = module_0.is_pangram(bool_17)
    bool_21 = i_s_b_n_checker_0.is_isbn_13()
    bool_22 = module_0.is_integer(str_4)
    bool_23 = module_0.is_email(bool_5)
    bool_24 = i_s_b_n_checker_0.is_isbn_10()
    bool_25 = module_0.is_ip(bool_5)
    bool_26 = module_0.is_full_string(int_0)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_2)
    bool_27 = True
    bool_28 = module_0.is_palindrome(bool_6, bool_27)

def test_case_35():
    str_0 = 'my.email@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = '.@'
    bool_1 = module_0.is_email(str_1)
    str_2 = 'my.email@'
    bool_2 = module_0.is_email(str_2)
    str_3 = 'my.email'
    bool_3 = module_0.is_email(str_3)
    bool_4 = module_0.is_slug(bool_1, str_2)
    bool_5 = module_0.is_json(str_3)
    str_4 = '{"name": "peter", age: "20"}'
    bool_6 = module_0.is_json(str_4)
    bool_7 = module_0.is_json(bool_2)

def test_case_36():
    str_0 = 'y_+mQB\t'
    list_0 = [str_0]
    bool_0 = module_0.is_url(str_0, list_0)
    bool_1 = module_0.is_credit_card(str_0)
    bool_2 = module_0.is_json(str_0)
    bool_3 = module_0.is_full_string(str_0)
    bool_4 = module_0.is_integer(str_0)
    bool_5 = module_0.is_email(bool_3)

def test_case_37():
    str_0 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", !" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
    bool_0 = module_0.is_credit_card(str_0)
    str_1 = 'b'
    bool_1 = module_0.is_decimal(str_1)
    int_0 = -734
    bool_2 = module_0.is_ip(int_0)
    float_0 = -1002.0
    str_2 = '4-*bm'
    bool_3 = module_0.is_isbn_10(str_2)
    bool_4 = module_0.is_isbn_13(str_1)
    str_3 = '<'
    bool_5 = module_0.is_snake_case(str_3)
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_3)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_3)
    bool_6 = i_s_b_n_checker_0.is_isbn_10()
    str_4 = '\n    Check if a string is a valid json.\n\n    *Examples:*\n\n    >>> is_json(\'{"name": "Peter"}\') # returns true\n    >>> is_json(\'[1, 2, 3]\') # returns true\n    >>> is_json(\'{nope}\') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if json, false otherwise\n    '
    bool_7 = module_0.is_email(str_1)
    bool_8 = module_0.is_uuid(float_0)
    bool_9 = module_0.is_integer(str_1)
    bool_10 = i_s_b_n_checker_1.is_isbn_13()
    bool_11 = module_0.is_isbn_13(str_4)
    bool_12 = i_s_b_n_checker_1.is_isbn_13()
    str_5 = 'P9YGc:j+'
    bool_13 = i_s_b_n_checker_1.is_isbn_10()
    i_s_b_n_checker_2 = module_0.__ISBNChecker(str_5)
    bool_14 = i_s_b_n_checker_2.is_isbn_13()
    bool_15 = module_0.is_isbn(str_4)
    str_6 = '9V`4tU,'
    bool_16 = module_0.is_decimal(str_6)
    bool_17 = i_s_b_n_checker_0.is_isbn_10()
    bool_18 = module_0.is_palindrome(float_0)
    bool_19 = module_0.is_camel_case(bool_11)
    bool_20 = i_s_b_n_checker_2.is_isbn_10()
    bool_21 = i_s_b_n_checker_1.is_isbn_13()
    bool_22 = module_0.is_snake_case(float_0)
    bool_23 = True
    bool_24 = module_0.is_palindrome(str_2, bool_23)

def test_case_38():
    str_0 = '\n    Reformat a string by applying the following basic grammar and formatting rules:\n\n    - String cannot start or end with spaces\n    - The first letter in the string and the ones after a dot, an exclamation or a question mark must be uppercase\n    - String cannot have multiple sequential spaces, empty lines or punctuation (except for "?", "!" and ".")\n    - Arithmetic operators (+, -, /, \\*, =) must have one, and only one space before and after themselves\n    - One, and only one space should follow a dot, a comma, an exclamation or a question mark\n    - Text inside double quotes cannot start or end with spaces, but one, and only one space must come first and     after quotes (foo" bar"baz -> foo "bar" baz)\n    - Text inside round brackets cannot start or end with spaces, but one, and only one space must come first and     after brackets ("foo(bar )baz" -> "foo (bar) baz")\n    - Percentage sign ("%") cannot be preceded by a space if there is a number before ("100 %" -> "100%")\n    - Saxon genitive is correct ("Dave\' s dog" -> "Dave\'s dog")\n\n    *Examples:*\n\n    >>> prettify(\' unprettified string ,, like this one,will be"prettified" .it\\\' s awesome! \')\n    >>> # -> \'Unprettified string, like this one, will be "prettified". It\'s awesome!\'\n\n    :param input_string: String to manipulate\n    :return: Prettified string.\n    '
    bool_0 = module_0.is_credit_card(str_0)
    bool_1 = module_0.is_decimal(str_0)
    int_0 = -734
    bool_2 = module_0.is_ip(int_0)
    float_0 = -1002.0
    str_1 = '4-*bm'
    bool_3 = module_0.is_isbn_10(str_1)
    bool_4 = module_0.is_isbn_13(str_0)
    str_2 = '<'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_2)
    bool_5 = i_s_b_n_checker_0.is_isbn_10()
    bool_6 = module_0.is_email(str_0)
    bool_7 = module_0.is_uuid(float_0)
    bool_8 = module_0.is_integer(str_1)
    bool_9 = i_s_b_n_checker_1.is_isbn_13()
    bool_10 = module_0.is_isbn_13(str_0)
    bool_11 = i_s_b_n_checker_1.is_isbn_13()
    str_3 = 'P9YGc:j+'
    bool_12 = i_s_b_n_checker_1.is_isbn_10()
    i_s_b_n_checker_2 = module_0.__ISBNChecker(str_3)
    bool_13 = i_s_b_n_checker_2.is_isbn_13()
    bool_14 = module_0.is_ip_v6(bool_9)
    bool_15 = module_0.is_number(str_0)
    bool_16 = module_0.is_isbn_13(str_0, bool_5)
    i_s_b_n_checker_3 = module_0.__ISBNChecker(str_1, bool_16)
    bool_17 = i_s_b_n_checker_2.is_isbn_10()
    bool_18 = module_0.is_integer(str_1)

def test_case_39():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_url(str_0)
    str_1 = 'https://mysite.com'
    bool_1 = module_0.is_url(str_0)
    str_2 = 'vk3~Z9;h]q9'
    str_3 = 'h\\}T[LNznO^@<:['
    list_0 = [str_2, str_3, str_3]
    bool_2 = module_0.is_url(str_1, list_0)
    bool_3 = True
    bool_4 = module_0.is_uuid(bool_0, bool_3)
    bool_5 = module_0.is_url(str_3)

def test_case_40():
    int_0 = -1948
    set_0 = {int_0}
    bool_0 = module_0.is_slug(set_0)
    str_0 = '\n\t7:['
    bool_1 = module_0.is_isbn_10(str_0)
    str_1 = '3'
    bool_2 = module_0.is_slug(str_1)
    bool_3 = module_0.is_decimal(str_1)
    bool_4 = module_0.is_isogram(str_1)
    bool_5 = module_0.is_credit_card(bool_2)

def test_case_41():
    str_0 = '4111111111111111'
    bool_0 = module_0.is_credit_card(str_0)
    str_1 = '12345678901234567'
    bool_1 = module_0.is_credit_card(str_1)
    str_2 = 'VISA'
    bool_2 = module_0.is_credit_card(str_0, str_2)
    str_3 = 'MASTERCARD'
    bool_3 = module_0.is_credit_card(str_0, str_3)
    str_4 = ',<q\\5q>f[8'
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_4)
    bool_4 = i_s_b_n_checker_0.is_isbn_13()
    bool_5 = module_0.is_integer(str_0)
    bool_6 = i_s_b_n_checker_0.is_isbn_13()
    bool_7 = i_s_b_n_checker_0.is_isbn_13()
    bool_8 = i_s_b_n_checker_0.is_isbn_10()
    bool_9 = module_0.is_ip(bool_7)
    bool_10 = module_0.is_full_string(bool_9)
    str_5 = 'F0>\nXD\\>nC8P\x0c'
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_5)
    bool_11 = module_0.is_number(str_5)
    bool_12 = module_0.is_palindrome(str_5)
    bool_13 = module_0.contains_html(str_5)

def test_case_42():
    str_0 = 'test@test.com.com.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = 'test.com'
    bool_1 = module_0.is_email(str_1)

def test_case_43():
    str_0 = 'my.email@the-provider.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = '"my.dude\\ "email\\"@the-provider.com'
    bool_1 = module_0.is_email(str_1)
    str_2 = "'"
    i_s_b_n_checker_0 = module_0.__ISBNChecker(str_2)
    bool_2 = i_s_b_n_checker_0.is_isbn_10()
    str_3 = '0751563516'
    i_s_b_n_checker_1 = module_0.__ISBNChecker(str_3)
    bool_3 = i_s_b_n_checker_1.is_isbn_10()

def test_case_44():
    str_0 = '_@gmail.com'
    bool_0 = module_0.is_email(str_0)
    str_1 = 'my-email@gmail.com'
    bool_1 = module_0.is_email(str_1)
    str_2 = 'my.email..@gmail.com'
    bool_2 = module_0.is_email(str_2)
    str_3 = 'my..email@gmail.com'
    bool_3 = module_0.is_email(str_3)
    str_4 = 'my.email_@gmail.com'
    bool_4 = module_0.is_email(str_4)
    str_5 = 'my.email@g.mail@gmail.com'
    bool_5 = module_0.is_email(str_5)
    str_6 = 'my.email@gmail.com_'
    bool_6 = module_0.is_email(str_6)
    str_7 = 'myemail@gmail.com,'
    bool_7 = module_0.is_email(str_7)
    str_8 = 'myemail@gmailcom'
    bool_8 = module_0.is_email(str_8)

def test_case_45():
    str_0 = '{test:test"test":test}'
    bool_0 = module_0.is_json(str_0)

def test_case_46():
    str_0 = '255.200.100.75'
    bool_0 = module_0.is_ip_v4(str_0)
    str_1 = '255.200.100.999'
    bool_1 = module_0.is_ip_v4(str_1)

def test_case_47():
    str_0 = '4111111111111111'
    bool_0 = module_0.is_credit_card(str_0)
    bool_1 = module_0.is_credit_card(str_0)
    bool_2 = module_0.is_credit_card(str_0)
    str_1 = 'VISA'
    bool_3 = module_0.is_credit_card(bool_2, str_0)
    dict_0 = {str_1: str_0, str_1: str_1}
    bool_4 = module_0.is_credit_card(dict_0, str_0)
    bool_5 = module_0.is_credit_card(str_1)