# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        bytes_0 = b'\xef\rqV\xe9\xc1n\x1e\x81\x9bKw'
        header_expectation_failed_0 = None
        float_0 = None
        header_expectation_failed_1 = module_0.HeaderExpectationFailed(bytes_0, header_expectation_failed_0, float_0)
        str_0 = "OUo'P*lN\rn"
        float_1 = -2579.783504
        list_0 = [float_1, float_0]
        method_not_supported_0 = module_0.MethodNotSupported(header_expectation_failed_1, str_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = set()
        payload_too_large_0 = module_0.PayloadTooLarge(set_0)
        dict_0 = None
        content_range_error_0 = module_0.ContentRangeError(payload_too_large_0, dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        float_0 = 2436.0
        payload_too_large_0 = module_0.PayloadTooLarge(dict_0, float_0)
        int_0 = 401
        int_1 = None
        str_0 = ' '
        dict_1 = {str_0: str_0, str_0: int_1}
        bytes_0 = b'\xaa\xff.H\xfe\xc6\xc2\xf8\xa0\xc4\xa3o\xd8\xa4\xf1\xa4\x1a\xc1\xb0'
        unauthorized_0 = module_0.Unauthorized(bytes_0)
        invalid_signal_0 = module_0.InvalidSignal(str_0)
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(unauthorized_0, invalid_signal_0)
        content_range_error_0 = None
        load_file_exception_0 = module_0.LoadFileException(header_expectation_failed_0, content_range_error_0)
        payload_too_large_1 = module_0.PayloadTooLarge(dict_1, load_file_exception_0)
        not_found_0 = module_0.NotFound(int_1, payload_too_large_1)
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 341
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -62
        bytes_0 = b"\xd8\x86\x93Y\xce(\x9el\xdaK\xfe\xa1\x90\xd8'3"
        var_0 = module_0.abort(int_0, bytes_0)
    except BaseException:
        pass