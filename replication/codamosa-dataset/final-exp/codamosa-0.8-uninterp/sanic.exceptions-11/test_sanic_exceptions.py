# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = "!#$%&'*+-.^_`|~:"
    server_error_0 = module_0.ServerError(str_0)

def test_case_2():
    str_0 = 'j"t[g]I=E*>\'V'
    bool_0 = False
    sanic_exception_0 = module_0.SanicException(bool_0)
    server_error_0 = module_0.ServerError(sanic_exception_0, sanic_exception_0)
    py_file_error_0 = module_0.PyFileError(server_error_0)
    request_timeout_0 = module_0.RequestTimeout(py_file_error_0)
    header_expectation_failed_0 = module_0.HeaderExpectationFailed(str_0)
    py_file_error_1 = module_0.PyFileError(header_expectation_failed_0)

def test_case_3():
    dict_0 = {}
    str_0 = 'protocol'
    server_error_0 = module_0.ServerError(str_0, dict_0)
    list_0 = [server_error_0, server_error_0, server_error_0]
    var_0 = module_0.add_status_code(list_0)
    int_0 = -130
    str_1 = '#AYoW*}N'
    dict_1 = {str_1: list_0, str_0: dict_0, str_1: var_0}
    unauthorized_0 = module_0.Unauthorized(int_0, **dict_1)
    forbidden_0 = module_0.Forbidden(unauthorized_0)
    str_2 = '\n        Force close the connection.\n        '
    header_not_found_0 = module_0.HeaderNotFound(str_2)
    invalid_signal_0 = module_0.InvalidSignal(header_not_found_0)
    request_timeout_0 = module_0.RequestTimeout(forbidden_0, invalid_signal_0, invalid_signal_0)
    sanic_exception_0 = module_0.SanicException(request_timeout_0)
    header_expectation_failed_0 = module_0.HeaderExpectationFailed(sanic_exception_0, unauthorized_0)
    dict_2 = {}
    invalid_usage_0 = module_0.InvalidUsage(dict_2)
    file_not_found_0 = module_0.FileNotFound(server_error_0, dict_0, invalid_usage_0)
    request_timeout_1 = module_0.RequestTimeout(dict_0, file_not_found_0)

def test_case_4():
    float_0 = -447.9
    unauthorized_0 = module_0.Unauthorized(float_0)
    float_1 = None
    service_unavailable_0 = module_0.ServiceUnavailable(float_1)

def test_case_5():
    str_0 = 'Invalid route: '
    str_1 = ' gORFV)E,xC%SYY-6'
    str_2 = 'Mfcuq$2&ySDI%,'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_0}
    dict_1 = {}
    set_0 = set()
    str_3 = '+k@Fz5q_#3\x0b#R^'
    method_not_supported_0 = None
    float_0 = 2854.77938
    sanic_exception_0 = module_0.SanicException(float_0)
    forbidden_0 = module_0.Forbidden(method_not_supported_0, sanic_exception_0)
    load_file_exception_0 = module_0.LoadFileException(set_0, str_3, forbidden_0)
    not_found_0 = module_0.NotFound(dict_1)
    int_0 = 404
    service_unavailable_0 = None
    bool_0 = True
    header_expectation_failed_0 = module_0.HeaderExpectationFailed(bool_0)
    list_0 = [service_unavailable_0, service_unavailable_0, str_0]
    service_unavailable_1 = module_0.ServiceUnavailable(int_0, list_0, dict_1)
    forbidden_1 = module_0.Forbidden(dict_0, not_found_0, service_unavailable_1)

def test_case_6():
    bytes_0 = b'@<\xb9\xe7#\xe1\xa79bO\xaf3\x1e\x12\xa4\x95g\xb3\xe2'
    list_0 = [bytes_0, bytes_0, bytes_0]
    content_range_error_0 = None
    load_file_exception_0 = module_0.LoadFileException(content_range_error_0)
    dict_0 = {load_file_exception_0: bytes_0, bytes_0: list_0, content_range_error_0: content_range_error_0}
    payload_too_large_0 = module_0.PayloadTooLarge(dict_0)
    header_not_found_0 = module_0.HeaderNotFound(payload_too_large_0)
    str_0 = 'Loop can only be retrieved after the app has started running. Not supported with `create_server` function'
    str_1 = 'G?y,9>n'
    dict_1 = {str_0: payload_too_large_0, str_1: bytes_0}
    unauthorized_0 = module_0.Unauthorized(header_not_found_0, **dict_1)
    unauthorized_1 = module_0.Unauthorized(load_file_exception_0, header_not_found_0, unauthorized_0, **dict_1)
    invalid_usage_0 = module_0.InvalidUsage(list_0, unauthorized_1)
    header_expectation_failed_0 = None
    load_file_exception_1 = module_0.LoadFileException(invalid_usage_0, header_expectation_failed_0)