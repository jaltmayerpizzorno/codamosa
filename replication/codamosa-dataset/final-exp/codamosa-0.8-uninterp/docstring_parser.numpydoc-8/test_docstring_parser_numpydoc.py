# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = "+^=o\nZHQnT'O"
    docstring_0 = module_0.parse(str_0)

def test_case_2():
    numpydoc_parser_0 = module_0.NumpydocParser()

def test_case_3():
    str_0 = 'qz|Eg$m'
    docstring_0 = module_0.parse(str_0)
    str_1 = 'O|}r3\t~{9`nO\x0c'
    str_2 = '<\n|Jd_2TE '
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_1 = numpydoc_parser_0.parse(str_2)
    section_0 = module_0.Section(str_0, str_1)
    var_0 = numpydoc_parser_0.add_section(section_0)

def test_case_4():
    str_0 = '\n    This is sort description.\n\n    This is long description. It can span over multiple lines.\n\n    Parameters\n    ----------\n    arg_1\n        ThIs is description of arg_1.\n    arg_2 : type, optional\n        By default it is None. Default: None. This is description of arg_2.\n\n    Returns\n    -------\n    out : np.ndarray\n        Description of returned value.\n\n    Raises\n    ------\n    ypeErro\n        If somethinggoes wrong.\n    '
    docstring_0 = module_0.parse(str_0)
    section_0 = module_0.Section(str_0, str_0)
    str_1 = None
    docstring_1 = module_0.parse(str_1)

def test_case_5():
    str_0 = 'G<.Ib&'
    numpydoc_parser_0 = module_0.NumpydocParser()
    docstring_0 = numpydoc_parser_0.parse(str_0)

def test_case_6():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '    Parameters\n    ----------\n    arg_1\n        Description of arg_1\n    arg_2 : type\n        Description of arg_2\n\n    Raises\n    ------\n    KeyError\n        When a key error\n\n    '
    docstring_0 = numpydoc_parser_0.parse(str_0)
    var_0 = docstring_0.meta
    var_1 = len(var_0)

def test_case_7():
    str_0 = '\n    This is short description.\n\n    This is long description. It can span over multiple lines.\n\n    Parameters\n    ----------\n    arg_1\n        This is description of arg_1.\n    arg_2 : type, optional\n        By default it is None. Default: None. This is description of arg_2.\n\n    Returns\n    -------\n    out : np.ndarray\n        Description of returned value.\n\n    Raises\n    ------\n    TypeError\n        If something goes wrong.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = 'deprecated:: 0.4.0\n This function is deprecated.'
    str_1 = 'deprecated'
    str_2 = 'deprecation'
    deprecation_section_0 = module_0.DeprecationSection(str_1, str_2)
    iterable_0 = deprecation_section_0.parse(str_0)
    var_0 = list(iterable_0)

def test_case_9():
    str_0 = '\n    This is short description.\n\n    This is long description. It can span over multiple lines.\n\n    Parameters\n    ----------\n    arg_1\n        This is description of arg_1.\n    arg_2 : type,optional\n        By default it is None. Default: None. This is description of arg_2.\n\n    Returns\n    -------\n    out : np.ndarray\n        Description of returned value.\n\n    Raises\n    ------\n    TypeError\n        If something goes wrong.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_10():
    str_0 = '\n    This is an example docstring.\n\n    Parameters\n    ----------\n    arg1 : int\n        The first parameter.\n    arg2 : str\n        The second parameter.\n\n    Returns\n    -------\n    int\n        An integer return value.\n\n    Raises\n    ------\n    ValueError\n        If something goes wrong.\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    numpydoc_parser_0 = module_0.NumpydocParser()
    str_0 = '\n    sample description text\n    Parameters\n    ----------\n    sample_parameter_name : type\n        sample parameter description\n    '
    docstring_0 = numpydoc_parser_0.parse(str_0)