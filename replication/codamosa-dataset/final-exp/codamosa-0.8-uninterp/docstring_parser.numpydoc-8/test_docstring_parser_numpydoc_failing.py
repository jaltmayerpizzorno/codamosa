# Automatically generated by Pynguin.
import docstring_parser.numpydoc as module_0

def test_case_0():
    try:
        str_0 = '$^2K`E\x0b+!'
        section_0 = module_0.Section(str_0, str_0)
        str_1 = 'ofKG<s6|Hb!?m5'
        numpydoc_parser_0 = module_0.NumpydocParser(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        numpydoc_parser_0 = module_0.NumpydocParser()
        str_0 = 'references'
        returns_section_0 = module_0.ReturnsSection(str_0, str_0)
        str_1 = 'hmi:8cl8nCK.6~\x0c'
        k_v_section_0 = module_0._KVSection(str_1, str_1)
        iterable_0 = k_v_section_0.parse(str_1)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\n    This is short description.\n\n    This is long description. It can span over multiple lines.\n\n    Parameters\n    ----------\n    arg_1\n        This is description of arg_1.\n    arg_2 : type, optional\n        By default it is None. Default: None. This is description of arg_2.\n\n    Rturns\n    -------\n    out : np.ndarray\n        Description of returned value.\n\n    Raises\n    ------\n    TypeErro\n        If somethinggoes wrong.\n    '
        docstring_0 = module_0.parse(str_0)
        section_0 = None
        numpydoc_parser_0 = module_0.NumpydocParser()
        var_0 = numpydoc_parser_0.add_section(section_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'exception'
        str_1 = ', optional'
        str_2 = ':'
        k_v_section_0 = module_0._KVSection(str_1, str_2)
        section_0 = module_0.Section(str_2, str_2)
        iterable_0 = section_0.parse(str_0)
        str_3 = 'g:/FL_ A.:/'
        str_4 = ''
        str_5 = 'mo1\n\x0c\tp('
        deprecation_section_0 = module_0.DeprecationSection(str_4, str_5)
        iterable_1 = deprecation_section_0.parse(str_3)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '.'
        str_1 = 'Ns<?UV'
        returns_section_0 = module_0.ReturnsSection(str_0, str_1)
        str_2 = '.mMLMn\nsuqi'
        section_0 = module_0.Section(str_2, str_0)
        numpydoc_parser_0 = module_0.NumpydocParser()
        str_3 = 'P}6y3'
        str_4 = ',oy&J6#jNw_3v_f"ZlW6'
        section_1 = module_0.Section(str_3, str_4)
        str_5 = 'b9`l\nLn'
        str_6 = 'ZETe'
        section_2 = module_0.Section(str_6, str_3)
        iterable_0 = section_2.parse(str_5)
        str_7 = 'k?(!8:}a'
        k_v_section_0 = module_0._KVSection(str_7, str_4)
        str_8 = ''
        str_9 = 'f<\tdq$\x0bv}m7M:7A]1b\\'
        param_section_0 = module_0.ParamSection(str_2, str_9)
        str_10 = '5'
        section_3 = module_0.Section(str_8, str_10)
        numpydoc_parser_1 = module_0.NumpydocParser(iterable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'Parse ``DocstringMeta`` objects from the body of this section.\n\n        :param text: section body text. Should be cleaned with\n                     ``inspect.cleandoc`` before parsing.\n        '
        str_1 = ''
        returns_section_0 = module_0.ReturnsSection(str_1, str_0)
        str_2 = 'hmi:8cl8nCK.6~\x0c'
        k_v_section_0 = module_0._KVSection(str_2, str_2)
        iterable_0 = k_v_section_0.parse(str_1)
        numpydoc_parser_0 = module_0.NumpydocParser(iterable_0)
        docstring_0 = numpydoc_parser_0.parse(str_0)
    except BaseException:
        pass