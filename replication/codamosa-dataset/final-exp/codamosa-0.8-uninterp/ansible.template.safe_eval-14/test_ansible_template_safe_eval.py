# Automatically generated by Pynguin.
import ansible.template.safe_eval as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = 'cmd_arg'
    var_0 = module_0.safe_eval(str_0)

def test_case_2():
    float_0 = None
    var_0 = module_0.safe_eval(float_0)

def test_case_3():
    str_0 = ':e\t6Y1ZchfJdT'
    bool_0 = None
    dict_0 = None
    tuple_0 = (bool_0, dict_0)
    str_1 = 'G'
    var_0 = module_0.safe_eval(str_0, tuple_0, str_1)

def test_case_4():
    str_0 = '&~n>E5w#LU1\x0c)j)M'
    var_0 = module_0.safe_eval(str_0)

def test_case_5():
    str_0 = '"text"'
    var_0 = module_0.safe_eval(str_0)

def test_case_6():
    str_0 = 'Rovd%s1'
    var_0 = module_0.safe_eval(str_0, str_0, str_0)

def test_case_7():
    bytes_0 = b'K`\x8c`\x1d6\xbc^z%\x82\x88\xa4'
    bytes_1 = None
    int_0 = -1916
    bytes_2 = b'\xf88\xb2\xef?\xae\x82\xa1\xd8\xf4\xf1\xf5\xcb\x1d'
    tuple_0 = (bytes_2,)
    var_0 = module_0.safe_eval(int_0, tuple_0)
    float_0 = -1312.123
    bool_0 = True
    var_1 = module_0.safe_eval(float_0, bool_0)
    str_0 = 'SLES_SAP.prod'
    bytes_3 = b'\xdc\xec\xdeT\x16]o\x07g\xc6\xae\xd2\xae\xcb\x95\xd6'
    var_2 = module_0.safe_eval(bytes_3)
    set_0 = {bytes_0, bytes_1, str_0}
    dict_0 = {}
    str_1 = ' The need of this entire if conditional has to be changed\n                this function is the ensure function that is called\n                in the main section.\n\n                This conditional tends to disable/enable repo for\n                install present latest action, same actually\n                can be done for remove and absent action\n\n                As solution I would advice to cal\n                try: self.yum_base.repos.disableRepo(disablerepo)\n                and\n                try: self.yum_base.repos.enableRepo(enablerepo)\n                right before any yum_cmd is actually called regardless\n                of yum action.\n\n                Please note that enable/disablerepo options are general\n                options, this means that we can call those with any action\n                option.  https://linux.die.net/man/8/yum\n\n                This docstring will be removed together when issue: #21619\n                will be solved.\n\n                This has been triggered by: #19587\n            '
    tuple_1 = (str_1, str_0, set_0)
    int_1 = 569
    tuple_2 = (dict_0, tuple_1, int_1)
    var_3 = module_0.safe_eval(bytes_1, set_0, tuple_2)
    str_2 = 'C+cF\x0bC'
    var_4 = module_0.safe_eval(bool_0)
    var_5 = module_0.safe_eval(str_2, set_0)
    float_1 = 3566.0
    var_6 = module_0.safe_eval(tuple_2, bool_0)
    var_7 = module_0.safe_eval(float_1)
    var_8 = module_0.safe_eval(bytes_0)
    str_3 = "<Yt(79\rh%+'-nG_P+y\\"
    int_2 = 15
    tuple_3 = (int_2, bytes_0, int_2)
    var_9 = module_0.safe_eval(str_3, tuple_3, bytes_0)

def test_case_8():
    str_0 = 'Removed %s'
    var_0 = module_0.safe_eval(str_0)

def test_case_9():
    str_0 = 'eson'
    var_0 = module_0.safe_eval(str_0, str_0)

def test_case_10():
    str_0 = 'ZE4Ep'
    float_0 = 0.2
    set_0 = {str_0, float_0}
    tuple_0 = (float_0, set_0)
    float_1 = 0.001
    list_0 = []
    tuple_1 = (tuple_0, float_1, list_0)
    var_0 = module_0.safe_eval(tuple_1, tuple_0)
    dict_0 = {str_0: var_0, float_0: tuple_1}
    list_1 = [str_0, str_0]
    var_1 = module_0.safe_eval(str_0, dict_0, list_1)
    var_2 = module_0.safe_eval(list_1)
    bool_0 = True
    var_3 = module_0.safe_eval(bool_0)