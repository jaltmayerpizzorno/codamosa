# Automatically generated by Pynguin.
import pysnooper.tracer as module_0
import pysnooper.variables as module_1

def test_case_0():
    try:
        str_0 = 'R)J%Nf'
        var_0 = module_0.get_path_and_source_from_frame(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = None
        float_0 = -864.95
        var_0 = module_0.get_write_function(set_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'ycs8?3p'
        dict_0 = {}
        list_0 = None
        tracer_0 = module_0.Tracer(str_0, dict_0, list_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -105
        tracer_0 = module_0.Tracer(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'T\x7f\x92\x12\xbe\xad\xff\xb8\xe0n\x8d\xfb'
        set_0 = {bytes_0, bytes_0}
        file_writer_0 = module_0.FileWriter(bytes_0, set_0)
        tracer_0 = module_0.Tracer(file_writer_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bytes_0 = b'T\x7f\x92\x12\xbe\xad\xff\xb8\xe0n\x8d\xfb'
        set_0 = {bytes_0, bytes_0}
        file_writer_0 = module_0.FileWriter(bytes_0, set_0)
        var_0 = file_writer_0.write(file_writer_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tracer_0 = module_0.Tracer()
        unavailable_source_0 = None
        var_0 = tracer_0.__call__(unavailable_source_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tracer_0 = module_0.Tracer()
        int_0 = 866
        list_0 = [int_0, int_0, tracer_0, int_0]
        unavailable_source_0 = module_0.UnavailableSource()
        var_0 = tracer_0.__exit__(int_0, list_0, unavailable_source_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tracer_0 = module_0.Tracer()
        list_0 = []
        var_0 = tracer_0.__enter__()
        float_0 = 4052.2573
        bytes_0 = b'\xc7\xea\xa9\x18\x0ca\xae\xdc\xad\xec\xf95\xbbV\x18\x15\x068'
        file_writer_0 = module_0.FileWriter(float_0, bytes_0)
        list_1 = []
        file_writer_1 = module_0.FileWriter(file_writer_0, list_1)
        var_1 = file_writer_1.write(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        tracer_0 = module_0.Tracer()
        list_0 = []
        unavailable_source_0 = module_0.UnavailableSource(*list_0)
        var_0 = unavailable_source_0.__getitem__(tracer_0)
        str_0 = '`overwrite=True` can only be used when writing content to file.'
        set_0 = {unavailable_source_0}
        bool_0 = False
        file_writer_0 = module_0.FileWriter(set_0, bool_0)
        var_1 = file_writer_0.write(str_0)
        tracer_1 = module_0.Tracer(unavailable_source_0, bool_0, file_writer_0)
    except BaseException:
        pass

def test_case_10():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        var_1 = tracer_0.__enter__()
        unavailable_source_0 = module_0.UnavailableSource()
        float_0 = 4068.535073797054
        var_2 = tracer_0.__exit__(float_0, unavailable_source_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tracer_0 = module_0.Tracer()
        var_0 = tracer_0.__enter__()
        tracer_1 = module_0.Tracer(tracer_0)
        var_1 = tracer_1.__enter__()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'call'
        common_variable_0 = module_1.CommonVariable(str_0)
        bytes_0 = b'\x88\xf3\x16{\xa5\x03'
        list_0 = [bytes_0, common_variable_0, common_variable_0]
        tracer_0 = module_0.Tracer(str_0, common_variable_0, list_0)
    except BaseException:
        pass