# Automatically generated by Pynguin.
import isort.exceptions as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = 'check-ignore'
    invalid_settings_path_0 = module_0.InvalidSettingsPath(str_0)

def test_case_2():
    str_0 = 'I%Mv'
    existing_syntax_errors_0 = module_0.ExistingSyntaxErrors(str_0)

def test_case_3():
    i_sort_error_0 = module_0.ISortError()
    str_0 = 'p_wb\\k%# C'
    missing_section_0 = module_0.MissingSection(str_0, str_0)
    existing_syntax_errors_0 = module_0.ExistingSyntaxErrors(str_0)
    unsupported_encoding_0 = module_0.UnsupportedEncoding(str_0)
    file_skip_setting_0 = module_0.FileSkipSetting(str_0)
    introduced_syntax_errors_0 = module_0.IntroducedSyntaxErrors(str_0)
    str_1 = 'pyclbr'
    str_2 = '!'
    file_skip_setting_1 = module_0.FileSkipSetting(str_2)
    file_skipped_0 = module_0.FileSkipped(str_1, str_1)
    str_3 = ''
    exception_0 = module_1.Exception()
    literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_3, exception_0)
    unsupported_encoding_1 = module_0.UnsupportedEncoding(str_0)
    str_4 = 'H:Kt+R>kv6{!(d\x0c'
    dict_0 = {}
    unsupported_settings_0 = module_0.UnsupportedSettings(dict_0)
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_4)
    assignments_format_mismatch_0 = module_0.AssignmentsFormatMismatch(str_1)

def test_case_4():
    str_0 = '%e+(I!f~,<XJ@+Ms8'
    file_skip_comment_0 = module_0.FileSkipComment(str_0)

def test_case_5():
    str_0 = 'is_dataclass'
    file_skip_setting_0 = module_0.FileSkipSetting(str_0)

def test_case_6():
    str_0 = None
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_0)

def test_case_7():
    str_0 = 'pyproject.toml'
    formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_0)

def test_case_8():
    str_0 = '\tZ:Q$a$7]T\t'
    exception_0 = module_1.Exception()
    literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_0, exception_0)

def test_case_9():
    str_0 = '`\r. _+lm86M!J=;/5n'
    dict_0 = {}
    i_sort_error_0 = module_0.ISortError(**dict_0)
    invalid_settings_path_0 = module_0.InvalidSettingsPath(str_0)
    unsupported_encoding_0 = module_0.UnsupportedEncoding(str_0)
    str_1 = 'Forces all from imports to appear on their own line'
    exception_0 = module_1.Exception()
    assignments_format_mismatch_0 = module_0.AssignmentsFormatMismatch(str_0)
    literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_1, exception_0)
    str_2 = 'zi^k&T\r]sqM/!!M,:|BG'
    str_3 = None
    missing_section_0 = module_0.MissingSection(str_2, str_3)

def test_case_10():
    str_0 = 'option1'
    str_1 = 'value'
    str_2 = 'source'
    str_3 = 'foo'
    str_4 = '.isort.cfg'
    str_5 = {str_1: str_3, str_2: str_4}
    str_6 = {str_0: str_5}
    unsupported_settings_0 = module_0.UnsupportedSettings(str_6)
    var_0 = str(unsupported_settings_0)

def test_case_11():
    str_0 = '^v5 '
    file_skip_setting_0 = module_0.FileSkipSetting(str_0)
    unsupported_encoding_0 = module_0.UnsupportedEncoding(str_0)

def test_case_12():
    str_0 = '?CUya'
    profile_does_not_exist_0 = module_0.ProfileDoesNotExist(str_0)
    file_skip_comment_0 = module_0.FileSkipComment(str_0)
    profile_does_not_exist_1 = module_0.ProfileDoesNotExist(str_0)
    str_1 = 'y`qn;{#'
    str_2 = 'ojd}B^7'
    missing_section_0 = module_0.MissingSection(str_0, str_2)
    file_skip_comment_1 = module_0.FileSkipComment(str_1)