# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        float_0 = 1742.2415
        str_0 = 'H5rbZ'
        set_0 = set()
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, set_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'h0(<fS'
        float_0 = 1742.2415
        set_0 = set()
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, set_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'LCx>CywSVj=u7)r%S('
        tuple_0 = (str_0,)
        bytes_0 = b'r\xbf\xb7\xde\xc2\xc4'
        j_s_interpreter_0 = module_0.JSInterpreter(bytes_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, bytes_0, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'[~\xab\xd3\xac'
        list_0 = []
        tuple_0 = (bytes_0, list_0)
        int_0 = -1511
        j_s_interpreter_0 = module_0.JSInterpreter(int_0)
        var_0 = j_s_interpreter_0.extract_object(tuple_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        int_0 = 2316
        int_1 = {str_0: int_0}
        str_1 = 'test1.et11[0]'
        var_0 = j_s_interpreter_0.interpret_expression(str_1, int_1, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\n        var f = {};\n        var a = [100,200,300,400];\n        var e = [500,600,700,800];\n        var b = a[0]+a[1]+"_"+e[0]+e[1];\n        var c = b.length;\n        var d = b.slice(0);\n        f.get = function (a) {\n            var s = [a,b,c,d];\n            if (a > 0) {\n                return d[a-1];\n            } else {\n                return s;\n            }\n        };\n    '
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.extract_function(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -128
        bool_0 = True
        j_s_interpreter_0 = module_0.JSInterpreter(bool_0)
        var_0 = j_s_interpreter_0.call_function(int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = -6805.07929
        int_0 = 741
        j_s_interpreter_0 = module_0.JSInterpreter(int_0)
        list_0 = [j_s_interpreter_0, j_s_interpreter_0, float_0, int_0]
        j_s_interpreter_1 = module_0.JSInterpreter(list_0)
        str_0 = 'AV'
        var_0 = j_s_interpreter_1.build_function(str_0, int_0)
        var_1 = j_s_interpreter_0.extract_object(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        var_0 = {str_0: str_0}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, var_0)
        float_0 = 1807.839849
        str_1 = 'test1'
        int_0 = 2
        int_1 = [int_0, int_0, int_0]
        complex_0 = None
        tuple_0 = (complex_0, float_0)
        var_1 = j_s_interpreter_0.interpret_statement(str_0, tuple_0)
        int_2 = {str_1: int_0}
        str_2 = 'test1.et11]'
        var_2 = j_s_interpreter_0.interpret_expression(str_2, int_2, int_1)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\x9f\xf6\xb3\xf4\xabu\x0f\xa6*\xb0-'
        bool_0 = False
        int_0 = -2565
        bytes_1 = b'$\xea7\xb7\xed'
        int_1 = 63
        j_s_interpreter_0 = module_0.JSInterpreter(int_1)
        j_s_interpreter_1 = module_0.JSInterpreter(bytes_1, j_s_interpreter_0)
        var_0 = j_s_interpreter_1.interpret_statement(bytes_0, bool_0, int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ''
        var_0 = {}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, var_0)
        str_1 = 'test1'
        int_0 = 2
        int_1 = {str_1: int_0}
        str_2 = 'test1.et11[0]'
        var_1 = j_s_interpreter_0.interpret_expression(str_2, int_1, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'S^=2dj<M'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        complex_0 = None
        float_0 = 1430396150.82
        tuple_0 = (complex_0, float_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'S^=2/j<\t'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        complex_0 = None
        float_0 = 1430396183.0650563
        tuple_0 = (complex_0, float_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, tuple_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '($'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, str_0)
        complex_0 = None
        float_0 = 1430396150.82
        tuple_0 = (complex_0, float_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, tuple_0)
    except BaseException:
        pass