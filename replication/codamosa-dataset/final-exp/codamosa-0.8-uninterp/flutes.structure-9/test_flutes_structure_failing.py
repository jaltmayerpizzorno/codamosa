# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    try:
        bool_0 = True
        var_0 = module_0.no_map_instance(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 198
        set_0 = {int_0}
        bytes_0 = b''
        module_0.register_no_map_class(bytes_0)
        float_0 = -109.3887
        list_0 = [float_0, set_0, set_0, bytes_0]
        var_0 = module_0.no_map_instance(list_0)
        list_1 = None
        var_1 = module_0.map_structure(float_0, list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        list_0 = None
        bytes_0 = b'\xa8\x03*\x90V>\xd4IZKHPG\xc8\x97'
        set_0 = {bytes_0, list_0, bytes_0}
        tuple_0 = ()
        list_1 = []
        list_2 = []
        tuple_1 = (tuple_0, list_1, list_2, dict_0)
        str_0 = 'warning'
        list_3 = [set_0, tuple_1, str_0]
        var_0 = module_0.map_structure(list_3, tuple_1)
        module_0.register_no_map_class(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xbegmX)?\x9e\x83a'
        var_0 = module_0.map_structure(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0}
        tuple_0 = (dict_0,)
        var_0 = module_0.map_structure_zip(str_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'in|tial0izer'
        var_0 = module_0.map_structure_zip(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        var_0 = module_0.map_structure_zip(bool_0, bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        int_0 = 4473
        int_1 = None
        dict_0 = {var_0: int_0, var_0: int_0, var_0: int_1}
        list_0 = module_0.reverse_map(dict_0)
        str_0 = '{l_bar}{bar}| [{elapsed}<{remaining}{postfix}]'
        module_0.register_no_map_class(str_0)
        list_1 = [str_0, str_0, str_0, str_0]
        module_0.register_no_map_class(list_1)
    except BaseException:
        pass

def test_case_8():
    try:
        float_0 = 2486.91
        dict_0 = {float_0: float_0, float_0: float_0, float_0: float_0}
        var_0 = module_0.map_structure(float_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        float_0 = -50.55352
        tuple_0 = (float_0,)
        var_0 = module_0.map_structure(bool_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = ':'
        dict_0 = {str_0: str_0}
        tuple_0 = (dict_0,)
        str_1 = 'VERSION'
        list_0 = [str_1]
        var_0 = module_0.map_structure(tuple_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = None
        list_0 = [var_0]
        set_0 = {var_0, var_0}
        var_1 = module_0.map_structure(list_0, set_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '^{F6V/#)pD'
        set_0 = {str_0}
        list_0 = [set_0, str_0, str_0]
        var_0 = module_0.map_structure_zip(list_0, list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        var_0 = module_0.no_map_instance(set_0)
        list_0 = [set_0]
        tuple_0 = (list_0,)
        var_1 = module_0.map_structure(tuple_0, tuple_0)
        bytes_0 = b'I\\\x8e}!\x05b\xc0'
        var_2 = module_0.map_structure_zip(set_0, bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'LX-3.P qriZ'
        list_0 = [str_0, str_0, str_0]
        complex_0 = None
        dict_0 = None
        list_1 = [complex_0, dict_0]
        list_2 = [list_1]
        var_0 = module_0.map_structure_zip(list_0, list_2)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = None
        int_0 = 6
        set_0 = set()
        var_1 = module_0.no_map_instance(set_0)
        int_1 = -1656
        dict_0 = {var_0: int_0, var_0: int_1}
        list_0 = module_0.reverse_map(dict_0)
        list_1 = [var_1]
        tuple_0 = (list_1,)
        var_2 = module_0.map_structure(tuple_0, tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'initializer'
        bytes_0 = b'\x1c\x12?\x11\t\xad\x97\x03\xc9\x83\xb4B'
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, tuple_0, str_0]
        var_0 = None
        list_1 = [tuple_0, list_0, var_0, var_0]
        var_1 = module_0.map_structure_zip(bytes_0, list_1)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = None
        int_0 = 3
        int_1 = 2266
        dict_0 = {var_0: int_0, var_0: int_1, var_0: int_1}
        list_0 = module_0.reverse_map(dict_0)
        set_0 = set()
        var_1 = module_0.no_map_instance(set_0)
        var_2 = module_0.no_map_instance(var_1)
        int_2 = -1656
        dict_1 = {var_0: int_0, var_0: int_2}
        list_1 = module_0.reverse_map(dict_1)
        list_2 = []
        tuple_0 = (list_2,)
        int_3 = -1415
        module_0.register_no_map_class(int_3)
        var_3 = module_0.map_structure(tuple_0, tuple_0)
        bool_0 = None
        bool_1 = True
        var_4 = module_0.map_structure_zip(bool_0, bool_1)
    except BaseException:
        pass