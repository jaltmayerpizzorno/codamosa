# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    pass

def test_case_1():
    dict_0 = {}
    list_0 = module_0.reverse_map(dict_0)

def test_case_2():
    bytes_0 = b''
    module_0.register_no_map_class(bytes_0)

def test_case_3():
    bytes_0 = b'xc\x99\x93\xdf)X\x16\xc8f\x84m\xa1\x8eZ\xf5!\xda'
    var_0 = module_0.no_map_instance(bytes_0)

def test_case_4():
    list_0 = []
    tuple_0 = (list_0,)
    var_0 = module_0.map_structure(tuple_0, tuple_0)

def test_case_5():
    str_0 = '/aZ,'
    tuple_0 = ()
    var_0 = module_0.map_structure(str_0, tuple_0)

def test_case_6():
    float_0 = 1.0
    var_0 = module_0.no_map_instance(float_0)
    list_0 = []
    bytes_0 = b'H\xaa\x8a\xd7\xac\x94\xf9\x1c\x05\x9bPd\xae\x877\xe4\xe7J\xd4\r'
    var_1 = module_0.map_structure(bytes_0, list_0)
    tuple_0 = (list_0,)
    str_0 = 'lN.;jUX#\x0b1o%\n2e@'
    var_2 = module_0.map_structure_zip(str_0, tuple_0)

def test_case_7():
    str_0 = ''
    dict_0 = {}
    tuple_0 = (dict_0,)
    var_0 = module_0.map_structure_zip(str_0, tuple_0)

def test_case_8():
    str_0 = '\nTesting for map_structure_zip()'
    var_0 = print(str_0)
    var_1 = lambda x, y: x + y
    str_1 = 'a'
    str_2 = 'b'
    int_0 = 1
    int_1 = 2
    int_2 = {str_1: int_0, str_2: int_1}
    int_3 = 3
    int_4 = 4
    int_5 = {str_1: int_3, str_2: int_4}
    int_6 = [int_2, int_5]
    var_2 = module_0.map_structure_zip(var_1, int_6)
    str_3 = 'the result of mapping function over the 2 dicts:'
    var_3 = print(str_3, var_2)
    str_4 = "\nthe result should be {'a':4, 'b':6}"
    dict_0 = {int_0: str_1, str_0: str_1}
    var_4 = module_0.no_map_instance(dict_0)
    var_5 = print(str_4)
    var_6 = lambda x, y: x + y
    str_5 = 'c'
    var_7 = (str_1, int_0, str_5)
    str_6 = 'd'
    var_8 = (str_2, int_1, str_6)
    var_9 = [var_7, var_8]
    var_10 = module_0.map_structure_zip(var_6, var_9)
    str_7 = '\nthe result of mapping function over the 2 tuples:'
    var_11 = print(str_7, str_7)