# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.encode()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '}3^2GGT:9r 00'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -1941.485
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdecimal()
        str_0 = 'tFBD;-+Y3}$Pt<.\t\rH'
        var_1 = ansible_vault_encrypted_unicode_0.isspace()
        var_2 = ansible_vault_encrypted_unicode_0.__reversed__()
        list_0 = None
        dict_0 = {str_0: float_0, list_0: ansible_vault_encrypted_unicode_0, float_0: var_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_3 = ansible_vault_encrypted_unicode_0.__lt__(ansible_vault_encrypted_unicode_1)
        var_4 = ansible_vault_encrypted_unicode_0.__le__(list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '8846rAGa&^}*ik/\tk'
        dict_0 = {str_0: str_0, str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__str__()
        float_0 = -1225.03583
        var_1 = ansible_vault_encrypted_unicode_0.__le__(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'pass'
        set_0 = {str_0, str_0}
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__contains__(set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        ansible_mapping_0 = module_0.AnsibleMapping()
        dict_0 = {str_0: str_0, str_0: ansible_mapping_0, str_0: ansible_mapping_0}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        ansible_mapping_1 = module_0.AnsibleMapping()
        var_1 = ansible_vault_encrypted_unicode_0.__mul__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_6():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        bytes_0 = b'W\xbb\xd50\xd2V\x1a\xa2\x94'
        var_0 = ansible_vault_encrypted_unicode_0.endswith(bytes_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        float_0 = -206.460356
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.expandtabs()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        bool_1 = False
        str_0 = 'fFw#p/M1$%>=V'
        bytes_0 = b"\xc7B\\\x1b_\x0fs\xcb'\xec\x15\x7f\xc1M\x18\x908+e\xac"
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_2.__lt__(str_0)
        var_2 = ansible_vault_encrypted_unicode_1.__radd__(bool_1)
        var_3 = ansible_vault_encrypted_unicode_1.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_mapping_0 = module_0.AnsibleMapping()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 79
        bool_0 = True
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.__add__(int_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        bool_1 = False
        str_0 = 'fFw#p/M1$%>=V'
        bytes_0 = b"\xc7B\\\x1b_\x0fs\xcb'\xec\x15\x7f\xc1M\x18\x908+e\xac"
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_1 = ansible_vault_encrypted_unicode_2.__lt__(str_0)
        var_2 = ansible_vault_encrypted_unicode_1.__radd__(bool_1)
        var_3 = ansible_vault_encrypted_unicode_1.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_sequence_0 = module_0.AnsibleSequence()
        bool_2 = True
        var_4 = ansible_vault_encrypted_unicode_1.index(bool_2)
    except BaseException:
        pass

def test_case_9():
    try:
        tuple_0 = None
        set_0 = {tuple_0, tuple_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        var_1 = ansible_vault_encrypted_unicode_0.isascii()
        bool_0 = False
        bytes_0 = b''
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_2 = ansible_vault_encrypted_unicode_1.__contains__(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.rstrip()
        var_1 = ansible_vault_encrypted_unicode_0.isspace()
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = None
        float_0 = 2.0
        var_2 = ansible_vault_encrypted_unicode_0.replace(bool_0, ansible_vault_encrypted_unicode_1, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b"(I\x0b)c5\x98Z\xbe'4e"
        list_0 = [bytes_0, bytes_0, bytes_0]
        list_1 = [list_0]
        ansible_sequence_0 = module_0.AnsibleSequence(*list_1)
        str_0 = ']BR$1Et4FcKLLF'
        bytes_1 = b'\xf6\xa3c\x80<Y\x06|<\x06\xf21'
        str_1 = 'pypi_name'
        dict_0 = {str_0: bytes_1, str_0: str_0, str_1: str_1}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.join(ansible_sequence_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -423.0
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.isascii()
        bytes_0 = b'\x11\x0e\x16\xa1\x84F\x9d'
        var_1 = ansible_vault_encrypted_unicode_0.partition(bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'P\n=Jb'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bool_0 = True
        var_0 = ansible_vault_encrypted_unicode_0.rindex(bool_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "|%qTst'G9"
        dict_0 = {str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        list_0 = [ansible_vault_encrypted_unicode_0, dict_0, ansible_vault_encrypted_unicode_0, dict_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        bytes_0 = b'0\x81\xf5.\x87\xed2\xf3\xe5\xf5\xfb\xfc\r\xfa'
        var_0 = ansible_vault_encrypted_unicode_1.rjust(bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'R)\x0c`qu*en'
        str_1 = 'v%k,l/wZbt\t"p\'jQbw'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_1)
        var_0 = ansible_vault_encrypted_unicode_0.zfill(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        ansible_sequence_0 = module_0.AnsibleSequence()
        bytes_0 = b''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ge__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_17():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_0 = ''
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalnum()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_1.isalnum()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        float_0 = 1.5
        bool_0 = True
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_2 = ansible_vault_encrypted_unicode_2.find(ansible_unicode_0, float_0, ansible_mapping_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 294
        ansible_unicode_0 = module_0.AnsibleUnicode()
        list_0 = [int_0]
        tuple_0 = ()
        bool_0 = False
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_0.replace(int_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 79
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.expandtabs()
        bool_0 = True
        list_0 = []
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_1 = ansible_vault_encrypted_unicode_1.__add__(int_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        bool_1 = False
        str_0 = 'fFw#p/M1$%>=V'
        bytes_0 = b"\xc7B\\\x1b_\x0fs\xcb'\xec\x15\x7f\xc1M\x18\x908+e\xac"
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_2 = ansible_vault_encrypted_unicode_3.__lt__(str_0)
        var_3 = ansible_vault_encrypted_unicode_2.__radd__(bool_1)
        var_4 = ansible_vault_encrypted_unicode_2.is_encrypted()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_5 = ansible_vault_encrypted_unicode_2.title()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_mapping_0 = module_0.AnsibleMapping()
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 1569
        float_0 = 4910.3
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__eq__(int_0)
        bool_0 = False
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_2.isalpha()
        bytes_0 = b'\xfbV\xec\xa3\xce\xa4r\xb6u\xf9\x05\xd8\xaa'
        var_2 = ansible_vault_encrypted_unicode_2.center(bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -2486
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_0 = ansible_vault_encrypted_unicode_0.__str__()
        dict_0 = {var_0: ansible_vault_encrypted_unicode_0}
        list_0 = []
        var_1 = ansible_vault_encrypted_unicode_0.ljust(dict_0, *list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'wdS:Q{nLy!ydf$-*YPq'
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.rstrip()
        var_1 = ansible_vault_encrypted_unicode_0.__rmod__(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = None
        float_0 = 2.0
        var_2 = ansible_vault_encrypted_unicode_0.replace(bool_0, ansible_vault_encrypted_unicode_1, float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = None
        list_0 = [int_0, int_0]
        str_0 = '5IA:>1A@gNwOWe'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'secret'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bool_0 = True
        float_0 = 2948.7607
        var_0 = ansible_vault_encrypted_unicode_0.__getslice__(bool_0, float_0)
    except BaseException:
        pass

def test_case_25():
    try:
        bool_0 = False
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        set_0 = set()
        var_0 = ansible_vault_encrypted_unicode_1.__radd__(set_0)
        bool_1 = False
        float_0 = 2.0
        var_1 = ansible_vault_encrypted_unicode_0.replace(bool_1, ansible_vault_encrypted_unicode_1, float_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 79
        bool_0 = True
        list_0 = [bool_0, int_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        str_0 = '?E'
        var_0 = ansible_vault_encrypted_unicode_0.rpartition(str_0)
        var_1 = ansible_vault_encrypted_unicode_0.__add__(int_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        bool_1 = False
        var_2 = ansible_vault_encrypted_unicode_1.__radd__(bool_1)
        var_3 = ansible_vault_encrypted_unicode_1.is_encrypted()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_mapping_0 = module_0.AnsibleMapping()
    except BaseException:
        pass

def test_case_27():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate()
    except BaseException:
        pass

def test_case_28():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        str_0 = ''
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_1.isascii()
        var_1 = ansible_vault_encrypted_unicode_1.isdigit()
        bytes_0 = b'y\xd6\x8aO\x838P\xc1\xb6}6'
        var_2 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_3 = ansible_vault_encrypted_unicode_1.__unicode__()
        var_4 = ansible_vault_encrypted_unicode_2.strip()
        var_5 = ansible_vault_encrypted_unicode_1.__len__()
        bytes_1 = b'|"\xcaa\xb6\xcf\x96'
        var_6 = ansible_vault_encrypted_unicode_0.split()
        var_7 = ansible_vault_encrypted_unicode_2.__getitem__(bytes_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = "{'11Sg8<.': 'message_type', 'message_type': 'message_type', '5': []}"
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__int__()
    except BaseException:
        pass

def test_case_30():
    try:
        float_0 = -1225.03583
        str_0 = 'nm[5Y`\toi2\\?;\t\x0bAj]d'
        dict_0 = {str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mod__(float_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'message_type'
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        var_1 = ansible_vault_encrypted_unicode_0.__add__(str_0)
        dict_0 = None
        var_2 = ansible_vault_encrypted_unicode_0.rfind(dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'message_type'
        bool_0 = True
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        int_0 = -1493
        var_0 = ansible_vault_encrypted_unicode_0.zfill(int_0)
        var_1 = ansible_vault_encrypted_unicode_0.istitle()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_2 = ansible_vault_encrypted_unicode_1.__add__(str_0)
        var_3 = ansible_vault_encrypted_unicode_0.__add__(ansible_vault_encrypted_unicode_0)
        bytes_0 = b''
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        bytes_1 = b'\xbc\xe7\x92\x92\x1f\xc3~B,\xc7j'
        var_4 = ansible_vault_encrypted_unicode_1.find(bytes_1)
    except BaseException:
        pass

def test_case_33():
    try:
        list_0 = []
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.lower()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_1 = ansible_vault_encrypted_unicode_1.rstrip()
        bytes_0 = b'\xb0\xa1~yW\xa8\xb9\x18}>\xea\xe3'
        var_2 = ansible_vault_encrypted_unicode_0.format_map(bytes_0)
        var_3 = ansible_vault_encrypted_unicode_1.isspace()
        bool_0 = False
        ansible_vault_encrypted_unicode_2 = None
        float_0 = -18.639116617719427
        var_4 = ansible_vault_encrypted_unicode_1.replace(bool_0, ansible_vault_encrypted_unicode_2, float_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'message_type'
        bool_0 = True
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.istitle()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_1.__add__(str_0)
        int_0 = 79
        var_2 = ansible_vault_encrypted_unicode_0.__add__(int_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        str_1 = '()'
        int_1 = -2466
        list_0 = [str_1, int_1, int_1, int_1]
        tuple_0 = ()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_3 = ansible_vault_encrypted_unicode_3.find(ansible_vault_encrypted_unicode_2, ansible_sequence_0, list_0)
    except BaseException:
        pass

def test_case_35():
    try:
        float_0 = 0.001
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        list_0 = None
        bool_0 = True
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_0 = ansible_vault_encrypted_unicode_1.rfind(ansible_vault_encrypted_unicode_0, list_0)
        bytes_0 = None
        var_1 = ansible_vault_encrypted_unicode_1.format_map(bytes_0)
        dict_0 = None
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 79
        bool_0 = False
        list_0 = [bool_0, int_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        tuple_0 = ()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_0.__add__(int_0)
        str_0 = 'eYEBg(#pMk>unql`\x0c#'
        var_2 = ansible_vault_encrypted_unicode_0.__ne__(str_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_3 = ansible_vault_encrypted_unicode_2.__radd__(bool_0)
        var_4 = ansible_vault_encrypted_unicode_2.is_encrypted()
        ansible_sequence_0 = module_0.AnsibleSequence()
        set_0 = set()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_5 = ansible_vault_encrypted_unicode_0.replace(ansible_vault_encrypted_unicode_0, set_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = 79
        bool_0 = False
        list_0 = [bool_0, int_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        tuple_0 = ()
        dict_0 = {}
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.__eq__(tuple_0)
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        ansible_unicode_1 = module_0.AnsibleUnicode()
        str_0 = '7}tws=2VD>D]-`'
        str_1 = '@GO'
        var_1 = ansible_vault_encrypted_unicode_1.rpartition(str_1)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_2.isidentifier()
        var_3 = ansible_vault_encrypted_unicode_0.__add__(int_0)
        var_4 = ansible_vault_encrypted_unicode_0.__ne__(str_0)
        var_5 = ansible_vault_encrypted_unicode_0.isprintable()
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_6 = ansible_vault_encrypted_unicode_3.__radd__(ansible_unicode_0)
        var_7 = ansible_vault_encrypted_unicode_3.__radd__(bool_0)
        var_8 = ansible_vault_encrypted_unicode_2.__gt__(ansible_vault_encrypted_unicode_0)
        set_0 = {ansible_unicode_1, int_0, var_2, var_6}
        var_9 = ansible_vault_encrypted_unicode_2.__add__(set_0)
        var_10 = ansible_vault_encrypted_unicode_3.is_encrypted()
        str_2 = 'isalnum'
        ansible_sequence_0 = module_0.AnsibleSequence()
        var_11 = ansible_vault_encrypted_unicode_0.__contains__(ansible_unicode_0)
        str_3 = 't=YXE,]\\A|[B"4Y{~'
        var_12 = ansible_vault_encrypted_unicode_2.__gt__(ansible_unicode_1)
        ansible_unicode_2 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_4 = module_0.AnsibleVaultEncryptedUnicode(str_3)
        var_13 = ansible_vault_encrypted_unicode_0.replace(str_2, ansible_sequence_0, ansible_vault_encrypted_unicode_0)
    except BaseException:
        pass