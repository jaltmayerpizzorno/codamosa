# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        str_0 = '@O<z'
        dict_0 = None
        optional_0 = module_0.parse_forwarded(str_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        set_0 = {bool_0}
        str_0 = 'expect'
        optional_0 = module_0.parse_xforwarded(set_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        iterable_0 = None
        dict_0 = module_0.fwd_normalize(iterable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        tuple_0 = module_0.parse_host(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'mpj;HMKn4V'
        tuple_0 = module_0.parse_content_header(str_0)
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = module_0.fwd_normalize_address(str_0)
        tuple_1 = module_0.parse_content_header(str_0)
        int_0 = -15
        iterable_0 = None
        bytes_0 = module_0.format_http1_response(int_0, iterable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -924
        str_0 = 'TP{WZl\\(^GCHGkVY6<u#'
        bytes_0 = module_0.format_http1_response(int_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1
        dict_0 = {}
        bytes_0 = module_0.format_http1_response(int_0, dict_0)
        str_0 = None
        str_1 = module_0.fwd_normalize_address(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'request_buffer_queue_size'
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = 'n4@h_p!_/uS53X"X'
        tuple_0 = module_0.parse_host(str_2)
        int_0 = -2172
        str_3 = '9gWlO'
        bytes_0 = module_0.format_http1_response(int_0, str_3)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '?wd&'
        dict_0 = module_0.fwd_normalize(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '[::1]'
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = '_abc'
        str_3 = module_0.fwd_normalize_address(str_2)
        str_4 = '_'
        str_5 = module_0.fwd_normalize_address(str_4)
        str_6 = 'ABC'
        str_7 = module_0.fwd_normalize_address(str_6)
        str_8 = 'ABCD'
        str_9 = module_0.fwd_normalize_address(str_8)
        str_10 = '_ABC'
        str_11 = module_0.fwd_normalize_address(str_10)
        str_12 = ''
        str_13 = module_0.fwd_normalize_address(str_12)
        str_14 = 'unknown'
        str_15 = module_0.fwd_normalize_address(str_14)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'U-kZ|\tez*xc(I;llK*I{'
        tuple_0 = module_0.parse_content_header(str_0)
        str_1 = module_0.fwd_normalize_address(str_0)
        tuple_1 = module_0.parse_host(str_0)
        float_0 = 1.0
        tuple_2 = (tuple_1, float_0, str_0)
        dict_0 = module_0.fwd_normalize(tuple_2)
    except BaseException:
        pass