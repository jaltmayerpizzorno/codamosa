# Automatically generated by Pynguin.
import sanic.headers as module_0

def test_case_0():
    try:
        tuple_0 = None
        str_0 = 'qin*m:7yaq*@7'
        str_1 = 'x<'
        tuple_1 = module_0.parse_host(str_1)
        dict_0 = {str_0: str_0, str_1: str_0}
        str_2 = 'Ui9j\t#;aj\\'
        tuple_2 = module_0.parse_content_header(str_2)
        optional_0 = module_0.parse_xforwarded(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        tuple_0 = module_0.parse_content_header(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ' SJGLW:!R"f5\\Am\\V:'
        tuple_0 = module_0.parse_content_header(str_0)
        int_0 = None
        tuple_1 = (str_0, int_0)
        optional_0 = module_0.parse_forwarded(int_0, tuple_1)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = None
        str_0 = 'qin*m:7yaq*@7'
        str_1 = 'x<'
        tuple_1 = module_0.parse_host(str_1)
        str_2 = '")'
        dict_0 = {str_0: str_0, str_2: str_0}
        optional_0 = module_0.parse_xforwarded(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'P5\xb0\xe5K_|l\x1b\x0f\x0f'
        dict_0 = module_0.fwd_normalize(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '[::1]'
        str_1 = module_0.fwd_normalize_address(str_0)
        str_2 = '::1'
        str_3 = module_0.fwd_normalize_address(str_2)
        str_4 = ''
        str_5 = module_0.fwd_normalize_address(str_4)
        str_6 = '1234'
        str_7 = module_0.fwd_normalize_address(str_6)
        str_8 = '_1234'
        str_9 = module_0.fwd_normalize_address(str_8)
        str_10 = 'unknown'
        str_11 = module_0.fwd_normalize_address(str_10)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "geT:gp\tQ3f,n-'\r"
        str_1 = module_0.fwd_normalize_address(str_0)
        int_0 = -664
        iterable_0 = None
        bytes_0 = module_0.format_http1_response(int_0, iterable_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'md$uk5\riqVeL'
        str_1 = module_0.fwd_normalize_address(str_0)
        int_0 = -3879
        str_2 = module_0.fwd_normalize_address(str_1)
        tuple_0 = None
        bytes_0 = module_0.format_http1_response(int_0, tuple_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = ''
        str_1 = 'wi9j\tn;j'
        tuple_0 = module_0.parse_host(str_1)
        dict_0 = module_0.fwd_normalize(str_0)
        str_2 = module_0.fwd_normalize_address(str_0)
        tuple_1 = module_0.parse_content_header(str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '*iK72|J'
        int_0 = 812
        bytes_0 = module_0.format_http1_response(int_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = None
        bytes_1 = b'Gf6Q]'
        bytes_2 = b'E\x887"'
        tuple_0 = (bytes_1, bytes_2)
        bool_0 = True
        dict_0 = {bytes_0: bool_0}
        bool_1 = True
        tuple_1 = (tuple_0, dict_0, bool_1)
        dict_1 = module_0.fwd_normalize(tuple_1)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = None
        bytes_1 = b'Gf6Q]'
        tuple_0 = (bytes_1, bytes_0)
        bool_0 = True
        dict_0 = {bytes_0: bool_0}
        tuple_1 = (tuple_0, dict_0, bool_0)
        dict_1 = module_0.fwd_normalize(tuple_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '; charset=utf-8'
        tuple_0 = module_0.parse_content_header(str_0)
        int_0 = 1723
        iterable_0 = None
        bytes_0 = module_0.format_http1_response(int_0, iterable_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'q~st'
        str_1 = (str_0, str_0)
        str_2 = 'Uoqfr'
        str_3 = (str_2, str_1)
        str_4 = 'port'
        tuple_0 = module_0.parse_host(str_2)
        str_5 = ' 80 '
        str_6 = (str_4, str_5)
        str_7 = [str_1, str_3, str_6, str_3]
        dict_0 = module_0.fwd_normalize(str_7)
        dict_1 = module_0.fwd_normalize(str_6)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'q~st'
        str_1 = '  HoSt  '
        str_2 = (str_0, str_1)
        str_3 = 'for'
        str_4 = (str_3, str_2)
        str_5 = 'port'
        str_6 = ' 80 '
        str_7 = (str_5, str_6)
        str_8 = [str_2, str_4, str_7, str_6]
        dict_0 = module_0.fwd_normalize(str_8)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'x-forwarded-for'
        var_0 = ()
        str_1 = 'REAL_IP_HEADER'
        str_2 = 'PROXIES_COUNT'
        bool_0 = False
        int_0 = 1
        var_1 = {str_1: bool_0, str_2: int_0}
        var_2 = type(str_0, var_0, var_1)
        optional_0 = module_0.parse_xforwarded(str_1, var_2)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'hT$tp'
        str_1 = {str_0: str_0, str_0: str_0}
        var_0 = str(str_0)
        var_1 = ()
        str_2 = 'REAL_IP_HEADER'
        str_3 = 'PROXIES_COUNT'
        bool_0 = True
        int_0 = 1
        var_2 = {str_2: bool_0, str_3: int_0}
        var_3 = type(var_0, var_1, var_2)
        optional_0 = module_0.parse_xforwarded(str_1, var_3)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'x-forwarded-for'
        str_1 = 'x-forarded-proto'
        str_2 = '127.0.0.1'
        str_3 = 'ttp'
        str_4 = {str_1: str_3, str_0: str_2, str_1: str_3, str_0: str_0, str_2: str_1}
        str_5 = 'Cofig'
        var_0 = str(str_5)
        var_1 = ()
        str_6 = 'REAL_IP_HEADER'
        str_7 = 'PROXIES_COUNT'
        bool_0 = False
        int_0 = -4
        var_2 = {str_6: bool_0, str_7: int_0}
        var_3 = type(var_0, var_1, var_2)
        optional_0 = module_0.parse_xforwarded(str_4, var_3)
    except BaseException:
        pass