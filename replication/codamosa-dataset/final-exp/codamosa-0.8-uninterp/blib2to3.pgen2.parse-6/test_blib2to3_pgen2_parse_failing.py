# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pgen2.parse as module_1

def test_case_0():
    try:
        str_0 = 'd,'
        tuple_0 = None
        grammar_0 = module_0.Grammar()
        int_0 = -915
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1862
        str_0 = "\n        Equivalent to 'node.children[i] = child'. This method also sets the\n        child's parent attribute appropriately.\n        "
        int_1 = None
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.shift(int_0, str_0, int_1, tuple_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -131
        list_0 = []
        int_1 = 33
        int_2 = 459
        int_3 = 675
        dict_0 = {int_0: int_1, int_2: int_3}
        tuple_0 = (list_0, dict_0)
        int_4 = -442
        str_0 = '%s: type=%r, value=%r, context=%r'
        tuple_1 = (int_0, int_0)
        tuple_2 = (str_0, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.push(int_0, tuple_0, int_4, tuple_2)
    except BaseException:
        pass

def test_case_4():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1408
        str_0 = "'|R+]edH&2XK8kJSAh"
        int_1 = True
        grammar_0 = module_0.Grammar()
        list_0 = [int_1, str_0, str_0, grammar_0]
        none_type_0 = None
        tuple_0 = (int_0, str_0, list_0, none_type_0)
        var_0 = module_1.lam_sub(grammar_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        str_0 = 'cB3!w7'
        tuple_0 = None
        int_0 = 1
        tuple_1 = (str_0, tuple_0)
        parser_0 = module_1.Parser(grammar_0, int_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 26
        parser_0 = module_1.Parser(grammar_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        grammar_0 = module_0.Grammar()
        str_0 = '\\@G0~%(bJp-fT2K^t'
        tuple_0 = None
        int_0 = 1
        tuple_1 = (str_0, tuple_0)
        parser_0 = module_1.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, str_0, tuple_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '%jjxYH}'
        grammar_0 = module_0.Grammar()
        var_0 = grammar_0.copy()
        int_0 = 1
        none_type_0 = None
        tuple_0 = None
        tuple_1 = (str_0, tuple_0)
        grammar_1 = module_0.Grammar()
        parser_0 = module_1.Parser(grammar_1)
        bool_0 = parser_0.addtoken(int_0, none_type_0, tuple_1)
    except BaseException:
        pass