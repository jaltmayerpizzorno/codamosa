# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        str_0 = "a='hello'; b=a+1; return a.split('').reverse().join('');"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '20190803'
        list_0 = []
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, list_0)
        var_0 = j_s_interpreter_0.extract_object(j_s_interpreter_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'S/%]'
        str_1 = ',?L>F'
        j_s_interpreter_0 = module_0.JSInterpreter(str_1)
        var_0 = j_s_interpreter_0.extract_object(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ":|6gyH'~\\OcjUC"
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.call_function(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = "\n    var d = function() {\n        var a = '';\n        var b = {};\n        b.length = 0x400;\n        b[0] = '\\\\u0068\\\\u0065\\\\u006c\\\\u006c\\\\u006f';\n        b[129] = '\\\\u0077\\\\u006f\\\\u0072\\\\u006c\\\\u0064';\n        for (var c = 0; c < b.length; c++) {\n            if (b[c]) {\n                a += b[c];\n            }\n        }\n        return a;\n    }();\n    "
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'd'
        var_0 = j_s_interpreter_0.call_function(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1
        j_s_interpreter_0 = module_0.JSInterpreter(int_0, int_0)
        str_0 = '(1 + 2) * 3'
        var_0 = j_s_interpreter_0.interpret_expression(str_0, int_0, int_0)
        str_1 = 'uc'
        var_1 = j_s_interpreter_0.interpret_expression(str_1, int_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ''
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        tuple_0 = (str_0,)
        dict_1 = {tuple_0: str_0, tuple_0: str_0, str_0: tuple_0, str_0: tuple_0}
        list_0 = [str_0, tuple_0]
        float_0 = 1693.1125
        j_s_interpreter_0 = module_0.JSInterpreter(float_0)
        var_0 = j_s_interpreter_0.build_function(str_0, str_0)
        j_s_interpreter_1 = module_0.JSInterpreter(dict_1, list_0)
        j_s_interpreter_2 = module_0.JSInterpreter(j_s_interpreter_1)
        var_1 = j_s_interpreter_2.interpret_statement(str_0, dict_0)
        var_2 = j_s_interpreter_2.call_function(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 's*f{;Qh~L\x0b:%&\rTKz'
        int_0 = -1530
        bool_0 = False
        j_s_interpreter_0 = module_0.JSInterpreter(bool_0)
        var_0 = j_s_interpreter_0.interpret_expression(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'b'
        int_0 = 1
        j_s_interpreter_0 = module_0.JSInterpreter(int_0, int_0)
        str_1 = '(1)'
        str_2 = '(1 + 2)'
        var_0 = j_s_interpreter_0.interpret_expression(str_2, int_0, int_0)
        str_3 = '(1 + 2) * 3'
        var_1 = j_s_interpreter_0.interpret_expression(str_3, int_0, int_0)
        var_2 = j_s_interpreter_0.interpret_expression(str_1, int_0, int_0)
        int_1 = {str_0: int_0}
        str_4 = 'b[0]'
        var_3 = j_s_interpreter_0.interpret_expression(str_4, int_1, int_1)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = None
        str_0 = 'b'
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = [int_0, int_1, int_2]
        int_4 = {str_0: int_3}
        j_s_interpreter_0 = module_0.JSInterpreter(var_0, int_4)
        str_1 = '(1)'
        var_1 = {}
        int_5 = 94
        var_2 = j_s_interpreter_0.interpret_expression(str_1, var_1, int_5)
        var_3 = {}
        var_4 = j_s_interpreter_0.interpret_expression(str_1, var_3, int_5)
        str_2 = '(1 + 2) * 3'
        var_5 = {}
        var_6 = j_s_interpreter_0.interpret_expression(str_2, var_5, int_5)
        str_3 = '1'
        int_6 = {str_1: int_1}
        var_7 = j_s_interpreter_0.interpret_expression(str_3, int_6, int_5)
        int_7 = {str_1: int_1}
        var_8 = j_s_interpreter_0.interpret_expression(str_3, int_7, int_5)
        str_4 = 'b[0]'
        int_8 = {str_0: int_1}
        var_9 = j_s_interpreter_0.interpret_expression(str_4, int_8, int_5)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'b'
        int_0 = 1
        int_1 = 2
        int_2 = [int_0, int_1, int_1]
        int_3 = {str_0: int_2}
        j_s_interpreter_0 = module_0.JSInterpreter(int_1, int_3)
        str_1 = '(1)'
        var_0 = {}
        int_4 = 106
        var_1 = j_s_interpreter_0.interpret_expression(str_1, var_0, int_4)
        str_2 = '(1 + 2)'
        var_2 = j_s_interpreter_0.interpret_expression(str_2, int_2, int_4)
        str_3 = '(1 + 2* 3'
        var_3 = {}
        var_4 = j_s_interpreter_0.interpret_expression(str_3, var_3, int_4)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '\n        var c = function(a,b){\n            return a-b;\n        }\n        var d = c(e,f);\n        '
        var_0 = {}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, var_0)
        int_0 = 6
        int_1 = 2
        int_2 = {str_0: int_0, str_0: int_1}
        str_1 = 'c(e,f)'
        var_1 = j_s_interpreter_0.interpret_expression(str_1, int_2, int_1)
    except BaseException:
        pass