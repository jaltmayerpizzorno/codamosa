# Automatically generated by Pynguin.
import blib2to3.pgen2.pgen as module_0

def test_case_0():
    try:
        pgen_grammar_0 = module_0.PgenGrammar()
        str_0 = "\\#CI{\x0bE\rF*C`:'WFR@W#"
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0, str_0)
        dict_0 = {n_f_a_state_0: str_0, n_f_a_state_0: str_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_1 = 'rule %s is ambiguous; %s is in the first sets of %s as well as %s'
        n_f_a_state_1 = module_0.NFAState()
        parser_generator_0 = module_0.ParserGenerator(str_1, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        pgen_grammar_0 = module_0.generate_grammar()
    except BaseException:
        pass

def test_case_2():
    try:
        d_f_a_state_0 = None
        str_0 = 'Kp(xps62(Jg'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_1.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '"y1d\rg'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0, n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        bool_0 = d_f_a_state_0.__eq__(n_f_a_state_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '"y1d\rg'
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0, n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        bool_0 = d_f_a_state_0.__eq__(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        n_f_a_state_0 = module_0.NFAState()
        dict_0 = {n_f_a_state_0: n_f_a_state_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = None
        str_0 = 'W>3%[\ro)zla??GK\r\t'
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: str_0}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '"y1d\rg'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_1, str_0)
        n_f_a_state_1.addarc(n_f_a_state_1)
        dict_0 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '"y1d\rg'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0, n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        dict_1 = {n_f_a_state_0: str_0, n_f_a_state_0: dict_0, n_f_a_state_1: dict_0}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_0)
        str_1 = None
        d_f_a_state_2 = module_0.DFAState(dict_0, n_f_a_state_1)
        d_f_a_state_2.addarc(d_f_a_state_1, str_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '"y1d\rg'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0, n_f_a_state_0: str_0}
        n_f_a_state_1 = None
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_1)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '"y1d\rg'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0, n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_1 = None
        n_f_a_state_0.addarc(n_f_a_state_1)
    except BaseException:
        pass

def test_case_11():
    try:
        n_f_a_state_0 = module_0.NFAState()
        int_0 = -3771
        int_1 = 1301
        int_2 = 1908
        int_3 = 0
        dict_0 = {int_0: int_0, int_0: int_1, int_0: int_2, int_2: int_3}
        n_f_a_state_1 = module_0.NFAState()
        n_f_a_state_1.addarc(n_f_a_state_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '"y1d\rg'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        d_f_a_state_0.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        n_f_a_state_2.addarc(n_f_a_state_0, str_0)
        d_f_a_state_1 = module_0.DFAState(dict_0, n_f_a_state_0)
        str_1 = 'x\\2zR,yGH>Mv7a'
        parser_generator_0 = module_0.ParserGenerator(str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '"y1d\rg'
        n_f_a_state_0 = module_0.NFAState()
        n_f_a_state_0.addarc(n_f_a_state_0)
        n_f_a_state_0.addarc(n_f_a_state_0)
        dict_0 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0}
        d_f_a_state_0 = module_0.DFAState(dict_0, n_f_a_state_0)
        n_f_a_state_1 = module_0.NFAState()
        d_f_a_state_0.addarc(d_f_a_state_0, str_0)
        dict_1 = {n_f_a_state_1: n_f_a_state_1, n_f_a_state_1: n_f_a_state_0}
        d_f_a_state_1 = module_0.DFAState(dict_1, n_f_a_state_1)
        d_f_a_state_1.unifystate(d_f_a_state_0, d_f_a_state_0)
        n_f_a_state_2 = module_0.NFAState()
        n_f_a_state_3 = module_0.NFAState()
        d_f_a_state_0.unifystate(d_f_a_state_1, d_f_a_state_1)
        dict_2 = {n_f_a_state_0: n_f_a_state_0, n_f_a_state_0: str_0}
        d_f_a_state_2 = module_0.DFAState(dict_2, n_f_a_state_0)
        bytes_0 = b'3\xb2\x0f'
        bool_0 = d_f_a_state_2.__eq__(bytes_0)
    except BaseException:
        pass