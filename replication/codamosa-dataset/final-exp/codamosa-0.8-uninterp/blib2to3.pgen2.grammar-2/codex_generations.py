

# Generated at 2022-06-13 17:49:49.252894
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.dump("/tmp/Grammar.test_Grammar_dump.pkl")

# Generated at 2022-06-13 17:49:59.921609
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import parse
    from .conv import convert_grammar
    from .pgen import generate_grammar
    from . import pgen2

    g = Grammar()

    # Check using pgen2-generated tables
    pgen2.driver.parse_grammar(g, "Grammar/Grammar", convert_grammar)

    tmp = tempfile.NamedTemporaryFile(delete=False)
    g.dump(tmp.name)

    g2 = Grammar()
    g2.load(tmp.name)

    assert g.keywords == g2.keywords
    assert g.labels == g2.labels
    assert g.number2symbol == g2.number2symbol
    assert g.symbol2number == g2.symbol2number
    assert g.symbol2label == g2

# Generated at 2022-06-13 17:50:10.444759
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    assert g.start == 256
    assert g.labels == [(0, "EMPTY")]
    assert g.tokens == {}
    assert g.keywords == {}
    assert g.states == []
    assert g.dfas == {}
    assert g.symbol2number == {}
    assert g.number2symbol == {}
    assert g.symbol2label == {}

    # __dict__ defined only mypyc will not be set in the class definition
    # because it is generated by mypyc
    try:
        dict_attr = g.__dict__
    except AttributeError:
        dict_attr = g.__getstate__()

# Generated at 2022-06-13 17:50:20.529399
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.symbol2number = {"a": 1}
    g.number2symbol = {1: "a"}
    g.start = 257
    g.states = [[(1,2), (2,3)], [(3,4), (4,5)]]
    g.dfas = {1: (g.states[0], {1: 1, 2: 2}), 2: (g.states[1], {2: 3, 3: 4})}
    g.labels = [(0, ""), (1, None), (2, None), (3, None), (4, None)]
    g.keywords = {"for": 3}
    g.tokens = {4: 4}
    g.symbol2label = {"for": 3}
    g.async_keywords = False

# Generated at 2022-06-13 17:50:29.826299
# Unit test for method load of class Grammar
def test_Grammar_load():
    grammar = Grammar()
    grammar.load(os.path.join(os.path.dirname(__file__), "Grammar.pkl"))
    print('grammar.symbols = ', grammar.symbols)
    print('grammar.number2symbol = ', grammar.number2symbol)

# Generated at 2022-06-13 17:50:36.086244
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    """
    Test Grammar.dump() (on a dummy Grammar object) for valid pickle
    files.
    """
    # Dummy Grammar object
    g = Grammar()

    # Pickle it
    temp = tempfile.NamedTemporaryFile()
    g.dump(temp.name)
    temp.seek(0)

    # Load the pickle file
    with open(temp.name, 'rb') as f:
        d = pickle.load(f)

    # Check that the pickle file loads to a dict with
    # valid keys
    assert(isinstance(d, dict))

# Generated at 2022-06-13 17:50:42.596908
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import unittest.mock as mock
    import io

    pickle_mock = mock.Mock()
    with mock.patch("pickle.HIGHEST_PROTOCOL") as pickle_protocol:
        protocol = 12345
        pickle_protocol.return_value = protocol
        g = Grammar()
        g.dump("myfilename")
    pickle_mock.assert_called_once_with(
        g.__getstate__(), io.open("myfilename", "wb"), protocol
    )

# Generated at 2022-06-13 17:50:49.766069
# Unit test for method dump of class Grammar

# Generated at 2022-06-13 17:50:56.908298
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.start = 257
    g.symbol2number = {"foo": 258}
    g.number2symbol = {258: "foo"}
    g.states = "states"
    g.dfas = {"dfas": 3}
    g.labels = "labels"
    g.keywords = 1
    g.tokens = 1
    g.symbol2label = 1
    temp_file = tempfile.NamedTemporaryFile()
    g.dump(temp_file.name)
    g2 = Grammar()
    g2.load(temp_file.name)
    assert g2.start == g.start
    assert g2.symbol2number == g.symbol2number
    assert g2.number2symbol == g.number2symbol
    assert g

# Generated at 2022-06-13 17:50:59.349347
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.dump("temporary_file_delete_me")

# vim: set ft=python ts=4 sts=4 sw=4 et tw=79:

# Generated at 2022-06-13 17:51:04.775936
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    filename = '/tmp/test_Grammar_dump'
    if os.path.exists(filename):
        os.unlink(filename)
    gr = Grammar()
    gr.dump(filename)
    assert os.path.exists(filename)
    os.unlink(filename)



# Generated at 2022-06-13 17:51:09.014039
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    g.load("./grammar.pickle")
    # g.loads(b"")
    # g.copy()
    g.report()


if __name__ == "__main__":
    test_Grammar_load()

# Generated at 2022-06-13 17:51:21.018517
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import pickle
    d = {
        "symbol2number": {"hello": 1},
        "number2symbol": {1: "hello"},
        "states": [[[(1, 1)], [(1, 2), (2, 3)]]],
        "dfas": {1: ([[(1, 1)], [(1, 2), (2, 3)]], {2: 3})},
        "labels": [(0, "EMPTY"), (1, "hello"), (2, None)],
        "keywords": {"hello": 2},
        "tokens": {1: 1},
        "symbol2label": {"hello": 1},
        "start": 256,
        "async_keywords": True,
    }
    with tempfile.NamedTemporaryFile(delete=False) as f:
        pick

# Generated at 2022-06-13 17:51:29.810777
# Unit test for method load of class Grammar
def test_Grammar_load():
    from .tokenize import generate_tokens

    g = Grammar()
    filename = './build_grammar.py'
    with open(filename, 'r') as f:
        fstring = f.read()
    fstring = fstring.replace("generate_tokens('", "generate_tokens(r'")
    fstring = fstring.replace("'):", "')):")
    exec(fstring)
    ass = Grammar()
    ass.loads(g)
    assert g == ass

# Generated at 2022-06-13 17:51:34.580861
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    g.symbol2number = {"foo": 42}
    f = tempfile.NamedTemporaryFile()
    g.dump(f.name)
    g.symbol2number = {}
    g.load(f.name)
    assert g.symbol2number == {"foo": 42}, g.symbol2number


if __name__ == "__main__":
    import sys

    g = Grammar()
    g.load(sys.argv[1])
    g.report()

# Generated at 2022-06-13 17:51:43.111887
# Unit test for method load of class Grammar
def test_Grammar_load():
    import unittest

    class TestCase(unittest.TestCase):
        def setUp(self):
            self.maxDiff = None

        def test_loads_dict_attr(self):
            g = Grammar()
            attrs = {
                "symbol2number": {"a": 257},
                "dfas": {256: ([], {},), 257: ([], {},)},
                "labels": [(0, "EMPTY"), (1, "a")],
                "async_keywords": False,
            }
            g.loads(pickle.dumps(attrs))
            self.assertEqual(g.symbol2number["a"], 257)
            self.assertEqual(len(g.dfas), 2)

# Generated at 2022-06-13 17:51:53.792138
# Unit test for method load of class Grammar
def test_Grammar_load():
    import mypy.myunit
    from mypy.parse.pgen2 import python_grammar
    from mypy.parse.pgen2 import tokenizer

    # read the grammar file; this will be a string
    f = open(python_grammar, "r")
    gstr = f.read()
    f.close()

    # define a tokenizer that only returns newlines
    def fake_tokenizer(s):
        return [(token.NAME, "\n", (1, 1)), (token.ENDMARKER, "", (1, 1))]

    # create a grammar, using the fake tokenizer
    old_tokenizer = tokenizer
    tokenizer = fake_tokenizer
    g = python_grammar  # type: Grammar
    g = Grammar()
    g.initialize(gstr)

# Generated at 2022-06-13 17:52:04.370713
# Unit test for method load of class Grammar
def test_Grammar_load():

    def check_values(grammar):
        assert grammar.keywords == {'if': 268, 'for': 269, 'return': 270}

# Generated at 2022-06-13 17:52:09.201593
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import grammar
    from . import token
    from . import tokenize
    from io import StringIO
    from . import parse


    # test the tokenize module
    tokstream = tokenize.generate_tokens(StringIO("def f(x): return x+1").readline)
    for tok in tokstream:
        print(tok)

    g = grammar.Grammar()
    p = parse.Parser(g, "f(x)")
    print(next(p.parse_toplevel()))

if __name__ == "__main__":
    test_Grammar_dump()

# Generated at 2022-06-13 17:52:17.444553
# Unit test for method load of class Grammar
def test_Grammar_load():
    grammar = Grammar()

# Generated at 2022-06-13 17:52:29.177161
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import os
    import pickle
    from io import BytesIO
    from test import support

    # Make sure that pickling and unpickling a Grammar works
    def make_grammar_pickle(filename: Path) -> bytes:
        with open(filename, "rb") as f:
            d = pickle.load(f)
        # Since this is testing low-level pickling, we use the lowest
        # possible protocol.
        s = pickle.dumps(d, pickle.HIGHEST_PROTOCOL)
        # A byte array is needed to feed it to loads()
        return s

    with support.DirsOnSysPath("Lib"):
        # Create a pickled representation of the grammar tables
        pkl = make_grammar_pickle("lib2to3/Grammar.txt")

        # Check

# Generated at 2022-06-13 17:52:37.957411
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # Create a temporary grammar file to be used during testing.
    tmpdir = tempfile.TemporaryDirectory()
    # tempdir.name gives the full path of the created directory
    filename = tmpdir.name + os.sep + "Grammar_dump"

    test_grammar = Grammar()
    # Create a temporary pickle file to be used during testing.
    temp_pickle = tempfile.NamedTemporaryFile(
        dir=os.path.dirname(filename), delete=False
    )
    # pickle.HIGHEST_PROTOCOL is the highest protocol version available
    pickle.dump(
        test_grammar.__dict__,
        temp_pickle,
        pickle.HIGHEST_PROTOCOL,
    )

    # Call dump() method to create Grammar.pkl file


# Generated at 2022-06-13 17:52:43.267021
# Unit test for method load of class Grammar
def test_Grammar_load():
    # astroid uses this function to ensure we're able to load tables in a different Python version.
    # There are no Python versions older than 3.7 in our supported Python versions. It is not
    # necessary to test loading on Python older than 3.7.
    try:
        import pickle
    except ImportError:
        import pickletools
    import os
    from _astroid_load_module import _astroid_load_module

    # pylint: disable=protected-access

    # Manually load a table using the astroid.parse module.
    path = os.path.dirname(__file__)  # type: ignore
    mod = _astroid_load_module("os", path, "")
    assert mod.name == "os"

    # Write the loaded table out to a file and then reload it.

# Generated at 2022-06-13 17:52:53.681650
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import _ast
    import unittest
    from pgen import pgen
    from mypyc.common import SRC_SUFFIX

    # Create a dummy Python AST
    dummy_filename = os.path.join(os.path.dirname(__file__), "dummy.py" + SRC_SUFFIX)
    with open(dummy_filename, "w") as f:
        f.write('if 1:\n    pass\n')
    module = _ast.parse(dummy_filename)

    class TestGrammar(unittest.TestCase):
        def setUp(self):
            self.grammar = pgen.Generator().generate(module)

    suite = unittest.makeSuite(TestGrammar)
    result = unittest.TextTestRunner().run(suite)


# Generated at 2022-06-13 17:53:04.279280
# Unit test for method load of class Grammar
def test_Grammar_load():
    from . import python_grammar, python_grammar_no_print_statement

    def test_grammar(grammar: bytes) -> None:
        g = Grammar()
        g.loads(grammar)
        assert g.number2symbol[g.start] == "file_input"
        assert g.number2symbol[256] == "file_input"
        assert g.symbol2number["file_input"] == 256
        assert g.symbol2number["stmt"] == 257
        assert g.symbol2number["expr_stmt"] == 258
        assert g.symbol2number["print_stmt"] == 259

# Generated at 2022-06-13 17:53:09.997292
# Unit test for method load of class Grammar
def test_Grammar_load():
    from . import token, tokenize

    g = Grammar()
    g.load("Grammar.pickle")
    for op, tok in opmap.items():
        print("%-2s -> %-20s %-20s" % (op, token.tok_name[tok], tokenize.tok_name[tok]))
    g.report()


if __name__ == "__main__":
    test_Grammar_load()

# Generated at 2022-06-13 17:53:13.819287
# Unit test for method load of class Grammar
def test_Grammar_load():
    grammar = Grammar()
    assert grammar.symbol2number == {}
    assert grammar.number2symbol == {}
    assert grammar.states == []
    assert grammar.dfas == {}
    assert grammar.labels == [(0, "EMPTY")]
    assert grammar.keywords == {}
    assert grammar.tokens == {}
    assert grammar.symbol2label == {}
    assert grammar.start == 256

# Generated at 2022-06-13 17:53:19.441660
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import lib2to3_parse  # type: ignore
    from .pgen2.parse import driver  # type: ignore

    import os
    import pickle

    path = lib2to3_parse.__file__
    path = os.path.dirname(path)
    path = os.path.join(path, "Grammar3.7-fix.pkl")
    if os.path.exists(path):
        os.unlink(path)
    pickle_path = path

    g = driver.load_grammar(pickle_path)

# Generated at 2022-06-13 17:53:25.640997
# Unit test for method load of class Grammar
def test_Grammar_load():
    def test(pkl):
        g = Grammar()
        g.loads(pkl)
        assert g.symbol2number == {'test': 10, 'foo': 20}
        assert g.number2symbol == {10: 'test', 20: 'foo'}
        assert g.dfas == {10: ([[(1, 1)], [(0, 1)], [(1, 2)]], {1: 1}),
                          20: ([[(1, 3)], [(1, 4)], [(0, 4)]], {3: 1})}
        assert g.labels == [(0, "EMPTY"), (1, None)]
        assert g.keywords == {'if': 1}
        assert g.tokens == {1: 1}
        assert g.symbol2label == {'if': 1}


# Generated at 2022-06-13 17:53:33.171890
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import marshal
    g = Grammar()
    g.symbol2number = {'foo': 256}
    g.number2symbol = {256: 'foo'}
    g.states = [[[(0, 0)], [(1, 0)]]]
    g.dfas = {256: ([[(0, 0), (1, 1)]], {0: 1})}
    g.labels = [(0, None), (1, 'foo')]
    g.keywords = {'foo': 1}
    g.tokens = {1: 1}
    g.symbol2label = {'foo': 1}
    g.start = 256
    g.async_keywords = False
    g.dump('g.pickle')
    g.load('g.pickle')
    # try also with with

# Generated at 2022-06-13 17:53:40.981577
# Unit test for method load of class Grammar
def test_Grammar_load():
    import pytest
    with pytest.raises(TypeError):
        g = Grammar()
        g.load(b"x")

# Generated at 2022-06-13 17:53:44.186315
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.dump("test.pkl")
    
if __name__ == "__main__":
    test_Grammar_dump()

# Generated at 2022-06-13 17:53:57.661402
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from .conv import convert
    from .pgen import generate
    import os

    # Simple grammar to parse a few lines of Python
    GRAMMAR_TEXT = """
    atom: [ '(' pycontents ')' | NAME | NUMBER ]
    pycontents: [ atom | pycontents ',' atom ]*
    """

    # Convert the grammar text and write to a pickle file
    g = Grammar()
    pkl = convert(GRAMMAR_TEXT)
    g.loads(pkl)

    # Create the tempfile before the pickle
    fd, filename = tempfile.mkstemp(suffix=".pkl", text=False)

# Generated at 2022-06-13 17:53:59.667932
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import pgen2

    g = pgen2.driver.load_grammar("Grammar.txt")
    g.dump()

# Generated at 2022-06-13 17:54:07.289315
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    g.dfas[1] = ([], {})
    pickle_file = os.path.join(os.path.dirname(__file__), "Grammar.pkl")
    with open(pickle_file, "rb") as f:
        d = pickle.load(f)
    g._update(d)
    for key in d.keys():
        assert getattr(g, key) == d[key]

# Generated at 2022-06-13 17:54:11.489964
# Unit test for method dump of class Grammar
def test_Grammar_dump():

    grammar = Grammar()

    # Verify that it is possible to dump the grammar to a pickle file
    grammar.dump("grammar_dump.pkl")
    # Verify that it is possible to load the dumped grammar from a pickle file
    grammar.load("grammar_dump.pkl")

    # Cleanup
    os.remove("grammar_dump.pkl")

# Generated at 2022-06-13 17:54:19.482742
# Unit test for method load of class Grammar
def test_Grammar_load():
    def custom_load(g: Grammar, fn: Path) -> None:
        with open(fn, "rb") as f:
            d = pickle.load(f)
        g._update(d)

    g = Grammar()
    with tempfile.NamedTemporaryFile(
        dir=os.path.dirname(__file__), delete=False
    ) as f:
        pickle.dump({"test": 1}, f, pickle.HIGHEST_PROTOCOL)
    custom_load(g, f.name)
    assert g.test == 1
    os.unlink(f.name)

# Generated at 2022-06-13 17:54:30.406409
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # Create a simple grammar
    gr = Grammar()
    gr.start = 257
    gr.symbol2number = {"STMT": 257, "expr+STMT": 258}
    gr.number2symbol = {257: "STMT", 258: "expr+STMT"}
    gr.labels = [
        (257, None),
        (token.NAME, "STMT"),
        (token.PLUS, "+"),
        (token.NEWLINE, "\n"),
        (0, None),
    ]
    gr.keywords = {"STMT": 1}
    gr.tokens = {}
    gr.symbol2label = {"STMT": 1}

    gr.states = [[(1, 2), (3, 1), (0, 4)]]

# Generated at 2022-06-13 17:54:35.966206
# Unit test for method load of class Grammar
def test_Grammar_load():
    # Created by the function test_Grammar_dump
    filename = os.sep.join(["untokenize", "test", "data", "Grammar_dump.pickle"])
    if not os.path.exists(filename):
        print("File not found:", filename)
        return
    g = Grammar()
    g.load(filename)
    # Add test cases here


# Generated at 2022-06-13 17:54:42.714242
# Unit test for method load of class Grammar
def test_Grammar_load():
    # This is not a real unit test as it loads the grammar tables.
    # This is a debugging aid to make sure that the grammar tables
    # load properly.  They should be checked into the repository
    # already loaded, so this shouldn't be needed in normal use.

    g = Grammar()
    try:
        g.load("Grammar.txt")
    except IOError:
        print("Couldn't load grammar tables; this is normal")
    else:
        g.report()


if __name__ == "__main__":
    test_Grammar_load()

# Generated at 2022-06-13 17:54:55.541622
# Unit test for method load of class Grammar
def test_Grammar_load():
    import tempfile, os
    def check(obj):
        assert obj.symbol2number == {"a" : 256, "b" : 257, "c" : 258}
        assert obj.number2symbol == {256 : "a", 257 : "b", 258 : "c"}
        assert obj.start == 256
        assert obj.dfas == {256 : ([], {1 : 1})}
        assert obj.states == [[(1, 1)]]
        assert obj.labels == [(0, "EMPTY"), (1, None)]
    obj = Grammar()
    for ext in ["", ".xz"]:
        with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as f:
            obj.dump(f.name)
    obj.symbol2number = obj.number2symbol = {}
   

# Generated at 2022-06-13 17:55:06.435731
# Unit test for method load of class Grammar
def test_Grammar_load():
    def _test(_1, _2, _3, _4):
        return _1 + _2 + _3 + _4
    class DummyClass(object):
        def __getstate__(self):
            return {'_1': 1, '_2': 2, '_3': 3, '_4': 4}
    for cls in [DummyClass, Grammar]:
        grammar = cls()
        data = pickle.dumps(grammar, pickle.HIGHEST_PROTOCOL)
        grammar.loads(data)
        _test(**grammar.__dict__)
        assert grammar.__dict__ == {'_1': 1, '_2': 2, '_3': 3, '_4': 4}
        grammar = cls()

# Generated at 2022-06-13 17:55:10.951409
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from .conv import convert

    grammar = Grammar()
    try:
        convert(grammar)
    except OSError:
        pass
    else:
        grammar.dump(tempfile.mktemp())

# Generated at 2022-06-13 17:55:22.825593
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    # Verify that Grammar.dump can write to a named file.
    g = Grammar()
    g.symbol2number = {'STRING': 258, 'NAME': 257}
    g.number2symbol = {257: 'NAME', 258: 'STRING'}
    g.states = [[[(0, 0)]]]
    g.dfas = {257: ([[(258, 0)]], {258: 1})}
    g.labels = [(0, None), (0, 'STRING')]
    g.keywords = {}
    g.tokens = {}
    g.symbol2label = {}
    g.start = 257

    # See performance testing in the test_grammar module.
    g.dump("dump_test")

    g2 = Grammar()

# Generated at 2022-06-13 17:55:31.503001
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    grammar = Grammar()
    grammar.start = 256
    grammar.keywords = {
        "async": 257,
    }
    grammar.labels = [
        (0, "EMPTY"),
        (token.NEWLINE, None),
        (token.INDENT, None),
        (token.DEDENT, None),
        (token.NAME, None),
        (257, "async"),
        (258, "await"),
    ]
    grammar.tokens = {
        token.NEWLINE: 1,
        token.INDENT: 2,
        token.DEDENT: 3,
        token.NAME: 4,
        257: 5,
        258: 6,
    }
    grammar.symbol2number = {
        "<start>": 256
    }

# Generated at 2022-06-13 17:55:39.633996
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from .parse import ParseError

    # Set-up objects
    filename = "tests/Grammar_dump.pkl"
    parser = Grammar()
    parser.symbol2number = {"aaa": 10, "bbb": 20, "ccc": 30}
    parser.number2symbol = {10: "aaa", 20: "bbb", 30: "ccc"}
    parser.states = [[[(10, 20)]]]
    parser.dfas = {10: ([[(10, 20)]], {0: 20}), 20: ([[(10, 20)]], {0: 20})}
    parser.labels = [(10, "a"), (20, "b"), (30, "c")]
    parser.keywords = {"a": 10}
    parser.tokens = {"a": 10}
   

# Generated at 2022-06-13 17:55:49.662774
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import conv

    g = conv.Converter(Grammar).grammar
    fn = os.path.join(os.path.dirname(__file__), "Grammar.pkl")
    g.dump(fn)
    g2 = Grammar()
    g2.load(fn)
    assert g2.start == g.start
    assert g2.async_keywords == g.async_keywords
    assert g2.symbol2number == g.symbol2number
    assert g2.number2symbol == g.number2symbol
    assert g2.dfas == g.dfas
    assert g2.keywords == g.keywords
    assert g2.tokens == g.tokens
    assert g2.symbol2label == g.symbol2label
   

# Generated at 2022-06-13 17:55:52.354562
# Unit test for method load of class Grammar
def test_Grammar_load():
    grammar = Grammar()
    # Try to pickle an arbitrary object
    arbitrary = {'a': 1, 'b': 2, 'c': 3}
    grammar.loads(pickle.dumps(arbitrary))
    assert grammar.symbol2number == arbitrary

# Generated at 2022-06-13 17:56:00.493312
# Unit test for method load of class Grammar
def test_Grammar_load():
    grammar = Grammar()

    class GrammarTest(Grammar):
        def load(self, filename):
            Grammar.load(self, filename)

# Generated at 2022-06-13 17:56:09.848878
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    class DummyGrammar(Grammar):
        def __init__(self):
            super().__init__()
            self.symbol2number = {}
            self.number2symbol = {}
            self.states = []
            self.dfas = {}
            self.labels = [(0, "EMPTY")]
            self.keywords = {}
            self.tokens = {}
            self.symbol2label = {}
            self.start = 256
            self.async_keywords = False

    DummyGrammar().dump("./test/dummy.pickle")

# Generated at 2022-06-13 17:56:22.831311
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    assert g.symbol2number == {}
    assert g.number2symbol == {}
    assert g.states == []
    assert g.dfas == {}
    assert g.labels == [(0, "EMPTY")]
    assert g.keywords == {}
    assert g.tokens == {}
    assert g.symbol2label == {}
    assert g.start == 256
    assert g.async_keywords == False

    g.symbol2number = {"a": 1, "b": 2, "c": 3}
    g.number2symbol = {1: "a", 2: "b", 3: "c"}
    g.states = [ "a", "b", "c" ]
    g.dfas = {"d": "e"}

# Generated at 2022-06-13 17:56:25.328154
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    """Unit test for method dump of class Grammar."""
    g1 = Grammar()
    g1.dump("temp1.dat")
    g2 = Grammar()
    g2.load("temp1.dat")

# Generated at 2022-06-13 17:56:30.722581
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import pickle
    from io import BytesIO

    g = Grammar()
    g.symbol2number = {"a": 1, "b": 2, "c": 3}
    g.dump(BytesIO())

    g = Grammar()
    g.symbol2number = {"a": 1, "b": 2, "c": 3}
    buf = BytesIO()
    g.dump(buf)
    buf.seek(0)
    assert pickle.load(buf) == g.__dict__

    buf = BytesIO()
    g.dump(buf)
    buf.seek(0)
    assert pickle.load(buf) == g.__dict__

# Generated at 2022-06-13 17:56:40.197147
# Unit test for method load of class Grammar
def test_Grammar_load():
    import sys
    import os
    import py_compile
    import shutil
    from .pgen2 import driver
    import tempfile
    test_path = os.path.abspath(os.path.dirname(__file__))
    original_grammar = os.path.join(test_path, "Grammar.txt")
    temporary_directory = tempfile.mkdtemp(
        prefix='tmp_Grammar_load', suffix='', dir=None, text=False
    )
    temporary_grammar = os.path.join(temporary_directory, "Grammar.txt")
    shutil.copyfile(original_grammar, temporary_grammar)
    py_compile.compile(temporary_grammar)

# Generated at 2022-06-13 17:56:50.328783
# Unit test for method load of class Grammar

# Generated at 2022-06-13 17:56:58.818739
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import pickle
    from io import BytesIO

    g = Grammar()
    g.symbol2number = {'foo': 256, 'bar': 257}
    g.number2symbol = {256: 'foo', 257: 'bar'}
    g.states = [
        [
            [(257, 0), (0, 1)],   # state 0
            [(0, 1)],             # state 1
        ],
        [
            [(0, 2)],             # state 0
            [(257, 2), (0, 3)],   # state 1
            [(0, 3)],             # state 2
            [(257, 3),(0, 4)],    # state 3
            [(0, 4)],             # state 4
        ],
    ]

# Generated at 2022-06-13 17:57:00.013564
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    grammar = Grammar()
    grammar.dump('test.pickle')
    assert True


# Generated at 2022-06-13 17:57:14.857113
# Unit test for method load of class Grammar
def test_Grammar_load():
    def check(s: str) -> None:
        assert s == s.replace("\r\n", "\n")

    path = os.path.join(os.path.dirname(__file__), "Grammar.dump")
    g = Grammar()
    g.load(path)

    assert len(g.labels) == 542
    assert g.labels[0] == (0, "EMPTY")

    assert len(g.states) == 95
    assert len(g.states[0]) == 46
    assert g.states[0][0] == (1, 1)
    assert g.states[0][1] == (2, 2)
    assert g.states[0][2] == (3, 3)
    assert g.states[0][3] == (4, 4)

# Generated at 2022-06-13 17:57:24.324462
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    gram = Grammar()

    gram.symbol2number = {
        "foo": 1,
    }
    gram.number2symbol = {
        1: "foo"
    }
    gram.dfas = {
        1: ([1, 2, 3], 4)
    }
    gram.keywords = {
        "key": 3
    }
    gram.tokens = {
        5: 6
    }
    gram.labels = [(4, 5)]

    gram.dump("tests/data/gramdump")


# Generated at 2022-06-13 17:57:26.597967
# Unit test for method load of class Grammar
def test_Grammar_load():
    filename = __file__.replace(".py", ".pkl")
    g = Grammar()
    g.load(filename)
    g.report()

if __name__ == "__main__":
    test_Grammar_load()

# Generated at 2022-06-13 17:57:38.403154
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from .parse import Parser
    from .pgen2 import driver

    g = driver.load_grammar("Grammar.txt")
    g.dump("Grammar.tables")
    g2 = Grammar()
    g2.load("Grammar.tables")
    p = Parser(g2)

# Generated at 2022-06-13 17:57:42.663075
# Unit test for method load of class Grammar
def test_Grammar_load():
    class A(object):
        def __init__(self):
            self.a = 1

    class B(A):
        def __init__(self):
            self.b = 2

    Grammar.loads(B())

# Generated at 2022-06-13 17:57:52.777622
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    filename = "test_Grammar_dump.pkl"
    g = Grammar()
    try:
        g.dump(filename)
        with open(filename, "rb") as f:
            d = pickle.load(f)
    finally:
        if os.path.exists(filename):
            os.remove(filename)
    assert d == {"symbol2number": {}, "number2symbol": {}, "states": [], "dfas": {},
        "labels": [(0, "EMPTY")], "keywords": {}, "tokens": {}, "symbol2label": {},
        "start": 256}

# Generated at 2022-06-13 17:58:00.315821
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    if g.load("/does/not/exist") is not None:
        raise RuntimeError("failed to report failure")
    # Opening a pickle file with content not generated by method save
    # of class Grammar raises a TypeError
    with open("/does/not/exist", "wb") as f:
        f.write(b"\x80\x02}")
    try:
        g.load("/does/not/exist")
    except TypeError:
        pass
    else:
        raise RuntimeError("failed to detect bad pickle file")


# Generated at 2022-06-13 17:58:06.292833
# Unit test for method load of class Grammar
def test_Grammar_load():
    """Unit test for method load of class Grammar."""
    with open("Lib/test/grammarTables.pkl", "rb") as f:
        d = pickle.load(f)
    g = Grammar()
    g.load(d)

# Generated at 2022-06-13 17:58:09.990454
# Unit test for method load of class Grammar
def test_Grammar_load():
    g1, g2 = Grammar(), Grammar()
    assert g1 != g2  # make sure it is not accidental identity
    with tempfile.TemporaryDirectory() as tempdir:
        g1.symbol2number['SYMBOL'] = 42
        g1.dump(os.path.join(tempdir, 'pgen.bnf'))
        assert g1 != g2
        g2.load(os.path.join(tempdir, 'pgen.bnf'))
    assert g1 == g2

# Generated at 2022-06-13 17:58:16.722278
# Unit test for method load of class Grammar
def test_Grammar_load():
    import unittest
    import pickle
    import io

    stream = io.BytesIO(b"\x80\x04\x95\x03\x00\x00\x00\x00\x00\x00\x00o.")
    class TestGrammar(unittest.TestCase):
        def test_load(self):
            grammar = Grammar()
            grammar.load(stream)
            self.assertEqual(grammar.symbol2number, {})
    unittest.main()

# Generated at 2022-06-13 17:58:27.271198
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    g = Grammar()
    g.start = 0
    g.symbol2number = {"START": 0}
    g.number2symbol = {0: "START"}
    g.tokens = {1: 2}
    g.keywords = {"def": 2}
    t = token.token(0, "x")
    g.labels = [(0, "EMPTY"), (1, t), (2, "def")]
    g.dfas = {0: ([[(1, 1)]], {0: 1})}
    g.states = [[[(1, 1)]]]

    with tempfile.NamedTemporaryFile(delete=False) as f:
        g.dump(f.name)

    h = Grammar()
    h.load(f.name)

# Generated at 2022-06-13 17:58:33.539001
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    gram = Grammar()
    gram.load(grammar_pickle)
    gram.dump(grammar_pickle)
    new_gram = Grammar()
    new_gram.load(grammar_pickle)
    assert gram.symbol2number == new_gram.symbol2number
    assert gram.number2symbol == new_gram.number2symbol
    assert gram.states == new_gram.states
    assert gram.dfas == new_gram.dfas
    assert gram.labels == new_gram.labels
    assert gram.keywords == new_gram.keywords
    assert gram.tokens == new_gram.tokens
    assert gram.symbol2label == new_gram.symbol2label
    assert gram.start == new_gram.start
    assert gram.async_keywords

# Generated at 2022-06-13 17:58:41.320254
# Unit test for method load of class Grammar
def test_Grammar_load():
    """Unit test for method Grammar.load"""

    class Base:
        def __init__(self):
            self.a = 1

    class Derived(Base):
        def __init__(self):
            Base.__init__(self)
            self.b = 2

    derived = Derived()
    del derived.__class__
    derived.__class__ = Base
    assert derived.b == 2
    assert hasattr(derived, "__dict__")

    g = Grammar()
    g.dump("test.pkl")
    gg = Grammar()
    gg.load("test.pkl")
    assert gg.number2symbol == g.number2symbol


# Generated at 2022-06-13 17:59:05.128465
# Unit test for method load of class Grammar
def test_Grammar_load():
    # Test loading grammar from a pickle file
    g = Grammar()
    g.dump("python3.6.gram")
    g2 = Grammar()
    g2.load("python3.6.gram")

    assert g.symbol2number == g2.symbol2number
    assert g.number2symbol == g2.number2symbol
    assert g.states == g2.states
    assert g.dfas == g2.dfas
    assert g.labels == g2.labels
    assert g.keywords == g2.keywords
    assert g.tokens == g2.tokens
    assert g.symbol2label == g2.symbol2label
    assert g.start == g2.start
    assert g.async_keywords == g2.async_keywords

# Generated at 2022-06-13 17:59:09.442765
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    g.states.append([])  # or dump raises an exception
    g.dump("Grammar.test")
    h = Grammar()
    h.load("Grammar.test")
    os.remove("Grammar.test")

# Generated at 2022-06-13 17:59:13.507478
# Unit test for method load of class Grammar
def test_Grammar_load():
    g = Grammar()
    n = len(g.symbol2number)
    g.load(__file__.replace(".py", ".pkl"))
    assert len(g.symbol2number) > n


if __name__ == "__main__":
    test_Grammar_load()

# Generated at 2022-06-13 17:59:20.873639
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    from . import conv
    from . import pgen2

    g = Grammar()
    conv.convert_grammar(g, pgen2.pgen2_grammar, "Grammar")
    g.dump(os.path.join(tempfile.gettempdir(), "Grammar.dump"))

    g2 = Grammar()
    g2.load(os.path.join(tempfile.gettempdir(), "Grammar.dump"))
    assert g == g2

# Generated at 2022-06-13 17:59:30.596945
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    prog = """
    print(1)
    """
    # Create an instance of the Python grammar
    from .pgen2 import driver

    g = driver.load_grammar("Grammar/Grammar")
    # Create a parser
    p = g.parser(debug=0)

    # Parse some input
    p.parse(prog)
    # Save the parsing tables
    g.dump(tempfile.mktemp(prefix="grammar"))

    # Determine if the parsing tables are round-trip convertable
    h = Grammar()
    h.loads(g.dumps())


if __name__ == "__main__":
    import sys

    if len(sys.argv) == 2:
        g = Grammar()
        g.load(sys.argv[1])
        g.report()

# Generated at 2022-06-13 17:59:41.340916
# Unit test for method dump of class Grammar
def test_Grammar_dump():
    import unittest
    from . import grammar, conv
    from .pgen2 import driver

    class GrammarDumpTests(unittest.TestCase):
        def test_pickle_dump_load(self):
            self.maxDiff = None
            grammar_pickle = os.path.join(conv.BASE_DIR, "Grammar.pickle")
            try:
                g = grammar.Grammar()
                g.load(grammar_pickle)
            except (pickle.PickleError, ValueError, EOFError):
                self.skipTest(
                    "Pickle file %s could not be loaded. Try python -m test_grammar to generate it."
                    % grammar_pickle
                )