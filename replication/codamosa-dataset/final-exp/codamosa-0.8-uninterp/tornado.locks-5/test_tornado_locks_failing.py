# Automatically generated by Pynguin.
import tornado.locks as module_0
import builtins as module_1
import tornado.ioloop as module_2

def test_case_0():
    try:
        condition_0 = module_0.Condition()
    except BaseException:
        pass

def test_case_1():
    try:
        event_0 = module_0.Event()
        awaitable_0 = event_0.wait()
    except BaseException:
        pass

def test_case_2():
    try:
        optional_0 = None
        releasing_context_manager_0 = module_0._ReleasingContextManager(optional_0)
        releasing_context_manager_0.__enter__()
        lock_0 = module_0.Lock()
        str_0 = lock_0.__repr__()
        traceback_0 = module_1.traceback()
    except BaseException:
        pass

def test_case_3():
    try:
        lock_0 = module_0.Lock()
        lock_0.__aenter__()
        optional_0 = None
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        traceback_0 = None
        releasing_context_manager_0 = module_0._ReleasingContextManager(lock_0)
        releasing_context_manager_0.__exit__(optional_0, bounded_semaphore_0, traceback_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -379
        semaphore_0 = module_0.Semaphore(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        lock_0 = module_0.Lock()
        awaitable_0 = lock_0.acquire()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '$Z6;.?Fk/\\Z\n'
        dict_0 = {str_0: str_0, str_0: str_0}
        str_1 = "yf=d;|4*'VP;Ol"
        bytes_0 = b'\xc6\xf6\x96\xd8\xf8\xf2D'
        tuple_0 = (dict_0, str_1, bytes_0)
        none_type_0 = None
        optional_0 = None
        semaphore_0 = module_0.Semaphore()
        semaphore_0.__exit__(tuple_0, none_type_0, optional_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bounded_semaphore_0 = module_0.BoundedSemaphore()
        bounded_semaphore_0.release()
    except BaseException:
        pass

def test_case_8():
    try:
        lock_0 = module_0.Lock()
        lock_0.release()
    except BaseException:
        pass

def test_case_9():
    try:
        event_0 = module_0.Event()
        str_0 = event_0.__repr__()
        lock_0 = module_0.Lock()
        str_1 = lock_0.__repr__()
        lock_0.__enter__()
    except BaseException:
        pass

def test_case_10():
    try:
        event_0 = module_0.Event()
        event_0.set()
        lock_0 = module_0.Lock()
        event_0.clear()
        lock_0.__aenter__()
        str_0 = lock_0.__repr__()
        set_0 = None
        str_1 = event_0.__repr__()
        list_0 = []
        dict_0 = {}
        base_exception_0 = module_1.BaseException(*list_0, **dict_0)
        event_0.set()
        none_type_0 = None
        releasing_context_manager_0 = module_0._ReleasingContextManager(lock_0)
        releasing_context_manager_0.__exit__(set_0, base_exception_0, none_type_0)
    except BaseException:
        pass

def test_case_11():
    try:
        event_0 = module_0.Event()
        event_0.set()
        lock_0 = module_0.Lock()
        type_0 = None
        timeout_garbage_collector_0 = module_0._TimeoutGarbageCollector()
        lock_0.__exit__(type_0, lock_0, timeout_garbage_collector_0)
    except BaseException:
        pass

def test_case_12():
    try:
        event_0 = module_0.Event()
        str_0 = ''
        float_0 = -103.0122
        awaitable_0 = None
        int_0 = 375
        tuple_0 = (int_0, int_0)
        list_0 = [str_0, tuple_0, int_0, tuple_0]
        tuple_1 = (awaitable_0, list_0)
        i_o_loop_0 = module_2.IOLoop()
        condition_0 = module_0.Condition()
        awaitable_1 = condition_0.wait(float_0)
        object_0 = i_o_loop_0.call_later(float_0, tuple_1)
    except BaseException:
        pass