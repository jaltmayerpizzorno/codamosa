# Automatically generated by Pynguin.
import ansible.parsing.yaml.dumper as module_0
import ansible.parsing.yaml.objects as module_1
import ansible.utils.unsafe_proxy as module_2
import ansible.template as module_3
import ansible.vars.hostvars as module_4

def test_case_0():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        list_0 = [ansible_dumper_0]
        ansible_unicode_0 = module_1.AnsibleUnicode(*list_0)
        var_1 = ansible_dumper_0.represent_data(ansible_unicode_0)
        str_0 = '!vault'
        set_0 = {ansible_dumper_0}
        list_1 = []
        var_2 = ansible_dumper_0.represent_scalar(set_0, list_1)
        dict_0 = {}
        ansible_unsafe_bytes_0 = module_2.AnsibleUnsafeBytes(**dict_0)
        var_3 = ansible_dumper_0.represent_data(ansible_unsafe_bytes_0)
        var_4 = repr(str_0)
        ansible_undefined_0 = module_3.AnsibleUndefined()
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        bytes_0 = b'z'
        ansible_undefined_0 = module_3.AnsibleUndefined(bytes_0)
        bool_0 = True
        ansible_vault_encrypted_unicode_0 = module_1.AnsibleVaultEncryptedUnicode(bool_0)
        ansible_unicode_0 = module_1.AnsibleUnicode()
        tuple_0 = (ansible_vault_encrypted_unicode_0, ansible_undefined_0, ansible_dumper_0, ansible_unicode_0)
        var_1 = ansible_dumper_0.represent_data(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        ansible_dumper_0 = module_0.AnsibleDumper(var_0)
        str_0 = '!vault'
        set_0 = {ansible_dumper_0}
        list_0 = []
        var_1 = ansible_dumper_0.represent_scalar(set_0, list_0)
        dict_0 = {}
        ansible_unsafe_bytes_0 = module_2.AnsibleUnsafeBytes(**dict_0)
        var_2 = repr(str_0)
        async_iterator_0 = None
        ansible_vault_encrypted_unicode_0 = module_1.AnsibleVaultEncryptedUnicode(async_iterator_0)
        ansible_undefined_0 = module_3.AnsibleUndefined(str_0)
        host_vars_0 = module_4.HostVars(list_0, ansible_undefined_0, set_0)
        var_3 = ansible_dumper_0.represent_data(host_vars_0)
    except BaseException:
        pass