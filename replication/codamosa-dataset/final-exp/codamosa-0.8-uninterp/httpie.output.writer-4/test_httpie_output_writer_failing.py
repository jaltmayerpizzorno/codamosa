# Automatically generated by Pynguin.
import requests.models as module_0
import httpie.context as module_1
import argparse as module_2
import httpie.output.writer as module_3
import httpie.models as module_4
import httpie.output.streams as module_5
import typing as module_6

def test_case_0():
    try:
        prepared_request_0 = module_0.PreparedRequest()
        response_0 = module_0.Response()
        environment_0 = module_1.Environment(response_0)
        namespace_0 = module_2.Namespace()
        var_0 = module_3.write_message(prepared_request_0, environment_0, namespace_0, environment_0)
    except BaseException:
        pass

def test_case_1():
    try:
        prepared_request_0 = module_0.PreparedRequest()
        environment_0 = module_1.Environment()
        namespace_0 = module_2.Namespace()
        var_0 = module_3.write_message(prepared_request_0, environment_0, namespace_0)
        tuple_0 = module_3.get_stream_type_and_kwargs(environment_0, namespace_0)
    except BaseException:
        pass

def test_case_2():
    try:
        base_stream_0 = None
        i_o_0 = None
        bool_0 = True
        var_0 = module_3.write_stream(base_stream_0, i_o_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '^*h+,3S:E@yrte'
        h_t_t_p_message_0 = module_4.HTTPMessage(str_0)
        base_stream_0 = module_5.BaseStream(h_t_t_p_message_0)
        text_i_o_0 = module_6.TextIO()
        bool_0 = False
        var_0 = module_3.write_stream_with_colors_win_py3(base_stream_0, text_i_o_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        environment_0 = module_1.Environment()
        namespace_0 = module_2.Namespace()
        tuple_0 = module_3.get_stream_type_and_kwargs(environment_0, namespace_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'sty"le'
        str_1 = 'prettify'
        str_2 = 'stream'
        bool_0 = False
        var_0 = {str_1: str_2, str_0: str_1, str_1: str_1, str_2: bool_0}
        namespace_0 = module_2.Namespace(**var_0)
        environment_0 = module_1.Environment()
        prepared_request_0 = module_0.PreparedRequest()
        bool_1 = True
        var_1 = module_3.write_message(prepared_request_0, environment_0, namespace_0, bool_0, bool_1)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n    测试函数 write_message\n    '
        str_1 = 'B757H8roGF&57\\ex`q2'
        str_2 = 'style'
        str_3 = 'prettify'
        str_4 = 'stream'
        bool_0 = False
        var_0 = {str_1: str_3, str_2: str_0, str_3: str_3, str_4: bool_0}
        namespace_0 = module_2.Namespace(**var_0)
        environment_0 = module_1.Environment()
        prepared_request_0 = module_0.PreparedRequest()
        var_1 = module_3.write_message(prepared_request_0, environment_0, namespace_0, bool_0, bool_0)
        response_0 = module_0.Response()
        var_2 = module_3.write_message(response_0, environment_0, namespace_0, namespace_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'sty"le'
        str_1 = 'prettify'
        str_2 = 'stream'
        bool_0 = True
        var_0 = {str_1: str_2, str_0: str_1, str_1: str_1, str_2: bool_0}
        namespace_0 = module_2.Namespace(**var_0)
        environment_0 = module_1.Environment()
        prepared_request_0 = module_0.PreparedRequest()
        bool_1 = True
        var_1 = module_3.write_message(prepared_request_0, environment_0, namespace_0, bool_0, bool_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'sty"le'
        str_1 = 'prettify'
        str_2 = 'stream'
        str_3 = []
        bool_0 = True
        var_0 = {str_1: str_2, str_0: str_1, str_1: str_3, str_2: bool_0}
        namespace_0 = module_2.Namespace(**var_0)
        environment_0 = module_1.Environment()
        prepared_request_0 = module_0.PreparedRequest()
        bool_1 = True
        var_1 = module_3.write_message(prepared_request_0, environment_0, namespace_0, bool_0, bool_1)
    except BaseException:
        pass