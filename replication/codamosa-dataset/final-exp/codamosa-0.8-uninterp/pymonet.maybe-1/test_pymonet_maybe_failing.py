# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = '[k\x0bN'
        str_1 = 'AfO+3;DBTUh|#k]<N'
        bool_0 = False
        maybe_0 = module_0.Maybe(str_1, bool_0)
        maybe_1 = module_0.Maybe(maybe_0, bool_0)
        var_0 = maybe_1.map(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        callable_0 = None
        str_0 = 'p4EwB'
        bool_0 = False
        maybe_0 = module_0.Maybe(str_0, bool_0)
        var_0 = maybe_0.bind(callable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'le\x82\xc0/\xfc\xa8'
        bool_0 = True
        maybe_0 = module_0.Maybe(bytes_0, bool_0)
        var_0 = maybe_0.to_try()
        var_1 = None
        str_0 = '~9X6$\t:gd1[E'
        object_0 = module_1.object()
        bool_1 = maybe_0.__eq__(object_0)
        bool_2 = False
        maybe_1 = module_0.Maybe(var_1, bool_2)
        float_0 = 3068.307991
        var_2 = maybe_0.to_lazy()
        var_3 = maybe_0.ap(float_0)
        var_4 = maybe_1.to_try()
        var_5 = maybe_1.ap(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b')\xd2\xa98w\x8d\xb7\xfb\xa9D\xa4\x1bam'
        int_0 = True
        str_0 = 'p4EwB'
        bool_0 = False
        maybe_0 = module_0.Maybe(str_0, bool_0)
        bool_1 = False
        maybe_1 = module_0.Maybe(int_0, bool_1)
        var_0 = maybe_1.to_validation()
        object_0 = module_1.object()
        bool_2 = maybe_1.__eq__(object_0)
        var_1 = maybe_1.to_either()
        var_2 = maybe_1.map(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        bool_1 = False
        maybe_0 = module_0.Maybe(bool_0, bool_1)
        var_0 = maybe_0.to_validation()
        bool_2 = False
        dict_0 = None
        tuple_0 = (dict_0, dict_0)
        maybe_1 = module_0.Maybe(tuple_0, bool_2)
        var_1 = maybe_1.to_box()
        str_0 = "y4!W]/s>\r>'^4\x0b\r"
        str_1 = '8*3/}Y\tUVeduC\x0c]v'
        dict_1 = {str_1: bool_2, str_0: maybe_1, str_1: var_0}
        object_0 = module_1.object(**dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        str_0 = '[Qx'
        bool_0 = True
        maybe_0 = module_0.Maybe(str_0, bool_0)
        var_0 = maybe_0.filter(dict_0)
        var_1 = maybe_0.to_validation()
        list_0 = [maybe_0]
        bool_1 = False
        maybe_1 = module_0.Maybe(list_0, bool_1)
        var_2 = maybe_1.filter(dict_0)
    except BaseException:
        pass