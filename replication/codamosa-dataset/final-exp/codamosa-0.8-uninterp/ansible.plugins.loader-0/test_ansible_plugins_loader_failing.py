# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'ikJdf-Xh\rTBf{p'
        tuple_0 = ()
        dict_0 = {str_0: tuple_0}
        var_0 = plugin_load_context_0.record_deprecation(tuple_0, dict_0, tuple_0)
        var_1 = plugin_load_context_0.nope(str_0)
        list_0 = []
        plugin_load_context_1 = module_0.PluginLoadContext()
        list_1 = [var_1, var_1, str_0]
        plugin_loader_0 = module_0.PluginLoader(list_0, plugin_load_context_1, tuple_0, list_1, plugin_load_context_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '__init__'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        var_1 = module_0.get_all_plugin_loaders()
        var_2 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "(:Q'L|LW#[;i(Yp:njd"
        jinja2_loader_0 = None
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.redirect(jinja2_loader_0)
        var_1 = module_0.get_all_plugin_loaders()
        plugin_loader_0 = module_0.PluginLoader(str_0, str_0, str_0, str_0, str_0)
        var_2 = plugin_loader_0.__setstate__(plugin_loader_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'OC*'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -515
        bytes_0 = b'H\xe7\x08\xad\x07e\xed\xde#|\xa2\xeep\xf7y'
        dict_0 = {int_0: bytes_0, bytes_0: int_0}
        plugin_path_context_0 = module_0.PluginPathContext(bytes_0, dict_0)
        bytes_1 = b'\x92\xb6\x19\n\xc6\xea\x06\xc1\xf5\xbb\xee\xd4\xcc[\xcf\x1e{\x03'
        str_0 = 'Idw=05rRDz'
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_1 = 'maintenance'
        dict_1 = {str_1: bytes_0}
        str_2 = '52HksNWP8!!{D .'
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_load_context_0, dict_0, dict_1, plugin_load_context_0, str_2)
        float_0 = 321.07
        plugin_loader_0 = module_0.PluginLoader(bytes_0, jinja2_loader_0, bytes_1, float_0)
        plugin_loader_1 = module_0.PluginLoader(int_0, plugin_path_context_0, bytes_1, str_0, plugin_loader_0, plugin_path_context_0)
        var_0 = plugin_loader_1.__repr__()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "'vx+Yb?10X^,3<VqU ~i"
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [str_0]
        plugin_loader_0 = module_0.PluginLoader(str_0, plugin_load_context_0, plugin_load_context_0, list_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "(:Q'L|LW#[;i(Yp:njd"
        plugin_loader_0 = module_0.PluginLoader(str_0, str_0, str_0, str_0, str_0)
        bytes_0 = b'\x88\x89:\xf4g\x83\\:;\xde\xfd:\tI/'
        str_1 = '7tE{>H{J~&JBQ\\rQGk{'
        var_0 = plugin_loader_0.find_plugin_with_context(bytes_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 1779.481315
        str_0 = 'kc1%l~bun;,fV`J'
        list_0 = [float_0, float_0, str_0, float_0]
        dict_0 = {str_0: float_0}
        int_0 = 303
        dict_1 = {float_0: int_0}
        list_1 = []
        jinja2_loader_0 = module_0.Jinja2Loader(int_0, int_0, dict_1, list_1)
        var_0 = jinja2_loader_0.get(str_0, *list_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_load_context_1 = module_0.PluginLoadContext()
        bool_0 = False
        int_0 = -839
        plugin_path_context_0 = module_0.PluginPathContext(bool_0, int_0)
        float_0 = -1323.58349
        bytes_0 = b'dT'
        plugin_loader_0 = module_0.PluginLoader(plugin_path_context_0, float_0, bytes_0, plugin_load_context_1)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'A.xDink{XR9nA'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        int_0 = 1027
        float_0 = None
        list_0 = [int_0, str_1, int_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        float_1 = 0.5
        complex_0 = None
        var_1 = plugin_load_context_0.record_deprecation(plugin_load_context_0, complex_0, float_0)
        dict_0 = None
        bytes_0 = b'4}\x07\x83'
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, bytes_0)
        plugin_loader_0 = module_0.PluginLoader(float_0, list_0, plugin_load_context_0, float_1, plugin_path_context_0)
        var_2 = module_0.get_shell_plugin(plugin_loader_0)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = "(:Q'L|LW#[;i(Yp:njd"
        str_1 = None
        plugin_loader_0 = module_0.PluginLoader(str_0, str_1, str_0, str_0, str_0)
        var_0 = plugin_loader_0.__setstate__(plugin_loader_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'm'
        list_0 = [str_0, str_0, str_0]
        float_0 = 52.840536885771954
        dict_0 = {str_0: list_0}
        list_1 = None
        plugin_loader_0 = module_0.PluginLoader(float_0, list_1, float_0, list_0)
        var_0 = plugin_loader_0.__getstate__()
        bool_0 = False
        int_0 = 22
        bytes_0 = b'\xf0i\x1eiwm\x9d\x03\x9a|\t~\xb2\xbeY\n\x9c\xf4'
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, bool_0, int_0, bytes_0)
        list_2 = [dict_0, str_0, dict_0]
        bool_1 = False
        int_1 = 3584
        str_1 = 'G\nA_'
        str_2 = 'Older pypsrp library detected, please update to pypsrp>=0.4.0 to use the newer copy method over PSRP.'
        set_0 = {str_2, int_1}
        jinja2_loader_1 = module_0.Jinja2Loader(bool_1, int_1, str_1, list_0, set_0)
        var_1 = jinja2_loader_1.get(jinja2_loader_0, *list_2)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\x914 \x15\xa7t\xba\xd0t\t\xc2\x81K\xeb\xd0'
        dict_0 = None
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, bytes_0, dict_0, dict_0)
        str_0 = 'N\n2\x0c9`|qp0RE+4T*/'
        str_1 = None
        var_0 = jinja2_loader_0.find_plugin(str_0, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 't|\n?JB[cG~<'
        dict_0 = {str_0: str_0}
        bytes_0 = b'\xdc\xd1'
        list_0 = [bytes_0, bytes_0]
        get_with_context_result_0 = module_0.get_with_context_result(*list_0)
        int_0 = -1724
        str_1 = ''
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, get_with_context_result_0, int_0, str_1)
        var_0 = jinja2_loader_0.all(**dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = None
        set_0 = set()
        plugin_load_context_0 = module_0.PluginLoadContext()
        dict_1 = {}
        str_0 = 'G?pp^5t'
        str_1 = 'Y"'
        plugin_loader_0 = module_0.PluginLoader(dict_0, dict_0, dict_1, str_0, str_1)
        var_0 = plugin_loader_0.find_plugin(set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 70
        var_0 = module_0.get_shell_plugin(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'Hdh'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'ansible.legacy.asemble'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'b.xzink{XR9nA'
        var_0 = module_0.get_shell_plugin(str_0, str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = 52.840536885771954
        list_0 = None
        plugin_loader_0 = module_0.PluginLoader(float_0, list_0, list_0, list_0)
        var_0 = plugin_loader_0.print_paths()
        str_0 = '^s7,W65ZwLRYYv'
        var_1 = plugin_loader_0.has_plugin(str_0)
        str_1 = 'restype'
        str_2 = ';mYT8zE'
        plugin_load_context_0 = module_0.PluginLoadContext()
        dict_0 = {str_1: plugin_load_context_0, str_2: plugin_load_context_0}
        var_2 = plugin_loader_0.__setstate__(dict_0)
        set_0 = set()
        var_3 = plugin_load_context_0.redirect(set_0)
        var_4 = plugin_loader_0.get(plugin_loader_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'ansible.legcy.asemble'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'ansible.legacy.asemble'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        int_0 = 1027
        dict_0 = {int_0: int_0, int_0: int_0}
        bool_0 = False
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, bool_0)
        var_1 = module_0.get_all_plugin_loaders()
        get_with_context_result_0 = module_0.get_with_context_result()
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'name'
        str_1 = 'path'
        str_2 = 'parent'
        str_3 = '3R\x0b*eBB-;\x0c\nRcvk\x0bD'
        plugin_loader_0 = module_0.PluginLoader(str_0, str_1, str_2, str_3)
        bytes_0 = b'$\x1f/l\xd2\x9d\xac\x1c\x98\xda\xe11\xd2'
        var_0 = plugin_loader_0.format_paths(bytes_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'base'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        int_0 = 1036
        bool_0 = False
        var_1 = module_0.add_all_plugin_dirs(int_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        tuple_0 = ()
        int_1 = 1937
        jinja2_loader_0 = module_0.Jinja2Loader(int_0, bool_0, tuple_0, int_1)
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_2 = jinja2_loader_0.all()
        list_0 = [bool_0, bool_0, int_1]
        var_3 = jinja2_loader_0.get(str_1, *list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '7nsible.legacy.asble'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'ansible.legacy.asemble'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        int_0 = 3178
        bool_0 = False
        str_2 = ''
        list_0 = [bool_0, int_0]
        get_with_context_result_0 = module_0.get_with_context_result(*list_0)
        list_1 = []
        plugin_loader_0 = module_0.PluginLoader(bool_0, str_2, get_with_context_result_0, list_1, get_with_context_result_0)
        var_1 = plugin_loader_0.add_directory(str_0)
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_2 = module_0.get_all_plugin_loaders()
        str_3 = '/usr/share/ansible/plugins/doc_fragments/windows'
        var_3 = plugin_loader_0.has_plugin(str_3, plugin_load_context_0)
        list_2 = []
        var_4 = module_0.add_all_plugin_dirs(list_2)
        var_5 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_27():
    try:
        str_0 = 'nnsible.legacy.asembl'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        int_0 = 1724
        bool_0 = True
        var_1 = module_0.add_all_plugin_dirs(bool_0)
        str_2 = '>5c>4yW1('
        str_3 = '/usr/share/ansible/plugins/doc_fragments/windows'
        var_2 = module_0.get_all_plugin_loaders()
        bytes_0 = b'?\xa8\xfa\x81<\xa2\xd9y\xbe\x97\x0c\xaf<X\xc9\xb9\x99\xbe\x02\xfa'
        float_0 = 2625.2503
        plugin_load_context_0 = module_0.PluginLoadContext()
        list_0 = [str_3, str_3]
        get_with_context_result_0 = module_0.get_with_context_result(*list_0)
        str_4 = 'CG80g\r?DZ:gRUub1'
        str_5 = "dY&?;\n$<ku\x0c\tqGO'xH$"
        str_6 = 'unrsL:e-a3q0'
        int_1 = -2086
        plugin_loader_0 = module_0.PluginLoader(float_0, str_6, int_1, bytes_0, list_0)
        var_3 = plugin_loader_0.has_plugin(str_5, plugin_load_context_0)
        plugin_load_context_1 = None
        dict_0 = {str_2: int_0, str_4: plugin_load_context_1}
        var_4 = plugin_loader_0.has_plugin(dict_0)
        str_7 = ')P5@kUcn9@sx'
        float_1 = 29.814333
        bytes_1 = b'5\\\x8a+ts\x81\x96.\xe5<\xda6'
        float_2 = 0.0
        tuple_0 = (plugin_load_context_1, float_1, bytes_1, float_2)
        var_5 = plugin_loader_0.find_plugin_with_context(str_7, dict_0, tuple_0, plugin_load_context_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '__init__'
        str_1 = None
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        int_0 = 1027
        dict_0 = {int_0: int_0, int_0: int_0}
        bool_0 = False
        plugin_path_context_0 = module_0.PluginPathContext(dict_0, bool_0)
        var_1 = module_0.get_all_plugin_loaders()
        get_with_context_result_0 = module_0.get_with_context_result()
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'sh'
        var_0 = module_0.get_shell_plugin(str_0)
        str_1 = '/bin/sh'
        var_1 = module_0.get_shell_plugin(str_0, str_1)
        str_2 = 'S5.X~o"(\x0cPKHOCs\'$m'
        int_0 = -2574
        list_0 = [str_1, int_0, var_1]
        var_2 = module_0.add_dirs_to_loader(str_2, list_0)
    except BaseException:
        pass