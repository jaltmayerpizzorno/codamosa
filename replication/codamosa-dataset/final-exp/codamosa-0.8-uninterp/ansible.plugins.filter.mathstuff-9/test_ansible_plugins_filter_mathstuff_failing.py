# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        str_0 = '\rE>\x0c{:O_Por\x0b'
        float_0 = -2133.52
        var_0 = module_0.unique(str_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 820
        list_0 = [int_0, int_0]
        bytes_0 = b'\x82\x1e{\xfd\x87\x85\xc6\x84\x9c\x7fe'
        bool_0 = False
        list_1 = [int_0, int_0]
        tuple_0 = ()
        tuple_1 = (tuple_0,)
        var_0 = module_0.difference(list_1, bytes_0, tuple_1)
        var_1 = module_0.unique(int_0, bytes_0, list_0, bool_0)
        int_1 = 4396
        var_2 = module_0.logarithm(int_1)
        set_0 = {int_0, int_0, int_0, int_0, int_0, int_0}
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_3 = module_0.max(filter_module_0, set_0)
        var_4 = filter_module_0.filters()
        bytes_1 = b'\xf0\x0e\xab)\xd0ojD\x8c\x9e1\x833'
        var_5 = module_0.rekey_on_member(list_0, bytes_1)
    except BaseException:
        pass

def test_case_2():
    try:
        filter_module_0 = None
        list_0 = [filter_module_0, filter_module_0, filter_module_0, filter_module_0]
        float_0 = -1418.8306
        var_0 = module_0.difference(filter_module_0, list_0, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\rE>\x0c{:O_Por\x0b'
        float_0 = -2133.52
        int_0 = 255
        tuple_0 = ()
        str_1 = '05o}%Wv!MS%BN f'
        var_0 = module_0.union(int_0, tuple_0, str_1)
        var_1 = module_0.unique(str_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = None
        list_0 = []
        var_0 = module_0.union(int_0, list_0, list_0)
        set_0 = {int_0, int_0, int_0, int_0, int_0, int_0}
        var_1 = module_0.rekey_on_member(set_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -422
        bool_0 = False
        var_0 = module_0.min(int_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        var_0 = module_0.logarithm(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 2
        bytes_0 = b'\x91\xfe[\xd5'
        var_0 = module_0.power(bytes_0, int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        str_0 = 'vN%9xukO:\tWb$'
        float_0 = 959.97
        var_0 = module_0.inversepower(float_0)
        str_1 = 'lDT8HX2'
        var_1 = module_0.unique(bool_0, str_0)
        var_2 = module_0.max(list_0, str_1)
        list_1 = [bool_0, bool_0, bool_0]
        int_0 = 766
        filter_module_0 = module_0.FilterModule()
        var_3 = module_0.human_readable(int_0, int_0)
        str_2 = '">u;Tc4FBf~uU'
        var_4 = module_0.human_to_bytes(str_2, list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 0.1
        int_0 = -844
        set_0 = {float_0, int_0}
        str_0 = '%WB]Yep\nD"h\t'
        var_0 = module_0.inversepower(set_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        filter_module_0 = module_0.FilterModule()
        list_0 = [filter_module_0, filter_module_0]
        var_0 = module_0.human_readable(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\x13\xc4\xef\tX[H\x9c\xb5\xc9\xfcU\xf8qh\r\xa3'
        float_0 = -1648.569
        list_0 = [float_0, bytes_0, float_0, float_0]
        var_0 = module_0.human_readable(bytes_0, float_0, list_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '+=u*=H"/m'
        var_0 = module_0.human_to_bytes(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        int_0 = 36
        str_0 = ']=^Q `P\n&>[O]GMjcWg'
        var_0 = module_0.rekey_on_member(int_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = []
        filter_module_0 = module_0.FilterModule(*list_0)
        dict_0 = {}
        bytes_0 = b'\x90\x02j\xda\x9c\xad\xbf]\xcc\xb2\xff\xcf\xc1\x11^\x9bE\x10\x1ej'
        filter_module_1 = module_0.FilterModule()
        var_0 = filter_module_1.filters()
        var_1 = module_0.rekey_on_member(filter_module_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        bytes_0 = b'*2\xb7r'
        list_0 = [bytes_0]
        str_0 = '\x0bk\\('
        var_0 = module_0.max(list_0, str_0)
        list_1 = []
        var_1 = module_0.intersect(dict_0, bytes_0, list_1)
        str_1 = "^\\s*?\\'(.*?)\\'\\s*?$"
        bool_0 = None
        tuple_0 = (bool_0,)
        var_2 = module_0.power(str_1, tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        set_0 = set()
        str_0 = '\n  _raw:\n    description:\n      - path to file found\n    type: list\n    elements: path\n'
        bool_0 = True
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: bool_0}
        int_0 = 200
        var_0 = module_0.symmetric_difference(set_0, dict_0, int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        int_0 = -466
        bool_0 = True
        var_0 = module_0.human_readable(bool_0)
        var_1 = module_0.logarithm(int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'l\xc8\xe8}\x9c\xae\x8d\xef\xa2X=\xc9\xd2\xc2'
        float_0 = 4092.199
        var_0 = module_0.rekey_on_member(bytes_0, float_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'Sorry, a password is required to run sudo'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        list_0 = []
        list_1 = [dict_0, list_0, list_0, list_0]
        list_2 = [list_1, str_0, list_1]
        tuple_0 = (list_1,)
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.symmetric_difference(list_2, tuple_0, filter_module_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = 1277.139
        var_0 = module_0.max(float_0, float_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = False
        bool_1 = False
        list_0 = [bool_0, bool_1]
        str_0 = 'lDT8HX2'
        str_1 = 'bc@(.xl!Zj.{T'
        var_0 = module_0.unique(bool_1, str_1)
        var_1 = module_0.max(list_0, str_0)
        int_0 = 1111
        int_1 = 761
        var_2 = module_0.human_readable(int_0, int_1)
        str_2 = 'd^ZbAz_1ig`lZe^%~~B'
        str_3 = '\x0b>chjf=R>tAx2C'
        dict_0 = {str_2: int_0, str_3: bool_0, str_1: bool_0}
        str_4 = '1\\,4'
        var_3 = module_0.rekey_on_member(dict_0, str_4)
    except BaseException:
        pass

def test_case_22():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, tuple_0]
        var_0 = module_0.max(tuple_0, list_0)
        bool_0 = None
        dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
        var_1 = module_0.rekey_on_member(bool_0, dict_0)
    except BaseException:
        pass

def test_case_23():
    try:
        float_0 = 2958.5589
        dict_0 = {}
        list_0 = [float_0, float_0, dict_0]
        bool_0 = False
        str_0 = None
        dict_1 = {bool_0: str_0, bool_0: float_0}
        var_0 = module_0.symmetric_difference(list_0, bool_0, dict_1)
    except BaseException:
        pass

def test_case_24():
    try:
        float_0 = 2940.1969218217273
        dict_0 = {}
        set_0 = {float_0}
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        var_1 = module_0.rekey_on_member(dict_0, set_0)
        var_2 = filter_module_0.filters()
        list_0 = [var_2, filter_module_0]
        bool_0 = False
        var_3 = module_0.inversepower(list_0, bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = '-r\x0b!%2Ped{5uX.sMT'
        dict_0 = {str_0: str_0, str_0: str_0}
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.unique(str_0, dict_0, dict_0, filter_module_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = '(u6\r\x0c,W3la+D=S\n9YU'
        str_1 = "z'&gDM0L*Nm\x0c=TnAL"
        filter_module_0 = None
        int_0 = 443
        tuple_0 = (str_0, str_1, filter_module_0, int_0)
        list_0 = []
        float_0 = 2.718281828459045
        var_0 = module_0.symmetric_difference(tuple_0, list_0, float_0)
    except BaseException:
        pass

def test_case_27():
    try:
        list_0 = None
        str_0 = 'xi(^S`F#xG'
        int_0 = 1440
        str_1 = '4J.[nMYHi'
        bool_0 = True
        dict_0 = {str_0: list_0, int_0: str_0, str_1: bool_0, list_0: int_0}
        str_2 = 't\x0b>\x0bg '
        str_3 = 'HE`w3C\tFTs&.eY`d (h'
        float_0 = -2096.7
        list_1 = [str_3, float_0, str_3, list_0]
        str_4 = 'a^z`'
        dict_1 = {str_0: str_2, str_3: list_1, str_4: str_3}
        var_0 = module_0.symmetric_difference(dict_0, str_2, dict_1)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 'o0.0.L.'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = [str_1, str_1, str_1]
        var_0 = module_0.rekey_on_member(str_2, str_1)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '0e'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = [str_1, str_1, str_1]
        var_0 = module_0.rekey_on_member(str_2, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 821
        list_0 = [int_0, int_0, int_0, int_0]
        int_1 = -1099
        bytes_0 = b'\x1e{\xfd\x87\xc3\x85\xc6\x84\x9ce'
        bool_0 = False
        var_0 = module_0.unique(int_1, bytes_0, list_0, bool_0)
        int_2 = 4419
        var_1 = module_0.logarithm(int_2)
        set_0 = {int_0, int_0, int_0, int_0, int_0, int_0}
        dict_0 = {}
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_2 = module_0.max(filter_module_0, set_0)
        str_0 = '\\1'
        tuple_0 = (set_0, filter_module_0)
        list_1 = [bool_0, var_2, tuple_0, int_2]
        var_3 = module_0.difference(str_0, list_1, list_0)
        var_4 = module_0.rekey_on_member(filter_module_0, filter_module_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'hosname'
        str_1 = 'ip'
        str_2 = 'host&'
        str_3 = '10.0.0.1'
        str_4 = {str_0: str_2, str_1: str_3}
        str_5 = '10.0.0.2'
        str_6 = {str_0: str_0, str_5: str_5}
        str_7 = 'host3'
        str_8 = '10.0.0.3'
        str_9 = {str_0: str_7, str_1: str_8}
        str_10 = [str_4, str_6, str_9]
        var_0 = module_0.rekey_on_member(str_10, str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0]
        str_0 = 'vN%xukO:\tWb$'
        dict_0 = {str_0: bool_0, str_0: str_0}
        var_0 = module_0.unique(bool_0, str_0)
        var_1 = module_0.max(list_0, str_0)
        list_1 = [bool_0, bool_0, bool_0]
        int_0 = 1111
        int_1 = 761
        var_2 = module_0.human_readable(int_0, int_1)
        str_1 = 'd^ZbAz_1ig`lZe^%~~B'
        var_3 = module_0.min(dict_0, dict_0)
        bytes_0 = b'\xf0\xf6\xe2\x95qE\xca\x83{>\xfedj\xa84n]\xf5'
        list_2 = [bytes_0, dict_0]
        complex_0 = None
        list_3 = [bytes_0, list_2, var_3]
        var_4 = module_0.symmetric_difference(complex_0, list_0, list_3)
        var_5 = module_0.rekey_on_member(list_1, str_1)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'hostname'
        str_1 = 'ip'
        int_0 = -1809
        str_2 = 'O(CH=>D'
        set_0 = {str_2}
        list_0 = [str_2, str_2, set_0, str_0]
        var_0 = module_0.symmetric_difference(set_0, list_0, list_0)
        str_3 = '$EL6\\3G}S]h/'
        dict_0 = {str_2: str_1, str_0: str_2, str_0: str_3, str_3: str_2}
        var_1 = module_0.max(int_0, dict_0)
        str_4 = 'host&'
        str_5 = '10.0.0.1'
        str_6 = {str_0: str_4, str_1: str_5}
        str_7 = 'host2'
        str_8 = '10.0.0.2'
        str_9 = {var_1: str_6}
        str_10 = 'host3'
        str_11 = {str_0: str_10, str_1: str_2}
        filter_module_0 = module_0.FilterModule()
        list_1 = [str_6, str_0, str_8]
        bool_0 = False
        list_2 = [str_5, bool_0, dict_0, str_7]
        var_2 = module_0.unique(filter_module_0, list_1, list_2)
        str_12 = [str_6, str_9, str_11]
        var_3 = module_0.rekey_on_member(str_12, str_1)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'hostname'
        set_0 = {str_0}
        float_0 = 1554.994
        var_0 = module_0.logarithm(float_0)
        var_1 = module_0.min(str_0, set_0)
        float_1 = 293.0
        var_2 = module_0.power(float_0, float_1)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'hostname'
        set_0 = {str_0}
        float_0 = 1554.994
        var_0 = module_0.logarithm(float_0)
        var_1 = module_0.min(str_0, set_0)
        str_1 = 'hos.t&'
        str_2 = '?Oh\nXkab_^$n$f)h'
        dict_0 = {str_2: str_1, str_2: str_1}
        str_3 = '__self__'
        var_2 = module_0.max(dict_0, str_3)
        int_0 = 1493
        tuple_0 = None
        bool_0 = False
        var_3 = module_0.unique(int_0, tuple_0, bool_0)
    except BaseException:
        pass

def test_case_36():
    try:
        bool_0 = True
        var_0 = module_0.logarithm(bool_0)
        int_0 = 1602
        float_0 = 1093.435
        int_1 = 748
        var_1 = module_0.human_to_bytes(int_0, float_0, int_1)
    except BaseException:
        pass