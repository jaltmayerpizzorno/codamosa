# Automatically generated by Pynguin.
import py_backwards.utils.snippet as module_0
import typed_ast._ast3 as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        attribute_0 = None
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_1():
    try:
        import_from_0 = module_1.ImportFrom()
        str_0 = '5c\\dYj^&Q7\r?z2I?=\\'
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_2():
    try:
        alias_0 = None
        str_0 = '37T#"tf[rMsG\t7'
        str_1 = '\x0cwYkk$r'
        str_2 = 'rJRu>@_;-p9nqL'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0, str_1: str_1}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        str_3 = '=~4H$SG'
        str_4 = ']}Ncag'
        str_5 = 'MMW_5v'
        dict_1 = {str_3: variables_replacer_0, str_3: variables_replacer_0, str_4: str_2, str_5: str_0}
        keyword_0 = module_1.keyword(**dict_1)
        keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
        keyword_2 = variables_replacer_0.visit_keyword(keyword_1)
        keyword_3 = variables_replacer_0.visit_keyword(keyword_2)
        keyword_4 = variables_replacer_0.visit_keyword(keyword_3)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\na = let(x)\nb = let(y)\nc = let(x)\nd = x\ne = y\nf = let(y)\ng = y\n'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_0.find_variables(var_0)
        var_1 = set(iterable_0)
        except_handler_0 = None
        dict_0 = {}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'extend(x)'
        var_0 = module_2.parse(str_0)
        str_1 = 'x'
        str_2 = 'x=2'
        a_s_t_0 = module_1.AST()
        iterable_0 = module_0.find_variables(a_s_t_0)
        var_1 = {str_1: str_2}
        module_0.extend_tree(var_0, var_1)
        list_0 = [str_0, var_0]
        import_from_0 = module_1.ImportFrom(*list_0)
        function_def_0 = module_1.FunctionDef()
        snippet_0 = module_0.snippet(function_def_0)
        list_1 = snippet_0.get_body()
    except BaseException:
        pass

def test_case_5():
    try:
        attribute_0 = None
        module_0.let(attribute_0)
        function_def_0 = module_1.FunctionDef()
        str_0 = ''
        except_handler_0 = module_1.ExceptHandler()
        name_0 = None
        str_1 = '*\x0coPC'
        str_2 = None
        dict_0 = {str_1: str_0, str_2: str_2}
        variables_replacer_0 = module_0.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'extend(x)'
        var_0 = module_2.parse(str_0)
        module_0.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 0
        str_0 = 'tZ7d(x)'
        var_0 = module_2.parse(str_0)
        str_1 = 'x=1'
        var_1 = module_2.parse(str_1)
        module_0.extend_tree(var_0, str_1)
        var_2 = none_type_0.body[int_0]
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 0
        str_0 = '7(x)'
        var_0 = module_2.parse(str_0)
        str_1 = 'x=1'
        var_1 = module_2.parse(str_1)
        module_0.extend_tree(var_0, str_1)
        var_2 = none_type_0.body[int_0]
    except BaseException:
        pass