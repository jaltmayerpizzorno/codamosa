# Automatically generated by Pynguin.
import socket as module_0
import tornado.tcpclient as module_1
import tornado.ioloop as module_2
import concurrent.futures._base as module_3
import datetime as module_4
import tornado.netutil as module_5

def test_case_0():
    try:
        list_0 = []
        address_family_0 = module_0.AddressFamily.AF_RDS
        connector_0 = module_1._Connector(list_0, address_family_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 100
        t_c_p_client_0 = module_1.TCPClient(int_0)
        tuple_0 = (t_c_p_client_0,)
        list_0 = [tuple_0, tuple_0, tuple_0]
        int_1 = 378
        set_0 = {int_0, int_1, int_0}
        connector_0 = module_1._Connector(list_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "r7B\r*{T7coryup'w"
        int_0 = 1878
        int_1 = 1104
        str_1 = 'g->2|'
        float_0 = 4558.2
        str_2 = "Returns a version string for the resource at the given path.\n\n        This class method may be overridden by subclasses.  The\n        default implementation is a SHA-512 hash of the file's contents.\n\n        .. versionadded:: 3.1\n        "
        t_c_p_client_0 = module_1.TCPClient(str_2)
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_1, str_1, float_0)
        t_c_p_client_1 = module_1.TCPClient()
        i_o_stream_1 = t_c_p_client_1.connect(str_0, int_0, int_0, str_0)
        list_0 = []
        t_c_p_client_0.close()
        callable_0 = None
        connector_0 = module_1._Connector(list_0, callable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        int_0 = 720
        tuple_0 = (int_0,)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        dict_0 = {}
        connector_0 = module_1._Connector(list_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_0.stop()
        int_0 = 734
        future_0 = module_3.Future()
        awaitable_0 = None
        tuple_0 = (awaitable_0, int_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        timedelta_0 = module_4.timedelta()
        connector_0 = module_1._Connector(list_0, timedelta_0)
        connector_0.clear_timeout()
        float_0 = 5340.132
        connector_0.set_timeout(float_0)
        connector_0.try_connect(future_0)
    except BaseException:
        pass

def test_case_5():
    try:
        list_0 = None
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_0.stop()
        int_0 = 734
        future_0 = module_3.Future()
        awaitable_0 = None
        tuple_0 = (awaitable_0, int_0)
        list_1 = [tuple_0, tuple_0, tuple_0, tuple_0]
        timedelta_0 = module_4.timedelta()
        connector_0 = module_1._Connector(list_1, timedelta_0)
        connector_0.clear_timeout()
        float_0 = 5340.132
        connector_0.set_timeout(float_0)
        connector_0.set_connect_timeout(timedelta_0)
        tuple_1 = (int_0,)
        list_2 = [tuple_1, tuple_1, tuple_1, tuple_1]
        tuple_2 = (list_0, list_0)
        connector_1 = module_1._Connector(list_2, tuple_2)
    except BaseException:
        pass

def test_case_6():
    try:
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_0.stop()
        int_0 = 734
        t_c_p_client_0 = module_1.TCPClient()
        future_0 = module_3.Future()
        awaitable_0 = None
        tuple_0 = (awaitable_0, int_0)
        list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
        timedelta_0 = module_4.timedelta()
        connector_0 = module_1._Connector(list_0, timedelta_0)
        connector_0.clear_timeout()
        float_0 = -1965.0
        future_1 = connector_0.start(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        str_0 = ':XL;'
        int_0 = 59
        str_1 = "u6tW,\x0b'~~"
        int_1 = -1686
        resolver_0 = module_5.Resolver()
        awaitable_0 = resolver_0.resolve(str_1, int_1)
        t_c_p_client_0 = module_1.TCPClient(awaitable_0)
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, int_0, str_0)
        i_o_loop_0.stop()
        int_2 = 734
        future_0 = module_3.Future()
        float_0 = 60.0
        float_1 = -2115.0
        tuple_0 = (float_0, float_1)
        list_0 = [tuple_0]
        t_c_p_client_1 = module_1.TCPClient()
        connector_0 = module_1._Connector(list_0, t_c_p_client_1)
        connector_0.clear_timeout()
        connector_0.clear_timeouts()
        awaitable_1 = None
        tuple_1 = (awaitable_1, int_2)
        connector_0.on_connect_timeout()
        list_1 = [tuple_1, tuple_1, tuple_1]
        connector_0.on_connect_timeout()
        connector_1 = module_1._Connector(list_0, int_2)
        tuple_2 = connector_1.split(list_0)
        timedelta_0 = module_4.timedelta()
        connector_2 = module_1._Connector(list_1, timedelta_0)
        connector_2.try_connect(future_0)
    except BaseException:
        pass

def test_case_8():
    try:
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        str_0 = ':XL;'
        int_0 = 59
        str_1 = 'o\x0b0+Sq\x0c\t}x#n'
        int_1 = -1686
        resolver_0 = module_5.Resolver()
        awaitable_0 = resolver_0.resolve(str_1, int_1)
        t_c_p_client_0 = module_1.TCPClient(awaitable_0)
        i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, int_0, str_0)
        i_o_loop_0.stop()
        int_2 = 734
        future_0 = module_3.Future()
        float_0 = 60.0
        float_1 = -2115.0
        tuple_0 = (float_0, float_1)
        list_0 = [tuple_0]
        t_c_p_client_1 = module_1.TCPClient()
        connector_0 = module_1._Connector(list_0, t_c_p_client_1)
        connector_0.clear_timeout()
        connector_0.clear_timeouts()
        dict_0 = {}
        connector_1 = module_1._Connector(list_0, dict_0)
        connector_1.on_timeout()
        awaitable_1 = None
        tuple_1 = (awaitable_1, int_2)
        connector_0.on_connect_timeout()
        list_1 = [tuple_1, tuple_1, tuple_1, tuple_0]
        connector_2 = module_1._Connector(list_0, int_2)
        tuple_2 = connector_2.split(list_0)
        list_2 = [i_o_stream_0]
        connector_3 = module_1._Connector(list_1, list_2)
        connector_3.set_timeout(float_1)
        timedelta_0 = module_4.timedelta()
        connector_4 = module_1._Connector(list_1, timedelta_0)
        connector_4.try_connect(future_0)
    except BaseException:
        pass

def test_case_9():
    try:
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        resolver_0 = module_5.Resolver()
        i_o_loop_0.stop()
        future_0 = module_3.Future()
        float_0 = -2115.0
        tuple_0 = (float_0, float_0)
        list_0 = [tuple_0]
        dict_0 = {}
        connector_0 = module_1._Connector(list_0, dict_0)
        connector_0.on_timeout()
        timedelta_0 = module_4.timedelta()
        iterator_0 = None
        address_family_0 = module_0.AddressFamily.AF_PACKET
        tuple_1 = (dict_0, resolver_0)
        future_1 = None
        connector_0.on_connect_done(iterator_0, address_family_0, tuple_1, future_1)
    except BaseException:
        pass

def test_case_10():
    try:
        i_o_loop_0 = module_2.IOLoop()
        i_o_loop_1 = i_o_loop_0.instance()
        resolver_0 = module_5.Resolver()
        i_o_loop_0.stop()
        future_0 = module_3.Future()
        float_0 = -2115.0
        tuple_0 = (float_0, float_0)
        list_0 = [tuple_0]
        t_c_p_client_0 = module_1.TCPClient()
        connector_0 = module_1._Connector(list_0, t_c_p_client_0)
        connector_0.clear_timeout()
        connector_0.set_connect_timeout(float_0)
        connector_0.clear_timeouts()
        t_c_p_client_0.close()
        dict_0 = {}
        connector_1 = module_1._Connector(list_0, dict_0)
        connector_1.on_timeout()
        connector_0.on_connect_timeout()
        tuple_1 = connector_0.split(list_0)
        timedelta_0 = module_4.timedelta()
        address_family_0 = module_0.AddressFamily.AF_PACKET
        future_1 = None
        iterator_0 = None
        tuple_2 = None
        connector_1.on_connect_done(iterator_0, address_family_0, tuple_2, future_1)
    except BaseException:
        pass