# Automatically generated by Pynguin.
import tornado.tcpclient as module_0
import tornado.ioloop as module_1
import concurrent.futures._base as module_2
import datetime as module_3
import builtins as module_4
import tornado.netutil as module_5
import socket as module_6

def test_case_0():
    pass

def test_case_1():
    t_c_p_client_0 = module_0.TCPClient()

def test_case_2():
    t_c_p_client_0 = module_0.TCPClient()
    t_c_p_client_0.close()

def test_case_3():
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    i_o_loop_0.stop()
    future_0 = module_2.Future()
    float_0 = -2115.0
    tuple_0 = (float_0, float_0)
    t_c_p_client_0 = module_0.TCPClient()
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    timedelta_0 = module_3.timedelta()
    connector_0 = module_0._Connector(list_0, timedelta_0)

def test_case_4():
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    i_o_loop_0.stop()
    future_0 = module_2.Future()
    float_0 = -2115.0
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0]
    t_c_p_client_0 = module_0.TCPClient()
    connector_0 = module_0._Connector(list_0, t_c_p_client_0)
    connector_0.clear_timeout()
    connector_0.clear_timeouts()
    connector_0.on_connect_timeout()
    list_1 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = connector_0.split(list_0)
    timedelta_0 = module_3.timedelta()
    connector_1 = module_0._Connector(list_1, timedelta_0)
    connector_0.set_timeout(float_0)

def test_case_5():
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_0.stop()
    future_0 = module_2.Future()
    float_0 = -2115.0
    tuple_0 = (float_0, float_0)
    t_c_p_client_0 = module_0.TCPClient()
    list_0 = [tuple_0, tuple_0]
    bytearray_0 = module_4.bytearray()
    connector_0 = module_0._Connector(list_0, bytearray_0)
    connector_0.on_connect_timeout()
    list_1 = [tuple_0, tuple_0, tuple_0, tuple_0]
    connector_0.on_timeout()
    timedelta_0 = module_3.timedelta()
    connector_1 = module_0._Connector(list_1, timedelta_0)

def test_case_6():
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    str_0 = ':XL;'
    int_0 = 59
    str_1 = "Bu6zW,$\x0b'~~"
    int_1 = -1686
    resolver_0 = module_5.Resolver()
    awaitable_0 = resolver_0.resolve(str_1, int_1)
    t_c_p_client_0 = module_0.TCPClient(awaitable_0)
    i_o_stream_0 = t_c_p_client_0.connect(str_0, int_0, int_0, str_0)
    i_o_loop_0.stop()
    int_2 = 756
    float_0 = 58.61846565279152
    float_1 = -2115.0
    tuple_0 = (float_0, float_1)
    list_0 = [tuple_0]
    t_c_p_client_1 = module_0.TCPClient()
    connector_0 = module_0._Connector(list_0, t_c_p_client_1)
    i_o_loop_1.make_current()
    float_2 = 60.50918636495327
    connector_0.set_timeout(float_2)
    connector_0.clear_timeout()
    connector_0.clear_timeouts()
    awaitable_1 = None
    tuple_1 = (awaitable_1, int_2)
    connector_0.on_connect_timeout()
    list_1 = [tuple_1, tuple_1, tuple_1, tuple_1]
    connector_1 = module_0._Connector(list_0, int_2)
    tuple_2 = connector_1.split(list_0)
    timedelta_0 = module_3.timedelta()
    t_c_p_client_2 = module_0.TCPClient()
    connector_2 = module_0._Connector(list_1, timedelta_0)

def test_case_7():
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    i_o_loop_0.stop()
    future_0 = module_2.Future()
    float_0 = -2115.0
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0]
    dict_0 = {}
    connector_0 = module_0._Connector(list_0, dict_0)
    connector_0.on_timeout()
    list_1 = [tuple_0, tuple_0, tuple_0, tuple_0]
    timedelta_0 = module_3.timedelta()
    connector_1 = module_0._Connector(list_1, timedelta_0)

def test_case_8():
    i_o_loop_0 = module_1.IOLoop()
    i_o_loop_1 = i_o_loop_0.instance()
    resolver_0 = module_5.Resolver()
    future_0 = module_2.Future()
    float_0 = -2115.0
    tuple_0 = (float_0, float_0)
    list_0 = [tuple_0]
    t_c_p_client_0 = module_0.TCPClient()
    dict_0 = {}
    connector_0 = module_0._Connector(list_0, dict_0)
    connector_0.on_timeout()
    connector_0.on_connect_timeout()
    list_1 = [tuple_0, tuple_0, tuple_0, tuple_0]
    tuple_1 = connector_0.split(list_0)
    timedelta_0 = module_3.timedelta()
    iterator_0 = None
    address_family_0 = module_6.AddressFamily.AF_PACKET
    tuple_2 = (dict_0, resolver_0)
    future_1 = None
    connector_0.on_connect_done(iterator_0, address_family_0, tuple_2, future_1)
    connector_1 = module_0._Connector(list_1, timedelta_0)
    connector_0.set_timeout(float_0)