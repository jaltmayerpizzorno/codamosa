# Automatically generated by Pynguin.
import pytutils.lazy.lazy_regex as module_0

def test_case_0():
    try:
        bytes_0 = b'\xeb\x95\x13\xf9\xf6$\xd4\xff\x95\x9c\x04\x11\\z8\xe2 '
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        var_0 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        invalid_pattern_0 = module_0.InvalidPattern(bool_0)
        var_0 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'm\x06a\x8a[\xd7'
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        var_0 = invalid_pattern_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xeb\x95\x13\xf9\xf6$\xd4\xff\x95\x9cg\x04\x11\\z8\xe2 '
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        var_0 = invalid_pattern_0.__eq__(invalid_pattern_0)
        set_0 = {bytes_0}
        lazy_regex_0 = module_0.LazyRegex()
        var_1 = lazy_regex_0.__getattr__(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        invalid_pattern_0 = module_0.InvalidPattern(bool_0)
        list_0 = []
        lazy_regex_0 = module_0.LazyRegex(list_0)
        var_0 = invalid_pattern_0.__eq__(lazy_regex_0)
        var_1 = invalid_pattern_0.__unicode__()
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getattr__(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'E`'
        lazy_regex_0 = module_0.LazyRegex(str_0)
        var_0 = lazy_regex_0.__getstate__()
        bytes_0 = b'\xeb\x95\x13\xf9\xf6$\xd4\xff\x95\x9c\x04\x11\\z~8\xe2 '
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        var_1 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '__setstate__ should work with older version pickled data'
        lazy_regex_0 = module_0.LazyRegex()
        var_0 = lazy_regex_0.__getstate__()
        lazy_regex_1 = module_0.LazyRegex()
        var_1 = lazy_regex_1.__setstate__(var_0)
        var_2 = lazy_regex_1.__setstate__(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        invalid_pattern_0 = None
        var_0 = module_0.lazy_compile()
        list_0 = [invalid_pattern_0, invalid_pattern_0]
        var_1 = invalid_pattern_0.__eq__(list_0)
        var_2 = module_0.reset_compile()
        lazy_regex_0 = None
        str_0 = "doesn't start with 'import ' or 'from '"
        lazy_regex_1 = module_0.LazyRegex()
        var_3 = module_0.reset_compile()
        str_1 = 'GWD'
        var_4 = invalid_pattern_0.__repr__()
        var_5 = module_0.reset_compile()
        dict_0 = {str_0: var_2, str_1: lazy_regex_0}
        var_6 = module_0.lazy_compile(**dict_0)
        var_7 = module_0.finditer_public(invalid_pattern_0, lazy_regex_0)
    except BaseException:
        pass

def test_case_9():
    try:
        lazy_regex_0 = module_0.LazyRegex()
        list_0 = []
        var_0 = module_0.finditer_public(lazy_regex_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'\x86KC#\x0c\xf6H\x92\xed*\xce'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        list_0 = [dict_0]
        var_0 = module_0.finditer_public(lazy_regex_0, bytes_0, list_0)
        invalid_pattern_0 = module_0.InvalidPattern(bytes_0)
        var_1 = invalid_pattern_0.__str__()
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xeb\x95\x13\xf9\xf6$\xd4\xff\x95\x9c\x04\x11\\z~8\xe2 '
        set_0 = {bytes_0, bytes_0}
        lazy_regex_0 = module_0.LazyRegex(set_0)
        str_0 = 'x6>'
        dict_0 = {str_0: str_0, str_0: lazy_regex_0, str_0: str_0}
        var_0 = lazy_regex_0.__getattr__(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ''
        invalid_pattern_0 = module_0.InvalidPattern(str_0)
        bytes_0 = b'\x86KC\x0c\xf6H\x92\x18*\xce'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
        lazy_regex_0 = module_0.LazyRegex(dict_0)
        list_0 = [dict_0]
        var_0 = module_0.finditer_public(lazy_regex_0, bytes_0, list_0)
        int_0 = 712
        var_1 = lazy_regex_0.__getattr__(int_0)
    except BaseException:
        pass