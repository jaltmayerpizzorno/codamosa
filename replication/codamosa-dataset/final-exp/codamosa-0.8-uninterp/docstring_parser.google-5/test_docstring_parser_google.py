# Automatically generated by Pynguin.
import docstring_parser.google as module_0
import docstring_parser.common as module_1

def test_case_0():
    pass

def test_case_1():
    google_parser_0 = module_0.GoogleParser()

def test_case_2():
    str_0 = 'bu\\^'
    docstring_0 = module_0.parse(str_0)

def test_case_3():
    str_0 = 'x\n\\6 n8$>MG'
    docstring_0 = module_0.parse(str_0)

def test_case_4():
    google_parser_0 = module_0.GoogleParser()
    str_0 = None
    docstring_0 = module_0.parse(str_0)
    str_1 = '\nA short description of the funciton\n\nA longer description of the function.\n\nThis may span multiple lines\nand include inline markup and other things.\n\nArgs:\n    param1: The first parameter\n    param2: The second parameter.\n        This may span multiple lines.\n\n            This may include indented code.\n\nExamples:\n    This is an example of how to use this function.\n        It may also include indented code.\n\n    >>> print(x)\n    42\n\nReturns:\n    Explanation of return value.\n'
    docstring_1 = google_parser_0.parse(str_1)

def test_case_5():
    google_parser_0 = module_0.GoogleParser()
    str_0 = '\n\n'
    docstring_0 = module_0.parse(str_0)
    google_parser_1 = module_0.GoogleParser()
    str_1 = '\nA short description of the funciton\n\nA longer description of the function.\n\nThis may span multiple lines\nand include inline markup and other things.\n\nArgs:\n    param1: The first parameter\n    param2: The second parameter.\n        This may span multiple lines.\n\n            This may include indented code.\n\nExamples:\n    This is an example of how to use this function.\n        It may also include indented code.\n\n    >>> print(x)\n    42\n\nReturns:\n    Explanation of return value.\n'
    docstring_1 = google_parser_0.parse(str_1)

def test_case_6():
    google_parser_0 = module_0.GoogleParser()
    str_0 = '\nA short description of the funciton\n\nA longer description of the function.\n\nThis may span multiple lines\nand include inline markup and other things.\n\nArgs:\n    param1: The first parameter.\n    param2: The second parameter.\n        This may span multiple lines.\n\n            This may include indented code.\n\nExamples:\n    This is an example of how to use this function.\n        It may also include indented code.\n\n    >>> print(x)\n    42\n\nReturns:\n    Explanation of return value.\n'
    list_0 = [str_0, google_parser_0, google_parser_0]
    section_0 = module_0.Section(*list_0)
    var_0 = google_parser_0.add_section(section_0)
    str_1 = "\n    docstring\n\n    Args:\n        arg1 (str): arg1 description.\n        arg2 (str): arg2 description. Default: 'default'.\n        arg3 (str, optional): arg3 description.\n\n    Returns:\n        str: something\n\n    Yields:\n        int: something\n\n    Raises:\n        ValueError: raises ValueError.\n    "
    docstring_0 = google_parser_0.parse(str_1)

def test_case_7():
    str_0 = '\nA short description of the funciton\n\nA longer description of the function.\n\nThis may span multiple lines\nand include inline markup and other things.\n\nArgs:\n    param1: The first parameter.\n    param2: The second parameter.\n        This may span multiple lines.\n\n            This may include indented code.\n\nExamples:\n    This is an example of how to use this function.\n        It may also include indented code.\n\n    >>> print(x)\n    42\n\nReturns:\n    Explanation of return value.\n'
    docstring_0 = module_0.parse(str_0)

def test_case_8():
    str_0 = '\n    Parses a Google-style docstring into its components.\n\n    Args:\n        text (str): the docstring to parse\n\n    Returns:\n        Docstring: the parsed docstring\n\n    Raises:\n        ParseError: if the string is not a valid google docstring\n    '
    docstring_0 = module_0.parse(str_0)

def test_case_9():
    google_parser_0 = module_0.GoogleParser()
    str_0 = "\n    docstring\n\n    Args:\n        arg1 (str): arg1 description.\n        arg2 (str): arg2 description. Default: 'default'.\n        arg3 (str, optional): arg3 description.\n\n    Returns:\n        str: something\n\n    Yields:\n        int: something\n\n    Raises:\n        ValueError: raises ValueError.\n    "
    docstring_0 = google_parser_0.parse(str_0)

def test_case_10():
    str_0 = "Single line docstring.\n\nShort description.\n\nLong description.\n\nAttributes:\n    attr1 (blah): This is attr1.\n    attr2 (blah): This is attr2.\n    attr3 (blah): This is attr3.\n\nArgs:\n    arg1 (int): This is arg1. Defaults to 42.\n    arg2 (str): This is arg2. Defaults to 'hello'.\n    arg3 (float): This is arg3.\n\nRaises:\n    ValueError: This is raised on bad value.\n    RuntimeError: This is raised on runtime error.\n\nExample:\n    This is example.\n\nReturns:\n    int: This is return value.\n\n"
    docstring_0 = module_0.parse(str_0)

def test_case_11():
    str_0 = "Single line docstrig.\n\nShort description.\n\nLong description.\n\nAttributes:\n    attr1 (blah): This is attr1.\n    attr2 (blah): This is attr2.\n    attr3 (blah):This is attr3.\n\nArgs:\n   arg1 (int): This is arg1. Defaults to 42.\n    arg2 (str): This is arg2. Defaults to 'hello'.\n    arg3 (float): This is arg3.\n\nRaises:\n    ValeError: This is raised on bad vwlue.\n    RuntimeError: This is raised on runtimeerror.\n\nExample:\n    This is example.\n\nReturns:\n    in: This is return value.\n\n"
    docstring_0 = module_0.parse(str_0)

def test_case_12():
    google_parser_0 = module_0.GoogleParser()
    str_0 = "\n    docstring|\n    Args:\n        arg1 (str): arg1 description.\n        arg2 (str): arg2 description. Default: 'default'.\n        arg3 (str, optional): arg3 description.\n\n    Returns:\n        str: something\n\n    Yields:\n        int: something\n\n    Raises:\n        ValueError: raises ValueError.\n    "
    docstring_0 = module_1.Docstring()
    docstring_1 = google_parser_0.parse(str_0)