# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        var_0 = module_0.find_ini_config_file()
        str_0 = 'Reading state information...'
        set_0 = None
        float_0 = 512.0
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_config_value(str_0, set_0, str_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager()
        list_0 = [bool_0, bool_0]
        config_manager_1 = module_0.ConfigManager(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'v:~y<`4C]3>tm\x0bEDrlo'
        config_manager_0 = module_0.ConfigManager(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = None
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.get_configuration_definition(dict_0)
        setting_0 = module_0.Setting()
    except BaseException:
        pass

def test_case_4():
    try:
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager()
        bytes_0 = b'\xba\x13\x83\x06\xa0\xdc+@UW\xbeTL\xac'
        bytes_1 = b'\xbc\x14\xcc\xd0\x1c.4'
        var_0 = config_manager_0.get_configuration_definitions(bytes_1)
        config_manager_2 = module_0.ConfigManager(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        config_manager_0 = module_0.ConfigManager()
        list_0 = [config_manager_0, config_manager_0, config_manager_0, config_manager_0]
        tuple_0 = None
        var_0 = config_manager_0.get_config_value(list_0, tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'dict'
        list_0 = [str_0, str_0, str_0, str_0]
        bytes_0 = b'\xeb\xfb%\xbc5c\x08\xb9\xc5\xd50%\xd2\x1c'
        tuple_0 = (bytes_0,)
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.initialize_plugin_configuration_definitions(str_0, list_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        config_manager_0 = module_0.ConfigManager(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = None
        config_manager_0 = module_0.ConfigManager()
        bool_0 = True
        str_0 = 'CT'
        var_0 = config_manager_0.get_plugin_vars(list_0, bool_0)
        set_0 = {str_0, bool_0}
        str_1 = '+AuQ]xxO\x0c\x0c'
        var_1 = config_manager_0.get_config_value(list_0, set_0, str_1)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        int_0 = -477
        var_0 = module_0.get_ini_config_value(set_0, int_0)
        list_0 = None
        setting_0 = module_0.Setting(*list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        config_manager_0 = module_0.ConfigManager()
        var_0 = module_0.find_ini_config_file()
        str_0 = '2TW8h/ \rH\nGx'
        str_1 = '#jQp8\x0b?-'
        dict_0 = {str_0: list_0, str_1: list_0}
        var_1 = config_manager_0.update_config_data(dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xdc\xda\x13\xc9\xa8='
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0, bytes_0]
        bytes_1 = b'\x99\x98\x1c\x9eR'
        var_0 = module_0.get_ini_config_value(list_0, bytes_1)
        tuple_0 = (list_0,)
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.update_config_data(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = None
        config_manager_0 = module_0.ConfigManager()
        bool_0 = True
        str_0 = 'Cy'
        var_0 = module_0.get_ini_config_value(bool_0, str_0)
        bool_1 = False
        bool_2 = True
        float_0 = 0.1
        tuple_0 = (bool_2, float_0, bool_2)
        bytes_0 = b''
        var_1 = config_manager_0.get_config_value(list_0, tuple_0, bytes_0, bool_1)
    except BaseException:
        pass

def test_case_13():
    try:
        list_0 = None
        config_manager_0 = module_0.ConfigManager()
        dict_0 = {list_0: list_0}
        var_0 = module_0.ensure_type(dict_0, list_0)
        dict_1 = None
        var_1 = module_0.get_config_type(dict_1)
        bool_0 = True
        str_0 = 'C^,6'
        var_2 = module_0.get_ini_config_value(bool_0, str_0)
        var_3 = config_manager_0.get_plugin_vars(list_0, bool_0)
        int_0 = 266
        dict_2 = {}
        var_4 = config_manager_0.initialize_plugin_configuration_definitions(config_manager_0, list_0, dict_2)
        var_5 = module_0.find_ini_config_file()
        var_6 = config_manager_0.get_configuration_definition(int_0, bool_0)
        str_1 = ''
        config_manager_1 = module_0.ConfigManager(str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        str_0 = "wl,'3x"
        float_0 = 166.6898
        dict_0 = {bool_0: float_0, bool_0: float_0, str_0: bool_0, float_0: bool_0}
        config_manager_0 = module_0.ConfigManager()
        config_manager_1 = module_0.ConfigManager(dict_0, config_manager_0)
    except BaseException:
        pass

def test_case_15():
    try:
        config_manager_0 = module_0.ConfigManager()
        plugin_0 = None
        list_0 = []
        bytes_0 = b'\x85\xf9'
        var_0 = config_manager_0.get_plugin_options(plugin_0, list_0, bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        var_0 = module_0.find_ini_config_file()
        str_0 = '|v;G>6u:n?rUQ_'
        dict_0 = {str_0: str_0}
        bool_0 = True
        dict_1 = {str_0: str_0, str_0: bool_0}
        str_1 = 'none'
        dict_2 = {str_0: bool_0, str_1: var_0, str_0: bool_0, str_1: str_0}
        tuple_0 = (dict_2,)
        tuple_1 = (dict_1, tuple_0, tuple_0)
        var_1 = module_0.get_ini_config_value(dict_0, tuple_1)
        str_2 = 'Y*GHJyETj _Ym(<h'
        dict_3 = {str_0: str_0, str_0: str_0, str_0: var_0, str_2: var_0}
        str_3 = 'none'
        bytes_0 = b'\xa5\xe1~\xa1\xa8u\x82\xc1)d\xb2\x05g\xd6;\x1d'
        list_0 = None
        var_2 = module_0.get_ini_config_value(bytes_0, list_0)
        list_1 = [str_2, str_0]
        config_manager_0 = module_0.ConfigManager()
        tuple_2 = (str_3, list_1, config_manager_0)
        config_manager_1 = module_0.ConfigManager()
        dict_4 = None
        set_0 = {str_2}
        var_3 = config_manager_1.get_plugin_options(dict_4, str_1, set_0)
        var_4 = config_manager_1.get_configuration_definition(dict_3, tuple_2)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = module_0.find_ini_config_file()
        bool_0 = None
        list_0 = [bool_0, var_0]
        list_1 = []
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_configuration_definition(bool_0, list_0, list_1)
    except BaseException:
        pass

def test_case_18():
    try:
        config_manager_0 = module_0.ConfigManager()
        bool_0 = False
        str_0 = 'CT'
        var_0 = module_0.get_ini_config_value(bool_0, str_0)
        bool_1 = False
        setting_0 = None
        int_0 = -1042
        var_1 = config_manager_0.get_plugin_vars(setting_0, int_0)
        str_1 = 'path'
        list_0 = [var_0, bool_1, var_0]
        var_2 = config_manager_0.update_config_data(str_1, list_0)
    except BaseException:
        pass

def test_case_19():
    try:
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data()
        bool_0 = None
        float_0 = -1802.5
        str_0 = 'Sends a GET request. Returns :class:`HTTPResponse` object.\n\n        :arg url: URL to request\n        :kwarg \\*\\*kwargs: Optional arguments that ``open`` takes.\n        :returns: HTTPResponse\n        '
        dict_0 = {str_0: float_0, str_0: str_0}
        tuple_0 = (dict_0,)
        var_1 = config_manager_0.get_configuration_definitions(bool_0, float_0, tuple_0)
        tuple_1 = ()
        var_2 = config_manager_0.get_configuration_definition(tuple_1)
        config_manager_1 = module_0.ConfigManager(tuple_1)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = None
        str_0 = 'none'
        var_1 = module_0.ensure_type(var_0, str_0)
        str_1 = 'None'
        var_2 = module_0.ensure_type(str_1, str_0)
        bytes_0 = b''
        var_3 = module_0.resolve_path(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = None
        str_0 = 'none'
        var_1 = module_0.ensure_type(var_0, str_0)
        str_1 = 'None'
        var_2 = module_0.ensure_type(str_1, str_0)
        str_2 = ''
        var_3 = module_0.ensure_type(str_2, str_0)
    except BaseException:
        pass