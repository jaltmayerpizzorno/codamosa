# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = "7=.e[+_7!|<e\nQ'8`^"
    int_0 = module_0.len_without_ansi(str_0)

def test_case_2():
    str_0 = '*bz~^J3\rmBIn'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_0)

def test_case_3():
    str_0 = '\nbw\\1'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_4():
    str_0 = '\nbw\\1'
    str_1 = '*bz~^J3\rmBIn'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_1)
    bool_0 = True
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0)
    str_2 = ansi_text_wrapper_1.fill(str_0)

def test_case_5():
    str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_0 = module_0.len_without_ansi(str_0)

def test_case_6():
    str_0 = 'zWMx(F,\x0bG`ZE|^'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_0)
    str_1 = ansi_text_wrapper_0.fill(str_0)

def test_case_7():
    str_0 = '\nbw\\1'
    str_1 = '*bz~^J3\rmBIn'
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(placeholder=str_1)
    bool_0 = True
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_0)
    str_2 = 'qNa5HF?\tp#2'
    list_0 = ansi_text_wrapper_1.wrap(str_2)
    list_1 = ansi_text_wrapper_0.wrap(str_0)

def test_case_8():
    str_0 = '1\rd%XG=Pcky:'
    bool_0 = True
    int_0 = -293
    int_1 = 31
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_1, str_0, str_0, bool_0, bool_0, int_1, max_lines=int_1)
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    str_1 = "Convert the given ``text``  into a string of escapedDUnicode\n    hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped Python literal.3\n    Example:\n        >>> from flutils.strutilsYimport as_escaped_unicode_literal\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_literal(t)\n        '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n    "
    str_2 = ansi_text_wrapper_0.fill(str_1)
    list_1 = ansi_text_wrapper_0.wrap(str_2)
    str_3 = "9Q'-[\x0cEx2E"
    bool_1 = False
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_1, str_3, bool_1, max_lines=int_0)
    str_4 = ansi_text_wrapper_1.fill(str_0)

def test_case_9():
    str_0 = 'R?aZ*x'
    bool_0 = True
    int_0 = -293
    int_1 = 18
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_1, str_0, str_0, bool_0, bool_0, int_1, max_lines=int_1)
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    str_1 = "Convert the given ``text``  into a string of escapedDUnicode\n    hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped Python literal.3\n    Example:\n        >>> from flutils.strutilsYimport as_escaped_unicode_literal\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_literal(t)\n        '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n    "
    str_2 = ansi_text_wrapper_0.fill(str_1)
    list_1 = ansi_text_wrapper_0.wrap(str_2)
    str_3 = "9Q'-[\x0cEx2E"
    bool_1 = False
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_1, str_3, bool_1, max_lines=int_0)
    str_4 = ansi_text_wrapper_1.fill(str_0)

def test_case_10():
    str_0 = '1\rd%XG=Pcky:'
    bool_0 = True
    int_0 = 18
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, str_0, str_0, bool_0, bool_0, int_0, max_lines=int_0)
    list_0 = ansi_text_wrapper_0.wrap(str_0)
    str_1 = "Convert the given ``text``  into a string of escapedDUnicode\n    hexadecimal.\n\n    Args:\n         text (:obj:`str`): The string to convert.\n\n    :rtype:\n        :obj:`str`\n\n            A string with each character of the given ``text`` converted\n            into an escaped Python literal.3\n    Example:\n        >>> from flutils.strutilsYimport as_escaped_unicode_literal\n        >>> t = '1.â˜… ðŸ›‘'\n        >>> as_literal(t)\n        '\\\\x31\\\\x2e\\\\u2605\\\\x20\\\\U0001f6d1'\n    "
    str_2 = ansi_text_wrapper_0.fill(str_1)
    int_1 = 174
    bool_1 = False
    str_3 = ansi_text_wrapper_0.fill(str_2)
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(bool_1, bool_1, bool_0, bool_1, max_lines=int_0)
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(int_1, bool_1)

def test_case_11():
    int_0 = -293
    int_1 = 18
    str_0 = 'y1T6OjLce19'
    str_1 = "9Q'-[\x0cEx2E"
    bool_0 = False
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_1, str_1, bool_0, max_lines=int_0)
    str_2 = ansi_text_wrapper_0.fill(str_0)

def test_case_12():
    str_0 = ''
    bool_0 = True
    bool_1 = False
    bool_2 = None
    int_0 = 7
    ansi_text_wrapper_0 = module_0.AnsiTextWrapper(str_0, bool_0, bool_1, bool_2, int_0, max_lines=int_0)
    str_1 = '\x1b[38;5;209mfoobar\x1b[0m'
    int_1 = module_0.len_without_ansi(str_1)
    str_2 = '\x1b[38;5;209\\foo'
    str_3 = 'bar\x1b[0m'
    str_4 = [str_2, str_3]
    int_2 = module_0.len_without_ansi(str_4)
    str_5 = 'foobar'
    int_3 = module_0.len_without_ansi(str_5)
    str_6 = '?-_)a7`$j`+^PVmpV[\\'
    ansi_text_wrapper_1 = module_0.AnsiTextWrapper(placeholder=str_6)
    str_7 = ansi_text_wrapper_1.fill(str_2)
    str_8 = 'foo'
    str_9 = 'bar'
    bool_3 = False
    ansi_text_wrapper_2 = module_0.AnsiTextWrapper(bool_0, bool_3)
    str_10 = [str_8, str_9]
    int_4 = module_0.len_without_ansi(str_10)