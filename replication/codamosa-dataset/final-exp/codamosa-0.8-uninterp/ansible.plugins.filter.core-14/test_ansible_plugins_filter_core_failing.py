# Automatically generated by Pynguin.
import ansible.plugins.filter.core as module_0
import ansible.template as module_1

def test_case_0():
    try:
        filter_module_0 = module_0.FilterModule()
        list_0 = [filter_module_0, filter_module_0]
        var_0 = module_0.to_yaml(filter_module_0, *list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 800.04086
        str_0 = 'eAtfA1?v8QY\rP]@h3Wd'
        int_0 = 127
        var_0 = module_0.mandatory(int_0)
        var_1 = module_0.to_yaml(float_0)
        dict_0 = {str_0: float_0, str_0: str_0}
        filter_module_0 = module_0.FilterModule(**dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = None
        set_0 = {bytes_0}
        var_0 = module_0.to_nice_yaml(set_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -39.2936
        bytes_0 = b'\x15\x82\xa9\xf3\t\xcf\xc2\xd0\x1f\x9bum9\x89\x95\x98'
        dict_0 = None
        list_0 = [bytes_0, bytes_0]
        var_0 = module_0.to_nice_yaml(float_0, dict_0, *list_0)
        var_1 = module_0.get_hash(bytes_0)
        list_1 = [bytes_0, var_1, bytes_0]
        var_2 = module_0.combine(*list_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x1b\x1a\x87^m\xf7\x95\n\x90A'
        var_0 = module_0.to_json(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        var_0 = module_0.to_datetime(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1.0
        filter_module_0 = module_0.FilterModule()
        var_0 = filter_module_0.filters()
        str_0 = 'All In One'
        var_1 = module_0.strftime(float_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        set_0 = None
        list_0 = [set_0, set_0]
        var_0 = module_0.to_bool(list_0)
        filter_module_0 = module_0.FilterModule()
        filter_module_1 = module_0.FilterModule()
        var_1 = filter_module_0.filters()
        bytes_0 = b'\x94\xd4uO|'
        var_2 = module_0.strftime(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 974
        list_0 = [int_0]
        set_0 = None
        var_0 = module_0.quote(set_0)
        bool_0 = False
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'`#X\x90,\xb8\xdd\xceX\xea\xc1\xaeA'
        list_1 = [bool_0, list_0, list_0, bytes_0]
        var_1 = module_0.ternary(list_0, bool_0, filter_module_0, list_1)
        dict_0 = {}
        list_2 = [dict_0, dict_0, dict_0, dict_0]
        var_2 = module_0.quote(list_2)
        tuple_0 = None
        bool_1 = True
        dict_1 = {tuple_0: var_2, int_0: list_0, bool_1: set_0, bytes_0: var_2}
        var_3 = module_0.extract(tuple_0, dict_0, dict_1)
    except BaseException:
        pass

def test_case_9():
    try:
        set_0 = None
        int_0 = 32602
        bytes_0 = b'\x0f\xf9i\xc9!'
        tuple_0 = (bytes_0,)
        var_0 = module_0.ternary(set_0, int_0, tuple_0)
        str_0 = 'posix_extended'
        tuple_1 = (str_0,)
        bool_0 = True
        var_1 = module_0.regex_replace(tuple_1, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'nAuWX/'
        float_0 = 1115.0
        var_0 = module_0.rand(str_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xa0b\xf6\x18'
        list_0 = [bytes_0]
        var_0 = module_0.randomize_list(bytes_0, list_0)
        int_0 = 4747
        tuple_0 = None
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.dict_to_list_of_dict_key_value_elements(int_0, tuple_0, filter_module_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'v\x84\xc2\xf8\x0f\xe0_dR}V\x08i\x1a\xf1'
        var_0 = module_0.get_hash(bytes_0)
        list_0 = [bytes_0, var_0, bytes_0]
        var_1 = module_0.combine(*list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "]8{'"
        dict_0 = {str_0: str_0, str_0: str_0}
        list_0 = [dict_0, dict_0]
        bytes_0 = b'\x1b"\xe5\xca?\x8e'
        float_0 = 100.0
        var_0 = module_0.to_bool(float_0)
        str_1 = 'ssh %s@%s:%s : %s\nTo connect as a different user, use -u <username>.'
        var_1 = module_0.get_encrypted_password(list_0, bytes_0, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        float_0 = 0.5
        bool_0 = None
        var_0 = module_0.to_uuid(float_0, bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '>y'
        str_1 = 'Uhh\r7E0'
        str_2 = 'w}~yLJ\r7^S.Al\x0b 0n'
        str_3 = 'j{B\nnTH<J3z79&ll>'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_2, str_3: str_0}
        var_0 = module_0.combine(**dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'j\t?d86w`a8XT[9PrJDB'
        list_0 = []
        int_0 = 1487
        var_0 = module_0.rand(list_0, int_0)
        var_1 = module_0.strftime(str_0)
        bool_0 = True
        var_2 = module_0.regex_escape(bool_0)
        var_3 = module_0.combine()
        var_4 = module_0.to_yaml(list_0, *list_0)
        bool_1 = False
        bytes_0 = b'\xe2\x11'
        str_1 = 'D^FfxaSk=&uD9\x0b|'
        var_5 = module_0.extract(bool_1, bytes_0, list_0, str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        tuple_0 = ()
        complex_0 = None
        var_0 = module_0.extract(tuple_0, complex_0, tuple_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '#'
        var_0 = module_0.flatten(str_0)
        bool_0 = True
        bool_1 = True
        filter_module_0 = None
        var_1 = module_0.do_groupby(bool_0, bool_1, filter_module_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'qka]30'
        var_0 = module_0.mandatory(str_0)
        list_0 = [str_0, str_0, str_0, str_0, str_0]
        var_1 = module_0.b64encode(str_0)
        bool_0 = True
        ansible_undefined_0 = module_1.AnsibleUndefined()
        var_2 = module_0.regex_search(bool_0, ansible_undefined_0, *list_0)
    except BaseException:
        pass

def test_case_20():
    try:
        dict_0 = {}
        float_0 = 192.97952
        var_0 = module_0.b64decode(float_0)
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        var_1 = module_0.subelements(list_0, list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        var_0 = module_0.subelements(list_0, list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        filter_module_0 = module_0.FilterModule()
        str_0 = '$56BL|a;#<s'
        dict_0 = {str_0: filter_module_0}
        int_0 = -1811
        var_0 = module_0.subelements(dict_0, int_0, filter_module_0)
    except BaseException:
        pass

def test_case_23():
    try:
        filter_module_0 = module_0.FilterModule()
        int_0 = 493
        var_0 = module_0.subelements(filter_module_0, int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        list_0 = []
        list_1 = [list_0]
        dict_0 = {}
        var_0 = module_0.subelements(list_1, dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        tuple_0 = None
        int_0 = -2803
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(tuple_0, tuple_0, int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 1400
        bool_0 = False
        str_0 = ''
        dict_0 = {str_0: bool_0, str_0: str_0}
        filter_module_0 = module_0.FilterModule()
        str_1 = "]C1kN{'z\ng\r4\x0cXN8X|"
        var_0 = module_0.dict_to_list_of_dict_key_value_elements(dict_0, filter_module_0, str_1)
        var_1 = module_0.regex_search(int_0, bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0]
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(bool_0, list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '%O\x0cQo++I'
        tuple_0 = None
        var_0 = module_0.regex_findall(str_0, tuple_0)
    except BaseException:
        pass

def test_case_29():
    try:
        float_0 = 1.5
        set_0 = {float_0, float_0, float_0, float_0}
        bytes_0 = b'\xd9\xb5'
        tuple_0 = (set_0, bytes_0, bytes_0)
        str_0 = 'B#Ozv3ajFPyW%'
        dict_0 = {str_0: bytes_0}
        var_0 = module_0.list_of_dict_key_value_elements_to_dict(tuple_0, dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        filter_module_0 = module_0.FilterModule()
        bytes_0 = b'\xcd\xf6'
        var_0 = module_0.path_join(bytes_0)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'qka]30'
        list_0 = [str_0, str_0, str_0, str_0]
        ansible_undefined_0 = module_1.AnsibleUndefined()
        str_1 = 'Q?\x0cUZ90eb->(['
        var_0 = module_0.regex_escape(list_0, str_1)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = "/s's/devices/virtual/dmi/id/board_asset[tag"
        var_0 = module_0.regex_search(str_0, str_0)
    except BaseException:
        pass

def test_case_33():
    try:
        dict_0 = {}
        float_0 = -161.75336
        list_0 = [dict_0]
        var_0 = module_0.regex_search(dict_0, float_0, *list_0)
    except BaseException:
        pass

def test_case_34():
    try:
        var_0 = module_0.combine()
        int_0 = None
        str_0 = 'bR*6'
        str_1 = '{0}:{J}'
        set_0 = {int_0, str_0, str_1}
        list_0 = [str_0, str_1, str_1, str_0]
        var_1 = module_0.to_nice_yaml(str_0, set_0, *list_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = -2504
        list_0 = [int_0, int_0, int_0]
        str_0 = None
        list_1 = [int_0, list_0, str_0]
        var_0 = module_0.combine(*list_1)
    except BaseException:
        pass

def test_case_36():
    try:
        filter_module_0 = module_0.FilterModule()
        int_0 = 476
        var_0 = module_0.regex_replace()
        str_0 = 'x)!pV{a/}X\x0cTIS1&z'
        str_1 = '_default'
        int_1 = 235
        str_2 = "!H'6\r{\x0c.R1C"
        dict_0 = {str_1: str_0, str_1: var_0, str_1: int_1, str_2: int_0}
        var_1 = module_0.comment(str_0, **dict_0)
        str_3 = 'DQ\tk!/*\x0cR9u'
        var_2 = filter_module_0.filters()
        var_3 = module_0.path_join(str_3)
        str_4 = 'y)B(l"g%xpZ'
        filter_module_1 = module_0.FilterModule()
        var_4 = module_0.to_bool(str_4)
    except BaseException:
        pass

def test_case_37():
    try:
        bool_0 = True
        bytes_0 = b'\xd6:'
        var_0 = module_0.rand(bool_0, bytes_0)
        tuple_0 = ()
        var_1 = module_0.path_join(tuple_0)
    except BaseException:
        pass

def test_case_38():
    try:
        set_0 = set()
        list_0 = [set_0, set_0]
        dict_0 = {}
        list_1 = [set_0, list_0]
        var_0 = module_0.quote(list_1)
        var_1 = module_0.to_yaml(set_0, *list_0, **dict_0)
        str_0 = 'N{2m3J0YMu>W-mSn|3'
        var_2 = module_0.regex_search(str_0, str_0, **dict_0)
        tuple_0 = ()
        var_3 = module_0.list_of_dict_key_value_elements_to_dict(tuple_0)
        var_4 = module_0.get_encrypted_password(dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = 'qk-a]30'
        list_0 = [str_0, str_0, str_0, str_0]
        bytes_0 = None
        var_0 = module_0.regex_search(list_0, bytes_0, *list_0)
    except BaseException:
        pass

def test_case_40():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0, dict_0]
        var_0 = module_0.combine(*list_0)
        list_1 = []
        var_1 = module_0.from_yaml(list_1)
        float_0 = 0.1
        var_2 = module_0.strftime(float_0)
    except BaseException:
        pass

def test_case_41():
    try:
        filter_module_0 = module_0.FilterModule()
        ansible_undefined_0 = module_1.AnsibleUndefined(filter_module_0)
        ansible_undefined_1 = module_1.AnsibleUndefined(ansible_undefined_0)
        var_0 = filter_module_0.filters()
        async_iterator_0 = ansible_undefined_1.__aiter__()
        float_0 = -618.49826
        bytes_0 = b'\x7f\xb2$'
        var_1 = module_0.to_nice_yaml(bytes_0)
        dict_0 = {}
        var_2 = module_0.to_nice_json(float_0, **dict_0)
        var_3 = module_0.b64encode(async_iterator_0)
        str_0 = 'Bim$'
        list_0 = []
        var_4 = module_0.combine()
        var_5 = module_0.to_nice_yaml(str_0, list_0)
    except BaseException:
        pass

def test_case_42():
    try:
        async_iterator_0 = None
        list_0 = [async_iterator_0, async_iterator_0]
        list_1 = [async_iterator_0, list_0, list_0, async_iterator_0]
        var_0 = module_0.to_nice_yaml(list_1)
        str_0 = 'j\t?d86w`a8XT[9PrJDB'
        var_1 = module_0.strftime(str_0)
        int_0 = 1
        str_1 = 'ZlyW>\t+*-;iC\x0boe|'
        var_2 = module_0.comment(str_1)
        str_2 = 'Hr$zE'
        list_2 = []
        var_3 = module_0.to_yaml(list_2, *list_2)
        dict_0 = {str_2: int_0}
        list_3 = [str_2, int_0, int_0, str_2]
        var_4 = module_0.flatten(list_3, dict_0)
        int_1 = 2
        var_5 = module_0.mandatory(int_0, int_1)
        str_3 = 'foo'
        var_6 = module_0.from_yaml(str_3)
        ansible_undefined_0 = module_1.AnsibleUndefined(str_3)
        str_4 = 'Expecting exception'
        var_7 = Exception(str_4)
        str_5 = 'foo'
        ansible_undefined_1 = module_1.AnsibleUndefined(str_5)
        str_6 = 'bar'
        var_8 = module_0.mandatory(ansible_undefined_1, str_6)
    except BaseException:
        pass

def test_case_43():
    try:
        float_0 = -39.2936
        filter_module_0 = module_0.FilterModule()
        set_0 = set()
        var_0 = module_0.rand(filter_module_0, set_0, float_0)
    except BaseException:
        pass

def test_case_44():
    try:
        list_0 = []
        list_1 = [list_0]
        set_0 = None
        int_0 = 32580
        bytes_0 = b'\x0f\xf9i!'
        tuple_0 = (bytes_0,)
        str_0 = ',!Gep(0*`C\x0c3`cu'
        str_1 = '}:U8n4'
        list_2 = [list_0, bytes_0, str_0]
        dict_0 = {}
        var_0 = module_0.mandatory(dict_0, dict_0)
        var_1 = module_0.flatten(tuple_0)
        dict_1 = {str_0: set_0, str_1: list_2}
        var_2 = module_0.to_uuid(list_0)
        var_3 = module_0.from_yaml(dict_1)
        filter_module_0 = module_0.FilterModule()
        var_4 = module_0.ternary(set_0, int_0, tuple_0)
        str_2 = 'jghI\n%\rb35UVz:0q%'
        var_5 = module_0.regex_search(bytes_0, str_2, *list_0)
        float_0 = 1.0
        var_6 = module_0.extract(list_1, float_0, dict_1, list_2)
    except BaseException:
        pass

def test_case_45():
    try:
        list_0 = []
        bytes_0 = b'\xf9i!'
        str_0 = ',!Gp(0*`C\x0c3cu'
        list_1 = [list_0, bytes_0, str_0]
        dict_0 = {}
        var_0 = module_0.to_uuid(list_0)
        str_1 = 'jghI\n%\rb35UVz:0q%'
        list_2 = [dict_0, list_1]
        var_1 = module_0.subelements(list_2, str_1)
    except BaseException:
        pass

def test_case_46():
    try:
        dict_0 = {}
        str_0 = '\x0c|%L'
        var_0 = module_0.randomize_list(str_0)
        float_0 = 33.021712
        str_1 = '5+kz?GBBN`h'
        str_2 = '\tWP"lgyDM|2WC'
        str_3 = 'c{\tE|0`j|B\t7vv'
        dict_1 = {str_0: float_0, str_1: str_0, str_2: var_0, str_3: str_2}
        str_4 = '%'
        var_1 = module_0.rand(float_0, dict_0, float_0, dict_1, str_4)
    except BaseException:
        pass

def test_case_47():
    try:
        bytes_0 = b'\x15\x82\xa9\xf3\t\xcf\xc2\xd0\x1f\x9bum9\x89\x95\x98'
        str_0 = 'gZE,pN~Bf`!W'
        var_0 = module_0.from_yaml_all(str_0)
        dict_0 = {}
        var_1 = module_0.combine()
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_2 = module_0.randomize_list(filter_module_0)
        str_1 = '-eaWp1O"SV\x0bpW'
        str_2 = '/sys/devices/virtual/dmi/id/board_asset_tag'
        str_3 = 'posix_basic'
        str_4 = '*Y\ro'
        str_5 = 'failed to transfer file to %s'
        dict_1 = {str_3: str_3, str_4: bytes_0, str_5: str_1}
        list_0 = [str_5, str_3, str_2, str_5]
        var_3 = module_0.regex_search(str_2, dict_1, *list_0)
    except BaseException:
        pass

def test_case_48():
    try:
        str_0 = 'qka]30'
        async_iterator_0 = None
        int_0 = 73
        int_1 = 880
        var_0 = module_0.rand(async_iterator_0, int_0, async_iterator_0, int_1)
        list_0 = [str_0, str_0, str_0, str_0, str_0]
        bytes_0 = None
        var_1 = module_0.regex_search(str_0, bytes_0, *list_0)
    except BaseException:
        pass

def test_case_49():
    try:
        bool_0 = False
        bool_1 = True
        var_0 = module_0.to_uuid(bool_0, bool_1)
    except BaseException:
        pass

def test_case_50():
    try:
        list_0 = []
        float_0 = 8.174420523212124
        float_1 = -161.75336
        var_0 = module_0.to_bool(float_1)
        var_1 = module_0.get_hash(list_0, float_0)
    except BaseException:
        pass

def test_case_51():
    try:
        list_0 = []
        list_1 = [list_0]
        var_0 = module_0.to_uuid(list_0)
        filter_module_0 = module_0.FilterModule()
        var_1 = module_0.quote(list_0)
        str_0 = '<_RR\x0bn3u$'
        var_2 = module_0.to_bool(str_0)
        str_1 = 'gk]YFDXb/)3J/m\tBF9A'
        bool_0 = False
        var_3 = module_0.rand(list_1, str_1, bool_0, list_1)
    except BaseException:
        pass

def test_case_52():
    try:
        str_0 = '$*['
        tuple_0 = ()
        str_1 = "'9YkLS\\"
        str_2 = ')Fw9-<ij$*|~( /f'
        dict_0 = {str_0: str_0, str_1: tuple_0, str_2: str_1}
        dict_1 = {str_2: str_2, str_2: str_0}
        var_0 = module_0.mandatory(dict_0, dict_1)
        int_0 = 2224
        bytes_0 = b'8\xb7\xa6\xb0z\xe6#d\x9bo\\\x8b\x04x\xfb!u\x83'
        var_1 = module_0.mandatory(int_0, bytes_0)
        bool_0 = False
        filter_module_0 = module_0.FilterModule()
        var_2 = module_0.rand(int_0, bool_0, filter_module_0)
    except BaseException:
        pass

def test_case_53():
    try:
        list_0 = []
        set_0 = None
        bytes_0 = b'\xf9iU\x98!'
        str_0 = ',!Gp(05*`C\x0c3cu'
        dict_0 = {str_0: set_0, str_0: str_0}
        str_1 = 'posix_extended'
        var_0 = module_0.regex_search(bytes_0, str_1, *list_0)
        int_0 = -816
        var_1 = module_0.subelements(dict_0, list_0, int_0)
    except BaseException:
        pass

def test_case_54():
    try:
        type_0 = None
        ansible_undefined_0 = module_1.AnsibleUndefined(type_0)
        var_0 = module_0.mandatory(ansible_undefined_0)
    except BaseException:
        pass

def test_case_55():
    try:
        str_0 = 'Expecting exception'
        ansible_undefined_0 = module_1.AnsibleUndefined(str_0)
        var_0 = module_0.mandatory(ansible_undefined_0, str_0)
    except BaseException:
        pass

def test_case_56():
    try:
        str_0 = 'qka]30'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.mandatory(list_0)
        ansible_undefined_0 = module_1.AnsibleUndefined(str_0, str_0)
        async_iterator_0 = ansible_undefined_0.__aiter__()
        int_0 = None
        str_1 = 'posix_extended'
        var_1 = module_0.regex_escape(int_0, str_1)
    except BaseException:
        pass