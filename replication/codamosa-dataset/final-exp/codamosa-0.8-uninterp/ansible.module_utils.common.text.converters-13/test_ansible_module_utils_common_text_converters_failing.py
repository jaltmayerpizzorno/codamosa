# Automatically generated by Pynguin.
import ansible.module_utils.common.text.converters as module_0

def test_case_0():
    try:
        dict_0 = {}
        list_0 = []
        var_0 = module_0.to_bytes(dict_0, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        float_0 = 2471.8877
        var_0 = module_0.to_bytes(float_0)
        bytes_0 = b'\x95\x18\x85\x0f\xa9\xd4\x14\xcei \x12\x90\xa1-\x19\xf3W\x01d'
        dict_0 = {bytes_0: bytes_0}
        set_0 = set()
        var_1 = module_0.jsonify(set_0)
        int_0 = 535000
        var_2 = module_0.to_text(set_0, int_0)
        var_3 = module_0.container_to_text(dict_0)
        list_0 = None
        var_4 = module_0.container_to_bytes(list_0)
        var_5 = module_0.to_text(bytes_0)
        str_0 = '\n    name: dict\n    version_added: "1.5"\n    short_description: returns key/value pair items from dictionaries\n    description:\n        - Takes dictionaries as input and returns a list with each item in the list being a dictionary with \'key\' and \'value\' as\n          keys to the previous dictionary\'s structure.\n    options:\n        _terms:\n            description:\n                - A list of dictionaries\n            required: True\n'
        dict_1 = {str_0: str_0, str_0: str_0, str_0: bytes_0}
        bytes_1 = b'\x07\xd0\x1eq\x93k7fc'
        var_6 = module_0.container_to_bytes(dict_1, bytes_1)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        tuple_0 = (list_0,)
        str_0 = ' &z*)\r'
        list_1 = [list_0, tuple_0, list_0]
        var_0 = module_0.to_bytes(list_1)
        var_1 = module_0.container_to_text(str_0, list_0)
        dict_0 = {}
        int_0 = 2061
        bytes_0 = b'\xac\xc7F^\xf4\xf5'
        str_1 = 'RFmyP6?..}UC/y<qQcIZ'
        tuple_1 = (bytes_0, str_1)
        var_2 = module_0.to_text(dict_0, int_0, tuple_1)
        dict_1 = {}
        var_3 = module_0.container_to_bytes(dict_1, tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = NotImplementedError()
        list_0 = [var_0, var_0, var_0]
        var_1 = module_0.jsonify(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -414
        dict_0 = {int_0: int_0, int_0: int_0}
        var_0 = module_0.jsonify(dict_0)
        var_1 = module_0.to_text(int_0)
        int_1 = 644
        str_0 = '=otdUc\r'
        bool_0 = True
        str_1 = '\udcd9~\x1e\udc9eG'
        str_2 = "G\r%FjA\x0bu9Rt1\\'/{Xtu"
        str_3 = ' ssh based connections '
        dict_1 = {str_1: str_1, str_2: bool_0, str_3: str_1}
        var_2 = module_0.to_text(int_1, str_0, bool_0, dict_1)
    except BaseException:
        pass

def test_case_5():
    try:
        set_0 = None
        tuple_0 = None
        set_1 = None
        str_0 = 'q'
        var_0 = module_0.to_bytes(set_0, tuple_0, set_1, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'привіт'
        var_0 = module_0.to_bytes(str_0)
        str_1 = 'ascii'
        str_2 = 'surrogate_or_replace'
        var_1 = module_0.to_bytes(str_0, str_1, str_2)
    except BaseException:
        pass