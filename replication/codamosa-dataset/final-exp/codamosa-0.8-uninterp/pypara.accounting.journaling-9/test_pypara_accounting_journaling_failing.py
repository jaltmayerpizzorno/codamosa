# Automatically generated by Pynguin.
import pypara.accounting.journaling as module_0

def test_case_0():
    try:
        date_0 = None
        account_0 = None
        var_0 = None
        str_0 = '\n    Defines a foreign exchange (FX) rate model.\n\n    Note that the constructor of this class is not safe: It does not check input. :method:`FXRate.of`, on the\n    other hand provides a safer way of creating :class:`FXRate` instances.\n\n    **Implementation Note:**\n\n    I wanted to use an immutable, compact object model with fast creation and property access. Options were\n    tweaked plain-vanilla Python class, NamedTuple and dataclasses.\n\n    NamedTuple has slightly slower property access, whereby immutable dataclasses are slow for creation.\n\n    Furthermore, as of the implementation of this class, mypy does not have proper dataclass support. Therefore,\n    I am sticking to NamedTuple implementation.\n\n    Last but not least, as objects are essentially tuples, indexed access to properties is possible and slightly\n    faster.\n\n    >>> import datetime\n    >>> from decimal import Decimal\n    >>> from pypara.currencies import Currencies\n    >>> rate = FXRate(Currencies["EUR"], Currencies["USD"], datetime.date.today(), Decimal("2"))\n    >>> ccy1, ccy2, date, value = rate\n    >>> ccy1 == Currencies["EUR"]\n    True\n    >>> ccy2 == Currencies["USD"]\n    True\n    >>> date == datetime.date.today()\n    True\n    >>> value == Decimal("2")\n    True\n    '
        dict_0 = {str_0: date_0}
        journal_entry_0 = module_0.JournalEntry(date_0, str_0, dict_0)
        var_1 = journal_entry_0.post(date_0, account_0, var_0)
    except BaseException:
        pass