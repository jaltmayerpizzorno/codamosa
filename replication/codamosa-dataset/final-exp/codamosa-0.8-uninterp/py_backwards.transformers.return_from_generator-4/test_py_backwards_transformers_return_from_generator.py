# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n  8     de fn():\n            yield 1\n            return 5\n    '
    list_0 = [str_0, str_0, str_0, str_0]
    a_s_t_0 = module_0.AST()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)

def test_case_2():
    str_0 = ''
    list_0 = [str_0, str_0, str_0, str_0, str_0]
    a_s_t_0 = module_0.AST()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    function_def_0 = module_0.FunctionDef(*list_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)

def test_case_3():
    str_0 = 'bM|[a_&:flY2Fk]'
    a_s_t_0 = module_0.AST()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    set_0 = None
    function_def_0 = module_0.FunctionDef()
    tuple_0 = (set_0, set_0, function_def_0)
    list_0 = [str_0, str_0, tuple_0]
    function_def_1 = module_0.FunctionDef(*list_0)
    function_def_2 = return_from_generator_transformer_0.visit_FunctionDef(function_def_1)