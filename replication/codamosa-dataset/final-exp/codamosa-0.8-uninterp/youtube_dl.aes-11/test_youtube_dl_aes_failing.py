# Automatically generated by Pynguin.
import youtube_dl.aes as module_0
import youtube_dl.utils as module_1

def test_case_0():
    try:
        float_0 = 111.278
        set_0 = {float_0}
        complex_0 = None
        str_0 = 'YC`\\'
        tuple_0 = (str_0, set_0, complex_0, str_0)
        tuple_1 = (float_0, float_0, set_0, tuple_0)
        bytes_0 = b'a'
        var_0 = module_0.aes_cbc_decrypt(tuple_1, bytes_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1978
        float_0 = -406.8215
        set_0 = {float_0}
        var_0 = module_0.aes_cbc_encrypt(float_0, set_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '$AB'
        var_0 = module_0.key_expansion(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1937
        set_0 = {int_0, int_0, int_0, int_0}
        int_1 = -1743
        var_0 = module_0.aes_encrypt(set_0, int_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'mp]2e!"\n%fM82;^R'
        list_0 = [str_0, str_0, str_0, str_0]
        str_1 = None
        tuple_0 = (list_0, str_1)
        var_0 = module_0.aes_decrypt(str_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = ''
        int_0 = 3
        var_0 = module_0.aes_decrypt_text(str_0, str_0, int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\rd*=("$,o<.1'
        var_0 = module_0.sub_bytes_inv(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = ''
        var_0 = module_0.rotate(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = None
        var_0 = module_0.mix_column(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bytes_0 = b'\xdd\x1b-\x14\xd6\x93+\xab\xf3\xa8\xe2\xcb\x01\xf4\x81\x0b'
        bytes_1 = b'YELLOW SUBMARINE'
        var_0 = module_1.bytes_to_intlist(bytes_1)
        var_1 = module_1.bytes_to_intlist(bytes_0)
        var_2 = module_1.intlist_to_bytes(bytes_0)
        var_3 = module_1.bytes_to_intlist(var_2)
        var_4 = module_0.aes_cbc_decrypt(var_3, var_0, var_0)
        str_0 = 'Idw~/."rbF`2[k@xE'
        list_0 = [str_0]
        var_5 = module_0.aes_ctr_decrypt(str_0, str_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'uev SX1Yo~-gR'
        var_0 = module_0.inc(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        tuple_0 = ()
        var_0 = module_0.shift_rows_inv(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = -2969.0
        dict_0 = {}
        str_0 = 'http://tegenlicht.vpro.nl/afleveringen/2012-2013/de-toekomst-komt-uit-afrika.html'
        list_0 = []
        var_0 = module_0.aes_decrypt(str_0, list_0)
        var_1 = module_0.sub_bytes(dict_0)
        bytes_0 = b'e\x81\xebE\x1b\xa2\xb4\xeeI\xea'
        var_2 = module_0.aes_decrypt_text(float_0, bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        var_0 = module_0.inc(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        bool_1 = False
        var_0 = module_0.rijndael_mul(bool_0, bool_1)
        str_0 = 'k_K'
        list_0 = None
        var_1 = module_0.aes_ctr_decrypt(str_0, str_0, list_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'\xdd\x1b-\x14\xd6\x93+\xab\xf3\xa8\xe2\xcb\x01\xf4\x81\x0b'
        bytes_1 = b'YLO SUBMARINE'
        bytes_2 = b'Basic CBC mode encryption needs padding.'
        var_0 = module_1.bytes_to_intlist(bytes_0)
        var_1 = module_1.intlist_to_bytes(bytes_0)
        var_2 = module_1.bytes_to_intlist(bytes_1)
        var_3 = module_0.aes_cbc_decrypt(bytes_2, var_2, var_2)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'jOi6DRqb6y9XIcj8W7dYObyaJfZdupGxR8wN5N5g5jE1HLX3/63Q2hcj/PZ/jKxmhmPn8mwcQKj/t2M9hwhzHfW1jYrGUtZCjtOazx0lhCQc0KlGdQ=='
        bool_0 = False
        tuple_0 = (bool_0,)
        var_0 = module_0.aes_decrypt(tuple_0, str_0)
    except BaseException:
        pass