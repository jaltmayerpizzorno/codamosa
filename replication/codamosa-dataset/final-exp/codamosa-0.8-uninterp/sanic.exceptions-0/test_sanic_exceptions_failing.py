# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        int_0 = None
        bytes_0 = b''
        var_0 = module_0.abort(int_0, bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'iA\x0b)@#='
        forbidden_0 = module_0.Forbidden(str_0)
        dict_0 = {}
        bytes_0 = b'\x17[v\x08\xa6'
        method_not_supported_0 = module_0.MethodNotSupported(forbidden_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -1468
        py_file_error_0 = None
        bytes_0 = b',\x0e\xc6\xcd3AV\xbcF\xd9W\x98\xe6\xdc}\xb6\x1dK'
        u_r_l_build_error_0 = module_0.URLBuildError(py_file_error_0, bytes_0)
        not_found_0 = None
        file_not_found_0 = module_0.FileNotFound(int_0, u_r_l_build_error_0, not_found_0)
        server_error_0 = module_0.ServerError(file_not_found_0)
        forbidden_0 = module_0.Forbidden(server_error_0, server_error_0)
        dict_0 = {}
        sanic_exception_0 = module_0.SanicException(dict_0)
        int_1 = -495
        var_0 = module_0.abort(int_1)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = None
        sanic_exception_0 = module_0.SanicException(int_0)
        list_0 = [int_0, sanic_exception_0]
        payload_too_large_0 = module_0.PayloadTooLarge(sanic_exception_0)
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(payload_too_large_0)
        invalid_range_type_0 = module_0.InvalidRangeType(sanic_exception_0, list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        str_0 = '7zA;1ZtJDU[rI'
        dict_1 = {str_0: str_0}
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(dict_1)
        int_0 = 408
        u_r_l_build_error_0 = module_0.URLBuildError(int_0)
        unauthorized_0 = module_0.Unauthorized(u_r_l_build_error_0)
        invalid_usage_0 = module_0.InvalidUsage(unauthorized_0, dict_1)
        server_error_0 = module_0.ServerError(dict_0)
        var_0 = None
        var_1 = module_0.abort(int_0, var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -672
        payload_too_large_0 = module_0.PayloadTooLarge(int_0)
        str_0 = 'M@{+X8.<\rFr \\K1Gi[-'
        py_file_error_0 = module_0.PyFileError(payload_too_large_0)
        tuple_0 = ()
        service_unavailable_0 = module_0.ServiceUnavailable(py_file_error_0)
        invalid_signal_0 = module_0.InvalidSignal(tuple_0, service_unavailable_0)
        bytes_0 = b'\x19N\xdc\xe1\x08\xea\xf9\xb2'
        int_1 = 737
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(int_1)
        load_file_exception_0 = module_0.LoadFileException(header_expectation_failed_0, payload_too_large_0)
        var_0 = module_0.add_status_code(load_file_exception_0)
        dict_0 = {str_0: int_0}
        unauthorized_0 = module_0.Unauthorized(py_file_error_0, invalid_signal_0, bytes_0, **dict_0)
        str_1 = 'H%rG'
        dict_1 = {str_0: str_0, str_1: payload_too_large_0}
        list_0 = [dict_1, int_0, str_1]
        invalid_signal_1 = module_0.InvalidSignal(dict_1, list_0)
        file_not_found_0 = module_0.FileNotFound(header_expectation_failed_0, invalid_signal_0, load_file_exception_0)
        str_2 = ''
        dict_2 = {str_2: int_1, str_0: str_0}
        method_not_supported_0 = module_0.MethodNotSupported(dict_2, header_expectation_failed_0, payload_too_large_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -672
        payload_too_large_0 = module_0.PayloadTooLarge(int_0)
        str_0 = 'M@{jX8.<\rFre\\K1Gi-'
        py_file_error_0 = module_0.PyFileError(payload_too_large_0)
        tuple_0 = ()
        service_unavailable_0 = module_0.ServiceUnavailable(py_file_error_0)
        invalid_signal_0 = module_0.InvalidSignal(tuple_0, service_unavailable_0)
        bytes_0 = b'\x19N\xdc\xe1\x08\xea\xf9\xb2'
        int_1 = -744
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(int_1)
        load_file_exception_0 = module_0.LoadFileException(header_expectation_failed_0, payload_too_large_0)
        var_0 = module_0.add_status_code(load_file_exception_0)
        dict_0 = {}
        u_r_l_build_error_0 = None
        header_not_found_0 = module_0.HeaderNotFound(invalid_signal_0)
        invalid_signal_1 = module_0.InvalidSignal(u_r_l_build_error_0, header_not_found_0, tuple_0)
        unauthorized_0 = module_0.Unauthorized(py_file_error_0, invalid_signal_0, bytes_0, **dict_0)
        str_1 = 'H%rG'
        dict_1 = {str_0: str_0, str_1: payload_too_large_0}
        list_0 = [dict_1, int_0, str_1]
        invalid_signal_2 = module_0.InvalidSignal(dict_1, list_0)
        file_not_found_0 = module_0.FileNotFound(header_expectation_failed_0, invalid_signal_0, load_file_exception_0)
        str_2 = ''
        dict_2 = {str_2: int_1, str_0: str_0}
        method_not_supported_0 = module_0.MethodNotSupported(dict_2, header_expectation_failed_0, payload_too_large_0)
    except BaseException:
        pass