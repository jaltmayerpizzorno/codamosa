# Automatically generated by Pynguin.
import ansible.module_utils.common.network as module_0

def test_case_0():
    try:
        int_0 = 99
        var_0 = module_0.to_ipv6_subnet(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 880
        var_0 = module_0.to_masklen(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\td KM'
        int_0 = -2168
        var_0 = module_0.to_subnet(str_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'Sb'
        list_0 = [bytes_0]
        bytes_1 = b'\xba\xdc\xc7\xc8E\x00\xe8\x9f\x96-\xe6'
        var_0 = module_0.to_subnet(list_0, bytes_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '."I&J].&^4uPzl'
        var_0 = module_0.to_netmask(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = None
        str_0 = 'page'
        dict_0 = {str_0: str_0}
        set_0 = set()
        tuple_0 = (float_0, str_0, dict_0, set_0)
        var_0 = module_0.to_netmask(tuple_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'fe80:0000:0000:0000:0202:b3ff:fe1e:8329'
        var_0 = module_0.is_netmask(str_0)
        var_1 = module_0.to_ipv6_subnet(str_0)
        float_0 = 775.9609
        var_2 = module_0.to_masklen(float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'IoXfusi"R*'
        var_0 = module_0.to_ipv6_subnet(str_0)
        bytes_0 = b'\x88\x96\x98#\xd2\xdb\x9du\x9b#+n\x94\xc7\x83\xba\xa0\x95j\x9d'
        var_1 = module_0.to_ipv6_subnet(bytes_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '\t&d KM"'
        var_0 = module_0.to_ipv6_network(str_0)
        float_0 = 0.5
        var_1 = module_0.to_masklen(float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ']5!z39='
        var_0 = module_0.is_mac(str_0)
        float_0 = 4286.317441
        var_1 = module_0.to_ipv6_network(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bool_0 = False
        var_0 = module_0.to_bits(bool_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'done running TaskExecutor() for %s/%s [%s]'
        var_0 = module_0.to_bits(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        float_0 = 1000.2631406833793
        var_0 = module_0.is_masklen(float_0)
        bool_0 = False
        var_1 = module_0.is_mac(bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '192.168.1.1'
        str_1 = '255.255.255.0'
        var_0 = module_0.to_subnet(str_0, str_1)
        str_2 = '255.255.0.0'
        var_1 = module_0.to_subnet(str_0, str_2)
        int_0 = 24
        var_2 = module_0.to_subnet(str_0, int_0)
        float_0 = -446.4864
        tuple_0 = ()
        bytes_0 = None
        var_3 = module_0.to_subnet(float_0, tuple_0, bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '192.168.1.1'
        str_1 = '255.255.255.0'
        var_0 = module_0.to_subnet(str_0, str_1)
        str_2 = '255.255.0.0'
        set_0 = {str_2}
        var_1 = module_0.to_masklen(set_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'f\x0b.ff.ff;}.S'
        var_0 = module_0.to_masklen(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '55.255.2T55.0'
        var_0 = module_0.to_masklen(str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '192.168.1.1'
        list_0 = None
        var_0 = module_0.is_netmask(list_0)
        int_0 = 24
        var_1 = module_0.to_subnet(str_0, int_0)
        set_0 = {int_0, var_1, var_1}
        var_2 = module_0.is_netmask(set_0)
        str_1 = '255.255.255.252'
        var_3 = module_0.to_bits(str_1)
        str_2 = '\n__\r3^s~tgoA"X{}*'
        var_4 = module_0.to_netmask(str_2)
    except BaseException:
        pass