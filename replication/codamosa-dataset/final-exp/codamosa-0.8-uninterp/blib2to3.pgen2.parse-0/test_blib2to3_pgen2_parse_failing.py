# Automatically generated by Pynguin.
import blib2to3.pgen2.grammar as module_0
import blib2to3.pytree as module_1
import blib2to3.pgen2.parse as module_2

def test_case_0():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 1757
        complex_0 = None
        list_0 = []
        str_0 = ',6,@w.)vuy{v+t'
        node_0 = module_1.Node(int_0, list_0, str_0)
        tuple_0 = (int_0, complex_0, node_0, list_0)
        var_0 = module_2.lam_sub(grammar_0, tuple_0)
        int_1 = 2
        tuple_1 = ()
        tuple_2 = None
        parser_0 = module_2.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_1, tuple_1, tuple_2)
    except BaseException:
        pass

def test_case_1():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 2
        tuple_0 = None
        parser_0 = module_2.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        grammar_0 = module_0.Grammar()
        path_like_0 = None
        tuple_0 = (path_like_0,)
        parser_0 = module_2.Parser(grammar_0, tuple_0)
        parser_0.setup()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -2636
        str_0 = 'ELO$O'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        grammar_0 = module_0.Grammar()
        parser_0 = module_2.Parser(grammar_0)
        parser_0.shift(int_0, str_0, int_0, tuple_1)
    except BaseException:
        pass

def test_case_4():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_2.Parser(grammar_0)
        grammar_0.report()
        int_0 = -1173
        list_0 = None
        dict_0 = {}
        tuple_0 = (list_0, dict_0)
        int_1 = None
        str_0 = '[^"\\\\]*(?:\\\\.[^"\\\\]*)*"'
        tuple_1 = (int_1, int_0)
        tuple_2 = (str_0, tuple_1)
        parser_0.push(int_0, tuple_0, int_1, tuple_2)
    except BaseException:
        pass

def test_case_5():
    try:
        grammar_0 = module_0.Grammar()
        parser_0 = module_2.Parser(grammar_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 2208
        var_0 = None
        tuple_0 = ()
        str_0 = None
        str_1 = "p]U$t,]HPs+u-r\nGT5'"
        tuple_1 = (int_0, int_0)
        tuple_2 = (str_1, tuple_1)
        parse_error_0 = module_2.ParseError(str_0, int_0, str_0, tuple_2)
        parser_0 = module_2.Parser(grammar_0, parse_error_0)
        list_0 = None
        tuple_3 = (int_0, var_0, tuple_0, list_0)
        var_1 = module_2.lam_sub(grammar_0, tuple_3)
    except BaseException:
        pass

def test_case_7():
    try:
        grammar_0 = module_0.Grammar()
        dict_0 = {grammar_0: grammar_0, grammar_0: grammar_0, grammar_0: grammar_0, grammar_0: grammar_0}
        parser_0 = module_2.Parser(grammar_0, dict_0)
        parser_0.pop()
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = -2937
        str_0 = 'NQ!/oIj D71a_V'
        str_1 = 'n'
        str_2 = '\t\x0buF+z"6qh:g_qn1\'/'
        int_1 = 2543
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_2, tuple_0)
        parse_error_0 = module_2.ParseError(str_0, int_0, str_1, tuple_1)
        grammar_0 = module_0.Grammar()
        parser_0 = module_2.Parser(grammar_0)
        parser_0.setup(int_0)
    except BaseException:
        pass

def test_case_9():
    try:
        grammar_0 = module_0.Grammar()
        int_0 = 1
        tuple_0 = None
        parser_0 = module_2.Parser(grammar_0)
        bool_0 = parser_0.addtoken(int_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '~?Z+6|,H!cot5D JVn{'
        grammar_0 = module_0.Grammar()
        int_0 = 2734
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        parse_error_0 = module_2.ParseError(str_0, grammar_0, str_0, tuple_1)
        int_1 = 1
        parser_0 = module_2.Parser(grammar_0)
        str_1 = None
        bool_0 = parser_0.addtoken(int_1, str_1, tuple_1)
    except BaseException:
        pass