# Automatically generated by Pynguin.
import thefuck.types as module_0

def test_case_0():
    try:
        str_0 = ''
        set_0 = set()
        str_1 = 'VH|4sro\x0c]'
        str_2 = ''
        str_3 = '/i@'
        float_0 = 0.85
        dict_0 = {str_1: str_1, str_2: str_2, str_3: float_0}
        str_4 = ".BB2KVq1'n"
        bool_0 = False
        str_5 = 'EDITOR'
        corrected_command_0 = module_0.CorrectedCommand(str_4, bool_0, str_5)
        set_1 = set()
        set_2 = set()
        corrected_command_1 = module_0.CorrectedCommand(corrected_command_0, set_1, set_2)
        corrected_command_2 = module_0.CorrectedCommand(set_0, dict_0, corrected_command_1)
        var_0 = corrected_command_2.run(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        str_0 = 'Q]k#W~lWk'
        set_0 = {var_0, var_0, var_0}
        bool_0 = False
        str_1 = 'No such file or directory'
        corrected_command_0 = module_0.CorrectedCommand(set_0, bool_0, str_1)
        var_1 = corrected_command_0.run(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'This is a command'
        str_1 = 'This is output'
        command_0 = module_0.Command(str_0, str_1)
        str_2 = 'Test Rule'
        bool_0 = True
        var_0 = lambda c: bool_0
        str_3 = 'a'
        var_1 = lambda c: str_3
        var_2 = None
        bool_1 = False
        rule_0 = module_0.Rule(str_2, var_0, var_1, bool_0, var_2, bool_0, bool_1)
        var_3 = rule_0.get_corrected_commands(command_0)
        corrected_command_0 = module_0.CorrectedCommand(str_3, var_2, bool_0)
        var_4 = next(var_3)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        bool_0 = True
        var_0 = lambda x: bool_0
        var_1 = lambda x: x
        var_2 = None
        int_0 = 5
        rule_0 = module_0.Rule(str_0, var_0, var_1, bool_0, var_2, int_0, bool_0)
        command_0 = module_0.Command(str_0, var_2)
        var_3 = rule_0.is_match(command_0)
        var_4 = lambda x: x
        bool_1 = False
        rule_1 = module_0.Rule(str_0, var_1, var_4, bool_0, var_2, int_0, bool_1)
        var_5 = rule_1.is_match(command_0)
        var_6 = rule_0.is_match(command_0)
        rule_2 = module_0.Rule(str_0, command_0, command_0, bool_0, var_2, int_0, bool_0)
        command_1 = module_0.Command(str_0, str_0)
        var_7 = rule_2.is_match(int_0)
    except BaseException:
        pass