# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 862
    float_0 = 0.1
    list_0 = [float_0, float_0]
    iterable_0 = None
    iterator_0 = module_0.chunk(int_0, iterable_0)
    dict_0 = {int_0: int_0}
    var_0 = module_0.scanr(list_0, dict_0)

def test_case_2():
    str_0 = '8IISG'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = lazy_list_0.__iter__()

def test_case_3():
    int_0 = []
    lazy_list_0 = module_0.LazyList(int_0)
    var_0 = list(lazy_list_0)

def test_case_4():
    int_0 = -1446
    list_0 = [int_0]
    range_0 = module_0.Range(*list_0)
    iterator_0 = range_0.__iter__()
    str_0 = '2<aN)\x0b>=k}gxR@I'
    map_list_0 = module_0.MapList(iterator_0, str_0)
    iterator_1 = module_0.take(int_0, map_list_0)

def test_case_5():
    int_0 = -37
    int_1 = 2
    list_0 = [int_0, int_0]
    range_0 = module_0.Range(*list_0)
    int_2 = range_0.__len__()
    int_3 = [int_0, int_1, int_0]
    lazy_list_0 = module_0.LazyList(int_3)
    var_0 = list(lazy_list_0)

def test_case_6():
    str_0 = '8IISG'
    lazy_list_0 = module_0.LazyList(str_0)
    bool_0 = True
    var_0 = lazy_list_0.__getitem__(bool_0)

def test_case_7():
    int_0 = -37
    int_1 = 2
    list_0 = [int_0, int_0]
    range_0 = module_0.Range(*list_0)
    int_2 = [int_0, int_1, int_0]
    lazy_list_0 = module_0.LazyList(int_2)
    var_0 = list(lazy_list_0)

def test_case_8():
    int_0 = 3
    int_1 = [int_0, int_0, int_0, int_0]
    lazy_list_0 = module_0.LazyList(int_1)
    str_0 = 'u+KTe]kz>c.2'
    map_list_0 = module_0.MapList(str_0, str_0)
    int_2 = map_list_0.__len__()
    var_0 = list(lazy_list_0)

def test_case_9():
    int_0 = 58
    list_0 = [int_0]
    range_0 = module_0.Range(*list_0)
    int_1 = range_0.__next__()
    int_2 = [int_0, int_0, int_0]
    lazy_list_0 = module_0.LazyList(int_2)
    var_0 = list(lazy_list_0)

def test_case_10():
    bool_0 = True
    str_0 = '.'
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
    var_0 = list(iterator_0)
    var_1 = list(iterator_0)

def test_case_11():
    int_0 = 5
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.drop(int_0, var_0)
    var_1 = list(iterator_0)
    var_2 = range(int_0, int_1)
    var_3 = list(var_2)

def test_case_12():
    int_0 = -29
    var_0 = lambda x: x == int_0
    var_1 = []
    iterator_0 = module_0.drop_until(var_0, var_1)
    var_2 = list(iterator_0)
    int_1 = 2
    var_3 = list(var_2)
    var_4 = lambda x: x == int_0
    var_5 = lambda x: x == int_1

def test_case_13():
    int_0 = 3
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.take(int_0, var_0)
    var_1 = list(iterator_0)
    var_2 = range(int_0)
    var_3 = list(var_2)
    int_2 = 0
    var_4 = range(int_2)
    iterator_1 = module_0.take(int_0, var_4)
    var_5 = list(iterator_1)
    int_3 = 10
    var_6 = range(int_3)
    var_7 = list(iterator_0)

def test_case_14():
    str_0 = ' Split by: '
    bool_0 = True
    str_1 = '.'
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_1)
    var_0 = list(iterator_0)
    int_0 = 10
    var_1 = range(int_0)
    int_1 = 3
    int_2 = 0
    var_2 = lambda x: x % int_1 == int_2
    var_3 = list(iterator_0)

def test_case_15():
    int_0 = 3
    int_1 = [int_0, int_0, int_0]
    lazy_list_0 = module_0.LazyList(int_1)
    var_0 = list(lazy_list_0)

def test_case_16():
    int_0 = 1
    int_1 = [int_0, int_0, int_0, int_0]
    lazy_list_0 = module_0.LazyList(int_1)
    var_0 = list(lazy_list_0)
    var_1 = lazy_list_0.__iter__()

def test_case_17():
    int_0 = 10
    list_0 = [int_0]
    range_0 = module_0.Range(*list_0)
    iterator_0 = range_0.__iter__()
    int_1 = range_0.__next__()
    iterator_1 = range_0.__iter__()
    var_0 = range_0.__getitem__(int_1)

def test_case_18():
    int_0 = 3
    int_1 = [int_0, int_0, int_0]
    lazy_list_0 = module_0.LazyList(int_1)
    var_0 = list(lazy_list_0)
    var_1 = lazy_list_0.__len__()

def test_case_19():
    bool_0 = False
    list_0 = [bool_0]
    list_1 = [list_0, bool_0, bool_0, list_0]
    str_0 = 'G^dh:>qa\r/l|j'
    dict_0 = {str_0: list_1, str_0: list_0, str_0: str_0}
    int_0 = 436
    iterator_0 = module_0.split_by(int_0)
    var_0 = module_0.scanr(list_1, dict_0)
    str_1 = '.'
    iterator_1 = module_0.split_by(str_1, bool_0, separator=str_1)
    var_1 = list(iterator_1)
    bool_1 = False
    iterator_2 = module_0.drop_until(list_1, bool_1)
    int_1 = 10
    list_2 = [int_1]
    range_0 = module_0.Range(*list_2)
    iterator_3 = range_0.__iter__()
    int_2 = range_0.__next__()
    set_0 = {range_0}
    var_2 = module_0.scanl(set_0, list_0)
    callable_0 = None
    dict_1 = {str_1: iterator_1, str_0: iterator_1}
    map_list_0 = module_0.MapList(callable_0, dict_1)
    var_3 = range_0.__getitem__(int_2)
    int_3 = -1366
    var_4 = range_0.__getitem__(int_3)
    lazy_list_0 = module_0.LazyList(iterator_1)

def test_case_20():
    var_0 = lambda s, x: x + s
    str_0 = 'a'
    str_1 = 'b'
    str_2 = 'c'
    str_3 = 'd'
    str_4 = [str_0, str_1, str_2, str_3]
    var_1 = module_0.scanl(var_0, str_4)
    var_2 = list(var_1)

def test_case_21():
    int_0 = 2999
    int_1 = [int_0, int_0, int_0, int_0]
    lazy_list_0 = module_0.LazyList(int_1)
    bool_0 = True
    var_0 = lazy_list_0.__getitem__(bool_0)
    var_1 = list(lazy_list_0)

def test_case_22():
    int_0 = 1000000
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    int_1 = 0
    int_2 = 100
    var_1 = slice(int_1, int_2)
    var_2 = lazy_list_0[var_1]
    var_3 = range(int_2)
    var_4 = list(var_3)
    var_5 = range(int_1)
    var_6 = list(var_5)