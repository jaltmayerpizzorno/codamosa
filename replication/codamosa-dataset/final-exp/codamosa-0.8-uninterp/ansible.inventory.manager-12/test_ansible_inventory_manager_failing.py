# Automatically generated by Pynguin.
import ansible.inventory.manager as module_0

def test_case_0():
    try:
        str_0 = 'cmdline'
        float_0 = -1908.018431
        inventory_manager_0 = module_0.InventoryManager(str_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        complex_0 = None
        str_0 = 'X[{"\nM\'uW\nO,`4ZgNa:?'
        list_0 = [str_0, str_0]
        inventory_manager_0 = module_0.InventoryManager(str_0, list_0)
        var_0 = inventory_manager_0.add_host(complex_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        bool_1 = True
        float_0 = None
        set_0 = {bool_1, bool_1, bool_1, float_0}
        inventory_manager_0 = module_0.InventoryManager(set_0)
        var_0 = inventory_manager_0.add_group(bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = None
        float_0 = -1456.87
        list_0 = [float_0, tuple_0, tuple_0, float_0]
        str_0 = '4\r>)r$Fd-_'
        inventory_manager_0 = module_0.InventoryManager(str_0, tuple_0, str_0)
        var_0 = inventory_manager_0.restrict_to_hosts(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '/pynguin/ident'
        float_0 = 1386.37
        inventory_manager_0 = module_0.InventoryManager(float_0)
        var_0 = inventory_manager_0.restrict_to_hosts(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'slaves'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_0 = inventory_manager_0.list_groups()
        var_1 = inventory_manager_0.remove_restriction()
        var_2 = inventory_manager_0.clear_caches()
        bool_0 = False
        inventory_manager_1 = module_0.InventoryManager(bool_0)
        var_3 = inventory_manager_1.clear_pattern_cache()
        var_4 = inventory_manager_1.clear_pattern_cache()
        var_5 = inventory_manager_1.list_hosts()
        var_6 = inventory_manager_1.reconcile_inventory()
        set_0 = {inventory_manager_1}
        var_7 = module_0.order_patterns(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        str_0 = '--check'
        bytes_0 = b"\xe0x\x88k'\xae\x1b\x01\xd6\x80\x9e"
        tuple_0 = (dict_0, bytes_0)
        inventory_manager_0 = module_0.InventoryManager(tuple_0)
        var_0 = inventory_manager_0.list_hosts()
        inventory_manager_1 = module_0.InventoryManager(str_0, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        str_0 = '9im>Y^706,J-]l4f\x0c'
        float_0 = -295.10787
        dict_0 = {}
        inventory_manager_0 = module_0.InventoryManager(float_0, dict_0)
        var_0 = inventory_manager_0.list_groups()
        var_1 = inventory_manager_0.subset(list_0)
        inventory_manager_1 = module_0.InventoryManager(list_0, str_0)
        bool_0 = True
        set_0 = {bool_0, float_0}
        inventory_manager_2 = module_0.InventoryManager(set_0, str_0)
        var_2 = inventory_manager_2.clear_pattern_cache()
        list_1 = [set_0, var_0]
        inventory_manager_3 = module_0.InventoryManager(list_0, list_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'A}BH:9$'
        inventory_manager_0 = module_0.InventoryManager(str_0)
        var_0 = inventory_manager_0.reconcile_inventory()
        bytes_0 = b'cn\xca\xe6\xb8Hd\xe8\x9b\xfbE\xf8\xf4W\x1d\xac\x93\xf1)'
        list_0 = [var_0, var_0, bytes_0]
        var_1 = inventory_manager_0.list_hosts(list_0)
        str_1 = "/<1)}\r,fayUy\tk~-]'"
        str_2 = '3K'
        tuple_0 = ()
        dict_0 = {}
        var_2 = inventory_manager_0.get_groups_dict()
        var_3 = inventory_manager_0.clear_caches()
        list_1 = []
        var_4 = inventory_manager_0.restrict_to_hosts(list_1)
        inventory_manager_1 = module_0.InventoryManager(str_1, tuple_0, dict_0)
        list_2 = [str_2, var_3, tuple_0, str_2]
        var_5 = inventory_manager_1.add_group(list_2)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        str_0 = '9im>Y^706,J-]l4f\x0c'
        float_0 = -295.1079
        dict_0 = {}
        inventory_manager_0 = module_0.InventoryManager(float_0, dict_0)
        var_0 = inventory_manager_0.list_hosts(float_0)
        var_1 = inventory_manager_0.list_hosts()
        var_2 = inventory_manager_0.get_hosts()
        inventory_manager_1 = module_0.InventoryManager(list_0, str_0)
        var_3 = inventory_manager_0.clear_pattern_cache()
        str_1 = '%De'
        var_4 = inventory_manager_1.parse_source(str_1)
        bool_0 = None
        var_5 = inventory_manager_1.restrict_to_hosts(bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -1455
        float_0 = 902.2629163122504
        inventory_manager_0 = module_0.InventoryManager(float_0)
        inventory_manager_1 = module_0.InventoryManager(inventory_manager_0)
        var_0 = inventory_manager_1.clear_caches()
        str_0 = '<v8MCi%,@u0+gV'
        inventory_manager_2 = module_0.InventoryManager(str_0)
        float_1 = -1246.35
        var_1 = inventory_manager_2.list_hosts(float_1)
        var_2 = inventory_manager_2.list_hosts()
        list_0 = []
        var_3 = inventory_manager_2.parse_source(list_0)
        set_0 = {inventory_manager_2, float_0}
        var_4 = inventory_manager_2.subset(int_0)
        var_5 = inventory_manager_2.parse_source(list_0)
        var_6 = inventory_manager_1.refresh_inventory()
        inventory_manager_3 = module_0.InventoryManager(set_0, str_0)
        var_7 = inventory_manager_2.clear_caches()
        var_8 = inventory_manager_1.subset(str_0)
    except BaseException:
        pass