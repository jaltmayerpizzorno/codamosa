# Automatically generated by Pynguin.
import typesystem.fields as module_0
import decimal as module_1

def test_case_0():
    try:
        bool_0 = True
        field_0 = module_0.Field(default=bool_0, allow_null=bool_0)
        validation_result_0 = field_0.validate_or_error(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        field_0 = module_0.Field()
        validation_result_0 = field_0.validate_or_error(field_0)
    except BaseException:
        pass

def test_case_2():
    try:
        array_0 = module_0.Array()
        any_0 = array_0.validate(array_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ''
        string_0 = module_0.String()
        any_0 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        string_0 = module_0.String()
        bool_0 = False
        any_0 = string_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_5():
    try:
        dict_0 = {}
        decimal_0 = module_0.Decimal()
        any_0 = decimal_0.serialize(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'f[bv1'
        choice_0 = module_0.Choice()
        any_0 = choice_0.validate(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        array_0 = module_0.Array(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        list_0 = []
        union_0 = module_0.Union(list_0)
        any_0 = union_0.validate(union_0)
    except BaseException:
        pass

def test_case_9():
    try:
        number_0 = module_0.Number()
        integer_0 = module_0.Integer()
        var_0 = [number_0, integer_0]
        union_0 = module_0.Union(var_0)
        bool_0 = True
        any_0 = union_0.validate(number_0, bool_0)
    except BaseException:
        pass

def test_case_10():
    try:
        array_0 = module_0.Array()
        any_0 = module_0.Any()
        any_1 = any_0.validate(array_0)
        any_2 = None
        any_3 = array_0.validate(any_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'gnmISRB-!O|/O'
        dict_0 = {str_0: str_0, str_0: str_0}
        object_0 = module_0.Object()
        any_0 = object_0.validate(dict_0)
        str_1 = None
        any_1 = module_0.Any(description=str_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = "6ftA~['19We"
        bool_0 = True
        field_0 = module_0.Field(description=str_1, allow_null=bool_0)
        str_2 = 'ny{sA7:-%1?\x0cq})0r'
        field_1 = module_0.Field(title=str_0, description=str_2, default=str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'e'
        field_0 = module_0.Field(title=str_0, description=str_0)
        time_0 = module_0.Time()
        time_1 = module_0.Time()
        int_0 = 1708
        object_0 = module_0.Object(min_properties=int_0, max_properties=int_0)
        dict_0 = {}
        number_0 = module_0.Number(exclusive_minimum=int_0, multiple_of=int_0, **dict_0)
        str_1 = 'W'
        bool_0 = True
        field_1 = module_0.Field(default=str_1, allow_null=bool_0)
        bool_1 = field_1.has_default()
        var_0 = None
        decimal_0 = module_0.Decimal(multiple_of=var_0)
        bytes_0 = b'\x19\x906$\xdf\xa3'
        string_0 = module_0.String(max_length=decimal_0, min_length=bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = False
        str_0 = '\r2e`:#5y3Xye=_'
        str_1 = (str_0, str_0)
        choice_0 = module_0.Choice(choices=str_1)
        any_0 = choice_0.validate(str_0)
        string_0 = module_0.String(format=str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'y<$6'
        field_0 = module_0.Field(title=str_0, description=str_0)
        dict_0 = None
        int_0 = 2991
        object_0 = module_0.Object(min_properties=int_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = 1821
        bool_0 = None
        object_0 = module_0.Object(min_properties=int_0)
        any_0 = object_0.validate(bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        decimal_0 = module_1.Decimal()
        bool_0 = False
        str_0 = 'sY7gJ%W0:Bf:z'
        int_0 = 1821
        string_0 = module_0.String(max_length=int_0, min_length=int_0, format=str_0)
        str_1 = 'Puv"R>V?)fzw\\'
        field_0 = module_0.Field(description=str_1, default=int_0)
        array_0 = module_0.Array(field_0, field_0, bool_0)
        any_0 = string_0.serialize(array_0)
        array_1 = module_0.Array(field_0, int_0)
    except BaseException:
        pass

def test_case_18():
    try:
        number_0 = module_0.Number()
        any_0 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = None
        number_0 = module_0.Number()
        string_0 = module_0.String(trim_whitespace=bool_0)
        any_0 = string_0.validate(bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = None
        number_0 = module_0.Number()
        any_0 = number_0.validate(bool_0)
    except BaseException:
        pass

def test_case_21():
    try:
        bool_0 = True
        int_0 = -3638
        str_0 = '\n    A set-like class that tests for uniqueness of primitive types.\n    Ensures the `True` and `False` are treated as distinct from `1` and `0a,\n    and coerces non-hashable instances that cannot be added to sets,\n    into hashable representations that can.\n    '
        int_1 = 1821
        string_0 = module_0.String(trim_whitespace=bool_0, max_length=int_1, format=str_0)
        const_0 = module_0.Const(int_0)
        any_0 = const_0.validate(string_0, bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 1834
        bool_0 = False
        const_0 = module_0.Const(int_0)
        any_0 = const_0.validate(int_0, bool_0)
        number_0 = module_0.Number(minimum=int_0)
        any_1 = number_0.validate(number_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = -1990
        bool_0 = None
        str_0 = 'microsecond'
        string_0 = module_0.String(allow_blank=bool_0, max_length=int_0, min_length=int_0, format=str_0)
        dict_0 = {}
        any_0 = string_0.serialize(dict_0)
        any_1 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_24():
    try:
        decimal_0 = module_1.Decimal()
        bool_0 = True
        int_0 = -3638
        decimal_1 = module_0.Decimal(minimum=decimal_0, exclusive_maximum=int_0)
        any_0 = decimal_1.serialize(decimal_0)
        str_0 = '\n    A set-like class that tests for uniqueness of primitive types.\n    Ensures the `True` and `False` are treated as distinct from `1` and `0`,\n    and coerces non-hashable instances that cannot be added to sets,\n    into hashable representations that can.\n    '
        int_1 = 1821
        string_0 = module_0.String(max_length=int_1, min_length=int_1, format=str_0)
        any_1 = string_0.serialize(bool_0)
        decimal_2 = module_0.Decimal(precision=str_0)
        number_0 = module_0.Number(minimum=decimal_0, exclusive_maximum=decimal_0)
        any_2 = string_0.validate(str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        int_0 = 1813
        str_0 = '}Oe"8jI,H'
        number_0 = module_0.Number(precision=str_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        array_0 = module_0.Array()
        bool_0 = True
        number_0 = module_0.Number()
        any_0 = number_0.validate(bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 1875
        number_0 = module_0.Number(maximum=int_0, exclusive_maximum=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = ')'
        field_0 = module_0.Field(title=str_0, default=str_0)
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(properties=dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = '\n    A set-like class that tests for uniqueness of primitive types.\n    Ensures the `True` and `False` are treated as distinct from `1` and `0a,\n    and coerces non-hashable instances that cannot be added to sets,\n    into hashable representations that can.\n    '
        int_0 = 1821
        number_0 = module_0.Number(maximum=int_0, exclusive_minimum=int_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'P'
        boolean_0 = module_0.Boolean()
        any_0 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_31():
    try:
        decimal_0 = module_1.Decimal()
        bool_0 = True
        str_0 = 'O83R;MmW[~R[_TMt$'
        const_0 = module_0.Const(decimal_0)
        decimal_1 = module_0.Decimal(precision=str_0)
        number_0 = module_0.Number(minimum=decimal_0, exclusive_maximum=decimal_0)
        date_time_0 = module_0.DateTime()
        string_0 = module_0.String(trim_whitespace=bool_0, min_length=date_time_0, format=str_0)
    except BaseException:
        pass

def test_case_32():
    try:
        dict_0 = {}
        boolean_0 = module_0.Boolean()
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0)
        any_0 = boolean_0.validate(dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        bool_0 = None
        field_0 = module_0.Field(default=bool_0, allow_null=bool_0)
        date_time_0 = module_0.DateTime()
        field_1 = module_0.Field(default=date_time_0, allow_null=bool_0)
        union_0 = field_1.__or__(field_0)
        any_0 = union_0.validate(bool_0, bool_0)
    except BaseException:
        pass

def test_case_34():
    try:
        bool_0 = True
        str_0 = '_V'
        string_0 = module_0.String(allow_blank=bool_0, pattern=str_0)
        bool_1 = True
        set_0 = {bool_0, bool_1, bool_1, bool_1}
        decimal_0 = module_0.Decimal(minimum=bool_1, exclusive_minimum=set_0)
    except BaseException:
        pass

def test_case_35():
    try:
        int_0 = 3575
        number_0 = module_0.Number(exclusive_minimum=int_0, multiple_of=int_0)
        any_0 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_36():
    try:
        int_0 = 4
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        integer_1 = [integer_0, integer_0]
        array_0 = module_0.Array(integer_1, integer_0, int_0, int_0)
        int_1 = -1301
        int_2 = [int_1, int_0, int_1, int_0]
        any_0 = array_0.validate(int_2)
    except BaseException:
        pass

def test_case_37():
    try:
        str_0 = '(.v@VGd'
        field_0 = module_0.Field(default=str_0)
        int_0 = 1486
        list_0 = [int_0, str_0, str_0]
        object_0 = module_0.Object(properties=field_0, property_names=field_0, max_properties=int_0, required=list_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'y'
        object_0 = module_0.Object(required=str_0)
        dict_0 = {}
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        str_0 = '}Oe"8jI,H'
        number_0 = module_0.Number(precision=str_0)
        bool_0 = True
        any_0 = number_0.validate(str_0, strict=bool_0)
    except BaseException:
        pass

def test_case_40():
    try:
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        array_0 = module_0.Array(field_0)
        any_0 = array_0.serialize(array_0)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = 4
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        integer_1 = [integer_0, integer_0]
        array_0 = module_0.Array(integer_1, integer_0, int_0, int_0)
        int_1 = [integer_1, int_0, integer_0]
        int_2 = 4
        int_3 = 7
        int_4 = [int_2, int_3, int_1, int_0]
        any_0 = array_0.validate(int_4)
    except BaseException:
        pass

def test_case_42():
    try:
        dict_0 = {}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0)
        bool_0 = False
        any_0 = object_0.validate(object_0, strict=bool_0)
    except BaseException:
        pass

def test_case_43():
    try:
        str_0 = 'Firt lQme'
        string_0 = module_0.String(pattern=str_0)
        float_0 = module_0.Float()
        decimal_0 = module_0.Decimal(minimum=float_0, multiple_of=float_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = 'ZyZ4\x0bh(.&#'
        object_0 = module_0.Object(additional_properties=str_0)
    except BaseException:
        pass

def test_case_45():
    try:
        boolean_0 = module_0.Boolean()
        str_0 = '1'
        any_0 = boolean_0.validate(str_0)
        int_0 = 1
        number_0 = module_0.Number(maximum=int_0, exclusive_minimum=int_0, multiple_of=int_0)
        any_1 = number_0.validate(int_0)
    except BaseException:
        pass

def test_case_46():
    try:
        str_0 = "^CCJ{\x0c'_y7RyIvoXfDC"
        dict_0 = None
        dict_1 = {}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_1)
        int_0 = 1821
        string_0 = module_0.String(min_length=int_0, pattern=str_0)
        any_0 = string_0.serialize(object_0)
        const_0 = module_0.Const(dict_0)
        decimal_0 = module_0.Decimal(maximum=int_0, exclusive_minimum=int_0, precision=str_0)
        any_1 = const_0.validate(int_0)
    except BaseException:
        pass

def test_case_47():
    try:
        str_0 = ')'
        bool_0 = True
        boolean_0 = module_0.Boolean(description=str_0, default=str_0, allow_null=bool_0)
        any_0 = boolean_0.validate(bool_0, strict=bool_0)
        const_0 = module_0.Const(str_0)
        field_0 = module_0.Field(title=str_0, default=str_0)
        int_0 = -1628
        number_0 = module_0.Number(minimum=int_0, maximum=int_0, exclusive_minimum=int_0)
        any_1 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_48():
    try:
        dict_0 = None
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_49():
    try:
        any_0 = None
        choice_0 = module_0.Choice(choices=any_0)
        any_1 = choice_0.validate(any_0)
    except BaseException:
        pass

def test_case_50():
    try:
        bool_0 = None
        array_0 = module_0.Array()
        any_0 = array_0.validate(bool_0)
    except BaseException:
        pass

def test_case_51():
    try:
        float_0 = 270.6419
        integer_0 = module_0.Integer(minimum=float_0, exclusive_maximum=float_0, multiple_of=float_0)
        choice_0 = module_0.Choice()
        string_0 = module_0.String(pattern=choice_0)
    except BaseException:
        pass

def test_case_52():
    try:
        decimal_0 = module_1.Decimal()
        str_0 = '\n    A set-like class that tests for uniqueness of primitive types.\n    Ensures the `True` and `False` are treated as distinct from `1` and `0`,\n    and coerces non-hashable instances that cannot be added to sets,\n    into hashable representations that can.\n    '
        int_0 = 1821
        string_0 = module_0.String(max_length=int_0, min_length=int_0, format=str_0)
        number_0 = module_0.Number(multiple_of=int_0)
        any_0 = number_0.validate(int_0)
        str_1 = 'b]\x0c%=Y\\Y\x0cxxH%@~'
        field_0 = module_0.Field(default=decimal_0)
        str_2 = None
        dict_0 = {str_1: field_0, str_1: field_0, str_2: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, min_properties=int_0)
    except BaseException:
        pass

def test_case_53():
    try:
        str_0 = 's;`y}\x0b{}r o+IChG'
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_54():
    try:
        array_0 = module_0.Array()
        str_0 = ''
        field_0 = module_0.Field(description=str_0)
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        date_time_0 = module_0.DateTime()
        object_0 = module_0.Object(max_properties=union_0, required=date_time_0)
    except BaseException:
        pass

def test_case_55():
    try:
        bool_0 = True
        int_0 = 1821
        number_0 = module_0.Number(multiple_of=int_0)
        int_1 = 0
        number_1 = module_0.Number(exclusive_minimum=int_1, exclusive_maximum=int_0)
        any_0 = number_1.validate(int_0, strict=bool_0)
    except BaseException:
        pass

def test_case_56():
    try:
        decimal_0 = module_1.Decimal()
        number_0 = module_0.Number(exclusive_maximum=decimal_0)
        any_0 = number_0.validate(decimal_0)
    except BaseException:
        pass

def test_case_57():
    try:
        int_0 = 1880
        number_0 = module_0.Number(minimum=int_0, maximum=int_0)
        any_0 = number_0.validate(int_0)
        dict_0 = {}
        str_0 = ',r)P'
        field_0 = None
        str_1 = "^CCJ{\x0c'6y7RyIvoXfDC"
        dict_1 = {str_0: field_0, str_0: field_0, str_1: field_0}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_1, min_properties=int_0, max_properties=int_0)
    except BaseException:
        pass

def test_case_58():
    try:
        decimal_0 = module_1.Decimal()
        int_0 = 1821
        bool_0 = None
        str_0 = '$ref'
        str_1 = ':;&'
        field_0 = module_0.Field(description=str_1)
        str_2 = 'y~k'
        field_1 = None
        dict_0 = {str_0: field_0, str_2: field_1}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0, additional_properties=bool_0, max_properties=int_0)
    except BaseException:
        pass

def test_case_59():
    try:
        dict_0 = {}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0)
        str_0 = 'Must not match.'
        bool_0 = None
        field_0 = module_0.Field(title=str_0, allow_null=bool_0)
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        float_0 = -959.31403
        object_1 = module_0.Object(min_properties=union_0, max_properties=float_0)
    except BaseException:
        pass

def test_case_60():
    try:
        str_0 = ')'
        field_0 = module_0.Field(title=str_0, default=str_0)
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        int_0 = 637
        object_0 = module_0.Object(pattern_properties=dict_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_61():
    try:
        dict_0 = {}
        str_0 = 'YD:h:!<Xn,0MAzI0'
        boolean_0 = module_0.Boolean(title=str_0, default=dict_0)
        int_0 = -3638
        object_0 = module_0.Object(max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_62():
    try:
        bool_0 = None
        str_0 = ';+m{NS'
        boolean_0 = module_0.Boolean(description=str_0, default=bool_0)
        any_0 = boolean_0.validate(bool_0)
    except BaseException:
        pass

def test_case_63():
    try:
        dict_0 = {}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0)
        str_0 = None
        float_0 = -1396.1
        decimal_0 = module_0.Decimal(maximum=float_0)
        any_0 = decimal_0.serialize(str_0)
        int_0 = 1821
        str_1 = 'hrk]'
        str_2 = '^Y8BXS\n\t4UwV\x0cz&<J|'
        str_3 = ' '
        dict_1 = {str_0: dict_0, str_1: float_0, str_2: dict_0, str_3: any_0}
        string_0 = module_0.String(min_length=int_0, **dict_1)
    except BaseException:
        pass

def test_case_64():
    try:
        str_0 = ''
        field_0 = None
        str_1 = None
        dict_0 = {str_0: field_0, str_1: field_0}
        text_0 = module_0.Text()
        object_0 = module_0.Object(properties=dict_0, required=text_0)
    except BaseException:
        pass

def test_case_65():
    try:
        str_0 = ')'
        bool_0 = True
        boolean_0 = module_0.Boolean(description=str_0, default=str_0, allow_null=bool_0)
        int_0 = 637
        number_0 = module_0.Number(minimum=int_0, maximum=int_0, exclusive_minimum=int_0)
        any_0 = boolean_0.validate(str_0)
    except BaseException:
        pass

def test_case_66():
    try:
        int_0 = 1826
        float_0 = 1.4434510160180456
        int_1 = None
        number_0 = module_0.Number(exclusive_maximum=int_1, multiple_of=int_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_67():
    try:
        decimal_0 = module_1.Decimal()
        str_0 = ''
        number_0 = module_0.Number(exclusive_maximum=decimal_0, precision=str_0)
        any_0 = number_0.validate(str_0)
    except BaseException:
        pass

def test_case_68():
    try:
        dict_0 = {}
        int_0 = 5
        optional_0 = None
        object_0 = module_0.Object(properties=dict_0, min_properties=int_0, required=optional_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_69():
    try:
        dict_0 = {}
        int_0 = 1
        optional_0 = None
        object_0 = module_0.Object(properties=dict_0, min_properties=int_0, required=optional_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_70():
    try:
        dict_0 = {}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0)
        string_0 = module_0.String()
        str_0 = 'f|m]ZhWD=A2h\r'
        any_0 = module_0.Any(title=str_0, default=object_0)
        int_0 = -1341
        number_0 = module_0.Number(maximum=any_0, exclusive_maximum=int_0)
    except BaseException:
        pass

def test_case_71():
    try:
        dict_0 = {}
        decimal_0 = module_0.Decimal(exclusive_maximum=dict_0)
    except BaseException:
        pass

def test_case_72():
    try:
        dict_0 = {}
        object_0 = module_0.Object(properties=dict_0, pattern_properties=dict_0)
        str_0 = 'S^Uy@[\x0b`cNlARi+=/'
        time_0 = module_0.Time()
        number_0 = module_0.Number(precision=str_0, multiple_of=time_0)
    except BaseException:
        pass

def test_case_73():
    try:
        dict_0 = {}
        bool_0 = False
        str_0 = 'gnmISRB:p!O|/O'
        dict_1 = {str_0: str_0, str_0: str_0}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=bool_0, required=dict_1)
        any_0 = object_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_74():
    try:
        int_0 = -3669
        int_1 = 1803
        number_0 = module_0.Number(multiple_of=int_1)
        decimal_0 = module_0.Decimal(minimum=int_1, exclusive_minimum=int_0, exclusive_maximum=int_0)
        str_0 = 'xn? 5d['
        dict_0 = {str_0: number_0, str_0: decimal_0, str_0: int_0, str_0: number_0}
        bool_0 = False
        object_0 = module_0.Object(additional_properties=bool_0, max_properties=int_1)
        any_0 = object_0.validate(dict_0, strict=bool_0)
    except BaseException:
        pass

def test_case_75():
    try:
        any_0 = None
        choice_0 = module_0.Choice(choices=any_0)
        str_0 = ":?b&c\t=W'4I@T"
        field_0 = module_0.Field(description=str_0)
        any_1 = field_0.serialize(choice_0)
        bool_0 = False
        int_0 = 1863
        array_0 = module_0.Array(any_0, bool_0, int_0)
        any_2 = array_0.serialize(any_0)
        any_3 = choice_0.validate(any_0)
    except BaseException:
        pass

def test_case_76():
    try:
        int_0 = 1920
        str_0 = 'Ak\n00H:^`oY=kmsG'
        str_1 = '9\\G'
        field_0 = module_0.Field(title=str_0, description=str_1)
        list_0 = [field_0]
        bool_0 = True
        array_0 = module_0.Array(list_0, field_0, int_0, int_0, bool_0)
        any_0 = array_0.validate(int_0)
    except BaseException:
        pass

def test_case_77():
    try:
        int_0 = -1501
        number_0 = module_0.Number(multiple_of=int_0)
        set_0 = {int_0, number_0, number_0}
        bool_0 = True
        boolean_0 = module_0.Boolean(default=set_0)
        any_0 = boolean_0.validate(number_0, strict=bool_0)
    except BaseException:
        pass

def test_case_78():
    try:
        field_0 = module_0.Field()
        str_0 = '`\x0bAE?6+~iU7['
        field_1 = module_0.Field(description=str_0)
        bool_0 = field_0.has_default()
        array_0 = module_0.Array()
        array_1 = module_0.Array(field_0, field_0, array_0)
    except BaseException:
        pass

def test_case_79():
    try:
        int_0 = 1798
        float_0 = -3.974949995386826
        number_0 = module_0.Number(exclusive_maximum=int_0, multiple_of=float_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_80():
    try:
        int_0 = 1813
        str_0 = '}Oe"8jI,H'
        bool_0 = True
        str_1 = '4<H)Ju96\\FtwLD'
        dict_0 = {str_1: str_0}
        object_0 = module_0.Object(additional_properties=bool_0, property_names=dict_0, max_properties=int_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_81():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        array_0 = module_0.Array(list_0)
    except BaseException:
        pass

def test_case_82():
    try:
        int_0 = 1932
        str_0 = 'Ak\n00H:^`oY=kmsG'
        str_1 = 'else'
        field_0 = module_0.Field(title=str_0, description=str_1)
        list_0 = [field_0]
        bool_0 = True
        array_0 = module_0.Array(list_0, field_0, int_0, int_0, bool_0)
        string_0 = module_0.String(pattern=str_0)
        any_0 = string_0.validate(str_1)
    except BaseException:
        pass

def test_case_83():
    try:
        str_0 = '.'
        bool_0 = False
        string_0 = module_0.String(trim_whitespace=bool_0, pattern=str_0, format=str_0)
        any_0 = string_0.validate(str_0)
        field_0 = module_0.Field(description=str_0)
        any_1 = field_0.get_default_value()
        date_time_0 = module_0.DateTime()
        dict_0 = {str_0: field_0, str_0: str_0}
        object_0 = module_0.Object(properties=date_time_0, required=dict_0)
        any_2 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_84():
    try:
        bool_0 = None
        array_0 = module_0.Array()
        dict_0 = {}
        object_0 = module_0.Object(properties=array_0, pattern_properties=dict_0, additional_properties=bool_0)
        list_0 = [object_0]
        bool_1 = True
        array_1 = module_0.Array(list_0, bool_1)
        any_0 = array_0.validate(bool_1)
    except BaseException:
        pass

def test_case_85():
    try:
        bool_0 = None
        dict_0 = {}
        time_0 = module_0.Time(**dict_0)
        array_0 = module_0.Array()
        dict_1 = {}
        object_0 = module_0.Object(properties=array_0, pattern_properties=dict_1, additional_properties=bool_0)
        list_0 = [object_0]
        bool_1 = True
        array_1 = module_0.Array(list_0, bool_1)
        any_0 = array_1.serialize(array_1)
    except BaseException:
        pass

def test_case_86():
    try:
        str_0 = 'kQ'
        object_0 = module_0.Object(required=str_0)
        dict_0 = {object_0: object_0, str_0: object_0}
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_87():
    try:
        bool_0 = None
        array_0 = module_0.Array()
        dict_0 = {}
        object_0 = module_0.Object(properties=array_0, pattern_properties=dict_0, additional_properties=bool_0)
        list_0 = [object_0]
        bool_1 = False
        array_1 = module_0.Array(list_0, bool_1)
        float_0 = 388.8325
        number_0 = module_0.Number(maximum=float_0, multiple_of=float_0)
        any_0 = number_0.validate(bool_0)
    except BaseException:
        pass

def test_case_88():
    try:
        str_0 = ''
        field_0 = module_0.Field()
        dict_0 = {str_0: field_0, str_0: field_0}
        object_0 = module_0.Object(pattern_properties=dict_0, additional_properties=field_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_89():
    try:
        float_0 = 264.0
        int_0 = 3841
        number_0 = module_0.Number(maximum=float_0, exclusive_maximum=float_0, precision=int_0)
        any_0 = number_0.validate(float_0)
    except BaseException:
        pass

def test_case_90():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        field_0 = module_0.Field()
        union_0 = field_0.__or__(field_0)
        array_0 = module_0.Array(union_0)
        any_0 = array_0.validate(list_0, strict=bool_0)
    except BaseException:
        pass

def test_case_91():
    try:
        str_0 = ''
        field_0 = module_0.Field(description=str_0)
        date_time_0 = module_0.DateTime()
        dict_0 = {str_0: field_0, str_0: field_0, str_0: str_0}
        object_0 = module_0.Object(properties=date_time_0, required=dict_0)
        any_0 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_92():
    try:
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, bool_0]
        field_0 = module_0.Field()
        list_1 = []
        union_0 = module_0.Union(list_1)
        array_0 = module_0.Array(union_0)
        any_0 = array_0.validate(list_0, strict=bool_0)
    except BaseException:
        pass

def test_case_93():
    try:
        str_0 = '.'
        field_0 = module_0.Field(description=str_0)
        any_0 = field_0.get_default_value()
        date_time_0 = module_0.DateTime()
        dict_0 = {str_0: field_0, str_0: str_0}
        object_0 = module_0.Object(properties=date_time_0, required=dict_0)
        any_1 = object_0.validate(dict_0)
    except BaseException:
        pass

def test_case_94():
    try:
        string_0 = module_0.String()
        str_0 = '13.13.13.13'
        str_1 = 'date'
        string_1 = module_0.String(format=str_1)
        any_0 = string_1.serialize(str_0)
    except BaseException:
        pass

def test_case_95():
    try:
        str_0 = "{'&"
        field_0 = module_0.Field(title=str_0, default=str_0)
        dict_0 = {str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0, str_0: field_0}
        int_0 = 25
        object_0 = module_0.Object(pattern_properties=dict_0, max_properties=int_0)
        tuple_0 = ()
        tuple_1 = (tuple_0, str_0, tuple_0)
        choice_0 = module_0.Choice(choices=tuple_1)
    except BaseException:
        pass

def test_case_96():
    try:
        dict_0 = None
        str_0 = '#HV0'
        str_1 = '0'
        bool_0 = True
        boolean_0 = module_0.Boolean(allow_null=bool_0)
        any_0 = boolean_0.validate(dict_0)
        field_0 = module_0.Field(title=str_0, description=str_1)
        boolean_1 = module_0.Boolean()
        decimal_0 = module_1.Decimal()
        integer_0 = module_0.Integer(maximum=decimal_0, precision=str_1)
        list_0 = [field_0, field_0, field_0, field_0]
        union_0 = module_0.Union(list_0)
        any_1 = union_0.validate(field_0)
    except BaseException:
        pass

def test_case_97():
    try:
        validation_result_0 = None
        bool_0 = True
        field_0 = module_0.Field(allow_null=bool_0)
        field_1 = module_0.Field()
        union_0 = field_1.__or__(field_0)
        any_0 = union_0.validate(validation_result_0)
        any_1 = union_0.validate(field_1)
    except BaseException:
        pass

def test_case_98():
    try:
        int_0 = -4531
        int_1 = 0
        integer_0 = module_0.Integer(minimum=int_1)
        array_0 = module_0.Array(integer_0)
        str_0 = 'a'
        integer_1 = module_0.Integer(minimum=int_0)
        integer_2 = {str_0: integer_1}
        object_0 = module_0.Object(properties=integer_2)
        any_0 = object_0.validate(integer_2)
    except BaseException:
        pass

def test_case_99():
    try:
        str_0 = 'vz~\tgVH qVrR%WL'
        integer_0 = module_0.Integer()
        integer_1 = {str_0: integer_0}
        object_0 = module_0.Object(properties=integer_1)
        int_0 = 5
        int_1 = {int_0: object_0, integer_0: str_0, str_0: int_0, int_0: integer_0}
        var_0 = str_0 == int_1
        any_0 = object_0.validate(int_1)
    except BaseException:
        pass

def test_case_100():
    try:
        int_0 = 4
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        integer_1 = [integer_0, integer_0]
        int_1 = 2
        array_0 = module_0.Array(integer_1, integer_0, int_1, int_0)
        int_2 = [int_0]
        int_3 = 4
        int_4 = 7
        int_5 = [int_3, int_4, int_2, int_0]
        any_0 = array_0.validate(int_5)
    except BaseException:
        pass

def test_case_101():
    try:
        int_0 = 10
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        int_1 = 2
        array_0 = module_0.Array(integer_0, integer_0, int_1, int_0)
        int_2 = [int_1]
        any_0 = array_0.validate(int_2)
    except BaseException:
        pass

def test_case_102():
    try:
        int_0 = 4
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_0)
        integer_1 = [integer_0, integer_0]
        array_0 = module_0.Array(integer_1, integer_0, int_0, int_0)
        int_1 = [int_0, int_0, int_0, int_0]
        any_0 = array_0.validate(int_1)
        any_1 = array_0.validate(integer_1)
    except BaseException:
        pass

def test_case_103():
    try:
        str_0 = 'vz~\tgVH qVrR%WL'
        integer_0 = module_0.Integer()
        integer_1 = {str_0: integer_0}
        object_0 = module_0.Object(properties=integer_1)
        int_0 = 5
        int_1 = {int_0: object_0, integer_0: str_0, int_0: integer_0}
        var_0 = str_0 == int_1
        any_0 = object_0.validate(int_1)
    except BaseException:
        pass

def test_case_104():
    try:
        int_0 = -10
        int_1 = 10
        integer_0 = module_0.Integer(minimum=int_0, maximum=int_1)
        integer_1 = [integer_0, integer_0]
        int_2 = 2
        int_3 = 4
        array_0 = module_0.Array(integer_1, integer_0, int_2, int_3)
        int_4 = 7
        int_5 = 8
        int_6 = [int_1, int_3, int_4, int_5]
        any_0 = array_0.validate(int_6)
        time_0 = module_0.Time()
        int_7 = 4
        int_8 = 7
        int_9 = 8
        int_10 = 5
        int_11 = [int_4, int_7, int_8, int_9, int_10]
        any_1 = array_0.validate(int_11)
    except BaseException:
        pass

def test_case_105():
    try:
        str_0 = 'vz~\tgVH qVrR%WL'
        integer_0 = module_0.Integer()
        object_0 = module_0.Object(properties=integer_0)
        int_0 = 22
        int_1 = {int_0: object_0, integer_0: str_0, str_0: int_0, int_0: integer_0}
        var_0 = str_0 == int_1
        any_0 = object_0.validate(int_1)
    except BaseException:
        pass

def test_case_106():
    try:
        int_0 = -4531
        int_1 = 2
        int_2 = 3
        int_3 = [int_0, int_1, int_2]
        int_4 = 0
        integer_0 = module_0.Integer(minimum=int_4)
        array_0 = module_0.Array(integer_0)
        str_0 = 'a'
        integer_1 = module_0.Integer(minimum=int_0)
        integer_2 = {str_0: integer_1}
        object_0 = module_0.Object(properties=integer_2)
        var_0 = [array_0, object_0]
        union_0 = module_0.Union(var_0)
        any_0 = union_0.validate(int_3)
    except BaseException:
        pass

def test_case_107():
    try:
        int_0 = -4531
        int_1 = 2
        int_2 = -2979
        int_3 = [int_0, int_1, int_2]
        int_4 = 0
        integer_0 = module_0.Integer(minimum=int_4)
        array_0 = module_0.Array(integer_0)
        str_0 = 'a'
        integer_1 = module_0.Integer(minimum=int_0)
        integer_2 = {str_0: integer_1}
        object_0 = module_0.Object(properties=integer_2)
        var_0 = [array_0, object_0]
        union_0 = module_0.Union(var_0)
        any_0 = union_0.validate(int_3)
    except BaseException:
        pass