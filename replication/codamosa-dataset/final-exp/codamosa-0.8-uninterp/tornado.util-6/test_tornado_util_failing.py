# Automatically generated by Pynguin.
import tornado.util as module_0
import builtins as module_1

def test_case_0():
    try:
        object_dict_0 = module_0.ObjectDict()
        var_0 = object_dict_0.b
    except BaseException:
        pass

def test_case_1():
    try:
        object_dict_0 = module_0.ObjectDict()
        str_0 = '1'
        str_1 = ")Y+,Me}U$c'_*cTt/M\\"
        object_dict_0.__setattr__(str_1, object_dict_0)
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        bytes_1 = b'$\xf8\x07\xa7\xb4g|1EELH\xf9\xd6'
        int_0 = None
        bytes_2 = gzip_decompressor_0.decompress(bytes_1, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 's-3y\rj\nE]x%&uvC;j\x0c'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '4Z(46Rp&3?0*[8~fAM'
        var_0 = module_0.raise_exc_info(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        object_dict_0 = module_0.ObjectDict()
        list_0 = [object_dict_0]
        base_exception_0 = module_1.BaseException(*list_0)
        optional_0 = module_0.errno_from_exception(base_exception_0)
        str_0 = 'A/Qb-7g\x0c>>rFC]1%X\r'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        object_dict_0 = module_0.ObjectDict()
        str_0 = '#Jh8`LYL\\Q,.RfbVfs'
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        list_0 = [optional_0, optional_0, optional_0, optional_0]
        configurable_0 = module_0.Configurable(*list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'falMe'
        arg_replacer_0 = module_0.ArgReplacer(str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = module_0.doctests()
        timeout_error_0 = module_0.TimeoutError()
        gzip_decompressor_0 = None
        var_1 = module_0.timedelta_to_seconds(gzip_decompressor_0)
    except BaseException:
        pass

def test_case_10():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        dict_0 = None
        module_0.exec_in(optional_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        timeout_error_0 = module_0.TimeoutError()
        str_0 = 'm[X(Q?)eH00}Fpj3:'
        str_1 = '}0'
        str_2 = '\n$,+N=,X_M1E^^^hj@'
        str_3 = 'W(rf]:[EuMl7:'
        str_4 = '0'
        dict_0 = {str_2: base_exception_0, str_3: str_0, str_4: base_exception_0, str_1: str_2}
        module_0.exec_in(str_0, dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'sys.moules'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'sys'
        any_0 = module_0.import_object(str_0)
        str_1 = 'sys.modules'
        any_1 = module_0.import_object(str_1)
        str_2 = "]i:Q\x0c'\\\\Deg.oZ0?Ro$"
        str_3 = module_0.re_unescape(str_2)
        str_4 = 'n#@vM<4nU77VDD%bg;.'
        any_2 = module_0.import_object(str_4)
    except BaseException:
        pass

def test_case_14():
    try:
        object_dict_0 = module_0.ObjectDict()
        sequence_0 = None
        str_0 = 'U%mWt7J1[X|:5Qo'
        str_1 = 'yX({'
        dict_0 = {str_0: sequence_0, str_1: sequence_0}
        tuple_0 = (object_dict_0, sequence_0, dict_0)
        var_0 = module_0.raise_exc_info(tuple_0)
    except BaseException:
        pass