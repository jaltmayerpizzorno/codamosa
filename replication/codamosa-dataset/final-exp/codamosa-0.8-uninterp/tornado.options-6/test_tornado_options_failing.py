# Automatically generated by Pynguin.
import tornado.options as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = 'H+Mc'
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'nxU[9>%O2;1'
        set_0 = {str_0, str_0, str_0}
        option_parser_0 = module_0.OptionParser()
        option_parser_0.__setattr__(str_0, set_0)
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        module_0.add_parse_callback(callable_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        str_0 = 'D'
        bool_0 = option_parser_0.__contains__(str_0)
        mockable_0 = module_0._Mockable(option_parser_1)
        option_parser_2 = module_0.OptionParser()
        mockable_0.__setattr__(str_0, mockable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'O[LQJ99>o.[>Sn2\t.9h'
        option_parser_0 = module_0.OptionParser()
        any_0 = option_parser_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = None
        option_parser_0.__setitem__(str_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        error_0 = module_0.Error()
        option_parser_0 = module_0.OptionParser()
        option_parser_0.add_parse_callback(error_0)
        str_0 = '<ast>'
        set_0 = option_parser_0.groups()
        option_parser_1 = module_0.OptionParser()
        iterator_0 = option_parser_1.__iter__()
        iterator_1 = option_parser_1.__iter__()
        mockable_0 = option_parser_1.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'template_path'
        str_1 = 'application'
        module_0.define(str_0, str_1)
        str_2 = 'static_path'
        module_0.define(str_2, str_1)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_7():
    try:
        option_parser_0 = module_0.OptionParser()
        list_0 = option_parser_0.parse_command_line()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'cZ'
        list_0 = [str_0, str_0, str_0, str_0]
        option_parser_0 = module_0.OptionParser()
        option_parser_1 = module_0.OptionParser()
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'qh?Vb=\r2[\rV@@6\na\ryY('
        str_1 = 'g\t6y[N3&dy8\rX'
        bool_0 = False
        option_0 = module_0._Option(str_0, str_1, bool_0)
        option_parser_0 = module_0.OptionParser()
        str_2 = 'F5Tw2 @Mu`@GG{p_.^\x0b'
        list_0 = [str_0, str_2, str_0]
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        str_0 = 'r!!.wPHFV sLgB<'
        module_0.parse_config_file(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help()
        option_parser_1 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_1)
        list_0 = module_0.parse_command_line()
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'hRV\r,Ve'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_0)
        any_0 = mockable_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'A4K\x0b<_QUWV5Md&'
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        mockable_0.__setattr__(str_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'qh?Vb=\r2[\rV@@6\na\ryY('
        str_1 = 'g\t6y[N3&dy8\rX'
        bool_0 = True
        option_0 = module_0._Option(str_0, str_1, bool_0)
        any_0 = option_0.value()
        option_parser_0 = module_0.OptionParser()
        list_0 = [str_0, str_0, str_0]
        list_1 = option_parser_0.parse_command_line(list_0)
        option_parser_1 = module_0.OptionParser()
        mockable_0 = module_0._Mockable(option_parser_1)
        mockable_0.__delattr__(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = ''
        none_type_0 = None
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        option_0 = module_0._Option(str_0, none_type_0, str_0, str_0, str_0, iterable_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'c$'
        dict_0 = option_parser_0.group_dict(str_0)
        dict_1 = option_parser_0.as_dict()
        str_1 = '\\"'
        option_0 = module_0._Option(str_1, str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        option_parser_0 = module_0.OptionParser()
        mockable_0 = option_parser_0.mockable()
        option_parser_0.run_parse_callbacks()
        str_0 = 'y4e.cV)h+QZ'
        str_1 = '8=c\t3JNq\x0b'
        option_0 = module_0._Option(str_1, str_1, str_1)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = None
        str_1 = '\r\n'
        str_2 = 'kc!%|H\x0bXoIQl,9J^i-]'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
        module_0.print_help(dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '--name=pge'
        option_parser_0 = module_0.OptionParser()
        list_0 = option_parser_0.parse_command_line(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        option_parser_0 = module_0.OptionParser()
        iterable_0 = option_parser_0.items()
        str_0 = 'H,e2'
        option_parser_1 = module_0.OptionParser()
        bool_0 = option_parser_1.__contains__(str_0)
        list_0 = []
        list_1 = option_parser_1.parse_command_line(list_0)
        module_0.add_parse_callback(iterable_0)
        bytes_0 = b'6'
        module_0.add_parse_callback(bytes_0)
        dict_0 = option_parser_0.group_dict(str_0)
        mockable_0 = module_0._Mockable(option_parser_1)
        any_0 = option_parser_1.__getattr__(str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = ''
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        type_0 = None
        module_0.define(str_0, type_0, str_0, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'qh?Vb=\r2[\rV@@6\na\ryY('
        str_1 = 'g\t6y[N3&dy8\rX'
        bool_0 = False
        option_0 = module_0._Option(str_0, str_1, bool_0)
        option_0.set(bool_0)
    except BaseException:
        pass

def test_case_23():
    try:
        option_parser_0 = module_0.OptionParser()
        option_parser_0.print_help()
        str_0 = '`-89\\~a6doUq!s'
        option_0 = module_0._Option(str_0, str_0, str_0)
        str_1 = "Imports an object by name.\n\n    ``import_object('x')`` is equivalent to ``import x``.\n    ``import_object('x.y.z')`` is equivalent to ``from x.y import z``.\n\n    >>> import tornado.escape\n    >>> import_object('tornado.escape') is tornado.escape\n    True\n    >>> import_object('tornado.escape.utf8') is tornado.escape.utf8\n    True\n    >>> import_object('tornado') is tornado\n    True\n    >>> import_object('tornado.missing_module')\n    Traceback (most recent call last):\n        ...\n    ImportError: No module named missing_module\n    "
        option_1 = module_0._Option(str_1, str_1, str_1, str_1)
        str_2 = ''
        dict_0 = option_parser_0.group_dict(str_2)
        str_3 = ':|B(.A9<IL'
        any_0 = option_0.parse(str_3)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'c'
        list_0 = [str_0, str_0, str_0, str_0]
        option_parser_0 = module_0.OptionParser()
        bool_0 = True
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, bool_0)
        option_0.set(list_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'c'
        option_parser_0 = module_0.OptionParser()
        bool_0 = True
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, bool_0)
        any_0 = option_0.parse(str_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = ''
        list_0 = [str_0, str_0, str_0, str_0]
        none_type_0 = None
        option_parser_0 = module_0.OptionParser()
        optional_0 = None
        option_parser_0.define(str_0, str_0, str_0, optional_0)
        option_parser_0.print_help(none_type_0)
        bool_0 = False
        option_parser_0.__setitem__(str_0, optional_0)
        bool_1 = False
        dict_0 = option_parser_0.group_dict(str_0)
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, bool_1)
        option_parser_1 = module_0.OptionParser()
        list_1 = module_0.parse_command_line(list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        str_0 = 'Z'
        option_parser_0.print_help()
        callable_0 = None
        module_0.add_parse_callback(callable_0)
        none_type_0 = None
        option_parser_1 = module_0.OptionParser()
        optional_0 = None
        option_parser_1.define(str_0, str_0, str_0, optional_0)
        set_0 = option_parser_1.groups()
        option_parser_1.print_help(none_type_0)
        mockable_0 = module_0._Mockable(option_parser_1)
        bool_0 = False
        option_parser_1.__setitem__(str_0, optional_0)
        dict_1 = option_parser_1.group_dict(str_0)
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, bool_0)
        option_parser_2 = module_0.OptionParser()
        option_parser_3 = module_0.OptionParser()
        mockable_0.__setattr__(str_0, option_parser_2)
    except BaseException:
        pass

def test_case_28():
    try:
        none_type_0 = None
        str_0 = 'Unsupported auth_mode %s'
        list_0 = [str_0]
        type_0 = module_1.type(*list_0)
        str_1 = None
        bool_0 = False
        type_1 = module_1.type(*list_0)
        option_parser_0 = module_0.OptionParser()
        option_parser_0.define(str_0, str_0, type_0, str_1, str_1, bool_0, type_1)
        option_parser_1 = module_0.OptionParser()
        option_parser_1.print_help(none_type_0)
        mockable_0 = option_parser_1.mockable()
        option_parser_2 = module_0.OptionParser()
        option_parser_3 = module_0.OptionParser()
        str_2 = '/input/tornado/log.py'
        mockable_1 = option_parser_1.mockable()
        any_0 = mockable_1.__getattr__(str_2)
    except BaseException:
        pass

def test_case_29():
    try:
        option_parser_0 = module_0.OptionParser()
        str_0 = 'H,7QL\\pJ1bU-]'
        str_1 = '--'
        list_0 = [str_0, str_1]
        list_1 = option_parser_0.parse_command_line(list_0)
        iterable_0 = option_parser_0.items()
        str_2 = None
        option_parser_0.__setattr__(str_2, option_parser_0)
    except BaseException:
        pass

def test_case_30():
    try:
        option_parser_0 = module_0.OptionParser()
        dict_0 = option_parser_0.as_dict()
        str_0 = 'Z'
        option_parser_1 = module_0.OptionParser()
        option_parser_1.print_help()
        callable_0 = None
        module_0.add_parse_callback(callable_0)
        list_0 = [str_0, str_0]
        option_parser_2 = module_0.OptionParser()
        optional_0 = None
        option_parser_2.define(str_0, str_0, str_0, optional_0)
        iterable_0 = option_parser_2.items()
        set_0 = option_parser_2.groups()
        mockable_0 = module_0._Mockable(option_parser_2)
        bool_0 = False
        option_parser_2.__setitem__(str_0, optional_0)
        dict_1 = option_parser_2.group_dict(str_0)
        option_0 = module_0._Option(str_0, str_0, str_0, bool_0, str_0, bool_0)
        option_parser_3 = module_0.OptionParser()
        list_1 = option_parser_3.parse_command_line(list_0, bool_0)
        mockable_1 = option_parser_2.mockable()
        mockable_1.__setattr__(str_0, dict_1)
    except BaseException:
        pass

def test_case_31():
    try:
        option_parser_0 = module_0.OptionParser()
        var_0 = list(option_parser_0)
        iterator_0 = option_parser_0.__iter__()
        option_parser_1 = module_0.OptionParser()
        option_parser_2 = module_0.OptionParser()
        list_0 = option_parser_1.parse_command_line()
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = '/input/tornado/options.py'
        option_parser_0 = module_0.OptionParser()
        option_parser_0.parse_config_file(str_0)
        dict_0 = option_parser_0.group_dict(str_0)
        option_parser_0.__setattr__(str_0, dict_0)
    except BaseException:
        pass

def test_case_33():
    try:
        option_parser_0 = module_0.OptionParser()
        iterator_0 = option_parser_0.__iter__()
        str_0 = 'fOB99y=(/Zh%H'
        dict_0 = option_parser_0.group_dict(str_0)
        bool_0 = True
        list_0 = [dict_0]
        type_0 = module_1.type(*list_0)
        str_1 = '\x0cC"/6'
        option_0 = module_0._Option(str_0, bool_0, type_0, str_1, str_0, str_0)
        option_0.set(str_0)
    except BaseException:
        pass