# Automatically generated by Pynguin.
import sanic.mixins.routes as module_0

def test_case_0():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '/static/2'
        str_1 = '/static/1'
        str_2 = 'name'
        var_0 = route_mixin_0.static(str_0, str_1, str_2)
    except BaseException:
        pass

def test_case_1():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = 'F'
        var_0 = route_mixin_0.add_route(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = 'a'
        var_0 = route_mixin_0.add_route(route_mixin_0, str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        route_mixin_0 = module_0.RouteMixin()
        var_0 = lambda req: route_mixin_0
        var_1 = tuple()
        str_0 = ''
        str_1 = '(yWMH\t$H@T(Un.2n'
        bool_0 = True
        var_2 = route_mixin_0.route(str_1, bool_0)
        list_0 = [bool_0, var_0]
        tuple_0 = (str_1, list_0)
        int_0 = -113
        tuple_1 = (tuple_0, int_0)
        var_3 = route_mixin_0.add_route(tuple_1, str_0, str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        route_mixin_0 = module_0.RouteMixin()
        var_0 = lambda req: route_mixin_0
        str_0 = '>-|kO.%^|<Kw9?'
        str_1 = 'j#cA`+Qm|'
        var_1 = route_mixin_0.put(str_0, str_1, str_0)
        str_2 = ''
        var_2 = route_mixin_0.add_route(var_0, str_2, str_2)
    except BaseException:
        pass

def test_case_6():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        bool_0 = True
        var_0 = route_mixin_0.head(str_0, bool_0)
        var_1 = lambda req: route_mixin_0
        var_2 = route_mixin_0.add_route(var_1, str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = lambda req: route_mixin_0
        str_1 = '5|3U.B?i}Hu,h@v'
        var_1 = route_mixin_0.options(str_1, str_1)
        var_2 = route_mixin_0.add_route(var_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = ''
        var_0 = lambda req: str_0
        var_1 = route_mixin_0.delete(str_0)
        var_2 = route_mixin_0.add_route(var_0, str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = 3010
        str_0 = 'exceptions'
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_websocket_route(int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = None
        bytes_0 = None
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.static(list_0, bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        float_0 = 0.001
        str_0 = None
        bool_0 = False
        route_mixin_0 = module_0.RouteMixin()
        var_0 = route_mixin_0.add_route(float_0, str_0, bool_0, str_0, bool_0)
    except BaseException:
        pass

def test_case_12():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '5 U+!(.<\n0e'
        iterable_0 = None
        bool_0 = True
        var_0 = route_mixin_0.add_route(str_0, str_0, iterable_0, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        route_mixin_0 = module_0.RouteMixin()
        var_0 = lambda req: route_mixin_0
        str_0 = '~lXq9aA~x'
        str_1 = '.)=>B\x0c2Hd:(m'
        list_0 = []
        route_mixin_1 = module_0.RouteMixin(*list_0)
        var_1 = route_mixin_1.add_route(str_1, str_1, str_1, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = 'F'
        var_0 = route_mixin_0.add_websocket_route(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = '3'
        var_0 = lambda req: str_0
        var_1 = tuple()
        str_1 = '/'
        var_2 = route_mixin_0.add_route(var_0, str_1, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        route_mixin_0 = module_0.RouteMixin()
        str_0 = 'a'
        var_0 = lambda req: route_mixin_0
        var_1 = route_mixin_0.add_route(var_0, str_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'eS'
        bool_0 = True
        list_0 = [bool_0]
        route_mixin_0 = module_0.RouteMixin()
        route_mixin_1 = module_0.RouteMixin()
        str_1 = '00l'
        list_1 = [route_mixin_0, bool_0, str_0]
        str_2 = 'tE7fhB'
        str_3 = '\n        :return: Content-Type header form the request\n        :rtype: str\n        '
        dict_0 = {str_2: list_0, str_3: list_1}
        route_mixin_2 = module_0.RouteMixin(*list_1, **dict_0)
        var_0 = route_mixin_2.get(str_1, bool_0, bool_0)
        var_1 = route_mixin_0.add_websocket_route(str_0, str_0, str_0, bool_0, list_0, str_0)
    except BaseException:
        pass