# Automatically generated by Pynguin.
import ansible.parsing.mod_args as module_0

def test_case_0():
    try:
        bool_0 = True
        float_0 = 100.0
        module_args_parser_0 = module_0.ModuleArgsParser(bool_0, float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_args_parser_0 = module_0.ModuleArgsParser()
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '*v8>nh;z(6AAN^)'
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'action'
        str_1 = 'args'
        str_2 = 'local_action_example'
        str_3 = {str_0: str_0, str_2: str_2, str_1: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_3)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'doesnoteist'
        str_1 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(str_1)
        dict_0 = {str_0: module_args_parser_0}
        var_0 = module_args_parser_0.parse(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'ping'
        var_0 = {str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "dict(action='copy', src=dict(), dest=dict())"
        var_0 = eval(str_0)
        var_1 = dict()
        str_1 = "dict(action='file', before=dict())"
        var_2 = eval(str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_2, var_2)
        list_0 = [str_1]
        var_3 = module_args_parser_0.parse(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'action'
        str_1 = 'doesnotexist'
        str_2 = {str_0: str_1}
        module_args_parser_0 = module_0.ModuleArgsParser(str_2)
        var_0 = module_args_parser_0.parse()
        var_1 = module_args_parser_0.parse()
        str_3 = 'action'
        str_4 = '?@'
        var_2 = module_args_parser_0.parse(str_4)
        var_3 = module_args_parser_0.parse()
        bool_0 = True
        var_4 = {str_1: str_1, str_0: bool_0, str_1: str_3, str_1: str_3}
        module_args_parser_1 = module_0.ModuleArgsParser(var_4)
        var_5 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'shell'
        str_1 = 'echo hi'
        var_0 = dict(module=str_0, args=str_1)
        var_1 = dict(action=var_0)
        str_2 = 'action'
        var_2 = var_1[str_2]
        var_3 = dict(module=str_0, args=str_1)
        module_args_parser_0 = module_0.ModuleArgsParser(var_1)
        var_4 = module_args_parser_0.parse()
        var_5 = len(var_4)
        var_6 = dict(args=str_1)
        var_7 = dict(args=str_1)
        var_8 = dict(shell=var_7)
        var_9 = dict(action=var_8)
        var_10 = var_9[str_2]
        var_11 = dict(args=str_1)
        var_12 = dict(shell=var_11)
        module_args_parser_1 = module_0.ModuleArgsParser(var_9)
        var_13 = module_args_parser_1.parse()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'action'
        str_1 = 'local_action'
        str_2 = 'echo hi'
        str_3 = 'shell echo hello world'
        str_4 = {str_0: str_2, str_1: str_3}
        module_args_parser_0 = module_0.ModuleArgsParser(str_4)
        var_0 = module_args_parser_0.parse()
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'J@6JO|\\{g;6;n\x0bIE\r'
        str_1 = 'ping'
        bool_0 = False
        var_0 = {str_1: str_0, str_1: bool_0, str_0: str_0, str_0: str_0}
        module_args_parser_0 = module_0.ModuleArgsParser(var_0)
        var_1 = module_args_parser_0.parse()
    except BaseException:
        pass