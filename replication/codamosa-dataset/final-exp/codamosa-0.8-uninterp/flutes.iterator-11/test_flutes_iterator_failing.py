# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    try:
        str_0 = 'i'
        lazy_list_0 = module_0.LazyList(str_0)
        bytes_0 = b'\xc01\xf5\x85\xb8\xb6\xd3n\xb7H^\x81S\x9c\x9f\xa4\xa4'
        str_1 = '\t(z4rdN5\t\r]qu2h7n'
        var_0 = module_0.scanr(bytes_0, str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        iterable_0 = None
        lazy_list_0 = module_0.LazyList(iterable_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '\tGQ`\x0c'
        lazy_list_0 = module_0.LazyList(str_0)
        list_0 = [lazy_list_0]
        var_0 = module_0.scanr(str_0, lazy_list_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        range_0 = module_0.Range()
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 0
        tuple_0 = ()
        iterator_0 = module_0.chunk(int_0, tuple_0)
        list_0 = [tuple_0]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 1024
        iterable_0 = None
        iterator_0 = module_0.chunk(int_0, iterable_0)
        int_1 = -701
        str_0 = 'Work in progress'
        iterator_1 = module_0.take(int_1, str_0)
        lazy_list_0 = module_0.LazyList(iterator_1)
        int_2 = 59
        bytes_0 = b'\x90\xf1\xca\xeb.\xb3\xeb\x89\xc5H\xfe\x96'
        iterator_2 = module_0.chunk(int_2, bytes_0)
        map_list_0 = module_0.MapList(lazy_list_0, iterator_2)
        var_0 = map_list_0.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'C\\-)!M'
        bool_0 = True
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
        dict_0 = None
        float_0 = -1773.0
        tuple_0 = (dict_0, float_0)
        lazy_list_0 = module_0.LazyList(tuple_0)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        list_0 = [lazy_list_0, lazy_list_0, float_0, lazy_list_1]
        range_0 = module_0.Range(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -1843
        list_0 = [int_0, int_0]
        range_0 = module_0.Range(*list_0)
        list_1 = [int_0, int_0]
        range_1 = module_0.Range(*list_1)
        int_1 = range_1.__len__()
        iterator_0 = range_1.__iter__()
        var_0 = range_1.__getitem__(iterator_0)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 151
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        iterator_1 = module_0.chunk(int_0, int_0)
        str_0 = '5'
        map_list_0 = module_0.MapList(iterator_1, str_0)
        int_1 = map_list_0.__len__()
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_9():
    try:
        map_list_0 = None
        dict_0 = {}
        lazy_list_0 = module_0.LazyList(dict_0)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_0 = lazy_list_1.__getitem__(map_list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 190
        var_0 = range(int_0)
        iterable_0 = None
        iterator_0 = module_0.take(int_0, iterable_0)
        iterator_1 = module_0.drop_until(int_0, var_0)
        str_0 = 'te'
        str_1 = '170\x0b\r^6cn;hBP6vy'
        map_list_0 = module_0.MapList(str_0, str_1)
        iterator_2 = map_list_0.__iter__()
        var_1 = list(iterator_1)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        int_0 = -4411
        list_0 = [int_0]
        iterator_0 = module_0.chunk(int_0, list_0)
        lazy_list_0 = module_0.LazyList(iterator_0)
        var_0 = lazy_list_0.__getitem__(dict_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\tGQ`\x0c'
        lazy_list_0 = module_0.LazyList(str_0)
        bool_0 = False
        var_0 = lazy_list_0.__getitem__(bool_0)
        var_1 = lazy_list_0.__iter__()
        list_0 = [str_0, lazy_list_0]
        bytes_0 = b'8\xdb'
        var_2 = module_0.scanr(bytes_0, list_0, *list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        map_list_0 = None
        dict_0 = {map_list_0: map_list_0, map_list_0: map_list_0}
        lazy_list_0 = module_0.LazyList(dict_0)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_0 = lazy_list_1.__getitem__(map_list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'A parallel, eager, blocking equivalent of :meth:`map`, with support for additional arguments. The sequential\n        equivalent is:\n\n        .. code:: python\n\n            list(map(lambda x: fn(x, *args, **kwds), iterable))\n\n        Please refer to Python documentation on :py:meth:`multiprocessing.pool.Pool.map` for details.\n        '
        str_1 = 'qMVP'
        str_2 = 'E1\x0bLd2)[aJ.G['
        dict_0 = {str_1: str_1, str_1: str_1, str_2: str_0, str_0: str_2}
        lazy_list_0 = module_0.LazyList(dict_0)
        var_0 = lazy_list_0.__iter__()
        float_0 = -264.22
        var_1 = lazy_list_0.__getitem__(float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        list_0 = [bool_0]
        range_0 = module_0.Range(*list_0)
        complex_0 = None
        var_0 = range_0.__getitem__(complex_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bytes_0 = b'4\xcc\xec\xa7\x85\xd5\xecu'
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        var_0 = module_0.scanr(bytes_0, dict_0)
        int_0 = 151
        map_list_0 = None
        dict_1 = {int_0: int_0}
        lazy_list_0 = module_0.LazyList(dict_1)
        lazy_list_1 = module_0.LazyList(lazy_list_0)
        var_1 = lazy_list_1.__getitem__(map_list_0)
    except BaseException:
        pass

def test_case_17():
    try:
        float_0 = -1664.18262
        bytes_0 = b'{2'
        list_0 = [float_0]
        int_0 = -1091
        list_1 = [bytes_0, bytes_0]
        dict_0 = {int_0: int_0, bytes_0: int_0, int_0: list_1}
        iterator_0 = module_0.drop(int_0, dict_0)
        iterable_0 = None
        bool_0 = False
        iterator_1 = module_0.split_by(iterable_0, bool_0)
        range_0 = module_0.Range(*list_0)
        int_1 = range_0.__next__()
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = 3
        int_1 = 15
        var_0 = range(int_1)
        iterator_0 = module_0.chunk(int_0, var_0)
        var_1 = list(iterator_0)
        int_2 = -1
        var_2 = range(int_1)
        iterator_1 = module_0.chunk(int_2, var_2)
        var_3 = list(iterator_1)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 3
        int_1 = 50
        var_0 = range(int_1)
        iterator_0 = module_0.take(int_0, var_0)
        var_1 = list(iterator_0)
        var_2 = range(int_0)
        var_3 = list(var_2)
        int_2 = 0
        var_4 = range(int_1)
        iterator_1 = module_0.take(int_2, var_4)
        var_5 = list(iterator_1)
        int_3 = -1
        var_6 = range(int_1)
        iterator_2 = module_0.take(int_3, var_6)
        var_7 = list(iterator_2)
    except BaseException:
        pass

def test_case_20():
    try:
        int_0 = 3
        int_1 = 50
        iterator_0 = module_0.take(int_0, int_1)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = None
        iterator_0 = None
        map_list_0 = module_0.MapList(iterator_0, int_0)
        bool_0 = False
        var_0 = map_list_0.__getitem__(bool_0)
    except BaseException:
        pass

def test_case_22():
    try:
        int_0 = 154
        var_0 = range(int_0)
        iterator_0 = module_0.drop_until(int_0, var_0)
        var_1 = list(iterator_0)
    except BaseException:
        pass

def test_case_23():
    try:
        int_0 = 10
        var_0 = range(int_0)
        var_1 = iter(var_0)
        var_2 = list(var_1)
        int_1 = 100
        iterator_0 = module_0.drop(int_1, var_1)
        var_3 = list(iterator_0)
        var_4 = range(int_0)
        var_5 = iter(var_4)
        var_6 = list(var_5)
        int_2 = -1
        iterator_1 = module_0.drop(int_2, var_5)
        var_7 = list(iterator_1)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = 5
        int_1 = 10
        var_0 = range(int_1)
        iterator_0 = module_0.drop(int_0, var_0)
        var_1 = next(iterator_0)
        float_0 = 38.632
        bool_0 = True
        map_list_0 = module_0.MapList(float_0, bool_0)
        int_2 = map_list_0.__len__()
    except BaseException:
        pass

def test_case_25():
    try:
        bool_0 = True
        str_0 = None
        iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
        var_0 = list(iterator_0)
    except BaseException:
        pass

def test_case_26():
    try:
        int_0 = 10
        var_0 = range(int_0)
        lazy_list_0 = module_0.LazyList(var_0)
        iterator_0 = module_0.take(int_0, lazy_list_0)
        int_1 = 5
        iterator_1 = module_0.take(int_1, lazy_list_0)
        var_1 = list(iterator_1)
        iterator_2 = module_0.take(int_1, lazy_list_0)
        var_2 = list(lazy_list_0)
        int_2 = -688
        var_3 = lazy_list_0.__getitem__(int_2)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = False
        int_0 = 676
        list_0 = [bool_0]
        range_0 = module_0.Range(*list_0)
        var_0 = range_0.__getitem__(int_0)
        int_1 = -3256
        iterator_0 = module_0.chunk(int_1, int_0)
        range_1 = module_0.Range()
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = '"26Yq%jM\x0c9~4CG'
        bool_0 = False
        str_1 = None
        iterator_0 = module_0.split_by(str_1, bool_0, criterion=str_0, separator=str_1)
        var_0 = list(iterator_0)
    except BaseException:
        pass