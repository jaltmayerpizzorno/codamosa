# Automatically generated by Pynguin.
import flutes.iterator as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = '\tGQ`\x0c'
    lazy_list_0 = module_0.LazyList(str_0)

def test_case_2():
    str_0 = '\tGQ`\x0c'
    lazy_list_0 = module_0.LazyList(str_0)
    bool_0 = False
    var_0 = lazy_list_0.__getitem__(bool_0)

def test_case_3():
    int_0 = -910
    list_0 = [int_0, int_0, int_0]
    range_0 = module_0.Range(*list_0)
    int_1 = range_0.__len__()
    var_0 = range(int_0)
    iterator_0 = module_0.drop_until(int_0, var_0)
    var_1 = list(iterator_0)

def test_case_4():
    tuple_0 = ()
    int_0 = 1249
    iterable_0 = None
    iterator_0 = module_0.chunk(int_0, iterable_0)
    map_list_0 = module_0.MapList(tuple_0, iterator_0)

def test_case_5():
    str_0 = '\tGQ`\x0c'
    lazy_list_0 = module_0.LazyList(str_0)
    var_0 = lazy_list_0.__iter__()

def test_case_6():
    str_0 = '\tGQ`\x0c'
    lazy_list_0 = module_0.LazyList(str_0)
    bool_0 = True
    var_0 = lazy_list_0.__getitem__(bool_0)

def test_case_7():
    int_0 = 10
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    iterator_0 = module_0.take(int_0, lazy_list_0)
    var_1 = list(var_0)
    iterator_1 = module_0.take(int_0, lazy_list_0)
    var_2 = list(iterator_1)
    int_1 = 30
    iterator_2 = module_0.take(int_1, lazy_list_0)
    var_3 = list(iterator_2)
    iterator_3 = module_0.take(int_1, lazy_list_0)

def test_case_8():
    float_0 = 3770.25548
    list_0 = [float_0]
    range_0 = module_0.Range(*list_0)
    list_1 = None
    int_0 = 0
    iterator_0 = module_0.chunk(int_0, list_1)
    int_1 = range_0.__next__()
    iterator_1 = module_0.split_by(range_0, separator=list_0)

def test_case_9():
    int_0 = 2664
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.chunk(int_0, var_0)
    var_1 = list(iterator_0)
    int_2 = -2062
    var_2 = range(int_1)
    iterator_1 = module_0.chunk(int_2, var_2)
    var_3 = [var_2]
    iterator_2 = module_0.chunk(int_0, var_3)
    var_4 = list(iterator_0)

def test_case_10():
    str_0 = 'A parallel, eager, blocking equivalent of :meth:`map`, with support for additional arguments. The sequentYal\n        equivalent is:\n\n        .. code:: python\n\n            list(map(lambda x: fn(x, *args, **kwds), iterable))\n\n        Please refer to Python documentation on :py:meth:`multiprocessing.pool.Pool.map` for details.\n        '
    bool_0 = True
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
    var_0 = list(iterator_0)

def test_case_11():
    bool_0 = True
    str_0 = '.'
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
    var_0 = list(iterator_0)

def test_case_12():
    str_0 = 'A parallel, eager, blocking equivalent of :meth:`map`, with support for additional arguments. The sequential\n        equivalent is:\n\n        .. code:: python\n\n            list(map(lambda x: fn(x, *args, **kwds), iterable))\n\n        Please refer to Python documentation on :py:meth:`multiprocessing.pool.Pool.map` for details.\n        '
    int_0 = -77
    iterable_0 = None
    iterator_0 = module_0.chunk(int_0, iterable_0)
    bool_0 = True
    str_1 = '.'
    iterator_1 = module_0.split_by(str_0, bool_0, separator=str_1)
    var_0 = list(iterator_1)

def test_case_13():
    bool_0 = False
    str_0 = '.'
    iterator_0 = module_0.split_by(str_0, bool_0, separator=str_0)
    var_0 = list(iterator_0)

def test_case_14():
    int_0 = 10
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    iterator_0 = module_0.take(int_0, lazy_list_0)
    int_1 = 5
    iterator_1 = module_0.take(int_1, lazy_list_0)
    iterator_2 = module_0.take(int_1, lazy_list_0)
    var_1 = module_0.scanl(iterator_2, lazy_list_0)
    var_2 = list(lazy_list_0)
    var_3 = lazy_list_0.__iter__()

def test_case_15():
    int_0 = 5
    int_1 = 10
    var_0 = range(int_1)
    iterator_0 = module_0.drop(int_0, var_0)
    var_1 = next(iterator_0)
    var_2 = next(iterator_0)
    var_3 = next(iterator_0)
    var_4 = next(iterator_0)

def test_case_16():
    int_0 = 76
    iterable_0 = None
    iterator_0 = module_0.take(int_0, iterable_0)

def test_case_17():
    int_0 = 10
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    int_1 = 5
    iterator_0 = module_0.take(int_1, lazy_list_0)
    iterator_1 = module_0.take(int_1, lazy_list_0)
    var_1 = module_0.scanl(iterator_1, lazy_list_0)
    var_2 = list(lazy_list_0)
    var_3 = lazy_list_0.__iter__()
    var_4 = lazy_list_0.__len__()

def test_case_18():
    int_0 = -5972
    var_0 = range(int_0)
    iterator_0 = module_0.drop_until(int_0, var_0)
    var_1 = list(iterator_0)

def test_case_19():
    int_0 = 100
    var_0 = range(int_0)
    lazy_list_0 = module_0.LazyList(var_0)
    int_1 = 0
    var_1 = lazy_list_0[int_1]
    int_2 = 50
    int_3 = 60
    var_2 = lazy_list_0[int_2:int_3]
    var_3 = lazy_list_0[int_2:int_3]
    var_4 = len(var_3)
    int_4 = 30
    var_5 = lazy_list_0[int_4:int_3]
    var_6 = list(var_5)
    var_7 = range(int_4, int_3)
    var_8 = list(var_7)
    int_5 = 45
    var_9 = lazy_list_0[int_5:int_5]
    var_10 = list(var_9)

def test_case_20():
    var_0 = lambda s, x: x + s
    str_0 = 'a'
    str_1 = 'b'
    str_2 = 'c'
    str_3 = 'd'
    str_4 = [str_0, str_1, str_2, str_3]
    var_1 = module_0.scanl(var_0, str_4)
    var_2 = list(var_1)