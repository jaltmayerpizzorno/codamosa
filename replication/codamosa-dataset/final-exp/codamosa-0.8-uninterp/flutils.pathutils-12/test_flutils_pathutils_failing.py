# Automatically generated by Pynguin.
import flutils.pathutils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = "The given 'identifier' must be a 'str'.  Got: %r"
        module_0.chown(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'K\x92Yl\xcfW\xd6\x027IK'
        path_0 = module_0.normalize_path(bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0]
        struct_passwd_0 = module_0.get_os_user()
        str_0 = '/tmp/'
        module_0.path_absent(str_0)
        windows_path_0 = module_1.WindowsPath(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '~/tmp/test_path'
        path_0 = module_0.directory_present(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        struct_group_0 = module_0.get_os_group()
        int_0 = -18
        struct_group_1 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'l]D1)\n^hkk$G4eC:'
        struct_group_0 = module_0.get_os_group(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 8
        struct_group_0 = module_0.get_os_group(int_0)
        str_0 = '/ynguin'
        bool_0 = True
        module_0.chmod(str_0, bool_0)
        module_0.path_absent(str_0)
        struct_passwd_0 = module_0.get_os_user()
        posix_path_0 = module_1.PosixPath()
        path_0 = module_0.directory_present(str_0, int_0)
        module_0.chmod(str_0)
        bytes_0 = b''
        int_1 = 2115
        module_0.chmod(bytes_0, int_0, int_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'S'
        struct_passwd_0 = module_0.get_os_user(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        path_like_0 = None
        struct_passwd_0 = module_0.get_os_user()
        struct_group_0 = module_0.get_os_group()
        list_0 = [path_like_0, struct_passwd_0, path_like_0, bool_0]
        struct_group_1 = module_0.get_os_group(list_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '/tmp/'
        str_1 = 'oo'
        module_0.chown(str_0, str_1)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 70
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '~'
        module_0.path_absent(str_0)
        module_0.chown(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        struct_group_0 = module_0.get_os_group()
        int_0 = 16
        struct_group_1 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        set_0 = set()
        struct_passwd_0 = module_0.get_os_user(set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '/'
        str_1 = module_0.exists_as(str_0)
        str_2 = '/bin'
        str_3 = module_0.exists_as(str_2)
        str_4 = '/tmp'
        str_5 = module_0.exists_as(str_4)
        str_6 = '/etc/hosts'
        str_7 = module_0.exists_as(str_6)
        str_8 = '/dev/random'
        str_9 = module_0.exists_as(str_8)
        str_10 = '/dev/null'
        str_11 = module_0.exists_as(str_10)
        str_12 = '/dev/zero'
        str_13 = module_0.exists_as(str_12)
        str_14 = '/dev/fd'
        str_15 = module_0.exists_as(str_14)
        str_16 = '/dev/fd/'
        str_17 = module_0.exists_as(str_16)
        str_18 = '/dev/fd/2'
        str_19 = module_0.exists_as(str_18)
        struct_passwd_0 = module_0.get_os_user()
        int_0 = -1920
        module_0.chmod(str_6, struct_passwd_0, int_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = '//'
        str_1 = 'foo'
        path_0 = module_0.directory_present(str_0, str_1)
    except BaseException:
        pass