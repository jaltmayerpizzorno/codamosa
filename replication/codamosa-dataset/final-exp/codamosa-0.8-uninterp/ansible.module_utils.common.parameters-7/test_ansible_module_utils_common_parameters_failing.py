# Automatically generated by Pynguin.
import ansible.module_utils.common.parameters as module_0

def test_case_0():
    try:
        bool_0 = False
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
        var_0 = module_0.remove_values(tuple_0, list_0)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = True
        float_0 = 3801.0
        complex_0 = None
        list_0 = [float_0, float_0, complex_0]
        tuple_0 = (float_0, complex_0, list_0)
        bytes_0 = b'q\x1d\x0e\x13"\xde\xeew\xbd\xa7\x9fK:\xd8\x8e)\x99k\xef1'
        list_1 = []
        var_0 = module_0.sanitize_keys(tuple_0, bytes_0, list_1)
        var_1 = module_0.remove_values(bool_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        list_0 = []
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = None
        str_0 = '\n        Return a single named information item from the uname command\n        output data source of the OS distribution.\n\n        For details, see :func:`distro.uname_attr`.\n        '
        var_0 = module_0.set_fallbacks(tuple_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'testXoption'
        str_1 = 'type'
        str_2 = 'test_with_default'
        str_3 = 'default'
        str_4 = 'test_default'
        str_5 = {str_1: str_3, str_3: str_4}
        str_6 = {str_2: str_5, str_0: str_0}
        var_0 = {}
        var_1 = module_0.set_fallbacks(str_6, var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = "'%s'"
        list_0 = [str_0]
        var_0 = module_0.env_fallback(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'HHdre\\lzVX>B'
        bytes_0 = None
        int_0 = -2293
        set_0 = {int_0, bytes_0}
        var_0 = module_0.remove_values(set_0, str_0)
        var_1 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Return value from environment varible if set'
        set_0 = {str_0}
        var_0 = module_0.remove_values(set_0, str_0)
        bytes_0 = b''
        complex_0 = None
        var_1 = module_0.set_fallbacks(bytes_0, complex_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'K%&GowGY[w:'
        str_1 = 'HHdre\\lzVX>B'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1}
        set_0 = {str_1}
        str_2 = 'PQ ^$9Zy,MXjTf'
        var_0 = module_0.remove_values(set_0, str_2)
        bool_0 = True
        tuple_0 = ()
        list_0 = [tuple_0, tuple_0, bool_0, tuple_0]
        var_1 = module_0.remove_values(tuple_0, list_0)
        list_1 = [var_1, dict_0, bool_0, str_1, var_1]
        var_2 = module_0.sanitize_keys(list_1, list_1)
        bytes_0 = None
        dict_1 = {bool_0: str_0}
        var_3 = module_0.sanitize_keys(list_1, dict_1, str_1)
        set_1 = set()
        var_4 = module_0.remove_values(bytes_0, set_1)
        var_5 = module_0.env_fallback()
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = {}
        var_1 = module_0.set_fallbacks(var_0, var_0)
        var_2 = set()
        var_3 = {}
        str_0 = 'foo'
        var_4 = {}
        var_5 = {str_0: var_4}
        var_6 = module_0.set_fallbacks(var_5, var_3)
        var_7 = set()
        var_8 = {}
        str_1 = 'fallback'
        str_2 = {str_1: str_1}
        str_3 = {str_0: str_2}
        var_9 = module_0.set_fallbacks(str_3, var_8)
    except BaseException:
        pass

def test_case_10():
    try:
        var_0 = {}
        var_1 = {}
        str_0 = 'foo'
        var_2 = {str_0: var_0}
        var_3 = module_0.set_fallbacks(var_2, var_1)
        var_4 = set()
        str_1 = 'fallback'
        var_5 = module_0.set_fallbacks(str_1, var_4)
    except BaseException:
        pass