# Automatically generated by Pynguin.
import pymonet.maybe as module_0
import builtins as module_1

def test_case_0():
    pass

def test_case_1():
    bool_0 = True
    maybe_0 = module_0.Maybe(bool_0, bool_0)
    var_0 = maybe_0.to_box()

def test_case_2():
    complex_0 = None
    bool_0 = None
    maybe_0 = module_0.Maybe(complex_0, bool_0)

def test_case_3():
    object_0 = module_1.object()
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)

def test_case_4():
    object_0 = None
    int_0 = 235
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    float_0 = 232.253538
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.to_lazy()
    bool_2 = True
    maybe_1 = module_0.Maybe(float_0, bool_2)
    var_2 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(int_0, bool_0)
    var_3 = maybe_1.to_validation()
    callable_0 = None
    var_4 = maybe_1.bind(callable_0)
    bool_3 = maybe_2.__eq__(object_0)

def test_case_5():
    object_0 = None
    int_0 = 235
    bool_0 = True
    bool_1 = True
    maybe_0 = module_0.Maybe(bool_1, bool_1)
    float_0 = 232.253538
    var_0 = maybe_0.map(maybe_0)
    var_1 = maybe_0.to_lazy()
    tuple_0 = ()
    var_2 = maybe_0.ap(tuple_0)
    bool_2 = True
    maybe_1 = module_0.Maybe(float_0, bool_2)
    var_3 = maybe_1.to_try()
    maybe_2 = module_0.Maybe(int_0, bool_0)
    var_4 = maybe_1.to_validation()
    bool_3 = maybe_2.__eq__(object_0)

def test_case_6():
    dict_0 = {}
    callable_0 = None
    object_0 = module_1.object(**dict_0)
    bool_0 = True
    maybe_0 = module_0.Maybe(object_0, bool_0)
    bool_1 = maybe_0.__eq__(object_0)
    var_0 = maybe_0.map(callable_0)
    bool_2 = False
    var_1 = maybe_0.to_try()
    var_2 = maybe_0.to_lazy()
    list_0 = []
    maybe_1 = module_0.Maybe(list_0, bool_0)
    var_3 = maybe_1.to_lazy()
    var_4 = maybe_1.to_lazy()
    bool_3 = False
    maybe_2 = module_0.Maybe(maybe_0, bool_3)
    list_1 = []
    var_5 = maybe_1.get_or_else(object_0)
    var_6 = maybe_0.bind(list_1)
    maybe_3 = module_0.Maybe(dict_0, bool_2)
    var_7 = maybe_3.to_lazy()

def test_case_7():
    str_0 = '\n    All is a Monoid that will combine 2 values of any type using logical conjunction on their coerced Boolean values.\n    '
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
    list_0 = [str_0]
    list_1 = [str_0, list_0, str_0]
    tuple_0 = (dict_0, dict_0, list_0, list_1)
    bool_0 = False
    maybe_0 = module_0.Maybe(tuple_0, bool_0)
    maybe_1 = module_0.Maybe(maybe_0, bool_0)
    var_0 = maybe_1.to_validation()
    bool_1 = False
    maybe_2 = module_0.Maybe(str_0, bool_1)
    var_1 = maybe_2.to_either()
    var_2 = None
    var_3 = maybe_2.get_or_else(var_2)

def test_case_8():
    set_0 = set()
    object_0 = module_1.object()
    list_0 = [set_0, object_0]
    bool_0 = False
    maybe_0 = module_0.Maybe(list_0, bool_0)
    str_0 = 'W'
    bool_1 = False
    object_1 = module_1.object()
    maybe_1 = module_0.Maybe(object_1, bool_1)
    var_0 = maybe_1.to_lazy()
    bool_2 = maybe_1.__eq__(object_1)
    maybe_2 = module_0.Maybe(str_0, bool_1)
    var_1 = None
    var_2 = maybe_1.get_or_else(var_1)
    var_3 = maybe_2.to_box()

def test_case_9():
    str_0 = 'f,`(nB|Zg$jL,,'
    str_1 = 'BgZ'
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
    complex_0 = None
    bool_0 = True
    maybe_0 = module_0.Maybe(complex_0, bool_0)
    list_0 = [dict_0, complex_0, str_0, maybe_0]
    tuple_0 = (dict_0, maybe_0, list_0, maybe_0)
    bool_1 = False
    maybe_1 = module_0.Maybe(tuple_0, bool_1)
    var_0 = maybe_1.to_lazy()

def test_case_10():
    str_0 = '?v\x0bm#Ufos'
    bool_0 = True
    maybe_0 = module_0.Maybe(str_0, bool_0)
    var_0 = maybe_0.to_try()

def test_case_11():
    object_0 = module_1.object()
    int_0 = True
    bool_0 = False
    maybe_0 = module_0.Maybe(int_0, bool_0)
    var_0 = maybe_0.to_validation()
    bool_1 = maybe_0.__eq__(object_0)

def test_case_12():
    object_0 = None
    int_0 = 235
    bool_0 = True
    float_0 = 231.32860783595277
    bool_1 = True
    maybe_0 = module_0.Maybe(float_0, bool_1)
    var_0 = maybe_0.to_try()
    maybe_1 = module_0.Maybe(int_0, bool_0)
    var_1 = maybe_0.to_validation()
    bool_2 = maybe_1.__eq__(object_0)