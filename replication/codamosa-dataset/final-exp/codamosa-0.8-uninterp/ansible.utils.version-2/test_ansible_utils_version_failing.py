# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        str_0 = ',v#!\\1;y<Y8\\Z'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__le__(semantic_version_0)
        float_0 = -116.65577761259352
        alpha_1 = module_0._Alpha(float_0)
        semantic_version_1 = module_0.SemanticVersion()
        str_1 = '&;9RQw'
        semantic_version_2 = module_0.SemanticVersion(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        float_0 = -69.747547
        alpha_0 = module_0._Alpha(float_0)
        str_0 = '""&\'iPfL\x0ba/I^x+'
        var_0 = alpha_0.__ne__(str_0)
        numeric_0 = module_0._Numeric(alpha_0)
    except BaseException:
        pass

def test_case_2():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        semantic_version_1 = module_0.SemanticVersion()
        var_0 = semantic_version_1.__le__(semantic_version_0)
        semantic_version_2 = module_0.SemanticVersion()
        tuple_0 = None
        bytes_0 = b'\xa69\x1d\x11b\x02'
        alpha_0 = module_0._Alpha(bytes_0)
        var_1 = alpha_0.__ne__(tuple_0)
        str_0 = '&;9RQw'
        semantic_version_3 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        list_0 = []
        alpha_0 = module_0._Alpha(list_0)
        set_0 = set()
        alpha_1 = module_0._Alpha(set_0)
        alpha_2 = module_0._Alpha(alpha_1)
        var_0 = alpha_2.__eq__(alpha_0)
        bytes_0 = b'\x1a\xd4\xc9>\x1a\xf4\x16 \xbdA3!W'
        numeric_0 = module_0._Numeric(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'\x08\xd2-\xcf'
        bool_0 = True
        alpha_0 = module_0._Alpha(bool_0)
        var_0 = alpha_0.__ge__(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -1845.46577
        alpha_0 = module_0._Alpha(float_0)
        str_0 = '56]t%^`@oNPg'
        alpha_1 = module_0._Alpha(str_0)
        var_0 = alpha_1.__ge__(alpha_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '_\x0c\tcL>sJ+'
        dict_0 = {}
        alpha_0 = module_0._Alpha(dict_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_0 = alpha_1.__repr__()
        str_1 = 'Y"[.!~sv'
        list_0 = [str_0, str_0, str_0]
        alpha_2 = module_0._Alpha(list_0)
        var_1 = alpha_2.__ge__(str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = False
        alpha_0 = module_0._Alpha(bool_0)
        int_0 = 512
        var_0 = alpha_0.__le__(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        complex_0 = None
        alpha_0 = module_0._Alpha(complex_0)
        bytes_0 = b'oc\x15'
        var_0 = alpha_0.__gt__(bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'shell_plugins'
        numeric_0 = module_0._Numeric(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        numeric_0 = None
        tuple_0 = (numeric_0,)
        int_0 = 3711
        numeric_1 = module_0._Numeric(int_0)
        var_0 = numeric_1.__ne__(tuple_0)
        bool_0 = False
        numeric_2 = module_0._Numeric(bool_0)
        bytes_0 = b'U;n\xf36\xfc\t;\x12]\x8e\xa7'
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__lt__(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'LGR.@s'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__lt__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ']PUi!)2qZ#b\nV$'
        semantic_version_0 = module_0.SemanticVersion()
        bytes_0 = b'\\\x03\x12'
        var_0 = semantic_version_0.__repr__()
        alpha_0 = module_0._Alpha(bytes_0)
        set_0 = {str_0}
        alpha_1 = module_0._Alpha(set_0)
        numeric_0 = module_0._Numeric(set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        loose_version_0 = module_1.LooseVersion()
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_14():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__le__(semantic_version_0)
        float_0 = 2709.949
        var_1 = semantic_version_0.from_loose_version(float_0)
    except BaseException:
        pass

def test_case_15():
    try:
        dict_0 = {}
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__ne__(dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        tuple_0 = ()
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__le__(tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '1.2.3.beta'
        loose_version_0 = module_1.LooseVersion(str_0)
        bool_0 = True
        numeric_0 = module_0._Numeric(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(numeric_0)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -3534
        numeric_0 = module_0._Numeric(int_0)
        var_0 = numeric_0.__repr__()
        var_1 = numeric_0.__repr__()
        str_0 = '"&V"E'
        var_2 = numeric_0.__gt__(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__gt__(bool_0)
        int_0 = -213
        set_0 = {int_0, int_0, int_0}
        float_0 = -1845.46577
        var_1 = numeric_0.__ne__(float_0)
        semantic_version_1 = module_0.SemanticVersion()
        str_0 = 'jM9Z\x0b!_'
        alpha_0 = module_0._Alpha(str_0)
        var_2 = alpha_0.__gt__(set_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bytes_0 = b'?\x8eQ\xa2\xec%Z\xb2\xa6\xdd'
        alpha_0 = module_0._Alpha(bytes_0)
        int_0 = -1549
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__ge__(int_0)
        int_1 = -3534
        numeric_1 = module_0._Numeric(int_1)
        var_1 = numeric_1.__repr__()
        var_2 = numeric_1.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        list_0 = [var_2, var_1]
        int_2 = None
        tuple_0 = (semantic_version_0, list_0, int_2)
        var_3 = numeric_1.__lt__(tuple_0)
    except BaseException:
        pass

def test_case_21():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__le__(semantic_version_0)
        float_0 = -104.88
        alpha_0 = module_0._Alpha(float_0)
        int_0 = 1034
        numeric_0 = module_0._Numeric(int_0)
        var_1 = numeric_0.__gt__(alpha_0)
        str_0 = '8xoM"|k5FF\x0c];R(9Y'
        semantic_version_1 = module_0.SemanticVersion()
        semantic_version_2 = module_0.SemanticVersion(str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        float_0 = 866.0
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(float_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = ',v#!\\1;y<Y8\\Z'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__lt__(alpha_0)
        var_1 = alpha_0.__gt__(str_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_2 = semantic_version_0.__le__(semantic_version_0)
        int_0 = 50
        var_3 = semantic_version_0.from_loose_version(int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = ',v#!\\1;y<Y8\\Z'
        alpha_0 = module_0._Alpha(str_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__le__(semantic_version_0)
        int_0 = 1034
        numeric_0 = module_0._Numeric(int_0)
        var_1 = alpha_0.__ge__(numeric_0)
        var_2 = numeric_0.__gt__(alpha_0)
        int_1 = 50
        var_3 = numeric_0.__eq__(var_2)
        var_4 = semantic_version_0.from_loose_version(int_1)
    except BaseException:
        pass

def test_case_25():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = ',v#!\\1;y<Y8\\Z'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__repr__()
        str_1 = ''
        var_1 = alpha_0.__lt__(alpha_0)
        var_2 = alpha_0.__gt__(str_1)
        semantic_version_1 = module_0.SemanticVersion()
        var_3 = semantic_version_1.__le__(semantic_version_1)
        int_0 = 1034
        str_2 = '^\r({i'
        var_4 = alpha_0.__gt__(str_2)
        numeric_0 = module_0._Numeric(int_0)
        var_5 = numeric_0.__gt__(alpha_0)
        int_1 = 50
        var_6 = semantic_version_1.from_loose_version(int_1)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = ',v#!\\1;y<Y8\\Z'
        alpha_0 = module_0._Alpha(str_0)
        var_0 = alpha_0.__repr__()
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__le__(semantic_version_0)
        int_0 = 1034
        numeric_0 = module_0._Numeric(int_0)
        var_2 = numeric_0.__gt__(alpha_0)
        var_3 = numeric_0.__gt__(numeric_0)
        int_1 = 50
        var_4 = numeric_0.__eq__(var_0)
        tuple_0 = ()
        var_5 = numeric_0.__ne__(tuple_0)
        var_6 = semantic_version_0.from_loose_version(int_1)
    except BaseException:
        pass