# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.fields as module_1

def test_case_0():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        str_0 = 'grd84jZ}vu'
        int_0 = schema_definitions_0.__len__()
        list_0 = [int_0]
        schema_0 = module_0.Schema(*list_0)
        any_0 = schema_definitions_0.__getitem__(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        iterator_0 = schema_definitions_0.__iter__()
        tuple_0 = (iterator_0,)
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(tuple_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '#Y+\tsZC.Sa;'
        str_1 = 'ignore'
        dict_0 = {str_0: str_0, str_1: str_1}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_0.__delitem__(str_0)
        schema_definitions_1 = module_0.SchemaDefinitions()
        int_0 = schema_definitions_1.__len__()
        iterator_0 = schema_definitions_1.__iter__()
        schema_definitions_1.__delitem__(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '8Cal/p|'
        str_1 = 'bg@yyKL[^!$&i'
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_1: str_1}
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(dict_0)
        schema_1 = module_0.Schema(**dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = None
        str_0 = 'vHfZ\x0b'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        schema_0 = module_0.Schema()
        str_0 = ''
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.validate(schema_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '+'
        schema_0 = module_0.Schema()
        bool_0 = schema_0.__eq__(schema_0)
        iterator_0 = schema_0.__iter__()
        list_0 = [str_0, str_0]
        schema_1 = module_0.Schema(*list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        schema_definitions_0 = module_0.SchemaDefinitions()
        schema_0 = module_0.Schema()
        any_0 = schema_0.__getitem__(schema_definitions_0)
    except BaseException:
        pass

def test_case_8():
    try:
        schema_0 = module_0.Schema()
        schema_1 = module_0.Schema()
        str_0 = schema_1.__repr__()
        float_0 = -215.639545
        field_0 = module_1.Field(default=float_0)
        str_1 = 'UJ.Mz\\k&(+WKlh!7#N'
        str_2 = '@u\x0cUw7`dI \nN&}T4'
        str_3 = '3F\n3#l}"k^4;}Tj`7>('
        dict_0 = {str_1: str_1, str_2: field_0, str_3: str_1}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_0)
        schema_definitions_0.__setitem__(str_3, schema_0)
    except BaseException:
        pass

def test_case_9():
    try:
        schema_0 = module_0.Schema()
        int_0 = schema_0.__len__()
        type_0 = None
        reference_0 = module_0.Reference(type_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'H}QfUh=0."c^EO'
        list_0 = [str_0]
        str_1 = 'n,8 '
        dict_0 = {str_0: str_1}
        schema_0 = module_0.Schema(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        complex_0 = None
        str_0 = ']y'
        reference_0 = module_0.Reference(str_0)
        any_0 = reference_0.serialize(complex_0)
        schema_0 = module_0.Schema()
        any_1 = schema_0.__getitem__(complex_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'Bob'
        list_0 = []
        reference_0 = module_0.Reference(str_0, list_0)
        any_0 = reference_0.validate(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'child'
        reference_0 = module_0.Reference(str_0)
        array_0 = module_1.Array(reference_0)
        array_1 = module_1.Array(array_0)
        var_0 = {str_0: reference_0, str_0: array_1, str_0: array_1}
        object_0 = module_1.Object(properties=var_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(object_0, schema_definitions_0)
        var_1 = object_0.properties[str_0]
        var_2 = reference_0.items.items
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'ref'
        str_1 = 'nested_nested_ref'
        str_2 = 'child'
        reference_0 = module_0.Reference(str_2)
        array_0 = module_1.Array(reference_0)
        array_1 = module_1.Array(array_0)
        var_0 = {str_0: reference_0, str_2: array_1, str_1: array_1}
        object_0 = module_1.Object(properties=var_0)
        schema_definitions_0 = module_0.SchemaDefinitions()
        module_0.set_definitions(object_0, schema_definitions_0)
        var_1 = object_0.properties[str_0]
        var_2 = object_0.properties[str_2]
        var_3 = reference_0.items.items
    except BaseException:
        pass