# Automatically generated by Pynguin.
import ansible.plugins.lookup.sequence as module_0

def test_case_0():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '5-8'
        var_0 = lookup_module_0.run(str_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = -2168
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.parse_kv_args(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'f8'
        var_0 = lookup_module_0.run(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 1.0
        lookup_module_0 = module_0.LookupModule(float_0)
        var_0 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_4():
    try:
        lookup_module_0 = module_0.LookupModule()
        int_0 = 82
        list_0 = [int_0]
        str_0 = None
        var_0 = lookup_module_0.run(list_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'start=3 end=5'
        str_1 = 'start=3 end=5 format=test%02d count=2'
        str_2 = 'start=3 end=3'
        str_3 = ''
        str_4 = 'start=3 end=3 format=test%02d count=2'
        str_5 = 'start=4 end=4'
        str_6 = 'start=4 end=4 format=test%02d count=2'
        str_7 = [str_0, str_4, str_1, str_2, str_3, str_4, str_5, str_4, str_6]
        var_0 = lookup_module_0.run(str_7, str_3)
    except BaseException:
        pass

def test_case_6():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        var_1 = lookup_module_0.sanity_check()
    except BaseException:
        pass

def test_case_7():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = lookup_module_0.reset()
        str_0 = 'start'
        str_1 = 'end'
        str_2 = 'stride'
        str_3 = 'format'
        str_4 = '$'
        str_5 = '7'
        str_6 = '2'
        str_7 = '%02x'
        str_8 = {str_0: str_4, str_1: str_5, str_2: str_6, str_3: str_7}
        var_1 = lookup_module_0.parse_kv_args(str_8)
    except BaseException:
        pass

def test_case_8():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'D'
        str_1 = '10/2'
        var_0 = lookup_module_0.run(str_1, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = '2-0/C'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = b'PKaY'
        var_0 = lookup_module_0.run(dict_0, bytes_0)
    except BaseException:
        pass

def test_case_10():
    try:
        lookup_module_0 = module_0.LookupModule()
        str_0 = 'start=1 count=1'
        str_1 = 'end=1 count=2'
        str_2 = 'start=1 count=1 stride=2'
        str_3 = 'start=2 count=4 stride=-2'
        str_4 = 'end=1 count=1 stride=-2'
        str_5 = 'end=2 count=4 stride=2'
        str_6 = [str_0, str_5, str_2, str_5, str_1, str_1, str_2, str_3, str_4, str_5, str_2, str_4]
        var_0 = {}
        var_1 = lookup_module_0.run(str_6, var_0)
    except BaseException:
        pass

def test_case_11():
    try:
        lookup_module_0 = module_0.LookupModule()
        var_0 = {}
        var_1 = lookup_module_0.run(var_0, var_0)
        str_0 = 'start=5 end=11 stride=2 format=0x%02x'
        str_1 = [str_0]
        var_2 = {}
        var_3 = lookup_module_0.run(str_1, var_2)
        str_2 = 'start=-3 end=-1 stride=-1 format=%04x'
        str_3 = [str_2]
        var_4 = lookup_module_0.run(str_3, var_3)
    except BaseException:
        pass