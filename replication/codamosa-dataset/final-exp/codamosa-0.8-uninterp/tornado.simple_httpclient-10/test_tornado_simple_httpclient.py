# Automatically generated by Pynguin.
import tornado.simple_httpclient as module_0
import tornado.ioloop as module_1
import tornado.httpclient as module_2
import concurrent.futures._base as module_3
import tornado.httputil as module_4
import tornado.netutil as module_5
import tornado.tcpclient as module_6

def test_case_0():
    pass

def test_case_1():
    str_0 = '\n-`{C2MOWPoJn\rgs'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)

def test_case_2():
    str_0 = '$h,cyQQX%,'
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = h_t_t_p_timeout_error_0.__str__()

def test_case_3():
    str_0 = '(\t'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)

def test_case_4():
    str_0 = '(\t'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_5():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    str_0 = 'k~}C@{y&$:TA'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = 'http://www.tornadoweb.org/enrstable/'
    str_2 = h_t_t_p_timeout_error_0.__str__()
    float_0 = 0.1
    str_3 = '>'
    bool_0 = True
    tuple_0 = ()
    dict_0 = {}
    int_0 = -2700
    h_t_t_p_request_0 = module_2.HTTPRequest(str_2, str_1, tuple_0, str_2, str_3, float_0, float_0, bool_0, str_0, dict_0, int_0, str_0, str_0, i_o_loop_0)
    callable_0 = None
    simple_async_h_t_t_p_client_0.fetch_impl(h_t_t_p_request_0, callable_0)
    h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_0)

def test_case_6():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()

def test_case_7():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    var_0 = simple_async_h_t_t_p_client_0.io_loop
    int_0 = -2612
    future_0 = module_3.Future()
    simple_async_h_t_t_p_client_0.initialize(int_0, future_0, int_0)

def test_case_8():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    str_0 = '4A(Dz=i-V6]O#\r['
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = h_t_t_p_timeout_error_0.__str__()
    simple_async_h_t_t_p_client_0.close()

def test_case_9():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    int_0 = -1419
    dict_0 = {}
    simple_async_h_t_t_p_client_0.initialize(int_0, int_0, dict_0, int_0)
    str_0 = '4A(Dz=i-6]O#\r['
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_0)
    str_1 = h_t_t_p_timeout_error_0.__str__()
    simple_async_h_t_t_p_client_0.close()
    str_2 = 'Ps$04lDR$~if.\x0b&!7.'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_2)
    str_3 = h_t_t_p_stream_closed_error_0.__str__()

def test_case_10():
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    str_0 = 'k~}C@{y&$:TA'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    str_1 = '4A(Dz=i-6]O#\r['
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_1)
    str_2 = 'http://www.tornadoweb.org/enrstable/'
    str_3 = h_t_t_p_timeout_error_0.__str__()
    float_0 = 0.1
    str_4 = ''
    str_5 = '>'
    bytes_0 = b'BzW\x1a'
    str_6 = "Q|67W!C!%'^.\x0b/2!"
    h_t_t_p_headers_0 = module_4.HTTPHeaders()
    h_t_t_p_headers_1 = h_t_t_p_headers_0.copy()
    int_0 = -37
    bool_0 = False
    set_0 = set()
    h_t_t_p_request_0 = module_2.HTTPRequest(str_6, float_0, str_4, str_5, str_2, float_0, float_0, h_t_t_p_headers_1, int_0, bool_0, str_6, bool_0, str_5, set_0)
    str_7 = '+/\\E]_'
    dict_0 = {str_6: str_7}
    resolver_0 = module_5.Resolver()
    t_c_p_client_0 = module_6.TCPClient(resolver_0)
    int_1 = 10
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, h_t_t_p_stream_closed_error_0, dict_0, int_0, t_c_p_client_0, int_0, int_1)
    h_t_t_p_connection_0.data_received(bytes_0)
    i_o_loop_0.make_current()

def test_case_11():
    str_0 = '__mai}on__'
    h_t_t_p_stream_closed_error_0 = module_0.HTTPStreamClosedError(str_0)
    i_o_loop_0 = module_1.IOLoop()
    simple_async_h_t_t_p_client_0 = module_0.SimpleAsyncHTTPClient()
    str_1 = 'k~}C@{y&$:TA'
    h_t_t_p_stream_closed_error_1 = module_0.HTTPStreamClosedError(str_1)
    str_2 = '4A(Dz=i-6]O#\r['
    h_t_t_p_timeout_error_0 = module_0.HTTPTimeoutError(str_2)
    str_3 = h_t_t_p_timeout_error_0.__str__()
    float_0 = 0.1
    str_4 = ''
    str_5 = '>'
    bytes_0 = b'BzW\x1a'
    float_1 = 1351.34815
    h_t_t_p_headers_0 = module_4.HTTPHeaders()
    h_t_t_p_headers_1 = h_t_t_p_headers_0.copy()
    int_0 = -37
    bool_0 = False
    set_0 = set()
    h_t_t_p_request_0 = module_2.HTTPRequest(str_4, float_1, str_4, str_5, str_0, float_1, float_0, h_t_t_p_headers_1, int_0, bool_0, str_4, bool_0, str_5, set_0)
    str_6 = '+/\\E]_'
    dict_0 = {str_0: str_6}
    resolver_0 = module_5.Resolver()
    t_c_p_client_0 = module_6.TCPClient(resolver_0)
    int_1 = 10
    h_t_t_p_connection_0 = module_0._HTTPConnection(simple_async_h_t_t_p_client_0, h_t_t_p_request_0, h_t_t_p_stream_closed_error_1, dict_0, int_0, t_c_p_client_0, int_0, int_1)
    h_t_t_p_connection_0.data_received(bytes_0)
    i_o_loop_0.make_current()
    str_7 = h_t_t_p_stream_closed_error_0.__str__()
    str_8 = h_t_t_p_stream_closed_error_0.__str__()