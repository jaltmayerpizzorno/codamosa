# Automatically generated by Pynguin.
import sanic.utils as module_0
import pathlib as module_1

def test_case_0():
    try:
        str_0 = 'transport'
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        bool_0 = module_0.str_to_bool(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '$z5~D q#2Epn-v-\x0b'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'M^&I1s*nqB'
        dict_0 = {str_0: str_0}
        var_0 = module_0.load_module_from_file_location(str_0, **dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b"h'\x8a\xbe\xf29=J\x15\xbbm\x929\xff"
        var_0 = module_0.load_module_from_file_location(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'tests/config_for_unit_testing.py'
        var_0 = module_0.load_module_from_file_location(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        path_0 = module_1.Path()
        var_0 = module_0.load_module_from_file_location(path_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'J7.\r-\\%z'
        list_0 = [str_0]
        dict_0 = {str_0: list_0}
        var_0 = module_0.load_module_from_file_location(str_0, **dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '0'
        bool_0 = module_0.str_to_bool(str_0)
        path_0 = module_1.Path()
        list_0 = [str_0, path_0, str_0]
        dict_0 = {str_0: list_0, str_0: list_0}
        var_0 = module_0.load_module_from_file_location(path_0, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\n        Add an API URL under the **PUT** *HTTP* method\n\n        :param uri: URL to be tagged to **PUT** method of *HTTP*\n        :param host: Host IP or FQDN for the service to use\n        :param strict_slashes: Instruct :class:`Sanic` to check if the request\n            URLs need to terminate with a */*\n        :param version: API Version\n        :param name: Unique name that can be used to identify the Route\n        :return: Object decorated with :func:`route` method\n        '
        str_1 = 'y'
        bool_0 = module_0.str_to_bool(str_1)
        var_0 = module_0.load_module_from_file_location(str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\n        Update app.config.\n\n        .. note::\n\n            Only upper case settings are considered\n\n        You can upload app config by providing path to py file\n        holding settings.\n\n        .. code-block:: python\n\n            # /some/py/file\n            A = 1\n            B = 2\n\n        .. code-block:: python\n\n            config.update_config("${some}/py/file")\n\n        Yes you can put environment variable here, but they must be provided\n        in format: ``${some_env_var}``, and mark that ``$some_env_var`` is\n        treated as plain string.\n\n        You can upload app config by providing dict holding settings.\n\n        .. code-block:: python\n\n            d = {"A": 1, "B": 2}\n            config.update_config(d)\n\n        You can upload app config by providing any object holding settings,\n        but in such case config.__dict__ will be used as dict holding settings.\n\n        .. code-block:: python\n\n            class C:\n                A = 1\n                B = 2\n\n            config.update_config(C)\n\n        `See user guide re: config\n        <https://sanicframework.org/guide/deployment/configuration.html>`__\n        '
        list_0 = [str_0, str_0]
        var_0 = module_0.load_module_from_file_location(str_0, *list_0)
    except BaseException:
        pass