# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0
import ansible.parsing.yaml.dumper as module_1
import ansible.template as module_2
import ansible.vars.manager as module_3
import ansible.utils.unsafe_proxy as module_4

def test_case_0():
    pass

def test_case_1():
    dict_0 = None
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
    bytes_0 = b'D\x10L#\xdd\x9b\x80\xc5\xbe$'
    ansible_dumper_0 = module_1.AnsibleDumper(ansible_vault_encrypted_unicode_0, bytes_0)
    ansible_undefined_0 = module_2.AnsibleUndefined()
    vars_with_sources_0 = module_3.VarsWithSources()
    var_0 = ansible_dumper_0.represent_data(vars_with_sources_0)

def test_case_2():
    bool_0 = False
    str_0 = "t'!KL.v`ct\x0b7=4"
    str_1 = ';M'
    dict_0 = {str_1: bool_0}
    dict_1 = None
    float_0 = -3401.331
    ansible_dumper_0 = module_1.AnsibleDumper(bool_0, str_0, dict_0, dict_1, float_0)
    ansible_undefined_0 = module_2.AnsibleUndefined(str_0)
    host_vars_0 = None
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(host_vars_0)
    var_0 = ansible_dumper_0.represent_data(ansible_vault_encrypted_unicode_0)

def test_case_3():
    dict_0 = None
    ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
    bytes_0 = b'D\x10L#\xdd\x9b\x80\xc5\xbe$'
    ansible_dumper_0 = module_1.AnsibleDumper(ansible_vault_encrypted_unicode_0, bytes_0)
    ansible_undefined_0 = module_2.AnsibleUndefined()
    vars_with_sources_0 = module_3.VarsWithSources()
    ansible_unicode_0 = module_0.AnsibleUnicode()
    var_0 = vars_with_sources_0.__setitem__(ansible_unicode_0, vars_with_sources_0)
    var_1 = vars_with_sources_0.__iter__()
    var_2 = ansible_dumper_0.represent_data(vars_with_sources_0)

def test_case_4():
    str_0 = '\\pGs[lu\x0c'
    ansible_unsafe_bytes_0 = module_4.AnsibleUnsafeBytes()
    int_0 = -854
    str_1 = 'policy_rc_d'
    ansible_mapping_0 = module_0.AnsibleMapping()
    str_2 = 'TG"#?VX'
    dict_0 = {str_1: str_0, str_0: str_1, str_2: str_2, str_0: int_0}
    bool_0 = True
    ansible_dumper_0 = module_1.AnsibleDumper(int_0, str_1, ansible_mapping_0, dict_0, bool_0)
    var_0 = ansible_dumper_0.represent_data(ansible_unsafe_bytes_0)