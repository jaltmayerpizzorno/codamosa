# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.transformers.return_from_generator as module_1

def test_case_0():
    pass

def test_case_1():
    bytes_0 = b'\xfd3\xee\xed\x1b'
    list_0 = [bytes_0, bytes_0, bytes_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    a_s_t_0 = module_0.AST()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)

def test_case_2():
    bytes_0 = b''
    list_0 = [bytes_0, bytes_0, bytes_0]
    function_def_0 = module_0.FunctionDef(*list_0)
    a_s_t_0 = module_0.AST()
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    function_def_1 = return_from_generator_transformer_0.visit_FunctionDef(function_def_0)

def test_case_3():
    float_0 = None
    list_0 = []
    list_1 = [float_0, list_0, float_0]
    function_def_0 = module_0.FunctionDef(*list_1)
    set_0 = {function_def_0, function_def_0}
    list_2 = [set_0, list_0, set_0]
    function_def_1 = module_0.FunctionDef(*list_2)
    str_0 = '`b,<!.EQ'
    str_1 = 'dr\t$qvdOS5J.f'
    dict_0 = {str_0: str_0, str_1: str_0, str_1: str_0}
    a_s_t_0 = module_0.AST(**dict_0)
    return_from_generator_transformer_0 = module_1.ReturnFromGeneratorTransformer(a_s_t_0)
    function_def_2 = return_from_generator_transformer_0.visit_FunctionDef(function_def_1)
    bytes_0 = b'\xfd\xee\x05\xed\x1b'
    list_3 = [bytes_0, bytes_0, bytes_0, bytes_0]
    function_def_3 = module_0.FunctionDef(*list_3)
    a_s_t_1 = module_0.AST()
    return_from_generator_transformer_1 = module_1.ReturnFromGeneratorTransformer(a_s_t_1)
    function_def_4 = return_from_generator_transformer_1.visit_FunctionDef(function_def_3)