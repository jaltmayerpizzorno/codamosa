# Automatically generated by Pynguin.
import tornado.util as module_0
import builtins as module_1

def test_case_0():
    try:
        object_dict_0 = module_0.ObjectDict()
        var_0 = object_dict_0.nonexistent
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "'X>dI\tI|TI-z7tu"
        gzip_decompressor_0 = module_0.GzipDecompressor()
        arg_replacer_0 = module_0.ArgReplacer(gzip_decompressor_0, str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = b'\xf5\xa5\x9ebo c(r\x90\xf8m|\x99\x8a\x1c\x07\x96'
        bytes_1 = gzip_decompressor_0.decompress(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '_Mockable'
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        list_0 = []
        object_dict_0 = module_0.ObjectDict(*list_0)
        any_0 = object_dict_0.__getattr__(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'tornado.misig_moRule'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        str_0 = '@tX)O'
        str_1 = '0'
        str_2 = '`R'
        dict_0 = {str_0: bytes_0, str_2: str_1}
        module_0.exec_in(gzip_decompressor_0, dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_0.doctests()
        var_1 = module_0.doctests()
        object_dict_0 = module_0.ObjectDict()
        str_0 = 'BZQV+p7<Eh_X'
        var_2 = module_0.raise_exc_info(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        dict_0 = {}
        var_0 = module_0.raise_exc_info(dict_0)
    except BaseException:
        pass

def test_case_8():
    try:
        base_exception_0 = None
        optional_0 = module_0.errno_from_exception(base_exception_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\\ex/8W~Gan5g}Xl>o|v'
        object_dict_0 = module_0.ObjectDict()
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        timeout_error_0 = module_0.TimeoutError()
        str_0 = ''
        dict_0 = {str_0: str_0}
        configurable_0 = module_0.Configurable(**dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        object_dict_0 = module_0.ObjectDict()
        str_0 = ''
        arg_replacer_0 = module_0.ArgReplacer(object_dict_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = -1691
        var_0 = module_0.timedelta_to_seconds(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '1H|7}CYp\x0bgcu$'
        dict_0 = {}
        gzip_decompressor_0 = module_0.GzipDecompressor()
        module_0.exec_in(str_0, dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'tornado'
        any_0 = module_0.import_object(str_0)
        str_1 = 'tornado.missing_moRule'
        any_1 = module_0.import_object(str_1)
    except BaseException:
        pass

def test_case_15():
    try:
        var_0 = None
        var_1 = lambda : var_0
        str_0 = 'foo'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        var_2 = arg_replacer_0.arg_pos
        var_3 = lambda foo: var_0
        arg_replacer_1 = module_0.ArgReplacer(var_3, str_0)
        var_4 = arg_replacer_1.arg_pos
        var_5 = lambda foo=None: var_0
        var_6 = lambda foo, bar: var_0
        var_7 = arg_replacer_1.arg_pos
        str_1 = '#{P'
        dict_0 = {str_1: var_1}
        dict_1 = {}
        tuple_0 = arg_replacer_1.replace(arg_replacer_0, dict_0, dict_1)
    except BaseException:
        pass

def test_case_16():
    try:
        base_exception_0 = module_1.BaseException()
        optional_0 = module_0.errno_from_exception(base_exception_0)
        sequence_0 = None
        str_0 = '|t:ng( &{c'
        dict_0 = {str_0: str_0}
        tuple_0 = (base_exception_0, sequence_0, dict_0)
        var_0 = module_0.raise_exc_info(tuple_0)
    except BaseException:
        pass

def test_case_17():
    try:
        base_exception_0 = module_1.BaseException()
        gzip_decompressor_0 = module_0.GzipDecompressor()
        bytes_0 = gzip_decompressor_0.flush()
        list_0 = [base_exception_0, base_exception_0, base_exception_0, base_exception_0]
        base_exception_1 = module_1.BaseException(*list_0)
        optional_0 = module_0.errno_from_exception(base_exception_1)
        str_0 = 'Ug'
        any_0 = module_0.import_object(str_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'O\\}iJr\r\\j`6~'
        str_1 = module_0.re_unescape(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = None
        var_1 = lambda : var_0
        str_0 = 'foo'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        var_2 = arg_replacer_0.arg_pos
        var_3 = lambda foo: var_0
        arg_replacer_1 = module_0.ArgReplacer(var_3, str_0)
        var_4 = arg_replacer_1.arg_pos
        var_5 = lambda foo=None: var_0
        var_6 = lambda foo, bar: var_0
        str_1 = 'Cymraeg'
        str_2 = 'Cf1@ULV5B:L/'
        object_dict_0 = module_0.ObjectDict()
        dict_0 = {str_2: arg_replacer_1, str_1: var_4, str_1: object_dict_0}
        any_0 = arg_replacer_0.get_old_value(str_1, dict_0)
        var_7 = arg_replacer_0.arg_pos
        var_8 = lambda foo, bar: var_0
        dict_1 = {str_2: var_1}
        dict_2 = {}
        tuple_0 = arg_replacer_1.replace(arg_replacer_1, dict_1, dict_2)
    except BaseException:
        pass

def test_case_20():
    try:
        var_0 = None
        var_1 = lambda : var_0
        str_0 = 'foo'
        var_2 = lambda foo: var_0
        arg_replacer_0 = module_0.ArgReplacer(var_2, str_0)
        var_3 = arg_replacer_0.arg_pos
        var_4 = lambda foo=None: var_0
        str_1 = 'Cymraeg'
        str_2 = 'Cf1@ULV5B:L/'
        object_dict_0 = module_0.ObjectDict()
        dict_0 = {str_2: arg_replacer_0, str_1: var_3, str_1: object_dict_0}
        any_0 = arg_replacer_0.get_old_value(str_1, dict_0)
        var_5 = arg_replacer_0.arg_pos
        var_6 = lambda foo, bar: var_0
        bytes_0 = b'2\x08\x8625[\x9b\xa7\xed\xd5\xa2\x016f\xd4D\n@'
        str_3 = '\\Z8;Jl 3Q>fk8'
        arg_replacer_1 = module_0.ArgReplacer(bytes_0, str_3)
    except BaseException:
        pass

def test_case_21():
    try:
        var_0 = None
        var_1 = lambda : var_0
        str_0 = 'foo'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        var_2 = arg_replacer_0.arg_pos
        var_3 = lambda foo: var_0
        arg_replacer_1 = module_0.ArgReplacer(var_3, str_0)
        var_4 = arg_replacer_1.arg_pos
        var_5 = lambda foo=None: var_0
        arg_replacer_2 = module_0.ArgReplacer(var_5, str_0)
        int_0 = 55
        str_1 = '1'
        dict_0 = {str_0: arg_replacer_2, str_1: var_4}
        tuple_0 = arg_replacer_0.replace(str_0, int_0, dict_0)
        var_6 = lambda foo, bar: var_0
        arg_replacer_3 = module_0.ArgReplacer(var_6, str_0)
        var_7 = arg_replacer_3.arg_pos
        var_8 = lambda foo, bar: var_0
        var_9 = arg_replacer_1.arg_pos
        arg_replacer_4 = module_0.ArgReplacer(str_0, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = None
        var_1 = lambda : var_0
        str_0 = 'foo'
        arg_replacer_0 = module_0.ArgReplacer(var_1, str_0)
        var_2 = arg_replacer_0.arg_pos
        var_3 = lambda foo: var_0
        arg_replacer_1 = module_0.ArgReplacer(var_3, str_0)
        var_4 = arg_replacer_1.arg_pos
        var_5 = lambda foo=None: var_0
        var_6 = lambda foo, bar: var_0
        var_7 = arg_replacer_1.arg_pos
        object_dict_0 = module_0.ObjectDict()
        list_0 = [var_2, var_5, object_dict_0, var_4]
        str_1 = 'block missing name'
        str_2 = '"'
        dict_0 = {str_1: var_0, str_0: str_1, str_2: arg_replacer_1}
        tuple_0 = (var_7, list_0, dict_0)
        tuple_1 = arg_replacer_1.replace(var_7, tuple_0, dict_0)
        str_3 = '#{P'
        dict_1 = {str_3: var_1}
        dict_2 = {}
        tuple_2 = arg_replacer_1.replace(arg_replacer_0, dict_1, dict_2)
    except BaseException:
        pass