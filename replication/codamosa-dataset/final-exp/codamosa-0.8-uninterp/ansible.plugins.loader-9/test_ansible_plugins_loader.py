# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    pass

def test_case_1():
    var_0 = module_0.get_all_plugin_loaders()

def test_case_2():
    str_0 = '/foo/bar'
    var_0 = module_0.add_all_plugin_dirs(str_0)

def test_case_3():
    set_0 = set()
    tuple_0 = None
    list_0 = [tuple_0, set_0, tuple_0]
    plugin_load_context_0 = module_0.PluginLoadContext()
    var_0 = plugin_load_context_0.record_deprecation(set_0, tuple_0, list_0)

def test_case_4():
    str_0 = '<\\x01S*Er['
    bytes_0 = b'Y'
    bool_0 = False
    plugin_loader_0 = module_0.PluginLoader(str_0, bytes_0, bool_0, bytes_0)
    dict_0 = None
    dict_1 = {}
    list_0 = [plugin_loader_0, plugin_loader_0, dict_0, dict_1]
    var_0 = plugin_loader_0.has_plugin(str_0, list_0)

def test_case_5():
    str_0 = 'su'
    str_1 = None
    var_0 = module_0.get_shell_plugin(str_1, str_0)
    str_2 = '<\\x01S*Er['
    bytes_0 = b'\x19'
    bool_0 = False
    bytes_1 = b'\x97l\x90c'
    plugin_loader_0 = module_0.PluginLoader(str_2, bytes_0, bool_0, bytes_1)
    var_1 = plugin_loader_0.all()
    dict_0 = None
    var_2 = plugin_loader_0.has_plugin(dict_0)
    var_3 = plugin_loader_0.__getstate__()

def test_case_6():
    str_0 = '/path/to/custom/module/v2'
    str_1 = 'dltdOX`cXjwRbw_}$Bk'
    str_2 = [str_1, str_0, str_1, str_1, str_1, str_1, str_1, str_1, str_1]
    str_3 = 'module'
    var_0 = module_0.add_dirs_to_loader(str_3, str_2)

def test_case_7():
    str_0 = 'EVS!V|Rc\x0cvXjX[K'
    plugin_loader_0 = None
    complex_0 = None
    set_0 = {str_0, complex_0, plugin_loader_0}
    var_0 = module_0.get_shell_plugin(complex_0, set_0)

def test_case_8():
    str_0 = 'su'
    str_1 = None
    var_0 = module_0.get_shell_plugin(str_1, str_0)

def test_case_9():
    str_0 = '/path/to/custom/module'
    str_1 = '/path/to/custom/module/v2'
    str_2 = 'dltdOX`cXjwRbw_}$Bk'
    str_3 = '/path/o/custom/module/v6'
    str_4 = [str_0, str_1, str_2, str_0, str_3, str_2, str_3, str_0, str_3]
    str_5 = 'module'
    var_0 = module_0.add_dirs_to_loader(str_5, str_4)

def test_case_10():
    bytes_0 = b'\xb1\xca2?\xf3g9E`\x9d\xe8\x07S\x02\xee'
    str_0 = '7Q'
    bytes_1 = b'\x14\x07#\xe3\xa8\x0e\xda\x1eL'
    plugin_path_context_0 = module_0.PluginPathContext(bytes_1, bytes_1)
    list_0 = [bytes_1, bytes_1]
    float_0 = 1344.64147
    plugin_loader_0 = module_0.PluginLoader(str_0, plugin_path_context_0, list_0, float_0)
    var_0 = plugin_loader_0.add_directory(bytes_0)

def test_case_11():
    int_0 = -4945
    bytes_0 = b'\xe2\x01\x9f\xa9\x82\x12<QW\xd3q\xd0\xe6(,q'
    plugin_path_context_0 = module_0.PluginPathContext(int_0, bytes_0)
    list_0 = []
    str_0 = '.VsVKk!D_3l>e-\tt'
    tuple_0 = ()
    jinja2_loader_0 = module_0.Jinja2Loader(plugin_path_context_0, list_0, str_0, tuple_0, int_0)
    var_0 = jinja2_loader_0.all()

def test_case_12():
    str_0 = 'suns'
    bytes_0 = b'Y'
    bool_0 = False
    bytes_1 = b'_l\x0f'
    plugin_loader_0 = module_0.PluginLoader(str_0, bytes_0, bool_0, bytes_1)
    dict_0 = None
    dict_1 = {}
    list_0 = [dict_1, dict_1, dict_0, dict_1]
    var_0 = plugin_loader_0.has_plugin(str_0, list_0)

def test_case_13():
    float_0 = -1396.876
    list_0 = [float_0, float_0]
    str_0 = '@2z?qVr`|3X2Q9'
    str_1 = 'GwL4\x0b|'
    dict_0 = {str_0: list_0, str_1: float_0, str_1: float_0}
    plugin_load_context_0 = module_0.PluginLoadContext()
    var_0 = plugin_load_context_0.record_deprecation(list_0, dict_0, list_0)
    bool_0 = False
    str_2 = '/etc/group'
    plugin_path_context_0 = module_0.PluginPathContext(bool_0, str_2)

def test_case_14():
    str_0 = 'su'
    str_1 = None
    var_0 = module_0.get_shell_plugin(str_1, str_0)
    dict_0 = None
    var_1 = module_0.add_all_plugin_dirs(dict_0)
    str_2 = '<\\x01S*Er['
    bytes_0 = b''
    bool_0 = False
    plugin_loader_0 = module_0.PluginLoader(str_2, bytes_0, bool_0, bytes_0)
    var_2 = plugin_loader_0.all()
    dict_1 = None
    str_3 = ''
    var_3 = plugin_loader_0.add_directory(str_3)
    var_4 = plugin_loader_0.has_plugin(dict_1)
    var_5 = plugin_loader_0.__getstate__()
    var_6 = plugin_loader_0.print_paths()
    list_0 = [var_5, bool_0]
    plugin_path_context_0 = module_0.PluginPathContext(list_0, bool_0)

def test_case_15():
    int_0 = -4945
    float_0 = 1223.0
    set_0 = set()
    plugin_loader_0 = module_0.PluginLoader(float_0, int_0, set_0, set_0)
    bytes_0 = b'\xe2\x01\x9f\xa9\x82\x12<QW\xd3q\xd0\xe6(,q'
    plugin_path_context_0 = module_0.PluginPathContext(int_0, bytes_0)
    str_0 = '"on_missing" must be a string and one of "error", "warn" or "skip", not %s'
    bool_0 = False
    var_0 = plugin_loader_0.has_plugin(str_0, bool_0)
    list_0 = []
    str_1 = 'VsVKk!D_3l>e-\t'
    plugin_load_context_0 = module_0.PluginLoadContext()
    plugin_path_context_1 = module_0.PluginPathContext(plugin_load_context_0, str_1)
    tuple_0 = ()
    jinja2_loader_0 = module_0.Jinja2Loader(plugin_path_context_0, list_0, str_1, tuple_0, int_0)
    var_1 = jinja2_loader_0.all()
    str_2 = 'powershell'
    var_2 = module_0.get_shell_plugin(str_2)

def test_case_16():
    str_0 = 'sh'
    str_1 = None
    var_0 = module_0.get_shell_plugin(str_1, str_0)
    plugin_load_context_0 = module_0.PluginLoadContext()
    plugin_load_context_1 = module_0.PluginLoadContext()

def test_case_17():
    plugin_load_context_0 = module_0.PluginLoadContext()
    int_0 = 0
    str_0 = 'test1'
    str_1 = 'warning_text'
    str_2 = 'This plugin is deprecated.'
    str_3 = {str_1: str_2}
    str_4 = 'test_coll'
    var_0 = plugin_load_context_0.record_deprecation(str_0, str_3, str_4)
    var_1 = var_0.deprecation_warnings[int_0]
    int_1 = 1
    str_5 = 'test2'
    str_6 = 'removal_version'
    str_7 = {str_1: str_2, str_6: str_5}
    var_2 = plugin_load_context_0.record_deprecation(str_5, str_7, str_4)
    var_3 = var_2.deprecation_warnings[int_1]