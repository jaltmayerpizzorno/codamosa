# Automatically generated by Pynguin.
import ansible.module_utils.facts.system.distribution as module_0

def test_case_0():
    try:
        bytes_0 = b'`\xdc\xf2\xba\x0f\x0eh:\xc4\xd7\x9eT\x8c\x1b\x1f'
        var_0 = module_0.get_uname(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        distribution_files_0 = module_0.DistributionFiles(var_0)
        str_0 = 'name'
        tuple_0 = ()
        distribution_0 = module_0.Distribution(tuple_0)
        bytes_0 = b'\x8b\xd1\xec\xcd\xb8\xa75\\Q\xd6\x17\xe0_\x8f\x9f'
        str_1 = ''
        var_1 = distribution_files_0.parse_distribution_file_NA(distribution_0, str_0, bytes_0, str_1)
        list_0 = None
        float_0 = -1770.78162
        var_2 = distribution_files_0.parse_distribution_file_Slackware(distribution_files_0, list_0, float_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bytes_0 = b'e2\x17\xc73\xfe8\x12N'
        var_0 = distribution_fact_collector_0.collect(bytes_0)
        int_0 = None
        bytes_1 = b'\xfa\x07\xbf\x8d\xecZ'
        distribution_files_0 = module_0.DistributionFiles(bytes_1)
        var_1 = distribution_files_0.parse_distribution_file_ClearLinux(distribution_fact_collector_0, distribution_fact_collector_0, int_0, int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        var_0 = None
        distribution_0 = module_0.Distribution(var_0)
        var_1 = distribution_0.get_distribution_FreeBSD()
        var_2 = distribution_0.get_distribution_AIX()
    except BaseException:
        pass

def test_case_4():
    try:
        bytes_0 = b'N\xba\xde\x08\x03\xa8\x0cm\x83'
        distribution_0 = module_0.Distribution(bytes_0)
        distribution_files_0 = module_0.DistributionFiles(distribution_0)
        distribution_1 = module_0.Distribution(distribution_files_0)
        var_0 = distribution_1.get_distribution_FreeBSD()
        var_1 = distribution_1.get_distribution_SMGL()
        var_2 = distribution_1.get_distribution_HPUX()
    except BaseException:
        pass

def test_case_5():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        str_0 = 'dO4&_Mst\r@2\\x$FV?'
        distribution_0 = module_0.Distribution(str_0)
        distribution_files_0 = module_0.DistributionFiles(distribution_0)
        dict_0 = {distribution_fact_collector_0: distribution_fact_collector_0}
        bool_0 = True
        int_0 = -953
        bytes_0 = b'\x05\xaf\x9a_\xdd2\xd6\xfc\xeb\xa4\xa0\x8c'
        distribution_files_1 = module_0.DistributionFiles(bytes_0)
        var_0 = distribution_files_1.parse_distribution_file_Flatcar(distribution_fact_collector_0, dict_0, bool_0, int_0)
        bytes_1 = b'\xd1rs\x16`6s\xa6z\x90\x1f@w\x9d\x8f\x1f\xd4\r\x89*'
        distribution_1 = module_0.Distribution(bytes_1)
        var_1 = distribution_1.get_distribution_Darwin()
    except BaseException:
        pass

def test_case_6():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        var_0 = distribution_0.get_distribution_OpenBSD()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'qRPaN'
        distribution_0 = module_0.Distribution(str_0)
        var_0 = distribution_0.get_distribution_DragonFly()
    except BaseException:
        pass

def test_case_8():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_0 = module_0.Distribution(distribution_fact_collector_0)
        var_0 = distribution_0.get_distribution_facts()
        distribution_1 = module_0.Distribution(distribution_fact_collector_0)
        var_1 = distribution_0.get_distribution_NetBSD()
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 2455.2103
        distribution_0 = module_0.Distribution(float_0)
        var_0 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_10():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        int_0 = None
        var_0 = distribution_fact_collector_0.collect(int_0)
        str_0 = '9'
        float_0 = 762.4247
        list_0 = [float_0]
        tuple_0 = (list_0,)
        distribution_files_0 = module_0.DistributionFiles(list_0)
        var_1 = distribution_files_0.parse_distribution_file_Amazon(str_0, float_0, int_0, tuple_0)
    except BaseException:
        pass

def test_case_11():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        str_0 = '_$\t#o6^j:8XH\t+u7eE'
        str_1 = '9d3'
        tuple_0 = ()
        distribution_files_0 = module_0.DistributionFiles(tuple_0)
        var_0 = distribution_files_0.parse_distribution_file_NA(distribution_fact_collector_0, str_0, str_1, distribution_fact_collector_0)
        set_0 = set()
        str_2 = "l&)\x0bN=~j'Ai\t>h!"
        distribution_files_1 = module_0.DistributionFiles(str_2)
        distribution_files_2 = module_0.DistributionFiles(distribution_files_1)
        var_1 = module_0.get_uname(set_0, distribution_files_2)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'OQ'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        distribution_files_0 = module_0.DistributionFiles(distribution_fact_collector_0)
        int_0 = None
        distribution_0 = module_0.Distribution(bytes_0)
        str_0 = 'coreos'
        bool_0 = None
        var_0 = distribution_0.get_distribution_facts()
        var_1 = distribution_files_0.parse_distribution_file_Mandriva(distribution_0, str_0, bool_0, int_0)
        var_2 = distribution_0.get_distribution_SunOS()
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        bool_1 = True
        str_0 = 'Dck5PELmsf<|\x0bV6Sv'
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        bool_2 = False
        dict_0 = {bool_0: bool_0, str_0: distribution_fact_collector_0, bool_2: bool_2, bool_0: bool_2}
        var_0 = distribution_fact_collector_0.collect(dict_0, str_0)
        var_1 = distribution_fact_collector_0.collect(bool_1)
        int_0 = 1176
        var_2 = distribution_fact_collector_0.collect(str_0)
        distribution_0 = module_0.Distribution(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        distribution_fact_collector_0 = module_0.DistributionFactCollector()
        str_0 = '\x0bfs=DUg1I`.g<SuG*j@t'
        list_0 = [str_0, distribution_fact_collector_0, distribution_fact_collector_0]
        distribution_files_0 = module_0.DistributionFiles(list_0)
        dict_0 = {str_0: str_0, distribution_files_0: list_0}
        var_0 = distribution_fact_collector_0.collect(dict_0)
        str_1 = 'bullseye'
        tuple_0 = (distribution_fact_collector_0,)
        int_0 = 1987
        var_1 = distribution_files_0.parse_distribution_file_Slackware(dict_0, str_1, tuple_0, int_0)
        var_2 = distribution_fact_collector_0.collect()
        var_3 = distribution_fact_collector_0.collect(tuple_0)
        int_1 = 1550
        int_2 = 2381
        var_4 = distribution_files_0.parse_distribution_file_Amazon(int_1, int_2, str_0, list_0)
    except BaseException:
        pass