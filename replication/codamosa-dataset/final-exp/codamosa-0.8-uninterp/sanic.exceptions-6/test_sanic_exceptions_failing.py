# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        float_0 = 1678.647
        bytes_0 = None
        int_0 = None
        method_not_supported_0 = module_0.MethodNotSupported(float_0, bytes_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        tuple_0 = ()
        list_0 = [tuple_0]
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(list_0, tuple_0)
        u_r_l_build_error_0 = module_0.URLBuildError(tuple_0, header_expectation_failed_0)
        dict_0 = None
        set_0 = {dict_0, dict_0}
        dict_1 = {u_r_l_build_error_0: list_0, u_r_l_build_error_0: u_r_l_build_error_0, tuple_0: u_r_l_build_error_0}
        invalid_range_type_0 = module_0.InvalidRangeType(set_0, dict_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "<EG m'\t?$8>wq9dt"
        bytes_0 = b'\x85\xdf\xc7q\xe7 \xf2'
        header_not_found_0 = module_0.HeaderNotFound(str_0, bytes_0)
        not_found_0 = module_0.NotFound(header_not_found_0)
        header_not_found_1 = module_0.HeaderNotFound(header_not_found_0, not_found_0)
        header_expectation_failed_0 = None
        int_0 = -560
        int_1 = -1068
        file_not_found_0 = module_0.FileNotFound(int_0, int_1, header_expectation_failed_0)
        invalid_signal_0 = module_0.InvalidSignal(int_0)
        content_range_error_0 = module_0.ContentRangeError(file_not_found_0, invalid_signal_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'7\x127S\xd4\x82\xcc0=(t\xae\xb8B/'
        float_0 = -1099.855
        forbidden_0 = module_0.Forbidden(float_0)
        int_0 = -1363
        py_file_error_0 = module_0.PyFileError(float_0)
        header_not_found_0 = None
        list_0 = [int_0]
        unauthorized_0 = module_0.Unauthorized(list_0)
        unauthorized_1 = module_0.Unauthorized(header_not_found_0, unauthorized_0, py_file_error_0)
        var_0 = module_0.abort(int_0, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 3320
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 103
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'O\tw,"/}\rByt'
        float_0 = 15.0
        str_1 = None
        load_file_exception_0 = module_0.LoadFileException(str_1)
        request_timeout_0 = module_0.RequestTimeout(str_0, float_0, load_file_exception_0)
        dict_0 = {request_timeout_0: str_1, float_0: request_timeout_0}
        invalid_range_type_0 = module_0.InvalidRangeType(dict_0, request_timeout_0)
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        float_0 = -2318.96
        forbidden_0 = module_0.Forbidden(float_0)
        sanic_exception_0 = module_0.SanicException(bool_0, forbidden_0)
        int_0 = -1368
        request_timeout_0 = module_0.RequestTimeout(int_0)
        py_file_error_0 = module_0.PyFileError(float_0)
        payload_too_large_0 = module_0.PayloadTooLarge(py_file_error_0)
        bool_1 = True
        invalid_signal_0 = None
        list_0 = []
        invalid_signal_1 = module_0.InvalidSignal(bool_1, invalid_signal_0, list_0)
        header_not_found_0 = None
        list_1 = [int_0]
        unauthorized_0 = module_0.Unauthorized(list_1)
        unauthorized_1 = module_0.Unauthorized(header_not_found_0, unauthorized_0, py_file_error_0)
        str_0 = '='
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(str_0, forbidden_0)
        u_r_l_build_error_0 = module_0.URLBuildError(sanic_exception_0)
        method_not_supported_0 = None
        dict_0 = {float_0: float_0}
        bool_2 = True
        method_not_supported_1 = module_0.MethodNotSupported(method_not_supported_0, dict_0, bool_2)
    except BaseException:
        pass

def test_case_8():
    try:
        forbidden_0 = None
        tuple_0 = (forbidden_0,)
        not_found_0 = None
        list_0 = []
        str_0 = 'requirements'
        dict_0 = {str_0: forbidden_0}
        unauthorized_0 = module_0.Unauthorized(tuple_0, not_found_0, list_0, **dict_0)
        dict_1 = {}
        py_file_error_0 = module_0.PyFileError(dict_1)
        py_file_error_1 = module_0.PyFileError(py_file_error_0)
        list_1 = [py_file_error_0]
        header_not_found_0 = module_0.HeaderNotFound(py_file_error_1, list_1)
        invalid_range_type_0 = module_0.InvalidRangeType(unauthorized_0, header_not_found_0)
    except BaseException:
        pass