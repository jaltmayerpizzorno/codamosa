# Automatically generated by Pynguin.
import pymonet.utils as module_0

def test_case_0():
    try:
        var_0 = None
        var_1 = module_0.identity(var_0)
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_1, callable_1, callable_0, callable_1, callable_0, callable_0]
        var_2 = module_0.pipe(list_0, *list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "\n    Immutable list is data structure that doesn't allow to mutate instances\n    "
        var_0 = module_0.compose(str_0)
        var_1 = module_0.fn()
    except BaseException:
        pass

def test_case_2():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_1, callable_0, callable_0]
        var_0 = module_0.pipe(callable_1, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        callable_0 = None
        bytes_0 = b'\xe5\xae\xdc\xbb\x8bv.\xf6'
        var_0 = module_0.curry(bytes_0, bytes_0)
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_1, callable_0, callable_0, callable_0, callable_1, callable_1, callable_0, callable_0, callable_0, callable_1]
        var_1 = module_0.compose(list_0, *list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        list_0 = [callable_0, callable_0, callable_0, callable_1]
        var_0 = module_0.compose(callable_1, *list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'MxesX< Fu\\I}~IY,Ht8'
        callable_0 = None
        callable_1 = module_0.memoize(callable_0)
        callable_2 = module_0.memoize(callable_1)
        callable_3 = module_0.memoize(callable_2)
        callable_4 = module_0.memoize(callable_3)
        var_0 = module_0.curry(str_0, callable_4)
        dict_0 = None
        list_0 = [var_0]
        var_1 = module_0.pipe(dict_0, *list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callable_0 = None
        callable_1 = None
        callable_2 = module_0.memoize(callable_1)
        tuple_0 = (callable_0, callable_2)
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.cond(list_0)
        bool_0 = True
        list_1 = [var_0, callable_2, bool_0]
        var_1 = module_0.pipe(bool_0, *list_1)
    except BaseException:
        pass