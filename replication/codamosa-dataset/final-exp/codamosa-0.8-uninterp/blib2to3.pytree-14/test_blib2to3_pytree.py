# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 54
    str_0 = 'GF/jzW9c'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_2():
    int_0 = 343
    list_0 = []
    list_1 = [int_0]
    node_0 = module_0.Node(int_0, list_0, list_1)

def test_case_3():
    int_0 = 317
    list_0 = []
    list_1 = [int_0, list_0, int_0]
    node_0 = module_0.Node(int_0, list_0, list_1)
    node_1 = node_0.clone()

def test_case_4():
    str_0 = '\n    Unit test for method pre_order of class Base\n    This tests that pre-order traversal works properly, and also tests\n    that the parent links are correct.\n    '
    int_0 = 32
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_5():
    int_0 = 42
    str_0 = '(?:[uUrRbBfF]|[rR][fFbB]|[fFbBuU][rR])?'
    int_1 = -599
    int_2 = 693
    tuple_0 = (int_1, int_2)
    tuple_1 = (str_0, tuple_0)
    list_0 = []
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, list_0)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()

def test_case_6():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_7():
    str_0 = '39&'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_8():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_9():
    int_0 = 5
    leaf_pattern_0 = module_0.LeafPattern(int_0)

def test_case_10():
    leaf_pattern_0 = module_0.LeafPattern()
    leaf_0 = None
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_11():
    str_0 = '3nE9&'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_12():
    int_0 = 54
    str_0 = 'GF/jzW9c'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()
    grammar_0 = module_1.Grammar()
    list_0 = [str_1]
    tuple_0 = (int_0, str_0, list_0, list_0)
    var_0 = module_0.convert(grammar_0, tuple_0)

def test_case_13():
    int_0 = 1301
    list_0 = []
    grammar_0 = module_1.Grammar()
    node_0 = module_0.Node(int_0, list_0, grammar_0)
    node_1 = node_0.clone()
    int_1 = 2551
    node_1.insert_child(int_1, node_0)

def test_case_14():
    int_0 = 21
    str_0 = '.'
    leaf_0 = module_0.Leaf(int_0, str_0)
    int_1 = 1413
    list_0 = [leaf_0]
    list_1 = [list_0, str_0, int_0]
    node_0 = module_0.Node(int_1, list_0, list_1)
    optional_0 = leaf_0.remove()

def test_case_15():
    str_0 = '\nGU{=?0N<_Ki'
    int_0 = 1108
    list_0 = []
    node_0 = module_0.Node(int_0, list_0, int_0, str_0)
    node_1 = node_0.clone()

def test_case_16():
    int_0 = 595
    int_1 = 36
    str_0 = '0PsE:/oT\n#On_M'
    leaf_0 = module_0.Leaf(int_1, str_0)
    leaf_1 = leaf_0.clone()
    list_0 = [leaf_1, leaf_0]
    list_1 = []
    node_0 = module_0.Node(int_0, list_0, str_0, list_1)
    node_1 = node_0.clone()
    node_1.invalidate_sibling_maps()

def test_case_17():
    str_0 = '&'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)

def test_case_18():
    str_0 = '9&'
    int_0 = 2
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_19():
    str_0 = '9'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_20():
    str_0 = 'C'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    int_0 = None
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0, str_0)
    int_1 = 1510
    list_0 = []
    list_1 = []
    node_0 = module_0.Node(int_1, list_0, list_1)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    node_3 = node_1.clone()
    node_2.append_child(node_3)

def test_case_21():
    str_0 = '&'
    int_0 = 25
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0)
    any_0 = wildcard_pattern_0.optimize()
    grammar_0 = module_1.Grammar()
    int_1 = 1284
    list_0 = [leaf_0]
    node_0 = module_0.Node(int_1, list_0, any_0, str_0)
    node_1 = node_0.clone()
    node_0.append_child(node_0)

def test_case_22():
    int_0 = 0
    str_0 = 'x'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.leaves()
    var_0 = [l.type for l in iterator_0]
    leaf_1 = module_0.Leaf(int_0, str_0)
    leaf_2 = leaf_1.clone()
    iterator_1 = leaf_2.leaves()
    var_1 = [l.type for l in iterator_1]

def test_case_23():
    int_0 = 21
    str_0 = 'e.'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0)

def test_case_24():
    str_0 = '\n    Unit test for method pre_order of class Base\n    Thi> tests that pre-order traversal works properly, and also tests\n    that the pa`ent links are correct.\n    '
    int_0 = 70
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0)
    var_0 = leaf_pattern_0.match(leaf_0, str_0)

def test_case_25():
    str_0 = 'Ln/^_\t4qb6rF8?E?w'
    int_0 = 32
    leaf_0 = module_0.Leaf(int_0, str_0)
    float_0 = -622.221459
    leaf_pattern_0 = module_0.LeafPattern()
    var_0 = leaf_pattern_0.match(leaf_0, float_0)

def test_case_26():
    int_0 = 377
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    int_1 = node_0.depth()

def test_case_27():
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = 699
    list_0 = []
    str_0 = ''
    list_1 = [str_0]
    node_0 = module_0.Node(int_0, list_0, str_0, list_1)
    node_1 = node_0.clone()
    list_2 = [node_1]
    grammar_0 = module_1.Grammar()
    var_0 = grammar_0.copy()
    node_2 = module_0.Node(int_0, list_2, var_0)
    node_2.update_sibling_maps()
    int_1 = []
    iterator_0 = negated_pattern_0.generate_matches(int_1)
    var_1 = sorted(iterator_0)

def test_case_28():
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = 1
    int_1 = [negated_pattern_0, int_0]
    iterator_0 = negated_pattern_0.generate_matches(int_1)
    var_0 = sorted(iterator_0)

def test_case_29():
    str_0 = 'G\n '
    int_0 = 1
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_30():
    negated_pattern_0 = module_0.NegatedPattern()
    int_0 = []
    iterator_0 = negated_pattern_0.generate_matches(int_0)
    var_0 = sorted(iterator_0)

def test_case_31():
    int_0 = 0
    str_0 = 'x'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.post_order()
    var_0 = [l.type for l in iterator_0]
    leaf_1 = module_0.Leaf(int_0, str_0)
    leaf_2 = leaf_1.clone()
    iterator_1 = leaf_2.leaves()
    var_1 = [l.type for l in iterator_1]

def test_case_32():
    str_0 = '-'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    dict_0 = {}
    bool_0 = wildcard_pattern_0.match_seq(dict_0, dict_0)

def test_case_33():
    str_0 = 'G\n'
    int_0 = 0
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    any_0 = wildcard_pattern_0.optimize()
    bool_0 = wildcard_pattern_0.match(any_0)

def test_case_34():
    int_0 = 21
    str_0 = 'e.'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    bool_0 = True
    var_0 = leaf_pattern_0.match(leaf_0, bool_0)

def test_case_35():
    str_0 = 'Ln/^_\t4qb6rF8?E?w'
    int_0 = 32
    str_1 = ''
    leaf_0 = module_0.Leaf(int_0, str_1)
    leaf_1 = leaf_0.clone()
    leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
    var_0 = leaf_pattern_0.match(leaf_0, leaf_0)

def test_case_36():
    int_0 = 21
    str_0 = 'e.'
    leaf_0 = module_0.Leaf(int_0, str_0)
    optional_0 = leaf_0.remove()

def test_case_37():
    int_0 = 21
    str_0 = ')'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()
    int_1 = 10
    leaf_pattern_0 = module_0.LeafPattern(int_1, str_0)
    float_0 = -2251.182
    var_0 = leaf_pattern_0.match(leaf_0, float_0)

def test_case_38():
    int_0 = 0
    int_1 = 1
    int_2 = 2
    int_3 = 3
    int_4 = 4
    int_5 = 5
    int_6 = 6
    int_7 = 7
    int_8 = 8
    int_9 = 9
    int_10 = [int_0, int_1, int_2, int_3, int_4, int_5, int_6, int_7, int_8, int_9]
    var_0 = []
    iterator_0 = module_0.generate_matches(var_0, int_10)
    var_1 = list(iterator_0)