# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.json_schema as module_1
import typesystem.composites as module_2
import typesystem.fields as module_3
import re as module_4

def test_case_0():
    schema_definitions_0 = module_0.SchemaDefinitions()

def test_case_1():
    dict_0 = {}
    field_0 = module_1.from_json_schema(dict_0)
    dict_1 = module_1.get_standard_properties(field_0)

def test_case_2():
    bool_0 = False
    field_0 = module_1.from_json_schema(bool_0)

def test_case_3():
    dict_0 = {}
    schema_definitions_0 = module_0.SchemaDefinitions()
    field_0 = module_1.type_from_json_schema(dict_0, schema_definitions_0)

def test_case_4():
    int_0 = -784
    dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
    tuple_0 = module_1.get_valid_types(dict_0)

def test_case_5():
    str_0 = 'allOf'
    str_1 = '$ref'
    str_2 = '#/definitions/x'
    str_3 = {str_1: str_2}
    str_4 = '#/definitions/y'
    str_5 = {str_1: str_4}
    str_6 = [str_3, str_5]
    str_7 = {str_0: str_6}
    field_0 = module_1.from_json_schema(str_7)
    var_0 = len(str_1)

def test_case_6():
    str_0 = 'const'
    str_1 = 'default'
    int_0 = 1
    var_0 = None
    var_1 = {str_0: int_0, str_1: var_0}
    schema_definitions_0 = module_0.SchemaDefinitions()
    field_0 = module_1.const_from_json_schema(var_1, schema_definitions_0)

def test_case_7():
    bool_0 = True
    field_0 = module_1.from_json_schema(bool_0)
    if_then_else_0 = module_2.IfThenElse(field_0, field_0, field_0)
    optional_0 = None
    var_0 = module_1.to_json_schema(if_then_else_0, optional_0)

def test_case_8():
    integer_0 = module_3.Integer()
    var_0 = module_1.to_json_schema(integer_0)

def test_case_9():
    str_0 = 'pattern'
    int_0 = 99
    var_0 = {str_0: str_0, str_0: str_0, str_0: int_0, str_0: int_0, str_0: str_0}
    field_0 = module_1.from_json_schema(var_0)
    var_1 = module_1.to_json_schema(field_0)

def test_case_10():
    schema_definitions_0 = module_0.SchemaDefinitions()
    var_0 = module_1.to_json_schema(schema_definitions_0)
    schema_definitions_1 = module_0.SchemaDefinitions()

def test_case_11():
    bool_0 = False
    field_0 = module_1.from_json_schema(bool_0)
    var_0 = module_1.to_json_schema(field_0)
    schema_definitions_0 = module_0.SchemaDefinitions()

def test_case_12():
    dict_0 = {}
    str_0 = 'gy#<D"Tv|QVW=Xy-#'
    str_1 = '?4\\k/UYG&[zYv'
    dict_1 = {str_1: str_0, str_1: str_1, str_1: str_0}
    schema_definitions_0 = module_0.SchemaDefinitions(**dict_1)
    field_0 = module_1.from_json_schema(dict_0, schema_definitions_0)
    schema_definitions_1 = module_0.SchemaDefinitions()

def test_case_13():
    str_0 = 'maxLength'
    str_1 = 'L(9TZRUuCEB'
    str_2 = '^(?!\\s*$).+'
    int_0 = 47
    var_0 = {str_2: str_1, str_0: str_2, str_2: int_0, str_0: int_0, str_2: str_2}
    field_0 = module_1.from_json_schema(var_0)
    var_1 = module_1.to_json_schema(field_0)

def test_case_14():
    str_0 = 'pattern'
    str_1 = 'nll'
    int_0 = 99
    var_0 = {str_1: str_1, str_0: str_1, str_1: int_0, str_1: int_0, str_1: str_1}
    field_0 = module_1.from_json_schema(var_0)

def test_case_15():
    str_0 = 'type'
    str_1 = 'description'
    str_2 = 'string'
    int_0 = 1
    str_3 = 'required non-blank string'
    var_0 = {str_0: str_2, str_0: str_2, str_2: int_0, str_2: int_0, str_1: str_3}
    field_0 = module_1.from_json_schema(var_0)
    var_1 = module_1.to_json_schema(field_0)

def test_case_16():
    str_0 = 'type'
    str_1 = 'minLngt%q'
    str_2 = 'maxhXngth'
    int_0 = 1
    int_1 = 10
    schema_definitions_0 = module_0.SchemaDefinitions()
    var_0 = module_4.compile(str_1)
    string_0 = module_3.String(max_length=int_1, min_length=int_0, pattern=var_0)
    str_3 = 'null'
    str_4 = '10'
    str_5 = '1'
    str_6 = {str_0: str_3, str_2: str_4, str_1: str_5}
    schema_definitions_1 = module_0.SchemaDefinitions()
    field_0 = module_1.type_from_json_schema(str_6, schema_definitions_1)
    const_0 = module_3.Const(int_1)

def test_case_17():
    str_0 = 'if'
    str_1 = 'then'
    str_2 = 'else'
    str_3 = 'type'
    str_4 = 'boolean'
    str_5 = {str_3: str_4}
    str_6 = 'integer'
    str_7 = {str_3: str_6}
    str_8 = 'string'
    str_9 = {str_3: str_8}
    str_10 = {str_0: str_5, str_1: str_7, str_2: str_9}
    var_0 = None
    field_0 = module_1.if_then_else_from_json_schema(str_10, var_0)

def test_case_18():
    string_0 = module_3.String()
    var_0 = module_1.to_json_schema(string_0)
    string_1 = module_3.String()
    var_1 = module_1.to_json_schema(string_1)
    integer_0 = module_3.Integer()
    var_2 = module_1.to_json_schema(integer_0)
    float_0 = module_3.Float()
    var_3 = module_1.to_json_schema(float_0)
    string_2 = module_3.String()
    var_4 = module_1.to_json_schema(string_2)
    array_0 = module_3.Array()
    var_5 = module_1.to_json_schema(array_0)

def test_case_19():
    str_0 = 'type'
    str_1 = 'pattern'
    str_2 = 'minLength'
    str_3 = 'maxLength'
    str_4 = 'description'
    str_5 = 'string'
    str_6 = 'cXngO#UR""@xpD,'
    int_0 = 8
    int_1 = 100
    str_7 = 'required non-blank string'
    var_0 = {str_0: str_5, str_1: str_6, str_2: int_0, str_3: int_1, str_4: str_7}
    field_0 = module_1.from_json_schema(var_0)
    var_1 = module_1.to_json_schema(field_0)

def test_case_20():
    str_0 = 'type'
    str_1 = 'properties'
    str_2 = 'object'
    str_3 = 'a'
    str_4 = 'b'
    str_5 = 'c'
    str_6 = 'if'
    str_7 = 'then'
    str_8 = 'const'
    bool_0 = True
    bool_1 = {str_8: bool_0}
    bool_2 = {str_8: bool_0}
    bool_3 = {str_6: bool_1, str_7: bool_2}
    str_9 = 'else'
    bool_4 = {str_8: bool_0}
    bool_5 = False
    bool_6 = {str_8: bool_5}
    bool_7 = {str_6: bool_5, str_7: bool_4, str_9: bool_6}
    bool_8 = {str_8: bool_5}
    bool_9 = {str_8: bool_0}
    bool_10 = {str_8: bool_5}
    bool_11 = {str_6: bool_8, str_7: bool_9, str_9: bool_10}
    bool_12 = {str_3: bool_3, str_4: bool_7, str_5: bool_11}
    var_0 = {str_0: str_2, str_1: bool_12}
    field_0 = module_1.from_json_schema(var_0)

def test_case_21():
    str_0 = 'anyOf'
    str_1 = 'type'
    str_2 = 'properties'
    str_3 = 'required'
    str_4 = 'object'
    str_5 = 'number'
    str_6 = 'string'
    str_7 = {str_1: str_6}
    str_8 = {str_1: str_5}
    str_9 = {str_1: str_7, str_5: str_8}
    str_10 = [str_1, str_5]
    str_11 = {str_1: str_4, str_2: str_9, str_3: str_10}
    str_12 = {str_1: str_6}
    str_13 = 'boolean'
    str_14 = {str_1: str_13}
    str_15 = [str_11, str_12, str_14]
    str_16 = {str_0: str_15}
    schema_definitions_0 = module_0.SchemaDefinitions()
    field_0 = module_1.any_of_from_json_schema(str_16, schema_definitions_0)
    any_0 = field_0.validate(str_6)
    int_0 = 12
    var_0 = {str_1: str_6, str_5: int_0}
    any_1 = field_0.validate(var_0)
    bool_0 = True
    any_2 = field_0.validate(bool_0)

def test_case_22():
    str_0 = 'oneOf'
    str_1 = 'default'
    str_2 = 'type'
    str_3 = 'boolean'
    str_4 = {str_2: str_3}
    str_5 = 'number'
    str_6 = {str_2: str_5}
    str_7 = 'object'
    str_8 = {str_2: str_7}
    str_9 = [str_4, str_6, str_8]
    bool_0 = True
    var_0 = {str_0: str_9, str_1: bool_0}
    var_1 = None
    field_0 = module_1.one_of_from_json_schema(var_0, var_1)

def test_case_23():
    integer_0 = module_3.Integer()
    var_0 = module_1.to_json_schema(integer_0)
    int_0 = -3
    var_1 = None
    integer_1 = module_3.Integer(minimum=int_0, maximum=var_1)
    var_2 = module_1.to_json_schema(integer_1)

def test_case_24():
    str_0 = 'not'
    str_1 = 'default'
    str_2 = 'type'
    str_3 = 'minLength'
    str_4 = 'maxLength'
    str_5 = 'string'
    int_0 = 3
    int_1 = 8
    var_0 = {str_2: str_5, str_3: int_0, str_4: int_1}
    var_1 = {str_0: var_0, str_1: str_1}
    var_2 = {}
    field_0 = module_1.not_from_json_schema(var_1, var_2)
    string_0 = module_3.String(max_length=int_1, min_length=int_0)

def test_case_25():
    int_0 = 5
    integer_0 = module_3.Integer(minimum=int_0)
    int_1 = 10
    integer_1 = module_3.Integer(maximum=int_1)
    integer_2 = [integer_0, integer_1]
    all_of_0 = module_2.AllOf(integer_2)
    var_0 = module_1.to_json_schema(all_of_0)
    integer_3 = module_3.Integer(minimum=int_0)
    float_0 = 1067.0
    integer_4 = module_3.Integer(exclusive_minimum=float_0, multiple_of=int_0)