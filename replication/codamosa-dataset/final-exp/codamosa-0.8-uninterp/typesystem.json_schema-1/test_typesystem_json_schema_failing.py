# Automatically generated by Pynguin.
import typesystem.schemas as module_0
import typesystem.json_schema as module_1
import typesystem.fields as module_2

def test_case_0():
    try:
        dict_0 = {}
        str_0 = 'kmS_1;p J.PcW'
        bool_0 = False
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.from_json_schema_type(dict_0, str_0, bool_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        str_0 = '\x0bt'
        set_0 = {str_0}
        bool_1 = True
        tuple_0 = (set_0, bool_1)
        field_0 = module_1.from_json_schema(bool_0, tuple_0)
        str_1 = None
        dict_0 = {str_1: str_1}
        tuple_1 = module_1.get_valid_types(dict_0)
        str_2 = '=d?>9<@'
        dict_1 = {str_2: str_2}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_1)
        field_1 = module_1.enum_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_2():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.any_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -4002
        dict_0 = {int_0: int_0, int_0: int_0}
        dict_1 = {}
        schema_definitions_0 = module_0.SchemaDefinitions(**dict_1)
        field_0 = module_1.one_of_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.from_json_schema(dict_0)
        dict_1 = module_1.get_standard_properties(field_0)
        field_1 = module_1.not_from_json_schema(dict_0, schema_definitions_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'if'
        str_1 = 'then'
        str_2 = 'e}lse'
        str_3 = 'default'
        str_4 = 'const'
        bool_0 = True
        bool_1 = {str_4: bool_0}
        bool_2 = False
        bool_3 = {str_4: bool_2}
        var_0 = None
        var_1 = {str_0: bool_1, str_1: bool_1, str_2: bool_3, str_3: var_0}
        field_0 = module_1.if_then_else_from_json_schema(var_1, var_0)
        field_1 = module_1.if_then_else_from_json_schema(var_1, var_0)
        var_2 = field_1.schema
    except BaseException:
        pass

def test_case_6():
    try:
        field_0 = None
        var_0 = module_1.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'ltYjNP0'
        field_0 = module_2.Field(description=str_0)
        any_0 = field_0.serialize(str_0)
        var_0 = module_1.to_json_schema(field_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '$schema'
        str_1 = '$id'
        str_2 = 'description'
        str_3 = 'items'
        str_4 = 'http://json-schema.org/draft-07/schema#'
        str_5 = 'https://example.com/arrays.schema.json'
        str_6 = 'schema for an array of strings'
        str_7 = 'array'
        str_8 = 'string'
        str_9 = {str_1: str_8}
        str_10 = {str_0: str_4, str_1: str_5, str_2: str_6, str_8: str_7, str_3: str_9}
        schema_definitions_0 = module_0.SchemaDefinitions()
        field_0 = module_1.from_json_schema(str_10, schema_definitions_0)
        var_0 = field_0.items
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'enum'
        str_1 = 'nullable'
        int_0 = 1
        int_1 = 2
        int_2 = 3
        int_3 = [int_0, int_1, int_2]
        bool_0 = True
        var_0 = {str_0: int_3, str_1: bool_0}
        var_1 = {}
        field_0 = module_1.enum_from_json_schema(var_0, var_1)
        var_2 = field_0.all_of
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'if'
        str_1 = 'then'
        str_2 = 'else'
        str_3 = 'default'
        str_4 = 'const'
        bool_0 = True
        bool_1 = {str_4: bool_0}
        bool_2 = {str_4: bool_0}
        bool_3 = False
        bool_4 = {str_4: bool_3}
        var_0 = None
        var_1 = {str_0: bool_1, str_1: bool_2, str_2: bool_4, str_3: var_0}
        field_0 = module_1.if_then_else_from_json_schema(var_1, var_0)
        field_1 = module_1.if_then_else_from_json_schema(var_1, var_0)
        var_2 = field_1.schema
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'pattern'
        str_1 = 'null'
        bool_0 = True
        int_0 = None
        string_0 = module_2.String(allow_blank=bool_0, min_length=int_0, format=str_0)
        var_0 = module_1.to_json_schema(string_0)
        str_2 = 'string'
        int_1 = 93
        var_1 = {str_2: str_2, str_0: str_2, str_1: int_1, str_2: int_1, str_1: str_2}
        field_0 = module_1.from_json_schema(var_1)
        var_2 = module_1.to_json_schema(field_0)
        field_1 = None
        var_3 = module_1.to_json_schema(field_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'allOf'
        str_1 = '$ref'
        str_2 = '#/definitions/x'
        str_3 = {str_1: str_2}
        str_4 = {str_1: str_1}
        str_5 = [str_3, str_4]
        str_6 = {str_0: str_5}
        field_0 = module_1.from_json_schema(str_6)
    except BaseException:
        pass