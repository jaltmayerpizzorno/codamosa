# Automatically generated by Pynguin.
import pypara.monetary as module_0
import decimal as module_1
import pypara.currencies as module_2
import datetime as module_3

def test_case_0():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        bool_0 = none_money_0.as_boolean()
        bool_1 = none_money_0.as_boolean()
        money_1 = none_money_0.abs()
        money_2 = money_1.positive()
        money_3 = money_1.__pos__()
        bool_2 = none_money_0.lte(money_0)
        str_0 = '\n    Computes the day count fraction for the "Act/365F" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_act_365_f(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal(\'0.16986301369863\')\n    >>> round(dcfc_act_365_f(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal(\'0.17260273972603\')\n    >>> round(dcfc_act_365_f(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal(\'1.08493150684932\')\n    >>> round(dcfc_act_365_f(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal(\'1.32876712328767\')\n    '
        money_4 = money_3.__floordiv__(str_0)
        float_0 = money_2.__float__()
    except BaseException:
        pass

def test_case_1():
    try:
        none_money_0 = module_0.NoneMoney()
        int_0 = none_money_0.as_integer()
    except BaseException:
        pass

def test_case_2():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_1 = none_money_0.multiply(var_0)
        money_2 = none_money_0.round()
        none_money_1 = module_0.NoneMoney()
        list_0 = [money_2, money_0, money_2]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.divide(money_0)
        var_0 = None
        money_2 = none_money_0.multiply(var_0)
        money_3 = none_money_0.round()
        none_money_1 = module_0.NoneMoney()
        list_0 = [money_3, money_0, money_3]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_4():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.add(money_0)
        decimal_0 = module_1.Decimal()
        money_2 = none_money_0.with_qty(decimal_0)
        str_0 = '7.3yc!O[YAmM'
        str_1 = 'YjH\nw3Yg|C^va1YvJAs'
        int_0 = 294
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        int_1 = 190
        currency_0 = module_2.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0)
        bool_0 = True
        money_3 = money_2.convert(currency_0, incompatible_currency_error_0, bool_0)
        str_2 = '!bWoC]7NGkU\x0b"D'
        int_2 = 4
        currency_type_1 = module_2.CurrencyType.MONEY
        decimal_1 = module_1.Decimal()
        currency_1 = module_2.Currency(str_0, str_2, int_2, currency_type_1, decimal_1, int_2)
        none_money_1 = module_0.NoneMoney()
        money_4 = none_money_1.with_ccy(currency_1)
        money_5 = none_money_1.add(money_1)
        money_6 = money_5.with_qty(decimal_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '+`B)Gk8/FmSQ'
        str_1 = '8 0/(#&i:\x0b*\\`|hT'
        int_0 = None
        list_0 = [str_0, str_1, int_0]
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.divide(list_0)
        float_0 = price_0.as_float()
    except BaseException:
        pass

def test_case_6():
    try:
        none_price_0 = module_0.NonePrice()
        int_0 = none_price_0.as_integer()
    except BaseException:
        pass

def test_case_7():
    try:
        var_0 = None
        str_0 = 'Q}u. |z-?"QuE|'
        int_0 = -2808
        currency_type_0 = module_2.CurrencyType.ALTERNATIVE
        dict_0 = {}
        decimal_0 = module_1.Decimal(**dict_0)
        int_1 = 301
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.with_ccy(currency_0)
        list_0 = [var_0, var_0, var_0]
        monetary_operation_exception_0 = module_0.MonetaryOperationException(*list_0)
        str_1 = ':d_Q]LRL@L;n.j\x0cAtQe'
        dict_1 = {str_1: str_1, str_1: str_1}
        some_price_0 = module_0.SomePrice(**dict_1)
    except BaseException:
        pass

def test_case_8():
    try:
        money_0 = module_0.Money()
        var_0 = None
        money_1 = money_0.divide(var_0)
    except BaseException:
        pass

def test_case_9():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '7.3yc!OYAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 12
        str_2 = 'C'
        int_1 = 1355
        currency_0 = module_2.Currency(str_2, str_1, int_0, currency_type_0, decimal_0, int_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_2, int_1, currency_type_0, decimal_0, int_1)
        none_money_1 = module_0.NoneMoney()
        money_1 = some_money_0.negative()
        money_2 = some_money_0.subtract(money_1)
        money_3 = some_money_0.abs()
        money_4 = some_money_0.add(money_3)
        money_5 = some_money_0.subtract(money_0)
        str_3 = '\n    Consumes implementations of the algebra and returns a program which consumes opening and closing dates and produces\n    a general ledger.\n\n    :param read_initial_balances: Algebra implementation which reads initial balances.\n    :param read_journal_entries: Algebra implementation which reads journal entries.\n    :return: A function which consumes opening and closing dates and produces a general ledger\n    '
        int_2 = None
        currency_2 = module_2.Currency(str_2, str_3, int_2, currency_type_0, decimal_0, int_2)
        price_0 = some_price_0.convert(currency_2)
    except BaseException:
        pass

def test_case_10():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.add(money_0)
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        none_money_1 = module_0.NoneMoney()
        money_2 = none_money_1.with_ccy(currency_0)
        bool_0 = money_2.lt(money_1)
    except BaseException:
        pass

def test_case_11():
    try:
        money_0 = module_0.Money()
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.subtract(money_0)
        money_2 = money_0.negative()
    except BaseException:
        pass

def test_case_12():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(money_0)
        str_0 = '$-{werr0E|}MBV1'
        price_1 = price_0.floor_divide(str_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.add(money_0)
        int_0 = money_1.__int__()
        list_0 = [price_0]
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.abs()
        str_0 = '$-{werr0E|}MBV1'
        price_1 = price_0.floor_divide(str_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.add(money_0)
        list_0 = [price_0]
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__neg__()
        currency_type_0 = module_2.CurrencyType.MONEY
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_3 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_15():
    try:
        none_price_0 = module_0.NonePrice()
        str_0 = 'MC3\tOAzsq,wh6'
        price_0 = none_price_0.multiply(str_0)
        price_1 = none_price_0.positive()
        price_2 = none_price_0.subtract(price_1)
        bool_0 = none_price_0.is_equal(none_price_0)
        var_0 = price_2.__round__()
        none_money_0 = module_0.NoneMoney()
        list_0 = [price_1]
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        money_1 = none_money_0.round()
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        decimal_1 = currency_0.quantize(decimal_0)
        str_2 = 'uB],U'
        incompatible_currency_error_0 = module_0.IncompatibleCurrencyError(currency_0, currency_0, str_2)
        bool_0 = False
        price_0 = some_price_0.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.__sub__(money_0)
        list_0 = [price_0]
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_18():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_0 = price_0.gte(price_0)
        price_1 = none_price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.negative()
    except BaseException:
        pass

def test_case_19():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.__floordiv__(var_0)
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        bool_0 = none_money_0.lte(money_0)
        decimal_0 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_1)
        bool_1 = price_2.gte(price_1)
        bool_2 = price_0.lt(price_2)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_2 = some_money_0.subtract(money_0)
        money_3 = price_0.times(var_1)
    except BaseException:
        pass

def test_case_20():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.__floordiv__(var_0)
        str_0 = '7.3yc!O[YAm'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        str_2 = 'oU\x0c{RUAQ- Hi'
        int_1 = 4
        currency_0 = module_2.Currency(str_1, str_2, int_1, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.convert(currency_0)
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = price_0.scalar_subtract(var_1)
        currency_1 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        bool_0 = some_price_0.lte(price_1)
        price_2 = some_price_0.subtract(price_1)
        decimal_1 = currency_1.quantize(decimal_0)
        price_3 = price_1.add(price_2)
        bool_1 = price_3.gte(price_2)
        bool_2 = price_1.lt(price_3)
        price_4 = price_2.floor_divide(var_0)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = -1990
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        price_1 = price_0.__mul__(int_0)
        tuple_0 = None
        decimal_0 = None
        price_2 = price_1.with_qty(decimal_0)
        money_0 = none_price_0.times(tuple_0)
        var_0 = price_1.__round__()
        list_0 = None
        none_money_0 = module_0.NoneMoney(*list_0)
    except BaseException:
        pass

def test_case_22():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_1 = none_money_0.round()
        none_money_1 = module_0.NoneMoney()
        list_0 = [money_1, money_0, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_23():
    try:
        money_0 = module_0.Money()
        bool_0 = money_0.is_equal(money_0)
    except BaseException:
        pass

def test_case_24():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.floor_divide(money_0)
        str_0 = '$-{werr0E|}MBV1'
        price_1 = price_0.floor_divide(str_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.subtract(money_0)
    except BaseException:
        pass

def test_case_25():
    try:
        money_0 = module_0.Money()
        dict_0 = {}
        none_money_0 = module_0.NoneMoney(**dict_0)
        money_1 = money_0.multiply(none_money_0)
    except BaseException:
        pass

def test_case_26():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_0 = money_0.__eq__(price_0)
        price_1 = none_price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.__neg__()
        list_0 = [price_0]
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        price_1 = none_price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.__abs__()
        list_0 = [price_0]
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_28():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_0 = price_0.gte(price_0)
        price_1 = none_price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.positive()
    except BaseException:
        pass

def test_case_29():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        money_1 = money_0.divide(var_0)
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.negative()
        price_1 = some_price_0.subtract(price_0)
        bool_0 = price_0.gte(price_0)
        price_2 = price_0.subtract(price_0)
        int_0 = price_1.as_integer()
    except BaseException:
        pass

def test_case_30():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_0 = price_0.gte(price_0)
        bool_1 = money_0.__bool__()
        price_1 = none_price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.negative()
    except BaseException:
        pass

def test_case_31():
    try:
        list_0 = []
        none_money_0 = module_0.NoneMoney()
        bool_0 = none_money_0.is_equal(list_0)
        none_money_1 = module_0.NoneMoney()
        money_0 = none_money_1.floor_divide(list_0)
        some_money_0 = module_0.SomeMoney()
    except BaseException:
        pass

def test_case_32():
    try:
        money_0 = module_0.Money()
        bool_0 = money_0.gt(money_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_1 = price_0.gte(price_0)
        tuple_0 = None
        money_1 = money_0.scalar_subtract(tuple_0)
    except BaseException:
        pass

def test_case_33():
    try:
        money_0 = module_0.Money()
        var_0 = None
        money_1 = money_0.__truediv__(var_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_0 = price_0.gte(price_0)
        price_1 = none_price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_2 = money_0.negative()
    except BaseException:
        pass

def test_case_34():
    try:
        none_price_0 = module_0.NonePrice()
        price_0 = module_0.Price()
        price_1 = module_0.Price()
        float_0 = -875.08813
        price_2 = none_price_0.scalar_add(float_0)
        price_3 = price_1.__mul__(price_0)
        price_4 = price_3.__pos__()
    except BaseException:
        pass

def test_case_35():
    try:
        money_0 = None
        str_0 = None
        str_1 = 'zu:&vgVzHp?K>=XpM'
        list_0 = [str_0, str_0, str_1]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.scalar_add(money_0)
    except BaseException:
        pass

def test_case_36():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.round()
        currency_type_0 = module_2.CurrencyType.METAL
        decimal_0 = module_1.Decimal()
        var_0 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_37():
    try:
        int_0 = -1990
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        price_1 = price_0.__mul__(none_price_0)
        float_0 = -508.274143
        money_0 = none_price_0.times(float_0)
        var_0 = price_1.__round__(int_0)
        var_1 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.scalar_add(var_1)
        str_0 = 'gf&}>n\tW LA'
        dict_0 = {str_0: str_0, str_0: price_0}
        none_money_1 = module_0.NoneMoney(**dict_0)
    except BaseException:
        pass

def test_case_38():
    try:
        int_0 = -1990
        none_price_0 = module_0.NonePrice()
        tuple_0 = None
        money_0 = none_price_0.times(tuple_0)
        str_0 = '!bWoC]7NGkU\x0b"D'
        money_1 = money_0.round(int_0)
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        str_1 = 'ZK[f.>,\nX2MZ53'
        str_2 = 'fgv90$A\x0cTV#f'
        int_1 = 119
        int_2 = 1243
        decimal_1 = module_1.Decimal()
        currency_0 = module_2.Currency(str_1, str_2, int_1, currency_type_0, decimal_1, int_2)
        str_3 = '}(t~4XK.c1;Fs:'
        currency_1 = module_2.Currency(str_0, str_3, int_1, currency_type_0, decimal_0, int_2)
        var_0 = None
        list_0 = [tuple_0, var_0, str_0, int_1]
        str_4 = 'RWF'
        var_1 = money_1.__round__()
        dict_0 = {str_4: var_1}
        none_money_0 = module_0.NoneMoney(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_39():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.subtract(money_0)
        money_2 = none_money_0.round()
        currency_type_0 = module_2.CurrencyType.METAL
        decimal_0 = module_1.Decimal()
        bool_0 = money_0.as_boolean()
        var_1 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        dict_0 = {}
        none_price_0 = module_0.NonePrice(**dict_0)
        price_0 = none_price_0.scalar_subtract(var_1)
        bool_1 = none_price_0.gt(price_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_1.add(price_1)
        bool_2 = price_2.gte(price_1)
        bool_3 = price_2.lt(price_2)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_3 = some_money_0.divide(var_0)
    except BaseException:
        pass

def test_case_40():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.round()
    except BaseException:
        pass

def test_case_41():
    try:
        dict_0 = {}
        price_0 = module_0.Price(**dict_0)
        price_1 = price_0.abs()
    except BaseException:
        pass

def test_case_42():
    try:
        none_money_0 = module_0.NoneMoney()
        str_0 = 'kNC*a%$~(~:/'
        str_1 = '^}xP+LPL,8O"'
        int_0 = 1482
        currency_type_0 = None
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        money_0 = none_money_0.with_ccy(currency_0)
        monetary_operation_exception_0 = module_0.MonetaryOperationException()
        money_1 = none_money_0.scalar_add(monetary_operation_exception_0)
        var_0 = None
        money_2 = money_1.scalar_subtract(var_0)
        money_3 = money_2.__floordiv__(var_0)
        str_2 = '!bWoC]7NGkU\x0b"D'
        int_1 = 5
        currency_type_1 = module_2.CurrencyType.MONEY
        decimal_1 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_1, money_2, money_2]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_1)
        currency_1 = module_2.Currency(str_2, str_2, int_1, currency_type_1, decimal_1, int_1)
        none_price_0 = module_0.NonePrice()
        bool_0 = none_price_0.lte(price_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_1)
        price_3 = price_1.subtract(price_2)
        price_4 = price_1.abs()
        bool_1 = price_1.gte(price_0)
        price_5 = price_0.floor_divide(var_1)
    except BaseException:
        pass

def test_case_43():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.__floordiv__(var_0)
        str_0 = '7.3yc!O[YAm'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        str_2 = 'oU\x0c{RUAQ- Hi'
        int_1 = 4
        currency_0 = module_2.Currency(str_1, str_2, int_1, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.convert(currency_0)
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        currency_1 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        bool_0 = some_price_0.lte(price_1)
        price_2 = some_price_0.subtract(price_1)
        decimal_1 = currency_1.quantize(decimal_0)
        price_3 = price_1.add(price_2)
        bool_1 = price_3.gte(price_2)
        bool_2 = price_1.lt(price_3)
        price_4 = price_2.floor_divide(var_0)
    except BaseException:
        pass

def test_case_44():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.__pos__()
        bool_0 = price_0.is_equal(price_0)
    except BaseException:
        pass

def test_case_45():
    try:
        money_0 = module_0.Money()
        bool_0 = money_0.lt(money_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_1 = price_0.gte(price_0)
        price_1 = none_price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = money_0.negative()
    except BaseException:
        pass

def test_case_46():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.__pos__()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        price_1 = price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_2 = money_0.__sub__(money_0)
        list_0 = [price_0]
        date_0 = module_3.date(*list_0)
    except BaseException:
        pass

def test_case_47():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.divide(money_0)
        var_0 = None
        money_2 = money_1.multiply(var_0)
        money_3 = none_money_0.round()
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.scalar_add(var_1)
    except BaseException:
        pass

def test_case_48():
    try:
        bytes_0 = b'\xcc6\xbfF\x1b\xda\xc7_B'
        int_0 = -196
        list_0 = [int_0, int_0, int_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.floor_divide(bytes_0)
    except BaseException:
        pass

def test_case_49():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        int_0 = 286
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = 'EF9oU&SShB%U@$'
        price_1 = price_0.subtract(price_0)
        float_0 = price_0.__float__()
        price_2 = price_0.round()
        bool_0 = price_2.gte(price_1)
        bool_1 = price_0.lt(price_2)
        str_1 = '[I>R7Cu'
        int_1 = -2350
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_3 = some_money_0.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_50():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.round()
        currency_type_0 = module_2.CurrencyType.METAL
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = some_price_0.as_integer()
    except BaseException:
        pass

def test_case_51():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.divide(money_0)
        var_0 = None
        money_2 = none_money_0.multiply(var_0)
        money_3 = none_money_0.round()
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.positive()
    except BaseException:
        pass

def test_case_52():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.divide(money_0)
        money_2 = none_money_0.round()
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_0 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        int_1 = 12
        str_2 = 'C\\'
        int_2 = 29
        currency_1 = module_2.Currency(str_2, str_1, int_2, currency_type_0, decimal_0, int_1)
        str_3 = '.VhG-\nHI)&1'
        str_4 = '\n        Returns foreign exchange rates for a given collection of currency pairs and dates.\n\n        :param queries: An iterable of :class:`Currency`, :class:`Currency` and :class:`Temporal` tuples.\n        :param strict: Indicates if we should raise a lookup error if that the foreign exchange rate can not be found.\n        :return: An iterable of rates.\n        '
        int_3 = 653
        currency_2 = module_2.Currency(str_3, str_4, int_3, currency_type_0, decimal_0, int_3)
        bool_0 = price_0.lt(price_0)
        none_money_1 = module_0.NoneMoney()
        money_3 = none_money_1.with_ccy(currency_1)
        money_4 = none_money_0.add(money_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_5 = some_money_0.multiply(var_0)
    except BaseException:
        pass

def test_case_53():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.divide(money_0)
        currency_0 = None
        money_2 = money_1.with_ccy(currency_0)
        var_0 = None
        money_3 = none_money_0.multiply(var_0)
        money_4 = none_money_0.round()
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.scalar_subtract(var_1)
    except BaseException:
        pass

def test_case_54():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.divide(money_0)
        var_0 = None
        money_2 = none_money_0.multiply(var_0)
        money_3 = none_money_0.round()
        str_0 = '\n    Computes the day count fraction for the "Act/365L" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_act_365_l(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal(\'0.16939890710383\')\n    >>> round(dcfc_act_365_l(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal(\'0.17213114754098\')\n    >>> round(dcfc_act_365_l(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal(\'1.08196721311475\')\n    >>> round(dcfc_act_365_l(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal(\'1.32876712328767\')\n    '
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        str_2 = 'C\\'
        int_1 = 29
        int_2 = 1355
        currency_1 = module_2.Currency(str_2, str_1, int_1, currency_type_0, decimal_0, int_2)
        bool_0 = some_price_0.gt(price_0)
    except BaseException:
        pass

def test_case_55():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '!bWoC]7NGkU\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1354
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        str_1 = 'v9\t[h1{i[{og'
        currency_1 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        none_money_1 = module_0.NoneMoney()
        money_1 = money_0.__add__(money_0)
        price_0 = some_price_0.convert(currency_1)
    except BaseException:
        pass

def test_case_56():
    try:
        money_0 = None
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.divide(money_0)
        var_0 = None
        money_2 = none_money_0.multiply(var_0)
        money_3 = none_money_0.round()
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        str_2 = 'C\\'
        int_1 = 29
        int_2 = 1355
        currency_1 = module_2.Currency(str_2, str_1, int_1, currency_type_0, decimal_0, int_2)
        str_3 = '.VhG-\nHI)&1'
        str_4 = '\n        Returns foreign exchange rates for a given collection of currency pairs and dates.\n\n        :param queries: An iterable of :class:`Currency`, :class:`Currency` and :class:`Temporal` tuples.\n        :param strict: Indicates if we should raise a lookup error if that the foreign exchange rate can not be found.\n        :return: An iterable of rates.\n        '
        int_3 = 653
        currency_2 = module_2.Currency(str_3, str_4, int_2, currency_type_0, decimal_0, int_3)
        bool_0 = price_0.lt(price_0)
        none_money_1 = module_0.NoneMoney()
        money_4 = none_money_1.with_ccy(currency_1)
        price_1 = price_0.__neg__()
        money_5 = money_2.__abs__()
        bool_1 = money_5.gt(money_1)
        money_6 = none_money_0.add(money_1)
        money_7 = money_4.with_qty(decimal_0)
        price_2 = price_1.__pos__()
        price_3 = price_2.__mul__(var_0)
    except BaseException:
        pass

def test_case_57():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '7.3yc!OYm'
        str_1 = '!bWoC]7NGkU\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1354
        money_1 = none_money_0.round()
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.negative()
        money_3 = some_money_0.subtract(money_2)
        bool_1 = some_money_0.gte(money_2)
        bool_2 = some_money_0.lte(money_0)
        bool_3 = money_3.lte(money_3)
        dict_0 = {}
        none_price_0 = module_0.NonePrice(**dict_0)
        bool_4 = none_price_0.as_boolean()
        money_4 = some_money_0.negative()
        money_5 = some_money_0.subtract(money_0)
        bool_5 = money_5.__lt__(money_2)
        bool_6 = money_3.is_equal(var_0)
        money_6 = some_money_0.round()
    except BaseException:
        pass

def test_case_58():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = none_money_0.floor_divide(var_0)
        money_2 = money_1.__floordiv__(var_0)
        str_0 = 'JKf-M#(='
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        bool_0 = none_money_0.lte(money_1)
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.with_ccy(currency_0)
        price_2 = some_price_0.subtract(price_0)
        price_3 = price_0.add(price_2)
        bool_1 = price_3.gte(price_2)
        bool_2 = price_0.lt(price_3)
        some_money_0 = module_0.SomeMoney(*list_0)
        some_price_1 = module_0.SomePrice(*list_0)
        price_4 = some_price_1.convert(currency_0)
    except BaseException:
        pass

def test_case_59():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.round()
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        decimal_1 = currency_0.quantize(decimal_0)
        bool_0 = price_0.gte(price_0)
        price_2 = price_0.subtract(price_0)
        int_1 = price_1.as_integer()
        price_3 = some_price_0.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_60():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        int_0 = 311
        bool_0 = money_2.gte(money_2)
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        int_1 = 12
        str_0 = '[I>R7Cu'
        bool_1 = money_2.is_equal(money_1)
        str_1 = ']ly7S'
        currency_0 = module_2.Currency(str_1, str_0, int_1, currency_type_0, decimal_0, int_0)
        int_2 = -1004
        currency_1 = module_2.Currency(str_1, str_0, int_2, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_3 = some_money_0.convert(currency_1)
    except BaseException:
        pass

def test_case_61():
    try:
        money_0 = None
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        none_money_0 = module_0.NoneMoney()
        bool_0 = some_price_0.lte(price_0)
    except BaseException:
        pass

def test_case_62():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.__floordiv__(var_0)
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        bool_0 = none_money_0.lte(money_0)
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_1)
        bool_1 = price_2.gte(price_1)
        bool_2 = price_0.lt(price_2)
        currency_type_1 = module_2.CurrencyType.ALTERNATIVE
        str_2 = 'D\nhxL:+\x0bvRABL@M'
        int_1 = -2739
        currency_1 = module_2.Currency(str_2, str_0, int_1, currency_type_1, decimal_0, int_0)
        price_3 = some_price_0.convert(currency_0, some_price_0)
    except BaseException:
        pass

def test_case_63():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        money_1 = none_money_0.round()
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        decimal_1 = currency_0.quantize(decimal_0)
        str_2 = 'C\\'
        int_1 = 29
        bool_0 = price_0.as_boolean()
        int_2 = 1355
        currency_1 = module_2.Currency(str_2, str_1, int_1, currency_type_0, decimal_0, int_2)
        str_3 = '\n        Returns foreign exchange rates for a given collection of currency pairs and dates.\n\n        :param queries: An iterable of :class:`Currency`, :class:`Currency` and :class:`Temporal` tuples.\n        :param strict: Indicates if we should raise a lookup error if that the foreign exchange rate can not be found.\n        :return: An iterable of rates.\n        '
        currency_2 = module_2.Currency(str_2, str_3, int_2, currency_type_0, decimal_1, int_0)
        bool_1 = price_0.lt(price_0)
        none_money_1 = module_0.NoneMoney()
        money_2 = none_money_0.with_ccy(currency_2)
        money_3 = none_money_0.with_ccy(currency_1)
        money_4 = money_0.convert(currency_2)
        money_5 = none_money_0.add(money_4)
        price_1 = module_0.Price()
        price_2 = price_1.subtract(price_0)
    except BaseException:
        pass

def test_case_64():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = 'EF9oU&SShB%U@$'
        price_1 = price_0.subtract(price_0)
        float_0 = price_0.__float__()
        price_2 = price_1.abs()
        bool_0 = price_2.gte(price_1)
        bool_1 = price_0.lt(price_2)
        str_1 = '[I>R7Cu'
        int_0 = -2350
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_2 = some_money_0.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_65():
    try:
        money_0 = None
        str_0 = '7.3yc!O[YAmM'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_money_0 = module_0.NoneMoney()
        money_1 = none_money_0.with_ccy(currency_0)
        decimal_1 = currency_0.quantize(decimal_0)
        bool_0 = price_0.gte(price_0)
        price_1 = some_price_0.with_ccy(currency_0)
        bool_1 = price_1.lt(price_0)
    except BaseException:
        pass

def test_case_66():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '7.3yc!OYm'
        str_1 = '!bWoC]7NGkU\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1354
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_1 = some_money_0.negative()
        money_2 = some_money_0.subtract(money_1)
        bool_1 = some_money_0.gte(money_1)
        bool_2 = some_money_0.lte(money_0)
        dict_0 = {}
        none_price_0 = module_0.NonePrice(**dict_0)
        bool_3 = none_price_0.as_boolean()
        money_3 = money_0.__add__(money_2)
        money_4 = some_money_0.add(money_3)
        money_5 = some_money_0.subtract(money_0)
        money_6 = some_money_0.with_qty(decimal_0)
    except BaseException:
        pass

def test_case_67():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        money_1 = none_money_0.round()
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        decimal_1 = currency_0.quantize(decimal_0)
        price_1 = some_price_0.with_qty(decimal_1)
        currency_type_1 = module_2.CurrencyType.CRYPTO
        int_1 = None
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_1, decimal_1, int_1)
        price_2 = some_price_0.subtract(price_1)
        decimal_2 = currency_1.quantize(decimal_0)
        none_price_0 = module_0.NonePrice()
        price_3 = none_price_0.scalar_add(var_1)
        bool_0 = price_0.gte(price_3)
        some_price_1 = module_0.SomePrice()
    except BaseException:
        pass

def test_case_68():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.abs()
    except BaseException:
        pass

def test_case_69():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        price_1 = price_0.abs()
        price_2 = price_0.subtract(price_0)
        price_3 = price_2.abs()
        bool_0 = price_3.gte(price_1)
        bool_1 = price_0.lt(price_3)
        bool_2 = price_3.__le__(price_1)
        str_0 = '[I>R7Cu'
        str_1 = '\n    Consumes implementations of the algebra and returns a program which consumes opening and closing dates and produces\n    a general ledger.\n\n    :param read_initial_balances: Algebra implementation which reads initial balances.\n    :param read_journal_entries: Algebra implementation which reads journal entries.\n    :return: A function which consumes opening and closing dates and produces a general ledger\n    '
        int_0 = None
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        bool_3 = some_price_0.lte(price_2)
        price_4 = price_2.add(price_0)
        bool_4 = price_4.gte(price_0)
        int_1 = price_3.as_integer()
        price_5 = module_0.Price()
        bool_5 = price_1.__eq__(int_0)
        price_6 = price_2.floor_divide(var_1)
    except BaseException:
        pass

def test_case_70():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = none_money_0.round()
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        bool_0 = money_0.as_boolean()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        decimal_1 = currency_0.quantize(decimal_0)
        price_2 = price_0.add(price_1)
        bool_1 = price_2.gte(price_1)
        bool_2 = price_0.lt(price_2)
        price_3 = price_0.abs()
        price_4 = price_1.subtract(price_1)
        bool_3 = price_2.is_equal(price_2)
        price_5 = price_0.abs()
        price_6 = price_0.subtract(price_3)
        int_1 = price_1.as_integer()
        price_7 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_71():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.__floordiv__(var_0)
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        decimal_1 = currency_0.quantize(decimal_0)
        price_2 = price_0.add(price_1)
        bool_0 = price_2.gte(price_1)
        bool_1 = price_0.lt(price_2)
        price_3 = price_0.abs()
        price_4 = price_2.subtract(price_3)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_2 = some_money_0.scalar_subtract(var_1)
    except BaseException:
        pass

def test_case_72():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = none_money_0.subtract(money_0)
        money_2 = money_0.__floordiv__(var_0)
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        decimal_1 = currency_0.quantize(decimal_0)
        price_2 = price_0.with_ccy(currency_0)
        price_3 = price_2.add(price_0)
    except BaseException:
        pass

def test_case_73():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.__floordiv__(var_0)
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_2 = some_price_0.subtract(price_1)
        decimal_1 = currency_0.quantize(decimal_0)
        bool_0 = price_1.gte(price_2)
        bool_1 = price_1.lt(price_0)
        price_3 = price_1.abs()
        price_4 = price_1.subtract(price_3)
        int_1 = 681
        bool_2 = price_1.gt(price_0)
        str_2 = '\n    Consumes implementations of the algebra and returns a program which consumes opening and closing dates and produces\n    a general ledger.\n\n    :param read_initial_balances: Algebra implementation which reads initial balances.\n    :param read_journal_entries: Algebra implementation which reads journal entries.\n    :return: A function which consumes opening and closing dates and produces a general ledger\n    '
        int_2 = 719
        currency_1 = module_2.Currency(str_2, str_0, int_2, currency_type_0, decimal_1, int_1)
        price_5 = price_2.subtract(price_0)
        int_3 = price_3.as_integer()
        price_6 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_74():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '\na,vP6f6\x0c}\x0c,X'
        str_1 = '!bWoC]7NG`U\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.negative()
        bool_0 = some_price_0.gt(price_0)
        int_0 = 1354
        money_1 = none_money_0.round()
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_1 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.negative()
        money_3 = some_money_0.subtract(money_2)
        bool_2 = some_money_0.gte(money_2)
        money_4 = money_2.add(money_2)
        bool_3 = some_money_0.lte(money_0)
        bool_4 = money_3.lte(money_3)
        dict_0 = {}
        none_price_1 = module_0.NonePrice(**dict_0)
        bool_5 = none_price_1.as_boolean()
        money_5 = some_money_0.negative()
        money_6 = some_money_0.subtract(money_0)
        bool_6 = some_price_0.as_boolean()
        bool_7 = money_6.__lt__(money_2)
        bool_8 = money_3.is_equal(var_0)
        money_7 = money_6.convert(currency_0)
    except BaseException:
        pass

def test_case_75():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '7.3yc!OYm'
        str_1 = '!bWoC]7NGkU\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1354
        money_1 = none_money_0.floor_divide(var_0)
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_money_1 = module_0.NoneMoney()
        money_2 = some_money_0.negative()
        money_3 = some_money_0.with_ccy(currency_1)
        bool_1 = some_money_0.lte(money_0)
        money_4 = money_2.negative()
        money_5 = some_money_0.add(money_4)
        money_6 = some_money_0.subtract(money_0)
        bool_2 = money_3.__gt__(money_2)
    except BaseException:
        pass

def test_case_76():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.floor_divide(var_0)
        money_1 = money_0.__floordiv__(var_0)
        str_0 = '7.3yc!O[YAmM'
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        str_2 = 'oU\x0c{RUAQ- Hi'
        int_1 = 4
        currency_0 = module_2.Currency(str_1, str_2, int_1, currency_type_0, decimal_0, int_1)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.convert(currency_0)
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_1 = some_price_0.with_qty(decimal_0)
        currency_1 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_2 = some_price_0.subtract(price_1)
        decimal_1 = currency_1.quantize(decimal_0)
        price_3 = none_price_0.scalar_add(var_1)
        price_4 = price_1.add(price_3)
        bool_0 = price_4.gte(price_2)
        bool_1 = price_0.lt(price_1)
        str_3 = '[I>R7Cu'
        date_0 = None
        price_5 = price_0.scalar_subtract(var_1)
        price_6 = price_5.with_dov(date_0)
        currency_type_1 = module_2.CurrencyType.ALTERNATIVE
        int_2 = 2488
        currency_2 = module_2.Currency(str_0, str_3, int_2, currency_type_1, decimal_1, int_0)
        price_7 = some_price_0.convert(currency_2)
    except BaseException:
        pass

def test_case_77():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        currency_type_0 = module_2.CurrencyType.MONEY
        var_1 = None
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_3 = some_money_0.divide(var_1)
    except BaseException:
        pass

def test_case_78():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0]
        some_money_0 = module_0.SomeMoney(*list_1)
        money_0 = some_money_0.positive()
    except BaseException:
        pass

def test_case_79():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = none_money_0.floor_divide(var_0)
        money_2 = money_1.__floordiv__(var_0)
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        str_0 = 'Actual/Actual'
        str_1 = 'r-`l'
        int_1 = -699
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        price_1 = some_price_0.with_ccy(currency_0)
        price_2 = some_price_0.subtract(price_1)
    except BaseException:
        pass

def test_case_80():
    try:
        var_0 = None
        int_0 = 1511
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.round(int_0)
        int_1 = 12
        none_price_1 = module_0.NonePrice()
        price_1 = none_price_1.round(int_1)
        price_2 = price_1.multiply(var_0)
        price_3 = module_0.Price()
        money_0 = price_3.times(var_0)
    except BaseException:
        pass

def test_case_81():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = none_money_0.floor_divide(var_0)
        money_2 = money_1.__floordiv__(var_0)
        str_0 = 'JKf-M#(='
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        bool_0 = none_money_0.lte(money_1)
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_1)
        bool_1 = price_2.gte(price_1)
        bool_2 = price_0.lt(price_2)
        str_2 = None
        date_0 = None
        price_3 = price_0.with_dov(date_0)
        currency_type_1 = module_2.CurrencyType.ALTERNATIVE
        int_1 = 2
        currency_1 = module_2.Currency(str_0, str_2, int_0, currency_type_1, decimal_0, int_1)
        price_4 = some_price_0.convert(currency_1)
    except BaseException:
        pass

def test_case_82():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        str_0 = 'JKf-M#(='
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        bool_0 = money_0.__lt__(money_0)
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_1)
        bool_1 = price_2.gte(price_1)
        bool_2 = price_0.lt(price_2)
        bool_3 = price_2.gt(price_0)
        price_3 = price_0.with_ccy(currency_0)
        decimal_1 = currency_0.quantize(decimal_0)
        price_4 = price_2.add(price_2)
        bool_4 = price_3.gte(price_0)
    except BaseException:
        pass

def test_case_83():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        str_0 = 'JKf-M#(='
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_1)
        bool_0 = price_2.gte(price_1)
        bool_1 = price_0.lt(price_2)
        bool_2 = price_2.gt(price_0)
        int_0 = None
        str_1 = '\x0bu>&0g'
        currency_0 = module_2.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_3 = some_price_0.add(price_2)
        int_1 = price_3.as_integer()
        price_4 = price_0.add(price_3)
        price_5 = price_4.round()
        bool_3 = price_5.lt(price_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        money_3 = money_1.subtract(money_1)
        money_4 = some_money_0.subtract(money_0)
        float_0 = money_4.as_float()
    except BaseException:
        pass

def test_case_84():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        str_0 = 'JKf-M#(='
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        bool_0 = money_0.__lt__(money_0)
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_1)
        bool_1 = price_2.gte(price_1)
        bool_2 = price_0.lt(price_2)
        str_2 = '[I>R7Cu'
        bool_3 = price_2.gt(price_0)
        int_1 = None
        price_3 = price_0.with_ccy(currency_0)
        currency_1 = module_2.Currency(str_1, str_2, int_1, currency_type_0, decimal_0, int_1)
        price_4 = some_price_0.add(price_0)
        int_2 = price_1.as_integer()
        bool_4 = some_price_0.lte(price_3)
    except BaseException:
        pass

def test_case_85():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.negative()
    except BaseException:
        pass

def test_case_86():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.__floordiv__(var_0)
        str_0 = 'JKf-M#(='
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 5
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_1)
        bool_0 = price_2.gte(price_1)
        bool_1 = price_2.gt(price_0)
        str_2 = '\n    Consumes implementations of the algebra and returns a program which consumes opening and closing dates and produces\n    a general ledger.\n\n    :param read_initial_balances: Algebra implementation which reads initial balances.\n    :param read_journal_entries: Algebra implementation which reads journal entries.\n    :return: A function which consumes opening and closing dates and produces a general ledger\n    '
        int_1 = None
        int_2 = 366
        currency_1 = module_2.Currency(str_0, str_2, int_1, currency_type_0, decimal_0, int_2)
        price_3 = some_price_0.add(price_2)
        int_3 = price_1.as_integer()
        bool_2 = some_price_0.lte(price_2)
        price_4 = price_0.add(price_1)
        price_5 = price_2.round()
        price_6 = module_0.Price()
        bool_3 = price_6.lt(price_5)
        price_7 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_87():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.__floordiv__(var_0)
        str_0 = 'JKf-M#(='
        str_1 = '!bWoC]7NGkU\x0b"D'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_1 = some_price_0.subtract(price_0)
        price_2 = price_0.add(price_0)
        bool_0 = price_1.gte(price_1)
        bool_1 = price_2.lt(price_1)
        price_3 = price_2.with_ccy(currency_0)
        bool_2 = price_2.gt(price_3)
    except BaseException:
        pass

def test_case_88():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        price_0 = module_0.Price()
        var_1 = price_0.__round__()
    except BaseException:
        pass

def test_case_89():
    try:
        money_0 = module_0.Money()
        bool_0 = money_0.as_boolean()
    except BaseException:
        pass

def test_case_90():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        dict_0 = {}
        money_0 = module_0.Money(**dict_0)
        money_1 = money_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_91():
    try:
        money_0 = None
        str_0 = None
        str_1 = 'y[,!i\r'
        list_0 = [str_0, str_0, str_1]
        some_money_0 = module_0.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
    except BaseException:
        pass

def test_case_92():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        str_0 = '!bWoC]7NGkU\x0b"D'
        int_0 = 311
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_1 = price_0.abs()
        price_2 = price_0.subtract(price_0)
        price_3 = price_2.abs()
        bool_0 = price_3.gte(price_1)
        bool_1 = price_0.lt(price_3)
        bool_2 = money_2.is_equal(money_1)
        str_1 = '\n    Consumes implementations of the algebra and returns a program which consumes opening and closing dates and produces\n    a general ledger.\n\n    :param read_initial_balances: Algebra implementation which reads initial balances.\n    :param read_journal_entries: Algebra implementation which reads journal entries.\n    :return: A function which consumes opening and closing dates and produces a general ledger\n    '
        int_1 = None
        str_2 = '\x0bu>&0g'
        currency_1 = module_2.Currency(str_2, str_1, int_1, currency_type_0, decimal_0, int_0)
        price_4 = some_price_0.add(price_3)
        int_2 = price_4.as_integer()
        bool_3 = some_price_0.lte(price_4)
        price_5 = price_3.add(price_3)
        bool_4 = price_4.gte(price_3)
        int_3 = price_1.as_integer()
        price_6 = module_0.Price()
        bool_5 = price_6.__eq__(some_price_0)
        price_7 = some_price_0.convert(currency_1, bool_3)
    except BaseException:
        pass

def test_case_93():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.__neg__()
        bool_0 = price_0.is_equal(price_0)
    except BaseException:
        pass

def test_case_94():
    try:
        money_0 = module_0.Money()
        money_1 = money_0.add(money_0)
    except BaseException:
        pass

def test_case_95():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        str_0 = '!bWoC]7NGkU\x0b"D'
        int_0 = 311
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_1 = price_0.abs()
        price_2 = price_0.subtract(price_0)
        price_3 = price_2.abs()
        bool_0 = price_3.gte(price_1)
        bool_1 = price_0.lt(price_3)
        bool_2 = price_3.gt(price_0)
        bool_3 = money_2.is_equal(money_1)
        str_1 = '\n    Consumes implementations of the algebra and returns a program which consumes opening and closing dates and produces\n    a general ledger.\n\n    :param read_initial_balances: Algebra implementation which reads initial balances.\n    :param read_journal_entries: Algebra implementation which reads journal entries.\n    :return: A function which consumes opening and closing dates and produces a general ledger\n    '
        str_2 = '\x0b>g'
        currency_1 = module_2.Currency(str_2, str_1, int_0, currency_type_0, decimal_0, int_0)
        price_4 = some_price_0.add(price_3)
        int_1 = price_1.as_integer()
        bool_4 = some_price_0.lte(price_2)
        price_5 = price_2.add(price_2)
        price_6 = price_4.__pos__()
        bool_5 = price_5.gte(price_6)
        int_2 = price_3.as_integer()
        price_7 = module_0.Price()
        bool_6 = price_1.__eq__(int_1)
        price_8 = price_7.floor_divide(var_1)
    except BaseException:
        pass

def test_case_96():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        str_0 = '!bWoC]7NGkU\x0b"D'
        int_0 = 311
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_1 = price_0.abs()
        price_2 = price_0.subtract(price_0)
        bool_0 = price_2.gte(price_1)
        bool_1 = price_0.lt(price_0)
        bool_2 = money_2.is_equal(money_1)
        str_1 = '\n    Consumes implementations of the algebra and returns a program which consumes opening and closing dates and produces\n    a general ledger.\n\n    :param read_initial_balances: Algebra implementation which reads initial balances.\n    :param read_journal_entries: Algebra implementation which reads journal entries.\n    :return: A function which consumes opening and closing dates and produces a general ledger\n    '
        int_1 = None
        str_2 = '\x0b>g'
        currency_1 = module_2.Currency(str_2, str_1, int_1, currency_type_0, decimal_0, int_0)
        price_3 = some_price_0.add(price_1)
        int_2 = price_1.as_integer()
        bool_3 = some_price_0.lte(price_2)
        price_4 = price_2.add(price_2)
        price_5 = module_0.Price()
        price_6 = price_5.with_ccy(currency_1)
        str_3 = 'Stellar'
        str_4 = 'JMR){O\x0c}X\tdP\n'
        dict_0 = {str_3: int_1, str_2: money_0, str_4: str_3, str_2: currency_type_0}
        some_money_0 = module_0.SomeMoney(**dict_0)
    except BaseException:
        pass

def test_case_97():
    try:
        str_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        dict_1 = {str_0: str_0, str_0: str_0, str_0: dict_0}
        dict_2 = {}
        price_0 = module_0.Price(**dict_2)
        price_1 = price_0.__truediv__(dict_1)
        str_1 = 'y7#z;_0\x0b`Y2'
        int_0 = 2560
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        int_1 = 16
        list_0 = []
        decimal_1 = module_1.Decimal(*list_0)
        int_2 = -2437
        currency_0 = module_2.Currency(str_1, str_1, int_1, currency_type_0, decimal_1, int_2)
        decimal_2 = currency_0.quantize(decimal_0)
        currency_1 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_2, int_0)
        list_1 = []
        str_2 = '9K\\w'
        dict_3 = {str_2: str_2}
        none_price_0 = module_0.NonePrice(*list_1, **dict_3)
    except BaseException:
        pass

def test_case_98():
    try:
        var_0 = None
        price_0 = module_0.Price()
        price_1 = price_0.multiply(var_0)
    except BaseException:
        pass

def test_case_99():
    try:
        list_0 = []
        money_0 = module_0.Money(*list_0)
        var_0 = None
        money_1 = money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_100():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        money_1 = money_0.scalar_subtract(var_0)
        money_2 = money_1.__floordiv__(var_0)
        int_0 = 311
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        var_1 = money_2.__round__(int_0)
        some_price_0 = module_0.SomePrice(*list_0)
        none_price_0 = module_0.NonePrice()
        list_1 = [int_0, none_price_0, list_0]
        some_money_0 = module_0.SomeMoney(*list_1)
        int_1 = some_money_0.as_integer()
    except BaseException:
        pass

def test_case_101():
    try:
        money_0 = module_0.Money()
        var_0 = None
        money_1 = money_0.__floordiv__(var_0)
        none_price_0 = module_0.NonePrice()
    except BaseException:
        pass

def test_case_102():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.add(price_0)
    except BaseException:
        pass

def test_case_103():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '7.3yc!OYm'
        str_1 = '!bWoC]7NGkU\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1354
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_money_1 = module_0.NoneMoney()
        money_1 = some_money_0.negative()
        bool_1 = some_money_0.gte(money_1)
        bool_2 = some_money_0.lte(money_0)
        money_2 = money_0.__add__(money_0)
        money_3 = some_money_0.add(money_2)
        money_4 = some_money_0.subtract(money_0)
        bool_3 = money_4.__lt__(money_1)
        price_0 = some_price_0.convert(currency_1)
    except BaseException:
        pass

def test_case_104():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.scalar_add(var_0)
        money_1 = none_money_0.round()
        money_2 = money_1.scalar_subtract(var_0)
        price_0 = module_0.Price()
        float_0 = price_0.__float__()
        var_1 = price_0.__round__()
    except BaseException:
        pass

def test_case_105():
    try:
        str_0 = 'SRVsPr6rPFpNU\\B^*X)N'
        int_0 = 12
        currency_type_0 = module_2.CurrencyType.CRYPTO
        decimal_0 = None
        int_1 = -367
        currency_0 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        price_0 = module_0.Price()
        price_1 = price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_106():
    try:
        money_0 = module_0.Money()
        float_0 = money_0.as_float()
    except BaseException:
        pass

def test_case_107():
    try:
        currency_type_0 = module_2.CurrencyType.MONEY
        dict_0 = {currency_type_0: currency_type_0, currency_type_0: currency_type_0}
        money_0 = module_0.Money()
        money_1 = money_0.__mul__(dict_0)
        list_0 = []
        str_0 = '7.3yc!OYAmM'
        str_1 = 'Gold'
        str_2 = 'S3"Hq\nc0@r|q17Sc\t`O:'
        dict_1 = {str_0: list_0, str_1: list_0, str_0: list_0, str_2: list_0}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_1)
    except BaseException:
        pass

def test_case_108():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '!bWoC]7NGkU\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        var_1 = None
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        str_1 = '5E]cI'
        int_0 = 1355
        currency_0 = module_2.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_1 = none_money_0.scalar_add(var_1)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        none_money_1 = module_0.NoneMoney()
        money_2 = some_money_0.negative()
        money_3 = some_money_0.subtract(money_0)
        money_4 = money_0.__add__(money_3)
        money_5 = some_money_0.add(money_4)
        money_6 = some_money_0.with_ccy(currency_0)
        str_2 = '\n    Consumes implementations of the algebra and returns a program which consumes opening and closing dates and produces\n    a general ledger.\n\n    :param read_initial_balances: Algebra implementation which reads initial balances.\n    :param read_journal_entries: Algebra implementation which reads journal entries.\n    :return: A function which consumes opening and closing dates and produces a general ledger\n    '
        int_1 = None
        currency_1 = module_2.Currency(str_1, str_2, int_1, currency_type_0, decimal_0, int_1)
        money_7 = money_0.scalar_add(var_0)
        bool_1 = money_6.__lt__(money_2)
    except BaseException:
        pass

def test_case_109():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '7.3yc!OYm'
        str_1 = '!bWoC]7NGkU\x0b"D'
        money_1 = money_0.negative()
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1354
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        none_money_1 = module_0.NoneMoney()
        money_2 = some_money_0.negative()
        money_3 = some_money_0.subtract(money_2)
        bool_1 = some_money_0.gte(money_1)
        bool_2 = some_money_0.lte(money_0)
        money_4 = money_0.__add__(money_3)
        money_5 = some_money_0.add(money_4)
        money_6 = some_money_0.subtract(money_0)
        bool_3 = money_6.__lt__(money_2)
        price_0 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_110():
    try:
        money_0 = module_0.Money()
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_0 = price_0.gte(price_0)
        currency_0 = None
        money_1 = money_0.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_111():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.round()
        money_1 = money_0.__floordiv__(var_0)
        int_0 = 311
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_1, money_1]
        some_price_0 = module_0.SomePrice(*list_0)
        price_0 = some_price_0.with_qty(decimal_0)
        price_1 = price_0.abs()
        str_0 = 'EF9oU&SShB%U@$'
        price_2 = price_0.subtract(price_0)
        float_0 = price_0.__float__()
        price_3 = price_2.abs()
        bool_0 = price_3.gte(price_1)
        bool_1 = none_money_0.is_equal(money_0)
        bool_2 = price_0.lt(price_3)
        str_1 = '[I>R7Cu'
        dict_0 = {}
        some_money_0 = module_0.SomeMoney(*list_0, **dict_0)
        bool_3 = some_money_0.as_boolean()
        int_1 = -2350
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        some_money_1 = module_0.SomeMoney(*list_0)
        money_2 = some_money_1.convert(currency_0, bool_0)
    except BaseException:
        pass

def test_case_112():
    try:
        none_money_0 = module_0.NoneMoney()
        money_0 = none_money_0.positive()
        str_0 = '7.3yc!OYm'
        str_1 = '!bWoC]7NGkU\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1354
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_1 = some_money_0.negative()
        money_2 = some_money_0.subtract(money_1)
        bool_1 = some_money_0.gte(money_1)
        bool_2 = some_money_0.lte(money_0)
        dict_0 = {}
        none_price_0 = module_0.NonePrice(**dict_0)
        bool_3 = none_price_0.as_boolean()
        money_3 = money_1.with_ccy(currency_0)
        money_4 = some_money_0.add(money_3)
    except BaseException:
        pass

def test_case_113():
    try:
        money_0 = module_0.Money()
        var_0 = None
        money_1 = money_0.__add__(money_0)
        money_2 = money_0.__truediv__(var_0)
        none_price_0 = module_0.NonePrice()
        price_0 = none_price_0.positive()
        bool_0 = price_0.gte(price_0)
        price_1 = none_price_0.subtract(price_0)
        none_money_0 = module_0.NoneMoney()
        money_3 = money_0.negative()
    except BaseException:
        pass

def test_case_114():
    try:
        price_0 = module_0.Price()
        price_1 = price_0.__pos__()
        var_0 = None
        price_2 = price_0.__floordiv__(var_0)
        bool_0 = price_0.is_equal(price_0)
    except BaseException:
        pass

def test_case_115():
    try:
        str_0 = 'makeguid'
        str_1 = 'x.w+z(y9=xf!32v<Mt'
        int_0 = 4
        currency_type_0 = module_2.CurrencyType.METAL
        decimal_0 = module_1.Decimal()
        currency_0 = module_2.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        int_1 = -585
        price_0 = module_0.Price()
        price_1 = price_0.scalar_subtract(int_1)
    except BaseException:
        pass

def test_case_116():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '\na,vP6f6\x0c}\x0c,X'
        str_1 = '!bWoC]7NG`U\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = -1502
        money_1 = none_money_0.round()
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = module_0.Price()
        none_price_0 = module_0.NonePrice()
        price_1 = none_price_0.negative()
        price_2 = price_1.add(price_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.negative()
        money_3 = some_money_0.subtract(money_2)
        bool_1 = some_money_0.gte(money_2)
        money_4 = money_2.add(money_2)
        bool_2 = some_money_0.lte(money_0)
        bool_3 = money_3.lte(money_3)
        dict_0 = {}
        none_price_1 = module_0.NonePrice(**dict_0)
        bool_4 = none_price_1.as_boolean()
        money_5 = some_money_0.negative()
        money_6 = some_money_0.subtract(money_0)
        bool_5 = price_0.gte(price_1)
        bool_6 = some_price_0.as_boolean()
        bool_7 = money_6.__lt__(money_2)
        bool_8 = money_3.is_equal(var_0)
        money_7 = money_6.convert(currency_0)
    except BaseException:
        pass

def test_case_117():
    try:
        none_money_0 = module_0.NoneMoney()
        var_0 = None
        money_0 = none_money_0.multiply(var_0)
        str_0 = '\na,vP6f6\x0c}\x0c,X'
        str_1 = '!bWoC]7NG`U\x0b"D'
        currency_type_0 = module_2.CurrencyType.MONEY
        decimal_0 = module_1.Decimal()
        list_0 = [currency_type_0, money_0, money_0]
        some_price_0 = module_0.SomePrice(*list_0)
        int_0 = 1354
        money_1 = none_money_0.round()
        currency_0 = module_2.Currency(str_1, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_money_0 = module_0.SomeMoney(*list_0)
        price_0 = module_0.Price()
        none_price_0 = module_0.NonePrice()
        price_1 = none_price_0.negative()
        price_2 = price_1.add(price_0)
        bool_0 = some_money_0.lt(money_0)
        currency_1 = module_2.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.negative()
        money_3 = some_money_0.subtract(money_2)
        bool_1 = some_money_0.gte(money_2)
        money_4 = money_2.add(money_2)
        bool_2 = some_money_0.lte(money_0)
        bool_3 = money_3.lte(money_3)
        dict_0 = {}
        none_price_1 = module_0.NonePrice(**dict_0)
        bool_4 = none_price_1.as_boolean()
        money_5 = some_money_0.negative()
        money_6 = some_money_0.subtract(money_0)
        bool_5 = some_price_0.as_boolean()
        bool_6 = money_6.__lt__(money_2)
        bool_7 = money_6.is_equal(money_2)
        money_7 = money_6.abs()
        money_8 = money_7.convert(currency_1)
    except BaseException:
        pass