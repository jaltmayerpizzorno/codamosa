# Automatically generated by Pynguin.
import pymonet.monad_try as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = -899
    bool_0 = True
    try_0 = module_0.Try(int_0, bool_0)

def test_case_2():
    str_0 = 'Wu<i_\r7<w $9wGj]'
    str_1 = ';#)'
    bool_0 = False
    try_0 = module_0.Try(str_1, bool_0)
    bool_1 = try_0.__eq__(str_0)

def test_case_3():
    bytes_0 = b'f\x94P'
    bool_0 = False
    try_0 = module_0.Try(bytes_0, bool_0)
    str_0 = try_0.__str__()

def test_case_4():
    bytes_0 = b'\xef\xc4\xbcQ\xa7$\xd5\x8et\x9b\x1f\x9d.nW\x07\xad`'
    str_0 = '\n        Transform Box into Right either.\n\n        :returns: right Either monad with previous value\n        :rtype: Right[A]\n        '
    set_0 = {bytes_0, bytes_0, str_0}
    str_1 = '/_.P_0k@"'
    bool_0 = False
    try_0 = module_0.Try(str_1, bool_0)
    var_0 = try_0.map(set_0)
    bool_1 = True
    try_1 = module_0.Try(bool_1, bool_1)
    bool_2 = False
    try_2 = module_0.Try(bool_2, bool_1)
    try_3 = module_0.Try(bool_2, bool_2)
    var_1 = lambda x: x
    var_2 = try_1.filter(var_1)
    var_3 = lambda x: x
    var_4 = try_2.filter(var_3)
    var_5 = var_4.is_success
    var_6 = lambda x: x
    var_7 = try_3.filter(var_6)
    var_8 = var_7.is_success

def test_case_5():
    float_0 = 2533.2
    list_0 = [float_0, float_0, float_0]
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)
    var_0 = try_0.bind(list_0)

def test_case_6():
    bytes_0 = b'\r\x14f1\n\xf6\x95\xcc\xfb\xe9\x97\x95*\x88o\xb9\xeb;\xc1\xc1'
    set_0 = {bytes_0, bytes_0, bytes_0, bytes_0}
    bool_0 = False
    str_0 = '2Z'
    str_1 = 'yD@I\nW`dp7*'
    try_0 = module_0.Try(str_1, bool_0)
    list_0 = []
    var_0 = try_0.on_success(list_0)
    var_1 = try_0.on_success(str_0)
    try_1 = module_0.Try(set_0, bool_0)

def test_case_7():
    bytes_0 = b'=\xac|\x99\x15\xed\xe74\xd8\xb7\xa9'
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    bool_0 = False
    try_0 = module_0.Try(bytes_0, bool_0)
    var_0 = try_0.filter(tuple_0)
    str_0 = '\n        Returns new ImmutableList with each element mapped into\n        result of argument called with each element of ImmutableList\n\n        :param fn: function to call with ImmutableList value\n        :type fn: Function(A) -> B\n        :returns: ImmutableList[B]\n        '
    bool_1 = False
    try_1 = module_0.Try(str_0, bool_1)
    var_1 = try_1.bind(bytes_0)

def test_case_8():
    bool_0 = False
    try_0 = module_0.Try(bool_0, bool_0)
    var_0 = try_0.get()
    int_0 = None
    list_0 = [int_0, int_0, int_0]
    bool_1 = False
    try_1 = module_0.Try(list_0, bool_1)
    var_1 = try_1.get()

def test_case_9():
    bool_0 = False
    int_0 = False
    bool_1 = False
    try_0 = module_0.Try(int_0, bool_1)
    var_0 = try_0.get_or_else(bool_0)

def test_case_10():
    list_0 = []
    str_0 = '6+7QsD&\r<SDs;%'
    bool_0 = True
    try_0 = module_0.Try(str_0, bool_0)
    var_0 = try_0.get_or_else(list_0)

def test_case_11():
    bool_0 = True
    try_0 = module_0.Try(bool_0, bool_0)
    bool_1 = False
    try_1 = module_0.Try(bool_1, bool_0)
    try_2 = module_0.Try(bool_1, bool_1)
    var_0 = lambda x: x
    var_1 = try_0.filter(var_0)
    var_2 = lambda x: x
    var_3 = try_1.filter(var_2)
    var_4 = var_3.is_success
    var_5 = lambda x: x
    var_6 = try_2.filter(var_5)
    var_7 = var_6.is_success