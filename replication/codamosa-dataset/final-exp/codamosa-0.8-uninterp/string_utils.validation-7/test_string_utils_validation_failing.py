# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    try:
        str_0 = '{"name": "Peter"}'
        bool_0 = module_0.is_json(str_0)
        str_1 = '<3.=FB- YXf"TBL\td'
        bool_1 = module_0.is_isbn(str_1)
        str_2 = None
        bool_2 = False
        bool_3 = module_0.is_isbn(str_2, bool_2)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        bool_0 = module_0.is_number(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'http://www.mysite.com'
        str_1 = '5105105105105100'
        bool_0 = module_0.is_credit_card(str_0)
        str_2 = '4111111111111111'
        bool_1 = module_0.is_credit_card(str_2)
        bool_2 = module_0.is_credit_card(str_1, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '*HzK\x0cQ,J9!eB'
        bool_0 = module_0.is_pangram(str_0)
        bool_1 = module_0.is_slug(str_0, str_0)
        bool_2 = module_0.is_string(str_0)
        bool_3 = module_0.is_slug(bool_2)
        bool_4 = module_0.is_pangram(bool_1)
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
        bool_5 = i_s_b_n_checker_0.is_isbn_10()
        bool_6 = i_s_b_n_checker_0.is_isbn_10()
        bool_7 = module_0.is_camel_case(bool_1)
        bool_8 = i_s_b_n_checker_0.is_isbn_13()
        bool_9 = i_s_b_n_checker_0.is_isbn_10()
        bool_10 = module_0.is_string(str_0)
        bool_11 = module_0.is_string(str_0)
        str_1 = '\n    Checks if the string is a palindrome (https://en.wikipedia.org/wiki/Palindrome).\n\n    *Examples:*\n\n    >>> is_palindrome(\'LOL\') # returns true\n    >>> is_palindrome(\'Lol\') # returns false\n    >>> is_palindrome(\'Lol\', ignore_case=True) # returns true\n    >>> is_palindrome(\'ROTFL\') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :param ignore_spaces: False if white spaces matter (default), true otherwise.\n    :type ignore_spaces: bool\n    :param ignore_case: False if char case matters (default), true otherwise.\n    :type ignore_case: bool\n    :return: True if the string is a palindrome (like "otto", or "i topi non avevano nipoti" if strict=False),    False otherwise\n    '
        bool_12 = i_s_b_n_checker_0.is_isbn_10()
        bool_13 = module_0.is_isbn(str_1, bool_2)
        bool_14 = i_s_b_n_checker_0.is_isbn_13()
        bool_15 = i_s_b_n_checker_0.is_isbn_13()
        bool_16 = module_0.is_credit_card(str_0)
        str_2 = None
        bool_17 = i_s_b_n_checker_0.is_isbn_13()
        bool_18 = module_0.is_ip_v6(bool_5)
        bool_19 = i_s_b_n_checker_0.is_isbn_10()
        bool_20 = module_0.contains_html(str_2)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        bool_1 = module_0.is_ip(bool_0)
        str_0 = None
        int_0 = module_0.words_count(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'test.json'
        str_1 = 'r'
        str_2 = '{Svx\ns3'
        bool_0 = module_0.is_ip(str_2)
        var_0 = open(str_0, str_1)
    except BaseException:
        pass