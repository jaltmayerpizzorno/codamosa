# Automatically generated by Pynguin.
import tornado.concurrent as module_0
import builtins as module_1
import concurrent.futures._base as module_2
import _asyncio as module_3

def test_case_0():
    try:
        dict_0 = {}
        dummy_executor_0 = module_0.DummyExecutor(**dict_0)
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        future_0 = None
        bool_0 = module_0.is_future(return_value_ignored_error_0)
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_1():
    try:
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        list_0 = [return_value_ignored_error_0, return_value_ignored_error_0, return_value_ignored_error_0, return_value_ignored_error_0]
        base_exception_0 = module_1.BaseException(*list_0)
        dict_0 = None
        dict_1 = {}
        dummy_executor_0 = module_0.DummyExecutor(**dict_1)
        future_0 = dummy_executor_0.submit(dict_0)
        str_0 = 'Unknown xsrf cooVie versiQn'
        dict_2 = {str_0: list_0}
        callable_0 = module_0.run_on_executor(*list_0, **dict_2)
    except BaseException:
        pass

def test_case_2():
    try:
        future_0 = module_2.Future()
        bool_0 = True
        module_0.future_set_result_unless_cancelled(future_0, bool_0)
        list_0 = [future_0, bool_0, future_0, future_0]
        callable_0 = module_0.run_on_executor(*list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        future_0 = None
        module_0.chain_future(future_0, future_0)
    except BaseException:
        pass

def test_case_4():
    try:
        future_0 = None
        list_0 = []
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError(*list_0)
        callable_0 = None
        callable_1 = module_0.run_on_executor()
        tuple_0 = (return_value_ignored_error_0, callable_0, callable_0)
        module_0.future_set_exc_info(future_0, tuple_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = module_0.run_on_executor()
        list_0 = []
        future_0 = module_2.Future()
        callable_1 = None
        module_0.future_add_done_callback(future_0, callable_1)
        future_1 = module_3.Future(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callable_0 = module_0.run_on_executor()
        future_0 = module_2.Future()
        callable_1 = None
        none_type_0 = None
        bool_0 = True
        base_exception_0 = None
        tuple_0 = (none_type_0, bool_0, base_exception_0)
        module_0.future_set_exc_info(future_0, tuple_0)
        module_0.future_add_done_callback(future_0, callable_1)
    except BaseException:
        pass

def test_case_7():
    try:
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        list_0 = [return_value_ignored_error_0, return_value_ignored_error_0, return_value_ignored_error_0, return_value_ignored_error_0]
        base_exception_0 = module_1.BaseException(*list_0)
        list_1 = [base_exception_0]
        future_0 = module_2.Future()
        module_0.future_set_exception_unless_cancelled(future_0, base_exception_0)
        dict_0 = None
        dict_1 = {}
        dummy_executor_0 = module_0.DummyExecutor(**dict_1)
        future_1 = dummy_executor_0.submit(dict_0)
        dict_2 = module_1.dict()
        callable_0 = module_0.run_on_executor(*list_1, **dict_2)
        dummy_executor_1 = module_0.DummyExecutor()
        dummy_executor_1.shutdown()
        future_2 = module_3.Future(*list_1)
    except BaseException:
        pass

def test_case_8():
    try:
        return_value_ignored_error_0 = module_0.ReturnValueIgnoredError()
        list_0 = [return_value_ignored_error_0, return_value_ignored_error_0, return_value_ignored_error_0, return_value_ignored_error_0]
        base_exception_0 = module_1.BaseException(*list_0)
        list_1 = [base_exception_0]
        future_0 = module_2.Future()
        str_0 = '#EeA<9;\tv,O\'e:Q"Vi'
        module_0.future_set_result_unless_cancelled(future_0, str_0)
        future_1 = module_2.Future()
        module_0.future_set_exception_unless_cancelled(future_1, base_exception_0)
        callable_0 = module_0.run_on_executor(*list_1)
        module_0.future_add_done_callback(future_0, callable_0)
    except BaseException:
        pass