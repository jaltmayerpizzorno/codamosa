# Automatically generated by Pynguin.
import ansible.config.manager as module_0

def test_case_0():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'\xe2eq\x94\x82\tX\xf8=\xc0[A\xf0\xdd'
        str_0 = 'OA\x0b\tn\tvG;${]~A5q='
        tuple_0 = None
        var_0 = config_manager_0.get_config_value_and_origin(bytes_0, config_manager_0, str_0, tuple_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '[MO\nK1_"HX}(Ln-CA\\'
        var_0 = module_0.get_config_type(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        config_manager_0 = module_0.ConfigManager()
        dict_0 = None
        bytes_0 = b'\xc9\xc0\x1f\xc7\x8f\x1b\xb4\xc4*'
        var_0 = config_manager_0.get_plugin_vars(dict_0, bytes_0)
        int_0 = -1469
        config_manager_1 = module_0.ConfigManager(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'float'
        list_0 = [config_manager_0, str_0]
        plugin_0 = module_0.Plugin(*list_0)
        var_0 = config_manager_0.get_config_value(list_0, plugin_0)
    except BaseException:
        pass

def test_case_4():
    try:
        config_manager_0 = module_0.ConfigManager()
        dict_0 = {}
        config_manager_1 = module_0.ConfigManager(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = False
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data(bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 596
        str_0 = 'vJ'
        var_0 = module_0.ensure_type(int_0, str_0)
        setting_0 = module_0.Setting()
    except BaseException:
        pass

def test_case_7():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'\x1e\x03\x9b\x173\xd7re\x08\xb3x\xc7\xc4\x85)\\\xa1'
        var_0 = config_manager_0.get_configuration_definition(bytes_0)
        float_0 = 2153.0
        var_1 = config_manager_0.get_config_value_and_origin(float_0)
    except BaseException:
        pass

def test_case_8():
    try:
        config_manager_0 = module_0.ConfigManager()
        int_0 = 832
        var_0 = config_manager_0.get_configuration_definition(config_manager_0, config_manager_0, int_0)
        setting_0 = module_0.Setting()
    except BaseException:
        pass

def test_case_9():
    try:
        config_manager_0 = module_0.ConfigManager()
        int_0 = 832
        dict_0 = None
        var_0 = config_manager_0.get_configuration_definition(dict_0, int_0)
        complex_0 = None
        str_0 = 'f3d\n&0-z s]z0$pU.=Hs'
        var_1 = config_manager_0.get_config_value_and_origin(complex_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 3134
        dict_0 = {int_0: int_0}
        config_manager_0 = module_0.ConfigManager(dict_0, dict_0)
    except BaseException:
        pass

def test_case_11():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'zToX\\#'
        bool_0 = None
        int_0 = 832
        float_0 = -505.738
        dict_0 = {float_0: int_0, str_0: float_0}
        list_0 = [dict_0, config_manager_0, bool_0, bool_0]
        setting_0 = module_0.Setting(*list_0)
        var_0 = config_manager_0.get_config_value_and_origin(float_0, dict_0, dict_0, setting_0)
    except BaseException:
        pass

def test_case_12():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'\x1e\x03\x9b\x173\xd7re\x08\xb3x\xc7\xc4\x85)\\\xa1'
        var_0 = config_manager_0.get_configuration_definition(bytes_0)
        tuple_0 = None
        list_0 = None
        config_manager_1 = module_0.ConfigManager(list_0)
        set_0 = {config_manager_1, tuple_0, tuple_0, config_manager_0}
        complex_0 = None
        list_1 = [list_0, var_0, list_0, bytes_0]
        setting_0 = module_0.Setting(*list_1)
        var_1 = config_manager_0.get_config_value(config_manager_1, set_0, complex_0, setting_0)
    except BaseException:
        pass

def test_case_13():
    try:
        config_manager_0 = module_0.ConfigManager()
        str_0 = 'Repo: %s/%s'
        int_0 = -879
        var_0 = config_manager_0.update_config_data(str_0, int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        tuple_0 = ()
        str_0 = ',$a5ihMaVwP '
        str_1 = '::7Sym"Q~\r^ZF'
        dict_0 = {str_0: tuple_0, str_0: str_0, str_0: str_0, str_1: tuple_0}
        bool_0 = False
        config_manager_0 = module_0.ConfigManager()
        var_0 = config_manager_0.update_config_data(dict_0, bool_0)
    except BaseException:
        pass

def test_case_15():
    try:
        tuple_0 = ()
        config_manager_0 = module_0.ConfigManager(tuple_0)
    except BaseException:
        pass

def test_case_16():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'.\xe3'
        str_0 = '\r+PR6G>t\r\x0c\r%5'
        str_1 = 'vj'
        var_0 = config_manager_0.get_plugin_vars(str_0, bytes_0)
        bytes_1 = b'\xb1\xabb\xeaV\x14'
        list_0 = []
        bool_0 = True
        var_1 = config_manager_0.get_config_value_and_origin(bytes_1, list_0, str_1, bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'h9B8:c)lQSeHDAAJ'
        var_0 = module_0.resolve_path(str_0)
        tuple_0 = None
        float_0 = 4435.0
        var_1 = module_0.get_ini_config_value(tuple_0, float_0)
        float_1 = -2197.19592
        var_2 = module_0.get_config_type(float_1)
    except BaseException:
        pass

def test_case_18():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'\xb90\xbd\xba\xe9\x81\x822\xbb'
        var_0 = config_manager_0.get_configuration_definition(bytes_0)
        str_0 = '-aLk-iN'
        int_0 = 4094
        str_1 = None
        str_2 = 'ma'
        dict_0 = {str_1: int_0, config_manager_0: int_0, int_0: str_2, int_0: var_0}
        bool_0 = False
        var_1 = config_manager_0.get_plugin_options(str_1, dict_0, bool_0)
        var_2 = config_manager_0.get_plugin_options(str_0, int_0)
        str_3 = '`$`T>\\])yV"n>Yh2/'
        set_0 = set()
        var_3 = config_manager_0.initialize_plugin_configuration_definitions(config_manager_0, str_3, set_0)
        str_4 = "K`-XdO'SceY+"
        var_4 = config_manager_0.get_configuration_definition(str_4)
        bool_1 = False
        var_5 = config_manager_0.get_plugin_vars(bool_1, config_manager_0)
        var_6 = module_0.find_ini_config_file()
        bool_2 = True
        str_5 = 'b\tJ'
        dict_1 = {str_5: str_0}
        float_0 = 1000.0
        var_7 = config_manager_0.update_config_data()
        var_8 = config_manager_0.get_config_value(str_5, dict_1, bool_2, int_0, float_0)
    except BaseException:
        pass

def test_case_19():
    try:
        config_manager_0 = module_0.ConfigManager()
        bytes_0 = b'\x1e\x03\x9b\x173\xd7r\x08\xb3x\xc7\x85)\\'
        var_0 = config_manager_0.get_configuration_definition(bytes_0)
        str_0 = '-aLk-iN'
        int_0 = 4095
        var_1 = config_manager_0.get_plugin_options(str_0, int_0)
        str_1 = ':iK{zp,\x0cA_3Gho;fo`\\'
        set_0 = set()
        var_2 = config_manager_0.initialize_plugin_configuration_definitions(config_manager_0, str_1, set_0)
        bool_0 = False
        var_3 = config_manager_0.get_plugin_vars(bool_0, config_manager_0)
        complex_0 = None
        dict_0 = None
        var_4 = config_manager_0.initialize_plugin_configuration_definitions(config_manager_0, dict_0, set_0)
        var_5 = config_manager_0.get_config_value(int_0, complex_0)
    except BaseException:
        pass

def test_case_20():
    try:
        plugin_0 = None
        var_0 = module_0.find_ini_config_file()
        tuple_0 = (plugin_0,)
        bytes_0 = b'b'
        list_0 = [tuple_0, plugin_0, bytes_0, bytes_0]
        setting_0 = module_0.Setting(*list_0)
        config_manager_0 = module_0.ConfigManager()
        var_1 = config_manager_0.get_configuration_definitions(setting_0)
        var_2 = module_0.find_ini_config_file()
        int_0 = 315
        str_0 = 'qN\\U'
        str_1 = '%O'
        str_2 = 'v3_7%J&'
        str_3 = 't]#\n1["]N@/`fz**'
        dict_0 = {str_0: str_0, str_1: bytes_0, str_2: str_3}
        var_3 = config_manager_0.get_plugin_options(plugin_0, int_0, dict_0)
        setting_1 = module_0.Setting()
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'ansible'
        str_1 = 'string'
        var_0 = module_0.ensure_type(str_0, str_1)
        str_2 = '1'
        str_3 = 'int'
        var_1 = module_0.ensure_type(str_2, str_3)
        str_4 = 'float'
        var_2 = module_0.ensure_type(str_2, str_4)
        str_5 = 'dd,ee,ff'
        str_6 = 'list'
        var_3 = module_0.ensure_type(str_5, str_6)
        str_7 = '2'
        str_8 = '3'
        str_9 = [str_2, str_7, str_8]
        var_4 = module_0.ensure_type(str_9, str_6)
        str_10 = ''
        str_11 = 'none'
        var_5 = module_0.ensure_type(str_10, str_11)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = '/etc/ansible/ansible.cfg'
        var_0 = module_0.get_config_type(str_0)
        str_1 = '/etc/ansible/ansible.cfg1'
        var_1 = module_0.get_config_type(str_1)
    except BaseException:
        pass