# Automatically generated by Pynguin.
import tornado.log as module_0
import logging as module_1

def test_case_0():
    try:
        log_formatter_0 = module_0.LogFormatter()
        str_0 = log_formatter_0.format(log_formatter_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_2():
    try:
        module_0.define_logging_options()
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = ')b'
        bool_0 = False
        log_formatter_0 = module_0.LogFormatter(str_0, bool_0)
        tuple_0 = ()
        tuple_1 = (log_formatter_0, tuple_0)
        set_0 = {tuple_1}
        module_0.enable_pretty_logging(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '<V'
        str_1 = 'bXh9hg; J'
        bool_0 = True
        dict_0 = None
        log_formatter_0 = module_0.LogFormatter(str_0, str_1, bool_0, dict_0)
        log_formatter_1 = module_0.LogFormatter(dict_0)
        bool_1 = False
        module_0.enable_pretty_logging()
        log_formatter_2 = module_0.LogFormatter(bool_1)
        str_2 = log_formatter_2.format(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        optional_0 = None
        float_0 = -1043.2
        tuple_0 = (float_0,)
        logger_0 = module_1.Logger(tuple_0)
        module_0.enable_pretty_logging(optional_0, logger_0)
        str_0 = '%(asctime)s%(message)s'
        log_formatter_0 = module_0.LogFormatter(str_0)
        log_record_0 = module_1.LogRecord(str_0, str_0, str_0, str_0, str_0, str_0, str_0)
        str_1 = log_formatter_0.format(log_record_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '%(asctime)s%(message)s'
        log_formatter_0 = module_0.LogFormatter(str_0)
        log_record_0 = module_1.LogRecord(str_0, str_0, str_0, str_0, str_0, str_0, str_0)
        str_1 = log_formatter_0.format(log_record_0)
    except BaseException:
        pass

def test_case_7():
    try:
        log_formatter_0 = module_0.LogFormatter()
        bool_0 = False
        optional_0 = None
        list_0 = [bool_0]
        logger_0 = module_1.Logger(list_0)
        module_0.enable_pretty_logging(optional_0, logger_0)
        var_0 = logger_0.critical(log_formatter_0)
        float_0 = 60.0
        var_1 = logger_0.info(float_0)
        tuple_0 = None
        var_2 = logger_0.exception(tuple_0, *list_0)
        str_0 = log_formatter_0.format(optional_0)
    except BaseException:
        pass