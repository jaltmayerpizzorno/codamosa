# Automatically generated by Pynguin.
import ansible.plugins.action.validate_argument_spec as module_0

def test_case_0():
    try:
        int_0 = 3813
        set_0 = set()
        float_0 = -943.0792
        bool_0 = True
        set_1 = {float_0, bool_0}
        str_0 = 'InitiatorName='
        bytes_0 = b'y\xed\x10\x85\xf4n\x9e\x03\x81'
        action_module_0 = module_0.ActionModule(float_0, bool_0, set_1, str_0, set_1, bytes_0)
        var_0 = action_module_0.get_args_from_task_vars(int_0, set_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'kr5\rNAgj%hi{S'
        list_0 = [str_0, str_0, str_0]
        tuple_0 = None
        set_0 = {str_0, tuple_0}
        bytes_0 = b'\xe9\x89A'
        action_module_0 = module_0.ActionModule(list_0, tuple_0, str_0, set_0, list_0, bytes_0)
        var_0 = action_module_0.run()
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        str_0 = '\n    Ensures that vars contained in the parameter passed in are\n    returned as a list of dictionaries, to ensure for instance\n    that vars loaded from a file conform to an expected state.\n    '
        float_0 = -3175.4301
        dict_0 = {float_0: float_0, str_0: float_0}
        bool_0 = True
        int_0 = -3341
        action_module_0 = module_0.ActionModule(bool_0, int_0, float_0, int_0, tuple_0, str_0)
        var_0 = action_module_0.get_args_from_task_vars(dict_0, dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'Me)"/JBk%$'
        bytes_0 = b'\xb6uI\xe0\x13\x8f\xee\xc6'
        float_0 = 1291.70849
        int_0 = -1461
        complex_0 = None
        dict_0 = {}
        float_1 = -1775.937514
        set_0 = set()
        list_0 = [dict_0]
        float_2 = -390.938421
        str_1 = 't~bse[VcTW'
        str_2 = 'w+'
        action_module_0 = module_0.ActionModule(float_1, set_0, list_0, float_2, str_1, str_2)
        float_3 = -388.31
        action_module_1 = module_0.ActionModule(float_0, complex_0, int_0, list_0, float_3, bytes_0)
        set_1 = {int_0, bytes_0}
        tuple_0 = (set_1, complex_0)
        int_1 = 3502
        str_3 = 't\taJT"!6'
        action_module_2 = module_0.ActionModule(dict_0, tuple_0, int_0, int_1, str_3, set_1)
        bool_0 = True
        bytes_1 = b'Cw;\x815/'
        str_4 = 'Vb3t%IHa=<r'
        action_module_3 = module_0.ActionModule(action_module_0, int_1, bytes_1, list_0, str_4, set_1)
        var_0 = action_module_3.run(str_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tuple_0 = ()
        float_0 = 628.73
        str_0 = '\n    Ensures that vars contained in the parameter passed in are\n    returned as a list of dictionaries, to ensure for instance\n    that vars loaded from a file conform to an expected state.\n    '
        float_1 = -3175.4301
        set_0 = {float_0, tuple_0, str_0}
        bytes_0 = None
        tuple_1 = (set_0, bytes_0)
        bool_0 = True
        float_2 = -2186.680228
        bool_1 = False
        int_0 = -3376
        str_1 = '.24'
        action_module_0 = module_0.ActionModule(bool_0, int_0, float_1, int_0, tuple_0, str_1)
        list_0 = [float_2, action_module_0, float_2]
        int_1 = 656000
        dict_0 = {int_1: tuple_1, bool_1: float_1, action_module_0: float_2}
        dict_1 = {str_1: dict_0}
        var_0 = action_module_0.get_args_from_task_vars(dict_1, list_0)
    except BaseException:
        pass