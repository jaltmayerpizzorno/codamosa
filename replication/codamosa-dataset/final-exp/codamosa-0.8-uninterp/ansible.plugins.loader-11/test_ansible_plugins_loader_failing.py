# Automatically generated by Pynguin.
import ansible.plugins.loader as module_0

def test_case_0():
    try:
        var_0 = module_0.get_shell_plugin()
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '\x0bLz'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '/bin/bash'
        str_1 = 'sh'
        var_0 = module_0.get_shell_plugin(str_1, str_0)
        var_1 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = 2757.3
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.add_all_plugin_dirs(plugin_load_context_0)
        list_0 = [plugin_load_context_0, var_0]
        tuple_0 = None
        dict_0 = None
        plugin_loader_0 = None
        var_1 = plugin_load_context_0.resolve(list_0, tuple_0, dict_0, plugin_loader_0)
        var_2 = module_0.get_shell_plugin(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        set_0 = set()
        str_0 = 'q$_dI\tkY`S5m#'
        float_0 = -1054.997836175472
        tuple_0 = (float_0, str_0)
        tuple_1 = (float_0, float_0, str_0, tuple_0)
        bool_0 = False
        plugin_loader_0 = module_0.PluginLoader(str_0, tuple_1, bool_0, set_0)
        var_0 = plugin_loader_0.find_plugin(plugin_load_context_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'f",X!k3nyqcS'
        str_1 = "tnB(0<Xn\\n~6?,bTq's"
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_2 = "oI_g^P_DN`~N'x[RL\\"
        dict_0 = {str_0: str_0, str_1: plugin_load_context_0, str_2: str_2}
        str_3 = "_c'FoGj<"
        plugin_load_context_1 = module_0.PluginLoadContext()
        int_0 = -209
        str_4 = '~(8guy'
        plugin_loader_0 = module_0.PluginLoader(str_3, plugin_load_context_1, int_0, str_4)
        var_0 = plugin_loader_0.format_paths(dict_0)
        bytes_0 = None
        int_1 = 2258
        get_with_context_result_0 = None
        float_0 = 0.2
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, int_1, get_with_context_result_0, float_0)
        var_1 = module_0.get_shell_plugin(jinja2_loader_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = None
        bytes_0 = b'\x1e;zG\xe7\xees\x90\xe65\xb0\x06\x82'
        str_0 = 'cmd'
        jinja2_loader_0 = module_0.Jinja2Loader(bytes_0, str_0, str_0, tuple_0)
        var_0 = jinja2_loader_0.all()
    except BaseException:
        pass

def test_case_7():
    try:
        bool_0 = True
        var_0 = module_0.get_shell_plugin(bool_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        plugin_load_context_0 = module_0.PluginLoadContext()
        plugin_loader_0 = module_0.PluginLoader(bool_0, list_0, plugin_load_context_0, plugin_load_context_0)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'N#ZA&#C8+'
        bool_0 = False
        tuple_0 = (bool_0, str_0)
        dict_0 = {}
        bool_1 = True
        str_1 = 'Yn'
        float_0 = 1055.0
        plugin_loader_0 = module_0.PluginLoader(bool_1, str_1, float_0, bool_1)
        var_0 = plugin_loader_0.find_plugin_with_context(str_0, tuple_0, dict_0)
    except BaseException:
        pass

def test_case_10():
    try:
        bytes_0 = b'"v\x98\xd2\xa3\x1e\xca'
        bool_0 = False
        plugin_load_context_0 = module_0.PluginLoadContext()
        dict_0 = {bool_0: bool_0, bool_0: plugin_load_context_0, bool_0: bool_0}
        plugin_loader_0 = module_0.PluginLoader(bool_0, bool_0, plugin_load_context_0, dict_0)
        var_0 = plugin_loader_0.add_directory(bytes_0)
        int_0 = -122
        str_0 = 'j\r=\rEdaY/*\rFXykgYA'
        list_0 = None
        var_1 = plugin_load_context_0.resolve(int_0, str_0, list_0, list_0)
        var_2 = plugin_loader_0.__getstate__()
        list_1 = [bytes_0, bool_0]
        get_with_context_result_0 = module_0.get_with_context_result(*list_1)
        str_1 = "qLAbmd IUL$@q6k'jL\tL"
        set_0 = None
        var_3 = plugin_loader_0.find_plugin(get_with_context_result_0, str_1, set_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'kNy'
        tuple_0 = ()
        bool_0 = False
        list_0 = [bool_0, tuple_0]
        plugin_path_context_0 = module_0.PluginPathContext(list_0, list_0)
        set_0 = {bool_0, plugin_path_context_0, str_0, str_0}
        plugin_loader_0 = None
        str_1 = '-_J>.0K=.V#\nG!V'
        list_1 = [str_1, set_0]
        get_with_context_result_0 = module_0.get_with_context_result(*list_1)
        dict_0 = {str_0: plugin_path_context_0}
        jinja2_loader_0 = module_0.Jinja2Loader(str_1, set_0, get_with_context_result_0, list_0, dict_0)
        str_2 = 'Kw'
        plugin_load_context_0 = module_0.PluginLoadContext()
        float_0 = 2733.6125
        plugin_loader_1 = module_0.PluginLoader(jinja2_loader_0, str_2, plugin_path_context_0, plugin_load_context_0, float_0, bool_0)
        var_0 = plugin_loader_1.__setstate__(plugin_loader_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'path'
        str_1 = 'class'
        str_2 = 'base-class'
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, str_0, str_1, str_2)
        str_3 = 'pluginname'
        var_0 = jinja2_loader_0.find_plugin(str_3)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'\x04\xd4\xd3z\xc0S2_4G\xcbB\xe5eA4\xd6x\xb1'
        var_0 = module_0.add_all_plugin_dirs(bytes_0)
        str_0 = '/pynguin/shell_plugins/windows'
        dict_0 = {str_0: var_0, str_0: var_0}
        list_0 = [dict_0, str_0, dict_0, dict_0]
        str_1 = '_h@E5~%G&'
        jinja2_loader_0 = module_0.Jinja2Loader(str_0, dict_0, list_0, str_1)
        var_1 = jinja2_loader_0.get(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'base'
        dict_0 = {}
        var_0 = module_0.get_shell_plugin(dict_0, str_0)
        float_0 = -2532.4631
        set_0 = {str_0}
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_1 = plugin_load_context_0.record_deprecation(float_0, plugin_load_context_0, set_0)
    except BaseException:
        pass

def test_case_15():
    try:
        float_0 = 2114.33
        list_0 = []
        set_0 = set()
        str_0 = 'templates'
        dict_0 = {str_0: float_0, str_0: list_0, str_0: str_0}
        dict_1 = {}
        tuple_0 = (dict_1, str_0)
        tuple_1 = (float_0, set_0, dict_0, tuple_0)
        str_1 = 'YqMd|I5'
        tuple_2 = (tuple_1, str_1, set_0)
        plugin_loader_0 = module_0.PluginLoader(float_0, list_0, tuple_2, tuple_1)
        bytes_0 = b'W\xca|\xdc\xb1\xb3\x9f\xdcb\x8f\xc9;?.\x8a\xea\xf9'
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(plugin_loader_0, dict_0, bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        dict_0 = {}
        list_0 = []
        bytes_0 = b'\x9f,"~%\xb1\xae\x0e\xfc\xf4\xa2\xa4\x90`&\x95\xaf\r'
        list_1 = []
        float_0 = -1938.0
        bool_0 = True
        tuple_0 = (float_0, bool_0)
        plugin_loader_0 = module_0.PluginLoader(bytes_0, list_1, tuple_0, float_0, list_1)
        var_0 = plugin_loader_0.has_plugin(list_0)
        plugin_path_context_0 = module_0.PluginPathContext(list_0, list_1)
        tuple_1 = ()
        str_0 = '/input/ansible/plugins/doc_fragments/windows'
        str_1 = '|$<2]+&@4'
        list_2 = [str_1]
        plugin_loader_1 = module_0.PluginLoader(tuple_1, str_0, str_1, list_2)
        var_1 = plugin_loader_1.get_with_context(plugin_path_context_0, **dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'age_tamp^'
        dict_0 = {}
        float_0 = -982.8538
        list_0 = [float_0, str_0, float_0]
        str_1 = '*(&vokE7\tdW'
        dict_1 = {str_0: list_0, str_0: list_0, str_1: dict_0}
        int_0 = -1924
        list_1 = []
        jinja2_loader_0 = module_0.Jinja2Loader(int_0, dict_0, dict_0, list_1, dict_0)
        var_0 = jinja2_loader_0.all(*list_0, **dict_1)
        str_2 = '/usr/share/ansible/plugins/doc_fragments/windows'
        var_1 = module_0.get_shell_plugin(float_0, str_2)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'L'
        var_0 = module_0.get_shell_plugin(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '.'
        float_0 = 1000.0
        bool_0 = True
        list_0 = [str_0]
        str_1 = ''
        jinja2_loader_0 = module_0.Jinja2Loader(float_0, bool_0, list_0, str_1)
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_2 = '\x0b{;?.\n(b\t.D^qg!^r'
        str_3 = 'BQw,V^:M)27T]?";p'
        int_0 = 33188
        jinja2_loader_1 = module_0.Jinja2Loader(plugin_load_context_0, str_2, str_3, int_0)
        var_0 = jinja2_loader_1.find_plugin(jinja2_loader_0)
    except BaseException:
        pass

def test_case_20():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        str_0 = 'TZ\x0b[WM'
        tuple_0 = (str_0,)
        plugin_path_context_0 = module_0.PluginPathContext(tuple_0, tuple_0)
        bytes_0 = b'\xe5\xe6\x1b-g\x94G\xb7\x1c\x1f%v,wB\xd8\xb7\x89\xe8'
        str_1 = '"%~<p7d8"d*'
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, plugin_path_context_0, bytes_0, str_1)
        var_0 = plugin_loader_0.print_paths()
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = ' (5gZ\n?iElzJIs5|#:.'
        str_1 = 'age_stamp'
        dict_0 = {str_0: str_0, str_1: str_0}
        var_0 = module_0.add_all_plugin_dirs(dict_0)
        str_2 = '_MO'
        var_1 = module_0.get_shell_plugin(str_2)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = 'base'
        dict_0 = {}
        var_0 = module_0.get_shell_plugin(dict_0, str_0)
        float_0 = -2532.4631
        get_with_context_result_0 = None
        str_1 = '\t>. \rB3'
        str_2 = 'G|.n<DP=`0mN'
        str_3 = '/pynguin/shell_plugins/windows'
        jinja2_loader_0 = module_0.Jinja2Loader(get_with_context_result_0, str_1, get_with_context_result_0, str_2, str_3)
        list_0 = [dict_0, jinja2_loader_0, str_2, str_2]
        tuple_0 = ()
        list_1 = [float_0, dict_0, var_0, var_0]
        str_4 = '3)ZD'
        str_5 = 'I_8"8}w!c4*/_k&'
        plugin_loader_0 = module_0.PluginLoader(tuple_0, list_1, tuple_0, str_4, str_5)
        var_1 = plugin_loader_0.format_paths(list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'base'
        dict_0 = {}
        plugin_load_context_0 = module_0.PluginLoadContext()
        var_0 = module_0.get_shell_plugin(dict_0, str_0)
        set_0 = {str_0, str_0}
        plugin_load_context_1 = module_0.PluginLoadContext()
        bytes_0 = b'Z5\x83\xc6\xcbn\xea\xca\xda'
        var_1 = plugin_load_context_1.nope(bytes_0)
        dict_1 = None
        float_0 = 2313.9626
        str_1 = '@2EU'
        int_0 = 4484
        plugin_path_context_0 = module_0.PluginPathContext(str_1, int_0)
        dict_2 = {str_1: float_0, str_1: plugin_load_context_1}
        bytes_1 = b"UK\xa1\x1a\x88'\xa6\xce\x84\x18\x8a\xd9h\x01\xf6\x00\xee\x88Q"
        plugin_loader_0 = module_0.PluginLoader(float_0, plugin_path_context_0, dict_2, bytes_1, plugin_load_context_0)
        var_2 = plugin_loader_0.find_plugin_with_context(bytes_0, dict_1, set_0, str_1)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = 'jUL@eY1'
        plugin_load_context_0 = module_0.PluginLoadContext()
        int_0 = 2745
        list_0 = [str_0, int_0, int_0, plugin_load_context_0]
        bytes_0 = b'\xc1\x12\xf0\xceJ#\xc6'
        float_0 = 84.70929
        dict_0 = {}
        tuple_0 = (dict_0,)
        str_1 = 'O'
        plugin_path_context_0 = module_0.PluginPathContext(tuple_0, str_1)
        dict_1 = {int_0: int_0, int_0: plugin_path_context_0}
        plugin_load_context_1 = module_0.PluginLoadContext()
        var_0 = plugin_load_context_0.record_deprecation(float_0, dict_1, plugin_load_context_1)
        tuple_1 = (bytes_0,)
        set_0 = set()
        var_1 = plugin_load_context_0.resolve(int_0, list_0, tuple_1, set_0)
        str_2 = ''
        int_1 = -983
        plugin_path_context_1 = None
        var_2 = module_0.add_all_plugin_dirs(plugin_path_context_1)
        plugin_load_context_2 = module_0.PluginLoadContext()
        int_2 = -3415
        float_1 = 272.75
        tuple_2 = (plugin_load_context_2, int_2, float_1)
        bool_0 = False
        bool_1 = False
        dict_2 = {str_2: bool_1, str_2: plugin_load_context_2, int_2: str_0}
        jinja2_loader_0 = module_0.Jinja2Loader(bool_0, plugin_load_context_2, str_0, dict_2, int_1)
        list_1 = []
        bool_2 = False
        tuple_3 = (list_1, bool_2, jinja2_loader_0, jinja2_loader_0)
        plugin_loader_0 = module_0.PluginLoader(tuple_2, tuple_2, float_1, jinja2_loader_0, tuple_3)
        plugin_path_context_2 = module_0.PluginPathContext(str_2, jinja2_loader_0)
        var_3 = plugin_loader_0.get(bool_0)
    except BaseException:
        pass

def test_case_25():
    try:
        plugin_load_context_0 = module_0.PluginLoadContext()
        set_0 = set()
        str_0 = 'q$_dI\tkY`S5m#'
        float_0 = 601.2027985513339
        tuple_0 = (float_0, str_0)
        bool_0 = False
        tuple_1 = None
        plugin_loader_0 = module_0.PluginLoader(plugin_load_context_0, tuple_1, bool_0, set_0)
        bytes_0 = b''
        dict_0 = None
        var_0 = plugin_loader_0.has_plugin(set_0, dict_0)
        str_1 = 'cmd'
        list_0 = []
        bool_1 = False
        set_1 = {bool_0, bool_1, float_0, str_0}
        list_1 = []
        jinja2_loader_0 = module_0.Jinja2Loader(plugin_loader_0, set_1, list_1, tuple_0)
        var_1 = plugin_loader_0.has_plugin(bool_0, jinja2_loader_0)
        jinja2_loader_1 = module_0.Jinja2Loader(bytes_0, str_1, list_0, tuple_0)
        var_2 = jinja2_loader_1.all()
    except BaseException:
        pass