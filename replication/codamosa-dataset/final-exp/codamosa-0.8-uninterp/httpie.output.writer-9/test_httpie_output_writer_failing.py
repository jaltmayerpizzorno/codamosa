# Automatically generated by Pynguin.
import httpie.context as module_0
import requests.models as module_1
import argparse as module_2
import httpie.output.writer as module_3
import typing as module_4
import httpie.output.streams as module_5

def test_case_0():
    try:
        environment_0 = module_0.Environment()
        prepared_request_0 = module_1.PreparedRequest()
        namespace_0 = module_2.Namespace()
        var_0 = module_3.write_message(prepared_request_0, environment_0, namespace_0, namespace_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_stream_0 = None
        i_o_0 = None
        bool_0 = False
        var_0 = module_3.write_stream(base_stream_0, i_o_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        prepared_request_0 = None
        environment_0 = module_0.Environment()
        dict_0 = {}
        namespace_0 = module_2.Namespace(**dict_0)
        h_t_t_p_message_0 = None
        i_o_0 = module_4.IO()
        var_0 = i_o_0.read()
        list_0 = [var_0, var_0]
        base_stream_0 = module_5.BaseStream(h_t_t_p_message_0, list_0)
        bool_0 = None
        var_1 = module_3.build_output_stream_for_message(namespace_0, environment_0, prepared_request_0, bool_0, bool_0)
        text_i_o_0 = module_4.TextIO(**dict_0)
        bool_1 = True
        var_2 = module_3.write_stream_with_colors_win_py3(base_stream_0, text_i_o_0, bool_1)
    except BaseException:
        pass

def test_case_3():
    try:
        environment_0 = module_0.Environment()
        namespace_0 = module_2.Namespace()
        tuple_0 = module_3.get_stream_type_and_kwargs(environment_0, namespace_0)
    except BaseException:
        pass

def test_case_4():
    try:
        prepared_request_0 = module_1.PreparedRequest()
        environment_0 = module_0.Environment()
        namespace_0 = module_2.Namespace()
        bool_0 = True
        bool_1 = True
        var_0 = module_3.write_message(prepared_request_0, environment_0, namespace_0, bool_0, bool_1)
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = None
        bool_0 = False
        var_1 = module_3.build_output_stream_for_message(var_0, var_0, var_0, var_0, bool_0)
        var_2 = iter(var_1)
        var_3 = next(var_2)
    except BaseException:
        pass