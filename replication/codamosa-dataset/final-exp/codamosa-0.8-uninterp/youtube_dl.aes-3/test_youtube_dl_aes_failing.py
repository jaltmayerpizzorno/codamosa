# Automatically generated by Pynguin.
import youtube_dl.aes as module_0
import base64 as module_1
import youtube_dl.utils as module_2

def test_case_0():
    try:
        int_0 = -594
        var_0 = module_0.key_expansion(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        set_0 = set()
        str_0 = None
        int_0 = -385
        var_0 = module_0.aes_ctr_decrypt(set_0, str_0, int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bool_0 = False
        bytes_0 = b''
        list_0 = [bool_0]
        set_0 = {bool_0, bytes_0}
        var_0 = module_0.aes_cbc_decrypt(bytes_0, list_0, set_0)
    except BaseException:
        pass

def test_case_3():
    try:
        bytes_0 = b'\xa8\xf3B\xda\x90\x0b,\xd1\xe3_\xe7f\x10eC\xd1\xea\x11R\x02'
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        float_0 = 645.87
        str_0 = 'J_[K W6\r(rx7'
        var_0 = module_0.aes_cbc_encrypt(list_0, float_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '5xr\\NhW,A$\r7'
        set_0 = {str_0, str_0, str_0, str_0}
        var_0 = module_0.aes_decrypt(str_0, set_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '#LG'
        int_0 = -880
        str_1 = '%IG!"0'
        var_0 = module_0.aes_decrypt_text(str_0, int_0, str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        bytes_0 = b'\\&g\x9f\xfd*\xa1\xe1'
        var_0 = module_0.aes_decrypt(tuple_0, bytes_0)
        str_0 = '/mp4:protected/'
        var_1 = module_0.sub_bytes(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = -2395
        var_0 = module_0.rotate(int_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'TfE~-4e'
        var_0 = module_0.mix_columns_inv(str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        int_0 = None
        var_0 = module_0.shift_rows(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        str_0 = 'M$,V{'
        tuple_0 = (dict_0, str_0)
        list_0 = [tuple_0, tuple_0]
        var_0 = module_0.shift_rows_inv(list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '>ULS='
        tuple_0 = (str_0,)
        var_0 = module_0.inc(tuple_0)
    except BaseException:
        pass

def test_case_12():
    try:
        int_0 = None
        var_0 = module_0.sub_bytes_inv(int_0)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        bytes_0 = b'\\&g\x9f\xfd*\xa1\xe1'
        var_0 = module_0.aes_decrypt(tuple_0, bytes_0)
        str_0 = 'L`]^`C vF/=kJ9KZ{'
        var_1 = module_0.sub_bytes_inv(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '}..[iq@J6}m0n1Qy'
        set_0 = {str_0}
        bytes_0 = b'TL\x8d'
        var_0 = module_0.aes_decrypt(set_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = False
        bytes_0 = b''
        set_0 = {bool_0, bytes_0}
        str_0 = '%smobile/data.js'
        var_0 = module_0.aes_decrypt_text(bytes_0, str_0, set_0)
    except BaseException:
        pass

def test_case_16():
    try:
        bool_0 = False
        bytes_0 = b''
        list_0 = [bool_0]
        str_0 = 'Lt<Es4x+bWE@ljZwq'
        var_0 = module_0.shift_rows(str_0)
        set_0 = {bool_0, bytes_0}
        var_1 = module_0.aes_cbc_decrypt(bytes_0, list_0, set_0)
    except BaseException:
        pass

def test_case_17():
    try:
        bool_0 = True
        str_0 = '"av\'I+\n'
        list_0 = [bool_0, bool_0, bool_0]
        set_0 = {str_0}
        bool_1 = False
        var_0 = module_0.rijndael_mul(bool_0, bool_1)
        var_1 = module_0.aes_cbc_decrypt(str_0, list_0, set_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = b'\x13\xc2\xa7\x04A\xbd\xbd_\x88\x8f\x15W\xc7\x9a\xae?Y{'
        var_0 = module_0.mix_columns_inv(bytes_0)
        bool_0 = False
        str_0 = None
        str_1 = 'M0#9>),M;{'
        list_0 = [str_1, bytes_0, bool_0, str_0]
        var_1 = module_0.aes_cbc_decrypt(list_0, var_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'kPH+bIxk5D2deZiIxcaaaA=='
        var_0 = module_1.b64decode(str_0)
        var_1 = module_2.bytes_to_intlist(var_0)
        str_1 = '2jmj7l5rSw0yVb/vlWAYkK/YBwk='
        var_2 = module_1.b64decode(str_1)
        var_3 = module_2.bytes_to_intlist(var_2)
        str_2 = '3p8sf9S7lSLx6Ss896jVzw=='
        var_4 = module_1.b64decode(str_2)
        var_5 = module_2.bytes_to_intlist(var_4)
        var_6 = module_0.aes_cbc_decrypt(var_5, var_1, var_3)
        var_7 = module_2.intlist_to_bytes(var_6)
        str_3 = 'hello'
        var_8 = module_1.b64decode(str_3)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'YELLOW SUBMARINE'
        var_0 = module_2.bytes_to_intlist(str_0)
        bytes_0 = b'\n    AES in CBC mode.\n    Here is a nice picture of the submarine Voladora: http://bit.ly/Psjnf7\n    '
        int_0 = 0
        int_1 = [int_0]
        int_2 = 16
        var_1 = int_1 * int_2
        var_2 = module_0.aes_cbc_encrypt(bytes_0, var_0, var_1)
    except BaseException:
        pass