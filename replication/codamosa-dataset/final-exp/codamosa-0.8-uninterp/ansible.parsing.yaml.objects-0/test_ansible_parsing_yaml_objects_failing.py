# Automatically generated by Pynguin.
import ansible.parsing.yaml.objects as module_0

def test_case_0():
    try:
        ansible_mapping_0 = module_0.AnsibleMapping()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_mapping_0)
        var_0 = ansible_vault_encrypted_unicode_0.__float__()
    except BaseException:
        pass

def test_case_1():
    try:
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.isdecimal()
        var_1 = ansible_vault_encrypted_unicode_0.lower()
        var_2 = ansible_vault_encrypted_unicode_0.__le__(ansible_vault_encrypted_unicode_0)
        var_3 = ansible_vault_encrypted_unicode_0.__str__()
        var_4 = ansible_vault_encrypted_unicode_0.__unicode__()
        var_5 = ansible_vault_encrypted_unicode_0.__complex__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'test'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [ansible_vault_encrypted_unicode_0, str_0, str_0]
        str_1 = ':8]7w'
        dict_0 = {str_0: ansible_vault_encrypted_unicode_0, str_1: str_0}
        var_0 = ansible_vault_encrypted_unicode_0.format(*list_0, **dict_0)
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_2 = ansible_vault_encrypted_unicode_0.__int__(ansible_unicode_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'test'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        bytes_0 = b';v\xa4z'
        var_0 = ansible_vault_encrypted_unicode_0.__lt__(bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\\M6A'
        ansible_unicode_0 = module_0.AnsibleUnicode()
        dict_0 = {str_0: ansible_unicode_0}
        bytes_0 = b'\xf01\xe6\xde\xb7'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__le__(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '-$'
        str_1 = '|*'
        str_2 = '1b6Lm\rKl\t[$8?jN'
        dict_0 = {str_0: str_0, str_1: str_0, str_2: str_0}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        str_3 = 'R5jNu'
        list_0 = [str_3]
        tuple_0 = (str_3, list_0)
        bool_0 = False
        list_1 = [tuple_0, tuple_0, bool_0, tuple_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_0 = ansible_vault_encrypted_unicode_0.__gt__(ansible_sequence_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 266.185
        set_0 = {float_0, float_0}
        list_0 = [set_0, float_0]
        dict_0 = {}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(**dict_0)
        bytes_0 = b'S\x15/y\x1f\xb4'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.__mul__(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 't#st'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = [ansible_vault_encrypted_unicode_0, ansible_unicode_0, ansible_unicode_0]
        var_3 = ansible_vault_encrypted_unicode_1.center(list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '.j}i}kj@LBnA+yPA$'
        list_0 = [str_0, str_0, str_0]
        dict_0 = {}
        ansible_sequence_0 = module_0.AnsibleSequence(**dict_0)
        str_1 = '>Tw!-+ic'
        dict_1 = {str_1: str_1}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_0 = ansible_vault_encrypted_unicode_0.count(list_0, ansible_sequence_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = []
        str_0 = '4TV@\x0cSh\r'
        dict_0 = {str_0: list_0}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.isascii()
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        list_1 = [ansible_mapping_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_1.swapcase()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_2 = ansible_vault_encrypted_unicode_2.isdecimal()
        set_0 = set()
        var_3 = ansible_vault_encrypted_unicode_0.__ne__(set_0)
        var_4 = ansible_vault_encrypted_unicode_0.format()
        var_5 = ansible_vault_encrypted_unicode_2.swapcase()
        var_6 = ansible_vault_encrypted_unicode_2.__eq__(dict_0)
        var_7 = ansible_vault_encrypted_unicode_2.endswith(ansible_mapping_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -1165
        float_0 = -11.58412
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.find(int_0, float_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = '}{d1wKe{<(./ht!'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.islower()
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_sequence_1 = module_0.AnsibleSequence()
        var_1 = ansible_vault_encrypted_unicode_0.replace(ansible_sequence_0, ansible_sequence_1)
    except BaseException:
        pass

def test_case_12():
    try:
        bytes_0 = b'\x9c\xaf'
        str_0 = '%<+FmYn{279v@tf-q~'
        str_1 = 'AD4hqHT[JUF\rE5> '
        dict_0 = {str_0: bytes_0, str_0: str_0, str_1: bytes_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.capitalize()
        dict_1 = {bytes_0: bytes_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_1)
        var_1 = ansible_vault_encrypted_unicode_1.__repr__()
        var_2 = ansible_vault_encrypted_unicode_1.__radd__(bytes_0)
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_3 = ansible_vault_encrypted_unicode_2.__ne__(ansible_vault_encrypted_unicode_2)
        var_4 = ansible_vault_encrypted_unicode_2.istitle()
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_2 = 'daemon-reload'
        var_5 = ansible_vault_encrypted_unicode_2.rfind(ansible_mapping_0, str_2)
    except BaseException:
        pass

def test_case_13():
    try:
        tuple_0 = ()
        str_0 = 'ywy.:wh<,bb#!zZQ[%0('
        dict_0 = {str_0: tuple_0, str_0: str_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_0 = ansible_vault_encrypted_unicode_0.isupper()
        float_0 = None
        set_0 = {float_0}
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_1 = ansible_vault_encrypted_unicode_1.__contains__(tuple_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bytes_0 = b'5\xb9aw\xbf#\x16\xfeH\xce\x95\x9a'
        str_0 = 'q"n6(\\'
        tuple_0 = (str_0,)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.__repr__()
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        bool_0 = True
        list_1 = [bool_0, tuple_0]
        var_1 = ansible_vault_encrypted_unicode_0.ljust(list_0, *list_1)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 't#st'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        list_0 = []
        var_3 = ansible_vault_encrypted_unicode_0.__mod__(list_0)
        var_4 = ansible_vault_encrypted_unicode_0.__lt__(ansible_vault_encrypted_unicode_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        bytes_0 = b'\xb4;'
        var_5 = ansible_vault_encrypted_unicode_1.lstrip(bytes_0)
    except BaseException:
        pass

def test_case_16():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        set_0 = {ansible_unicode_0, ansible_unicode_0}
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_0)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        bool_0 = False
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_1 = ansible_vault_encrypted_unicode_1.capitalize()
        list_0 = [ansible_sequence_0, set_0, ansible_sequence_0, set_0]
        ansible_sequence_1 = module_0.AnsibleSequence()
        var_2 = ansible_vault_encrypted_unicode_0.casefold()
        int_0 = 3790
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        str_0 = "c'K/2SFN"
        str_1 = ''
        str_2 = None
        dict_0 = {str_0: ansible_unicode_0, str_1: bool_0, str_2: list_0}
        var_3 = ansible_vault_encrypted_unicode_0.rindex(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 's@r8O'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        set_0 = None
        int_0 = 989
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        tuple_0 = (set_0, int_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        bool_0 = False
        var_1 = ansible_vault_encrypted_unicode_0.rjust(bool_0)
        var_2 = ansible_vault_encrypted_unicode_1.isascii()
        ansible_base_y_a_m_l_object_0 = None
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_3 = ansible_vault_encrypted_unicode_0.isascii()
        dict_0 = {str_0: ansible_vault_encrypted_unicode_0, str_0: var_3}
        ansible_unicode_0 = module_0.AnsibleUnicode(**dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 't#st'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        str_1 = '{\'--exclude=\': \'--exclude=\', \'OEAutfx0Vb\\nW2kc":\': \'OEAutfx0Vb\\nW2kc":\'}'
        set_0 = {ansible_vault_encrypted_unicode_0, ansible_vault_encrypted_unicode_1, ansible_unicode_0, str_1}
        var_2 = ansible_vault_encrypted_unicode_0.rstrip()
        var_3 = ansible_vault_encrypted_unicode_1.__le__(ansible_vault_encrypted_unicode_1)
        var_4 = ansible_vault_encrypted_unicode_1.rfind(set_0)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = -199
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_0.is_encrypted()
        str_0 = '+D_"so@;l`{S?A^'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_1 = ansible_vault_encrypted_unicode_1.rsplit(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = False
        list_0 = []
        bytes_0 = b'3\xc8\xd56\x12\xd2\x84\xae\xe3\xd8\xa5hP\xa8'
        str_0 = 'e5K<\x0cSZh7}\x0bu1poJU\n\\D'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(bytes_0)
        float_0 = -2061.0
        int_0 = -1003
        tuple_0 = (float_0, int_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_1 = ansible_vault_encrypted_unicode_1.startswith(bool_0, list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        complex_0 = None
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        int_0 = 4095
        float_0 = -897.7574929228792
        int_1 = None
        dict_0 = {}
        list_0 = [complex_0, int_0, int_0, int_0]
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_0 = ansible_vault_encrypted_unicode_0.title()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(dict_0)
        var_1 = ansible_vault_encrypted_unicode_1.replace(int_0, float_0, int_1)
    except BaseException:
        pass

def test_case_22():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        float_0 = 0.1
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.upper()
        var_1 = ansible_vault_encrypted_unicode_0.startswith(ansible_unicode_0)
        bool_0 = True
        var_2 = ansible_vault_encrypted_unicode_0.__add__(bool_0)
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        bool_1 = False
        var_3 = ansible_vault_encrypted_unicode_0.lower()
        var_4 = ansible_vault_encrypted_unicode_0.rfind(float_0, bool_1)
    except BaseException:
        pass

def test_case_23():
    try:
        list_0 = None
        float_0 = 39.5486
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        var_0 = ansible_vault_encrypted_unicode_0.expandtabs()
        bool_0 = True
        int_0 = 2424
        var_1 = ansible_vault_encrypted_unicode_0.zfill(int_0)
        str_0 = '->qB&%'
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_2 = ansible_vault_encrypted_unicode_1.lower()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(bool_0)
        var_3 = ansible_vault_encrypted_unicode_0.isupper()
        var_4 = ansible_vault_encrypted_unicode_1.__contains__(list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        list_0 = []
        str_0 = '4TV@\x0cSh\r'
        dict_0 = {str_0: list_0}
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject(*list_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_base_y_a_m_l_object_0)
        var_0 = ansible_vault_encrypted_unicode_0.isascii()
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
        list_1 = [ansible_mapping_0]
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_1)
        var_1 = ansible_vault_encrypted_unicode_1.swapcase()
        ansible_unicode_0 = module_0.AnsibleUnicode()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_unicode_0)
        var_2 = ansible_vault_encrypted_unicode_2.isdecimal()
        set_0 = set()
        var_3 = ansible_vault_encrypted_unicode_0.__ne__(set_0)
        var_4 = ansible_vault_encrypted_unicode_0.format()
        list_2 = [list_0, ansible_vault_encrypted_unicode_1]
        tuple_0 = (str_0, list_2, ansible_mapping_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_5 = ansible_vault_encrypted_unicode_3.index(ansible_mapping_0)
    except BaseException:
        pass

def test_case_25():
    try:
        tuple_0 = ()
        list_0 = [tuple_0]
        str_0 = 'force-confdef,force-confold'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        var_0 = ansible_vault_encrypted_unicode_0.isalnum()
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(list_0)
        var_1 = ansible_vault_encrypted_unicode_1.swapcase()
        int_0 = 304
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        var_2 = ansible_vault_encrypted_unicode_2.isascii()
        str_1 = 'u30hVa8'
        str_2 = '|"_5_5@\tX~Lw]Nm['
        list_1 = [str_1, str_2, str_2, int_0]
        dict_0 = {str_1: str_1, str_2: list_1}
        var_3 = ansible_vault_encrypted_unicode_2.__lt__(dict_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'G-?b'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        ansible_unicode_0 = None
        var_0 = ansible_vault_encrypted_unicode_0.join(ansible_unicode_0)
    except BaseException:
        pass

def test_case_27():
    try:
        list_0 = []
        ansible_sequence_0 = module_0.AnsibleSequence(*list_0)
        list_1 = [ansible_sequence_0]
        bool_0 = True
        tuple_0 = (ansible_sequence_0, bool_0)
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_0 = ansible_vault_encrypted_unicode_0.translate(*list_1)
    except BaseException:
        pass

def test_case_28():
    try:
        str_0 = 't#st'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.is_encrypted()
        var_2 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        list_0 = []
        var_3 = ansible_vault_encrypted_unicode_0.__mod__(list_0)
        var_4 = ansible_vault_encrypted_unicode_1.__lt__(ansible_vault_encrypted_unicode_1)
        ansible_mapping_0 = None
        float_0 = 1148.27
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(float_0)
        tuple_0 = (ansible_mapping_0, ansible_unicode_0, float_0)
        ansible_vault_encrypted_unicode_3 = module_0.AnsibleVaultEncryptedUnicode(tuple_0)
        var_5 = ansible_vault_encrypted_unicode_3.encode()
    except BaseException:
        pass

def test_case_29():
    try:
        bytes_0 = b'\x9c\xaf'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(bytes_0)
        var_0 = ansible_vault_encrypted_unicode_0.isnumeric()
        var_1 = ansible_vault_encrypted_unicode_0.isidentifier()
        var_2 = ansible_vault_encrypted_unicode_0.isascii()
        var_3 = ansible_vault_encrypted_unicode_0.__ne__(ansible_vault_encrypted_unicode_0)
        ansible_mapping_0 = module_0.AnsibleMapping()
        str_0 = 'daemon-Beload'
        var_4 = ansible_vault_encrypted_unicode_0.rfind(ansible_mapping_0, str_0)
    except BaseException:
        pass

def test_case_30():
    try:
        int_0 = 1589
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(int_0)
        str_0 = ''
        var_0 = ansible_vault_encrypted_unicode_0.__rmod__(str_0)
        var_1 = ansible_vault_encrypted_unicode_0.__str__()
        var_2 = ansible_vault_encrypted_unicode_0.__str__()
        str_1 = '%t<\x0c'
        list_0 = []
        var_3 = ansible_vault_encrypted_unicode_0.__mod__(list_0)
        var_4 = ansible_vault_encrypted_unicode_0.__add__(str_1)
        var_5 = ansible_vault_encrypted_unicode_0.startswith(int_0)
    except BaseException:
        pass

def test_case_31():
    try:
        bool_0 = True
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_0 = ansible_vault_encrypted_unicode_0.rjust(bool_0)
        float_0 = 12.005079912261762
        var_1 = ansible_vault_encrypted_unicode_0.isdecimal()
        str_0 = 'password_expire_max'
        str_1 = None
        var_2 = ansible_vault_encrypted_unicode_0.count(ansible_vault_encrypted_unicode_0)
        dict_0 = {str_0: ansible_vault_encrypted_unicode_0, str_1: float_0}
        ansible_mapping_0 = module_0.AnsibleMapping(**dict_0)
    except BaseException:
        pass

def test_case_32():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        set_0 = {ansible_unicode_0, ansible_unicode_0, ansible_unicode_0}
        bool_0 = True
        set_1 = {bool_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__ne__(set_0)
        bool_1 = False
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_2.rjust(bool_1)
        var_2 = ansible_vault_encrypted_unicode_2.isascii()
        var_3 = ansible_vault_encrypted_unicode_2.format_map(bool_1)
        list_0 = [ansible_sequence_0, ansible_vault_encrypted_unicode_2]
        var_4 = ansible_vault_encrypted_unicode_2.__radd__(list_0)
        var_5 = ansible_vault_encrypted_unicode_2.swapcase()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        var_6 = ansible_vault_encrypted_unicode_2.replace(ansible_base_y_a_m_l_object_0, ansible_vault_encrypted_unicode_1, set_1)
    except BaseException:
        pass

def test_case_33():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        set_0 = {ansible_unicode_0, ansible_unicode_0, ansible_unicode_0}
        bool_0 = True
        set_1 = {bool_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__ne__(set_0)
        bool_1 = False
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_2.rjust(bool_1)
        var_2 = ansible_vault_encrypted_unicode_2.isascii()
        dict_0 = {bool_1: bool_1, var_1: bool_1, ansible_vault_encrypted_unicode_2: ansible_sequence_0}
        int_0 = 3742
        var_3 = ansible_vault_encrypted_unicode_2.format_map(bool_1)
        list_0 = [ansible_sequence_0, ansible_vault_encrypted_unicode_2]
        var_4 = ansible_vault_encrypted_unicode_2.__radd__(list_0)
        var_5 = ansible_vault_encrypted_unicode_2.swapcase()
        tuple_0 = (dict_0, int_0)
        list_1 = [ansible_sequence_0, dict_0]
        str_0 = 'JeLarMy xoGFR'
        var_6 = ansible_vault_encrypted_unicode_1.__radd__(str_0)
        var_7 = ansible_vault_encrypted_unicode_2.replace(tuple_0, list_1)
    except BaseException:
        pass

def test_case_34():
    try:
        ansible_unicode_0 = module_0.AnsibleUnicode()
        set_0 = {ansible_unicode_0, ansible_unicode_0, ansible_unicode_0}
        bool_0 = True
        set_1 = {bool_0}
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(set_1)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        var_0 = ansible_vault_encrypted_unicode_1.__ne__(set_0)
        bool_1 = False
        ansible_sequence_0 = module_0.AnsibleSequence()
        ansible_vault_encrypted_unicode_2 = module_0.AnsibleVaultEncryptedUnicode(ansible_sequence_0)
        var_1 = ansible_vault_encrypted_unicode_2.rjust(bool_1)
        var_2 = ansible_vault_encrypted_unicode_2.isascii()
        var_3 = ansible_vault_encrypted_unicode_2.format_map(bool_1)
        list_0 = [ansible_sequence_0, ansible_vault_encrypted_unicode_2]
        var_4 = ansible_vault_encrypted_unicode_2.__radd__(list_0)
        var_5 = ansible_vault_encrypted_unicode_2.swapcase()
        ansible_base_y_a_m_l_object_0 = module_0.AnsibleBaseYAMLObject()
        ansible_mapping_0 = module_0.AnsibleMapping()
        var_6 = ansible_vault_encrypted_unicode_0.replace(ansible_vault_encrypted_unicode_2, ansible_mapping_0)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 't#st'
        ansible_vault_encrypted_unicode_0 = module_0.AnsibleVaultEncryptedUnicode(str_0)
        ansible_unicode_0 = module_0.AnsibleUnicode()
        var_0 = ansible_vault_encrypted_unicode_0.__ne__(ansible_unicode_0)
        var_1 = ansible_vault_encrypted_unicode_0.__eq__(str_0)
        ansible_vault_encrypted_unicode_1 = module_0.AnsibleVaultEncryptedUnicode(ansible_vault_encrypted_unicode_0)
        list_0 = []
        var_2 = ansible_vault_encrypted_unicode_0.__mod__(list_0)
        dict_0 = {}
        var_3 = ansible_vault_encrypted_unicode_1.find(ansible_vault_encrypted_unicode_1, dict_0)
    except BaseException:
        pass