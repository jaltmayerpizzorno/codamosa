# Automatically generated by Pynguin.
import flutils.pathutils as module_0
import pathlib as module_1

def test_case_0():
    try:
        bytes_0 = b'r\x1e'
        module_0.chown(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '~/tmp/**'
        module_0.chown(str_0)
        str_1 = 'bar'
        module_0.chown(str_0, str_0, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        struct_group_0 = module_0.get_os_group()
        str_0 = '/pngin/4\t\t}I[D6m>y>'
        int_0 = True
        module_0.chmod(str_0, int_0)
        struct_passwd_0 = module_0.get_os_user()
        module_0.chown(str_0)
        struct_group_1 = module_0.get_os_group()
        path_0 = module_0.directory_present(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = "Check if given ``obj`` has all the given ``*attrs``.\n\n    Args:\n        obj (:obj:`Any <typing.Any>`): The object to check.\n        *attrs (:obj:`str`): The names of the attributes to check.\n\n    :rtype:\n        :obj:`bool`\n\n        * :obj:`True` if all the given ``*attrs`` exist on the given ``obj``;\n        * :obj:`False` otherwise.\n\n    Example:\n        >>> from flutils.objutils import has_attrs\n        >>> has_attrs(dict(),'get','keys','items','values')\n        True\n    "
        bool_0 = True
        path_0 = module_0.normalize_path(str_0)
        module_0.chown(str_0, bool_0)
        struct_group_0 = module_0.get_os_group()
        struct_group_1 = module_0.get_os_group(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = 2201
        struct_passwd_0 = module_0.get_os_user(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '/pynvuin'
        module_0.path_absent(str_0)
        bytes_0 = b'\x08qi\x9e\xb5'
        str_1 = module_0.exists_as(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = 'iu$Q'
        struct_passwd_0 = module_0.get_os_user()
        posix_path_0 = module_1.PosixPath()
        module_0.path_absent(posix_path_0)
        struct_passwd_1 = module_0.get_os_user()
        generator_0 = module_0.find_paths(str_0)
        module_0.chown(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '/tmp/tmp_directory_present_test'
        path_0 = module_0.directory_present(str_0)
        module_0.path_absent(str_0)
        path_1 = module_0.directory_present(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '~/tmp/**'
        struct_passwd_0 = module_0.get_os_user()
        module_0.chown(str_0)
        module_0.path_absent(str_0)
        module_0.chmod(str_0)
        str_1 = '~/tmp/*'
        str_2 = 'bar'
        module_0.chown(str_1, str_2, str_2)
    except BaseException:
        pass

def test_case_9():
    try:
        posix_path_0 = None
        generator_0 = module_0.find_paths(posix_path_0)
        int_0 = 2746
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = -886
        struct_group_0 = module_0.get_os_group(int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bytes_0 = b'\xaa\xe1\x91\x88\xc9+(\xd2\x11'
        generator_0 = module_0.find_paths(bytes_0)
        struct_passwd_0 = module_0.get_os_user(generator_0)
    except BaseException:
        pass

def test_case_12():
    try:
        list_0 = []
        list_1 = [list_0, list_0]
        list_2 = [list_1]
        struct_group_0 = module_0.get_os_group(list_2)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '~/tmp/flutils.tests.osutils.txt'
        module_0.chown(str_0)
        str_1 = '~/tmp/**'
        module_0.chown(str_1)
        module_0.chmod(str_0)
        str_2 = '~/tmp/*'
        str_3 = module_0.exists_as(str_1)
        path_0 = module_0.directory_present(str_1, str_0, str_2)
    except BaseException:
        pass