# Automatically generated by Pynguin.
import flutils.namedtupleutils as module_0
import types as module_1
import collections as module_2

def test_case_0():
    dict_0 = {}
    var_0 = module_0.to_namedtuple(dict_0)

def test_case_1():
    dict_0 = {}
    str_0 = 'U^$P=HT>\x0c}\x0b"@1'
    bool_0 = True
    tuple_0 = (dict_0, str_0, bool_0)
    var_0 = module_0.to_namedtuple(tuple_0)

def test_case_2():
    str_0 = 'N}KgiqIs'
    dict_0 = {str_0: str_0}
    var_0 = module_0.to_namedtuple(dict_0)

def test_case_3():
    str_0 = 'q'
    dict_0 = {str_0: str_0}
    simple_namespace_0 = module_1.SimpleNamespace(**dict_0)
    var_0 = module_0.to_namedtuple(simple_namespace_0)

def test_case_4():
    dict_0 = {}
    list_0 = [dict_0, dict_0, dict_0, dict_0]
    var_0 = module_0.to_namedtuple(list_0)

def test_case_5():
    simple_namespace_0 = module_1.SimpleNamespace()
    var_0 = module_0.to_namedtuple(simple_namespace_0)

def test_case_6():
    bool_0 = False
    int_0 = 1952
    dict_0 = {}
    tuple_0 = (bool_0, int_0, dict_0)
    var_0 = module_0.to_namedtuple(tuple_0)
    list_0 = [var_0]
    var_1 = module_0.to_namedtuple(list_0)

def test_case_7():
    str_0 = '\r Di'
    str_1 = 'a9P'
    bytes_0 = b''
    dict_0 = {str_0: str_0, str_1: bytes_0}
    list_0 = [dict_0]
    var_0 = module_0.to_namedtuple(list_0)
    bytes_1 = b'\xd3\xae\x9c\x8b\x7f\x16\xd7\xa7\x8c\x97P'
    list_1 = [bytes_1, bytes_1, bytes_1, bytes_1]
    var_1 = module_0.to_namedtuple(list_1)

def test_case_8():
    tuple_0 = ()
    simple_namespace_0 = module_1.SimpleNamespace()
    var_0 = module_0.to_namedtuple(simple_namespace_0)
    var_1 = module_0.to_namedtuple(simple_namespace_0)
    list_0 = [tuple_0, tuple_0, tuple_0, tuple_0]
    var_2 = module_0.to_namedtuple(simple_namespace_0)
    var_3 = module_0.to_namedtuple(simple_namespace_0)
    var_4 = module_0.to_namedtuple(simple_namespace_0)
    list_1 = [list_0, tuple_0]
    var_5 = module_0.to_namedtuple(list_1)
    str_0 = 'wFPG'
    dict_0 = {str_0: str_0}
    var_6 = module_0.to_namedtuple(list_1)
    dict_1 = {str_0: var_3, str_0: simple_namespace_0, str_0: list_1}
    list_2 = [var_3, dict_1, list_1]
    var_7 = module_0.to_namedtuple(list_2)
    dict_2 = {}
    list_3 = [var_7]
    tuple_1 = (dict_2, list_3, dict_0)
    var_8 = module_0.to_namedtuple(tuple_1)

def test_case_9():
    int_0 = 1
    int_1 = 2
    var_0 = dict(a=int_0, b=int_1)
    var_1 = module_0.to_namedtuple(var_0)
    int_2 = 3
    var_2 = dict(a=int_0, b=int_1, _c=int_2)
    var_3 = module_0.to_namedtuple(var_2)
    ordered_dict_0 = module_2.OrderedDict()
    var_4 = module_0.to_namedtuple(ordered_dict_0)
    var_5 = module_0.to_namedtuple(ordered_dict_0)