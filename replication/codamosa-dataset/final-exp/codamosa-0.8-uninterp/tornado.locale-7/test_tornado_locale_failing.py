# Automatically generated by Pynguin.
import tornado.locale as module_0
import gettext as module_1
import datetime as module_2

def test_case_0():
    try:
        str_0 = 'V(v?!_%z[ ('
        module_0.set_default_locale(str_0)
        str_1 = '?#'
        module_0.load_translations(str_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '?#'
        module_0.load_translations(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'u/*Z\x0cmU'
        module_0.load_gettext_translations(str_0, str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = None
        str_1 = 'cWs~<s \ta3u!O25Q_\\'
        module_0.load_gettext_translations(str_0, str_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = None
        str_1 = 'number of log files to keep'
        list_0 = [str_0, str_0, str_1]
        locale_0 = module_0.get(*list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'U'
        str_1 = '1wqa\r-)J_t".'
        dict_0 = None
        str_2 = "return _tt_utf8('').join(_tt_buffer)"
        str_3 = ''
        dict_1 = {str_1: dict_0, str_1: dict_0, str_2: dict_0, str_3: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_1)
        str_4 = "b';($rkq` |z?\x0b|otCI"
        bytes_0 = b'\xb9\xd8\xee\x1a\xba\xed\xbb\xe7'
        str_5 = '?-'
        str_6 = ';\\J'
        list_0 = [str_4, str_5, str_6, str_2]
        locale_0 = module_0.get(*list_0)
        str_7 = locale_0.list(bytes_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = "e(3nNgZO2rB#pf'"
        locale_0 = module_0.Locale(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = "[tW\n$#Q1fa='?"
        str_1 = 'hRcRfE"1&i+YK-YawS-\r'
        str_2 = 'MpIH7?vS=GDWaLy@fVW'
        str_3 = 'O,vp2wGC*\x0b)F:oW2'
        dict_0 = {}
        c_s_v_locale_0 = module_0.CSVLocale(str_3, dict_0)
        str_4 = c_s_v_locale_0.pgettext(str_0, str_1, str_0, str_2)
        str_5 = 'Lock'
        module_0.load_gettext_translations(str_5, str_5)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = '`m- Cj4A\x0c%&UXw'
        float_0 = 2054.747
        str_1 = 'Initialize a `Configurable` subclass instance.\n\n    Configurable classes should use `initialize` instead of ``__init__``.\n\n    .. versionchanged:: 4.2\n       Now accepts positional arguments in addition to keyword arguments.\n    '
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_1, null_translations_0)
        str_2 = gettext_locale_0.translate(str_0, float_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'XOUq&v?j\n0,6lzib^F'
        str_1 = None
        str_2 = ',=/{=](B^C^qN\x0ccP'
        iterable_0 = module_0.get_supported_locales()
        dict_0 = {str_2: str_1, str_1: str_1, str_1: str_2}
        dict_1 = {str_1: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_1)
        str_3 = "'yl9xB=bmdV3w="
        str_4 = 'qbg&+m\\=#lo"$'
        list_0 = [str_3, str_4, str_1]
        locale_0 = module_0.get(*list_0)
        str_5 = None
        str_6 = locale_0.translate(str_5, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = None
        str_1 = ')+L2'
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_1, null_translations_0)
        locale_0 = module_0.get()
        str_2 = gettext_locale_0.translate(str_0)
        bytes_0 = b'^\xfc\xd1\xd8\x0b'
        var_0 = null_translations_0.gettext(bytes_0)
        str_3 = '/9A,QU\nx'
        null_translations_1 = module_1.NullTranslations()
        str_4 = gettext_locale_0.pgettext(str_1, str_3, null_translations_1)
    except BaseException:
        pass

def test_case_11():
    try:
        locale_0 = module_0.get()
        str_0 = ' 0h\x0ck\x0c'
        locale_1 = module_0.get()
        locale_2 = module_0.get()
        float_0 = -625.2811423889538
        int_0 = 1902
        bool_0 = False
        str_1 = locale_2.format_date(float_0, int_0, bool_0)
        module_0.load_translations(str_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = None
        str_1 = ')+L2'
        null_translations_0 = module_1.NullTranslations()
        gettext_locale_0 = module_0.GettextLocale(str_1, null_translations_0)
        locale_0 = module_0.get()
        str_2 = gettext_locale_0.translate(str_0)
        datetime_0 = None
        int_0 = None
        bool_0 = False
        str_3 = locale_0.format_date(datetime_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_13():
    try:
        float_0 = 1646.0
        bool_0 = True
        list_0 = [bool_0, bool_0, bool_0]
        datetime_0 = module_2.datetime(*list_0)
        bool_1 = False
        locale_0 = module_0.get()
        bool_2 = locale_0.format_day(datetime_0, bool_1)
        str_0 = locale_0.format_date(float_0, bool_0, bool_0)
        str_1 = ':\rg{@$!6#YD$V@h'
        str_2 = 'p'
        module_0.load_gettext_translations(str_2, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        iterable_0 = module_0.get_supported_locales()
        set_0 = {iterable_0, iterable_0}
        list_0 = []
        locale_0 = module_0.get(*list_0)
        str_0 = locale_0.list(set_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 3455
        str_0 = 'U"4R[hA6'
        module_0.set_default_locale(str_0)
        str_1 = '3Veo)"2n#W|XeW'
        str_2 = 'Sends the given HTTP error code to the browser.\n\n        If `flush()` has already been called, it is not possible to send\n        an error, so this method will simply terminate the response.\n        If output has been written but not yet flushed, it will be discarded\n        and replaced with the error page.\n\n        Override `write_error()` to customize the error page that is returned.\n        Additional keyword arguments are passed through to `write_error`.\n        '
        str_3 = 'dl\x0c)\x0cl'
        null_translations_0 = module_1.NullTranslations(str_3)
        gettext_locale_0 = module_0.GettextLocale(str_2, null_translations_0)
        str_4 = gettext_locale_0.translate(str_1, str_1, int_0)
        iterable_0 = module_0.get_supported_locales()
        locale_0 = module_0.Locale(str_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'F!s\\:'
        str_1 = 'Sec-WebSocket-Key'
        int_0 = -239
        locale_0 = module_0.get()
        str_2 = locale_0.friendly_number(int_0)
        str_3 = 'version'
        str_4 = None
        str_5 = '3'
        dict_0 = {str_4: str_3, str_4: str_5, str_3: str_1}
        int_1 = -2424
        locale_1 = module_0.get()
        str_6 = locale_1.friendly_number(int_1)
        dict_1 = {str_1: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_0, dict_1)
        float_0 = -192.982
        locale_2 = module_0.get()
        float_1 = 613.0
        str_7 = locale_2.format_date(float_1, int_1)
        list_0 = [str_0, str_1]
        locale_3 = module_0.get(*list_0)
        bool_0 = False
        str_8 = locale_2.format_date(float_0, bool_0)
        str_9 = locale_2.format_date(int_0)
        str_10 = '$.mvI}6\nH5dZm'
        str_11 = None
        module_0.load_translations(str_11)
        str_12 = c_s_v_locale_0.pgettext(str_2, str_10, int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'version'
        str_1 = None
        str_2 = '3'
        module_0.set_default_locale(str_2)
        dict_0 = {str_0: str_0, str_2: str_1, str_2: str_2}
        int_0 = 1182
        locale_0 = module_0.get()
        str_3 = locale_0.friendly_number(int_0)
        dict_1 = {str_1: dict_0, str_3: dict_0, str_0: dict_0}
        c_s_v_locale_0 = module_0.CSVLocale(str_3, dict_1)
        float_0 = -192.982
        bool_0 = None
        str_4 = 'h\r"=Z?1nz@6m_XS)['
        list_0 = [str_3, str_4]
        locale_1 = module_0.get(*list_0)
        float_1 = 613.0
        int_1 = -2110
        str_5 = locale_1.format_date(float_1, int_1, bool_0)
        bool_1 = False
        int_2 = 1995
        str_6 = locale_1.format_date(int_1, int_2)
        bool_2 = True
        str_7 = locale_1.format_date(float_0, bool_1, bool_2)
        bool_3 = True
        int_3 = -1455
        str_8 = locale_1.format_date(int_1, int_3, bool_0, bool_1, bool_3)
        null_translations_0 = module_1.NullTranslations()
        str_9 = 'ruy i|nn'
        gettext_locale_0 = module_0.GettextLocale(str_9, null_translations_0)
        str_10 = 'i\x0cIl%"[Z0]\n:\'x\\'
        module_0.load_translations(str_10)
    except BaseException:
        pass

def test_case_18():
    try:
        int_0 = -2045
        bool_0 = True
        locale_0 = module_0.get()
        str_0 = locale_0.format_date(int_0, bool_0)
        str_1 = "Y/`A>'"
        str_2 = "(@'"
        str_3 = locale_0.translate(str_1, str_2)
    except BaseException:
        pass

def test_case_19():
    try:
        int_0 = 1000000
        locale_0 = module_0.get()
        str_0 = locale_0.friendly_number(int_0)
        str_1 = "SZ6SjF'\x0ccr:u^s-"
        str_2 = 'l'
        module_0.load_gettext_translations(str_2, str_1)
    except BaseException:
        pass