# Automatically generated by Pynguin.
import youtube_dl.jsinterp as module_0

def test_case_0():
    try:
        str_0 = '\rI\t=!+zY'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, j_s_interpreter_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'wZzF'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.extract_function(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\xbe\xbf'
        j_s_interpreter_0 = module_0.JSInterpreter(bytes_0)
        var_0 = j_s_interpreter_0.call_function(bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\rI\t%!+ZY'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '5-cpI{akkL'
        bytes_0 = b'\x8f:\xbc\x9d\xf7'
        dict_0 = {str_0: str_0}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, dict_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = -3915
        str_0 = ''
        bool_0 = True
        list_0 = [bool_0]
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, list_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, bool_0)
        var_1 = j_s_interpreter_0.extract_object(int_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        j_s_interpreter_0 = module_0.JSInterpreter(dict_0)
        str_0 = '>a /'
        dict_1 = {str_0: str_0}
        bool_0 = False
        j_s_interpreter_1 = module_0.JSInterpreter(bool_0)
        list_0 = [dict_1, j_s_interpreter_1, str_0]
        float_0 = -491.0
        var_0 = j_s_interpreter_1.interpret_statement(dict_1, list_0, float_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'Lhcy<Y'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'var a=10;'
        var_0 = j_s_interpreter_0.interpret_statement(str_1, j_s_interpreter_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bytes_0 = b'()^\x155\xd4}/Q"t\xe0\xc9\xcb\xe3\xe3\xfa'
        str_0 = '(Ol>h\':2"6=oT> XFA&'
        dict_0 = {str_0: str_0}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, dict_0)
        var_0 = j_s_interpreter_0.interpret_statement(str_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'var a = [ 4, 2, 5 ]; var b = [3, 5, 1];'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'b[2]'
        str_2 = 'b'
        int_0 = 3
        int_1 = [int_0, int_0, int_0]
        int_2 = {str_2: int_1}
        var_0 = j_s_interpreter_0.interpret_expression(str_1, int_2, int_0)
        str_3 = 'a.in("")'
        int_3 = [int_2, int_1]
        int_4 = {str_1: int_3}
        var_1 = j_s_interpreter_0.interpret_expression(str_3, int_4, int_1)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'IYOxD)+K~mt^:Ui`q'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'a'
        int_0 = 100
        str_2 = 'a.in("")'
        int_1 = {str_1: int_0}
        var_0 = j_s_interpreter_0.interpret_expression(str_2, int_1, int_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ''
        var_0 = {}
        j_s_interpreter_0 = module_0.JSInterpreter(str_0, var_0)
        str_1 = '1'
        int_0 = 100
        var_1 = j_s_interpreter_0.interpret_expression(str_1, int_0, int_0)
        str_2 = '1 + 1'
        var_2 = {}
        var_3 = j_s_interpreter_0.interpret_expression(str_2, var_2, int_0)
        str_3 = ' * 1'
        var_4 = j_s_interpreter_0.interpret_expression(str_3, var_0, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'var a = [ 4, 2, 5 ]; var b = [3, 5, 1];'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        str_1 = 'a'
        int_0 = 4
        int_1 = 100
        int_2 = [int_0, int_0, j_s_interpreter_0, str_0, int_0, int_0]
        str_2 = 'a.join("")'
        int_3 = [int_2, int_0]
        int_4 = {str_1: int_3}
        var_0 = j_s_interpreter_0.interpret_expression(str_2, int_4, int_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'var a = [ 4, 2, 5 ]; var b = [3, 5, 1];'
        j_s_interpreter_0 = module_0.JSInterpreter(str_0)
        int_0 = 1474
        int_1 = 5
        int_2 = 100
        str_1 = 'b'
        int_3 = [int_1, int_1, j_s_interpreter_0, str_0, int_1, int_1]
        str_2 = 'a.join("")'
        int_4 = [int_3, int_0]
        int_5 = {str_1: int_4}
        var_0 = j_s_interpreter_0.interpret_expression(str_2, int_5, int_2)
    except BaseException:
        pass