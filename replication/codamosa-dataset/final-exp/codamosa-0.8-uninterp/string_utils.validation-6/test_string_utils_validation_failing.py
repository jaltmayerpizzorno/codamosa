# Automatically generated by Pynguin.
import string_utils.validation as module_0

def test_case_0():
    try:
        str_0 = None
        int_0 = module_0.words_count(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = None
        bool_0 = None
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = None
        bool_0 = module_0.is_number(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '\x0bay|p@1['
        bool_0 = module_0.is_isbn(str_0)
        bool_1 = module_0.is_credit_card(str_0, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -778
        str_0 = ',/>=>/'
        bool_0 = True
        bool_1 = module_0.is_palindrome(str_0, bool_0, bool_0)
        bool_2 = module_0.is_pangram(str_0)
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_0)
        bool_3 = i_s_b_n_checker_0.is_isbn_13()
        bool_4 = module_0.is_url(int_0)
        bool_5 = module_0.is_string(int_0)
        bool_6 = True
        bool_7 = i_s_b_n_checker_0.is_isbn_10()
        bool_8 = module_0.is_ip_v6(bool_6)
        bool_9 = i_s_b_n_checker_0.is_isbn_10()
        bool_10 = module_0.is_slug(bool_4)
        str_1 = None
        bool_11 = module_0.is_isbn(str_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '1j%PRm]R'
        str_1 = 'is_snake_case'
        i_s_b_n_checker_0 = module_0.__ISBNChecker(str_1)
        none_type_0 = None
        bool_0 = i_s_b_n_checker_0.is_isbn_10()
        bool_1 = module_0.is_url(i_s_b_n_checker_0, none_type_0)
        bool_2 = i_s_b_n_checker_0.is_isbn_13()
        bool_3 = module_0.is_decimal(str_1)
        bool_4 = module_0.is_ip_v6(i_s_b_n_checker_0)
        bool_5 = i_s_b_n_checker_0.is_isbn_10()
        bool_6 = module_0.is_ip(str_0)
        bool_7 = i_s_b_n_checker_0.is_isbn_10()
        str_2 = None
        bool_8 = module_0.contains_html(str_2)
    except BaseException:
        pass