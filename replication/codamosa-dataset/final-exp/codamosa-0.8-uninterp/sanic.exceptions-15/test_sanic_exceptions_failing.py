# Automatically generated by Pynguin.
import sanic.exceptions as module_0

def test_case_0():
    try:
        str_0 = 'FQ%N\nT @pmZ@y)Qb'
        dict_0 = {str_0: str_0}
        method_not_supported_0 = module_0.MethodNotSupported(str_0, str_0, dict_0)
        forbidden_0 = None
        sanic_exception_0 = module_0.SanicException(dict_0, forbidden_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 416
        u_r_l_build_error_0 = module_0.URLBuildError(int_0)
        str_0 = '\teYZg5^s2];F]\t!3zY\n'
        tuple_0 = ()
        unauthorized_0 = module_0.Unauthorized(tuple_0)
        invalid_range_type_0 = module_0.InvalidRangeType(str_0, unauthorized_0)
    except BaseException:
        pass

def test_case_2():
    try:
        bytes_0 = b'\x9c\xdf\x858'
        sanic_exception_0 = module_0.SanicException(bytes_0)
        server_error_0 = None
        service_unavailable_0 = module_0.ServiceUnavailable(sanic_exception_0, server_error_0)
        invalid_usage_0 = module_0.InvalidUsage(server_error_0, server_error_0)
        forbidden_0 = module_0.Forbidden(invalid_usage_0)
        int_0 = 171
        var_0 = module_0.abort(int_0, bytes_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -306
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = False
        py_file_error_0 = module_0.PyFileError(bool_0)
        float_0 = 0.001
        invalid_signal_0 = module_0.InvalidSignal(float_0)
        invalid_usage_0 = module_0.InvalidUsage(invalid_signal_0)
        int_0 = 500
        str_0 = '_\nCU8K]=\\'
        str_1 = '%\\<=\r7,7DM\r'
        str_2 = ')&<\\u7foN#\x0cMObc_)%5'
        str_3 = 'vHRrM9c\\L\x0c%5L'
        dict_0 = {str_1: float_0, str_2: str_2, str_0: float_0, str_3: bool_0}
        sanic_exception_0 = module_0.SanicException(str_0, dict_0)
        forbidden_0 = module_0.Forbidden(sanic_exception_0)
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(forbidden_0)
        list_0 = [bool_0, py_file_error_0, invalid_usage_0, invalid_signal_0]
        py_file_error_1 = module_0.PyFileError(list_0)
        var_0 = module_0.abort(int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -2151.07
        header_expectation_failed_0 = module_0.HeaderExpectationFailed(float_0)
        forbidden_0 = module_0.Forbidden(float_0)
        u_r_l_build_error_0 = module_0.URLBuildError(forbidden_0)
        header_not_found_0 = module_0.HeaderNotFound(u_r_l_build_error_0)
        tuple_0 = None
        bytes_0 = None
        header_not_found_1 = module_0.HeaderNotFound(bytes_0)
        tuple_1 = ()
        load_file_exception_0 = module_0.LoadFileException(tuple_0, header_not_found_1, tuple_1)
        invalid_range_type_0 = module_0.InvalidRangeType(u_r_l_build_error_0, load_file_exception_0)
    except BaseException:
        pass