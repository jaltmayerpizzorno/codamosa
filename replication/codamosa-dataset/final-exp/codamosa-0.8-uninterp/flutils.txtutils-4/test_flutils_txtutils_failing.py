# Automatically generated by Pynguin.
import flutils.txtutils as module_0

def test_case_0():
    try:
        int_0 = 2511
        int_1 = module_0.len_without_ansi(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '-m`$Q`'
        bool_0 = True
        bool_1 = True
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=bool_1)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '"l:"z3Z5[jYBO;BN?o\rK'
        bool_0 = True
        str_1 = '#Pp\ni\x0c3'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_1)
        str_2 = ansi_text_wrapper_0.fill(str_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        list_1 = ansi_text_wrapper_0.wrap(str_0)
        sequence_0 = None
        str_3 = None
        bool_1 = None
        int_0 = 384
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(str_3, bool_1, int_0)
        int_1 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'i\r xZncN$1gj3B'
        bool_0 = False
        int_0 = 1368
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_0, int_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '|mfh24>Pv7W_B\t?=?'
        bool_0 = True
        tuple_0 = ()
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, bool_0, bool_0, max_lines=tuple_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 80
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, max_lines=int_0)
        str_0 = '_>'
        bool_0 = True
        int_1 = 237
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_1, bool_0, bool_0, bool_0, int_1, max_lines=int_1, placeholder=str_0)
        str_1 = "Return the character length of the given\n    :obj:`Sequence <typing.Sequence>` without counting any ANSI codes.\n\n    *New in version 0.6*\n\n    Args:\n         seq (:obj:`Sequence <typing.Sequence>`): A string or a list/tuple\n             of strings.\n\n    :rtype:\n        :obj:`int`\n\n    Example:\n        >>> from flutils.txtutils import len_without_ansi\n        >>> text = '\\x1b[38;5;209mfoobar\\x1b[0m'\n        >>> len_without_ansi(text)\n        6\n    "
        list_0 = ansi_text_wrapper_0.wrap(str_1)
        list_1 = ansi_text_wrapper_1.wrap(str_1)
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = True
        str_0 = '#Pp\ni\x0c3'
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, placeholder=str_0)
        str_1 = 'Generator that expands the given attr_map and yields an _AttrMapping\n    named tuple.\n\n    An attr_map is a tuple with each row containing a :term:`foreign-name`\n    which is a specially formatted string.\n    '
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        list_1 = ansi_text_wrapper_0.wrap(str_1)
        sequence_0 = None
        int_0 = module_0.len_without_ansi(sequence_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '\x1b[38;5;209mfoobar\x1b[0m'
        bool_0 = False
        int_0 = 1405
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(bool_0, max_lines=int_0)
        str_1 = ansi_text_wrapper_0.fill(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "\x0clj83'L^&|1Q-s-[p"
        str_1 = 'Wje\rNI%'
        int_0 = 36
        ansi_text_wrapper_0 = module_0.AnsiTextWrapper(int_0, max_lines=int_0)
        list_0 = ansi_text_wrapper_0.wrap(str_0)
        list_1 = ansi_text_wrapper_0.wrap(str_1)
        str_2 = ''
        bool_0 = None
        str_3 = ansi_text_wrapper_0.fill(str_0)
        str_4 = ''
        list_2 = ansi_text_wrapper_0.wrap(str_4)
        str_5 = ansi_text_wrapper_0.fill(str_2)
        ansi_text_wrapper_1 = module_0.AnsiTextWrapper(int_0, bool_0, bool_0, bool_0, max_lines=int_0, placeholder=str_4)
        int_1 = -2633
        ansi_text_wrapper_2 = module_0.AnsiTextWrapper(int_0, str_0, bool_0, bool_0, int_1, max_lines=int_1)
        str_6 = '__]chery_pick_map__'
        str_7 = ansi_text_wrapper_2.fill(str_6)
        list_3 = ansi_text_wrapper_2.wrap(str_2)
        list_4 = ansi_text_wrapper_0.wrap(str_2)
        str_8 = 'Used with map() to expand foreign-names into a named tuple.\n\n    See the :term:`foreign-name` documentation for the format of this string.\n\n    The tuple contains three parts:\n\n    - attr_name: If applicable, the attribute identifier that will be\n      set on the cherry-picking module.\n    - mod_name: The fullname of the module to be cherry-picked.\n    - mod_attr_name: If applicable the attribute identifier on the\n        cherry-picked module that will be bound to the ``attr_name``.\n        An empty str value indicates that the entire module will be used.\n    '
        list_5 = []
        int_2 = module_0.len_without_ansi(list_5)
        list_6 = ansi_text_wrapper_2.wrap(str_8)
        str_9 = 'Z_%-"`^ODT7|~\r'
        list_7 = ansi_text_wrapper_2.wrap(str_9)
        str_10 = "O&MzyU0/xJqVm(2rD!'\n"
        list_8 = ansi_text_wrapper_2.wrap(str_10)
    except BaseException:
        pass