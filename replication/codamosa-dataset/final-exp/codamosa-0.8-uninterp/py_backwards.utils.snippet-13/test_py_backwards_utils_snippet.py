# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    keyword_0 = module_0.keyword()
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_2():
    a_s_t_0 = module_0.AST()
    keyword_0 = module_0.keyword()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_3():
    a_s_t_0 = module_0.AST()
    keyword_0 = module_0.keyword()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_4():
    function_def_0 = module_0.FunctionDef()
    str_0 = 'Xy'
    str_1 = ')#:K~Y9M'
    str_2 = '{bright}Compilation succeed{reset}:\n  target: {bright}{target}{reset}\n  files: {bright}{files}{reset}\n  took: {bright}{time:.2f}{reset} seconds{dependencies}'
    dict_0 = {str_0: str_0, str_1: str_1, str_2: str_1, str_1: str_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
    str_3 = 'c'
    dict_1 = {str_3: str_3}
    a_s_t_0 = module_0.AST(**dict_1)
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_5():
    str_0 = 'let(x); let(y)'
    var_0 = module_2.parse(str_0)
    class_def_0 = module_0.ClassDef()
    dict_0 = {str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    class_def_2 = variables_replacer_0.visit_ClassDef(class_def_0)
    iterable_0 = module_1.find_variables(var_0)
    a_s_t_0 = module_0.AST()
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_6():
    a_s_t_0 = module_0.AST()
    str_0 = 'rO;oIGH'
    str_1 = 'b`-m|T'
    str_2 = 'BCC,kJ\x0b`evJ;Z4iWQ\t1'
    dict_0 = {str_0: a_s_t_0, str_1: a_s_t_0, str_1: a_s_t_0, str_2: a_s_t_0}
    arg_0 = module_0.arg(**dict_0)
    dict_1 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    arg_1 = variables_replacer_0.visit_arg(arg_0)
    str_3 = '8)]\n~t?K__M;L'
    dict_2 = {str_3: a_s_t_0, str_3: str_3}
    module_1.extend_tree(a_s_t_0, dict_2)

def test_case_7():
    str_0 = 'from Stuff import foo, bar'
    var_0 = module_2.parse(str_0)
    str_1 = 'Stuff'
    str_2 = 'NewStuff'
    str_3 = {str_1: str_2}
    variables_replacer_0 = module_1.VariablesReplacer(str_3)
    var_1 = variables_replacer_0.visit(var_0)
    var_2 = module_2.dump(var_0)
    var_3 = module_2.dump(var_0)

def test_case_8():
    a_s_t_0 = module_0.AST()
    alias_0 = module_0.alias()
    str_0 = 'sFf N$u|}!*R'
    dict_0 = {str_0: a_s_t_0, str_0: str_0, str_0: str_0, str_0: a_s_t_0}
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_9():
    float_0 = -530.0
    module_1.let(float_0)

def test_case_10():
    str_0 = 'from Stuff import foo, bar'
    var_0 = module_2.parse(str_0)
    str_1 = 'Stuff'
    str_2 = 'NewStuff'
    module_1.extend(str_1)
    str_3 = {str_1: str_2}
    variables_replacer_0 = module_1.VariablesReplacer(str_3)
    var_1 = variables_replacer_0.visit(var_0)
    var_2 = module_2.dump(var_0)
    var_3 = print(var_2)