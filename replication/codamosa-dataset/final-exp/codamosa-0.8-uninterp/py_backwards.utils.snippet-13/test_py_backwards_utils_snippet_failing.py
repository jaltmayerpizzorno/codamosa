# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2
import py_backwards.utils.helpers as module_3

def test_case_0():
    try:
        str_0 = 'extend(x); extend(y);'
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        var_0 = module_2.parse(str_0)
        dict_0 = {}
        except_handler_0 = module_0.ExceptHandler(**dict_0)
        str_1 = None
        str_2 = 'url2pathname'
        dict_1 = {str_1: str_2, str_2: str_2, str_2: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        module_1.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'extenf(x); extend(y);'
        a_s_t_0 = module_0.AST()
        iterable_0 = module_1.find_variables(a_s_t_0)
        var_0 = module_2.parse(str_0)
        str_1 = 'y'
        dict_0 = {}
        module_1.let(str_1)
        except_handler_0 = module_0.ExceptHandler(**dict_0)
        str_2 = '\\9nGf>]0W2K'
        str_3 = None
        dict_1 = {str_2: str_1, str_3: str_3, str_3: str_3, str_1: str_3}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)
        module_1.extend_tree(var_0, str_2)
    except BaseException:
        pass

def test_case_2():
    try:
        name_0 = None
        str_0 = ''
        dict_0 = {str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_3():
    try:
        name_0 = None
        str_0 = ''
        str_1 = 'FH?\r ;c._o7j'
        dict_0 = {str_0: name_0, str_1: name_0, str_1: str_0}
        attribute_0 = module_0.Attribute(**dict_0)
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_1)
        attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
        dict_2 = {str_0: str_0}
        variables_replacer_1 = module_1.VariablesReplacer(dict_2)
        name_1 = variables_replacer_1.visit_Name(name_0)
    except BaseException:
        pass

def test_case_4():
    try:
        import_from_0 = module_0.ImportFrom()
        dict_0 = {}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
    except BaseException:
        pass

def test_case_5():
    try:
        a_s_t_0 = module_0.AST()
        alias_0 = module_0.alias()
        str_0 = 'Hv'
        dict_0 = {str_0: a_s_t_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        alias_1 = variables_replacer_0.visit_alias(alias_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1962
        snippet_0 = module_1.snippet(int_0)
        str_0 = '~'
        str_1 = 'Kp1X}\n%?T,l*gRS|a6'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_0}
        list_0 = snippet_0.get_body(**dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '((m\x0bG\r)[{h'
        module_1.let(str_0)
        str_1 = None
        str_2 = None
        dict_0 = {str_1: str_2, str_1: str_1}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        dict_1 = {}
        variables_replacer_1 = module_1.VariablesReplacer(dict_1)
        str_3 = None
        dict_2 = {str_0: str_0, str_3: str_3, str_3: str_3}
        variables_replacer_2 = module_1.VariablesReplacer(dict_2)
        attribute_0 = None
        attribute_1 = variables_replacer_2.visit_Attribute(attribute_0)
    except BaseException:
        pass

def test_case_8():
    try:
        function_def_0 = module_0.FunctionDef()
        str_0 = 'W\nw?F7BL~()GVe'
        str_1 = '*'
        a_s_t_0 = module_0.AST()
        list_0 = [a_s_t_0, a_s_t_0, a_s_t_0]
        dict_0 = {str_0: str_0, str_0: str_0, str_1: list_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)
        function_def_2 = module_0.FunctionDef()
        list_1 = [str_1]
        name_0 = module_0.Name(*list_1)
        name_1 = variables_replacer_0.visit_Name(name_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'et(x);let()'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_1.find_variables(var_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'extnd(x); extend(y);'
        var_0 = module_2.parse(str_0)
        module_1.extend_tree(var_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'let(x); let(y)'
        var_0 = module_2.parse(str_0)
        list_0 = [str_0, var_0, var_0]
        import_from_0 = module_0.ImportFrom(*list_0)
        a_s_t_0 = None
        dict_0 = {str_0: str_0, str_0: str_0, str_0: a_s_t_0, str_0: a_s_t_0}
        variables_replacer_0 = module_1.VariablesReplacer(dict_0)
        import_from_1 = variables_replacer_0.visit_ImportFrom(import_from_0)
        import_from_2 = variables_replacer_0.visit_ImportFrom(import_from_1)
        str_1 = 'oiG7K(e)Ck*U'
        dict_1 = {str_1: str_0}
        variables_replacer_1 = module_1.VariablesReplacer(dict_1)
        variables_replacer_2 = module_1.VariablesReplacer(dict_1)
        iterable_0 = module_1.find_variables(var_0)
        var_1 = list(iterable_0)
        a_s_t_1 = module_0.AST()
        variables_replacer_3 = module_1.VariablesReplacer(dict_1)
        a_s_t_2 = module_0.AST()
        str_2 = 'kbf=Yf\rK#IbYnG'
        dict_2 = {str_2: a_s_t_2}
        module_1.extend_tree(a_s_t_2, dict_2)
        callable_0 = None
        str_3 = module_3.get_source(callable_0)
    except BaseException:
        pass