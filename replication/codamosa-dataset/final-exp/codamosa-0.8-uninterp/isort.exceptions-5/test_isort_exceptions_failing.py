# Automatically generated by Pynguin.
import isort.exceptions as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = "KKO:#&p'zxy@;a~%#"
        formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_0)
        existing_syntax_errors_0 = module_0.ExistingSyntaxErrors(str_0)
        str_1 = '\r+}'
        dict_0 = {str_0: str_1}
        dict_1 = {str_1: dict_0}
        unsupported_settings_0 = module_0.UnsupportedSettings(dict_1)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '<@P=N\\cVDS_1tDZf%[.H'
        formatting_plugin_does_not_exist_0 = module_0.FormattingPluginDoesNotExist(str_0)
        invalid_settings_path_0 = module_0.InvalidSettingsPath(str_0)
        missing_section_0 = module_0.MissingSection(str_0, str_0)
        exception_0 = module_1.Exception()
        literal_parsing_failure_0 = module_0.LiteralParsingFailure(str_0, exception_0)
        formatting_plugin_does_not_exist_1 = module_0.FormattingPluginDoesNotExist(str_0)
        list_0 = [str_0, invalid_settings_path_0]
        str_1 = None
        dict_0 = {str_0: exception_0, str_1: formatting_plugin_does_not_exist_0}
        type_0 = module_1.type(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '^ffO|Am'
        dict_0 = {str_0: str_0}
        dict_1 = {str_0: dict_0}
        unsupported_settings_0 = module_0.UnsupportedSettings(dict_1)
    except BaseException:
        pass