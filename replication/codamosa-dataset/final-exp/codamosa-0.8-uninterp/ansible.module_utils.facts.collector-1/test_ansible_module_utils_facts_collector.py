# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    pass

def test_case_1():
    base_fact_collector_0 = module_0.BaseFactCollector()

def test_case_2():
    var_0 = module_0.collector_classes_from_gather_subset()
    base_fact_collector_0 = module_0.BaseFactCollector()
    var_1 = base_fact_collector_0.collect_with_namespace()

def test_case_3():
    base_fact_collector_0 = module_0.BaseFactCollector()
    var_0 = base_fact_collector_0.collect()

def test_case_4():
    list_0 = []
    var_0 = module_0.collector_classes_from_gather_subset(list_0)

def test_case_5():
    bool_0 = False
    unresolved_fact_dep_0 = module_0.UnresolvedFactDep()
    str_0 = 'oK\r\x0cc%/<g\nG'
    tuple_0 = (bool_0, unresolved_fact_dep_0, str_0)
    dict_0 = {}
    var_0 = module_0.select_collector_classes(tuple_0, dict_0)

def test_case_6():
    dict_0 = {}
    str_0 = '\x0b{RwHFEu]@a'
    var_0 = module_0.resolve_requires(dict_0, str_0)
    list_0 = [str_0, var_0, var_0, var_0]
    collector_not_found_error_0 = module_0.CollectorNotFoundError(*list_0, **dict_0)
    float_0 = 1.5
    str_1 = '7 oIYXBQ3~I'
    base_fact_collector_0 = module_0.BaseFactCollector(float_0, str_1)

def test_case_7():
    str_0 = 'D[i}xbv^-Bqu;&<la'
    str_1 = 'P0:V)+{a%4l^g_'
    dict_0 = {str_0: str_0, str_0: str_0, str_1: str_1, str_0: str_1}
    var_0 = module_0.tsort(dict_0)

def test_case_8():
    int_0 = 1142
    base_fact_collector_0 = module_0.BaseFactCollector(int_0)

def test_case_9():
    bool_0 = False
    str_0 = 'XazoBy^^.sv3^pk'
    var_0 = module_0.get_collector_names(bool_0, str_0)

def test_case_10():
    str_0 = '43}Bv?;zGFQKE#_ett'
    float_0 = None
    var_0 = module_0.collector_classes_from_gather_subset(float_0, str_0)

def test_case_11():
    str_0 = '\x0b{RwHFEu]@a'
    base_fact_collector_0 = module_0.BaseFactCollector()
    base_fact_collector_1 = module_0.BaseFactCollector(base_fact_collector_0)
    var_0 = base_fact_collector_0.collect()
    dict_0 = {base_fact_collector_0: base_fact_collector_1}
    var_1 = module_0.collector_classes_from_gather_subset(dict_0, str_0)

def test_case_12():
    int_0 = None
    set_0 = None
    int_1 = 3385
    bool_0 = False
    base_fact_collector_0 = None
    tuple_0 = (set_0, int_1, bool_0, base_fact_collector_0)
    var_0 = module_0.collector_classes_from_gather_subset(int_0, set_0, tuple_0)

def test_case_13():
    list_0 = []
    dict_0 = {}
    bool_0 = True
    list_1 = [dict_0, dict_0, bool_0, dict_0]
    list_2 = [list_1]
    base_fact_collector_0 = module_0.BaseFactCollector(list_2)
    base_fact_collector_1 = module_0.BaseFactCollector(list_1, base_fact_collector_0)
    var_0 = base_fact_collector_1.collect_with_namespace(list_0)

def test_case_14():
    base_fact_collector_0 = module_0.BaseFactCollector()
    base_fact_collector_1 = module_0.BaseFactCollector(base_fact_collector_0)
    var_0 = base_fact_collector_0.collect()
    dict_0 = {base_fact_collector_0: base_fact_collector_1}
    var_1 = base_fact_collector_0.collect_with_namespace(base_fact_collector_0)
    str_0 = 's66^WyF}`i'
    var_2 = module_0.collector_classes_from_gather_subset(dict_0, str_0)
    var_3 = module_0.resolve_requires(dict_0, dict_0)

def test_case_15():
    str_0 = 'DK'
    str_1 = (str_0, str_0)
    var_0 = module_0.get_collector_names(str_0, str_1)
    str_2 = (str_1, str_0, str_1)
    str_3 = '!B'
    str_4 = (str_1, str_0, str_3)
    var_1 = module_0.get_collector_names(str_2, str_4)
    str_5 = (str_3, str_0, str_3)
    str_6 = '!C'
    str_7 = (str_0, str_0, str_6)
    var_2 = module_0.get_collector_names(str_5, str_3, str_7)

def test_case_16():
    int_0 = 1
    int_1 = 2
    int_2 = 3
    int_3 = [int_1, int_2]
    int_4 = [int_2]
    int_5 = {int_0: int_3, int_1: int_4}
    var_0 = module_0.tsort(int_5)
    str_0 = 'expected CycleFoundInFactDeps'
    var_1 = AssertionError(str_0)
    int_6 = 1
    int_7 = 2
    int_8 = [int_7, int_7]
    var_2 = []
    var_3 = {int_6: int_8, int_7: var_2}
    var_4 = module_0.tsort(var_3)