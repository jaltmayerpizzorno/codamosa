# Automatically generated by Pynguin.
import ansible.module_utils.facts.collector as module_0

def test_case_0():
    try:
        tuple_0 = ()
        str_0 = '.*GdJL'
        dict_0 = {str_0: tuple_0}
        dict_1 = {str_0: dict_0}
        list_0 = [dict_1, dict_0]
        var_0 = module_0.collector_classes_from_gather_subset(tuple_0, str_0, dict_1, list_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        list_1 = [list_0, list_0, list_0, list_0]
        var_0 = module_0.collector_classes_from_gather_subset(list_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'Q\x0bk\tAE<zq+$Uj>h+_'
        str_1 = None
        var_0 = module_0.find_unresolved_requires(str_0, str_1)
    except BaseException:
        pass

def test_case_3():
    try:
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        bytes_0 = b"\xb8\x10\x10\xfb\x17\x85\x16\xd2\x06\x04'"
        list_0 = [bytes_0, bytes_0]
        collector_not_found_error_1 = module_0.CollectorNotFoundError(*list_0)
        var_0 = module_0.resolve_requires(bytes_0, collector_not_found_error_1)
    except BaseException:
        pass

def test_case_4():
    try:
        bool_0 = True
        str_0 = 'XazoBy^^.sv3^pk'
        var_0 = module_0.get_collector_names(bool_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = 934.0
        var_0 = module_0.collector_classes_from_gather_subset(float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        dict_0 = {}
        str_0 = '\x0b{RwHFEu]@a'
        var_0 = module_0.resolve_requires(dict_0, str_0)
        base_fact_collector_0 = module_0.BaseFactCollector()
        base_fact_collector_1 = module_0.BaseFactCollector(base_fact_collector_0)
        var_1 = base_fact_collector_0.collect()
        list_0 = [dict_0, str_0, var_0, base_fact_collector_1, var_0, var_0]
        dict_1 = {base_fact_collector_0: base_fact_collector_1}
        str_1 = 's66^WyF}`i'
        var_2 = module_0.collector_classes_from_gather_subset(dict_1, str_1)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(*list_0)
        list_1 = []
        var_3 = module_0.resolve_requires(list_0, list_1)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '7\x0ce!47:v)'
        bool_0 = None
        tuple_0 = (bool_0,)
        var_0 = module_0.get_collector_names(bool_0, tuple_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        base_fact_collector_0 = module_0.BaseFactCollector()
        base_fact_collector_1 = module_0.BaseFactCollector(base_fact_collector_0)
        var_0 = base_fact_collector_0.collect()
        str_0 = '7oIX:BQ3~I'
        float_0 = -1225.65
        var_1 = base_fact_collector_1.collect(float_0, float_0)
        str_1 = 'Lb$NNQ$6r)\n9_}C*G:-x'
        list_0 = []
        dict_1 = {base_fact_collector_0: base_fact_collector_1}
        var_2 = base_fact_collector_0.collect_with_namespace(base_fact_collector_0)
        str_2 = 's66^WyF}`i'
        var_3 = module_0.collector_classes_from_gather_subset(dict_1, str_2)
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(**dict_0)
        var_4 = module_0.resolve_requires(list_0, unresolved_fact_dep_0)
        set_0 = {str_0, str_1}
        var_5 = module_0.find_unresolved_requires(set_0, dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        dict_0 = {}
        str_0 = '\x0b{RwHFEu]@a'
        var_0 = module_0.resolve_requires(dict_0, str_0)
        base_fact_collector_0 = module_0.BaseFactCollector()
        base_fact_collector_1 = module_0.BaseFactCollector(base_fact_collector_0)
        var_1 = base_fact_collector_0.collect()
        var_2 = base_fact_collector_1.collect_with_namespace()
        str_1 = 'Linux'
        bytes_0 = b'#@\xab\xca\x1f\xf4i\x84\xe9e\xef\xe2\xdf\x8a\x0c\xa9\x8b+b\x8f'
        dict_1 = {base_fact_collector_1: base_fact_collector_1, base_fact_collector_1: var_1, base_fact_collector_0: base_fact_collector_1}
        var_3 = module_0.collector_classes_from_gather_subset(dict_1, str_0)
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        set_0 = {collector_not_found_error_0, collector_not_found_error_0, base_fact_collector_1, collector_not_found_error_0, str_1}
        unresolved_fact_dep_0 = module_0.UnresolvedFactDep(**dict_0)
        var_4 = module_0.collector_classes_from_gather_subset(dict_1, collector_not_found_error_0, bytes_0, set_0)
    except BaseException:
        pass

def test_case_10():
    try:
        dict_0 = {}
        list_0 = [dict_0, dict_0, dict_0]
        cycle_found_in_fact_deps_0 = module_0.CycleFoundInFactDeps(**dict_0)
        base_fact_collector_0 = module_0.BaseFactCollector(cycle_found_in_fact_deps_0)
        var_0 = base_fact_collector_0.collect(list_0)
        base_fact_collector_1 = module_0.BaseFactCollector()
        var_1 = base_fact_collector_1.collect()
        cycle_found_in_fact_deps_1 = module_0.CycleFoundInFactDeps()
        str_0 = '\x0b{RwHFEu]@a'
        var_2 = module_0.resolve_requires(dict_0, str_0)
        base_fact_collector_2 = module_0.BaseFactCollector()
        base_fact_collector_3 = module_0.BaseFactCollector(base_fact_collector_2)
        var_3 = base_fact_collector_2.collect()
        var_4 = base_fact_collector_3.collect_with_namespace()
        collector_not_found_error_0 = module_0.CollectorNotFoundError(**dict_0)
        str_1 = 'Linux'
        bytes_0 = b'#@\xab\xca\x1f\xf4i\x84\xe9e\xef\xe2\xdf\x8a\x0c\xa9\x8b+b\x8f'
        dict_1 = {base_fact_collector_2: base_fact_collector_3}
        str_2 = 's66^WyF}`i'
        var_5 = module_0.collector_classes_from_gather_subset(dict_1, str_2)
        collector_not_found_error_1 = module_0.CollectorNotFoundError()
        set_0 = {collector_not_found_error_1, collector_not_found_error_1, base_fact_collector_3, collector_not_found_error_1, str_1}
        var_6 = module_0.collector_classes_from_gather_subset(collector_not_found_error_0, collector_not_found_error_1, bytes_0, set_0, base_fact_collector_2)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'min'
        list_0 = [str_0, str_0]
        tuple_0 = (list_0, list_0)
        str_1 = 'qp-^-]'
        int_0 = -1716
        list_1 = [int_0, str_1, int_0]
        var_0 = module_0.get_collector_names(tuple_0, str_1, int_0, list_1)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '.4NBVHFnW4Y7d<Ys{?S}'
        bytes_0 = b'\x03F\x06\xfd\xca'
        dict_0 = {bytes_0: bytes_0, str_0: str_0, bytes_0: bytes_0, str_0: bytes_0}
        var_0 = module_0.select_collector_classes(dict_0, dict_0)
        bool_0 = True
        complex_0 = None
        collector_not_found_error_0 = module_0.CollectorNotFoundError()
        complex_1 = None
        var_1 = module_0.get_collector_names(bool_0, complex_0, collector_not_found_error_0, complex_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'a'
        str_1 = 'b'
        str_2 = [str_1]
        str_3 = [str_0]
        str_4 = {str_0: str_2, str_1: str_3}
        var_0 = module_0.tsort(str_4)
    except BaseException:
        pass