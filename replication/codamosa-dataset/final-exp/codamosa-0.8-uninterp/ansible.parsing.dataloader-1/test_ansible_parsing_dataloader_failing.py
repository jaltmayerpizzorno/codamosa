# Automatically generated by Pynguin.
import ansible.parsing.dataloader as module_0

def test_case_0():
    try:
        float_0 = None
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.load(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        data_loader_0 = module_0.DataLoader()
        bytes_0 = b'\x8a\xefma\xa64R\xb2\x86p\x9f\xff\x01\xc2\xf4'
        var_0 = data_loader_0.load_from_file(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_2():
    try:
        data_loader_0 = None
        data_loader_1 = module_0.DataLoader()
        var_0 = data_loader_1.path_exists(data_loader_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -422
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.is_directory(int_0)
    except BaseException:
        pass

def test_case_4():
    try:
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        str_0 = 'p#4g'
        data_loader_1 = module_0.DataLoader()
        var_1 = data_loader_1.is_file(str_0)
        set_0 = {var_1}
        var_2 = data_loader_0.is_directory(set_0)
        var_3 = data_loader_0.is_executable(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '$5/oQou J<1;LC8'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.list_directory(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        list_0 = []
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.is_executable(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '\nEp[/apCL5\twnmO'
        var_0 = data_loader_0.path_dwim_relative_stack(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        data_loader_0 = module_0.DataLoader()
        bytes_0 = b'\x1f\xd1\xe3\x06R5\xcf'
        bool_0 = False
        var_0 = data_loader_0.path_dwim_relative(bool_0, bytes_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        bool_0 = True
        str_0 = '4hs'
        list_0 = None
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.path_dwim_relative_stack(bool_0, str_0, list_0)
    except BaseException:
        pass

def test_case_10():
    try:
        data_loader_0 = module_0.DataLoader()
        bytes_0 = b'DZr\xedJaK\x92'
        var_0 = data_loader_0.get_real_file(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        bool_0 = False
        bytes_0 = b'\xd7&\x03(\x83?\xd5\x9d\xe2'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_real_file(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_12():
    try:
        bool_0 = False
        bytes_0 = None
        set_0 = {bool_0, bytes_0, bytes_0, bool_0}
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.find_vars_files(bool_0, bytes_0, set_0)
    except BaseException:
        pass

def test_case_13():
    try:
        data_loader_0 = module_0.DataLoader()
        list_0 = [data_loader_0]
        var_0 = data_loader_0.is_file(list_0)
        data_loader_1 = module_0.DataLoader()
        bytes_0 = b''
        var_1 = data_loader_1.load_from_file(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_14():
    try:
        bool_0 = True
        bytes_0 = b'\xd7&\x03e\xc4(\x83?\xd5\x9d\xe2'
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_real_file(bool_0, bytes_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bool_0 = True
        bytes_0 = b'\xd7&\x03e\xc4(\x83?\xd5\x9d\xe2'
        str_0 = '.^0~&.)Hcsvd.-}'
        float_0 = -2322.5442
        dict_0 = {bool_0: str_0, float_0: bytes_0}
        list_0 = []
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.path_dwim_relative_stack(str_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = 'v};C9;\nI4?}%~#C'
        str_1 = '\x0ck'
        int_0 = 851
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.find_vars_files(str_0, str_1, int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        data_loader_0 = module_0.DataLoader()
        bytes_0 = b''
        var_0 = data_loader_0.load_from_file(bytes_0, bytes_0)
    except BaseException:
        pass

def test_case_18():
    try:
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.cleanup_all_tmp_files()
        str_0 = 'vs|=8fVDijsEEEB:'
        var_1 = data_loader_0.cleanup_tmp_file(str_0)
        float_0 = None
        var_2 = data_loader_0.set_basedir(float_0)
        list_0 = []
        dict_0 = {}
        var_3 = data_loader_0.load_from_file(list_0, dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        bool_0 = True
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_basedir()
        var_1 = data_loader_0.set_basedir(bool_0)
        bytes_0 = b''
        data_loader_1 = module_0.DataLoader()
        set_0 = None
        var_2 = data_loader_1.cleanup_tmp_file(set_0)
        var_3 = data_loader_1.find_vars_files(bytes_0, bytes_0)
        var_4 = data_loader_0.set_vault_secrets(bool_0)
        str_0 = '9<,It=.jQEn'
        var_5 = data_loader_1.path_dwim(str_0)
        int_0 = 1854
        var_6 = data_loader_1.get_real_file(int_0)
    except BaseException:
        pass

def test_case_20():
    try:
        bool_0 = True
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_basedir()
        data_loader_1 = module_0.DataLoader()
        var_1 = data_loader_1.set_basedir(bool_0)
        var_2 = data_loader_1.set_basedir(data_loader_1)
        bytes_0 = b'\r\x95\xfd\xfe\x9d0\xb82bs\xc0\xba\x19a\xf4'
        data_loader_2 = module_0.DataLoader()
        var_3 = data_loader_2.find_vars_files(bytes_0, bytes_0)
        var_4 = data_loader_1.is_directory(bytes_0)
        str_0 = 'NX.xb)BT'
        var_5 = data_loader_1.set_vault_secrets(bool_0)
        dict_0 = None
        str_1 = '9<,It=.jQEn'
        set_0 = {dict_0, str_0}
        str_2 = 'u(d6LS#w$Fcj}\rH'
        var_6 = data_loader_0.path_dwim_relative(str_1, str_2, set_0)
        bytes_1 = b'~\x14\xeb\x88m\\\xb5\x9b'
        var_7 = data_loader_1.is_file(bytes_1)
    except BaseException:
        pass

def test_case_21():
    try:
        int_0 = True
        str_0 = "Of=LT\x0cTN,/r'(GUmyfL"
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.path_dwim_relative_stack(str_0, int_0, str_0, str_0)
    except BaseException:
        pass

def test_case_22():
    try:
        data_loader_0 = module_0.DataLoader()
        bytes_0 = b'DZ\xe2rJaK\x92'
        str_0 = 'zV\t"0z\t>\x0bW`S'
        str_1 = '~PhaS*H2 ,%$R:~\rq'
        set_0 = {str_1}
        var_0 = data_loader_0.path_dwim_relative_stack(set_0, str_0, str_1, bytes_0)
    except BaseException:
        pass

def test_case_23():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = 'files'
        bool_0 = False
        var_0 = data_loader_0.get_basedir()
        var_1 = data_loader_0.path_dwim_relative(str_0, str_0, str_0, bool_0)
        str_1 = '/home/user/mymodule/tasks'
        var_2 = data_loader_0.cleanup_all_tmp_files()
        var_3 = data_loader_0.path_dwim_relative(str_1, str_1, str_1, bool_0)
        bytes_0 = b'\x8fI\xdb\xda\x84E\x0fN'
        int_0 = 404
        var_4 = data_loader_0.path_dwim_relative(bytes_0, bytes_0, int_0)
    except BaseException:
        pass

def test_case_24():
    try:
        data_loader_0 = module_0.DataLoader()
        bytes_0 = b'\x8a\xefma\xa64R\xb2\x19p\x9f\xff\x01\xc2\x0eG'
        str_0 = '^r8cKu'
        data_loader_1 = module_0.DataLoader()
        int_0 = -76
        str_1 = '/q|do-bGu4)tZXlPxxof'
        dict_0 = {bytes_0: data_loader_0, str_1: bytes_0, data_loader_1: str_0}
        var_0 = data_loader_1.path_dwim_relative_stack(int_0, int_0, str_1, dict_0)
    except BaseException:
        pass

def test_case_25():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = 'qles'
        var_0 = data_loader_0.cleanup_all_tmp_files()
        bool_0 = False
        var_1 = data_loader_0.get_basedir()
        var_2 = data_loader_0.path_dwim_relative(str_0, str_0, var_1, bool_0)
        data_loader_1 = module_0.DataLoader()
        data_loader_2 = module_0.DataLoader()
        data_loader_3 = module_0.DataLoader()
        tuple_0 = ()
        var_3 = data_loader_1.get_real_file(tuple_0)
    except BaseException:
        pass

def test_case_26():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '/tmp/testfile'
        str_1 = 'w'
        var_0 = open(str_0, str_1)
        str_2 = '~'
        var_1 = data_loader_0.get_real_file(str_2)
    except BaseException:
        pass

def test_case_27():
    try:
        bool_0 = True
        data_loader_0 = module_0.DataLoader()
        var_0 = data_loader_0.get_basedir()
        var_1 = data_loader_0.set_basedir(bool_0)
        bytes_0 = b''
        data_loader_1 = module_0.DataLoader()
        set_0 = None
        var_2 = data_loader_1.cleanup_tmp_file(set_0)
        var_3 = data_loader_1.find_vars_files(bytes_0, bytes_0)
        var_4 = data_loader_0.set_vault_secrets(bool_0)
        str_0 = '9<,It=.jQEn'
        var_5 = data_loader_1.path_dwim(str_0)
        int_0 = 1887
        var_6 = data_loader_1.get_real_file(int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        data_loader_0 = module_0.DataLoader()
        str_0 = '/tmp/testfile'
        var_0 = data_loader_0.get_real_file(str_0)
        data_loader_1 = module_0.DataLoader()
        var_1 = data_loader_1.get_basedir()
        var_2 = data_loader_0.cleanup_tmp_file(data_loader_1)
        var_3 = data_loader_1.cleanup_all_tmp_files()
        var_4 = data_loader_1.find_vars_files(str_0, str_0)
        bytes_0 = b'\x01'
        bool_0 = None
        var_5 = data_loader_0.get_real_file(bool_0, bytes_0)
    except BaseException:
        pass