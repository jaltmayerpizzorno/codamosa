# Automatically generated by Pynguin.
import tqdm.rich as module_0
import rich.progress as module_1
import builtins as module_2

def test_case_0():
    try:
        tqdm_rich_0 = module_0.tqdm_rich()
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = None
        dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
        list_0 = [dict_0, bytes_0, dict_0, bytes_0]
        fraction_column_0 = module_0.FractionColumn()
        fraction_column_1 = module_0.FractionColumn(fraction_column_0)
        var_0 = fraction_column_1.render(list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '-gx_3wr)!?fg"'
        bool_0 = False
        float_0 = 352.0
        progress_0 = module_1.Progress(refresh_per_second=float_0, speed_estimate_period=float_0, expand=bool_0)
        var_0 = progress_0.add_task(str_0, bool_0)
        list_0 = [float_0]
        base_exception_0 = module_2.BaseException(*list_0)
        task_0 = module_1.Task(var_0, str_0, float_0, float_0, base_exception_0, float_0, bool_0)
        fraction_column_0 = module_0.FractionColumn()
        var_1 = fraction_column_0.render(task_0)
        tqdm_rich_0 = module_0.tqdm_rich()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -536
        rate_column_0 = module_0.RateColumn(int_0)
        dict_0 = {rate_column_0: int_0}
        list_0 = [dict_0, dict_0]
        var_0 = rate_column_0.render(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        tqdm_rich_0 = module_0.tqdm_rich()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = module_0.trrange()
    except BaseException:
        pass

def test_case_6():
    try:
        tqdm_rich_0 = module_0.tqdm_rich()
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '-gx_3wr)!?fg"'
        bool_0 = False
        float_0 = 352.0
        bool_1 = False
        progress_0 = module_1.Progress(refresh_per_second=float_0, speed_estimate_period=float_0, expand=bool_1)
        var_0 = progress_0.add_task(str_0, bool_0)
        str_1 = '\n    Asynchronous-friendly version of tqdm (Python 3.6+).\n    '
        float_1 = -41.0
        list_0 = [float_1]
        base_exception_0 = module_2.BaseException(*list_0)
        task_0 = module_1.Task(var_0, str_1, float_0, float_1, base_exception_0, float_0, bool_1)
        fraction_column_0 = module_0.FractionColumn()
        fraction_column_1 = module_0.FractionColumn(task_0)
        var_1 = fraction_column_1.render(task_0)
        dict_0 = {}
        tqdm_rich_0 = module_0.tqdm_rich(**dict_0)
    except BaseException:
        pass