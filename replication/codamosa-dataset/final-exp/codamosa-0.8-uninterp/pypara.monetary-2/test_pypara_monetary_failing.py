# Automatically generated by Pynguin.
import pypara.currencies as module_0
import pypara.monetary as module_1
import decimal as module_2
import datetime as module_3

def test_case_0():
    try:
        list_0 = []
        str_0 = ' z#oiuZxg7vM'
        str_1 = '\n    Computes the day count fraction for the "30E/360" convention.\n\n    :param start: The start date of the period.\n    :param asof: The date which the day count fraction to be calculated as of.\n    :param end: The end date of the period (a.k.a. termination date).\n    :return: Day count fraction.\n\n    >>> ex1_start, ex1_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 28)\n    >>> ex2_start, ex2_asof = datetime.date(2007, 12, 28), datetime.date(2008, 2, 29)\n    >>> ex3_start, ex3_asof = datetime.date(2007, 10, 31), datetime.date(2008, 11, 30)\n    >>> ex4_start, ex4_asof = datetime.date(2008, 2, 1), datetime.date(2009, 5, 31)\n    >>> round(dcfc_30_e_360(start=ex1_start, asof=ex1_asof, end=ex1_asof), 14)\n    Decimal(\'0.16666666666667\')\n    >>> round(dcfc_30_e_360(start=ex2_start, asof=ex2_asof, end=ex2_asof), 14)\n    Decimal(\'0.16944444444444\')\n    >>> round(dcfc_30_e_360(start=ex3_start, asof=ex3_asof, end=ex3_asof), 14)\n    Decimal(\'1.08333333333333\')\n    >>> round(dcfc_30_e_360(start=ex4_start, asof=ex4_asof, end=ex4_asof), 14)\n    Decimal(\'1.33055555555556\')\n    '
        int_0 = 1339
        currency_type_0 = module_0.CurrencyType.CRYPTO
        decimal_0 = None
        int_1 = 12
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        incompatible_currency_error_0 = module_1.IncompatibleCurrencyError(currency_0, currency_0, str_0)
        str_2 = '@/?\x0bH\n"U,E(a:{k>'
        none_money_0 = module_1.NoneMoney(*list_0)
        dict_0 = {str_0: incompatible_currency_error_0, str_1: str_0, str_2: none_money_0, str_2: decimal_0}
        none_money_1 = module_1.NoneMoney(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = {}
        decimal_0 = module_2.Decimal(**dict_0)
        none_price_0 = module_1.NonePrice()
        some_price_0 = None
        money_0 = None
        money_1 = module_1.Money(**dict_0)
        bool_0 = money_1.__lt__(money_0)
        money_2 = money_1.__sub__(money_1)
        none_price_1 = module_1.NonePrice()
        price_0 = some_price_0.divide(none_price_1)
    except BaseException:
        pass

def test_case_2():
    try:
        var_0 = None
        money_0 = module_1.Money()
        money_1 = money_0.__floordiv__(var_0)
        money_2 = money_1.divide(var_0)
    except BaseException:
        pass

def test_case_3():
    try:
        dict_0 = {}
        decimal_0 = module_2.Decimal(**dict_0)
        none_price_0 = module_1.NonePrice()
        money_0 = None
        money_1 = module_1.Money(**dict_0)
        bool_0 = money_1.__lt__(money_0)
        money_2 = money_1.negative()
    except BaseException:
        pass

def test_case_4():
    try:
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.negative()
        bool_0 = money_0.as_boolean()
        var_0 = None
        none_money_1 = module_1.NoneMoney()
        money_1 = none_money_1.multiply(var_0)
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round()
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.abs()
        str_0 = 'U!GS_'
        dict_0 = {str_0: str_0}
        some_money_0 = module_1.SomeMoney(**dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.divide(var_0)
        price_1 = price_0.multiply(var_0)
        none_type_0 = None
        money_0 = none_price_0.times(var_0)
        var_1 = price_0.__round__(none_type_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.positive()
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_0 = some_money_1.gte(money_0)
        money_3 = money_0.divide(var_0)
        some_price_0 = module_1.SomePrice()
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = []
        decimal_0 = module_2.Decimal(*list_0)
        none_money_0 = module_1.NoneMoney()
        set_0 = None
        dict_0 = {}
        none_price_0 = module_1.NonePrice(**dict_0)
        money_0 = none_price_0.times(set_0)
        money_1 = none_money_0.with_qty(decimal_0)
        some_price_0 = module_1.SomePrice()
    except BaseException:
        pass

def test_case_8():
    try:
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.abs()
        bool_0 = money_0.as_boolean()
        var_0 = None
        none_money_1 = module_1.NoneMoney()
        money_1 = money_0.__sub__(money_0)
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.scalar_subtract(var_0)
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_9():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.divide(var_0)
        price_1 = price_0.multiply(var_0)
        none_type_0 = None
        money_0 = none_price_0.times(var_0)
        var_1 = price_0.__round__(none_type_0)
        money_1 = money_0.__floordiv__(var_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_0)
        money_2 = money_0.divide(var_0)
        some_price_0 = module_1.SomePrice()
    except BaseException:
        pass

def test_case_10():
    try:
        currency_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.convert(currency_0)
        some_money_0 = module_1.SomeMoney()
    except BaseException:
        pass

def test_case_11():
    try:
        none_price_0 = module_1.NonePrice()
        money_0 = module_1.Money()
        bool_0 = money_0.as_boolean()
    except BaseException:
        pass

def test_case_12():
    try:
        dict_0 = {}
        decimal_0 = module_2.Decimal(**dict_0)
        none_price_0 = module_1.NonePrice()
        money_0 = None
        money_1 = module_1.Money(**dict_0)
        bool_0 = money_1.__lt__(money_0)
        money_2 = money_1.abs()
    except BaseException:
        pass

def test_case_13():
    try:
        var_0 = None
        str_0 = '\\'
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.divide(var_0)
        str_1 = 'QT%eNhVKk~(4O3@*Yq'
        bytes_0 = b'L8N\xd5\x131\xc5\xc2N\xf1\xa6\xa4\xa5#\xcf*\x8f#'
        dict_0 = {str_1: bytes_0}
        price_1 = none_price_0.multiply(str_0)
        price_2 = price_1.scalar_add(var_0)
        bool_0 = price_1.gt(price_2)
        price_3 = price_1.floor_divide(var_0)
        list_0 = [price_3, dict_0, str_1]
        list_1 = []
        none_money_0 = module_1.NoneMoney(*list_1)
        bool_1 = none_money_0.is_equal(price_1)
        date_0 = module_3.date(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_14():
    try:
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.abs()
        bool_0 = money_0.as_boolean()
        var_0 = None
        none_money_1 = module_1.NoneMoney()
        money_1 = none_money_0.divide(var_0)
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.round()
        list_0 = [dict_0, dict_0, dict_0, dict_0]
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_15():
    try:
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.abs()
        bool_0 = money_0.as_boolean()
        var_0 = None
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.positive()
        price_1 = price_0.__floordiv__(var_0)
        price_2 = module_1.Price()
        bool_1 = price_2.__ge__(price_1)
        money_1 = none_money_0.scalar_subtract(var_0)
        none_money_1 = module_1.NoneMoney()
        str_0 = 'M/}?.AE#SJ|\t&TI6'
        str_1 = 'ReadInitialBalances'
        int_0 = 1987
        currency_type_0 = module_0.CurrencyType.METAL
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_price_0 = module_1.SomePrice()
    except BaseException:
        pass

def test_case_16():
    try:
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.positive()
        price_1 = module_1.Price()
        bool_0 = price_1.__ge__(price_1)
        none_money_0 = module_1.NoneMoney()
        bool_1 = price_1.is_equal(none_price_0)
    except BaseException:
        pass

def test_case_17():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.divide(var_0)
        price_1 = price_0.multiply(var_0)
        none_type_0 = None
        money_0 = none_price_0.times(var_0)
        var_1 = price_0.__round__(none_type_0)
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_0)
        money_1 = money_0.divide(var_0)
        dict_0 = {}
        none_money_0 = module_1.NoneMoney(**dict_0)
        int_0 = none_money_0.as_integer()
    except BaseException:
        pass

def test_case_18():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.add(money_0)
        bool_0 = some_money_0.gte(money_2)
        bool_1 = some_money_0.lt(money_2)
        bool_2 = some_money_0.lte(money_1)
        bool_3 = some_money_0.as_boolean()
        money_3 = money_2.__sub__(money_1)
        money_4 = money_0.divide(var_0)
        bool_4 = money_4.__gt__(money_3)
        money_5 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_19():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.divide(var_0)
        float_0 = none_price_0.as_float()
    except BaseException:
        pass

def test_case_20():
    try:
        price_0 = module_1.Price()
        price_1 = price_0.abs()
    except BaseException:
        pass

def test_case_21():
    try:
        dict_0 = {}
        decimal_0 = module_2.Decimal(**dict_0)
        none_price_0 = module_1.NonePrice()
        money_0 = None
        money_1 = module_1.Money(**dict_0)
        bool_0 = money_1.__lt__(money_0)
        money_2 = money_1.subtract(money_0)
    except BaseException:
        pass

def test_case_22():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        int_0 = -3273
        price_1 = price_0.round(int_0)
        price_2 = price_0.__truediv__(var_0)
        price_3 = price_0.multiply(var_0)
        price_4 = price_0.scalar_subtract(var_0)
        bool_0 = none_price_0.gte(price_4)
        price_5 = price_3.add(price_0)
        none_type_0 = None
        bool_1 = price_1.__lt__(price_2)
        money_0 = none_price_0.times(var_0)
        bool_2 = price_3.gt(price_3)
        var_1 = price_3.__round__(none_type_0)
        money_1 = money_0.subtract(money_0)
        price_6 = price_0.add(price_3)
        price_7 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        str_0 = '6fwP}D*'
        str_1 = 'w73jKnVXOw.l'
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = module_2.Decimal()
        int_1 = -1454
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_1)
        none_money_0 = module_1.NoneMoney()
        money_2 = none_money_0.with_ccy(currency_0)
        some_money_0 = module_1.SomeMoney(*list_0)
        money_3 = some_money_0.subtract(money_1)
        money_4 = money_0.__mul__(var_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_3 = some_money_0.lte(money_3)
        bool_4 = some_money_1.gte(money_0)
        bool_5 = some_money_1.is_equal(price_3)
        money_5 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_23():
    try:
        price_0 = module_1.Price()
        price_1 = module_1.Price()
        var_0 = price_1.with_dov
        price_2 = module_1.Price()
        var_1 = None
        price_3 = price_2.with_dov(var_1)
        bool_0 = price_1.is_equal(price_1)
    except BaseException:
        pass

def test_case_24():
    try:
        none_price_0 = module_1.NonePrice()
        money_0 = module_1.Money()
        none_money_0 = module_1.NoneMoney()
        money_1 = money_0.__neg__()
        money_2 = money_1.add(money_0)
    except BaseException:
        pass

def test_case_25():
    try:
        price_0 = module_1.Price()
        price_1 = price_0.positive()
    except BaseException:
        pass

def test_case_26():
    try:
        price_0 = module_1.Price()
        var_0 = None
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.scalar_add(var_0)
        price_1 = module_1.Price()
        price_2 = price_0.add(price_0)
    except BaseException:
        pass

def test_case_27():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.divide(var_0)
        price_1 = price_0.multiply(var_0)
        none_type_0 = None
        money_0 = none_price_0.times(var_0)
        var_1 = price_0.__round__(none_type_0)
        none_price_1 = module_1.NonePrice()
        price_2 = none_price_1.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        price_3 = price_1.__add__(price_1)
        some_money_0 = module_1.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_0)
        money_1 = money_0.divide(var_0)
        price_4 = price_2.multiply(var_0)
        price_5 = price_4.__sub__(price_1)
        some_price_0 = module_1.SomePrice()
    except BaseException:
        pass

def test_case_28():
    try:
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        var_0 = None
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.positive()
        price_1 = price_0.__floordiv__(var_0)
        price_2 = module_1.Price()
        bool_0 = price_2.__ge__(price_1)
        none_money_0 = module_1.NoneMoney()
        price_3 = price_2.multiply(var_0)
    except BaseException:
        pass

def test_case_29():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.divide(var_0)
        int_0 = none_price_0.as_integer()
    except BaseException:
        pass

def test_case_30():
    try:
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.negative()
        bool_0 = none_money_0.as_boolean()
        bool_1 = money_0.__gt__(money_0)
        float_0 = none_money_0.as_float()
    except BaseException:
        pass

def test_case_31():
    try:
        money_0 = module_1.Money()
        none_money_0 = module_1.NoneMoney()
        money_1 = money_0.add(money_0)
    except BaseException:
        pass

def test_case_32():
    try:
        money_0 = module_1.Money()
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_33():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.__le__(money_0)
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_34():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.__gt__(money_0)
        float_0 = money_0.__float__()
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_35():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.__le__(money_0)
        money_1 = money_0.__abs__()
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_36():
    try:
        str_0 = '9'
        money_0 = module_1.Money()
        bool_0 = money_0.__eq__(str_0)
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_37():
    try:
        price_0 = module_1.Price()
        price_1 = price_0.negative()
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = "rIF&]/A`]'^N8\x0b6Bc!y"
        money_0 = module_1.Money()
        str_1 = '`2Ge,kV'
        int_0 = 189
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        str_2 = 'GeneralLedger'
        decimal_1 = module_2.Decimal()
        currency_0 = module_0.Currency(str_2, str_2, int_0, currency_type_0, decimal_1, int_0)
        decimal_2 = currency_0.quantize(decimal_0)
        int_1 = -460
        currency_1 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_2, int_1)
        money_1 = money_0.with_ccy(currency_1)
        int_2 = money_0.as_integer()
    except BaseException:
        pass

def test_case_39():
    try:
        currency_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.with_ccy(currency_0)
        none_money_0 = module_1.NoneMoney()
        list_0 = [none_money_0, none_money_0]
        str_0 = '\n1-!e84W2'
        dict_0 = {str_0: none_money_0, str_0: str_0, str_0: none_money_0, str_0: list_0}
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_40():
    try:
        price_0 = module_1.Price()
        var_0 = None
        price_1 = price_0.divide(var_0)
    except BaseException:
        pass

def test_case_41():
    try:
        int_0 = -2902
        money_0 = module_1.Money()
        bool_0 = money_0.gt(money_0)
        var_0 = money_0.__round__(int_0)
    except BaseException:
        pass

def test_case_42():
    try:
        str_0 = '9'
        str_1 = 'd[d!'
        str_2 = ''
        list_0 = [str_1, str_2, str_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        int_0 = some_money_0.as_integer()
    except BaseException:
        pass

def test_case_43():
    try:
        list_0 = None
        str_0 = 'm'
        money_0 = module_1.Money()
        dict_0 = {str_0: money_0}
        int_0 = money_0.__int__()
        some_price_0 = module_1.SomePrice(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_44():
    try:
        str_0 = '*0'
        str_1 = "rIF&]/A`]'^N8\x0b6Bc!y"
        money_0 = module_1.Money()
        str_2 = '`2Ge,kV'
        int_0 = 189
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        str_3 = 'GeneralLedger'
        decimal_1 = module_2.Decimal()
        currency_0 = module_0.Currency(str_0, str_3, int_0, currency_type_0, decimal_1, int_0)
        int_1 = -460
        currency_1 = module_0.Currency(str_1, str_2, int_0, currency_type_0, decimal_0, int_1)
        money_1 = money_0.with_qty(decimal_1)
        bool_0 = money_0.__gt__(money_0)
        float_0 = money_0.__float__()
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_45():
    try:
        money_0 = module_1.Money()
        float_0 = money_0.as_float()
    except BaseException:
        pass

def test_case_46():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.is_equal(money_0)
    except BaseException:
        pass

def test_case_47():
    try:
        none_price_0 = module_1.NonePrice()
        bool_0 = none_price_0.as_boolean()
        price_0 = none_price_0.negative()
        var_0 = price_0.__round__()
        price_1 = price_0.__neg__()
        money_0 = module_1.Money()
        bool_1 = money_0.__bool__()
        money_1 = money_0.positive()
    except BaseException:
        pass

def test_case_48():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.__le__(money_0)
        var_0 = None
        money_1 = money_0.multiply(var_0)
    except BaseException:
        pass

def test_case_49():
    try:
        int_0 = -2902
        money_0 = module_1.Money()
        dict_0 = {}
        none_money_0 = module_1.NoneMoney(**dict_0)
        money_1 = money_0.__add__(money_0)
        money_2 = none_money_0.add(money_0)
        var_0 = money_2.__round__(int_0)
    except BaseException:
        pass

def test_case_50():
    try:
        money_0 = module_1.Money()
        decimal_0 = module_2.Decimal()
        decimal_1 = module_2.Decimal()
        var_0 = None
        money_1 = money_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_51():
    try:
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        none_price_0 = module_1.NonePrice(**dict_0)
        price_0 = none_price_0.positive()
        price_1 = module_1.Price()
        bool_0 = price_1.__ge__(price_0)
        none_money_0 = module_1.NoneMoney()
        str_0 = 'M/}?.AE#SJ|\t&TI6'
        str_1 = 'ReadInitialBalances'
        bool_1 = price_0.is_equal(none_price_0)
        int_0 = 1987
        currency_type_0 = module_0.CurrencyType.METAL
        bool_2 = price_1.__lt__(price_1)
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        some_price_0 = module_1.SomePrice()
    except BaseException:
        pass

def test_case_52():
    try:
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.negative()
        var_0 = price_0.__round__()
        money_0 = module_1.Money()
        bool_0 = money_0.__bool__()
        money_1 = module_1.Money()
        bool_1 = money_1.gte(money_0)
        money_2 = module_1.Money()
        float_0 = money_1.__float__()
        date_0 = module_3.date()
    except BaseException:
        pass

def test_case_53():
    try:
        price_0 = module_1.Price()
        price_1 = price_0.__neg__()
        str_0 = "g\nqs3p_U+='(O"
        bytes_0 = b'\x98\xcb\xdeHI+\xef>\x99\x90G\xb8^>ub\xb7\x15\x1b'
        list_0 = [str_0, bytes_0, str_0]
        decimal_0 = module_2.Decimal(*list_0)
    except BaseException:
        pass

def test_case_54():
    try:
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.negative()
        var_0 = price_0.__round__()
        money_0 = module_1.Money()
        bool_0 = money_0.__bool__()
        money_1 = module_1.Money()
        money_2 = money_0.__pos__()
        dict_0 = {}
        bool_1 = money_1.gte(money_2)
        none_money_0 = module_1.NoneMoney(**dict_0)
        money_3 = none_money_0.add(money_1)
        money_4 = module_1.Money()
        var_1 = money_4.__round__()
    except BaseException:
        pass

def test_case_55():
    try:
        money_0 = module_1.Money()
        money_1 = money_0.scalar_subtract(money_0)
    except BaseException:
        pass

def test_case_56():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.__bool__()
        money_1 = module_1.Money()
        var_0 = None
        money_2 = money_1.floor_divide(var_0)
    except BaseException:
        pass

def test_case_57():
    try:
        money_0 = module_1.Money()
        bytes_0 = b'\xee\x16\xbd'
        money_1 = money_0.__truediv__(bytes_0)
        str_0 = 'rc#Fl~ MoXDvw(H"4Y\t'
        dict_0 = {str_0: str_0, str_0: str_0}
        none_price_0 = module_1.NonePrice(**dict_0)
    except BaseException:
        pass

def test_case_58():
    try:
        list_0 = None
        money_0 = module_1.Money()
        bool_0 = money_0.lt(money_0)
        bool_1 = money_0.__bool__()
        money_1 = module_1.Money()
        money_2 = money_0.__pos__()
        dict_0 = {}
        bool_2 = money_1.gte(money_2)
        none_money_0 = module_1.NoneMoney(**dict_0)
        none_price_0 = module_1.NonePrice(*list_0)
    except BaseException:
        pass

def test_case_59():
    try:
        money_0 = module_1.Money()
        date_0 = None
        money_1 = money_0.__mul__(date_0)
        bool_0 = money_0.__le__(money_0)
        money_2 = money_0.__abs__()
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_60():
    try:
        money_0 = module_1.Money()
        float_0 = -317.482553
        none_money_0 = module_1.NoneMoney()
        money_1 = none_money_0.floor_divide(float_0)
        bool_0 = money_0.__ge__(money_1)
        var_0 = money_0.__round__()
    except BaseException:
        pass

def test_case_61():
    try:
        str_0 = 'd,[du/'
        str_1 = '-UK\x0beupU=L7!vAE4'
        list_0 = [str_0, str_0, str_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        float_0 = some_money_0.as_float()
    except BaseException:
        pass

def test_case_62():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.__bool__()
        str_0 = 'd,[du/'
        int_0 = -2902
        money_1 = module_1.Money()
        money_2 = money_0.__pos__()
        str_1 = 'Denar'
        currency_type_0 = module_0.CurrencyType.ALTERNATIVE
        decimal_0 = module_2.Decimal()
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_3 = money_1.convert(currency_0)
    except BaseException:
        pass

def test_case_63():
    try:
        money_0 = module_1.Money()
        bool_0 = money_0.__bool__()
        int_0 = -2902
        money_1 = module_1.Money()
        money_2 = money_1.__abs__()
        bool_1 = money_0.lte(money_2)
        dict_0 = {}
        none_money_0 = module_1.NoneMoney(**dict_0)
        money_3 = none_money_0.add(money_1)
        var_0 = money_3.__round__(int_0)
    except BaseException:
        pass

def test_case_64():
    try:
        float_0 = 102.303621
        dict_0 = None
        bytes_0 = b'\x82\x95PM\xc2\xa4\xdf_OA\xfb'
        currency_type_0 = module_0.CurrencyType.CRYPTO
        date_0 = None
        tuple_0 = (bytes_0, currency_type_0, date_0)
        list_0 = [dict_0, tuple_0, dict_0]
        some_price_0 = module_1.SomePrice(*list_0)
        price_0 = some_price_0.scalar_add(float_0)
    except BaseException:
        pass

def test_case_65():
    try:
        none_price_0 = module_1.NonePrice()
        bool_0 = none_price_0.as_boolean()
        price_0 = none_price_0.negative()
        var_0 = price_0.__round__()
        price_1 = price_0.__neg__()
        money_0 = module_1.Money()
        money_1 = module_1.Money()
        money_2 = money_0.__pos__()
        bool_1 = money_1.gte(money_2)
        money_3 = module_1.Money()
        money_4 = money_0.divide(none_price_0)
    except BaseException:
        pass

def test_case_66():
    try:
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.negative()
        var_0 = price_0.__round__()
        price_1 = price_0.__neg__()
        money_0 = module_1.Money()
        bool_0 = money_0.__bool__()
        int_0 = -2902
        money_1 = module_1.Money()
        money_2 = money_0.__pos__()
        dict_0 = {}
        date_0 = None
        money_3 = money_0.with_dov(date_0)
        bool_1 = money_1.gte(money_2)
        none_money_0 = module_1.NoneMoney(**dict_0)
        money_4 = none_money_0.add(money_1)
        price_2 = price_1.round(int_0)
        money_5 = module_1.Money()
        var_1 = money_5.__round__()
    except BaseException:
        pass

def test_case_67():
    try:
        var_0 = None
        str_0 = 'N,Nc`u>i!2}'
        list_0 = [str_0, str_0, str_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_0 = some_money_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_68():
    try:
        bytes_0 = b'\xe5\xea\xb5\x14T!a\xaf\x94Q\t\xd77|\x1a\x0e'
        none_price_0 = module_1.NonePrice()
        decimal_0 = module_2.Decimal()
        dict_0 = {}
        monetary_operation_exception_0 = module_1.MonetaryOperationException()
        list_0 = [bytes_0, dict_0, monetary_operation_exception_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_0 = some_money_0.with_qty(decimal_0)
    except BaseException:
        pass

def test_case_69():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        price_1 = price_0.multiply(var_0)
        price_2 = price_0.scalar_subtract(var_0)
        bool_0 = none_price_0.gte(price_2)
        price_3 = none_price_0.divide(var_0)
        price_4 = price_3.multiply(var_0)
        none_type_0 = None
        money_0 = none_price_0.times(var_0)
        var_1 = price_3.__round__(none_type_0)
        money_1 = money_0.subtract(money_0)
        price_5 = none_price_0.subtract(price_2)
        price_6 = price_0.add(price_5)
        price_7 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        bool_1 = price_5.gt(price_7)
        some_money_0 = module_1.SomeMoney(*list_0)
        int_0 = -2724
        money_2 = some_money_0.round(int_0)
    except BaseException:
        pass

def test_case_70():
    try:
        price_0 = module_1.Price()
        bool_0 = price_0.as_boolean()
    except BaseException:
        pass

def test_case_71():
    try:
        price_0 = module_1.Price()
        price_1 = price_0.subtract(price_0)
    except BaseException:
        pass

def test_case_72():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        price_1 = price_0.multiply(var_0)
        price_2 = none_price_0.add(price_1)
        bool_0 = none_price_0.gte(price_2)
        price_3 = price_0.multiply(var_0)
        none_type_0 = None
        money_0 = price_0.times(var_0)
        var_1 = price_1.__round__(none_type_0)
        money_1 = money_0.subtract(money_0)
        price_4 = price_0.add(price_1)
        price_5 = none_price_0.multiply(var_0)
        bool_1 = price_5.__gt__(price_2)
        list_0 = [var_1, money_0, var_1]
        bool_2 = price_3.gt(price_5)
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.subtract(money_1)
        money_3 = money_2.positive()
        bool_3 = some_money_0.gte(money_0)
        bool_4 = some_money_0.is_equal(price_1)
        money_4 = money_0.divide(var_0)
        price_6 = price_3.subtract(price_4)
        money_5 = some_money_0.scalar_add(var_0)
    except BaseException:
        pass

def test_case_73():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        bool_1 = none_price_0.lte(price_1)
        bool_2 = some_money_1.lte(money_2)
        price_2 = price_1.__abs__()
        bool_3 = some_money_0.gt(money_1)
        money_3 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_74():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.__abs__()
        bool_0 = some_money_0.gte(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        bool_1 = none_price_0.lte(price_1)
        bool_2 = some_money_0.lt(money_2)
        bool_3 = some_money_0.lte(money_2)
        bool_4 = price_1.gt(price_1)
        money_3 = money_2.__sub__(money_0)
        money_4 = money_3.abs()
        bool_5 = money_2.__gt__(money_2)
        price_2 = some_price_0.abs()
        price_3 = price_2.__sub__(price_1)
        price_4 = some_price_0.subtract(price_3)
        bool_6 = some_price_0.gte(price_4)
        bool_7 = price_3.is_equal(bool_5)
        money_5 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_75():
    try:
        price_0 = module_1.Price()
        var_0 = None
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.multiply(var_0)
        price_1 = price_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_76():
    try:
        price_0 = None
        price_1 = module_1.Price()
        price_2 = price_1.__sub__(price_0)
        dict_0 = {}
        list_0 = []
        some_money_0 = module_1.SomeMoney(*list_0, **dict_0)
    except BaseException:
        pass

def test_case_77():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        int_0 = -3261
        price_1 = price_0.round(int_0)
        decimal_0 = module_2.Decimal()
        bool_0 = price_1.__lt__(price_0)
        bool_1 = none_price_0.lt(price_0)
        bool_2 = price_1.lte(price_1)
        money_0 = price_1.times(var_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [int_0, money_0, int_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.divide(var_0)
    except BaseException:
        pass

def test_case_78():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        money_1 = money_0.round()
        price_0 = none_price_0.scalar_add(var_0)
        bool_0 = price_0.__lt__(price_0)
        list_0 = [none_price_0, price_0, money_1]
        some_price_0 = module_1.SomePrice(*list_0)
        money_2 = some_price_0.times(var_0)
    except BaseException:
        pass

def test_case_79():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        decimal_0 = module_2.Decimal()
        price_0 = none_price_0.with_qty(decimal_0)
        money_0 = none_price_0.times(var_0)
        money_1 = money_0.subtract(money_0)
        price_1 = none_price_0.multiply(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_0)
        str_0 = '\\gym4P\\y ,|t+%i'
        int_0 = 2843
        currency_type_0 = module_0.CurrencyType.MONEY
        int_1 = 3
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_1)
        bool_1 = False
        money_2 = some_money_0.convert(currency_0, bool_1)
    except BaseException:
        pass

def test_case_80():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        int_0 = -3278
        decimal_0 = module_2.Decimal()
        price_0 = none_price_0.multiply(var_0)
        money_0 = none_price_0.times(var_0)
        price_1 = none_price_0.multiply(var_0)
        list_0 = [int_0, money_0, int_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = money_1.lt(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_1 = some_money_0.lte(money_1)
        money_3 = money_0.subtract(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_2 = some_price_0.add(price_1)
        price_3 = some_price_0.add(price_2)
        str_0 = 'Yuan Renminbi (Off-shore)'
        str_1 = 'UK[f5$.uwyBV_\\?z\x0b[h'
        int_1 = -2939
        money_4 = money_0.__abs__()
        currency_type_0 = module_0.CurrencyType.MONEY
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_1)
        bool_2 = True
        money_5 = some_money_1.convert(currency_0, bool_2)
    except BaseException:
        pass

def test_case_81():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        money_1 = money_0.round()
        price_0 = none_price_0.scalar_add(var_0)
        bool_0 = price_0.__lt__(price_0)
        int_0 = -3273
        price_1 = price_0.round(int_0)
        price_2 = price_0.__truediv__(var_0)
        decimal_0 = module_2.Decimal()
        price_3 = none_price_0.with_qty(decimal_0)
        price_4 = price_0.multiply(var_0)
        price_5 = price_0.scalar_subtract(var_0)
        bool_1 = none_price_0.gte(price_5)
        none_type_0 = None
        bool_2 = price_1.__lt__(price_2)
        money_2 = none_price_0.times(var_0)
        var_1 = price_4.__round__(none_type_0)
        money_3 = money_2.subtract(money_2)
        price_6 = price_0.add(price_4)
        price_7 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_2, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_4 = some_money_0.subtract(money_3)
        bool_3 = some_money_0.gte(money_3)
        bool_4 = some_money_0.is_equal(some_money_0)
        bool_5 = none_price_0.lte(price_1)
        str_0 = '\\gym4P\\y ,|t+%i'
        int_1 = 2843
        currency_type_0 = module_0.CurrencyType.MONEY
        str_1 = '[?l3r~'
        int_2 = 29
        currency_0 = module_0.Currency(str_0, str_1, int_2, currency_type_0, decimal_0, int_1)
        money_5 = some_money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_82():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        int_0 = -3278
        decimal_0 = module_2.Decimal()
        money_0 = none_price_0.times(var_0)
        list_0 = [int_0, money_0, int_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = money_1.lt(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_1 = some_money_1.lte(money_0)
        money_3 = money_0.subtract(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        int_1 = 3
        str_0 = ' |YkeT]z('
        int_2 = -19
        str_1 = 'Lo'
        currency_type_0 = module_0.CurrencyType.MONEY
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_2)
        money_4 = money_1.convert(currency_0)
    except BaseException:
        pass

def test_case_83():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        int_0 = -3273
        price_1 = price_0.round(int_0)
        price_2 = price_0.__truediv__(var_0)
        decimal_0 = module_2.Decimal()
        price_3 = none_price_0.with_qty(decimal_0)
        price_4 = price_0.multiply(var_0)
        bool_0 = price_2.as_boolean()
        price_5 = price_0.scalar_subtract(var_0)
        bool_1 = none_price_0.gte(price_5)
        price_6 = price_4.add(price_0)
        none_type_0 = None
        bool_2 = price_1.__lt__(price_2)
        money_0 = none_price_0.times(var_0)
        bool_3 = price_4.gt(price_4)
        var_1 = price_4.__round__(none_type_0)
        money_1 = money_0.subtract(money_0)
        price_7 = price_0.add(price_4)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.subtract(money_1)
        money_3 = money_2.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_4 = some_money_0.lte(money_2)
        bool_5 = some_money_1.gte(money_0)
        bool_6 = some_money_1.is_equal(price_4)
        bool_7 = none_price_0.lte(price_5)
        str_0 = '\\gym4P\\y ,|t+%i'
        int_1 = 2843
        currency_type_0 = module_0.CurrencyType.MONEY
        int_2 = 3
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_2)
        bool_8 = True
        money_4 = money_2.with_ccy(currency_0)
        money_5 = some_money_0.convert(currency_0, bool_8)
    except BaseException:
        pass

def test_case_84():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_0 = some_money_0.gte(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        bool_1 = none_price_0.lte(price_1)
        bool_2 = some_money_1.lt(money_2)
        bool_3 = some_money_1.lte(money_2)
        bool_4 = some_money_0.gt(money_1)
        none_price_1 = module_1.NonePrice()
        money_3 = some_money_0.multiply(var_0)
    except BaseException:
        pass

def test_case_85():
    try:
        none_money_0 = module_1.NoneMoney()
        date_0 = None
        money_0 = none_money_0.with_dov(date_0)
        money_1 = none_money_0.abs()
        money_2 = none_money_0.round()
        date_1 = module_3.date()
    except BaseException:
        pass

def test_case_86():
    try:
        int_0 = 152
        none_money_0 = module_1.NoneMoney()
        list_0 = [int_0, none_money_0, int_0]
        var_0 = None
        some_price_0 = module_1.SomePrice(*list_0)
        price_0 = some_price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_87():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        decimal_0 = module_2.Decimal()
        none_type_0 = None
        price_1 = price_0.scalar_subtract(var_0)
        money_0 = none_price_0.times(var_0)
        var_1 = price_1.__round__(none_type_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        some_price_0 = module_1.SomePrice(*list_0)
        price_3 = some_price_0.add(price_1)
        bool_0 = none_price_0.lte(price_3)
        bool_1 = none_price_0.lte(price_1)
        bool_2 = some_money_0.gt(money_0)
        bool_3 = some_price_0.lte(price_3)
        price_4 = none_price_0.with_qty(decimal_0)
        price_5 = some_price_0.with_qty(decimal_0)
        bool_4 = some_price_0.gte(price_0)
        price_6 = some_price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_88():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.add(money_0)
        bool_0 = some_money_0.gte(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        bool_1 = some_money_0.lt(money_2)
        bool_2 = some_money_0.lte(money_2)
        bool_3 = price_1.gt(price_1)
        bool_4 = some_money_0.as_boolean()
        money_3 = money_2.__sub__(money_0)
        money_4 = money_0.divide(var_0)
        bool_5 = money_2.__gt__(money_2)
        price_2 = some_price_0.abs()
        price_3 = some_price_0.positive()
        bool_6 = some_price_0.gte(price_3)
        bool_7 = price_1.is_equal(bool_5)
        money_5 = money_1.__truediv__(var_0)
    except BaseException:
        pass

def test_case_89():
    try:
        decimal_0 = module_2.Decimal()
        price_0 = module_1.Price()
        none_money_0 = module_1.NoneMoney()
        bool_0 = price_0.gt(price_0)
        some_money_0 = module_1.SomeMoney()
    except BaseException:
        pass

def test_case_90():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        int_0 = -3278
        price_1 = price_0.round(int_0)
        decimal_0 = module_2.Decimal()
        bool_0 = price_1.__lt__(price_0)
        bool_1 = none_price_0.lt(price_0)
        price_2 = price_1.scalar_subtract(var_0)
        money_0 = none_price_0.times(var_0)
        price_3 = none_price_0.multiply(var_0)
        list_0 = [int_0, money_0, int_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_2 = money_1.lt(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_3 = some_money_0.lte(money_1)
        some_price_0 = module_1.SomePrice(*list_0)
        price_4 = some_price_0.add(price_1)
        bool_4 = none_price_0.lte(price_4)
        price_5 = some_price_0.subtract(price_4)
        bool_5 = price_3.is_equal(bool_2)
        bool_6 = some_money_0.gt(money_2)
        price_6 = price_5.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_91():
    try:
        list_0 = []
        none_money_0 = module_1.NoneMoney(*list_0)
        bool_0 = none_money_0.as_boolean()
        price_0 = module_1.Price()
        price_1 = price_0.__abs__()
        some_price_0 = module_1.SomePrice()
    except BaseException:
        pass

def test_case_92():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        price_1 = none_price_0.scalar_add(var_0)
        bool_0 = price_0.__lt__(price_0)
        money_0 = none_price_0.times(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_1 = some_money_0.gte(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_2 = some_price_0.add(price_0)
        price_3 = none_price_0.subtract(price_0)
        str_0 = ''
        int_0 = 847
        currency_type_0 = module_0.CurrencyType.METAL
        decimal_0 = None
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        price_4 = some_price_0.convert(currency_0)
    except BaseException:
        pass

def test_case_93():
    try:
        price_0 = module_1.Price()
        int_0 = -3273
        price_1 = price_0.round(int_0)
    except BaseException:
        pass

def test_case_94():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        price_0 = none_price_0.floor_divide(var_0)
        bool_0 = money_0.gte(money_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        some_price_0 = module_1.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        bool_1 = some_money_0.lt(money_0)
        price_2 = price_0.round()
        bool_2 = some_price_0.lte(price_2)
        price_3 = none_price_0.subtract(price_1)
        bool_3 = price_3.gt(price_1)
        money_1 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_95():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        money_0 = none_price_0.times(var_0)
        price_0 = none_price_0.floor_divide(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        some_price_0 = module_1.SomePrice(*list_0)
        price_1 = some_price_0.add(price_0)
        bool_0 = none_price_0.lte(price_1)
        price_2 = price_0.round()
        decimal_0 = None
        price_3 = some_price_0.with_qty(decimal_0)
        bool_1 = price_3.gt(price_2)
        money_1 = some_money_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_96():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        int_0 = -3273
        price_1 = price_0.round(int_0)
        price_2 = price_0.__truediv__(var_0)
        decimal_0 = module_2.Decimal()
        bool_0 = price_2.as_boolean()
        price_3 = price_0.scalar_subtract(var_0)
        bool_1 = none_price_0.gte(price_3)
        price_4 = price_1.__add__(price_1)
        none_type_0 = None
        bool_2 = price_1.__lt__(price_2)
        money_0 = none_price_0.times(var_0)
        bool_3 = price_3.gt(price_3)
        var_1 = price_1.__round__(none_type_0)
        money_1 = money_0.subtract(money_0)
        price_5 = price_0.add(price_3)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        bool_4 = some_money_0.is_equal(price_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_6 = some_price_0.add(price_5)
        bool_5 = none_price_0.lte(price_1)
        currency_type_0 = module_0.CurrencyType.MONEY
        price_7 = some_price_0.subtract(price_4)
        bool_6 = price_6.is_equal(price_7)
        str_0 = '\n        Description of the ledger entry.\n        '
        currency_0 = module_0.Currency(str_0, str_0, int_0, currency_type_0, decimal_0, int_0)
        money_2 = some_money_0.convert(currency_0)
    except BaseException:
        pass

def test_case_97():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        price_1 = none_price_0.scalar_add(var_0)
        bool_0 = price_0.__lt__(price_0)
        money_0 = none_price_0.times(var_0)
        list_0 = [price_0, money_0, price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_1 = some_money_0.gte(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_2 = some_price_0.add(price_0)
        price_3 = none_price_0.subtract(price_0)
        price_4 = some_price_0.add(price_3)
        price_5 = some_price_0.subtract(price_0)
        price_6 = price_3.scalar_subtract(var_0)
        bool_2 = none_price_0.lte(price_5)
        price_7 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_98():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        int_0 = -3273
        price_1 = price_0.round(int_0)
        decimal_0 = module_2.Decimal()
        none_type_0 = None
        bool_0 = price_1.__lt__(price_1)
        money_0 = price_0.times(var_0)
        var_1 = price_1.__round__(none_type_0)
        money_1 = money_0.scalar_subtract(var_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.subtract(money_1)
        money_3 = money_2.add(money_0)
        money_4 = money_2.add(money_2)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_1 = some_money_0.lte(money_1)
        some_price_0 = module_1.SomePrice(*list_0)
        price_3 = some_price_0.add(price_0)
        bool_2 = none_price_0.lte(price_1)
        bool_3 = none_price_0.lte(price_0)
        bool_4 = some_money_0.gt(money_0)
        bool_5 = some_price_0.lte(price_0)
        price_4 = none_price_0.with_qty(decimal_0)
        bool_6 = money_2.__gt__(money_1)
        price_5 = price_3.multiply(var_0)
    except BaseException:
        pass

def test_case_99():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        int_0 = -3264
        price_1 = price_0.round(int_0)
        decimal_0 = module_2.Decimal()
        none_type_0 = None
        bool_0 = price_1.__lt__(price_1)
        money_0 = none_price_0.times(var_0)
        var_1 = price_1.__round__(none_type_0)
        money_1 = money_0.subtract(money_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.subtract(money_1)
        money_3 = money_2.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_1 = some_money_0.gte(money_3)
        some_price_0 = module_1.SomePrice(*list_0)
        price_3 = some_price_0.add(price_1)
        price_4 = some_price_0.add(price_3)
        bool_2 = none_price_0.lte(price_1)
        str_0 = '\\gym4P\\y ,|t+%i'
        currency_type_0 = module_0.CurrencyType.ALTERNATIVE
        str_1 = '-%m.4hV\\j*C_Gi,WtP'
        int_1 = 227
        currency_0 = module_0.Currency(str_1, str_0, int_0, currency_type_0, decimal_0, int_1)
        price_5 = some_price_0.with_ccy(currency_0)
        str_2 = ' L'
        currency_1 = module_0.Currency(str_2, str_2, int_0, currency_type_0, decimal_0, int_0)
        money_4 = some_money_0.convert(currency_1)
    except BaseException:
        pass

def test_case_100():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        int_0 = -3273
        price_1 = price_0.round(int_0)
        price_2 = price_0.__truediv__(var_0)
        decimal_0 = module_2.Decimal()
        bool_0 = price_2.as_boolean()
        price_3 = price_0.scalar_subtract(var_0)
        bool_1 = none_price_0.gte(price_3)
        price_4 = price_1.__add__(price_1)
        none_type_0 = None
        bool_2 = price_1.__lt__(price_2)
        money_0 = none_price_0.times(var_0)
        bool_3 = price_3.gt(price_3)
        var_1 = price_1.__round__(none_type_0)
        money_1 = money_0.subtract(money_0)
        price_5 = price_0.add(price_3)
        price_6 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.subtract(money_1)
        money_3 = money_2.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_4 = some_money_0.lte(money_2)
        bool_5 = some_money_0.gte(money_3)
        bool_6 = some_money_1.is_equal(price_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_7 = some_price_0.add(price_5)
        bool_7 = none_price_0.lte(price_1)
        float_0 = price_7.as_float()
    except BaseException:
        pass

def test_case_101():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        price_1 = none_price_0.add(price_0)
        bool_0 = price_0.__lt__(price_0)
        money_0 = none_price_0.times(var_0)
        price_2 = none_price_0.divide(var_0)
        money_1 = money_0.subtract(money_0)
        list_0 = [price_2, money_0, price_2]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.subtract(money_0)
        money_3 = money_2.add(money_0)
        money_4 = money_1.__pos__()
        some_money_1 = module_1.SomeMoney(*list_0)
        some_price_0 = module_1.SomePrice(*list_0)
        price_3 = some_price_0.add(price_0)
        price_4 = some_price_0.subtract(price_3)
        price_5 = price_2.scalar_subtract(var_0)
        str_0 = 'lx}<PRH:'
        str_1 = 'Kip'
        int_0 = -2161
        currency_type_0 = None
        decimal_0 = module_2.Decimal()
        currency_0 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_0, int_0)
        list_1 = [some_money_1]
        price_6 = some_price_0.convert(currency_0, list_1)
    except BaseException:
        pass

def test_case_102():
    try:
        int_0 = 2665
        dict_0 = {}
        price_0 = module_1.Price(**dict_0)
        price_1 = price_0.__truediv__(int_0)
        int_1 = price_1.as_integer()
    except BaseException:
        pass

def test_case_103():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.abs()
        bool_0 = price_0.__lt__(price_0)
        bool_1 = price_0.__lt__(price_0)
        money_0 = none_price_0.times(var_0)
        price_1 = none_price_0.floor_divide(var_0)
        money_1 = money_0.subtract(money_0)
        list_0 = [price_1, money_0, price_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_2 = some_money_0.subtract(money_0)
        money_3 = money_2.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_2 = some_money_0.gte(money_3)
        some_price_0 = module_1.SomePrice(*list_0)
        price_2 = some_price_0.add(price_0)
        price_3 = some_price_0.subtract(price_2)
        price_4 = none_price_0.subtract(price_0)
        bool_3 = price_2.gt(price_4)
        money_4 = some_money_1.floor_divide(var_0)
    except BaseException:
        pass

def test_case_104():
    try:
        var_0 = None
        str_0 = None
        list_0 = [str_0, str_0, str_0]
        some_price_0 = module_1.SomePrice(*list_0)
        price_0 = some_price_0.divide(var_0)
    except BaseException:
        pass

def test_case_105():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        decimal_0 = module_2.Decimal()
        price_1 = price_0.add(price_0)
        none_type_0 = None
        bool_0 = price_0.__lt__(price_0)
        money_0 = none_price_0.times(var_0)
        var_1 = price_1.__round__(none_type_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_1 = money_1.lt(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_2 = some_money_0.lte(money_1)
        some_price_0 = module_1.SomePrice(*list_0)
        price_3 = some_price_0.add(price_1)
        bool_3 = none_price_0.lte(price_3)
        bool_4 = none_price_0.lte(price_3)
        bool_5 = some_money_1.as_boolean()
        bool_6 = price_1.gt(price_3)
        int_0 = some_price_0.as_integer()
    except BaseException:
        pass

def test_case_106():
    try:
        price_0 = module_1.Price()
        str_0 = None
        str_1 = '!\x0cAb'
        int_0 = None
        currency_type_0 = module_0.CurrencyType.MONEY
        decimal_0 = module_2.Decimal()
        str_2 = "\tDWvLR\t?6' c"
        decimal_1 = module_2.Decimal()
        currency_0 = module_0.Currency(str_2, str_2, int_0, currency_type_0, decimal_1, int_0)
        decimal_2 = currency_0.quantize(decimal_0)
        int_1 = -893
        currency_1 = module_0.Currency(str_0, str_1, int_0, currency_type_0, decimal_2, int_1)
        price_1 = price_0.with_ccy(currency_1)
        var_0 = None
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.multiply(var_0)
        price_2 = price_0.scalar_subtract(var_0)
    except BaseException:
        pass

def test_case_107():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.multiply(var_0)
        int_0 = -3291
        price_1 = price_0.round(int_0)
        decimal_0 = module_2.Decimal()
        bool_0 = price_0.as_boolean()
        none_type_0 = None
        bool_1 = price_1.__lt__(price_1)
        none_money_0 = module_1.NoneMoney()
        money_0 = none_money_0.abs()
        list_0 = [bool_0, var_0, none_price_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.add(money_0)
        money_2 = none_price_0.times(var_0)
        var_1 = price_1.__round__(none_type_0)
        money_3 = money_2.subtract(money_2)
        price_2 = price_1.scalar_add(var_0)
        list_1 = [var_1, money_2, var_1]
        some_money_1 = module_1.SomeMoney(*list_1)
        some_money_2 = module_1.SomeMoney(*list_1)
        bool_2 = some_money_1.lte(money_2)
        bool_3 = some_money_1.gte(money_1)
    except BaseException:
        pass

def test_case_108():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.multiply(var_0)
        int_0 = -3278
        bool_0 = none_price_0.lte(price_0)
        decimal_0 = module_2.Decimal()
        bool_1 = price_0.__lt__(price_0)
        bool_2 = none_price_0.lt(price_0)
        price_1 = price_0.scalar_subtract(var_0)
        money_0 = none_price_0.times(var_0)
        price_2 = price_1.negative()
        list_0 = [int_0, money_0, int_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        bool_3 = some_money_0.lte(money_0)
        some_price_0 = module_1.SomePrice(*list_0)
        price_3 = some_price_0.add(price_2)
        price_4 = some_price_0.add(price_3)
        bool_4 = some_price_0.gte(price_4)
        bool_5 = price_4.lt(price_4)
        bool_6 = some_price_0.lte(price_3)
        some_price_1 = module_1.SomePrice(*list_0)
        price_5 = some_price_1.floor_divide(var_0)
    except BaseException:
        pass

def test_case_109():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.scalar_add(var_0)
        decimal_0 = module_2.Decimal()
        none_type_0 = None
        price_1 = price_0.scalar_subtract(var_0)
        money_0 = none_price_0.times(var_0)
        var_1 = price_1.__round__(none_type_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [var_1, money_0, var_1]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_0 = money_1.lt(money_0)
        money_2 = money_0.__truediv__(var_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_1 = some_money_0.lte(money_1)
        some_price_0 = module_1.SomePrice(*list_0)
        price_3 = some_price_0.add(price_1)
        bool_2 = none_price_0.lte(price_3)
        bool_3 = some_price_0.lt(price_3)
        bool_4 = none_price_0.lte(price_1)
        price_4 = some_price_0.add(price_2)
        currency_type_0 = module_0.CurrencyType.METAL
        list_1 = [money_2, currency_type_0, money_2]
        some_price_1 = module_1.SomePrice(*list_1)
        price_5 = some_price_1.add(price_4)
    except BaseException:
        pass

def test_case_110():
    try:
        price_0 = module_1.Price()
        price_1 = module_1.Price()
        var_0 = price_0.with_dov
        price_2 = price_1.__add__(price_0)
        var_1 = None
        price_3 = price_2.with_dov(var_1)
    except BaseException:
        pass

def test_case_111():
    try:
        price_0 = module_1.Price()
        bool_0 = price_0.lt(price_0)
        complex_0 = None
        str_0 = 'I,QTe7GfeOY<=>3n;1T)'
        dict_0 = {str_0: complex_0}
        some_money_0 = module_1.SomeMoney(**dict_0)
    except BaseException:
        pass

def test_case_112():
    try:
        price_0 = module_1.Price()
        var_0 = None
        money_0 = price_0.times(var_0)
    except BaseException:
        pass

def test_case_113():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.multiply(var_0)
        int_0 = -3278
        bool_0 = none_price_0.lte(price_0)
        decimal_0 = module_2.Decimal()
        bool_1 = price_0.__lt__(price_0)
        bool_2 = none_price_0.lt(price_0)
        price_1 = price_0.scalar_subtract(var_0)
        money_0 = none_price_0.times(var_0)
        price_2 = none_price_0.multiply(var_0)
        list_0 = [int_0, money_0, int_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_3 = money_1.lt(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_4 = some_money_0.lte(money_1)
        money_3 = money_0.subtract(money_2)
        some_price_0 = module_1.SomePrice(*list_0)
        price_3 = some_price_0.add(price_2)
        price_4 = some_price_0.add(price_3)
        bool_5 = none_price_0.lte(price_2)
        bool_6 = some_price_0.gte(price_4)
        money_4 = money_3.__sub__(money_3)
        bool_7 = some_money_1.as_boolean()
        date_0 = None
        money_5 = some_money_1.with_dov(date_0)
        bool_8 = price_4.lt(price_4)
        bool_9 = some_price_0.lte(price_3)
        price_5 = none_price_0.subtract(price_3)
        bool_10 = price_5.gt(price_4)
        price_6 = some_price_0.floor_divide(var_0)
    except BaseException:
        pass

def test_case_114():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.multiply(var_0)
        int_0 = -3278
        bool_0 = none_price_0.lte(price_0)
        decimal_0 = module_2.Decimal()
        bool_1 = price_0.__lt__(price_0)
        bool_2 = none_price_0.lt(price_0)
        price_1 = price_0.scalar_subtract(var_0)
        money_0 = none_price_0.times(var_0)
        price_2 = price_1.negative()
        list_0 = [int_0, money_0, int_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        bool_3 = money_1.lt(money_0)
        money_2 = money_1.add(money_0)
        some_money_1 = module_1.SomeMoney(*list_0)
        bool_4 = some_money_1.lte(money_0)
        str_0 = '0JG2D"\n@o'
        int_1 = -3328
        currency_type_0 = module_0.CurrencyType.ALTERNATIVE
        currency_0 = module_0.Currency(str_0, str_0, int_1, currency_type_0, decimal_0, int_1)
        money_3 = money_1.with_ccy(currency_0)
        money_4 = money_0.subtract(money_2)
        money_5 = money_4.__sub__(money_3)
    except BaseException:
        pass

def test_case_115():
    try:
        var_0 = None
        none_price_0 = module_1.NonePrice()
        price_0 = none_price_0.multiply(var_0)
        int_0 = -3278
        bool_0 = none_price_0.lte(price_0)
        decimal_0 = module_2.Decimal()
        bool_1 = price_0.__lt__(price_0)
        bool_2 = none_price_0.lt(price_0)
        price_1 = price_0.scalar_subtract(var_0)
        money_0 = none_price_0.times(var_0)
        price_2 = price_1.negative()
        list_0 = [int_0, money_0, int_0]
        some_money_0 = module_1.SomeMoney(*list_0)
        money_1 = some_money_0.subtract(money_0)
        str_0 = 'dK\rx'
        str_1 = None
        int_1 = -1772
        currency_type_0 = module_0.CurrencyType.ALTERNATIVE
        currency_0 = module_0.Currency(str_0, str_1, int_1, currency_type_0, decimal_0, int_0)
        list_1 = [currency_0, money_1, int_1]
        some_money_1 = module_1.SomeMoney(*list_1)
        money_2 = some_money_1.round()
    except BaseException:
        pass