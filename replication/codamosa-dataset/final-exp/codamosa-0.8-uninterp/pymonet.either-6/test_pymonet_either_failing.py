# Automatically generated by Pynguin.
import pymonet.either as module_0
import builtins as module_1

def test_case_0():
    try:
        str_0 = '"\t1APP7_X.@\x0coE}Zr>'
        dict_0 = {str_0: str_0}
        left_0 = module_0.Left(dict_0)
        int_0 = 2629
        either_0 = module_0.Either(int_0)
        var_0 = either_0.case(int_0, left_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bytes_0 = b'\r\xce,\xb6\xce\x93\xce\xac\x13'
        object_0 = module_1.object()
        bool_0 = True
        either_0 = module_0.Either(bool_0)
        bool_1 = either_0.__eq__(object_0)
        right_0 = module_0.Right(bytes_0)
        var_0 = right_0.to_validation()
        bytes_1 = b'\x18(|\x99\x1cv\xd8\xe9Z\xcc\xafJ'
        str_0 = 'O#^g('
        either_1 = module_0.Either(str_0)
        var_1 = either_1.ap(bytes_1)
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = -966.83
        either_0 = module_0.Either(float_0)
        var_0 = either_0.to_box()
        int_0 = False
        str_0 = '|aZ"\x0cRHrV%\x0b\x0bt'
        left_0 = module_0.Left(str_0)
        var_1 = left_0.map(int_0)
        list_0 = [var_0, left_0]
        var_2 = either_0.case(var_1, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -875.9102
        list_0 = [float_0, float_0]
        tuple_0 = (list_0, float_0)
        left_0 = module_0.Left(tuple_0)
        dict_0 = {}
        object_0 = module_1.object(**dict_0)
        str_0 = 'emH\n?\nAzp.[8V~!'
        either_0 = module_0.Either(str_0)
        bool_0 = either_0.__eq__(object_0)
        either_1 = module_0.Either(float_0)
        var_0 = either_1.to_lazy()
        var_1 = either_1.to_lazy()
        callable_0 = None
        bool_1 = False
        right_0 = module_0.Right(bool_1)
        var_2 = right_0.map(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        object_0 = module_1.object()
        str_0 = '=?V'
        either_0 = module_0.Either(str_0)
        bool_0 = either_0.__eq__(object_0)
        str_1 = 'All'
        set_0 = {str_0, bool_0, str_1, object_0}
        left_0 = module_0.Left(set_0)
        var_0 = None
        either_1 = module_0.Either(var_0)
        var_1 = left_0.bind(object_0)
        bool_1 = left_0.is_right()
        var_2 = either_1.case(bool_0, var_1)
    except BaseException:
        pass

def test_case_5():
    try:
        object_0 = module_1.object()
        str_0 = '=?V'
        either_0 = module_0.Either(str_0)
        bool_0 = either_0.__eq__(object_0)
        str_1 = 'z\x0cV'
        var_0 = either_0.is_right()
        var_1 = either_0.to_lazy()
        set_0 = {str_0, bool_0, str_1, object_0}
        left_0 = module_0.Left(set_0)
        left_1 = module_0.Left(left_0)
        var_2 = None
        either_1 = module_0.Either(var_2)
        var_3 = left_1.to_validation()
        var_4 = left_0.bind(object_0)
        var_5 = either_1.case(bool_0, var_4)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n        :param fork: function to call during fork\n        :type fork: Function(reject, resolve) -> Any\n        '
        object_0 = module_1.object()
        left_0 = module_0.Left(object_0)
        right_0 = module_0.Right(left_0)
        var_0 = right_0.bind(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 1
        right_0 = module_0.Right(int_0)
        var_0 = lambda e: e + int_0
        var_1 = lambda s: s * int_0
        var_2 = right_0.case(var_0, var_1)
    except BaseException:
        pass

def test_case_8():
    try:
        int_0 = 1
        str_0 = 'T'
        right_0 = module_0.Right(str_0)
        bool_0 = right_0.is_left()
        right_1 = module_0.Right(int_0)
        var_0 = lambda s: s * int_0
        var_1 = right_1.case(right_1, var_0)
    except BaseException:
        pass