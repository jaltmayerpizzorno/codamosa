# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        int_0 = -1616
        var_0 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        base_0 = module_0.Base()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'S+PB\tO'
        int_0 = 318
        list_0 = []
        any_0 = None
        node_0 = module_0.Node(int_0, list_0, any_0, str_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_0.clone()
        str_1 = node_0.__repr__()
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = 49
        str_0 = '+pp6!3'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0)
        list_0 = []
        base_pattern_0 = module_0.BasePattern(*list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        wildcard_pattern_0 = module_0.WildcardPattern()
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'PP?BnO'
        var_0 = None
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        bool_0 = wildcard_pattern_0.match(var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -2827
        str_0 = '&'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        str_1 = 'd+c`=/@}Z>oJ.|8&J'
        tuple_2 = (int_0, str_0, tuple_1, str_1)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 914
        str_0 = 'En?pt>0!Z#3\r'
        int_1 = 2170
        list_0 = [str_0, int_0, str_0]
        leaf_0 = module_0.Leaf(int_1, str_0, list_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'PP?BnO'
        int_0 = 774
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        any_0 = wildcard_pattern_0.optimize()
        int_1 = -4208
        leaf_0 = module_0.Leaf(int_1, str_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'depth'
        int_0 = 377
        list_0 = []
        list_1 = [str_0, int_0, int_0]
        node_0 = module_0.Node(int_0, list_0, list_1)
        base_pattern_0 = module_0.BasePattern()
    except BaseException:
        pass

def test_case_10():
    try:
        list_0 = []
        int_0 = 711
        node_0 = module_0.Node(int_0, list_0)
        node_0.append_child(node_0)
    except BaseException:
        pass

def test_case_11():
    try:
        int_0 = 231
        str_0 = 'bare_name'
        bytes_0 = b'L\xa4\xbc\xf5\xa0p\x0f\xe9\xf9\xc0/\xd2}\\\x92\x9dx'
        negated_pattern_0 = module_0.NegatedPattern()
        iterator_0 = negated_pattern_0.generate_matches(bytes_0)
        leaf_0 = module_0.Leaf(int_0, str_0, iterator_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = 'b'
        int_0 = 1
        leaf_pattern_0 = module_0.LeafPattern(int_0, str_0)
        list_0 = [str_0, str_0]
        base_0 = module_0.Base(*list_0)
    except BaseException:
        pass

def test_case_13():
    try:
        grammar_0 = module_1.Grammar()
        str_0 = 'm}OPQ"D'
        int_0 = 1276
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        bytes_0 = b'\xc1\xacJ\xcd\x84\xd1\xc3\xb4'
        tuple_2 = (int_0, str_0, tuple_1, bytes_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'PP?BnO'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_0 = module_0.NegatedPattern(any_0)
        bool_0 = wildcard_pattern_0.match(negated_pattern_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'CZ?'
        int_0 = 5439
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0)
        int_1 = 3314
        negated_pattern_0 = module_0.NegatedPattern(int_1)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '}g'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        grammar_0 = module_1.Grammar()
        dict_0 = {}
        negated_pattern_0 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match_seq(dict_0)
        bool_1 = wildcard_pattern_0.match(bool_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = 'S+PB\tO'
        int_0 = 318
        list_0 = []
        any_0 = None
        node_0 = module_0.Node(int_0, list_0, any_0, str_0)
        list_1 = [node_0, node_0, node_0]
        list_2 = []
        node_1 = module_0.Node(int_0, list_1, str_0, list_2)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = 'PP?BnO'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        int_0 = 2066
        node_pattern_0 = module_0.NodePattern(int_0, str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'R(<o[5ku'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        node_pattern_0 = module_0.NodePattern()
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = '"w7071x-f:H'
        int_0 = -3829
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, str_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = 'PP?BnO'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 280
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_3 = node_0.clone()
        node_4 = node_1.clone()
        node_5 = node_2.clone()
        node_3.invalidate_sibling_maps()
        str_1 = node_0.__str__()
        base_0 = None
        leaf_pattern_0 = module_0.LeafPattern()
        node_pattern_0 = module_0.NodePattern(int_0, base_0)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = ''
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    except BaseException:
        pass

def test_case_23():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -739
        str_0 = 'bare_name'
        int_1 = 2176
        int_2 = 1093
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_0, tuple_0)
        none_type_0 = None
        tuple_2 = (int_0, str_0, tuple_1, none_type_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_24():
    try:
        int_0 = -594
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_25():
    try:
        str_0 = 'PP?BnO'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = 280
        list_0 = []
        node_0 = module_0.Node(int_0, list_0)
        node_1 = node_0.clone()
        node_2 = node_0.clone()
        node_3 = node_1.clone()
        node_4 = node_3.clone()
        negated_pattern_0 = module_0.NegatedPattern()
        grammar_0 = module_1.Grammar()
        leaf_pattern_0 = module_0.LeafPattern(int_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'r'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        list_0 = []
        base_pattern_0 = None
        bool_0 = wildcard_pattern_0.match_seq(list_0, base_pattern_0)
        negated_pattern_0 = module_0.NegatedPattern()
        str_1 = 'nw3c\t]'
        str_2 = 'Ev! S:Z9;;`wJ'
        grammar_0 = module_1.Grammar()
        int_0 = 131
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_2, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_1)
        leaf_1 = leaf_0.clone()
        int_1 = 2049
        list_1 = [leaf_0]
        node_0 = module_0.Node(int_1, list_1)
        node_1 = node_0.clone()
        bool_1 = wildcard_pattern_0.match(list_0)
    except BaseException:
        pass

def test_case_27():
    try:
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        int_0 = False
        base_pattern_0 = None
        negated_pattern_1 = module_0.NegatedPattern()
        bool_0 = negated_pattern_0.match(base_pattern_0)
        str_0 = 'nw3c\t]'
        grammar_0 = module_1.Grammar()
        bytes_0 = b'$\xac\x89\n\xa8f\x14\x9f@\xb7\xae\x84\xf6'
        bool_1 = negated_pattern_1.match_seq(bytes_0)
        node_pattern_0 = module_0.NodePattern(int_0, leaf_pattern_0, str_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 1
        str_0 = '#/'
        leaf_0 = module_0.Leaf(int_0, str_0)
        leaf_1 = leaf_0.clone()
        leaf_2 = [leaf_1, leaf_1]
        leaf_1.replace(leaf_2)
    except BaseException:
        pass

def test_case_29():
    try:
        str_0 = 'r'
        int_0 = 1361
        wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
        dict_0 = None
        bool_0 = wildcard_pattern_0.match_seq(dict_0)
    except BaseException:
        pass

def test_case_30():
    try:
        str_0 = 'r'
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = False
        list_0 = []
        base_pattern_0 = None
        bool_0 = wildcard_pattern_0.match_seq(list_0, base_pattern_0)
        negated_pattern_0 = module_0.NegatedPattern()
        str_1 = 'nw3c\t]'
        str_2 = 'Ev! S:Z9;;`wJ'
        grammar_0 = module_1.Grammar()
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_2, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_1)
        leaf_1 = leaf_0.clone()
        negated_pattern_1 = module_0.NegatedPattern(any_0)
        int_1 = 964
        list_1 = [leaf_1]
        any_1 = wildcard_pattern_0.optimize()
        node_0 = module_0.Node(int_1, list_1, any_1, str_0)
        node_1 = node_0.clone()
        node_2 = node_1.clone()
        node_1.set_child(int_0, leaf_1)
        list_2 = [leaf_0, leaf_0, leaf_1, leaf_0]
        int_2 = 495
        node_3 = module_0.Node(int_2, list_2)
    except BaseException:
        pass

def test_case_31():
    try:
        str_0 = 'r'
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = False
        list_0 = []
        base_pattern_0 = None
        bool_0 = wildcard_pattern_0.match_seq(list_0, base_pattern_0)
        negated_pattern_1 = module_0.NegatedPattern()
        str_1 = 'Ev! S:Z9;;`wJ'
        grammar_0 = module_1.Grammar()
        int_1 = 131
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_1, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_1)
        leaf_1 = leaf_0.clone()
        int_2 = 941
        int_3 = 2049
        list_1 = []
        node_0 = module_0.Node(int_3, list_1)
        node_1 = node_0.clone()
        node_1.insert_child(int_2, leaf_1)
        bytes_0 = b'$\xac\x89\n\xa8f\x14\x9f@\xb7\xae\x84\xf6'
        bool_1 = negated_pattern_1.match_seq(bytes_0)
        node_1.insert_child(int_1, leaf_0)
        negated_pattern_2 = module_0.NegatedPattern()
        bool_2 = wildcard_pattern_0.match(leaf_pattern_0, wildcard_pattern_0)
    except BaseException:
        pass

def test_case_32():
    try:
        str_0 = 'r'
        negated_pattern_0 = module_0.NegatedPattern()
        var_0 = None
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = False
        list_0 = []
        base_pattern_0 = None
        bool_0 = wildcard_pattern_0.match_seq(list_0, base_pattern_0)
        negated_pattern_1 = module_0.NegatedPattern()
        bool_1 = negated_pattern_0.match(var_0)
        str_1 = 'nw3c\t]'
        str_2 = 'Ev! S:Z9;;`wJ'
        grammar_0 = module_1.Grammar()
        int_1 = 131
        tuple_0 = (int_1, int_1)
        tuple_1 = (str_2, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_1)
        leaf_1 = leaf_0.clone()
        int_2 = 941
        int_3 = 2049
        list_1 = []
        node_0 = module_0.Node(int_3, list_1)
        node_1 = node_0.clone()
        node_1.insert_child(int_2, leaf_1)
        bytes_0 = b'$\xac\x89\n\xa8f\x14\x9f@\xb7\xae\x84\xf6'
        bool_2 = negated_pattern_1.match_seq(bytes_0)
        negated_pattern_2 = module_0.NegatedPattern(any_0)
        node_1.append_child(leaf_0)
        node_2 = node_0.clone()
        float_0 = -1540.314
        bool_3 = wildcard_pattern_0.match(float_0)
    except BaseException:
        pass

def test_case_33():
    try:
        str_0 = 'r'
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = False
        list_0 = []
        bool_0 = wildcard_pattern_0.match_seq(list_0, int_0)
    except BaseException:
        pass

def test_case_34():
    try:
        str_0 = 'r'
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        negated_pattern_1 = module_0.NegatedPattern()
        str_1 = 'nw3c\t]'
        int_0 = 2011
        bytes_0 = b'$\xac\x89\n\xa8f\x14\x9f@\xb7\xae\x84\xf6'
        bool_0 = negated_pattern_1.match_seq(bytes_0)
        node_pattern_0 = module_0.NodePattern(int_0, leaf_pattern_0, str_1)
    except BaseException:
        pass

def test_case_35():
    try:
        str_0 = 'r'
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = False
        list_0 = []
        base_pattern_0 = None
        bool_0 = wildcard_pattern_0.match_seq(list_0, base_pattern_0)
        negated_pattern_1 = module_0.NegatedPattern()
        str_1 = 'nw3c\t]'
        str_2 = '=xEv! S:Z9;;`wJ'
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_2, tuple_0)
        leaf_0 = module_0.Leaf(int_0, str_1, tuple_1)
        leaf_1 = leaf_0.clone()
        any_1 = wildcard_pattern_0.optimize()
        int_1 = 941
        int_2 = 2049
        str_3 = leaf_1.__repr__()
        list_1 = []
        node_0 = module_0.Node(int_2, list_1)
        node_1 = node_0.clone()
        node_1.insert_child(int_1, leaf_1)
        node_1.update_sibling_maps()
        node_2 = node_0.clone()
        node_3 = node_0.clone()
        list_2 = []
        bool_1 = wildcard_pattern_0.match(list_2)
    except BaseException:
        pass

def test_case_36():
    try:
        grammar_0 = module_1.Grammar()
        int_0 = -1510
        str_0 = '[@OPQ"'
        str_1 = None
        int_1 = 1276
        tuple_0 = (int_1, int_0)
        tuple_1 = (str_0, tuple_0)
        set_0 = set()
        tuple_2 = (int_0, str_1, tuple_1, set_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
    except BaseException:
        pass

def test_case_37():
    try:
        grammar_0 = module_1.Grammar()
        str_0 = '}OPQ"D'
        int_0 = 1276
        tuple_0 = (int_0, int_0)
        tuple_1 = (str_0, tuple_0)
        bytes_0 = b' '
        tuple_2 = (int_0, str_0, tuple_1, bytes_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
        var_1 = module_0.type_repr(int_0)
    except BaseException:
        pass

def test_case_38():
    try:
        str_0 = 'r'
        negated_pattern_0 = module_0.NegatedPattern()
        leaf_pattern_0 = module_0.LeafPattern()
        wildcard_pattern_0 = module_0.WildcardPattern(str_0)
        any_0 = wildcard_pattern_0.optimize()
        int_0 = False
        list_0 = []
        base_pattern_0 = None
        bool_0 = wildcard_pattern_0.match_seq(list_0, base_pattern_0)
        negated_pattern_1 = module_0.NegatedPattern()
        grammar_0 = module_1.Grammar()
        str_1 = '+\\C\n\'UX{>WJ9KVx({EA"'
        int_1 = 2853
        int_2 = 2645
        tuple_0 = (int_1, int_2)
        tuple_1 = (str_1, tuple_0)
        optional_0 = None
        tuple_2 = (int_0, str_0, tuple_1, optional_0)
        var_0 = module_0.convert(grammar_0, tuple_2)
        str_2 = 'nw3c\t]'
        grammar_1 = module_1.Grammar()
        leaf_0 = module_0.Leaf(int_0, str_2, tuple_1)
        leaf_1 = leaf_0.clone()
        int_3 = 941
        var_1 = leaf_pattern_0.match(leaf_0)
        iterator_0 = leaf_1.post_order()
        int_4 = 2049
        list_1 = []
        node_0 = module_0.Node(int_4, list_1)
        tuple_3 = ()
        var_2 = leaf_pattern_0.match(leaf_1, tuple_3)
        node_1 = node_0.clone()
        list_2 = [base_pattern_0]
        iterator_1 = module_0.generate_matches(list_2, list_1)
        wildcard_pattern_1 = module_0.WildcardPattern(str_1, int_1, int_3)
    except BaseException:
        pass