# Automatically generated by Pynguin.
import blib2to3.pytree as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    pass

def test_case_1():
    int_0 = 14
    str_0 = 'r#4~|%'
    leaf_0 = module_0.Leaf(int_0, str_0)
    leaf_1 = leaf_0.clone()

def test_case_2():
    int_0 = 337
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()

def test_case_3():
    negated_pattern_0 = module_0.NegatedPattern()

def test_case_4():
    leaf_pattern_0 = module_0.LeafPattern()

def test_case_5():
    str_0 = 'MkJaa@y$5_c<cjS'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)

def test_case_6():
    str_0 = 'MkJaa@y$5_c<cjS'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_7():
    grammar_0 = module_1.Grammar()
    int_0 = 1062
    negated_pattern_0 = module_0.NegatedPattern()
    bool_0 = negated_pattern_0.match(grammar_0, int_0)

def test_case_8():
    int_0 = 280
    list_0 = []
    node_0 = module_0.Node(int_0, list_0)
    node_1 = node_0.clone()
    node_2 = node_1.clone()
    node_3 = node_2.clone()
    node_4 = node_3.clone()
    node_5 = node_4.clone()
    node_6 = node_5.clone()
    node_7 = node_1.clone()
    node_8 = node_4.clone()
    int_1 = -1619
    node_6.insert_child(int_1, node_5)

def test_case_9():
    var_0 = None
    negated_pattern_0 = module_0.NegatedPattern(var_0)
    var_1 = []
    iterator_0 = negated_pattern_0.generate_matches(var_1)
    var_2 = tuple(iterator_0)
    var_3 = []
    iterator_1 = negated_pattern_0.generate_matches(var_3)
    var_4 = tuple(iterator_1)

def test_case_10():
    grammar_0 = module_1.Grammar()
    int_0 = 59
    str_0 = 'fu)$}@ur}*g\x0cR@C!@'
    leaf_0 = module_0.Leaf(int_0, str_0)
    str_1 = leaf_0.__repr__()

def test_case_11():
    str_0 = 'r'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()

def test_case_12():
    str_0 = 'r'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    list_0 = []
    base_pattern_0 = None
    bool_0 = wildcard_pattern_0.match_seq(list_0, base_pattern_0)

def test_case_13():
    str_0 = 'r'
    negated_pattern_0 = module_0.NegatedPattern()
    leaf_pattern_0 = module_0.LeafPattern()
    wildcard_pattern_0 = module_0.WildcardPattern(str_0)
    any_0 = wildcard_pattern_0.optimize()
    list_0 = []
    base_pattern_0 = None
    bool_0 = wildcard_pattern_0.match_seq(list_0, base_pattern_0)
    leaf_0 = None
    var_0 = leaf_pattern_0.match(leaf_0)
    int_0 = 941
    list_1 = []
    node_0 = module_0.Node(int_0, list_1)
    node_1 = node_0.clone()
    bytes_0 = b'$\xac\x89\n\xa8f\x14\x9f@\xb7\xae\x84\xf6'
    bool_1 = negated_pattern_0.match_seq(bytes_0)

def test_case_14():
    negated_pattern_0 = module_0.NegatedPattern()
    leaf_pattern_0 = module_0.LeafPattern()
    int_0 = False
    str_0 = 'Ev! S:Z9;;`wJ'
    tuple_0 = (int_0, int_0)
    tuple_1 = (str_0, tuple_0)
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1)
    leaf_1 = leaf_0.clone()
    var_0 = leaf_pattern_0.match(leaf_0)
    tuple_2 = ()
    var_1 = leaf_pattern_0.match(leaf_1, tuple_2)
    iterator_0 = leaf_0.post_order()

def test_case_15():
    negated_pattern_0 = module_0.NegatedPattern()
    leaf_pattern_0 = module_0.LeafPattern()
    int_0 = False
    str_0 = 'w3c\t]'
    wildcard_pattern_0 = module_0.WildcardPattern(str_0, int_0, int_0)
    str_1 = 'Ev! S:Z9;;`wJ'
    bool_0 = wildcard_pattern_0.match(str_1)

def test_case_16():
    int_0 = 49
    str_0 = '\n        Does this pattern exactly match a node?\n\n        Returns True if it matches, False if not.\n\n        If results is not None, it must be a dict which will be\n        updated with the nodes matching named subpatterns.\n\n        Default implementation for non-wildcard patterns.\n        '
    str_1 = '6y`'
    int_1 = -1793
    tuple_0 = (int_0, int_1)
    tuple_1 = (str_1, tuple_0)
    list_0 = [tuple_0, str_0, str_0, str_1]
    leaf_0 = module_0.Leaf(int_0, str_0, tuple_1, str_0, list_0)
    leaf_1 = leaf_0.clone()
    leaf_2 = leaf_1.clone()
    int_2 = 13
    leaf_pattern_0 = module_0.LeafPattern(int_2)
    var_0 = leaf_pattern_0.match(leaf_2)
    grammar_0 = module_1.Grammar()
    int_3 = 1062
    negated_pattern_0 = module_0.NegatedPattern()
    bool_0 = negated_pattern_0.match(grammar_0, int_3)

def test_case_17():
    int_0 = 1
    str_0 = 'a'
    leaf_0 = module_0.Leaf(int_0, str_0)
    iterator_0 = leaf_0.leaves()
    var_0 = list(iterator_0)