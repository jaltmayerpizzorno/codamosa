# Automatically generated by Pynguin.
import string_utils.manipulation as module_0

def test_case_0():
    pass

def test_case_1():
    int_0 = 3119
    str_0 = module_0.roman_encode(int_0)

def test_case_2():
    int_0 = 3419
    str_0 = module_0.roman_encode(int_0)

def test_case_3():
    int_0 = 3417
    str_0 = module_0.roman_encode(int_0)

def test_case_4():
    int_0 = 3510
    dict_0 = {}
    roman_numbers_0 = module_0.__RomanNumbers(**dict_0)
    str_0 = module_0.roman_encode(int_0)
    int_1 = module_0.roman_decode(str_0)

def test_case_5():
    str_0 = 'DA5f3qj[D\x0b<'
    str_1 = module_0.prettify(str_0)

def test_case_6():
    str_0 = 'xcTsovJIR= ?L.g&'
    str_1 = module_0.prettify(str_0)
    int_0 = 3394
    str_2 = module_0.roman_encode(int_0)

def test_case_7():
    str_0 = "S8'kDVX0 N4-O{2Nu4f#"
    str_1 = module_0.prettify(str_0)

def test_case_8():
    str_0 = '9_KX_*7\r|btPna,~1n'
    str_1 = module_0.reverse(str_0)

def test_case_9():
    str_0 = '(?!"[^"]*)@+(?=[^"]*")|\\\\@'
    var_0 = module_0.camel_case_to_snake(str_0)
    int_0 = 3651
    str_1 = module_0.roman_encode(int_0)

def test_case_10():
    int_0 = 3419
    str_0 = module_0.roman_encode(int_0)
    str_1 = module_0.snake_case_to_camel(str_0)

def test_case_11():
    int_0 = 3702
    str_0 = module_0.roman_encode(int_0)
    str_1 = module_0.shuffle(str_0)

def test_case_12():
    int_0 = 3591
    str_0 = module_0.roman_encode(int_0)
    str_1 = module_0.strip_html(str_0)

def test_case_13():
    int_0 = 3119
    str_0 = module_0.roman_encode(int_0)
    str_1 = module_0.asciify(str_0)

def test_case_14():
    int_0 = 3445
    str_0 = "INT'Zks>N]2("
    str_1 = module_0.slugify(str_0, str_0)
    str_2 = module_0.roman_encode(int_0)

def test_case_15():
    int_0 = 3394
    str_0 = module_0.roman_encode(int_0)
    bool_0 = module_0.booleanize(str_0)

def test_case_16():
    int_0 = 3445
    str_0 = module_0.roman_encode(int_0)
    str_1 = module_0.strip_margin(str_0)

def test_case_17():
    str_0 = 'is_isbn_13'
    str_1 = module_0.snake_case_to_camel(str_0, str_0)
    int_0 = 2712
    str_2 = module_0.roman_encode(int_0)
    str_3 = module_0.slugify(str_0)
    str_4 = '@'
    str_5 = module_0.strip_margin(str_4)
    str_6 = "\n    Similarly to native Python's `range()`, returns a Generator object which generates a new roman number\n    on each iteration instead of an integer.\n\n    *Example:*\n\n    >>> for n in roman_range(7): print(n)\n    >>> # prints: I, II, III, IV, V, VI, VII\n    >>> for n in roman_range(start=7, stop=1, step=-1): print(n)\n    >>> # prints: VII, VI, V, IV, III, II, I\n\n    :param stop: Number at which the generation must stop (must be <= 3999).\n    :param start: Number at which the generation must start (must be >= 1).\n    :param step: Increment of each generation step (default to 1).\n    :return: Generator of roman numbers.\n    "
    string_formatter_0 = module_0.__StringFormatter(str_6)
    str_7 = string_formatter_0.format()
    string_compressor_0 = module_0.__StringCompressor()
    str_8 = "\n    Checks if the string is a pangram (https://en.wikipedia.org/wiki/Pangram).\n\n    *Examples:*\n\n    >>> is_pangram('The quick brown fox jumps over the lazy dog') # returns true\n    >>> is_pangram('hello world') # returns false\n\n    :param input_string: String to check.\n    :type input_string: str\n    :return: True if the string is a pangram, False otherwise.\n    "
    str_9 = module_0.prettify(str_8)
    str_10 = module_0.shuffle(str_3)
    roman_numbers_0 = module_0.__RomanNumbers()

def test_case_18():
    int_0 = 3405
    str_0 = module_0.roman_encode(int_0)

def test_case_19():
    int_0 = 3395
    str_0 = module_0.roman_encode(int_0)

def test_case_20():
    int_0 = 3651
    str_0 = ' '
    bool_0 = True
    str_1 = module_0.strip_html(str_0, bool_0)
    str_2 = module_0.roman_encode(int_0)

def test_case_21():
    str_0 = 'trWv\\qm2]y"tC\r\x0bv'
    str_1 = module_0.prettify(str_0)
    int_0 = 3555
    str_2 = module_0.roman_encode(int_0)

def test_case_22():
    int_0 = 3635
    str_0 = '(\\({2,}|\\){2,}|\\[{2,}|\\]{2,}|{{2,}|\\}{2,}|:{2,}|,{2,}|;{2,}|\\+{2,}|-{2,}|\\s{2,}|%{2,}|={2,}|"{2,}|\\\'{2,})'
    str_1 = module_0.prettify(str_0)
    str_2 = module_0.roman_encode(int_0)
    bool_0 = module_0.booleanize(str_2)

def test_case_23():
    int_0 = 3790
    str_0 = module_0.roman_encode(int_0)
    str_1 = 'p'
    bool_0 = True
    str_2 = module_0.strip_html(str_1, bool_0)
    int_1 = module_0.roman_decode(str_0)

def test_case_24():
    str_0 = '.8'
    str_1 = module_0.prettify(str_0)
    str_2 = '.'
    str_3 = module_0.strip_html(str_2)
    str_4 = 'is_isbnA13'
    str_5 = module_0.snake_case_to_camel(str_4, str_4)
    roman_numbers_0 = module_0.__RomanNumbers()
    str_6 = 'C'
    string_formatter_0 = module_0.__StringFormatter(str_2)
    str_7 = string_formatter_0.format()
    var_0 = module_0.camel_case_to_snake(str_5, str_5)
    bool_0 = True
    str_8 = module_0.snake_case_to_camel(str_6, bool_0)
    int_0 = 2957
    str_9 = module_0.roman_encode(int_0)
    int_1 = module_0.roman_decode(str_6)
    str_10 = module_0.slugify(str_9)
    str_11 = module_0.strip_margin(str_6)
    roman_numbers_1 = module_0.__RomanNumbers()

def test_case_25():
    str_0 = 'my test str'
    string_formatter_0 = module_0.__StringFormatter(str_0)
    str_1 = string_formatter_0.format()
    str_2 = 'This is   my 2nd     test'
    string_formatter_1 = module_0.__StringFormatter(str_2)
    str_3 = string_formatter_1.format()
    str_4 = 'thiS   is   a test'
    string_formatter_2 = module_0.__StringFormatter(str_4)
    str_5 = string_formatter_2.format()
    str_6 = 'this is.a @mail@to.be@sent.com'
    string_formatter_3 = module_0.__StringFormatter(str_6)
    str_7 = string_formatter_3.format()

def test_case_26():
    str_0 = 'word n0 word n1 word n2     word n3 word n4 word n5 word n6 word n7 word n8 word n9 word n10 word n11 word n12 word n13 word n14 word n15     word n16 word n17 word n18 word n19'
    str_1 = module_0.compress(str_0)
    str_2 = module_0.decompress(str_1)