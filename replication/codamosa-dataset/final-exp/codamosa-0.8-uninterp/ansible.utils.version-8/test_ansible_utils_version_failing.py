# Automatically generated by Pynguin.
import ansible.utils.version as module_0
import ansible.module_utils.compat.version as module_1

def test_case_0():
    try:
        float_0 = 1000.0
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        numeric_0 = module_0._Numeric(float_0)
        str_0 = '7J\t{%'
        alpha_0 = module_0._Alpha(str_0)
        var_1 = alpha_0.__repr__()
        loose_version_0 = module_1.LooseVersion()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_1():
    try:
        dict_0 = None
        int_0 = -1508
        list_0 = [int_0, int_0, int_0, int_0]
        alpha_0 = module_0._Alpha(list_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_0 = alpha_1.__lt__(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        numeric_0 = None
        alpha_0 = module_0._Alpha(numeric_0)
        str_0 = 'rje(Syzm'
        bytes_0 = b'\xa6W\n\xdd'
        var_0 = numeric_0.__le__(bytes_0)
        alpha_1 = module_0._Alpha(str_0)
        var_1 = alpha_1.__lt__(alpha_0)
    except BaseException:
        pass

def test_case_3():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        str_0 = '@]BW-jJnvno*^GX%M'
        alpha_0 = module_0._Alpha(str_0)
        var_1 = alpha_0.__repr__()
        var_2 = alpha_0.__le__(str_0)
        loose_version_0 = module_1.LooseVersion()
        var_3 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_4():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        list_0 = None
        alpha_0 = module_0._Alpha(list_0)
        bytes_0 = b'T\x94\xeb\x8cI\xcd\x8bN'
        var_0 = alpha_0.__gt__(bytes_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\\=I1{>|oX^sP'
        dict_0 = None
        list_0 = [str_0, str_0]
        alpha_0 = module_0._Alpha(list_0)
        alpha_1 = module_0._Alpha(alpha_0)
        var_0 = alpha_1.__ge__(dict_0)
    except BaseException:
        pass

def test_case_6():
    try:
        float_0 = 1000.0
        semantic_version_0 = module_0.SemanticVersion()
        tuple_0 = ()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        numeric_0 = module_0._Numeric(float_0)
        str_0 = None
        list_0 = [tuple_0, numeric_0, str_0]
        var_1 = semantic_version_0.from_loose_version(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        float_0 = 1013.5396336229732
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        numeric_0 = module_0._Numeric(float_0)
        var_1 = numeric_0.__ne__(semantic_version_0)
        str_0 = ':$^oK|\\h{\x0bjlW8^p<p%q'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_8():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        bool_0 = False
        numeric_0 = module_0._Numeric(bool_0)
        var_0 = numeric_0.__gt__(semantic_version_0)
    except BaseException:
        pass

def test_case_9():
    try:
        float_0 = 1000.0
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(float_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'd75?q&X'
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.parse(str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '_RGL)O\rM%oq24{'
        var_0 = semantic_version_0.__ne__(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '%+vL.Y:cQ8UK]06(ca'
        var_0 = semantic_version_0.__lt__(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = None
        set_0 = {str_0, str_0, str_0, str_0}
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__gt__(set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__repr__()
        var_1 = semantic_version_0.__eq__(semantic_version_0)
        str_0 = 'gxUUBsoA&T'
        var_2 = semantic_version_0.__le__(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        int_0 = -1845
        alpha_0 = module_0._Alpha(int_0)
        str_0 = '\x0c++*h<2ad(5 M8I'
        var_0 = semantic_version_0.__ge__(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        float_0 = 1000.0
        semantic_version_0 = module_0.SemanticVersion()
        tuple_0 = ()
        int_0 = -1845
        alpha_0 = module_0._Alpha(int_0)
        tuple_1 = (tuple_0, alpha_0)
        numeric_0 = module_0._Numeric(float_0)
        var_0 = numeric_0.__ge__(tuple_1)
    except BaseException:
        pass

def test_case_17():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.from_loose_version(semantic_version_0)
    except BaseException:
        pass

def test_case_18():
    try:
        float_0 = 1000.0
        float_1 = 2921.41
        numeric_0 = module_0._Numeric(float_1)
        float_2 = -1662.258788
        alpha_0 = module_0._Alpha(float_2)
        var_0 = alpha_0.__lt__(numeric_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.__eq__(semantic_version_0)
        numeric_1 = module_0._Numeric(float_0)
        str_0 = '7J\t{%'
        var_2 = semantic_version_0.from_loose_version(str_0)
    except BaseException:
        pass

def test_case_19():
    try:
        float_0 = 1000.0
        numeric_0 = module_0._Numeric(float_0)
        float_1 = -1662.258788
        alpha_0 = module_0._Alpha(float_1)
        bool_0 = True
        var_0 = numeric_0.__le__(bool_0)
        semantic_version_0 = module_0.SemanticVersion()
        var_1 = semantic_version_0.from_loose_version(float_0)
    except BaseException:
        pass

def test_case_20():
    try:
        float_0 = 1000.0
        semantic_version_0 = module_0.SemanticVersion()
        tuple_0 = ()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        numeric_0 = module_0._Numeric(float_0)
        alpha_0 = module_0._Alpha(tuple_0)
        var_1 = alpha_0.__repr__()
        var_2 = numeric_0.__le__(numeric_0)
        var_3 = semantic_version_0.from_loose_version(numeric_0)
    except BaseException:
        pass

def test_case_21():
    try:
        float_0 = 1000.0
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        numeric_0 = module_0._Numeric(float_0)
        float_1 = -3970.5857
        numeric_1 = module_0._Numeric(float_1)
        var_1 = numeric_1.__le__(numeric_0)
        loose_version_0 = module_1.LooseVersion()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_22():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        loose_version_0 = module_1.LooseVersion()
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_23():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        str_0 = '-N\r'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_0 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_24():
    try:
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        str_0 = '@]BW-jJnvno*^GX%M'
        alpha_0 = module_0._Alpha(str_0)
        str_1 = 'd1O{"\x0c>1h'
        var_1 = alpha_0.__le__(str_1)
        loose_version_0 = module_1.LooseVersion()
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = 1013.5396336229732
        semantic_version_0 = module_0.SemanticVersion()
        var_0 = semantic_version_0.__eq__(semantic_version_0)
        numeric_0 = module_0._Numeric(float_0)
        var_1 = numeric_0.__ne__(semantic_version_0)
        str_0 = 'VrVxz|;c#)a+'
        loose_version_0 = module_1.LooseVersion(str_0)
        var_2 = semantic_version_0.from_loose_version(loose_version_0)
    except BaseException:
        pass