# Automatically generated by Pynguin.
import ansible.module_utils.facts.ansible_collector as module_0

def test_case_0():
    try:
        bytes_0 = b'\xea\x90\x8e@#U\xeb\x0c\xf5\xa8p\xfd\xee\xe0E\xc7Lj,\xe9'
        var_0 = module_0.get_ansible_collector(bytes_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'u'
        collector_meta_data_collector_0 = module_0.CollectorMetaDataCollector(str_0)
        str_1 = ''
        int_0 = -3065
        var_0 = module_0.get_ansible_collector(str_1, int_0)
        var_1 = collector_meta_data_collector_0.collect()
        dict_0 = None
        var_2 = collector_meta_data_collector_0.collect(dict_0)
    except BaseException:
        pass

def test_case_2():
    try:
        ansible_fact_collector_0 = module_0.AnsibleFactCollector()
        set_0 = set()
        ansible_fact_collector_1 = module_0.AnsibleFactCollector(set_0)
        collector_meta_data_collector_0 = module_0.CollectorMetaDataCollector(ansible_fact_collector_0, ansible_fact_collector_1)
        var_0 = ansible_fact_collector_0.collect(collector_meta_data_collector_0)
        collector_meta_data_collector_1 = module_0.CollectorMetaDataCollector()
        set_1 = {collector_meta_data_collector_1}
        float_0 = 2300.828
        var_1 = module_0.get_ansible_collector(set_1, float_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '8:<$eO'
        float_0 = -2298.860861
        bool_0 = True
        float_1 = 459.93
        ansible_fact_collector_0 = module_0.AnsibleFactCollector(float_0, bool_0, float_1)
        float_2 = -368.4
        tuple_0 = (float_2,)
        complex_0 = None
        collector_meta_data_collector_0 = module_0.CollectorMetaDataCollector(tuple_0, complex_0)
        bytes_0 = b'\xa0X\x1a\x00Z'
        collector_meta_data_collector_1 = module_0.CollectorMetaDataCollector(collector_meta_data_collector_0, bytes_0)
        var_0 = module_0.get_ansible_collector(str_0, ansible_fact_collector_0, bool_0, collector_meta_data_collector_1)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '&;ob-@J\t2L/![%'
        dict_0 = None
        bytes_0 = b'5\xc5\x1c2\xd0\xb2\xad'
        bytes_1 = None
        int_0 = 962
        var_0 = module_0.get_ansible_collector(str_0, dict_0, bytes_0, bytes_1, int_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'V'
        str_1 = ''
        collector_meta_data_collector_0 = module_0.CollectorMetaDataCollector(str_1)
        list_0 = [collector_meta_data_collector_0, collector_meta_data_collector_0, str_1, str_1]
        collector_meta_data_collector_1 = module_0.CollectorMetaDataCollector(str_1)
        dict_0 = {str_1: collector_meta_data_collector_1, str_1: list_0}
        ansible_fact_collector_0 = module_0.AnsibleFactCollector(list_0, str_1, dict_0)
        var_0 = ansible_fact_collector_0.collect(str_0)
        collector_meta_data_collector_2 = module_0.CollectorMetaDataCollector()
        ansible_fact_collector_1 = module_0.AnsibleFactCollector()
        ansible_fact_collector_2 = module_0.AnsibleFactCollector()
        var_1 = collector_meta_data_collector_2.collect()
        var_2 = ansible_fact_collector_1.collect()
        bytes_0 = b'\xe1\x15\x86.\xba@\n\xe9'
        var_3 = collector_meta_data_collector_2.collect(bytes_0)
        var_4 = collector_meta_data_collector_2.collect()
        tuple_0 = None
        var_5 = ansible_fact_collector_1.collect(tuple_0)
        collector_meta_data_collector_3 = module_0.CollectorMetaDataCollector()
    except BaseException:
        pass

def test_case_6():
    try:
        bool_0 = False
        ansible_fact_collector_0 = module_0.AnsibleFactCollector()
        str_0 = 'T\r1H6'
        int_0 = 669
        ansible_fact_collector_1 = module_0.AnsibleFactCollector()
        bytes_0 = b'\xba\xb3\x8a\xd2\x9e\xb9O\x12\xa4'
        list_0 = [bool_0, bytes_0, bool_0]
        collector_meta_data_collector_0 = module_0.CollectorMetaDataCollector(bytes_0, list_0)
        var_0 = collector_meta_data_collector_0.collect(ansible_fact_collector_1, collector_meta_data_collector_0)
        var_1 = ansible_fact_collector_1.collect()
        var_2 = collector_meta_data_collector_0.collect(ansible_fact_collector_1)
        var_3 = collector_meta_data_collector_0.collect(ansible_fact_collector_1)
        var_4 = collector_meta_data_collector_0.collect()
        tuple_0 = (int_0,)
        bytes_1 = b'\x01\xc8\tFq\xf0\xf1\xd4\xe0\xbd\x1c\xfa\xf0?YV<L'
        ansible_fact_collector_2 = module_0.AnsibleFactCollector(str_0, tuple_0, bytes_1)
        var_5 = ansible_fact_collector_2.collect()
        collector_meta_data_collector_1 = module_0.CollectorMetaDataCollector()
        collector_meta_data_collector_2 = module_0.CollectorMetaDataCollector()
        float_0 = 2388.5413
        float_1 = 2932.328
        collector_meta_data_collector_3 = module_0.CollectorMetaDataCollector(float_0, float_1, collector_meta_data_collector_2)
        str_1 = 'P_v'
        var_6 = module_0.get_ansible_collector(bool_0, list_0)
        float_2 = 0.5
        bool_1 = False
        bool_2 = False
        var_7 = module_0.get_ansible_collector(str_1, float_2, list_0, bool_1, bool_2, tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        int_0 = 455
        bool_0 = False
        ansible_fact_collector_0 = module_0.AnsibleFactCollector(bool_0)
        set_0 = {bool_0}
        float_0 = -2182.017
        ansible_fact_collector_1 = module_0.AnsibleFactCollector(int_0)
        collector_meta_data_collector_0 = module_0.CollectorMetaDataCollector(float_0)
        collector_meta_data_collector_1 = module_0.CollectorMetaDataCollector(collector_meta_data_collector_0)
        str_0 = "\n       A REPL that allows for running ad-hoc tasks against a chosen inventory\n       from a nice shell with built-in tab completion (based on dominis'\n       ansible-shell).\n\n       It supports several commands, and you can modify its configuration at\n       runtime:\n\n       - `cd [pattern]`: change host/group (you can use host patterns eg.: app*.dc*:!app01*)\n       - `list`: list available hosts in the current path\n       - `list groups`: list groups included in the current path\n       - `become`: toggle the become flag\n       - `!`: forces shell module instead of the ansible module (!yum update -y)\n       - `verbosity [num]`: set the verbosity level\n       - `forks [num]`: set the number of forks\n       - `become_user [user]`: set the become_user\n       - `remote_user [user]`: set the remote_user\n       - `become_method [method]`: set the privilege escalation method\n       - `check [bool]`: toggle check mode\n       - `diff [bool]`: toggle diff mode\n       - `timeout [integer]`: set the timeout of tasks in seconds (0 to disable)\n       - `help [command/module]`: display documentation for the command or module\n       - `exit`: exit ansible-console\n    "
        collector_meta_data_collector_2 = module_0.CollectorMetaDataCollector(ansible_fact_collector_0, set_0, collector_meta_data_collector_1, str_0)
        var_0 = collector_meta_data_collector_2.collect()
        int_1 = -1395
        float_1 = 512.0
        var_1 = module_0.get_ansible_collector(int_1, float_1)
    except BaseException:
        pass