# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = 'Test method __str__ of class IllegalUseOfScopeReplacer.'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = str(illegal_use_of_scope_replacer_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '*(4;m"VP\'CVLkydYp'
        float_0 = -1549.29
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, float_0, float_0)
        var_0 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_2():
    try:
        float_0 = 2445.625521
        float_1 = 962.67972
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(float_0, float_1)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_3():
    try:
        tuple_0 = ()
        set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(tuple_0, set_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '*(4;m"VP\'CVeLkydYp'
        float_0 = -1549.29
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, float_0, float_0)
        list_0 = [illegal_use_of_scope_replacer_0]
        var_0 = illegal_use_of_scope_replacer_0.__eq__(list_0)
        var_1 = illegal_use_of_scope_replacer_0.__str__()
    except BaseException:
        pass

def test_case_5():
    try:
        var_0 = {}
        var_1 = lambda _, scope, name: scope
        str_0 = ''
        scope_replacer_0 = module_0.ScopeReplacer(var_0, var_1, str_0)
        var_2 = scope_replacer_0.__call__()
    except BaseException:
        pass

def test_case_6():
    try:
        var_0 = module_0.disallow_proxying()
        str_0 = '\n       import bzrlib.testament   '
        var_1 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'z##WBLumGRX1+3#$Yp,g'
        bool_0 = False
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, bool_0)
        import_processor_0 = module_0.ImportProcessor()
        str_1 = 'c0'
        str_2 = '.saU#('
        str_3 = 'e2o'
        dict_0 = {str_2: import_processor_0, str_3: import_processor_0}
        import_replacer_0 = module_0.ImportReplacer(import_processor_0, str_1, dict_0, dict_0, str_3)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        bytes_0 = b'1\r'
        int_0 = 2595
        import_replacer_0 = module_0.ImportReplacer(dict_0, bytes_0, int_0)
        import_processor_0 = module_0.ImportProcessor(import_replacer_0)
        var_0 = import_processor_0.lazy_import(import_replacer_0, import_replacer_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '\n        import bzrlib.testament\n   '
        var_0 = module_0.lazy_import(str_0, str_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '\n        import bzrlib.testament\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        dict_0 = {}
        bool_0 = False
        str_0 = 'RdnsO)N\n/t$v#@hM8r\x0b'
        import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, str_0, str_0, dict_0)
        var_0 = module_0.lazy_import(str_0, import_replacer_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '\n        smport bz\nlib.testament\n   '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bytes_0 = b'$j,q\xecq>\xc1\xbb\xd2*:'
        set_0 = {bytes_0}
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(bytes_0, set_0, bytes_0)
        import_processor_0 = module_0.ImportProcessor()
        str_0 = "@\\A<<X\\bt'z>D(X1y7^"
        var_0 = import_processor_0.lazy_import(illegal_use_of_scope_replacer_0, str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = "Create lazy imports for all of the imports in text.\n\n    This is typically used as something like::\n\n        from bzrlib.lazy_import import lazy_import\n        lazy_import(globals(), '''\n        from bzrlib import (\n            foo,\n            bar,\n            baz,\n            )\n        import bzrlib.branch\n        import bzrlib.transport\n        ''')\n\n    Then 'foo, bar, baz' and 'bzrlib' will exist as lazy-loaded\n    objects which will be replaced with a real object on first use.\n\n    In general, it is best to only load modules in this way. This is\n    because other objects (functions/classes/variables) are frequently\n    used without accessing a member, which means we cannot tell they\n    have been used.\n    "
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'M*nX)FMZb#?vl9f'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = '\n            from bzrlib.lazy_import import NotImplemented\n            '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '      import bzrlib.cestmnt  '
        dict_0 = {}
        bool_0 = False
        import_replacer_0 = module_0.ImportReplacer(dict_0, bool_0, str_0)
        var_0 = module_0.lazy_import(str_0, import_replacer_0)
    except BaseException:
        pass

def test_case_18():
    try:
        str_0 = '\r11+1}"df9&#r1'
        import_processor_0 = module_0.ImportProcessor()
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, import_processor_0)
        str_1 = '  import ,lb.tt '
        var_0 = module_0.lazy_import(str_1, str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '  import b,b.Itt '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass