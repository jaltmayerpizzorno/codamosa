# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.snippet as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    pass

def test_case_1():
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)

def test_case_2():
    str_0 = None
    module_1.extend(str_0)
    dict_0 = {str_0: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)

def test_case_3():
    str_0 = 'let(x); y; x.z; x(); let(z); let(x);'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)
    var_1 = list(str_0)
    str_1 = "DO\x0b@r'ytxCwv"
    dict_0 = {str_1: var_1}
    class_def_0 = module_0.ClassDef(**dict_0)
    str_2 = None
    str_3 = '}t7\x0by1OM'
    dict_1 = {str_2: str_0, str_3: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)
    name_0 = module_0.Name()
    str_4 = '--debug'
    str_5 = ''
    dict_2 = {str_0: str_0, str_0: str_3, str_0: str_4, str_5: str_4, str_3: str_5}
    variables_replacer_1 = module_1.VariablesReplacer(dict_2)
    variables_replacer_2 = module_1.VariablesReplacer(dict_1)
    a_s_t_0 = module_0.AST()
    iterable_1 = module_1.find_variables(a_s_t_0)

def test_case_4():
    function_def_0 = module_0.FunctionDef()
    str_0 = None
    a_s_t_0 = module_0.AST()
    a_s_t_1 = module_0.AST()
    list_0 = [a_s_t_0, a_s_t_0, a_s_t_0, a_s_t_1]
    str_1 = '6e|Hhm~~v!R'
    dict_0 = {str_0: list_0, str_1: a_s_t_1}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    function_def_1 = variables_replacer_0.visit_FunctionDef(function_def_0)

def test_case_5():
    str_0 = 'let(x); y; x.z; x(); let(z); let(x);'
    var_0 = module_2.parse(str_0)
    list_0 = [var_0, str_0]
    keyword_0 = module_0.keyword(*list_0)
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    keyword_1 = variables_replacer_0.visit_keyword(keyword_0)
    iterable_0 = module_1.find_variables(var_0)
    a_s_t_0 = module_0.AST()

def test_case_6():
    str_0 = 'thread'
    dict_0 = {str_0: str_0}
    class_def_0 = module_0.ClassDef(**dict_0)
    str_1 = ',$TN1ndNR`sik+'
    str_2 = 'Compiles:\n        a: int = 10\n        b: int\n    To:\n        a = 10\n\n    '
    str_3 = '??:'
    dict_1 = {str_1: str_1, str_2: str_1, str_3: str_3, str_2: str_3}
    variables_replacer_0 = module_1.VariablesReplacer(dict_1)
    class_def_1 = variables_replacer_0.visit_ClassDef(class_def_0)

def test_case_7():
    a_s_t_0 = module_0.AST()
    str_0 = '9a"\t>x"m.glCh\t;k'
    dict_0 = {str_0: a_s_t_0}
    list_0 = [str_0, a_s_t_0]
    arg_0 = module_0.arg(*list_0)
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    arg_1 = variables_replacer_0.visit_arg(arg_0)
    variables_replacer_1 = module_1.VariablesReplacer(dict_0)
    arg_2 = variables_replacer_1.visit_arg(arg_1)
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_8():
    str_0 = "bd-_D$\\gp{mF'joc\n"
    list_0 = [str_0]
    except_handler_0 = module_0.ExceptHandler(*list_0)
    str_1 = '^+faU?586+^Lt<G9K'
    str_2 = 'HTTPDigestAuthHandler'
    str_3 = None
    dict_0 = {str_1: str_1, str_2: str_2, str_1: str_3}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    except_handler_1 = variables_replacer_0.visit_ExceptHandler(except_handler_0)

def test_case_9():
    function_def_0 = module_0.FunctionDef()
    a_s_t_0 = module_0.AST()
    dict_0 = {}
    module_1.extend_tree(a_s_t_0, dict_0)

def test_case_10():
    float_0 = 249.134
    snippet_0 = module_1.snippet(float_0)

def test_case_11():
    a_s_t_0 = module_0.AST()
    module_1.let(a_s_t_0)

def test_case_12():
    str_0 = 'BVqg\x0c'
    str_1 = '3.1'
    str_2 = ':f^rt]6\nyo*>y#zv+l'
    dict_0 = {str_2: str_1, str_1: str_0}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    str_3 = '+}dMP36rBHb!LKrut$H'
    dict_1 = {str_3: str_1, str_0: str_3}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    dict_2 = {str_2: str_0}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    str_4 = 'C^l9~AF=<\t>DY~\x0c=9\n?'
    a_s_t_0 = module_0.AST()
    iterable_0 = module_1.find_variables(a_s_t_0)
    dict_3 = {str_1: str_0, str_0: str_1, str_4: str_0}
    list_0 = [str_2, str_4, iterable_0]
    import_from_0 = module_0.ImportFrom(*list_0)
    import_from_1 = variables_replacer_2.visit_ImportFrom(import_from_0)
    variables_replacer_3 = module_1.VariablesReplacer(dict_1)
    module_1.extend_tree(a_s_t_0, dict_3)

def test_case_13():
    str_0 = '^!0|kgO\x0bvIt+pmB&'
    class_def_0 = module_0.ClassDef()
    attribute_0 = module_0.Attribute()
    dict_0 = {}
    variables_replacer_0 = module_1.VariablesReplacer(dict_0)
    attribute_1 = variables_replacer_0.visit_Attribute(attribute_0)
    str_1 = 'R\x0b'
    str_2 = 'ZFUXi\x0c/kGQ:w /9\x0b$'
    dict_1 = {str_1: str_0, str_2: str_1, str_2: str_0}
    variables_replacer_1 = module_1.VariablesReplacer(dict_1)
    attribute_2 = variables_replacer_1.visit_Attribute(attribute_1)
    str_3 = 'y2tM+qlGnM9f'
    str_4 = 'QcbI\x0c'
    dict_2 = {str_0: str_0, str_0: str_0, str_3: str_3, str_0: str_4}
    variables_replacer_2 = module_1.VariablesReplacer(dict_2)
    class_def_1 = variables_replacer_2.visit_ClassDef(class_def_0)
    dict_3 = {}
    variables_replacer_3 = module_1.VariablesReplacer(dict_3)
    class_def_2 = variables_replacer_3.visit_ClassDef(class_def_1)
    dict_4 = {str_0: str_2, str_0: str_0}
    keyword_0 = module_0.keyword(**dict_4)
    class_def_3 = variables_replacer_3.visit_ClassDef(class_def_1)
    a_s_t_0 = module_0.AST()
    dict_5 = {str_3: str_3, str_3: str_3, str_3: a_s_t_0}
    list_0 = [str_4]
    alias_0 = module_0.alias(*list_0)
    alias_1 = variables_replacer_3.visit_alias(alias_0)
    alias_2 = variables_replacer_2.visit_alias(alias_1)
    variables_replacer_4 = module_1.VariablesReplacer(dict_5)
    dict_6 = {}
    attribute_3 = module_0.Attribute(**dict_6)
    attribute_4 = variables_replacer_4.visit_Attribute(attribute_3)
    attribute_5 = variables_replacer_4.visit_Attribute(attribute_4)
    keyword_1 = variables_replacer_4.visit_keyword(keyword_0)
    str_5 = 'f'
    str_6 = None
    dict_7 = {str_5: a_s_t_0, str_6: str_6, str_5: str_6}
    module_1.extend_tree(a_s_t_0, dict_7)

def test_case_14():
    str_0 = 'let(x); y; x.z; x(); let(z); let(x);'
    var_0 = module_2.parse(str_0)
    iterable_0 = module_1.find_variables(var_0)