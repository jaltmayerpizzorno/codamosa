# Automatically generated by Pynguin.
import typesystem.formats as module_0

def test_case_0():
    try:
        str_0 = 'S78\r>gA'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        bool_0 = base_format_0.is_native_type(base_format_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '2020-11-19T15:34:05+0000'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
        time_format_0 = module_0.TimeFormat()
        optional_0 = date_time_format_0.serialize(datetime_0)
        date_format_0 = module_0.DateFormat()
        base_format_0 = module_0.BaseFormat()
        var_0 = base_format_0.validate(date_time_format_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        list_0 = []
        base_format_0 = module_0.BaseFormat(*list_0)
        optional_0 = base_format_0.serialize(set_0)
    except BaseException:
        pass

def test_case_4():
    try:
        base_format_0 = module_0.BaseFormat()
        date_format_0 = module_0.DateFormat()
        bool_0 = date_format_0.is_native_type(base_format_0)
        date_format_1 = module_0.DateFormat()
        date_0 = date_format_1.validate(base_format_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'iExv'
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_6():
    try:
        tuple_0 = ()
        date_format_0 = module_0.DateFormat()
        date_0 = date_format_0.validate(tuple_0)
    except BaseException:
        pass

def test_case_7():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(date_format_0)
    except BaseException:
        pass

def test_case_8():
    try:
        time_format_0 = module_0.TimeFormat()
        bool_0 = time_format_0.is_native_type(time_format_0)
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_9():
    try:
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(time_format_0)
    except BaseException:
        pass

def test_case_10():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        base_format_0 = module_0.BaseFormat()
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_11():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        str_0 = 'iExv'
        datetime_0 = date_time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        optional_0 = date_time_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'then_clause'
        time_format_0 = module_0.TimeFormat()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        bool_0 = u_u_i_d_format_0.is_native_type(str_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '2020-11-19T15:34:05+00:00'
        u_u_i_d_format_0 = module_0.UUIDFormat()
        u_u_i_d_0 = u_u_i_d_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = 'then_clause'
        time_format_0 = module_0.TimeFormat()
        u_u_i_d_format_0 = module_0.UUIDFormat()
        str_1 = u_u_i_d_format_0.serialize(str_0)
        bool_0 = time_format_0.is_native_type(time_format_0)
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = None
        str_1 = 'N#ClT8p'
        time_format_0 = module_0.TimeFormat()
        optional_0 = time_format_0.serialize(str_0)
        time_0 = time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_17():
    try:
        str_0 = '2020-11-19T15:3:05+00:00'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
        optional_0 = date_time_format_0.serialize(datetime_0)
        optional_1 = date_time_format_0.serialize(datetime_0)
        bool_0 = None
        optional_2 = date_time_format_0.serialize(bool_0)
        time_format_0 = module_0.TimeFormat()
        str_1 = '02:60:45'
        time_0 = time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_18():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2012-11-12'
        date_0 = date_format_0.validate(str_0)
        str_1 = '2012-11-12x'
        date_1 = date_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = '02:60:45'
        time_format_0 = module_0.TimeFormat()
        time_0 = time_format_0.validate(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        time_format_0 = module_0.TimeFormat()
        str_0 = '12:59:30.500500'
        time_0 = time_format_0.validate(str_0)
        str_1 = '+'
        str_2 = '12:59'
        time_1 = time_format_0.validate(str_2)
        time_2 = time_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '2020-11-19T15:34:05+00:00'
        date_time_format_0 = module_0.DateTimeFormat()
        bool_0 = date_time_format_0.is_native_type(date_time_format_0)
        datetime_0 = date_time_format_0.validate(str_0)
        date_format_0 = module_0.DateFormat()
        optional_0 = date_format_0.serialize(datetime_0)
        date_time_format_1 = module_0.DateTimeFormat()
        optional_1 = date_format_0.serialize(date_time_format_0)
    except BaseException:
        pass

def test_case_22():
    try:
        date_format_0 = module_0.DateFormat()
        str_0 = '2020-03-04'
        date_0 = date_format_0.validate(str_0)
        str_1 = '2020-02-30'
        date_1 = date_format_0.validate(str_1)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = '2020-11-19T15:34:05+00'
        date_time_format_0 = module_0.DateTimeFormat()
        datetime_0 = date_time_format_0.validate(str_0)
        time_format_0 = module_0.TimeFormat()
        int_0 = 0
        optional_0 = date_time_format_0.serialize(datetime_0)
        date_time_format_1 = module_0.DateTimeFormat()
        bool_0 = date_time_format_1.is_native_type(int_0)
        str_1 = '=(|:a;e&@'
        list_0 = [str_1]
        date_format_0 = module_0.DateFormat(*list_0)
    except BaseException:
        pass

def test_case_24():
    try:
        date_time_format_0 = module_0.DateTimeFormat()
        date_time_format_1 = module_0.DateTimeFormat()
        str_0 = '2019-0-01T01:01:01-09:00'
        datetime_0 = date_time_format_1.validate(str_0)
    except BaseException:
        pass