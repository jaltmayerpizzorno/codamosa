# Automatically generated by Pynguin.
import pytutils.lazy.lazy_import as module_0

def test_case_0():
    try:
        str_0 = 'foo'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = str(illegal_use_of_scope_replacer_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'IllegalUseOfScopeReplacer.__str__ should output message'
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(str_0, str_0)
        var_0 = illegal_use_of_scope_replacer_0.__repr__()
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'G91:'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = b'[Xa9\x9fA\x1d\x95\x98\xc3\xae'
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, bytes_0)
        var_0 = scope_replacer_0.__getattribute__(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        set_0 = set()
        float_0 = -690.64274
        list_0 = []
        list_1 = [set_0, set_0, set_0, set_0]
        list_2 = [float_0, list_0]
        bytes_0 = b'\xa1\x08\xad\xaf'
        import_replacer_0 = module_0.ImportReplacer(list_1, list_2, list_0, list_1, bytes_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Disallow lazily imported modules to be used as proxies.\n\n    Calling this function might cause problems with concurrent imports\n    in mutithreaded environments, but will help detecting wasteful\n    indirection, so it should be called when executing unit tests.\n\n    Only lazy imports that happen after this call are affected.\n    '
        str_1 = '\n            Override the __mro__ to fool `isinstance`.\n            '
        dict_0 = {str_1: str_0, str_1: str_0}
        str_2 = 'finditer'
        bool_0 = True
        illegal_use_of_scope_replacer_0 = None
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_2, bool_0, illegal_use_of_scope_replacer_0)
        illegal_use_of_scope_replacer_1 = module_0.IllegalUseOfScopeReplacer(str_0, str_0, str_0)
        var_0 = str(illegal_use_of_scope_replacer_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'vfe\x0c5'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
        bytes_0 = b'\x88b\x93Vn\xabh'
        scope_replacer_0 = module_0.ScopeReplacer(dict_0, dict_0, bytes_0)
        str_1 = "'"
        import_processor_0 = module_0.ImportProcessor(str_1)
        var_0 = scope_replacer_0.__getattribute__(import_processor_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '\n    from bzrlib import (\n    c tc,\n    \x0b %)\n    '
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'bar'
        var_0 = module_0.lazy_import(str_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        import_processor_0 = module_0.ImportProcessor()
        str_0 = '{&lB!co\\Qjdb'
        dict_0 = {str_0: str_0}
        dict_1 = {}
        int_0 = 650
        bytes_0 = b'#\xa7\xa8\xc8\xf9}\x05\xacg\xcb'
        import_replacer_0 = module_0.ImportReplacer(dict_0, dict_1, int_0, bytes_0)
    except BaseException:
        pass

def test_case_9():
    try:
        list_0 = None
        complex_0 = None
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(list_0, complex_0)
        var_0 = illegal_use_of_scope_replacer_0.__unicode__()
    except BaseException:
        pass

def test_case_10():
    try:
        import_processor_0 = module_0.ImportProcessor()
        tuple_0 = (import_processor_0,)
        list_0 = [tuple_0, tuple_0]
        bool_0 = True
        illegal_use_of_scope_replacer_0 = module_0.IllegalUseOfScopeReplacer(tuple_0, bool_0)
        var_0 = illegal_use_of_scope_replacer_0.__eq__(list_0)
        float_0 = 650.00047
        import_processor_1 = module_0.ImportProcessor(float_0)
        dict_0 = {}
        str_0 = 'WpI`'
        import_replacer_0 = module_0.ImportReplacer(dict_0, str_0, float_0, import_processor_1)
        var_1 = illegal_use_of_scope_replacer_0.__eq__(import_replacer_0)
    except BaseException:
        pass

def test_case_11():
    try:
        var_0 = globals()
        str_0 = '\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    '
        var_1 = module_0.lazy_import(var_0, str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        var_0 = globals()
        str_0 = '4RZPB*8X~'
        str_1 = "]K#?wa>O'"
        var_1 = module_0.lazy_import(str_0, str_1)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'Unit tst for IlegalUseOfScopeReplacer'
        str_1 = '\n    from bzrlib import (\n   P    trace,\n        /\n    '
        var_0 = module_0.lazy_import(str_0, str_1)
    except BaseException:
        pass

def test_case_14():
    try:
        var_0 = globals()
        str_0 = '\n    Iterate over running totals, ie [a,b,c,d] -> func( func( func(a, b), c), d) with each func result yielded.\n    Func is operator.add by default.\n\n    >>> list(accumulate([1,2,3,4,5]))\n    [1, 3, 6, 10, 15]\n    >>> list(accumulate([1,2,3,4,5], operator.mul))\n    [1, 2, 6, 24, 120]\n\n    :param iterable: Iterable\n    :param func: method (default=operator.add) to call for each pair of (last call result or first item, next item)\n    :return generator: Generator\n    '
        var_1 = module_0.lazy_import(var_0, str_0)
    except BaseException:
        pass