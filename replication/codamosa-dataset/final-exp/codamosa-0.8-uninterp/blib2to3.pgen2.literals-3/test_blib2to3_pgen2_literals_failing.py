# Automatically generated by Pynguin.
import blib2to3.pgen2.literals as module_0
import re as module_1

def test_case_0():
    try:
        str_0 = '\n    Generator yielding matches for a sequence of patterns and nodes.\n\n    Args:\n        patterns: a sequence of patterns\n        nodes: a sequence of nodes\n\n    Yields:\n        (count, results) tuples where:\n        count: the entire sequence of patterns matches nodes[:count];\n        results: dict containing named submatches.\n    '
        str_1 = module_0.evalString(str_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = "'foo'"
        str_1 = module_0.evalString(str_0)
        str_2 = '"foo"'
        str_3 = module_0.evalString(str_2)
        str_4 = "'fo\\\\o'"
        str_5 = module_0.evalString(str_4)
        str_6 = '"fo\\\\o"'
        str_7 = module_0.evalString(str_6)
        str_8 = "'foo\\nbar'"
        str_9 = module_0.evalString(str_8)
        str_10 = '"foo\\nbar"'
        str_11 = module_0.evalString(str_10)
        str_12 = "'''foo'''"
        str_13 = module_0.evalString(str_12)
        int_0 = 2
        float_0 = -2561.33007
        bool_0 = False
        var_0 = module_1.match(int_0, float_0, bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = "'G8A'}*N5}0<pV\x0cS"
        str_1 = module_0.evalString(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        module_0.test()
        str_0 = '"'
        str_1 = module_0.evalString(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\\^(a)'
        str_1 = '^a'
        var_0 = module_1.match(str_0, str_1)
        str_2 = module_0.escape(var_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '\\\\(.)'
        str_1 = '\\n'
        var_0 = module_1.match(str_0, str_1)
        str_2 = module_0.escape(var_0)
        str_3 = '\\\\'
        var_1 = module_1.match(str_0, str_3)
        str_4 = module_0.escape(var_1)
        str_5 = '\\"'
        var_2 = module_1.match(str_0, str_5)
        str_6 = module_0.escape(var_2)
        str_7 = '\\a'
        var_3 = module_1.match(str_0, str_7)
        str_8 = module_0.escape(var_3)
        str_9 = '\\x1f'
        var_4 = module_1.match(str_0, str_9)
        str_10 = module_0.escape(var_4)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '(\\\\a)'
        str_1 = '\\a'
        var_0 = module_1.match(str_0, str_1)
        str_2 = module_0.escape(var_0)
    except BaseException:
        pass