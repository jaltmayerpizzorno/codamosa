# Automatically generated by Pynguin.
import ansible.cli.doc as module_0

def test_case_0():
    try:
        bool_0 = False
        float_0 = 0.0
        tuple_0 = (bool_0, float_0)
        str_0 = None
        dict_0 = {tuple_0: float_0, bool_0: tuple_0, str_0: float_0, str_0: bool_0}
        list_0 = [str_0, bool_0]
        tuple_1 = (tuple_0, dict_0, list_0)
        var_0 = module_0.jdump(tuple_1)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1359
        bool_0 = None
        tuple_0 = (bool_0,)
        doc_c_l_i_0 = module_0.DocCLI(tuple_0)
        var_0 = doc_c_l_i_0.display_plugin_list(int_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = '?\nh<2j&cZGYLy'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        float_0 = 1461.183134
        var_0 = module_0.add_collection_plugins(float_0, str_0)
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_1 = doc_c_l_i_0.get_all_plugins_of_type(dict_0)
    except BaseException:
        pass

def test_case_3():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        bool_0 = False
        float_0 = 1303.4508
        str_0 = '@V{caQ} C:p,b'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.get_plugin_metadata(bool_0, float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        int_0 = -4917
        list_0 = []
        str_0 = 'aH"hvW$'
        dict_0 = {}
        list_1 = [dict_0, dict_0, dict_0, dict_0]
        doc_c_l_i_0 = module_0.DocCLI(list_1)
        var_0 = doc_c_l_i_0.namespace_from_plugin_filepath(int_0, list_0, str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = '%Hg,r;PD}++C%'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
        int_0 = -371
        str_1 = 'n4?(\nfd(n[!RI_'
        bool_0 = True
        set_0 = {var_0, str_1, str_0, str_1}
        role_mixin_0 = module_0.RoleMixin()
        float_0 = -2438.8352
        var_1 = doc_c_l_i_0.format_plugin_doc(int_0, str_1, bool_0, set_0, role_mixin_0, float_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = '?\nh<2j&cZGYLy'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        float_0 = 1461.183134
        role_mixin_0 = module_0.RoleMixin()
        int_0 = 12
        int_1 = 166
        doc_c_l_i_0 = module_0.DocCLI(int_1)
        var_0 = doc_c_l_i_0.find_plugins(str_0, role_mixin_0, int_0)
        var_1 = module_0.add_collection_plugins(float_0, str_0)
        doc_c_l_i_1 = module_0.DocCLI(str_0)
        var_2 = doc_c_l_i_1.get_all_plugins_of_type(dict_0)
    except BaseException:
        pass

def test_case_7():
    try:
        tuple_0 = ()
        set_0 = {tuple_0}
        bool_0 = False
        str_0 = 'nP99 8b'
        float_0 = 230.4154
        doc_c_l_i_0 = module_0.DocCLI(float_0)
        var_0 = doc_c_l_i_0.add_fields(set_0, set_0, bool_0, str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        dict_0 = {}
        str_0 = 'C{ItMcn'
        int_0 = -1442
        doc_c_l_i_0 = module_0.DocCLI(int_0)
        var_0 = doc_c_l_i_0.get_role_man_text(dict_0, str_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'sCHT@W"KeP%V'
        list_0 = [str_0, str_0]
        str_1 = 'keyword'
        dict_0 = {str_0: str_0, str_0: list_0, str_0: str_0, str_1: list_0}
        plugin_not_found_0 = module_0.PluginNotFound(*list_0)
        doc_c_l_i_0 = module_0.DocCLI(plugin_not_found_0)
        bytes_0 = b'\x9f\xb0\xac\xd8|\xcbwV\x19t\nB\x06"\xe4\x86\xb2/\xf1'
        doc_c_l_i_1 = module_0.DocCLI(bytes_0)
        var_0 = doc_c_l_i_1.get_man_text(dict_0, doc_c_l_i_0)
    except BaseException:
        pass

def test_case_10():
    try:
        plugin_not_found_0 = module_0.PluginNotFound()
        str_0 = 'e{cmZ\rI!Gjzlfq'
        dict_0 = {str_0: str_0, str_0: plugin_not_found_0, str_0: plugin_not_found_0, str_0: str_0}
        list_0 = []
        doc_c_l_i_0 = module_0.DocCLI(plugin_not_found_0)
        int_0 = 3171
        list_1 = []
        var_0 = doc_c_l_i_0.add_fields(plugin_not_found_0, list_0, int_0, list_0, list_1)
        var_1 = doc_c_l_i_0.find_plugins(plugin_not_found_0, dict_0, dict_0, list_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'N7>'
        str_1 = '!`CUB\rvYixiN5e0(('
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_1: str_0}
        float_0 = -1805.8631137184086
        str_2 = '^Z%_g[wQ&uUrAa^D'
        list_0 = [str_2]
        int_0 = -116
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        dict_1 = {str_0: list_0, doc_c_l_i_0: float_0, str_2: str_0}
        var_0 = doc_c_l_i_0.format_snippet(dict_0, doc_c_l_i_0, dict_1)
        dict_2 = {float_0: doc_c_l_i_0, str_1: list_0, str_0: str_0, str_0: int_0}
        var_1 = doc_c_l_i_0.get_man_text(dict_2)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = '%Hg,r;PD}++C%'
        doc_c_l_i_0 = module_0.DocCLI(str_0)
        var_0 = doc_c_l_i_0.run()
        int_0 = 4130
        str_1 = 'lookup'
        float_0 = 1131.631297
        var_1 = doc_c_l_i_0.format_snippet(int_0, str_1, float_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = ''
        str_1 = '!`CUB\rvYixiN5e0(('
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0}
        list_0 = [str_0]
        float_0 = 595.3
        doc_c_l_i_0 = module_0.DocCLI(list_0)
        dict_1 = {str_0: list_0, doc_c_l_i_0: float_0, str_0: str_0}
        str_2 = '>.OX\t.kP_uu4'
        str_3 = 'M'
        tuple_0 = (str_2, float_0, str_3)
        var_0 = doc_c_l_i_0.add_fields(dict_0, dict_0, tuple_0, dict_1, list_0)
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = 'role'
        int_0 = -599
        bytes_0 = b'\xb4K[Z\n'
        var_0 = module_0.add_collection_plugins(int_0, bytes_0)
        str_1 = '\n    A custom handler class for SSL validation.\n\n    Based on:\n    http://stackoverflow.com/questions/1087227/validate-ssl-certificates-with-python\n    http://techknack.net/python-urllib2-handlers/\n    '
        list_0 = [str_0, str_1, var_0]
        list_1 = [str_0, var_0, int_0, bytes_0]
        doc_c_l_i_0 = module_0.DocCLI(list_1)
        var_1 = doc_c_l_i_0.find_plugins(int_0, int_0, list_0)
        role_mixin_0 = module_0.RoleMixin()
        dict_0 = {}
        var_2 = doc_c_l_i_0.get_role_man_text(bytes_0, dict_0)
    except BaseException:
        pass