# Automatically generated by Pynguin.
import flutes.structure as module_0

def test_case_0():
    pass

def test_case_1():
    str_0 = "Computes the intermediate results of :py:func:`~functools.reduce` applied in reverse. Equivalent to Haskell's\n    ``scanr``. For example:\n\n    .. code:: python\n\n        >>> scanr(operator.add, [1, 2, 3, 4], 0)\n        [10, 9, 7, 4, 0]\n        >>> scanr(lambda s, x: x + s, ['a', 'b', 'c', 'd'])\n        ['abcd', 'bcd', 'cd', 'd']\n\n    Learn more at `Learn You a Haskell: Higher Order Functions <http://learnyouahaskell.com/higher-order-functions>`_.\n\n    :param func: The function to apply. This should be a binary function where the arguments are: the accumulator,\n        and the current element.\n    :param iterable: The list of elements to iteratively apply the function to.\n    :param initial: The initial value for the accumulator. If not supplied, the first element in the list is used.\n    :return: The intermediate results at each step, starting from the end.\n    "
    var_0 = module_0.no_map_instance(str_0)

def test_case_2():
    float_0 = -497.72858
    list_0 = []
    var_0 = module_0.map_structure(float_0, list_0)

def test_case_3():
    tuple_0 = ()
    set_0 = {tuple_0, tuple_0, tuple_0, tuple_0}
    var_0 = module_0.map_structure(tuple_0, set_0)

def test_case_4():
    str_0 = '4P\\3'
    var_0 = None
    int_0 = 1174
    int_1 = 999
    int_2 = 1089
    dict_0 = {var_0: int_0, var_0: int_1, var_0: int_2, var_0: int_0}
    list_0 = module_0.reverse_map(dict_0)
    var_1 = module_0.no_map_instance(str_0)

def test_case_5():
    dict_0 = {}
    list_0 = module_0.reverse_map(dict_0)

def test_case_6():
    int_0 = -2678
    dict_0 = {}
    bool_0 = False
    int_1 = 8192
    list_0 = [bool_0, int_1]
    bytes_0 = b'\x83\x17\xf6\xa9b@\xce\x14v\xef\xb7;P9\x95n\xf9\x14'
    tuple_0 = (dict_0, list_0, bytes_0)
    var_0 = module_0.map_structure_zip(int_0, tuple_0)

def test_case_7():
    tuple_0 = ()
    float_0 = 1.0
    dict_0 = {float_0: float_0}
    list_0 = [tuple_0, dict_0]
    var_0 = module_0.map_structure_zip(tuple_0, list_0)