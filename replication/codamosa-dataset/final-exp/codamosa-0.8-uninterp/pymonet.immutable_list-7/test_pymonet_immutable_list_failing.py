# Automatically generated by Pynguin.
import pymonet.immutable_list as module_0
import builtins as module_1

def test_case_0():
    try:
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        str_0 = immutable_list_0.__str__()
        immutable_list_1 = module_0.ImmutableList()
        list_0 = []
        immutable_list_2 = module_0.ImmutableList(list_0)
        var_0 = immutable_list_2.map(immutable_list_1)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_1 = immutable_list_0.__add__(var_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = 1
        immutable_list_0 = module_0.ImmutableList(int_0)
        bool_0 = immutable_list_0.__eq__(immutable_list_0)
        str_0 = immutable_list_0.__str__()
        var_0 = immutable_list_0.__len__()
        callable_0 = None
        var_1 = immutable_list_0.__len__()
        var_2 = immutable_list_0.__len__()
        optional_0 = immutable_list_0.find(callable_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -1719
        dict_0 = {}
        object_0 = module_1.object()
        tuple_0 = (int_0, dict_0, object_0)
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList(bool_0)
        var_0 = immutable_list_0.append(tuple_0)
        immutable_list_1 = module_0.ImmutableList()
        var_1 = immutable_list_1.__len__()
        object_1 = module_1.object()
        immutable_list_2 = module_0.ImmutableList(var_0, var_0, bool_0)
        str_0 = '\n        Take function and applied this function on current box value and returns mapped value.\n\n        :param mapper: mapper function\n        :type mapper: Function(A) -> B\n        :returns: new box with mapped value\n        :rtype: B\n        '
        str_1 = 'Maybe[U]'
        dict_1 = {str_0: var_1, str_0: str_1}
        var_2 = immutable_list_1.unshift(dict_1)
        bool_1 = immutable_list_2.__eq__(object_0)
        var_3 = immutable_list_0.append(tuple_0)
        var_4 = immutable_list_1.__len__()
        var_5 = immutable_list_1.__add__(var_3)
        optional_0 = immutable_list_1.find(object_0)
        callable_0 = None
        var_6 = immutable_list_2.__len__()
        str_2 = '\n        Transform Validation to Box.\n\n        :returns: Box with Validation value\n        :rtype: Box[A]\n        '
        immutable_list_3 = module_0.ImmutableList(str_2)
        bool_2 = None
        immutable_list_4 = module_0.ImmutableList(bool_2)
        immutable_list_5 = module_0.ImmutableList(var_3)
        var_7 = immutable_list_3.filter(callable_0)
    except BaseException:
        pass

def test_case_4():
    try:
        callable_0 = None
        float_0 = 777.1238
        tuple_0 = (float_0,)
        float_1 = None
        bool_0 = False
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.__len__()
        tuple_1 = (tuple_0, float_1, bool_0)
        immutable_list_1 = module_0.ImmutableList(tuple_1)
        immutable_list_2 = module_0.ImmutableList()
        var_1 = immutable_list_2.__len__()
        optional_0 = immutable_list_1.find(callable_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callable_0 = None
        dict_0 = {}
        immutable_list_0 = module_0.ImmutableList()
        tuple_0 = None
        tuple_1 = (tuple_0, dict_0)
        tuple_2 = (dict_0, immutable_list_0, tuple_1)
        bool_0 = True
        immutable_list_1 = module_0.ImmutableList(tuple_2, bool_0)
        var_0 = immutable_list_1.map(callable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = 1
        immutable_list_0 = module_0.ImmutableList(int_0)
        bool_0 = immutable_list_0.__eq__(immutable_list_0)
        var_0 = immutable_list_0.map(bool_0)
    except BaseException:
        pass

def test_case_7():
    try:
        callable_0 = None
        optional_0 = None
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(optional_0, bool_0)
        var_0 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_8():
    try:
        callable_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_0 = immutable_list_0.filter(callable_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = '1?Z%=C.!*Df\\'
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0)
        optional_0 = immutable_list_0.find(str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        object_0 = module_1.object()
        bool_0 = True
        immutable_list_0 = module_0.ImmutableList(bool_0, bool_0)
        callable_0 = None
        var_0 = None
        var_1 = immutable_list_0.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_11():
    try:
        object_0 = module_1.object()
        dict_0 = {}
        immutable_list_0 = module_0.ImmutableList(dict_0)
        callable_0 = None
        var_0 = None
        var_1 = immutable_list_0.reduce(callable_0, var_0)
    except BaseException:
        pass

def test_case_12():
    try:
        callable_0 = None
        var_0 = None
        immutable_list_0 = module_0.ImmutableList()
        var_1 = immutable_list_0.append(var_0)
        immutable_list_1 = module_0.ImmutableList()
        var_2 = immutable_list_0.to_list()
        bool_0 = True
        immutable_list_2 = module_0.ImmutableList(var_1, bool_0)
        var_3 = None
        var_4 = immutable_list_0.unshift(var_3)
        var_5 = immutable_list_0.__len__()
        bool_1 = True
        immutable_list_3 = module_0.ImmutableList(var_4, bool_1)
        immutable_list_4 = module_0.ImmutableList(var_3)
        optional_0 = immutable_list_3.find(callable_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = "A'R00)}h3-)eQ%V"
        str_1 = '05/IB*R{bG46'
        immutable_list_0 = module_0.ImmutableList(str_0, str_1)
        str_2 = immutable_list_0.__str__()
    except BaseException:
        pass