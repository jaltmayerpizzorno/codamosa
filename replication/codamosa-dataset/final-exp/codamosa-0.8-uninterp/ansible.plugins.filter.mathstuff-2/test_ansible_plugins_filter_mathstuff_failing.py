# Automatically generated by Pynguin.
import ansible.plugins.filter.mathstuff as module_0

def test_case_0():
    try:
        bytes_0 = b'\x1e\xbf\x89'
        str_0 = 'Y'
        var_0 = module_0.min(bytes_0, str_0)
        bytes_1 = b'\x1fB\xeb\x04j'
        str_1 = '=KY+z~99Q'
        var_1 = module_0.min(bytes_1, str_1)
        bool_0 = True
        dict_0 = {bool_0: var_0}
        bytes_2 = b'\xee\x14G\xc4+\\\x05%\xb3\xde\xc5\x01\xdb\xef\x94\xe2wH\n'
        var_2 = module_0.logarithm(bool_0)
        str_2 = '{t?bA'
        dict_1 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_2}
        bytes_3 = b'\xc9\xf2\xe20\xef\xf7S\x08~'
        str_3 = ''
        list_0 = [str_3, bytes_3, bytes_2, str_2]
        bytes_4 = b'\xef\xbey\xa78\xbc\x8aP\xda\xe5\x90\xc9\xbeB&\xd5\x80m\xc3W'
        tuple_0 = (bytes_4, list_0, bool_0, str_2)
        set_0 = set()
        var_3 = module_0.intersect(str_0, str_2, set_0)
        var_4 = module_0.difference(bytes_3, list_0, tuple_0)
        list_1 = [dict_1, dict_1, str_2, str_2, str_2]
        str_4 = '7\r7)PDPc~f}'
        var_5 = module_0.intersect(dict_0, str_2, str_4)
        var_6 = module_0.rekey_on_member(list_1, bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = '5CP%\x0cz'
        str_1 = None
        str_2 = None
        float_0 = -1809.756
        dict_0 = {str_0: str_0, str_0: str_0, str_1: str_0, str_2: float_0}
        str_3 = 'isdir'
        var_0 = module_0.difference(dict_0, str_3, str_1)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = ')7{Ee\rK1/>hz-]:2aqw:'
        float_0 = 2.718281828459045
        str_1 = 'view'
        var_0 = module_0.symmetric_difference(float_0, str_0, str_1)
        list_0 = [str_1, str_1, str_1, str_0]
        list_1 = []
        bool_0 = False
        var_1 = module_0.rekey_on_member(list_1, bool_0)
        var_2 = module_0.inversepower(float_0)
        var_3 = module_0.human_readable(list_1, list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        float_0 = -504.3
        set_0 = {float_0}
        float_1 = -692.950712
        str_0 = "'F]Wh"
        var_0 = module_0.union(set_0, float_1, str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        dict_0 = {}
        var_0 = module_0.logarithm(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        float_0 = -3795.0
        list_0 = []
        filter_module_0 = module_0.FilterModule(*list_0)
        var_0 = module_0.power(float_0, filter_module_0)
    except BaseException:
        pass

def test_case_6():
    try:
        str_0 = ')7{E\rK1/>hz-]:2aqw:'
        str_1 = ''
        list_0 = [str_0, str_0, str_1, str_1, str_1, str_0]
        var_0 = module_0.inversepower(list_0)
    except BaseException:
        pass

def test_case_7():
    try:
        list_0 = None
        list_1 = [list_0, list_0]
        var_0 = module_0.human_readable(list_1)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'NOT_LOGGING_PARAMETER'
        bool_0 = False
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.human_readable(str_0, bool_0, filter_module_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = ''
        filter_module_0 = module_0.FilterModule()
        var_0 = module_0.human_to_bytes(str_0, filter_module_0)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = 'B'
        list_0 = [str_0, str_0, str_0, str_0]
        var_0 = module_0.rekey_on_member(list_0, str_0)
    except BaseException:
        pass

def test_case_11():
    try:
        list_0 = []
        bool_0 = True
        var_0 = module_0.rekey_on_member(list_0, bool_0)
        str_0 = '9B}=ix/sf'
        str_1 = 'F6e/ezN\n..s.md*&\x0c{R'
        var_1 = module_0.max(str_0, str_1)
        str_2 = 'platforms'
        int_0 = 2
        var_2 = module_0.rekey_on_member(str_2, int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = ')7{E\rK1/>hz-]:2aqw:'
        str_1 = ''
        list_0 = [str_1, str_1, str_1, str_0]
        list_1 = []
        bool_0 = True
        var_0 = module_0.rekey_on_member(list_1, bool_0)
        var_1 = module_0.rekey_on_member(list_0, str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        bool_0 = True
        str_0 = '"]f(`=|t'
        set_0 = {bool_0}
        var_0 = module_0.intersect(bool_0, str_0, set_0)
    except BaseException:
        pass

def test_case_14():
    try:
        list_0 = None
        dict_0 = {}
        str_0 = 'G[M)y\rTAGDe!<'
        str_1 = '44 QH.Ly'
        str_2 = '{%% if %s %%} True {%% else %%} False {%% endif %%}'
        var_0 = module_0.min(str_1, str_2)
        var_1 = module_0.min(dict_0, str_0, **dict_0)
        filter_module_0 = module_0.FilterModule(**dict_0)
        var_2 = module_0.rekey_on_member(list_0, filter_module_0)
    except BaseException:
        pass

def test_case_15():
    try:
        int_0 = 438
        dict_0 = {}
        str_0 = 'Q3].w)_=wBG)>3$E'
        dict_1 = {}
        str_1 = 'G[M)y\rTAGDe!<'
        var_0 = module_0.min(dict_1, str_1, **dict_1)
        dict_2 = {str_0: int_0}
        bool_0 = True
        var_1 = module_0.rekey_on_member(dict_2, bool_0, dict_0)
    except BaseException:
        pass

def test_case_16():
    try:
        int_0 = -2433
        var_0 = module_0.logarithm(int_0)
    except BaseException:
        pass

def test_case_17():
    try:
        dict_0 = None
        var_0 = module_0.inversepower(dict_0, dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        bytes_0 = None
        bytes_1 = b'Mx;\x9a5\x87zgL\xa4\xbd\x96'
        str_0 = '%]@3`DeFRvY-FT\tR]'
        str_1 = '2l\nF}*'
        dict_0 = {str_0: bytes_1, str_1: str_1}
        var_0 = module_0.union(bytes_0, bytes_1, dict_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = 'L8L6+QmWs]'
        str_1 = None
        str_2 = '{t?bA'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_0: str_2}
        list_0 = []
        list_1 = [dict_0, str_1, str_1]
        var_0 = module_0.difference(list_1, dict_0, list_0)
        bool_0 = True
        var_1 = module_0.rekey_on_member(list_1, bool_0)
    except BaseException:
        pass

def test_case_20():
    try:
        str_0 = 'Uu?\tF 3'
        int_0 = 12
        bool_0 = True
        str_1 = {}
        dict_0 = {str_0: str_1}
        list_0 = [str_0, int_0, str_0, str_1, bool_0]
        var_0 = module_0.rekey_on_member(dict_0, list_0)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = ')7{E\rK1/>hz-]:2aqw:'
        float_0 = 20.971787433455038
        str_1 = 'view'
        var_0 = module_0.symmetric_difference(float_0, str_0, str_1)
        list_0 = []
        bool_0 = True
        var_1 = module_0.rekey_on_member(list_0, bool_0)
        int_0 = 841
        str_2 = "'6X::#$6[OFu\tq[sy6"
        var_2 = module_0.human_to_bytes(int_0, int_0, str_2)
    except BaseException:
        pass

def test_case_22():
    try:
        str_0 = ')7{E\rK1/>hz-]:2aqw:'
        float_0 = 2.718281828459045
        str_1 = 'view'
        var_0 = module_0.symmetric_difference(float_0, str_0, str_1)
        str_2 = ''
        list_0 = [str_2, str_2, str_2, str_0]
        list_1 = []
        bool_0 = True
        var_1 = module_0.rekey_on_member(list_1, bool_0)
        dict_0 = {}
        int_0 = -2552
        var_2 = module_0.symmetric_difference(dict_0, int_0, list_0)
    except BaseException:
        pass

def test_case_23():
    try:
        str_0 = 'L8L6+QmWs]'
        str_1 = None
        str_2 = '?b'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_0: str_2}
        list_0 = [str_1, str_1]
        list_1 = [dict_0, str_1, str_1]
        dict_1 = {str_1: str_2, str_1: list_1}
        var_0 = module_0.difference(list_1, dict_1, list_0)
        list_2 = []
        bool_0 = True
        var_1 = module_0.rekey_on_member(list_2, bool_0)
        str_3 = '9B}=ix/sf'
        str_4 = 'F6e/ezN\n..s.md*&\x0c{R'
        var_2 = module_0.max(str_3, str_4)
        filter_module_0 = module_0.FilterModule()
        str_5 = '#xI$493f@=GFp4t^kX'
        var_3 = module_0.human_to_bytes(str_5)
    except BaseException:
        pass

def test_case_24():
    try:
        str_0 = '1'
        str_1 = {str_0: str_0, str_0: str_0}
        str_2 = [str_1, str_1]
        var_0 = module_0.rekey_on_member(str_2, str_0)
    except BaseException:
        pass

def test_case_25():
    try:
        float_0 = -1006.320034
        set_0 = None
        bool_0 = False
        float_1 = None
        dict_0 = {float_1: set_0, bool_0: float_0}
        tuple_0 = (float_0, bool_0, dict_0)
        str_0 = 'm!u|VlNf>+/'
        bytes_0 = b'$1\xd7\xab\xfe\x7f\xe0\x16\xceR\xaa\x01\xa6\xba'
        var_0 = module_0.unique(str_0, tuple_0, set_0, bytes_0)
    except BaseException:
        pass

def test_case_26():
    try:
        str_0 = 'L8L6+QmWs]'
        str_1 = None
        bytes_0 = b'\x1e\xbf\x89'
        str_2 = '7c\n]\x0c~uDj9H`,?;3'
        var_0 = module_0.min(bytes_0, str_2)
        str_3 = '{t?bA'
        dict_0 = {str_0: str_0, str_1: str_1, str_0: str_1, str_0: str_3}
        list_0 = []
        list_1 = [dict_0, str_1, str_1]
        dict_1 = {str_1: str_3, str_1: list_1}
        var_1 = module_0.difference(list_1, dict_1, list_0)
        bool_0 = False
        var_2 = module_0.inversepower(bool_0, bool_0)
    except BaseException:
        pass

def test_case_27():
    try:
        int_0 = 803
        var_0 = module_0.power(int_0, int_0)
    except BaseException:
        pass

def test_case_28():
    try:
        int_0 = 1
        var_0 = module_0.logarithm(int_0)
        int_1 = 10
        var_1 = module_0.logarithm(int_1)
        var_2 = module_0.logarithm(int_1, int_1)
        int_2 = 16
        int_3 = 2
        var_3 = module_0.logarithm(int_2, int_3)
        str_0 = 'hello'
        var_4 = module_0.logarithm(str_0)
    except BaseException:
        pass

def test_case_29():
    try:
        dict_0 = None
        filter_module_0 = module_0.FilterModule()
        bool_0 = False
        var_0 = module_0.unique(dict_0, filter_module_0, bool_0, filter_module_0)
    except BaseException:
        pass