# Automatically generated by Pynguin.
import blib2to3.pgen2.tokenize as module_0
import blib2to3.pgen2.grammar as module_1

def test_case_0():
    try:
        stop_tokenizing_0 = None
        str_0 = 'L'
        untokenizer_0 = module_0.Untokenizer()
        str_1 = 'dDDj>al{C\rd{t?^E'
        dict_0 = None
        var_0 = module_0.printtoken(stop_tokenizing_0, str_0, untokenizer_0, str_1, dict_0)
    except BaseException:
        pass

def test_case_1():
    try:
        var_0 = module_0.group()
        grammar_0 = module_1.Grammar()
        var_1 = grammar_0.copy()
        dict_0 = {var_1: var_1}
        str_0 = '`a2+x%5s>L-f'
        bytes_0 = None
        list_0 = [bytes_0, bytes_0, bytes_0, bytes_0]
        tuple_0 = (str_0, list_0)
        float_0 = 1786.3
        var_2 = module_0.printtoken(dict_0, var_1, tuple_0, tuple_0, float_0)
    except BaseException:
        pass

def test_case_2():
    try:
        str_0 = 'b'
        module_0.tokenize(str_0)
    except BaseException:
        pass

def test_case_3():
    try:
        int_0 = -3962
        var_0 = None
        tuple_0 = (int_0, var_0)
        list_0 = [tuple_0, tuple_0]
        untokenizer_0 = module_0.Untokenizer()
        str_0 = untokenizer_0.untokenize(list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '&"w+v2=*v3l@]/'
        dict_0 = {str_0: str_0, str_0: str_0}
        untokenizer_0 = module_0.Untokenizer()
        str_1 = untokenizer_0.untokenize(dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        int_0 = 19
        str_0 = '&nvsvs5?c;9('
        tuple_0 = (int_0, str_0)
        iterable_0 = None
        untokenizer_0 = module_0.Untokenizer()
        untokenizer_0.compat(tuple_0, iterable_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -83
        str_0 = '[6b'
        tuple_0 = (int_0, str_0)
        str_1 = 'yu[3\n#S=XEg_!6u3Tv,'
        untokenizer_0 = module_0.Untokenizer()
        untokenizer_0.compat(tuple_0, str_1)
    except BaseException:
        pass

def test_case_7():
    try:
        callable_0 = None
        tuple_0 = module_0.detect_encoding(callable_0)
    except BaseException:
        pass

def test_case_8():
    try:
        untokenizer_0 = module_0.Untokenizer()
        int_0 = 22
        int_1 = 1271
        tuple_0 = (int_0, int_1)
        untokenizer_1 = module_0.Untokenizer()
        untokenizer_1.add_whitespace(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        untokenizer_0 = module_0.Untokenizer()
        grammar_0 = module_1.Grammar()
        var_0 = grammar_0.copy()
        grammar_1 = module_1.Grammar()
        iterator_0 = module_0.generate_tokens(var_0, grammar_1)
        str_0 = untokenizer_0.untokenize(iterator_0)
    except BaseException:
        pass

def test_case_10():
    try:
        int_0 = 1
        str_0 = 'CTa2+'
        tuple_0 = (int_0, str_0)
        iterable_0 = None
        untokenizer_0 = module_0.Untokenizer()
        untokenizer_0.compat(tuple_0, iterable_0)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = 'if True:'
        str_1 = "    pmint('hello()"
        str_2 = 'A`x$1o\x0c4=shmI#y+5\\)['
        str_3 = "print('done')"
        str_4 = [str_2, str_3, str_3, str_0, str_1, str_2, str_3, str_3]
        var_0 = iter(str_4)
        var_1 = var_0.__next__
        iterator_0 = module_0.generate_tokens(var_1)
        var_2 = [t for t in iterator_0]
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "p\x0bint('$ello1)"
        str_1 = ' \t'
        str_2 = 'x,=2'
        str_3 = 'if TrBeU'
        str_4 = "    print('hello')"
        str_5 = "    print('goodbye')"
        str_6 = 'hJ=\t|&dS`,:N!h*q'
        str_7 = [str_0, str_1, str_2, str_3, str_4, str_5, str_6]
        var_0 = iter(str_7)
        var_1 = var_0.__next__
        iterator_0 = module_0.generate_tokens(var_1)
        var_2 = [t for t in iterator_0]
        callable_0 = None
        str_8 = '@@I#Ro(\x0b~?NKH\nl&%*P'
        module_0.tokenize(callable_0, str_8)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = '*?#&)]W3^^\\S|'
        var_0 = iter(str_0)
        var_1 = var_0.__next__
        iterator_0 = module_0.generate_tokens(var_1)
        var_2 = [t for t in iterator_0]
    except BaseException:
        pass

def test_case_14():
    try:
        str_0 = '[H'
        str_1 = '"5,p'
        str_2 = 'x == 2'
        str_3 = '?IQ_2{MWf7$a)6\nfuy'
        str_4 = "    print('hello6)"
        str_5 = "    print('goodbye')"
        str_6 = "print('done')"
        str_7 = [str_0, str_1, str_2, str_3, str_4, str_5, str_6]
        var_0 = iter(str_7)
        var_1 = var_0.__next__
        iterator_0 = module_0.generate_tokens(var_1)
        var_2 = [t for t in iterator_0]
    except BaseException:
        pass

def test_case_15():
    try:
        str_0 = "print('Hello')"
        str_1 = '\\'
        str_2 = ' = 2'
        str_3 = '""rg45C7;GSWuQI'
        str_4 = "    print('goodbye')"
        str_5 = [str_0, str_1, str_2, str_2, str_3, str_4, str_2]
        var_0 = iter(str_5)
        var_1 = var_0.__next__
        iterator_0 = module_0.generate_tokens(var_1)
        var_2 = [t for t in iterator_0]
    except BaseException:
        pass

def test_case_16():
    try:
        str_0 = "print('Hello')"
        str_1 = '\\'
        str_2 = ' = 2'
        str_3 = '""rg45C7;GSWuQI'
        str_4 = "    print('goodbye')"
        str_5 = "pritnt('done')"
        str_6 = [str_0, str_1, str_2, str_4, str_3, str_4, str_5]
        var_0 = iter(str_6)
        var_1 = var_0.__next__
        iterator_0 = module_0.generate_tokens(var_1)
        var_2 = [t for t in iterator_0]
        callable_0 = None
        callable_1 = None
        module_0.tokenize(callable_0, callable_1)
    except BaseException:
        pass

def test_case_17():
    try:
        untokenizer_0 = module_0.Untokenizer()
        str_0 = 'wN7\x0cn'
        list_0 = [str_0, untokenizer_0, untokenizer_0]
        str_1 = untokenizer_0.untokenize(list_0)
    except BaseException:
        pass