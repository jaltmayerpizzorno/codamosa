# Automatically generated by Pynguin.
import pytutils.env as module_0

def test_case_0():
    generator_0 = module_0.parse_env_file_contents()

def test_case_1():
    str_0 = '.L@7awoNf?'
    str_1 = module_0.expand(str_0)

def test_case_2():
    generator_0 = module_0.parse_env_file_contents()
    str_0 = "Functionality to create lazy evaluation objects.\n\nThis includes waiting to import a module until it is actually used.\n\nMost commonly, the 'lazy_import' function is used to import other modules\nin an on-demand fashion. Typically use looks like::\n\n    from bzrlib.lazy_import import lazy_import\n    lazy_import(globals(), '''\n    from bzrlib import (\n        errors,\n        osutils,\n        branch,\n        )\n    import bzrlib.branch\n    ''')\n\nThen 'errors, osutils, branch' and 'bzrlib' will exist as lazy-loaded\nobjects which will be replaced with a real object on first use.\n\nIn general, it is best to only load modules in this way. This is because\nit isn't safe to pass these variables to other functions before they\nhave been replaced. This is especially true for constants, sometimes\ntrue for classes or functions (when used as a factory, or you want\nto inherit from them).\n"
    mutable_mapping_0 = None
    ordered_dict_0 = module_0.load_env_file(str_0, mutable_mapping_0)

def test_case_3():
    str_0 = 'TEST=${HOME}/yeee-$PATH'
    str_1 = 'THISIS=~/a/test'
    str_2 = 'YOLO=~/swaggins/$NONEXISTENT_VAR_THAT_DOES_NOT_EXIST'
    str_3 = [str_0, str_1, str_2]
    var_0 = None
    ordered_dict_0 = module_0.load_env_file(str_3, var_0)
    var_1 = print(ordered_dict_0)
    var_2 = len(ordered_dict_0)
    str_4 = 'TEST'
    var_3 = ordered_dict_0[str_4]
    str_5 = 'THISIS'
    var_4 = ordered_dict_0[str_5]

def test_case_4():
    str_0 = 'TEST=${HOME}/yeee'
    str_1 = 'TEST2="hello world"'
    str_2 = 'TEST3=$TEST2'
    str_3 = 'TEST4="hello "world" world" '
    str_4 = 'select = from where \\"='
    str_5 = 'select = from where \\='
    str_6 = 'select = from where \\'
    str_7 = "select = from where '"
    str_8 = 'select = from where "'
    str_9 = 'select = from where " \''
    str_10 = 'select = from where " "'
    str_11 = "select = from where ' '"
    str_12 = [str_0, str_1, str_2, str_3, str_4, str_5, str_6, str_7, str_8, str_9, str_10, str_11]
    generator_0 = module_0.parse_env_file_contents(str_12)
    var_0 = list(generator_0)