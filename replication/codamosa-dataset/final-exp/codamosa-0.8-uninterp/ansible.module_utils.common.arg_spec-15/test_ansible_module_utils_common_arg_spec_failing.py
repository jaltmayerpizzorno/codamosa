# Automatically generated by Pynguin.
import ansible.module_utils.common.arg_spec as module_0
import ansible.module_utils.errors as module_1

def test_case_0():
    try:
        str_0 = {}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_0)
        var_0 = argument_spec_validator_0.validate(argument_spec_validator_0)
    except BaseException:
        pass

def test_case_1():
    try:
        module_argument_spec_validator_0 = module_0.ModuleArgumentSpecValidator()
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = None
        dict_0 = {int_0: int_0, int_0: int_0, int_0: int_0}
        list_0 = [int_0, dict_0, dict_0, int_0, int_0, dict_0, dict_0]
        dict_1 = {}
        float_0 = -60.2098
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_1, float_0, list_0)
        var_0 = argument_spec_validator_0.validate(dict_0, *list_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = {}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_0)
        dict_0 = {argument_spec_validator_0: str_0}
        list_0 = [str_0, dict_0]
        var_0 = argument_spec_validator_0.validate(dict_0, *list_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'PF{|5&h\x0b@-/EAR'
        str_1 = 'gJ`/;/(d;;38i!<N^g9'
        dict_0 = {}
        list_0 = [dict_0, dict_0]
        validation_result_0 = module_0.ValidationResult(dict_0)
        bytes_0 = b'\xdb\x1fI\x18S\x9d\xa2'
        tuple_0 = (bytes_0, str_1)
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(dict_0, list_0, str_0, validation_result_0, tuple_0)
        list_1 = [str_1, str_0]
        var_0 = argument_spec_validator_0.validate(dict_0, *list_1)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'name'
        str_1 = 'age'
        str_2 = {}
        str_3 = 'bo'
        str_4 = '42'
        str_5 = {str_0: str_3, str_1: str_4}
        str_6 = (str_0, str_1)
        str_7 = [str_6]
        str_8 = (str_0, str_1)
        str_9 = [str_8]
        set_0 = {str_8, str_0, str_8}
        validation_result_0 = module_0.ValidationResult(set_0)
        str_10 = [str_1]
        str_11 = {str_0: str_10}
        argument_spec_validator_0 = module_0.ArgumentSpecValidator(str_2, str_7, str_9, str_5, str_11)
        var_0 = argument_spec_validator_0.validate(str_5)
        list_0 = None
        float_0 = 1753.3625
        required_error_0 = module_1.RequiredError(float_0)
        validation_result_1 = module_0.ValidationResult(float_0)
        list_1 = None
        dict_0 = {str_6: list_1}
        var_1 = argument_spec_validator_0.validate(dict_0)
        tuple_0 = (list_0, required_error_0, validation_result_1)
        var_2 = argument_spec_validator_0.validate(tuple_0)
    except BaseException:
        pass