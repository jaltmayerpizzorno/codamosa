# Automatically generated by Pynguin.
import ansible.plugins.callback.default as module_0

def test_case_0():
    try:
        float_0 = -261.0
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_matched()
        str_0 = 'G}\n)`jMAu\ryI-z5@'
        dict_0 = {var_0: float_0, float_0: var_0, str_0: str_0, float_0: str_0}
        tuple_0 = ()
        set_0 = {tuple_0, callback_module_0, callback_module_0}
        var_1 = callback_module_0.v2_playbook_on_notify(dict_0, set_0)
        var_2 = callback_module_0.set_options(float_0)
    except BaseException:
        pass

def test_case_1():
    try:
        bool_0 = False
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_failed(bool_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_ok(tuple_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '%s is not a known group'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_skipped(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'J$77y^QeRx8'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_unreachable(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_no_hosts_matched()
        callback_module_1 = module_0.CallbackModule()
        set_0 = None
        bool_0 = False
        var_1 = callback_module_1.v2_playbook_on_task_start(set_0, bool_0)
    except BaseException:
        pass

def test_case_6():
    try:
        callback_module_0 = module_0.CallbackModule()
        set_0 = {callback_module_0, callback_module_0}
        var_0 = callback_module_0.v2_playbook_on_task_start(callback_module_0, set_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '/NuO\n\\//\x0b-0'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_cleanup_task_start(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        tuple_0 = ()
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_handler_task_start(tuple_0)
    except BaseException:
        pass

def test_case_9():
    try:
        callback_module_0 = module_0.CallbackModule()
        bool_0 = False
        str_0 = 'organization'
        var_0 = callback_module_0.v2_runner_on_start(bool_0, str_0)
    except BaseException:
        pass

def test_case_10():
    try:
        complex_0 = None
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_on_file_diff(complex_0)
    except BaseException:
        pass

def test_case_11():
    try:
        callback_module_0 = module_0.CallbackModule()
        int_0 = 883
        var_0 = callback_module_0.v2_runner_item_on_ok(int_0)
    except BaseException:
        pass

def test_case_12():
    try:
        callback_module_0 = module_0.CallbackModule()
        float_0 = 4329.118766
        bytes_0 = b'\xd9\xc8\x8e\x80\xeb|\x15K\xfa\xc8\xc6\xbf\x05\x18\xbb'
        callback_module_1 = module_0.CallbackModule()
        float_1 = -874.5
        tuple_0 = (float_0, bytes_0, callback_module_1, float_1)
        bool_0 = False
        callback_module_2 = module_0.CallbackModule()
        var_0 = callback_module_2.v2_playbook_on_notify(tuple_0, bool_0)
        callback_module_3 = module_0.CallbackModule()
        str_0 = 'G&YL\rt%Oi9{K#h\x0c\rF'
        var_1 = callback_module_0.v2_runner_item_on_failed(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        callback_module_0 = module_0.CallbackModule()
        callback_module_1 = module_0.CallbackModule()
        int_0 = -745
        var_0 = callback_module_1.v2_playbook_on_include(int_0)
    except BaseException:
        pass

def test_case_14():
    try:
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_start(callback_module_0)
    except BaseException:
        pass

def test_case_15():
    try:
        bytes_0 = b'Eli\xbb\xb8Sa\xdf7\x03\xc7\x10\xd7'
        list_0 = [bytes_0, bytes_0]
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_retry(list_0)
    except BaseException:
        pass

def test_case_16():
    try:
        dict_0 = {}
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_async_poll(dict_0)
    except BaseException:
        pass

def test_case_17():
    try:
        callback_module_0 = module_0.CallbackModule()
        str_0 = 'XW8-{vcMacgP}#H'
        dict_0 = {callback_module_0: callback_module_0, callback_module_0: callback_module_0, callback_module_0: str_0, str_0: str_0}
        callback_module_1 = module_0.CallbackModule()
        bytes_0 = b' \xcf\xad(\xb1'
        bytes_1 = None
        var_0 = callback_module_1.v2_playbook_on_notify(bytes_0, bytes_1)
        var_1 = callback_module_1.v2_runner_on_async_ok(dict_0)
    except BaseException:
        pass

def test_case_18():
    try:
        tuple_0 = ()
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_runner_on_async_failed(tuple_0)
    except BaseException:
        pass

def test_case_19():
    try:
        str_0 = ']bNWsM(E~>[{@lF'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_play_start(str_0)
    except BaseException:
        pass

def test_case_20():
    try:
        callback_module_0 = module_0.CallbackModule()
        bool_0 = False
        list_0 = [bool_0, bool_0, bool_0, callback_module_0]
        str_0 = 'hw.vendor'
        var_0 = callback_module_0.v2_playbook_on_notify(list_0, str_0)
        callback_module_1 = module_0.CallbackModule()
        var_1 = callback_module_0.v2_runner_item_on_skipped(callback_module_1)
    except BaseException:
        pass

def test_case_21():
    try:
        str_0 = '$'
        callback_module_0 = module_0.CallbackModule()
        var_0 = callback_module_0.v2_playbook_on_stats(str_0)
    except BaseException:
        pass