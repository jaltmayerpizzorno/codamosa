# Automatically generated by Pynguin.
import ansible.parsing.splitter as module_0

def test_case_0():
    try:
        bool_0 = True
        var_0 = module_0.parse_kv(bool_0)
    except BaseException:
        pass

def test_case_1():
    try:
        str_0 = 'mxw:\'{\x0bK3="{'
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = None
        var_0 = module_0.join_args(int_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = 'baz {{ test 4}0"testing more" \n more \nctesting \n {% endif %} '
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = '\n        Splits any random role params off from the role spec and store\n        them in a dictionary of params for parsing later\n        '
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'UaUdrT.c6I'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'Y24\\"'
        var_1 = module_0.parse_kv(str_1)
        set_0 = {str_1, str_1, str_1}
        var_2 = module_0.join_args(set_0)
        var_3 = module_0.split_args(set_0)
    except BaseException:
        pass

def test_case_6():
    try:
        bytes_0 = b'\nt\x07\xb6\r\x8dR\xe3\x17\xa2\x90'
        int_0 = 3887
        var_0 = module_0.parse_kv(bytes_0, int_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = '"p<\n'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_8():
    try:
        bool_0 = False
        str_0 = 'blah="foo bar bletch=\'{"a":1}\' zoinks={"a":1}'
        var_0 = module_0.parse_kv(str_0, bool_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'creates=/tmp/foo eqecutable=/bin/bash\nremov es=/tmp/bar'
        bool_0 = False
        var_0 = module_0.parse_kv(str_0, bool_0)
        str_1 = 'blah="foo bar" bletch=\'{"a":1}\' zoinks={"a":1}'
        var_1 = module_0.parse_kv(str_1, bool_0)
        str_2 = 'Ekn}}z1,)Lkyz'
        var_2 = module_0.parse_kv(str_2, bool_0)
        str_3 = '"km0})6h^h{Sk\''
        var_3 = module_0.split_args(str_3)
    except BaseException:
        pass

def test_case_10():
    try:
        str_0 = '?2^{ZuF{x\x0b@3RKde'
        var_0 = module_0.parse_kv(str_0)
        str_1 = 'bah="fo< \'ar"Iblech=\'{"ay:1}\'7\noin;={"a":1}'
        var_1 = module_0.parse_kv(str_1)
        str_2 = '*r6f^'
        var_2 = module_0.split_args(str_1)
        str_3 = '\\=W<W6b'
        str_4 = 'matched'
        bytes_0 = b'\xba^\x92\xdd\xaa\xe3\xc4\xbaOf^\x9d\x12>ZN3\xd3'
        var_3 = module_0.parse_kv(bytes_0, str_2)
        var_4 = module_0.parse_kv(str_4)
        var_5 = module_0.parse_kv(str_3)
        var_6 = module_0.split_args(str_0)
        list_0 = []
        var_7 = module_0.join_args(list_0)
        str_5 = '3PO{%`'
        var_8 = module_0.parse_kv(str_5)
    except BaseException:
        pass

def test_case_11():
    try:
        str_0 = ':l,={\x0ck{#h_2Qhhuj\r'
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_12():
    try:
        str_0 = "'BR.A_3BUgQ{#c"
        var_0 = module_0.parse_kv(str_0)
    except BaseException:
        pass

def test_case_13():
    try:
        str_0 = 'baz {{ test }} "testing more" \n more \n testing  {% endif } '
        var_0 = module_0.split_args(str_0)
    except BaseException:
        pass