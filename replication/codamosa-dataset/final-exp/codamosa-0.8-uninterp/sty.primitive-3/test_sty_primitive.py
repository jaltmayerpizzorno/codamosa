# Automatically generated by Pynguin.
import sty.primitive as module_0

def test_case_0():
    pass

def test_case_1():
    style_0 = module_0.Style()

def test_case_2():
    register_0 = module_0.Register()
    str_0 = '*n eN+^+^5AzrN'
    style_0 = module_0.Style()
    var_0 = register_0.__setattr__(str_0, style_0)

def test_case_3():
    register_0 = module_0.Register()

def test_case_4():
    register_0 = module_0.Register()
    str_0 = 'G-]q Y#\n\\g4O!eZu'
    style_0 = module_0.Style()
    var_0 = register_0.__setattr__(str_0, style_0)
    list_0 = [str_0]
    str_1 = register_0.__call__(*list_0)
    register_1 = register_0.copy()
    register_1.mute()

def test_case_5():
    dict_0 = {}
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_2 = register_1.copy()
    str_0 = register_2.__call__(**dict_0)

def test_case_6():
    str_0 = "CE.+Jz}'X:$N2qk\\ GbC"
    callable_0 = None
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    register_1.set_renderfunc(str_0, callable_0)

def test_case_7():
    register_0 = module_0.Register()
    register_1 = register_0.copy()
    dict_0 = register_1.as_dict()

def test_case_8():
    style_0 = module_0.Style()
    register_0 = module_0.Register()
    var_0 = register_0.as_namedtuple()
    register_1 = register_0.copy()
    str_0 = '\n    Use this function to mute multiple register-objects at once.\n\n    :param objects: Pass multiple register-objects to the function.\n    '
    style_1 = module_0.Style()
    var_1 = register_1.__setattr__(str_0, style_1)
    str_1 = 'K\x0c'
    style_2 = module_0.Style()
    register_2 = module_0.Register()
    register_1.unmute()
    register_3 = register_2.copy()
    var_2 = register_3.__setattr__(str_1, style_2)
    str_2 = 'O[P8L6tVU[\n#3T'
    var_3 = register_3.__setattr__(str_2, style_2)

def test_case_9():
    register_0 = module_0.Register()
    str_0 = 'G-]q Y#\n\\g4O!eZu'
    style_0 = module_0.Style()
    var_0 = register_0.__setattr__(str_0, style_0)
    list_0 = [str_0]
    str_1 = register_0.__call__(*list_0)
    register_1 = register_0.copy()
    register_1.mute()
    dict_0 = register_1.as_dict()

def test_case_10():
    register_0 = module_0.Register()
    int_0 = -3453
    list_0 = [int_0]
    str_0 = register_0.__call__(*list_0)
    str_1 = 'G-]q Y#\n\\g4O!eZu'
    style_0 = module_0.Style()
    var_0 = register_0.__setattr__(str_1, style_0)
    list_1 = [str_1]
    str_2 = register_0.__call__(*list_1)
    register_1 = register_0.copy()
    register_1.mute()