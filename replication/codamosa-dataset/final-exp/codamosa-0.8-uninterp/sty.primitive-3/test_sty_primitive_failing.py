# Automatically generated by Pynguin.
import sty.primitive as module_0
import sty.rendertype as module_1

def test_case_0():
    try:
        register_0 = module_0.Register()
        str_0 = '*n eN+^+^5AzrN'
        list_0 = [register_0]
        style_0 = module_0.Style(*list_0)
        var_0 = register_0.__setattr__(str_0, style_0)
    except BaseException:
        pass

def test_case_1():
    try:
        register_0 = module_0.Register()
        str_0 = '*neeN+^+^hAzrN'
        list_0 = [str_0]
        str_1 = register_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_2():
    try:
        register_0 = module_0.Register()
        register_0.mute()
        int_0 = -431
        list_0 = [int_0, int_0, int_0, int_0]
        str_0 = register_0.__call__(*list_0)
        register_1 = module_0.Register()
        str_1 = register_1.__call__()
        var_0 = register_1.as_namedtuple()
        type_0 = None
        register_0.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_3():
    try:
        register_0 = module_0.Register()
        register_0.mute()
        float_0 = 991.319446
        register_0.set_eightbit_call(float_0)
    except BaseException:
        pass

def test_case_4():
    try:
        str_0 = 'Zz'
        register_0 = module_0.Register()
        register_0.set_rgb_call(str_0)
    except BaseException:
        pass

def test_case_5():
    try:
        register_0 = module_0.Register()
        register_0.unmute()
        str_0 = 'G-]q Y#\n\\TfOjeZu'
        list_0 = [str_0]
        str_1 = register_0.__call__(*list_0)
    except BaseException:
        pass

def test_case_6():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        var_0 = register_1.as_namedtuple()
        register_2 = register_1.copy()
        str_0 = register_2.__call__()
        register_0.set_rgb_call(str_0)
    except BaseException:
        pass

def test_case_7():
    try:
        style_0 = module_0.Style()
        register_0 = module_0.Register()
        var_0 = register_0.as_namedtuple()
        register_1 = register_0.copy()
        str_0 = '\n    Use this function to mute multiple register-objects at once.\n\n    :param objects: Pass multiple register-objects to the function.\n    '
        style_1 = module_0.Style()
        var_1 = register_1.__setattr__(str_0, style_1)
        style_2 = module_0.Style()
        type_0 = None
        callable_0 = None
        register_1.set_renderfunc(type_0, callable_0)
        register_2 = module_0.Register()
        register_3 = register_2.copy()
        register_3.mute()
        register_4 = module_0.Register()
        register_5 = register_2.copy()
        register_5.set_rgb_call(type_0)
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = "B0(}>J !7k,OG'"
        int_0 = -347
        list_0 = [str_0, int_0, str_0]
        register_0 = module_0.Register()
        str_1 = register_0.__call__(*list_0)
        register_1 = module_0.Register()
        str_2 = 'G-]q Y#\n\\g4O!eZu'
        list_1 = [str_2]
        str_3 = register_1.__call__(*list_1)
    except BaseException:
        pass

def test_case_9():
    try:
        register_0 = module_0.Register()
        type_0 = None
        bool_0 = False
        register_0.set_renderfunc(type_0, bool_0)
        str_0 = register_0.__call__()
        var_0 = register_0.as_namedtuple()
        dict_0 = register_0.as_dict()
        dict_1 = {str_0: register_0}
        style_0 = module_0.Style()
        var_1 = register_0.__setattr__(str_0, style_0)
        register_1 = module_0.Register()
        register_1.set_renderfunc(register_0, dict_1)
        type_1 = None
        register_0.set_rgb_call(type_1)
        register_2 = register_0.copy()
        register_0.unmute()
        str_1 = register_2.__call__(**dict_1)
        int_0 = -1904
        style_1 = style_0.__new__(int_0)
    except BaseException:
        pass

def test_case_10():
    try:
        register_0 = module_0.Register()
        type_0 = None
        bool_0 = False
        register_0.set_renderfunc(type_0, bool_0)
        str_0 = register_0.__call__()
        var_0 = register_0.as_namedtuple()
        dict_0 = register_0.as_dict()
        str_1 = '3|!lU~UxlPz'
        register_0.set_eightbit_call(type_0)
        dict_1 = {str_1: register_0}
        style_0 = module_0.Style()
        var_1 = register_0.__setattr__(str_1, style_0)
        register_1 = module_0.Register()
        register_1.set_renderfunc(register_0, dict_1)
        type_1 = None
        dict_2 = register_1.as_dict()
        register_0.set_rgb_call(type_1)
        register_2 = register_0.copy()
        register_0.unmute()
        bytes_0 = None
        style_1 = style_0.__new__(bytes_0)
    except BaseException:
        pass

def test_case_11():
    try:
        register_0 = module_0.Register()
        register_1 = register_0.copy()
        var_0 = register_1.as_namedtuple()
        str_0 = 'qmFkkYDOOZ'
        list_0 = [str_0, str_0, str_0, str_0]
        list_1 = None
        style_0 = module_0.Style()
        list_2 = [style_0]
        dict_0 = {str_0: list_1, str_0: list_2, str_0: list_0}
        register_2 = module_0.Register()
        str_1 = register_2.__call__(*list_0, **dict_0)
        register_3 = module_0.Register()
        register_4 = register_3.copy()
        callable_0 = None
        register_3.set_renderfunc(str_0, callable_0)
        str_2 = register_1.__call__(**dict_0)
        register_5 = register_0.copy()
        register_6 = register_3.copy()
        register_0.unmute()
        dict_1 = register_5.as_dict()
        register_3.mute()
        register_7 = register_6.copy()
        dict_2 = register_3.as_dict()
        register_8 = register_3.copy()
        register_9 = module_0.Register()
        str_3 = ''
        var_1 = register_7.__setattr__(str_3, style_0)
        str_4 = '\n47Yua` pb\rSByeYJ'
        list_3 = [style_0, register_8, style_0, register_5]
        style_1 = module_0.Style(*list_3)
        var_2 = register_0.__setattr__(str_4, style_1)
    except BaseException:
        pass

def test_case_12():
    try:
        register_0 = module_0.Register()
        str_0 = '*n N^+5zrN'
        render_type_0 = module_1.RenderType()
        list_0 = [render_type_0, str_0, str_0]
        style_0 = module_0.Style(*list_0)
        str_1 = '\x0cLEdG2bu2(d'
        var_0 = register_0.__setattr__(str_1, style_0)
    except BaseException:
        pass