# Automatically generated by Pynguin.
import mimesis.providers.choice as module_0

def test_case_0():
    try:
        optional_0 = None
        int_0 = None
        choice_0 = module_0.Choice()
        var_0 = choice_0.__call__(optional_0, int_0)
    except BaseException:
        pass

def test_case_1():
    try:
        choice_0 = module_0.Choice()
        choice_1 = module_0.Choice()
        choice_2 = module_0.Choice()
        optional_0 = None
        var_0 = choice_1.__call__(optional_0)
    except BaseException:
        pass

def test_case_2():
    try:
        tuple_0 = ()
        bool_0 = True
        str_0 = 'e1~Y*{3!Pmhm_F<o='
        list_0 = [str_0]
        choice_0 = module_0.Choice(*list_0)
        var_0 = choice_0.__call__(tuple_0, bool_0)
    except BaseException:
        pass

def test_case_3():
    try:
        str_0 = '3S7ZGqS<"E:."G'
        choice_0 = module_0.Choice()
        int_0 = -968
        bool_0 = True
        var_0 = choice_0.__call__(str_0, int_0, bool_0)
    except BaseException:
        pass

def test_case_4():
    try:
        choice_0 = module_0.Choice()
        int_0 = 2129
        str_0 = '3S7ZGqS<"E:."G'
        choice_1 = module_0.Choice()
        var_0 = choice_1.__call__(str_0, int_0)
        str_1 = '+Ty;XN:I|?('
        choice_2 = module_0.Choice()
        optional_0 = None
        bool_0 = False
        list_0 = [str_1, optional_0, bool_0]
        var_1 = choice_1.__call__(list_0, int_0)
        dict_0 = {str_1: choice_0, str_1: int_0}
        choice_3 = module_0.Choice(**dict_0)
    except BaseException:
        pass

def test_case_5():
    try:
        bool_0 = True
        choice_0 = module_0.Choice()
        str_0 = '+Ty;XN:I|?('
        list_0 = None
        tuple_0 = (list_0, str_0)
        var_0 = choice_0.__call__(tuple_0, bool_0)
        sequence_0 = None
        var_1 = choice_0.__call__(sequence_0)
    except BaseException:
        pass

def test_case_6():
    try:
        choice_0 = module_0.Choice()
        str_0 = ':e#d<lZ9SAY86l2'
        int_0 = 1801
        bool_0 = True
        var_0 = choice_0.__call__(str_0, int_0, bool_0)
    except BaseException:
        pass