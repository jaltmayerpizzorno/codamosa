# Automatically generated by Pynguin.
import typed_ast._ast3 as module_0
import py_backwards.utils.tree as module_1
import typed_ast.ast3 as module_2

def test_case_0():
    try:
        a_s_t_0 = module_0.AST()
        tuple_0 = module_1.get_non_exp_parent_and_index(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_1():
    try:
        int_0 = 1696
        a_s_t_0 = None
        module_1.insert_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_2():
    try:
        int_0 = -3684
        a_s_t_0 = None
        module_1.replace_at(int_0, a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_3():
    try:
        a_s_t_0 = module_0.AST()
        str_0 = '>Fx\t}mk=,uu_cwO'
        str_1 = 'i\x0c.0<LrU%<i /L'
        dict_0 = {str_0: a_s_t_0, str_1: str_1}
        var_0 = module_1.get_closest_parent_of(a_s_t_0, a_s_t_0, dict_0)
    except BaseException:
        pass

def test_case_4():
    try:
        a_s_t_0 = module_0.AST()
        int_0 = -889
        list_0 = [a_s_t_0, a_s_t_0, a_s_t_0]
        module_1.insert_at(int_0, a_s_t_0, list_0)
    except BaseException:
        pass

def test_case_5():
    try:
        str_0 = 'foo = 1 + 2'
        var_0 = module_2.parse(str_0)
        a_s_t_0 = module_1.get_parent(var_0, var_0)
    except BaseException:
        pass

def test_case_6():
    try:
        int_0 = -1166
        a_s_t_0 = module_0.AST()
        list_0 = []
        module_1.insert_at(int_0, a_s_t_0, list_0)
        a_s_t_1 = module_1.get_parent(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_7():
    try:
        str_0 = 'a = 1'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_1.value
        tuple_0 = module_1.get_non_exp_parent_and_index(var_0, var_2)
        var_3 = module_2.parse(str_0)
        var_4 = var_1.body[int_0]
    except BaseException:
        pass

def test_case_8():
    try:
        str_0 = 'a = 1'
        var_0 = module_2.parse(str_0)
        int_0 = 0
        var_1 = var_0.body[int_0]
        var_2 = var_0.body[int_0]
        tuple_0 = module_1.get_non_exp_parent_and_index(var_0, var_1)
        str_1 = 'def f(a):\n    b = a'
        var_3 = module_2.parse(str_1)
        var_4 = var_3.body[int_0]
        var_5 = var_4.body[int_0]
        var_6 = var_5.value
        a_s_t_0 = module_0.AST()
        a_s_t_1 = module_1.get_parent(a_s_t_0, a_s_t_0)
    except BaseException:
        pass

def test_case_9():
    try:
        str_0 = 'class X: pass'
        var_0 = module_2.parse(str_0)
        iterable_0 = module_1.find(var_0, str_0)
        var_1 = list(iterable_0)
    except BaseException:
        pass